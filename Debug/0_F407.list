
0_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a4  0800b3a4  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800b3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020124  2**0
                  CONTENTS
 10 .bss          00002128  20000124  20000124  00020124  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2000224c  2000224c  00020124  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028eb0  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f8a  00000000  00000000  00049047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  0004dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000134b  00000000  00000000  0004f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026783  00000000  00000000  00050b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020f39  00000000  00000000  0007730e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da59d  00000000  00000000  00098247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000066ec  00000000  00000000  001727e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000038  00000000  00000000  00178ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000124 	.word	0x20000124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b31c 	.word	0x0800b31c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000128 	.word	0x20000128
 80001c4:	0800b31c 	.word	0x0800b31c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CO_error>:

    return;
}

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 80004c4:	b480      	push	{r7}
 80004c6:	b08d      	sub	sp, #52	; 0x34
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	460b      	mov	r3, r1
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	4613      	mov	r3, r2
 80004d8:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	f000 80a6 	beq.w	800062e <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	08db      	lsrs	r3, r3, #3
 80004e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	2201      	movs	r2, #1
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 80004fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004fe:	2b09      	cmp	r3, #9
 8000500:	d90a      	bls.n	8000518 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000502:	2305      	movs	r3, #5
 8000504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000508:	2301      	movs	r3, #1
 800050a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 800050e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000512:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800052a:	4013      	ands	r3, r2
 800052c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d004      	beq.n	8000540 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <CO_error+0x88>
            return;
 800053e:	e079      	b.n	8000634 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000544:	2b00      	cmp	r3, #0
 8000546:	d074      	beq.n	8000632 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000548:	2300      	movs	r3, #0
 800054a:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	061a      	lsls	r2, r3, #24
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	4313      	orrs	r3, r2
 8000554:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000558:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800055e:	f3ef 8210 	mrs	r2, PRIMASK
 8000562:	617a      	str	r2, [r7, #20]
  return(result);
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
    if (setError) {
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d008      	beq.n	8000584 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8000572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800057a:	4313      	orrs	r3, r2
 800057c:	b2da      	uxtb	r2, r3
 800057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e00b      	b.n	800059c <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8000584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b25a      	sxtb	r2, r3
 800058a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800058e:	43db      	mvns	r3, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4013      	ands	r3, r2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	b2da      	uxtb	r2, r3
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	7f1b      	ldrb	r3, [r3, #28]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d93c      	bls.n	800061e <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	7f5b      	ldrb	r3, [r3, #29]
 80005a8:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 80005aa:	7efb      	ldrb	r3, [r7, #27]
 80005ac:	3301      	adds	r3, #1
 80005ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	7f1b      	ldrb	r3, [r3, #28]
 80005b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d302      	bcc.n	80005c4 <CO_error+0x100>
            fifoWrPtrNext = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	7f9b      	ldrb	r3, [r3, #30]
 80005c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d103      	bne.n	80005d8 <CO_error+0x114>
            em->fifoOverflow = 1;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	77da      	strb	r2, [r3, #31]
 80005d6:	e022      	b.n	800061e <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	7efb      	ldrb	r3, [r7, #27]
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	4413      	add	r3, r2
 80005e2:	6a3a      	ldr	r2, [r7, #32]
 80005e4:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	7efb      	ldrb	r3, [r7, #27]
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	4413      	add	r3, r2
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80005fa:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	7f1b      	ldrb	r3, [r3, #28]
 8000608:	3b01      	subs	r3, #1
 800060a:	429a      	cmp	r2, r3
 800060c:	d207      	bcs.n	800061e <CO_error+0x15a>
                em->fifoCount++;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000614:	3301      	adds	r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	f383 8810 	msr	PRIMASK, r3
}
 800062c:	e002      	b.n	8000634 <CO_error+0x170>
        return;
 800062e:	bf00      	nop
 8000630:	e000      	b.n	8000634 <CO_error+0x170>
            return;
 8000632:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000634:	3734      	adds	r7, #52	; 0x34
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <CO_RPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t syncWas)
{
 800063e:	b590      	push	{r4, r7, lr}
 8000640:	b097      	sub	sp, #92	; 0x5c
 8000642:	af02      	add	r7, sp, #8
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]
 (void)		syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
 (void)		timerNext_us;
#endif

CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	633b      	str	r3, [r7, #48]	; 0x30

    if (PDO->valid && NMTisOperational
 8000650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 8124 	beq.w	80008a2 <CO_RPDO_process+0x264>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	f000 8120 	beq.w	80008a2 <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 8000662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <CO_RPDO_process+0x36>
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800066e:	2b00      	cmp	r3, #0
 8000670:	f040 8117 	bne.w	80008a2 <CO_RPDO_process+0x264>
#endif
       ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800067a:	2b0a      	cmp	r3, #10
 800067c:	d927      	bls.n	80006ce <CO_RPDO_process+0x90>
        	{
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8000684:	2b0b      	cmp	r3, #11
 8000686:	bf14      	ite	ne
 8000688:	2301      	movne	r3, #1
 800068a:	2300      	moveq	r3, #0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8000696:	2b0c      	cmp	r3, #12
 8000698:	d102      	bne.n	80006a0 <CO_RPDO_process+0x62>
 800069a:	f248 2310 	movw	r3, #33296	; 0x8210
 800069e:	e001      	b.n	80006a4 <CO_RPDO_process+0x66>
 80006a0:	f248 2320 	movw	r3, #33312	; 0x8220
 80006a4:	857b      	strh	r3, [r7, #42]	; 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ac:	7b1b      	ldrb	r3, [r3, #12]
 80006ae:	461a      	mov	r2, r3
 80006b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	2204      	movs	r2, #4
 80006b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006b8:	f7ff ff04 	bl	80004c4 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 80006bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <CO_RPDO_process+0x88>
 80006c2:	2201      	movs	r2, #1
 80006c4:	e000      	b.n	80006c8 <CO_RPDO_process+0x8a>
 80006c6:	2200      	movs	r2, #0
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        	}

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) { bufNo = 1; }
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00d      	beq.n	80006fa <CO_RPDO_process+0xbc>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <CO_RPDO_process+0xbc>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <CO_RPDO_process+0xbc>
 80006f4:	2301      	movs	r3, #1
 80006f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80006fe:	e07d      	b.n	80007fc <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 8000700:	2301      	movs	r3, #1
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8000704:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000708:	332e      	adds	r3, #46	; 0x2e
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
            OD_size_t verifyLength = 0U;
 8000712:	2300      	movs	r3, #0
 8000714:	643b      	str	r3, [r7, #64]	; 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8000716:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	325a      	adds	r2, #90	; 0x5a
 800071e:	2100      	movs	r1, #0
 8000720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000724:	2300      	movs	r3, #0
 8000726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800072a:	e04a      	b.n	80007c2 <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 800072c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000730:	015b      	lsls	r3, r3, #5
 8000732:	3310      	adds	r3, #16
 8000734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000736:	4413      	add	r3, r2
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	330c      	adds	r3, #12
 800073e:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800074a:	4413      	add	r3, r2
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 800074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000750:	2b08      	cmp	r3, #8
 8000752:	d83d      	bhi.n	80007d0 <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 800075a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800075c:	2b08      	cmp	r3, #8
 800075e:	d901      	bls.n	8000764 <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8000760:	2308      	movs	r3, #8
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8000764:	7ffb      	ldrb	r3, [r7, #31]
 8000766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000768:	429a      	cmp	r2, r3
 800076a:	d911      	bls.n	8000790 <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2208      	movs	r2, #8
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00a fd97 	bl	800b2a8 <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 800077a:	7ffa      	ldrb	r2, [r7, #31]
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000782:	4618      	mov	r0, r3
 8000784:	f00a fdbc 	bl	800b300 <memcpy>
                    dataOD = buf;
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
 800078e:	e001      	b.n	8000794 <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 8000790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	69dc      	ldr	r4, [r3, #28]
 800079e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80007a8:	47a0      	blx	r4
                *dataOffset = mappedLength;
 80007aa:	7ffa      	ldrb	r2, [r7, #31]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 80007b0:	7ffb      	ldrb	r3, [r7, #31]
 80007b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007b4:	4413      	add	r3, r2
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80007b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007bc:	3301      	adds	r3, #1
 80007be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c4:	7b5b      	ldrb	r3, [r3, #13]
 80007c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d3ae      	bcc.n	800072c <CO_RPDO_process+0xee>
 80007ce:	e000      	b.n	80007d2 <CO_RPDO_process+0x194>
                    break;
 80007d0:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80007d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	d805      	bhi.n	80007e4 <CO_RPDO_process+0x1a6>
 80007d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007da:	7b1b      	ldrb	r3, [r3, #12]
 80007dc:	461a      	mov	r2, r3
 80007de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d00b      	beq.n	80007fc <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 80007e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80007f4:	222c      	movs	r2, #44	; 0x2c
 80007f6:	2101      	movs	r1, #1
 80007f8:	f7ff fe64 	bl	80004c4 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80007fc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	325a      	adds	r2, #90	; 0x5a
 8000804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000808:	2b00      	cmp	r3, #0
 800080a:	f47f af79 	bne.w	8000700 <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000814:	2b00      	cmp	r3, #0
 8000816:	d058      	beq.n	80008ca <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8000818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800081a:	2b00      	cmp	r3, #0
 800081c:	d017      	beq.n	800084e <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800082a:	429a      	cmp	r2, r3
 800082c:	d90a      	bls.n	8000844 <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	2217      	movs	r2, #23
 800083e:	2100      	movs	r1, #0
 8000840:	f7ff fe40 	bl	80004c4 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2201      	movs	r2, #1
 8000848:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
       ) {
 800084c:	e03d      	b.n	80008ca <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000854:	2b00      	cmp	r3, #0
 8000856:	d038      	beq.n	80008ca <CO_RPDO_process+0x28c>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000864:	429a      	cmp	r2, r3
 8000866:	d230      	bcs.n	80008ca <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	441a      	add	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000884:	429a      	cmp	r2, r3
 8000886:	d920      	bls.n	80008ca <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	f248 2350 	movw	r3, #33360	; 0x8250
 8000898:	2217      	movs	r2, #23
 800089a:	2101      	movs	r1, #1
 800089c:	f7ff fe12 	bl	80004c4 <CO_error>
       ) {
 80008a0:	e013      	b.n	80008ca <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 80008a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <CO_RPDO_process+0x272>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10d      	bne.n	80008cc <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 80008c8:	e000      	b.n	80008cc <CO_RPDO_process+0x28e>
       ) {
 80008ca:	bf00      	nop
}
 80008cc:	bf00      	nop
 80008ce:	3754      	adds	r7, #84	; 0x54
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <CO_TPDOsend>:
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b093      	sub	sp, #76	; 0x4c
 80008d8:	af02      	add	r7, sp, #8
 80008da:	6078      	str	r0, [r7, #4]
CO_PDO_common_t* PDO 	= &TPDO->PDO_common;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t* 	dataTPDO 	= &TPDO->CANtxBuff->data[0];
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80008e6:	3305      	adds	r3, #5
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
OD_size_t verifyLength 	= 0U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <CO_TPDOsend+0x2e>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80008fe:	2bfd      	cmp	r3, #253	; 0xfd
 8000900:	d901      	bls.n	8000906 <CO_TPDOsend+0x32>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <CO_TPDOsend+0x34>
 8000906:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000910:	e066      	b.n	80009e0 <CO_TPDOsend+0x10c>
    {
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8000912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000916:	015b      	lsls	r3, r3, #5
 8000918:	3310      	adds	r3, #16
 800091a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800091c:	4413      	add	r3, r2
 800091e:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 800092a:	7efb      	ldrb	r3, [r7, #27]
 800092c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800092e:	4413      	add	r3, r2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8000932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000934:	2b08      	cmp	r3, #8
 8000936:	d85a      	bhi.n	80009ee <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 800093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000940:	2b08      	cmp	r3, #8
 8000942:	d901      	bls.n	8000948 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8000944:	2308      	movs	r3, #8
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8000948:	7efb      	ldrb	r3, [r7, #27]
 800094a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800094c:	429a      	cmp	r2, r3
 800094e:	d90a      	bls.n	8000966 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2208      	movs	r2, #8
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fca5 	bl	800b2a8 <memset>
            dataTPDOCopy = buf;
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000964:	e001      	b.n	800096a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8000966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	699c      	ldr	r4, [r3, #24]
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800097a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800097c:	69f8      	ldr	r0, [r7, #28]
 800097e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8000980:	7efa      	ldrb	r2, [r7, #27]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8000986:	7efb      	ldrb	r3, [r7, #27]
 8000988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800098a:	429a      	cmp	r2, r3
 800098c:	d906      	bls.n	800099c <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 800098e:	7efa      	ldrb	r2, [r7, #27]
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000998:	f00a fcb2 	bl	800b300 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 800099c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	3244      	adds	r2, #68	; 0x44
 80009a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a8:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00e      	beq.n	80009ce <CO_TPDOsend+0xfa>
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00b      	beq.n	80009ce <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009c0:	440b      	add	r3, r1
 80009c2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80009ce:	7efb      	ldrb	r3, [r7, #27]
 80009d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009d2:	4413      	add	r3, r2
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 80009d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009da:	3301      	adds	r3, #1
 80009dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	7b5b      	ldrb	r3, [r3, #13]
 80009e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d392      	bcc.n	8000912 <CO_TPDOsend+0x3e>
 80009ec:	e000      	b.n	80009f0 <CO_TPDOsend+0x11c>
            break;
 80009ee:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80009f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d805      	bhi.n	8000a02 <CO_TPDOsend+0x12e>
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	7b1b      	ldrb	r3, [r3, #12]
 80009fa:	461a      	mov	r2, r3
 80009fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00e      	beq.n	8000a20 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 8000a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000a12:	222c      	movs	r2, #44	; 0x2c
 8000a14:	2101      	movs	r1, #1
 8000a16:	f7ff fd55 	bl	80004c4 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8000a1a:	f06f 030c 	mvn.w	r3, #12
 8000a1e:	e019      	b.n	8000a54 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f000 fb2f 	bl	80010b0 <CO_CANsend>
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3744      	adds	r7, #68	; 0x44
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}

08000a5c <CO_TPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t 		syncWas )
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
(void)timerNext_us;
#endif
(void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80dc 	beq.w	8000c30 <CO_TPDO_process+0x1d4>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 80d8 	beq.w	8000c30 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d004      	beq.n	8000a94 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO))
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8000a90:	2bfd      	cmp	r3, #253	; 0xfd
 8000a92:	d946      	bls.n	8000b22 <CO_TPDO_process+0xc6>
        {
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d018      	beq.n	8000ad0 <CO_TPDO_process+0x74>
            {
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d205      	bcs.n	8000ab6 <CO_TPDO_process+0x5a>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	e000      	b.n	8000ab8 <CO_TPDO_process+0x5c>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {TPDO->sendRequest = true;}
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <CO_TPDO_process+0x74>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d123      	bne.n	8000b22 <CO_TPDO_process+0xc6>
            {
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	77fb      	strb	r3, [r7, #31]
 8000ade:	e01b      	b.n	8000b18 <CO_TPDO_process+0xbc>
                {
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8000ae0:	7ffa      	ldrb	r2, [r7, #31]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	3244      	adds	r2, #68	; 0x44
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL)
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00f      	beq.n	8000b12 <CO_TPDO_process+0xb6>
                    {
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	69b9      	ldr	r1, [r7, #24]
 8000afa:	440b      	add	r3, r1
 8000afc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000b00:	4013      	ands	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <CO_TPDO_process+0xb6>
                        	{TPDO->sendRequest = true; break;}
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8000b10:	e007      	b.n	8000b22 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8000b12:	7ffb      	ldrb	r3, [r7, #31]
 8000b14:	3301      	adds	r3, #1
 8000b16:	77fb      	strb	r3, [r7, #31]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	7b5b      	ldrb	r3, [r3, #13]
 8000b1c:	7ffa      	ldrb	r2, [r7, #31]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3de      	bcc.n	8000ae0 <CO_TPDO_process+0x84>


#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8000b28:	2bfd      	cmp	r3, #253	; 0xfd
 8000b2a:	d91d      	bls.n	8000b68 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d205      	bcs.n	8000b44 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	e000      	b.n	8000b46 <CO_TPDO_process+0xea>
 8000b44:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) { (void)CO_TPDOsend(TPDO); }
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d07d      	beq.n	8000c52 <CO_TPDO_process+0x1f6>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d178      	bne.n	8000c52 <CO_TPDO_process+0x1f6>
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff feb7 	bl	80008d4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000b66:	e074      	b.n	8000c52 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d06f      	beq.n	8000c52 <CO_TPDO_process+0x1f6>
 8000b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d06c      	beq.n	8000c52 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d062      	beq.n	8000c52 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fea1 	bl	80008d4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000b92:	e05e      	b.n	8000c52 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d119      	bne.n	8000bd2 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8000ba4:	7c5b      	ldrb	r3, [r3, #17]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <CO_TPDO_process+0x162>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	22fe      	movs	r2, #254	; 0xfe
 8000bb8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8000bbc:	e009      	b.n	8000bd2 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8000bc4:	085b      	lsrs	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8000bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8000bda:	d112      	bne.n	8000c02 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8000be2:	7c9a      	ldrb	r2, [r3, #18]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d131      	bne.n	8000c52 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f7ff fe6a 	bl	80008d4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000c00:	e027      	b.n	8000c52 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d11a      	bne.n	8000c52 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fe53 	bl	80008d4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000c2e:	e010      	b.n	8000c52 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 8000c50:	e000      	b.n	8000c54 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000c52:	bf00      	nop
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7c9b      	ldrb	r3, [r3, #18]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	749a      	strb	r2, [r3, #18]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7c9a      	ldrb	r2, [r3, #18]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7c5b      	ldrb	r3, [r3, #17]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d902      	bls.n	8000c82 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf0c      	ite	eq
 8000c90:	2301      	moveq	r3, #1
 8000c92:	2300      	movne	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7c92      	ldrb	r2, [r2, #18]
 8000ca4:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	f000 f9fd 	bl	80010b0 <CO_CANsend>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 8088 	beq.w	8000dea <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d902      	bls.n	8000cf4 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8000d02:	2301      	movs	r3, #1
 8000d04:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <CO_SYNC_process+0x5c>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	e000      	b.n	8000d1e <CO_SYNC_process+0x5e>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d031      	beq.n	8000d8a <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00a      	beq.n	8000d44 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d828      	bhi.n	8000d8a <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff ff8d 	bl	8000c5c <CO_SYNCsend>
 8000d42:	e022      	b.n	8000d8a <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	7c1b      	ldrb	r3, [r3, #16]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d11e      	bne.n	8000d8a <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	085b      	lsrs	r3, r3, #1
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4413      	add	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d202      	bcs.n	8000d64 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d20d      	bcs.n	8000d8a <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d7c:	2218      	movs	r2, #24
 8000d7e:	2101      	movs	r1, #1
 8000d80:	f7ff fba0 	bl	80004c4 <CO_error>
                        SYNC->timeoutError = 2;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2202      	movs	r2, #2
 8000d88:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d015      	beq.n	8000dbe <CO_SYNC_process+0xfe>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d010      	beq.n	8000dbe <CO_SYNC_process+0xfe>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	699a      	ldr	r2, [r3, #24]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d909      	bls.n	8000dbe <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8000db2:	2302      	movs	r3, #2
 8000db4:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	e002      	b.n	8000dc4 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7a1b      	ldrb	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d01a      	beq.n	8000e02 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	7a1b      	ldrb	r3, [r3, #8]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	f248 2340 	movw	r3, #33344	; 0x8240
 8000dda:	2219      	movs	r2, #25
 8000ddc:	2101      	movs	r1, #1
 8000dde:	f7ff fb71 	bl	80004c4 <CO_error>
            SYNC->receiveError = 0;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2200      	movs	r2, #0
 8000de6:	721a      	strb	r2, [r3, #8]
 8000de8:	e00b      	b.n	8000e02 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8000e02:	7ffb      	ldrb	r3, [r7, #31]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d10f      	bne.n	8000e28 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7c1b      	ldrb	r3, [r3, #16]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d108      	bne.n	8000e22 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2218      	movs	r2, #24
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f7ff fb51 	bl	80004c4 <CO_error>
        }
        SYNC->timeoutError = 1;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <CO_NMT_getInternalState+0x16>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f993 3000 	ldrsb.w	r3, [r3]
 8000e46:	e000      	b.n	8000e4a <CO_NMT_getInternalState+0x18>
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <CO_process_SYNC>:
    return reset;
}

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b088      	sub	sp, #32
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d131      	bne.n	8000ed2 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffdd 	bl	8000e32 <CO_NMT_getInternalState>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8000e7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000e80:	2b7f      	cmp	r3, #127	; 0x7f
 8000e82:	d003      	beq.n	8000e8c <CO_process_SYNC+0x36>
 8000e84:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d101      	bne.n	8000e90 <CO_process_SYNC+0x3a>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <CO_process_SYNC+0x3c>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	6979      	ldr	r1, [r7, #20]
 8000e9e:	f7ff ff0f 	bl	8000cc0 <CO_SYNC_process>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d009      	beq.n	8000ec0 <CO_process_SYNC+0x6a>
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dc0d      	bgt.n	8000ecc <CO_process_SYNC+0x76>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00d      	beq.n	8000ed0 <CO_process_SYNC+0x7a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d000      	beq.n	8000eba <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8000eb8:	e008      	b.n	8000ecc <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e008      	b.n	8000ed2 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f936 	bl	8001136 <CO_CANclearPendingSyncPDOs>
 8000eca:	e002      	b.n	8000ed2 <CO_process_SYNC+0x7c>
                break;
 8000ecc:	bf00      	nop
 8000ece:	e000      	b.n	8000ed2 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8000ed0:	bf00      	nop
        }
    }

    return syncWas;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <CO_process_RPDO>:
void
CO_process_RPDO (	CO_t* 		co,
					bool_t 		syncWas,
					uint32_t 	timeDifference_us,
					uint32_t* 	timerNext_us )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {  return; }
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d124      	bne.n	8000f3c <CO_process_RPDO+0x60>

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff9b 	bl	8000e32 <CO_NMT_getInternalState>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	82fb      	strh	r3, [r7, #22]
 8000f0e:	e011      	b.n	8000f34 <CO_process_RPDO+0x58>
    {
        CO_RPDO_process (	&co->RPDO[i],
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f14:	8afb      	ldrh	r3, [r7, #22]
 8000f16:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	18d0      	adds	r0, r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	f7ff fb88 	bl	800063e <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	3301      	adds	r3, #1
 8000f32:	82fb      	strh	r3, [r7, #22]
 8000f34:	8afb      	ldrh	r3, [r7, #22]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0ea      	beq.n	8000f10 <CO_process_RPDO+0x34>
 8000f3a:	e000      	b.n	8000f3e <CO_process_RPDO+0x62>
    if (co->nodeIdUnconfigured) {  return; }
 8000f3c:	bf00      	nop
							timerNext_us,
#endif
							NMTisOperational,
							syncWas );
    }
}
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <CO_process_TPDO>:



#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d124      	bne.n	8000fa4 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff67 	bl	8000e32 <CO_NMT_getInternalState>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	82fb      	strh	r3, [r7, #22]
 8000f76:	e011      	b.n	8000f9c <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f7c:	8afb      	ldrh	r3, [r7, #22]
 8000f7e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	18d0      	adds	r0, r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	f7ff fd63 	bl	8000a5c <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8000f96:	8afb      	ldrh	r3, [r7, #22]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	82fb      	strh	r3, [r7, #22]
 8000f9c:	8afb      	ldrh	r3, [r7, #22]
 8000f9e:	2b0b      	cmp	r3, #11
 8000fa0:	d9ea      	bls.n	8000f78 <CO_process_TPDO+0x34>
 8000fa2:	e000      	b.n	8000fa6 <CO_process_TPDO+0x62>
        return;
 8000fa4:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <canopen_app_interrupt>:
    }
}

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <canopen_app_interrupt+0x80>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fb8:	f3ef 8210 	mrs	r2, PRIMASK
 8000fbc:	607a      	str	r2, [r7, #4]
  return(result);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
}
 8000fc4:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <canopen_app_interrupt+0x80>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d120      	bne.n	8001012 <canopen_app_interrupt+0x66>
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <canopen_app_interrupt+0x80>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01a      	beq.n	8001012 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <canopen_app_interrupt+0x80>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff31 	bl	8000e56 <CO_process_SYNC>
 8000ff4:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <canopen_app_interrupt+0x80>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	f7ff ff6c 	bl	8000edc <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <canopen_app_interrupt+0x80>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	2300      	movs	r3, #0
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	f7ff ff99 	bl	8000f44 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <canopen_app_interrupt+0x80>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f383 8810 	msr	PRIMASK, r3
}
 8001022:	bf00      	nop
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000144 	.word	0x20000144

08001030 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fb2a 	bl	800269e <HAL_CAN_GetTxMailboxesFreeLevel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d028      	beq.n	80010a2 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <prv_send_can_message+0x7c>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <prv_send_can_message+0x7c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	461a      	mov	r2, r3
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <prv_send_can_message+0x7c>)
 8001064:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <prv_send_can_message+0x7c>)
 8001070:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0b9b      	lsrs	r3, r3, #14
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <prv_send_can_message+0x7c>)
 800107e:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6898      	ldr	r0, [r3, #8]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	1d5a      	adds	r2, r3, #5
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4907      	ldr	r1, [pc, #28]	; (80010ac <prv_send_can_message+0x7c>)
 8001090:	f001 fa2a 	bl	80024e8 <HAL_CAN_AddTxMessage>
 8001094:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80010a0:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000014c 	.word	0x2000014c

080010b0 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80010ba:	2300      	movs	r3, #0
 80010bc:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8a5b      	ldrh	r3, [r3, #18]
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80010dc:	23f7      	movs	r3, #247	; 0xf7
 80010de:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010e0:	f3ef 8310 	mrs	r3, PRIMASK
 80010e4:	613b      	str	r3, [r7, #16]
  return(result);
 80010e6:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff9c 	bl	8001030 <prv_send_can_message>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	61da      	str	r2, [r3, #28]
 8001106:	e009      	b.n	800111c <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001112:	b29b      	uxth	r3, r3
 8001114:	3301      	adds	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f383 8810 	msr	PRIMASK, r3
}
 8001128:	bf00      	nop

    return err;
 800112a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8001136:	b480      	push	{r7}
 8001138:	b087      	sub	sp, #28
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001142:	f3ef 8310 	mrs	r3, PRIMASK
 8001146:	60fb      	str	r3, [r7, #12]
  return(result);
 8001148:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800114e:	b672      	cpsid	i
}
 8001150:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d032      	beq.n	80011d4 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	8a1b      	ldrh	r3, [r3, #16]
 8001172:	827b      	strh	r3, [r7, #18]
 8001174:	e02b      	b.n	80011ce <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68d9      	ldr	r1, [r3, #12]
 800117a:	8a7a      	ldrh	r2, [r7, #18]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01d      	beq.n	80011c8 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	8a7a      	ldrh	r2, [r7, #18]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d012      	beq.n	80011c8 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68d9      	ldr	r1, [r3, #12]
 80011a6:	8a7a      	ldrh	r2, [r7, #18]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80011c8:	8a7b      	ldrh	r3, [r7, #18]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	827b      	strh	r3, [r7, #18]
 80011ce:	8a7b      	ldrh	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1d0      	bne.n	8001176 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f383 8810 	msr	PRIMASK, r3
}
 80011e0:	bf00      	nop
    if (tpdoDeleted) {
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8a5b      	ldrh	r3, [r3, #18]
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	825a      	strh	r2, [r3, #18]
    }
}
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	3305      	adds	r3, #5
 8001220:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <prv_read_can_received_msg+0xd0>)
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f001 fa6f 	bl	8002708 <HAL_CAN_GetRxMessage>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14c      	bne.n	80012ca <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <prv_read_can_received_msg+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <prv_read_can_received_msg+0xd0>)
 8001236:	68d2      	ldr	r2, [r2, #12]
 8001238:	2a02      	cmp	r2, #2
 800123a:	d102      	bne.n	8001242 <prv_read_can_received_msg+0x3e>
 800123c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001240:	e000      	b.n	8001244 <prv_read_can_received_msg+0x40>
 8001242:	2200      	movs	r2, #0
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <prv_read_can_received_msg+0xd0>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <prv_read_can_received_msg+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 800125e:	be00      	bkpt	0x0000
 8001260:	e01f      	b.n	80012a2 <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <prv_read_can_received_msg+0xd4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <prv_read_can_received_msg+0xd4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	891b      	ldrh	r3, [r3, #8]
 8001270:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001272:	e013      	b.n	800129c <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	4053      	eors	r3, r2
 800127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001280:	8852      	ldrh	r2, [r2, #2]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 800128e:	e008      	b.n	80012a2 <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8001290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001292:	3b01      	subs	r3, #1
 8001294:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	330c      	adds	r3, #12
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e8      	bne.n	8001274 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80012a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <prv_read_can_received_msg+0xc8>
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <prv_read_can_received_msg+0xc8>
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012be:	6852      	ldr	r2, [r2, #4]
 80012c0:	f107 0114 	add.w	r1, r7, #20
 80012c4:	4610      	mov	r0, r2
 80012c6:	4798      	blx	r3
 80012c8:	e000      	b.n	80012cc <prv_read_can_received_msg+0xc8>
        return;
 80012ca:	bf00      	nop
    }
}
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000164 	.word	0x20000164
 80012d8:	20000148 	.word	0x20000148

080012dc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff8b 	bl	8001204 <prv_read_can_received_msg>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff7e 	bl	8001204 <prv_read_can_received_msg>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03d      	beq.n	80013ac <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001336:	f3ef 8310 	mrs	r3, PRIMASK
 800133a:	60fb      	str	r3, [r7, #12]
  return(result);
 800133c:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8001342:	b672      	cpsid	i
}
 8001344:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	8a1b      	ldrh	r3, [r3, #16]
 800134a:	827b      	strh	r3, [r7, #18]
 800134c:	e01e      	b.n	800138c <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d014      	beq.n	8001380 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe69 	bl	8001030 <prv_send_can_message>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00d      	beq.n	8001380 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800136e:	b29b      	uxth	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	3b01      	subs	r3, #1
 8001384:	827b      	strh	r3, [r7, #18]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3318      	adds	r3, #24
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	8a7b      	ldrh	r3, [r7, #18]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1dd      	bne.n	800134e <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8001392:	8a7b      	ldrh	r3, [r7, #18]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f383 8810 	msr	PRIMASK, r3
}
 80013aa:	bf00      	nop
    }
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffa4 	bl	8001310 <CO_CANinterrupt_TX>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000148 	.word	0x20000148

080013d4 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff94 	bl	8001310 <CO_CANinterrupt_TX>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000148 	.word	0x20000148

080013f4 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff84 	bl	8001310 <CO_CANinterrupt_TX>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000148 	.word	0x20000148

08001414 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d101      	bne.n	800142c <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 8001428:	f7ff fdc0 	bl	8000fac <canopen_app_interrupt>
    }
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000140 	.word	0x20000140

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f000 fe33 	bl	80020a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f87d 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f000 fa5d 	bl	8001904 <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f000 fa15 	bl	8001878 <MX_DMA_Init>
  MX_TIM14_Init();
 800144e:	f000 f99b 	bl	8001788 <MX_TIM14_Init>
  MX_CAN2_Init();
 8001452:	f000 f915 	bl	8001680 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001456:	f000 f8dd 	bl	8001614 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800145a:	f000 f9b9 	bl	80017d0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800145e:	f009 fa2f 	bl	800a8c0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001462:	f000 f9df 	bl	8001824 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001466:	f000 f941 	bl	80016ec <MX_TIM4_Init>
//  Local_Count = sizeof String_L;
//  String_L[Local_Count-1] = 0x0d;
//  HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)(String_L), Local_Count);
//  while (1){}
 #if 1
  Tx_Header.IDE    = CAN_ID_STD;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <main+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  Tx_Header.ExtId  = 0;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <main+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  Tx_Header.DLC    = 8;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <main+0xe8>)
 8001478:	2208      	movs	r2, #8
 800147a:	611a      	str	r2, [r3, #16]
  Tx_Header.StdId  = 0x7EC;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <main+0xe8>)
 800147e:	f240 72ec 	movw	r2, #2028	; 0x7ec
 8001482:	601a      	str	r2, [r3, #0]
  Tx_Header.RTR    = CAN_RTR_DATA;
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <main+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  HAL_CAN_Start(&hcan1);  HAL_Delay(1500);
 800148a:	4826      	ldr	r0, [pc, #152]	; (8001524 <main+0xec>)
 800148c:	f000 ffe8 	bl	8002460 <HAL_CAN_Start>
 8001490:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001494:	f000 fe7a 	bl	800218c <HAL_Delay>

  if(HAL_CAN_AddTxMessage( &hcan1,
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <main+0xf0>)
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <main+0xf4>)
 800149c:	4920      	ldr	r1, [pc, #128]	; (8001520 <main+0xe8>)
 800149e:	4821      	ldr	r0, [pc, #132]	; (8001524 <main+0xec>)
 80014a0:	f001 f822 	bl	80024e8 <HAL_CAN_AddTxMessage>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <main+0x92>
    		               &Tx_Header,
							Tx_Array, &TxMailbox )==HAL_OK
  	 )
	  {  /* Wait transmission complete */
	  //while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
		  for(uint8_t cnt=0;cnt<22;cnt++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	77bb      	strb	r3, [r7, #30]
 80014ae:	e009      	b.n	80014c4 <main+0x8c>
		  {
		   HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);//LED2_Pin
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <main+0xf8>)
 80014b4:	f002 f953 	bl	800375e <HAL_GPIO_TogglePin>
		   HAL_Delay(46);
 80014b8:	202e      	movs	r0, #46	; 0x2e
 80014ba:	f000 fe67 	bl	800218c <HAL_Delay>
		  for(uint8_t cnt=0;cnt<22;cnt++)
 80014be:	7fbb      	ldrb	r3, [r7, #30]
 80014c0:	3301      	adds	r3, #1
 80014c2:	77bb      	strb	r3, [r7, #30]
 80014c4:	7fbb      	ldrb	r3, [r7, #30]
 80014c6:	2b15      	cmp	r3, #21
 80014c8:	d9f2      	bls.n	80014b0 <main+0x78>
		  }
	  }
#endif

  for(uint8_t cnt=0;cnt<50;cnt++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	77fb      	strb	r3, [r7, #31]
 80014ce:	e00d      	b.n	80014ec <main+0xb4>
  {
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6 );//LED1_Pin___//LED1_GPIO_Port
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <main+0xf8>)
 80014d4:	f002 f943 	bl	800375e <HAL_GPIO_TogglePin>
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7 );//LED2_Pin___//LED2_GPIO_Port
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	4815      	ldr	r0, [pc, #84]	; (8001530 <main+0xf8>)
 80014dc:	f002 f93f 	bl	800375e <HAL_GPIO_TogglePin>
  HAL_Delay(33);
 80014e0:	2021      	movs	r0, #33	; 0x21
 80014e2:	f000 fe53 	bl	800218c <HAL_Delay>
  for(uint8_t cnt=0;cnt<50;cnt++)
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	3301      	adds	r3, #1
 80014ea:	77fb      	strb	r3, [r7, #31]
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	d9ee      	bls.n	80014d0 <main+0x98>
  }
    HAL_Delay(500);
 80014f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f6:	f000 fe49 	bl	800218c <HAL_Delay>
    Local_Count = sizeof String_L;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <main+0xfc>)
 80014fc:	2216      	movs	r2, #22
 80014fe:	701a      	strb	r2, [r3, #0]
    String_L[Local_Count-1] = 0x0d;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <main+0xfc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <main+0x100>)
 8001508:	210d      	movs	r1, #13
 800150a:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)(String_L), Local_Count);
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <main+0xfc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <main+0x100>)
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <main+0x104>)
 8001518:	f004 fd7c 	bl	8006014 <HAL_UART_Transmit_DMA>
    while (1){}
 800151c:	e7fe      	b.n	800151c <main+0xe4>
 800151e:	bf00      	nop
 8001520:	2000061c 	.word	0x2000061c
 8001524:	20000180 	.word	0x20000180
 8001528:	20000634 	.word	0x20000634
 800152c:	20000000 	.word	0x20000000
 8001530:	40020000 	.word	0x40020000
 8001534:	20000618 	.word	0x20000618
 8001538:	20000010 	.word	0x20000010
 800153c:	200003b0 	.word	0x200003b0

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	; 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	; 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f009 feaa 	bl	800b2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <SystemClock_Config+0xcc>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <SystemClock_Config+0xcc>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <SystemClock_Config+0xcc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <SystemClock_Config+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <SystemClock_Config+0xd0>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	2302      	movs	r3, #2
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015b4:	23a8      	movs	r3, #168	; 0xa8
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015bc:	2307      	movs	r3, #7
 80015be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fb61 	bl	8004c8c <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d0:	f000 fa52 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2105      	movs	r1, #5
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fdc2 	bl	800517c <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015fe:	f000 fa3b 	bl	8001a78 <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3750      	adds	r7, #80	; 0x50
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_CAN1_Init+0x64>)
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <MX_CAN1_Init+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_CAN1_Init+0x64>)
 8001620:	2206      	movs	r2, #6
 8001622:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_CAN1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_CAN1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_CAN1_Init+0x64>)
 8001632:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001636:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_CAN1_Init+0x64>)
 800163a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800163e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <MX_CAN1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_CAN1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <MX_CAN1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_CAN1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <MX_CAN1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_CAN1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_CAN1_Init+0x64>)
 8001666:	f000 fdb5 	bl	80021d4 <HAL_CAN_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001670:	f000 fa02 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000180 	.word	0x20000180
 800167c:	40006400 	.word	0x40006400

08001680 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_CAN2_Init+0x64>)
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <MX_CAN2_Init+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_CAN2_Init+0x64>)
 800168c:	2215      	movs	r2, #21
 800168e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_CAN2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_CAN2_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_CAN2_Init+0x64>)
 800169e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80016a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_CAN2_Init+0x64>)
 80016d2:	f000 fd7f 	bl	80021d4 <HAL_CAN_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80016dc:	f000 f9cc 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200001e4 	.word	0x200001e4
 80016e8:	40006800 	.word	0x40006800

080016ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM4_Init+0x94>)
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <MX_TIM4_Init+0x98>)
 800170c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM4_Init+0x94>)
 8001710:	2253      	movs	r2, #83	; 0x53
 8001712:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM4_Init+0x94>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM4_Init+0x94>)
 800171c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001720:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_TIM4_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM4_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM4_Init+0x94>)
 8001730:	f003 ff44 	bl	80055bc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 f99d 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM4_Init+0x94>)
 800174c:	f004 f8ba 	bl	80058c4 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 f98f 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175a:	2320      	movs	r3, #32
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM4_Init+0x94>)
 8001768:	f004 fb60 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001772:	f000 f981 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000248 	.word	0x20000248
 8001784:	40000800 	.word	0x40000800

08001788 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM14_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <MX_TIM14_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <MX_TIM14_Init+0x40>)
 8001794:	2253      	movs	r2, #83	; 0x53
 8001796:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_TIM14_Init+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_TIM14_Init+0x40>)
 80017a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_TIM14_Init+0x40>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_TIM14_Init+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM14_Init+0x40>)
 80017b4:	f003 ff02 	bl	80055bc <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80017be:	f000 f95b 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002fc 	.word	0x200002fc
 80017cc:	40002000 	.word	0x40002000

080017d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART1_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017dc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017f8:	220c      	movs	r2, #12
 80017fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART1_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_USART1_UART_Init+0x4c>)
 800180a:	f004 fba9 	bl	8005f60 <HAL_UART_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001814:	f000 f930 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200003b0 	.word	0x200003b0
 8001820:	40011000 	.word	0x40011000

08001824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_USART2_UART_Init+0x50>)
 800182c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001830:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800184c:	220c      	movs	r2, #12
 800184e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800185e:	f004 fb7f 	bl	8005f60 <HAL_UART_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001868:	f000 f906 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000424 	.word	0x20000424
 8001874:	40004400 	.word	0x40004400

08001878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_DMA_Init+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <MX_DMA_Init+0x88>)
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_DMA_Init+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_DMA_Init+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <MX_DMA_Init+0x88>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_DMA_Init+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2010      	movs	r0, #16
 80018bc:	f001 f961 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018c0:	2010      	movs	r0, #16
 80018c2:	f001 f97a 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2011      	movs	r0, #17
 80018cc:	f001 f959 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018d0:	2011      	movs	r0, #17
 80018d2:	f001 f972 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	203a      	movs	r0, #58	; 0x3a
 80018dc:	f001 f951 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018e0:	203a      	movs	r0, #58	; 0x3a
 80018e2:	f001 f96a 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2046      	movs	r0, #70	; 0x46
 80018ec:	f001 f949 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80018f0:	2046      	movs	r0, #70	; 0x46
 80018f2:	f001 f962 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <MX_GPIO_Init+0x160>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <MX_GPIO_Init+0x160>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <MX_GPIO_Init+0x160>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <MX_GPIO_Init+0x160>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <MX_GPIO_Init+0x160>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_GPIO_Init+0x160>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <MX_GPIO_Init+0x160>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_GPIO_Init+0x160>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	21c0      	movs	r1, #192	; 0xc0
 80019c6:	4828      	ldr	r0, [pc, #160]	; (8001a68 <MX_GPIO_Init+0x164>)
 80019c8:	f001 feb0 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80019d2:	4826      	ldr	r0, [pc, #152]	; (8001a6c <MX_GPIO_Init+0x168>)
 80019d4:	f001 feaa 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019d8:	2318      	movs	r3, #24
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4821      	ldr	r0, [pc, #132]	; (8001a70 <MX_GPIO_Init+0x16c>)
 80019ec:	f001 fd02 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_GPIO_Init+0x164>)
 8001a06:	f001 fcf5 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_GPIO_Init+0x164>)
 8001a22:	f001 fce7 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a26:	2304      	movs	r3, #4
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <MX_GPIO_Init+0x170>)
 8001a3a:	f001 fcdb 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001a3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0x168>)
 8001a58:	f001 fccc 	bl	80033f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40020400 	.word	0x40020400

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ac2:	2007      	movs	r0, #7
 8001ac4:	f001 f852 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_CAN_MspInit+0x128>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d135      	bne.n	8001b62 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001afe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b00:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10d      	bne.n	8001b24 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b40:	2303      	movs	r3, #3
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b50:	2309      	movs	r3, #9
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482b      	ldr	r0, [pc, #172]	; (8001c08 <HAL_CAN_MspInit+0x134>)
 8001b5c:	f001 fc4a 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b60:	e047      	b.n	8001bf2 <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <HAL_CAN_MspInit+0x138>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d142      	bne.n	8001bf2 <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_CAN_MspInit+0x12c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10d      	bne.n	8001bb6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_CAN_MspInit+0x130>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001be2:	2309      	movs	r3, #9
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4808      	ldr	r0, [pc, #32]	; (8001c10 <HAL_CAN_MspInit+0x13c>)
 8001bee:	f001 fc01 	bl	80033f4 <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	; 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40006400 	.word	0x40006400
 8001c00:	20000638 	.word	0x20000638
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40006800 	.word	0x40006800
 8001c10:	40020400 	.word	0x40020400

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_TIM_Base_MspInit+0x70>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c42:	e01a      	b.n	8001c7a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_TIM_Base_MspInit+0x78>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d115      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_TIM_Base_MspInit+0x74>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	202d      	movs	r0, #45	; 0x2d
 8001c70:	f000 ff87 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c74:	202d      	movs	r0, #45	; 0x2d
 8001c76:	f000 ffa0 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40002000 	.word	0x40002000

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a97      	ldr	r2, [pc, #604]	; (8001f0c <HAL_UART_MspInit+0x27c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f040 8092 	bne.w	8001dd8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	4b95      	ldr	r3, [pc, #596]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	4a94      	ldr	r2, [pc, #592]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a8d      	ldr	r2, [pc, #564]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4882      	ldr	r0, [pc, #520]	; (8001f14 <HAL_UART_MspInit+0x284>)
 8001d0a:	f001 fb73 	bl	80033f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d10:	4a82      	ldr	r2, [pc, #520]	; (8001f1c <HAL_UART_MspInit+0x28c>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d22:	4b7d      	ldr	r3, [pc, #500]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d36:	4b78      	ldr	r3, [pc, #480]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d3c:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d42:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d4e:	4872      	ldr	r0, [pc, #456]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d50:	f000 ff4e 	bl	8002bf0 <HAL_DMA_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d5a:	f7ff fe8d 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a6d      	ldr	r2, [pc, #436]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
 8001d64:	4a6c      	ldr	r2, [pc, #432]	; (8001f18 <HAL_UART_MspInit+0x288>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001d6a:	4b6d      	ldr	r3, [pc, #436]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d6c:	4a6d      	ldr	r2, [pc, #436]	; (8001f24 <HAL_UART_MspInit+0x294>)
 8001d6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d78:	4b69      	ldr	r3, [pc, #420]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d84:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001daa:	485d      	ldr	r0, [pc, #372]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001dac:	f000 ff20 	bl	8002bf0 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001db6:	f7ff fe5f 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc0:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_UART_MspInit+0x290>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2025      	movs	r0, #37	; 0x25
 8001dcc:	f000 fed9 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd0:	2025      	movs	r0, #37	; 0x25
 8001dd2:	f000 fef2 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dd6:	e095      	b.n	8001f04 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_UART_MspInit+0x298>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f040 8090 	bne.w	8001f04 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_UART_MspInit+0x280>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4837      	ldr	r0, [pc, #220]	; (8001f14 <HAL_UART_MspInit+0x284>)
 8001e38:	f001 fadc 	bl	80033f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_UART_MspInit+0x2a0>)
 8001e40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e56:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e7c:	482b      	ldr	r0, [pc, #172]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e7e:	f000 feb7 	bl	8002bf0 <HAL_DMA_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001e88:	f7ff fdf6 	bl	8001a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_UART_MspInit+0x29c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001e9a:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_UART_MspInit+0x2a8>)
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ed8:	4816      	ldr	r0, [pc, #88]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001eda:	f000 fe89 	bl	8002bf0 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001ee4:	f7ff fdc8 	bl	8001a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
 8001eee:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_UART_MspInit+0x2a4>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2026      	movs	r0, #38	; 0x26
 8001efa:	f000 fe42 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001efe:	2026      	movs	r0, #38	; 0x26
 8001f00:	f000 fe5b 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	20000498 	.word	0x20000498
 8001f1c:	40026440 	.word	0x40026440
 8001f20:	200004f8 	.word	0x200004f8
 8001f24:	400264b8 	.word	0x400264b8
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	20000558 	.word	0x20000558
 8001f30:	400260a0 	.word	0x400260a0
 8001f34:	200005b8 	.word	0x200005b8
 8001f38:	40026088 	.word	0x40026088

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f8e0 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA1_Stream5_IRQHandler+0x10>)
 8001f96:	f000 ffc3 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200005b8 	.word	0x200005b8

08001fa4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <DMA1_Stream6_IRQHandler+0x10>)
 8001faa:	f000 ffb9 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000558 	.word	0x20000558

08001fb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <USART1_IRQHandler+0x10>)
 8001fbe:	f004 f8a7 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200003b0 	.word	0x200003b0

08001fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <USART2_IRQHandler+0x10>)
 8001fd2:	f004 f89d 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000424 	.word	0x20000424

08001fe0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fe6:	f003 fb45 	bl	8005674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002fc 	.word	0x200002fc

08001ff4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <DMA2_Stream2_IRQHandler+0x10>)
 8001ffa:	f000 ff91 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000498 	.word	0x20000498

08002008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <OTG_FS_IRQHandler+0x10>)
 800200e:	f001 fd10 	bl	8003a32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20001b20 	.word	0x20001b20

0800201c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <DMA2_Stream7_IRQHandler+0x10>)
 8002022:	f000 ff7d 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200004f8 	.word	0x200004f8

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800205a:	490e      	ldr	r1, [pc, #56]	; (8002094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002070:	4c0b      	ldr	r4, [pc, #44]	; (80020a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800207e:	f7ff ffd7 	bl	8002030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f009 f919 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff f9d7 	bl	8001438 <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800208c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002098:	0800b3ac 	.word	0x0800b3ac
  ldr r2, =_sbss
 800209c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80020a0:	2000224c 	.word	0x2000224c

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_Init+0x40>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_Init+0x40>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_Init+0x40>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 fd4b 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fcd2 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fd63 	bl	8002bd6 <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 fd2b 	bl	8002b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000028 	.word	0x20000028
 8002144:	20000030 	.word	0x20000030
 8002148:	2000002c 	.word	0x2000002c

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000030 	.word	0x20000030
 8002170:	2000063c 	.word	0x2000063c

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000063c 	.word	0x2000063c

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000030 	.word	0x20000030

080021d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e11c      	b.n	8002420 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d131      	bne.n	8002256 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a8c      	ldr	r2, [pc, #560]	; (8002428 <HAL_CAN_Init+0x254>)
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a8c      	ldr	r2, [pc, #560]	; (800242c <HAL_CAN_Init+0x258>)
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a8b      	ldr	r2, [pc, #556]	; (8002430 <HAL_CAN_Init+0x25c>)
 8002202:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a8b      	ldr	r2, [pc, #556]	; (8002434 <HAL_CAN_Init+0x260>)
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_CAN_Init+0x264>)
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a8a      	ldr	r2, [pc, #552]	; (800243c <HAL_CAN_Init+0x268>)
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a89      	ldr	r2, [pc, #548]	; (8002440 <HAL_CAN_Init+0x26c>)
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a89      	ldr	r2, [pc, #548]	; (8002444 <HAL_CAN_Init+0x270>)
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a88      	ldr	r2, [pc, #544]	; (8002448 <HAL_CAN_Init+0x274>)
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a88      	ldr	r2, [pc, #544]	; (800244c <HAL_CAN_Init+0x278>)
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a87      	ldr	r2, [pc, #540]	; (8002450 <HAL_CAN_Init+0x27c>)
 8002232:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a87      	ldr	r2, [pc, #540]	; (8002454 <HAL_CAN_Init+0x280>)
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a86      	ldr	r2, [pc, #536]	; (8002458 <HAL_CAN_Init+0x284>)
 800223e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a84      	ldr	r2, [pc, #528]	; (800245c <HAL_CAN_Init+0x288>)
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002266:	f7ff ff85 	bl	8002174 <HAL_GetTick>
 800226a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800226c:	e012      	b.n	8002294 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800226e:	f7ff ff81 	bl	8002174 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b0a      	cmp	r3, #10
 800227a:	d90b      	bls.n	8002294 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2205      	movs	r2, #5
 800228c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0c5      	b.n	8002420 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0e5      	beq.n	800226e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0202 	bic.w	r2, r2, #2
 80022b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b2:	f7ff ff5f 	bl	8002174 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022b8:	e012      	b.n	80022e0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ba:	f7ff ff5b 	bl	8002174 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b0a      	cmp	r3, #10
 80022c6:	d90b      	bls.n	80022e0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e09f      	b.n	8002420 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1e5      	bne.n	80022ba <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e1b      	ldrb	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e007      	b.n	8002318 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e5b      	ldrb	r3, [r3, #25]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e007      	b.n	8002342 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7e9b      	ldrb	r3, [r3, #26]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e007      	b.n	800236c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0220 	bic.w	r2, r2, #32
 800236a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7edb      	ldrb	r3, [r3, #27]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0210 	bic.w	r2, r2, #16
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e007      	b.n	8002396 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0210 	orr.w	r2, r2, #16
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0208 	orr.w	r2, r2, #8
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e007      	b.n	80023c0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0208 	bic.w	r2, r2, #8
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7f5b      	ldrb	r3, [r3, #29]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d108      	bne.n	80023da <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0204 	orr.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e007      	b.n	80023ea <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0204 	bic.w	r2, r2, #4
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	080012dd 	.word	0x080012dd
 800242c:	08002969 	.word	0x08002969
 8002430:	080012f7 	.word	0x080012f7
 8002434:	0800297d 	.word	0x0800297d
 8002438:	080013b5 	.word	0x080013b5
 800243c:	080013d5 	.word	0x080013d5
 8002440:	080013f5 	.word	0x080013f5
 8002444:	0800292d 	.word	0x0800292d
 8002448:	08002941 	.word	0x08002941
 800244c:	08002955 	.word	0x08002955
 8002450:	08002991 	.word	0x08002991
 8002454:	080029a5 	.word	0x080029a5
 8002458:	080029b9 	.word	0x080029b9
 800245c:	08001ad5 	.word	0x08001ad5

08002460 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d12e      	bne.n	80024d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800248c:	f7ff fe72 	bl	8002174 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002492:	e012      	b.n	80024ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002494:	f7ff fe6e 	bl	8002174 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d90b      	bls.n	80024ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2205      	movs	r2, #5
 80024b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e012      	b.n	80024e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e5      	bne.n	8002494 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e006      	b.n	80024e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002506:	7ffb      	ldrb	r3, [r7, #31]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d003      	beq.n	8002514 <HAL_CAN_AddTxMessage+0x2c>
 800250c:	7ffb      	ldrb	r3, [r7, #31]
 800250e:	2b02      	cmp	r3, #2
 8002510:	f040 80b8 	bne.w	8002684 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a0 	beq.w	8002674 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d907      	bls.n	8002554 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e09e      	b.n	8002692 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002554:	2201      	movs	r2, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	409a      	lsls	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3318      	adds	r3, #24
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	440b      	add	r3, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e00f      	b.n	80025a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800258c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002596:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3318      	adds	r3, #24
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	440b      	add	r3, r1
 80025a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3318      	adds	r3, #24
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	440b      	add	r3, r1
 80025b2:	3304      	adds	r3, #4
 80025b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	7d1b      	ldrb	r3, [r3, #20]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d111      	bne.n	80025e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6811      	ldr	r1, [r2, #0]
 80025d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3318      	adds	r3, #24
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	440b      	add	r3, r1
 80025de:	3304      	adds	r3, #4
 80025e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3307      	adds	r3, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	061a      	lsls	r2, r3, #24
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3306      	adds	r3, #6
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3305      	adds	r3, #5
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	4313      	orrs	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	3204      	adds	r2, #4
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	4610      	mov	r0, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6811      	ldr	r1, [r2, #0]
 800260a:	ea43 0200 	orr.w	r2, r3, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	440b      	add	r3, r1
 8002614:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002618:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3303      	adds	r3, #3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	061a      	lsls	r2, r3, #24
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3302      	adds	r3, #2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	4610      	mov	r0, r2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	6811      	ldr	r1, [r2, #0]
 8002640:	ea43 0200 	orr.w	r2, r3, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	440b      	add	r3, r1
 800264a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800264e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3318      	adds	r3, #24
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	4413      	add	r3, r2
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3318      	adds	r3, #24
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	440b      	add	r3, r1
 800266e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e00e      	b.n	8002692 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e006      	b.n	8002692 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d002      	beq.n	80026be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026b8:	7afb      	ldrb	r3, [r7, #11]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d11d      	bne.n	80026fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d003      	beq.n	800272c <HAL_CAN_GetRxMessage+0x24>
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b02      	cmp	r3, #2
 8002728:	f040 80f3 	bne.w	8002912 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10e      	bne.n	8002750 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0e7      	b.n	8002920 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0d8      	b.n	8002920 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	331b      	adds	r3, #27
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0204 	and.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10c      	bne.n	80027a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0d5b      	lsrs	r3, r3, #21
 800279c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e00b      	b.n	80027be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	331b      	adds	r3, #27
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	331b      	adds	r3, #27
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0202 	and.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	331b      	adds	r3, #27
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	331b      	adds	r3, #27
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	331b      	adds	r3, #27
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	4413      	add	r3, r2
 8002826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0a1a      	lsrs	r2, r3, #8
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0c1a      	lsrs	r2, r3, #16
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3302      	adds	r3, #2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e1a      	lsrs	r2, r3, #24
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	3303      	adds	r3, #3
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3304      	adds	r3, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0a1a      	lsrs	r2, r3, #8
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3305      	adds	r3, #5
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0c1a      	lsrs	r2, r3, #16
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3306      	adds	r3, #6
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e1a      	lsrs	r2, r3, #24
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3307      	adds	r3, #7
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e007      	b.n	800290e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0220 	orr.w	r2, r2, #32
 800290c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e006      	b.n	8002920 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d301      	bcc.n	8002b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <SysTick_Config+0x40>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b46:	210f      	movs	r1, #15
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f7ff ff8e 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SysTick_Config+0x40>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <SysTick_Config+0x40>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff29 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff3e 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff8e 	bl	8002ac0 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff31 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa2 	bl	8002b28 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff faba 	bl	8002174 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e099      	b.n	8002d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	e00f      	b.n	8002c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2e:	f7ff faa1 	bl	8002174 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d908      	bls.n	8002c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e078      	b.n	8002d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e8      	bne.n	8002c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_DMA_Init+0x158>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d117      	bne.n	8002d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb01 	bl	80032fc <DMA_CheckFifoParam>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e016      	b.n	8002d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fab8 	bl	8003290 <DMA_CalcBaseAndBitshift>
 8002d20:	4603      	mov	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	223f      	movs	r2, #63	; 0x3f
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	f010803f 	.word	0xf010803f

08002d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Start_IT+0x26>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e040      	b.n	8002df4 <HAL_DMA_Start_IT+0xa8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d12f      	bne.n	8002de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa4a 	bl	8003234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0216 	orr.w	r2, r2, #22
 8002dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e005      	b.n	8002df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e0a:	f7ff f9b3 	bl	8002174 <HAL_GetTick>
 8002e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e052      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0216 	bic.w	r2, r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_DMA_Abort+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	e013      	b.n	8002ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e80:	f7ff f978 	bl	8002174 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e015      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e4      	bne.n	8002e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	223f      	movs	r2, #63	; 0x3f
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00c      	b.n	8002f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f2c:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_DMA_IRQHandler+0x248>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a8e      	ldr	r2, [pc, #568]	; (800316c <HAL_DMA_IRQHandler+0x24c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2208      	movs	r2, #8
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d043      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03c      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2210      	movs	r2, #16
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e01f      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e016      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0208 	bic.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2220      	movs	r2, #32
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 808f 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8087 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2220      	movs	r2, #32
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d136      	bne.n	8003138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_IRQHandler+0x1da>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	223f      	movs	r2, #63	; 0x3f
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07e      	beq.n	800322c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
        }
        return;
 8003136:	e079      	b.n	800322c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	2b00      	cmp	r3, #0
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	e02c      	b.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
 8003166:	bf00      	nop
 8003168:	20000028 	.word	0x20000028
 800316c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
 8003180:	e01e      	b.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0210 	bic.w	r2, r2, #16
 800319e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d032      	beq.n	800322e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2205      	movs	r2, #5
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d307      	bcc.n	8003208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f2      	bne.n	80031ec <HAL_DMA_IRQHandler+0x2cc>
 8003206:	e000      	b.n	800320a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
 800322a:	e000      	b.n	800322e <HAL_DMA_IRQHandler+0x30e>
        return;
 800322c:	bf00      	nop
    }
  }
}
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d108      	bne.n	8003274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003272:	e007      	b.n	8003284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b10      	subs	r3, #16
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <DMA_CalcBaseAndBitshift+0x64>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d909      	bls.n	80032d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58
 80032d0:	e007      	b.n	80032e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	aaaaaaab 	.word	0xaaaaaaab
 80032f8:	0800b394 	.word	0x0800b394

080032fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d856      	bhi.n	80033ca <DMA_CheckFifoParam+0xce>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <DMA_CheckFifoParam+0x28>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003347 	.word	0x08003347
 800332c:	08003335 	.word	0x08003335
 8003330:	080033cb 	.word	0x080033cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e043      	b.n	80033ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334e:	d140      	bne.n	80033d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e03d      	b.n	80033d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d121      	bne.n	80033a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d837      	bhi.n	80033d6 <DMA_CheckFifoParam+0xda>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x70>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003383 	.word	0x08003383
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003395 	.word	0x08003395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e030      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e022      	b.n	80033da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a2:	e01c      	b.n	80033de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d903      	bls.n	80033b2 <DMA_CheckFifoParam+0xb6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b0:	e018      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      break;
 80033b6:	e015      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e00b      	b.n	80033e2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ca:	bf00      	nop
 80033cc:	e00a      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e008      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e006      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
    }
  } 
  
  return status; 
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e16b      	b.n	80036e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 815a 	bne.w	80036e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d005      	beq.n	8003446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	2b02      	cmp	r3, #2
 8003444:	d130      	bne.n	80034a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0201 	and.w	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d017      	beq.n	80034e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d123      	bne.n	8003538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3208      	adds	r2, #8
 80034f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0203 	and.w	r2, r3, #3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80b4 	beq.w	80036e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b60      	ldr	r3, [pc, #384]	; (8003700 <HAL_GPIO_Init+0x30c>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_GPIO_Init+0x30c>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_GPIO_Init+0x30c>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003596:	4a5b      	ldr	r2, [pc, #364]	; (8003704 <HAL_GPIO_Init+0x310>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_GPIO_Init+0x314>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d02b      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a51      	ldr	r2, [pc, #324]	; (800370c <HAL_GPIO_Init+0x318>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d025      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a50      	ldr	r2, [pc, #320]	; (8003710 <HAL_GPIO_Init+0x31c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4f      	ldr	r2, [pc, #316]	; (8003714 <HAL_GPIO_Init+0x320>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d019      	beq.n	800360e <HAL_GPIO_Init+0x21a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4e      	ldr	r2, [pc, #312]	; (8003718 <HAL_GPIO_Init+0x324>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0x216>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4d      	ldr	r2, [pc, #308]	; (800371c <HAL_GPIO_Init+0x328>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_GPIO_Init+0x212>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4c      	ldr	r2, [pc, #304]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <HAL_GPIO_Init+0x20e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4b      	ldr	r2, [pc, #300]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_Init+0x20a>
 80035fa:	2307      	movs	r3, #7
 80035fc:	e00e      	b.n	800361c <HAL_GPIO_Init+0x228>
 80035fe:	2308      	movs	r3, #8
 8003600:	e00c      	b.n	800361c <HAL_GPIO_Init+0x228>
 8003602:	2306      	movs	r3, #6
 8003604:	e00a      	b.n	800361c <HAL_GPIO_Init+0x228>
 8003606:	2305      	movs	r3, #5
 8003608:	e008      	b.n	800361c <HAL_GPIO_Init+0x228>
 800360a:	2304      	movs	r3, #4
 800360c:	e006      	b.n	800361c <HAL_GPIO_Init+0x228>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <HAL_GPIO_Init+0x228>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <HAL_GPIO_Init+0x228>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_GPIO_Init+0x228>
 800361a:	2300      	movs	r3, #0
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f002 0203 	and.w	r2, r2, #3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4093      	lsls	r3, r2
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800362c:	4935      	ldr	r1, [pc, #212]	; (8003704 <HAL_GPIO_Init+0x310>)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <HAL_GPIO_Init+0x334>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800365e:	4a32      	ldr	r2, [pc, #200]	; (8003728 <HAL_GPIO_Init+0x334>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003664:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_GPIO_Init+0x334>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <HAL_GPIO_Init+0x334>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_GPIO_Init+0x334>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_GPIO_Init+0x334>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_GPIO_Init+0x334>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036dc:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_GPIO_Init+0x334>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	f67f ae90 	bls.w	8003410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40013800 	.word	0x40013800
 8003708:	40020000 	.word	0x40020000
 800370c:	40020400 	.word	0x40020400
 8003710:	40020800 	.word	0x40020800
 8003714:	40020c00 	.word	0x40020c00
 8003718:	40021000 	.word	0x40021000
 800371c:	40021400 	.word	0x40021400
 8003720:	40021800 	.word	0x40021800
 8003724:	40021c00 	.word	0x40021c00
 8003728:	40013c00 	.word	0x40013c00

0800372c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800373c:	787b      	ldrb	r3, [r7, #1]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003748:	e003      	b.n	8003752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	041a      	lsls	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	619a      	str	r2, [r3, #24]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	041a      	lsls	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43d9      	mvns	r1, r3
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	400b      	ands	r3, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003794:	b08f      	sub	sp, #60	; 0x3c
 8003796:	af0a      	add	r7, sp, #40	; 0x28
 8003798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e10f      	b.n	80039c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f007 fa5e 	bl	800ac80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fdb1 	bl	800734a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	687e      	ldr	r6, [r7, #4]
 80037f0:	466d      	mov	r5, sp
 80037f2:	f106 0410 	add.w	r4, r6, #16
 80037f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003802:	e885 0003 	stmia.w	r5, {r0, r1}
 8003806:	1d33      	adds	r3, r6, #4
 8003808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f003 fc88 	bl	8007120 <USB_CoreInit>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0d0      	b.n	80039c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fd9f 	bl	800736c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e04a      	b.n	80038ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	333d      	adds	r3, #61	; 0x3d
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	333c      	adds	r3, #60	; 0x3c
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	b298      	uxth	r0, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3344      	adds	r3, #68	; 0x44
 8003870:	4602      	mov	r2, r0
 8003872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3340      	adds	r3, #64	; 0x40
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3348      	adds	r3, #72	; 0x48
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334c      	adds	r3, #76	; 0x4c
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3354      	adds	r3, #84	; 0x54
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3af      	bcc.n	8003834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3301      	adds	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3b5      	bcc.n	80038da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	687e      	ldr	r6, [r7, #4]
 8003976:	466d      	mov	r5, sp
 8003978:	f106 0410 	add.w	r4, r6, #16
 800397c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003988:	e885 0003 	stmia.w	r5, {r0, r1}
 800398c:	1d33      	adds	r3, r6, #4
 800398e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003990:	6838      	ldr	r0, [r7, #0]
 8003992:	f003 fd37 	bl	8007404 <USB_DevInit>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e00d      	b.n	80039c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 fe86 	bl	80086ce <USB_DevDisconnect>

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_PCD_Start+0x1c>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e020      	b.n	8003a2a <HAL_PCD_Start+0x5e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d109      	bne.n	8003a0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fc89 	bl	8007328 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fe36 	bl	800868c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a32:	b590      	push	{r4, r7, lr}
 8003a34:	b08d      	sub	sp, #52	; 0x34
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 fef4 	bl	8008836 <USB_GetMode>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 848a 	bne.w	800436a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 fe58 	bl	8008710 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8480 	beq.w	8004368 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 fe45 	bl	8008710 <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d107      	bne.n	8003aa0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f002 0202 	and.w	r2, r2, #2
 8003a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fe33 	bl	8008710 <USB_ReadInterrupts>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d161      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0210 	bic.w	r2, r2, #16
 8003ac2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	0c5b      	lsrs	r3, r3, #17
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d124      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d035      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6a38      	ldr	r0, [r7, #32]
 8003b10:	f004 fc6a 	bl	80083e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b20:	441a      	add	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a1a      	ldr	r2, [r3, #32]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b32:	441a      	add	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	621a      	str	r2, [r3, #32]
 8003b38:	e016      	b.n	8003b68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	0c5b      	lsrs	r3, r3, #17
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d110      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6a38      	ldr	r0, [r7, #32]
 8003b52:	f004 fc49 	bl	80083e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b62:	441a      	add	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0210 	orr.w	r2, r2, #16
 8003b76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 fdc7 	bl	8008710 <USB_ReadInterrupts>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b8c:	f040 80a7 	bne.w	8003cde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fdcc 	bl	8008736 <USB_ReadDevAllOutEpInterrupt>
 8003b9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ba0:	e099      	b.n	8003cd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 808e 	beq.w	8003cca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fdf0 	bl	800879e <USB_ReadDevOutEPInterrupt>
 8003bbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2301      	movs	r3, #1
 8003bda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fec2 	bl	8004968 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00c      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 ff98 	bl	8004b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2310      	movs	r3, #16
 8003c22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d030      	beq.n	8003c90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d109      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d108      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f007 f907 	bl	800ae8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2320      	movs	r3, #32
 8003caa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	3301      	adds	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f47f af62 	bne.w	8003ba2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 fd14 	bl	8008710 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cf2:	f040 80db 	bne.w	8003eac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 fd35 	bl	800876a <USB_ReadDevAllInEpInterrupt>
 8003d00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d06:	e0cd      	b.n	8003ea4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80c2 	beq.w	8003e98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fd5b 	bl	80087da <USB_ReadDevInEPInterrupt>
 8003d24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d057      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69f9      	ldr	r1, [r7, #28]
 8003d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d50:	4013      	ands	r3, r2
 8003d52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2301      	movs	r3, #1
 8003d64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d132      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334c      	adds	r3, #76	; 0x4c
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4403      	add	r3, r0
 8003d8e:	3348      	adds	r3, #72	; 0x48
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4419      	add	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	334c      	adds	r3, #76	; 0x4c
 8003da4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d113      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x3a2>
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3354      	adds	r3, #84	; 0x54
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2101      	movs	r1, #1
 8003dd0:	f004 fd62 	bl	8008898 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f006 ffd1 	bl	800ad82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	461a      	mov	r2, r3
 8003df8:	2308      	movs	r3, #8
 8003dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	461a      	mov	r2, r3
 8003e14:	2310      	movs	r3, #16
 8003e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e40:	6a38      	ldr	r0, [r7, #32]
 8003e42:	f003 fc43 	bl	80076cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3338      	adds	r3, #56	; 0x38
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	78db      	ldrb	r3, [r3, #3]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d108      	bne.n	8003e74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f007 f81e 	bl	800aeb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e80:	461a      	mov	r2, r3
 8003e82:	2302      	movs	r3, #2
 8003e84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fcdb 	bl	800484e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f47f af2e 	bne.w	8003d08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fc2d 	bl	8008710 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec0:	d122      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d108      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fec2 	bl	8004c74 <HAL_PCDEx_LPM_Callback>
 8003ef0:	e002      	b.n	8003ef8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f006 ffbc 	bl	800ae70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fbff 	bl	8008710 <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1c:	d112      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f006 ff78 	bl	800ae24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f004 fbe1 	bl	8008710 <USB_ReadInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	f040 80b7 	bne.w	80040ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2110      	movs	r1, #16
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fba8 	bl	80076cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f80:	e046      	b.n	8004010 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004008:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	3301      	adds	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004016:	429a      	cmp	r2, r3
 8004018:	d3b3      	bcc.n	8003f82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004028:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800402c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f043 030b 	orr.w	r3, r3, #11
 800404a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405c:	f043 030b 	orr.w	r3, r3, #11
 8004060:	6453      	str	r3, [r2, #68]	; 0x44
 8004062:	e015      	b.n	8004090 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004072:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004076:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800407a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f043 030b 	orr.w	r3, r3, #11
 800408e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040b4:	461a      	mov	r2, r3
 80040b6:	f004 fbef 	bl	8008898 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fb1e 	bl	8008710 <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	d124      	bne.n	800412a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f004 fbb4 	bl	8008852 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f003 fb69 	bl	80077c6 <USB_GetDevSpeed>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681c      	ldr	r4, [r3, #0]
 8004100:	f001 fa28 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8004104:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	4620      	mov	r0, r4
 8004110:	f003 f868 	bl	80071e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f006 fe5c 	bl	800add2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004128:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f004 faee 	bl	8008710 <USB_ReadInterrupts>
 8004134:	4603      	mov	r3, r0
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d10a      	bne.n	8004154 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f006 fe39 	bl	800adb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f002 0208 	and.w	r2, r2, #8
 8004152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f004 fad9 	bl	8008710 <USB_ReadInterrupts>
 800415e:	4603      	mov	r3, r0
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d122      	bne.n	80041ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004174:	2301      	movs	r3, #1
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
 8004178:	e014      	b.n	80041a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fb27 	bl	80047ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	3301      	adds	r3, #1
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3e5      	bcc.n	800417a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f004 faac 	bl	8008710 <USB_ReadInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c2:	d13b      	bne.n	800423c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c4:	2301      	movs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	e02b      	b.n	8004222 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	3340      	adds	r3, #64	; 0x40
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da12      	bge.n	800421c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	333f      	adds	r3, #63	; 0x3f
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fae8 	bl	80047ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	3301      	adds	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	429a      	cmp	r2, r3
 800422a:	d3ce      	bcc.n	80041ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800423a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f004 fa65 	bl	8008710 <USB_ReadInterrupts>
 8004246:	4603      	mov	r3, r0
 8004248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004250:	d155      	bne.n	80042fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004252:	2301      	movs	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	e045      	b.n	80042e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d12e      	bne.n	80042de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004280:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004282:	2b00      	cmp	r3, #0
 8004284:	da2b      	bge.n	80042de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004292:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004296:	429a      	cmp	r2, r3
 8004298:	d121      	bne.n	80042de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042da:	6053      	str	r3, [r2, #4]
            break;
 80042dc:	e007      	b.n	80042ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	3301      	adds	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3b4      	bcc.n	8004258 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fa04 	bl	8008710 <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d10a      	bne.n	800432a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f006 fddd 	bl	800aed4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f004 f9ee 	bl	8008710 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d115      	bne.n	800436a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f006 fdcd 	bl	800aef0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	e000      	b.n	800436a <HAL_PCD_IRQHandler+0x938>
      return;
 8004368:	bf00      	nop
    }
  }
}
 800436a:	3734      	adds	r7, #52	; 0x34
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}

08004370 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_PCD_SetAddress+0x1a>
 8004386:	2302      	movs	r3, #2
 8004388:	e013      	b.n	80043b2 <HAL_PCD_SetAddress+0x42>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f004 f94c 	bl	8008640 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	4608      	mov	r0, r1
 80043c4:	4611      	mov	r1, r2
 80043c6:	461a      	mov	r2, r3
 80043c8:	4603      	mov	r3, r0
 80043ca:	70fb      	strb	r3, [r7, #3]
 80043cc:	460b      	mov	r3, r1
 80043ce:	803b      	strh	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da0f      	bge.n	8004400 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	705a      	strb	r2, [r3, #1]
 80043fe:	e00f      	b.n	8004420 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800442c:	883a      	ldrh	r2, [r7, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	78ba      	ldrb	r2, [r7, #2]
 8004436:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800444a:	78bb      	ldrb	r3, [r7, #2]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d102      	bne.n	8004456 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_PCD_EP_Open+0xaa>
 8004460:	2302      	movs	r3, #2
 8004462:	e00e      	b.n	8004482 <HAL_PCD_EP_Open+0xc8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	4618      	mov	r0, r3
 8004474:	f003 f9cc 	bl	8007810 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004480:	7afb      	ldrb	r3, [r7, #11]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800449a:	2b00      	cmp	r3, #0
 800449c:	da0f      	bge.n	80044be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	3338      	adds	r3, #56	; 0x38
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	3304      	adds	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	705a      	strb	r2, [r3, #1]
 80044bc:	e00f      	b.n	80044de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_PCD_EP_Close+0x6e>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e00e      	b.n	8004516 <HAL_PCD_EP_Close+0x8c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 fa0a 	bl	8007920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	460b      	mov	r3, r1
 800452c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800452e:	7afb      	ldrb	r3, [r7, #11]
 8004530:	f003 020f 	and.w	r2, r3, #15
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	3304      	adds	r3, #4
 8004546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2200      	movs	r2, #0
 8004558:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	b2da      	uxtb	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	f003 fce9 	bl	8007f68 <USB_EP0StartXfer>
 8004596:	e008      	b.n	80045aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	f003 fa97 	bl	8007ad8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	460b      	mov	r3, r1
 80045f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	3338      	adds	r3, #56	; 0x38
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2201      	movs	r2, #1
 8004622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6979      	ldr	r1, [r7, #20]
 8004656:	f003 fc87 	bl	8007f68 <USB_EP0StartXfer>
 800465a:	e008      	b.n	800466e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	6979      	ldr	r1, [r7, #20]
 800466a:	f003 fa35 	bl	8007ad8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d901      	bls.n	8004696 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e050      	b.n	8004738 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da0f      	bge.n	80046be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3338      	adds	r3, #56	; 0x38
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	705a      	strb	r2, [r3, #1]
 80046bc:	e00d      	b.n	80046da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	3304      	adds	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_PCD_EP_SetStall+0x82>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e01e      	b.n	8004738 <HAL_PCD_EP_SetStall+0xc0>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	4618      	mov	r0, r3
 800470a:	f003 fec5 	bl	8008498 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	b2d9      	uxtb	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004728:	461a      	mov	r2, r3
 800472a:	f004 f8b5 	bl	8008898 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	f003 020f 	and.w	r2, r3, #15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d901      	bls.n	800475e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e042      	b.n	80047e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800475e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	da0f      	bge.n	8004786 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	3338      	adds	r3, #56	; 0x38
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	705a      	strb	r2, [r3, #1]
 8004784:	e00f      	b.n	80047a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 020f 	and.w	r2, r3, #15
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_PCD_EP_ClrStall+0x86>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e00e      	b.n	80047e4 <HAL_PCD_EP_ClrStall+0xa4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 fecd 	bl	8008574 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da0c      	bge.n	800481a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	f003 020f 	and.w	r2, r3, #15
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3338      	adds	r3, #56	; 0x38
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e00c      	b.n	8004834 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	4618      	mov	r0, r3
 800483c:	f003 fcec 	bl	8008218 <USB_EPStopXfer>
 8004840:	4603      	mov	r3, r0
 8004842:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004844:	7afb      	ldrb	r3, [r7, #11]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08a      	sub	sp, #40	; 0x28
 8004852:	af02      	add	r7, sp, #8
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	3338      	adds	r3, #56	; 0x38
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d901      	bls.n	8004886 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e06c      	b.n	8004960 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	429a      	cmp	r2, r3
 800489a:	d902      	bls.n	80048a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3303      	adds	r3, #3
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048aa:	e02b      	b.n	8004904 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d902      	bls.n	80048c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3303      	adds	r3, #3
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6919      	ldr	r1, [r3, #16]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f003 fd40 	bl	800836c <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	441a      	add	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	429a      	cmp	r2, r3
 8004918:	d809      	bhi.n	800492e <PCD_WriteEmptyTxFifo+0xe0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	429a      	cmp	r2, r3
 8004924:	d203      	bcs.n	800492e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1be      	bne.n	80048ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	429a      	cmp	r2, r3
 8004938:	d811      	bhi.n	800495e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	43db      	mvns	r3, r3
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495a:	4013      	ands	r3, r2
 800495c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	333c      	adds	r3, #60	; 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d17b      	bne.n	8004a96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a61      	ldr	r2, [pc, #388]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f240 80b9 	bls.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b3 	beq.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d0:	6093      	str	r3, [r2, #8]
 80049d2:	e0a7      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2320      	movs	r3, #32
 80049ee:	6093      	str	r3, [r2, #8]
 80049f0:	e098      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8093 	bne.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d90f      	bls.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	e07e      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a70:	461a      	mov	r2, r3
 8004a72:	2101      	movs	r1, #1
 8004a74:	f003 ff10 	bl	8008898 <USB_EP0_OutStart>
 8004a78:	e006      	b.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f006 f95c 	bl	800ad4c <HAL_PCD_DataOutStageCallback>
 8004a94:	e046      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	6093      	str	r3, [r2, #8]
 8004abc:	e032      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f006 f933 	bl	800ad4c <HAL_PCD_DataOutStageCallback>
 8004ae6:	e01d      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b10:	461a      	mov	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f003 fec0 	bl	8008898 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f006 f914 	bl	800ad4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a
 8004b34:	4f54310a 	.word	0x4f54310a

08004b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d90e      	bls.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f006 f8cb 	bl	800ad28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d90c      	bls.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bac:	461a      	mov	r2, r3
 8004bae:	2101      	movs	r1, #1
 8004bb0:	f003 fe72 	bl	8008898 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4f54300a 	.word	0x4f54300a

08004bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be2:	883b      	ldrh	r3, [r7, #0]
 8004be4:	0419      	lsls	r1, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	e028      	b.n	8004c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e00d      	b.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3340      	adds	r3, #64	; 0x40
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3ec      	bcc.n	8004c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c2c:	883b      	ldrh	r3, [r7, #0]
 8004c2e:	0418      	lsls	r0, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4302      	orrs	r2, r0
 8004c3c:	3340      	adds	r3, #64	; 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd fa16 	bl	8002174 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fa12 	bl	8002174 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fa02 	bl	8002174 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd f9fe 	bl	8002174 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd f9b7 	bl	8002174 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd f9b3 	bl	8002174 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd f996 	bl	8002174 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd f992 	bl	8002174 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd f976 	bl	8002174 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fd f972 	bl	8002174 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f95f 	bl	8002174 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fd f95b 	bl	8002174 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fd f91b 	bl	8002174 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd f917 	bl	8002174 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd f8dc 	bl	8002174 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fd f8d8 	bl	8002174 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd f8c6 	bl	8002174 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd f8c2 	bl	8002174 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd f896 	bl	8002174 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd f892 	bl	8002174 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd f86b 	bl	8002174 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd f867 	bl	8002174 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd f854 	bl	8002174 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd f850 	bl	8002174 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc ff82 	bl	8002174 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc ff7e 	bl	8002174 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc fee2 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800b37c 	.word	0x0800b37c
 8005340:	20000028 	.word	0x20000028
 8005344:	2000002c 	.word	0x2000002c

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b094      	sub	sp, #80	; 0x50
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
 8005354:	2300      	movs	r3, #0
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	2300      	movs	r3, #0
 800535a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b79      	ldr	r3, [pc, #484]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80e1 	bhi.w	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e0db      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b73      	ldr	r3, [pc, #460]	; (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005380:	e0db      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCC_GetSysClockFreq+0x208>)
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005386:	e0d8      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b6f      	ldr	r3, [pc, #444]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
 80053b2:	2300      	movs	r3, #0
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	0159      	lsls	r1, r3, #5
 80053c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053cc:	0150      	lsls	r0, r2, #5
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4621      	mov	r1, r4
 80053d4:	1a51      	subs	r1, r2, r1
 80053d6:	6139      	str	r1, [r7, #16]
 80053d8:	4629      	mov	r1, r5
 80053da:	eb63 0301 	sbc.w	r3, r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	018b      	lsls	r3, r1, #6
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f6:	4651      	mov	r1, sl
 80053f8:	018a      	lsls	r2, r1, #6
 80053fa:	4651      	mov	r1, sl
 80053fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005400:	4659      	mov	r1, fp
 8005402:	eb63 0901 	sbc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	462b      	mov	r3, r5
 8005428:	eb49 0303 	adc.w	r3, r9, r3
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543a:	4629      	mov	r1, r5
 800543c:	024b      	lsls	r3, r1, #9
 800543e:	4621      	mov	r1, r4
 8005440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005444:	4621      	mov	r1, r4
 8005446:	024a      	lsls	r2, r1, #9
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	2200      	movs	r2, #0
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 8005452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005458:	f7fa feb6 	bl	80001c8 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005464:	e058      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	4611      	mov	r1, r2
 8005472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 800547c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	0159      	lsls	r1, r3, #5
 800548e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005492:	0150      	lsls	r0, r2, #5
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4641      	mov	r1, r8
 800549a:	ebb2 0a01 	subs.w	sl, r2, r1
 800549e:	4649      	mov	r1, r9
 80054a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b8:	ebb2 040a 	subs.w	r4, r2, sl
 80054bc:	eb63 050b 	sbc.w	r5, r3, fp
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	00eb      	lsls	r3, r5, #3
 80054ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4643      	mov	r3, r8
 80054d6:	18e3      	adds	r3, r4, r3
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	464b      	mov	r3, r9
 80054dc:	eb45 0303 	adc.w	r3, r5, r3
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ee:	4629      	mov	r1, r5
 80054f0:	028b      	lsls	r3, r1, #10
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f8:	4621      	mov	r1, r4
 80054fa:	028a      	lsls	r2, r1, #10
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550c:	f7fa fe5c 	bl	80001c8 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	3301      	adds	r3, #1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005532:	e002      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800553c:	4618      	mov	r0, r3
 800553e:	3750      	adds	r7, #80	; 0x50
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000028 	.word	0x20000028

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	0800b38c 	.word	0x0800b38c

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffdc 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	0800b38c 	.word	0x0800b38c

080055bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e04c      	b.n	8005668 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d111      	bne.n	80055fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fbca 	bl	8005d7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <HAL_TIM_Base_Init+0xb4>)
 80055f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f000 fa79 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08001c15 	.word	0x08001c15

08005674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d128      	bne.n	80056dc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d121      	bne.n	80056dc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0202 	mvn.w	r2, #2
 80056a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
 80056c0:	e009      	b.n	80056d6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d128      	bne.n	800573c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d121      	bne.n	800573c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0204 	mvn.w	r2, #4
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
 8005720:	e009      	b.n	8005736 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b08      	cmp	r3, #8
 8005748:	d128      	bne.n	800579c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d121      	bne.n	800579c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0208 	mvn.w	r2, #8
 8005760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2204      	movs	r2, #4
 8005766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
 8005780:	e009      	b.n	8005796 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d128      	bne.n	80057fc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d121      	bne.n	80057fc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	e009      	b.n	80057f6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d110      	bne.n	800582c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d109      	bne.n	800582c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0201 	mvn.w	r2, #1
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d110      	bne.n	800585c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d109      	bne.n	800585c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d110      	bne.n	800588c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d109      	bne.n	800588c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d110      	bne.n	80058bc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d109      	bne.n	80058bc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0220 	mvn.w	r2, #32
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058bc:	bf00      	nop
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_ConfigClockSource+0x1c>
 80058dc:	2302      	movs	r3, #2
 80058de:	e0b4      	b.n	8005a4a <HAL_TIM_ConfigClockSource+0x186>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005918:	d03e      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0xd4>
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591e:	f200 8087 	bhi.w	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	f000 8086 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x172>
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592e:	d87f      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b70      	cmp	r3, #112	; 0x70
 8005932:	d01a      	beq.n	800596a <HAL_TIM_ConfigClockSource+0xa6>
 8005934:	2b70      	cmp	r3, #112	; 0x70
 8005936:	d87b      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b60      	cmp	r3, #96	; 0x60
 800593a:	d050      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x11a>
 800593c:	2b60      	cmp	r3, #96	; 0x60
 800593e:	d877      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b50      	cmp	r3, #80	; 0x50
 8005942:	d03c      	beq.n	80059be <HAL_TIM_ConfigClockSource+0xfa>
 8005944:	2b50      	cmp	r3, #80	; 0x50
 8005946:	d873      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d058      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x13a>
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d86f      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d064      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x15a>
 8005954:	2b30      	cmp	r3, #48	; 0x30
 8005956:	d86b      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005958:	2b20      	cmp	r3, #32
 800595a:	d060      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x15a>
 800595c:	2b20      	cmp	r3, #32
 800595e:	d867      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05c      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x15a>
 8005964:	2b10      	cmp	r3, #16
 8005966:	d05a      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x15a>
 8005968:	e062      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6899      	ldr	r1, [r3, #8]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f000 f9df 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800598c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	609a      	str	r2, [r3, #8]
      break;
 8005996:	e04f      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f000 f9c8 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ba:	609a      	str	r2, [r3, #8]
      break;
 80059bc:	e03c      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 f93c 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2150      	movs	r1, #80	; 0x50
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f995 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 80059dc:	e02c      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 f95b 	bl	8005ca6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2160      	movs	r1, #96	; 0x60
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f985 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 80059fc:	e01c      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 f91c 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2140      	movs	r1, #64	; 0x40
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f975 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e00c      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f000 f96c 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a2e:	e003      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      break;
 8005a34:	e000      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3a      	ldr	r2, [pc, #232]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d027      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d023      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2b      	ldr	r2, [pc, #172]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d017      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <TIM_Base_SetConfig+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00f      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_Base_SetConfig+0x134>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a24      	ldr	r2, [pc, #144]	; (8005c40 <TIM_Base_SetConfig+0x138>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a23      	ldr	r2, [pc, #140]	; (8005c44 <TIM_Base_SetConfig+0x13c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800
 8005c3c:	40001800 	.word	0x40001800
 8005c40:	40001c00 	.word	0x40001c00
 8005c44:	40002000 	.word	0x40002000

08005c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f043 0307 	orr.w	r3, r3, #7
 8005d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <TIM_ResetCallback+0x7c>)
 8005d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <TIM_ResetCallback+0x80>)
 8005d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <TIM_ResetCallback+0x84>)
 8005d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <TIM_ResetCallback+0x88>)
 8005da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_ResetCallback+0x8c>)
 8005da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_ResetCallback+0x90>)
 8005db0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_ResetCallback+0x94>)
 8005db8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_ResetCallback+0x98>)
 8005dc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_ResetCallback+0x9c>)
 8005dc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_ResetCallback+0xa0>)
 8005dd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <TIM_ResetCallback+0xa4>)
 8005dd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <TIM_ResetCallback+0xa8>)
 8005de0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <TIM_ResetCallback+0xac>)
 8005de8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	08001415 	.word	0x08001415
 8005dfc:	08005a53 	.word	0x08005a53
 8005e00:	08005acb 	.word	0x08005acb
 8005e04:	08005adf 	.word	0x08005adf
 8005e08:	08005a7b 	.word	0x08005a7b
 8005e0c:	08005a8f 	.word	0x08005a8f
 8005e10:	08005a67 	.word	0x08005a67
 8005e14:	08005aa3 	.word	0x08005aa3
 8005e18:	08005ab7 	.word	0x08005ab7
 8005e1c:	08005af3 	.word	0x08005af3
 8005e20:	08005f25 	.word	0x08005f25
 8005e24:	08005f39 	.word	0x08005f39
 8005e28:	08005f4d 	.word	0x08005f4d

08005e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e05a      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d01d      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40001800 	.word	0x40001800

08005f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e04a      	b.n	8006008 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d111      	bne.n	8005fa2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fbb0 	bl	80066ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <HAL_UART_Init+0xb0>)
 8005f98:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2224      	movs	r2, #36	; 0x24
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fe3c 	bl	8006c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	08001c91 	.word	0x08001c91

08006014 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	; 0x30
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b20      	cmp	r3, #32
 800602c:	d165      	bne.n	80060fa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_UART_Transmit_DMA+0x26>
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e05e      	b.n	80060fc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_UART_Transmit_DMA+0x38>
 8006048:	2302      	movs	r3, #2
 800604a:	e057      	b.n	80060fc <HAL_UART_Transmit_DMA+0xe8>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2221      	movs	r2, #33	; 0x21
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_UART_Transmit_DMA+0xf0>)
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	4a21      	ldr	r2, [pc, #132]	; (8006108 <HAL_UART_Transmit_DMA+0xf4>)
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <HAL_UART_Transmit_DMA+0xf8>)
 800608a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006090:	2200      	movs	r2, #0
 8006092:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3304      	adds	r3, #4
 80060a8:	461a      	mov	r2, r3
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	f7fc fe4e 	bl	8002d4c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	617b      	str	r3, [r7, #20]
   return(result);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e2:	627a      	str	r2, [r7, #36]	; 0x24
 80060e4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6a39      	ldr	r1, [r7, #32]
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e000      	b.n	80060fc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80060fa:	2302      	movs	r3, #2
  }
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3730      	adds	r7, #48	; 0x30
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	0800675d 	.word	0x0800675d
 8006108:	080067f9 	.word	0x080067f9
 800610c:	08006817 	.word	0x08006817

08006110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ba      	sub	sp, #232	; 0xe8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800614e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_UART_IRQHandler+0x66>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fca5 	bl	8006abe <UART_Receive_IT>
      return;
 8006174:	e25b      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80e1 	beq.w	8006342 <HAL_UART_IRQHandler+0x232>
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80d4 	beq.w	8006342 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_UART_IRQHandler+0xae>
 80061a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_UART_IRQHandler+0xd2>
 80061ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_UART_IRQHandler+0xf6>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <HAL_UART_IRQHandler+0x126>
 8006212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800621e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0208 	orr.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 81f2 	beq.w	8006624 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_UART_IRQHandler+0x14e>
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc30 	bl	8006abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <HAL_UART_IRQHandler+0x17a>
 8006282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d051      	beq.n	800632e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fb36 	bl	80068fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d142      	bne.n	8006324 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3314      	adds	r3, #20
 80062c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1d9      	bne.n	800629e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	4a7f      	ldr	r2, [pc, #508]	; (80064f4 <HAL_UART_IRQHandler+0x3e4>)
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fc fdec 	bl	8002edc <HAL_DMA_Abort_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d019      	beq.n	800633e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e011      	b.n	800633e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006322:	e00c      	b.n	800633e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	e007      	b.n	800633e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800633c:	e172      	b.n	8006624 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633e:	bf00      	nop
    return;
 8006340:	e170      	b.n	8006624 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	2b01      	cmp	r3, #1
 8006348:	f040 814c 	bne.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8145 	beq.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 813e 	beq.w	80065e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006368:	2300      	movs	r3, #0
 800636a:	60bb      	str	r3, [r7, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	f040 80b5 	bne.w	80064f8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800639a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8142 	beq.w	8006628 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ac:	429a      	cmp	r2, r3
 80063ae:	f080 813b 	bcs.w	8006628 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	f000 8088 	beq.w	80064d8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006400:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800640c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1d9      	bne.n	80063c8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3314      	adds	r3, #20
 800641a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006438:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800643c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006440:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800644a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e1      	bne.n	8006414 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006474:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800647a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e3      	bne.n	8006450 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a8:	f023 0310 	bic.w	r3, r3, #16
 80064ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80064bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e3      	bne.n	8006496 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fc92 	bl	8002dfc <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80064e4:	b292      	uxth	r2, r2
 80064e6:	1a8a      	subs	r2, r1, r2
 80064e8:	b292      	uxth	r2, r2
 80064ea:	4611      	mov	r1, r2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f0:	e09a      	b.n	8006628 <HAL_UART_IRQHandler+0x518>
 80064f2:	bf00      	nop
 80064f4:	080069c3 	.word	0x080069c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006500:	b29b      	uxth	r3, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 808c 	beq.w	800662c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8087 	beq.w	800662c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006542:	647a      	str	r2, [r7, #68]	; 0x44
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e3      	bne.n	800651e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	623b      	str	r3, [r7, #32]
   return(result);
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800657a:	633a      	str	r2, [r7, #48]	; 0x30
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065c0:	61fa      	str	r2, [r7, #28]
 80065c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	617b      	str	r3, [r7, #20]
   return(result);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e3      	bne.n	800659c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80065dc:	4611      	mov	r1, r2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065e2:	e023      	b.n	800662c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <HAL_UART_IRQHandler+0x4f4>
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9f5 	bl	80069ec <UART_Transmit_IT>
    return;
 8006602:	e014      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <HAL_UART_IRQHandler+0x51e>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa35 	bl	8006a8c <UART_EndTransmit_IT>
    return;
 8006622:	e004      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
    return;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
      return;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_UART_IRQHandler+0x51e>
      return;
 800662c:	bf00      	nop
  }
}
 800662e:	37e8      	adds	r7, #232	; 0xe8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <UART_InitCallbacksToDefault+0x4c>)
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a0f      	ldr	r2, [pc, #60]	; (800673c <UART_InitCallbacksToDefault+0x50>)
 80066fe:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <UART_InitCallbacksToDefault+0x54>)
 8006704:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a0e      	ldr	r2, [pc, #56]	; (8006744 <UART_InitCallbacksToDefault+0x58>)
 800670a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a0e      	ldr	r2, [pc, #56]	; (8006748 <UART_InitCallbacksToDefault+0x5c>)
 8006710:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <UART_InitCallbacksToDefault+0x60>)
 8006716:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <UART_InitCallbacksToDefault+0x64>)
 800671c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a0c      	ldr	r2, [pc, #48]	; (8006754 <UART_InitCallbacksToDefault+0x68>)
 8006722:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <UART_InitCallbacksToDefault+0x6c>)
 8006728:	669a      	str	r2, [r3, #104]	; 0x68

}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	08006649 	.word	0x08006649
 800673c:	08006635 	.word	0x08006635
 8006740:	08006671 	.word	0x08006671
 8006744:	0800665d 	.word	0x0800665d
 8006748:	08006685 	.word	0x08006685
 800674c:	08006699 	.word	0x08006699
 8006750:	080066ad 	.word	0x080066ad
 8006754:	080066c1 	.word	0x080066c1
 8006758:	080066d5 	.word	0x080066d5

0800675c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b090      	sub	sp, #64	; 0x40
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d137      	bne.n	80067e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677a:	2200      	movs	r2, #0
 800677c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800677e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	623b      	str	r3, [r7, #32]
   return(result);
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
 8006796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800679e:	633a      	str	r2, [r7, #48]	; 0x30
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e5      	bne.n	800677e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d2:	61fa      	str	r2, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	69b9      	ldr	r1, [r7, #24]
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	617b      	str	r3, [r7, #20]
   return(result);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e6:	e003      	b.n	80067f0 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067ee:	4798      	blx	r3
}
 80067f0:	bf00      	nop
 80067f2:	3740      	adds	r7, #64	; 0x40
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b21      	cmp	r3, #33	; 0x21
 8006848:	d108      	bne.n	800685c <UART_DMAError+0x46>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006856:	68b8      	ldr	r0, [r7, #8]
 8006858:	f000 f828 	bl	80068ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b22      	cmp	r3, #34	; 0x22
 800687c:	d108      	bne.n	8006890 <UART_DMAError+0x7a>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800688a:	68b8      	ldr	r0, [r7, #8]
 800688c:	f000 f836 	bl	80068fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f043 0210 	orr.w	r2, r3, #16
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a0:	68b8      	ldr	r0, [r7, #8]
 80068a2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	61ba      	str	r2, [r7, #24]
 80068d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	613b      	str	r3, [r7, #16]
   return(result);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80068f0:	bf00      	nop
 80068f2:	3724      	adds	r7, #36	; 0x24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b095      	sub	sp, #84	; 0x54
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006924:	643a      	str	r2, [r7, #64]	; 0x40
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3314      	adds	r3, #20
 800693e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	61fb      	str	r3, [r7, #28]
   return(result);
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3314      	adds	r3, #20
 8006956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800695e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e5      	bne.n	8006938 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d119      	bne.n	80069a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60bb      	str	r3, [r7, #8]
   return(result);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0310 	bic.w	r3, r3, #16
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006994:	61ba      	str	r2, [r7, #24]
 8006996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	613b      	str	r3, [r7, #16]
   return(result);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069b6:	bf00      	nop
 80069b8:	3754      	adds	r7, #84	; 0x54
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b21      	cmp	r3, #33	; 0x21
 80069fe:	d13e      	bne.n	8006a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a08:	d114      	bne.n	8006a34 <UART_Transmit_IT+0x48>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d110      	bne.n	8006a34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	1c9a      	adds	r2, r3, #2
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	621a      	str	r2, [r3, #32]
 8006a32:	e008      	b.n	8006a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	1c59      	adds	r1, r3, #1
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6211      	str	r1, [r2, #32]
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4619      	mov	r1, r3
 8006a54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e000      	b.n	8006a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
  }
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08c      	sub	sp, #48	; 0x30
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	f040 80ad 	bne.w	8006c2e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d117      	bne.n	8006b0e <UART_Receive_IT+0x50>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d113      	bne.n	8006b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b0c:	e026      	b.n	8006b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b20:	d007      	beq.n	8006b32 <UART_Receive_IT+0x74>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <UART_Receive_IT+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e008      	b.n	8006b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d15c      	bne.n	8006c2a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0220 	bic.w	r2, r2, #32
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d136      	bne.n	8006c1e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f023 0310 	bic.w	r3, r3, #16
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	623a      	str	r2, [r7, #32]
 8006bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	69f9      	ldr	r1, [r7, #28]
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d10a      	bne.n	8006c0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006c16:	4611      	mov	r1, r2
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
 8006c1c:	e003      	b.n	8006c26 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e002      	b.n	8006c30 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3730      	adds	r7, #48	; 0x30
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b0c0      	sub	sp, #256	; 0x100
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	68d9      	ldr	r1, [r3, #12]
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	ea40 0301 	orr.w	r3, r0, r1
 8006c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c90:	f021 010c 	bic.w	r1, r1, #12
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	6999      	ldr	r1, [r3, #24]
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	ea40 0301 	orr.w	r3, r0, r1
 8006cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b8f      	ldr	r3, [pc, #572]	; (8006f04 <UART_SetConfig+0x2cc>)
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d005      	beq.n	8006cd8 <UART_SetConfig+0xa0>
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b8d      	ldr	r3, [pc, #564]	; (8006f08 <UART_SetConfig+0x2d0>)
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d104      	bne.n	8006ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fe fc5c 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ce0:	e003      	b.n	8006cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ce2:	f7fe fc43 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8006ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf4:	f040 810c 	bne.w	8006f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	1891      	adds	r1, r2, r2
 8006d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d12:	415b      	adcs	r3, r3
 8006d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	eb12 0801 	adds.w	r8, r2, r1
 8006d20:	4629      	mov	r1, r5
 8006d22:	eb43 0901 	adc.w	r9, r3, r1
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d3a:	4690      	mov	r8, r2
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	eb18 0303 	adds.w	r3, r8, r3
 8006d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d48:	462b      	mov	r3, r5
 8006d4a:	eb49 0303 	adc.w	r3, r9, r3
 8006d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d66:	460b      	mov	r3, r1
 8006d68:	18db      	adds	r3, r3, r3
 8006d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	eb42 0303 	adc.w	r3, r2, r3
 8006d72:	657b      	str	r3, [r7, #84]	; 0x54
 8006d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d7c:	f7f9 fa24 	bl	80001c8 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4b61      	ldr	r3, [pc, #388]	; (8006f0c <UART_SetConfig+0x2d4>)
 8006d86:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	011c      	lsls	r4, r3, #4
 8006d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	1891      	adds	r1, r2, r2
 8006da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006da8:	415b      	adcs	r3, r3
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006db0:	4641      	mov	r1, r8
 8006db2:	eb12 0a01 	adds.w	sl, r2, r1
 8006db6:	4649      	mov	r1, r9
 8006db8:	eb43 0b01 	adc.w	fp, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dd0:	4692      	mov	sl, r2
 8006dd2:	469b      	mov	fp, r3
 8006dd4:	4643      	mov	r3, r8
 8006dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8006dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dde:	464b      	mov	r3, r9
 8006de0:	eb4b 0303 	adc.w	r3, fp, r3
 8006de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	18db      	adds	r3, r3, r3
 8006e00:	643b      	str	r3, [r7, #64]	; 0x40
 8006e02:	4613      	mov	r3, r2
 8006e04:	eb42 0303 	adc.w	r3, r2, r3
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e12:	f7f9 f9d9 	bl	80001c8 <__aeabi_uldivmod>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <UART_SetConfig+0x2d4>)
 8006e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	2264      	movs	r2, #100	; 0x64
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	1acb      	subs	r3, r1, r3
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e32:	4b36      	ldr	r3, [pc, #216]	; (8006f0c <UART_SetConfig+0x2d4>)
 8006e34:	fba3 2302 	umull	r2, r3, r3, r2
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e40:	441c      	add	r4, r3
 8006e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e64:	4641      	mov	r1, r8
 8006e66:	1851      	adds	r1, r2, r1
 8006e68:	6339      	str	r1, [r7, #48]	; 0x30
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	00cb      	lsls	r3, r1, #3
 8006e80:	4651      	mov	r1, sl
 8006e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e86:	4651      	mov	r1, sl
 8006e88:	00ca      	lsls	r2, r1, #3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4642      	mov	r2, r8
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e98:	464b      	mov	r3, r9
 8006e9a:	460a      	mov	r2, r1
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006eb8:	460b      	mov	r3, r1
 8006eba:	18db      	adds	r3, r3, r3
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ece:	f7f9 f97b 	bl	80001c8 <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <UART_SetConfig+0x2d4>)
 8006ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	2164      	movs	r1, #100	; 0x64
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	3332      	adds	r3, #50	; 0x32
 8006eea:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <UART_SetConfig+0x2d4>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f003 0207 	and.w	r2, r3, #7
 8006ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4422      	add	r2, r4
 8006efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f00:	e106      	b.n	8007110 <UART_SetConfig+0x4d8>
 8006f02:	bf00      	nop
 8006f04:	40011000 	.word	0x40011000
 8006f08:	40011400 	.word	0x40011400
 8006f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f22:	4642      	mov	r2, r8
 8006f24:	464b      	mov	r3, r9
 8006f26:	1891      	adds	r1, r2, r2
 8006f28:	6239      	str	r1, [r7, #32]
 8006f2a:	415b      	adcs	r3, r3
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f32:	4641      	mov	r1, r8
 8006f34:	1854      	adds	r4, r2, r1
 8006f36:	4649      	mov	r1, r9
 8006f38:	eb43 0501 	adc.w	r5, r3, r1
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	00eb      	lsls	r3, r5, #3
 8006f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4a:	00e2      	lsls	r2, r4, #3
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	461d      	mov	r5, r3
 8006f50:	4643      	mov	r3, r8
 8006f52:	18e3      	adds	r3, r4, r3
 8006f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f58:	464b      	mov	r3, r9
 8006f5a:	eb45 0303 	adc.w	r3, r5, r3
 8006f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f7e:	4629      	mov	r1, r5
 8006f80:	008b      	lsls	r3, r1, #2
 8006f82:	4621      	mov	r1, r4
 8006f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f88:	4621      	mov	r1, r4
 8006f8a:	008a      	lsls	r2, r1, #2
 8006f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f90:	f7f9 f91a 	bl	80001c8 <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4b60      	ldr	r3, [pc, #384]	; (800711c <UART_SetConfig+0x4e4>)
 8006f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	011c      	lsls	r4, r3, #4
 8006fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	1891      	adds	r1, r2, r2
 8006fba:	61b9      	str	r1, [r7, #24]
 8006fbc:	415b      	adcs	r3, r3
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	1851      	adds	r1, r2, r1
 8006fc8:	6139      	str	r1, [r7, #16]
 8006fca:	4649      	mov	r1, r9
 8006fcc:	414b      	adcs	r3, r1
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fdc:	4659      	mov	r1, fp
 8006fde:	00cb      	lsls	r3, r1, #3
 8006fe0:	4651      	mov	r1, sl
 8006fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	00ca      	lsls	r2, r1, #3
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	eb42 0303 	adc.w	r3, r2, r3
 8007000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	67bb      	str	r3, [r7, #120]	; 0x78
 800700e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800701c:	4649      	mov	r1, r9
 800701e:	008b      	lsls	r3, r1, #2
 8007020:	4641      	mov	r1, r8
 8007022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007026:	4641      	mov	r1, r8
 8007028:	008a      	lsls	r2, r1, #2
 800702a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800702e:	f7f9 f8cb 	bl	80001c8 <__aeabi_uldivmod>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4611      	mov	r1, r2
 8007038:	4b38      	ldr	r3, [pc, #224]	; (800711c <UART_SetConfig+0x4e4>)
 800703a:	fba3 2301 	umull	r2, r3, r3, r1
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	2264      	movs	r2, #100	; 0x64
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	1acb      	subs	r3, r1, r3
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	3332      	adds	r3, #50	; 0x32
 800704c:	4a33      	ldr	r2, [pc, #204]	; (800711c <UART_SetConfig+0x4e4>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007058:	441c      	add	r4, r3
 800705a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800705e:	2200      	movs	r2, #0
 8007060:	673b      	str	r3, [r7, #112]	; 0x70
 8007062:	677a      	str	r2, [r7, #116]	; 0x74
 8007064:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	1891      	adds	r1, r2, r2
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	415b      	adcs	r3, r3
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007078:	4641      	mov	r1, r8
 800707a:	1851      	adds	r1, r2, r1
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	4649      	mov	r1, r9
 8007080:	414b      	adcs	r3, r1
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007090:	4659      	mov	r1, fp
 8007092:	00cb      	lsls	r3, r1, #3
 8007094:	4651      	mov	r1, sl
 8007096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800709a:	4651      	mov	r1, sl
 800709c:	00ca      	lsls	r2, r1, #3
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	4642      	mov	r2, r8
 80070a6:	189b      	adds	r3, r3, r2
 80070a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070aa:	464b      	mov	r3, r9
 80070ac:	460a      	mov	r2, r1
 80070ae:	eb42 0303 	adc.w	r3, r2, r3
 80070b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	663b      	str	r3, [r7, #96]	; 0x60
 80070be:	667a      	str	r2, [r7, #100]	; 0x64
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070cc:	4649      	mov	r1, r9
 80070ce:	008b      	lsls	r3, r1, #2
 80070d0:	4641      	mov	r1, r8
 80070d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d6:	4641      	mov	r1, r8
 80070d8:	008a      	lsls	r2, r1, #2
 80070da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070de:	f7f9 f873 	bl	80001c8 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <UART_SetConfig+0x4e4>)
 80070e8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	2164      	movs	r1, #100	; 0x64
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	3332      	adds	r3, #50	; 0x32
 80070fa:	4a08      	ldr	r2, [pc, #32]	; (800711c <UART_SetConfig+0x4e4>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	f003 020f 	and.w	r2, r3, #15
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4422      	add	r2, r4
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007116:	46bd      	mov	sp, r7
 8007118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711c:	51eb851f 	.word	0x51eb851f

08007120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007120:	b084      	sub	sp, #16
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	f107 001c 	add.w	r0, r7, #28
 800712e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	2b01      	cmp	r3, #1
 8007136:	d122      	bne.n	800717e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800714c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d105      	bne.n	8007172 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fbee 	bl	8008954 <USB_CoreReset>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]
 800717c:	e01a      	b.n	80071b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fbe2 	bl	8008954 <USB_CoreReset>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
 80071a6:	e005      	b.n	80071b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d10b      	bne.n	80071d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f043 0206 	orr.w	r2, r3, #6
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f043 0220 	orr.w	r2, r3, #32
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071de:	b004      	add	sp, #16
 80071e0:	4770      	bx	lr
	...

080071e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d165      	bne.n	80072c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4a41      	ldr	r2, [pc, #260]	; (8007300 <USB_SetTurnaroundTime+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d906      	bls.n	800720e <USB_SetTurnaroundTime+0x2a>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a40      	ldr	r2, [pc, #256]	; (8007304 <USB_SetTurnaroundTime+0x120>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d202      	bcs.n	800720e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007208:	230f      	movs	r3, #15
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e062      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	4a3c      	ldr	r2, [pc, #240]	; (8007304 <USB_SetTurnaroundTime+0x120>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d306      	bcc.n	8007224 <USB_SetTurnaroundTime+0x40>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4a3b      	ldr	r2, [pc, #236]	; (8007308 <USB_SetTurnaroundTime+0x124>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d202      	bcs.n	8007224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800721e:	230e      	movs	r3, #14
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	e057      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4a38      	ldr	r2, [pc, #224]	; (8007308 <USB_SetTurnaroundTime+0x124>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d306      	bcc.n	800723a <USB_SetTurnaroundTime+0x56>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4a37      	ldr	r2, [pc, #220]	; (800730c <USB_SetTurnaroundTime+0x128>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d202      	bcs.n	800723a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007234:	230d      	movs	r3, #13
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e04c      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4a33      	ldr	r2, [pc, #204]	; (800730c <USB_SetTurnaroundTime+0x128>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d306      	bcc.n	8007250 <USB_SetTurnaroundTime+0x6c>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4a32      	ldr	r2, [pc, #200]	; (8007310 <USB_SetTurnaroundTime+0x12c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d802      	bhi.n	8007250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800724a:	230c      	movs	r3, #12
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	e041      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <USB_SetTurnaroundTime+0x12c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d906      	bls.n	8007266 <USB_SetTurnaroundTime+0x82>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a2e      	ldr	r2, [pc, #184]	; (8007314 <USB_SetTurnaroundTime+0x130>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d802      	bhi.n	8007266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007260:	230b      	movs	r3, #11
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e036      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4a2a      	ldr	r2, [pc, #168]	; (8007314 <USB_SetTurnaroundTime+0x130>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d906      	bls.n	800727c <USB_SetTurnaroundTime+0x98>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4a29      	ldr	r2, [pc, #164]	; (8007318 <USB_SetTurnaroundTime+0x134>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d802      	bhi.n	800727c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007276:	230a      	movs	r3, #10
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e02b      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4a26      	ldr	r2, [pc, #152]	; (8007318 <USB_SetTurnaroundTime+0x134>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d906      	bls.n	8007292 <USB_SetTurnaroundTime+0xae>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <USB_SetTurnaroundTime+0x138>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d202      	bcs.n	8007292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800728c:	2309      	movs	r3, #9
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e020      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <USB_SetTurnaroundTime+0x138>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d306      	bcc.n	80072a8 <USB_SetTurnaroundTime+0xc4>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <USB_SetTurnaroundTime+0x13c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d802      	bhi.n	80072a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072a2:	2308      	movs	r3, #8
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e015      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <USB_SetTurnaroundTime+0x13c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d906      	bls.n	80072be <USB_SetTurnaroundTime+0xda>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <USB_SetTurnaroundTime+0x140>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d202      	bcs.n	80072be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072b8:	2307      	movs	r3, #7
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e00a      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072be:	2306      	movs	r3, #6
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e007      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072ca:	2309      	movs	r3, #9
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e001      	b.n	80072d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072d0:	2309      	movs	r3, #9
 80072d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	029b      	lsls	r3, r3, #10
 80072e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	00d8acbf 	.word	0x00d8acbf
 8007304:	00e4e1c0 	.word	0x00e4e1c0
 8007308:	00f42400 	.word	0x00f42400
 800730c:	01067380 	.word	0x01067380
 8007310:	011a499f 	.word	0x011a499f
 8007314:	01312cff 	.word	0x01312cff
 8007318:	014ca43f 	.word	0x014ca43f
 800731c:	016e3600 	.word	0x016e3600
 8007320:	01a6ab1f 	.word	0x01a6ab1f
 8007324:	01e84800 	.word	0x01e84800

08007328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f043 0201 	orr.w	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d115      	bne.n	80073ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800739a:	2001      	movs	r0, #1
 800739c:	f7fa fef6 	bl	800218c <HAL_Delay>
      ms++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fa45 	bl	8008836 <USB_GetMode>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d01e      	beq.n	80073f0 <USB_SetCurrentMode+0x84>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b31      	cmp	r3, #49	; 0x31
 80073b6:	d9f0      	bls.n	800739a <USB_SetCurrentMode+0x2e>
 80073b8:	e01a      	b.n	80073f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d115      	bne.n	80073ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073cc:	2001      	movs	r0, #1
 80073ce:	f7fa fedd 	bl	800218c <HAL_Delay>
      ms++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fa2c 	bl	8008836 <USB_GetMode>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <USB_SetCurrentMode+0x84>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b31      	cmp	r3, #49	; 0x31
 80073e8:	d9f0      	bls.n	80073cc <USB_SetCurrentMode+0x60>
 80073ea:	e001      	b.n	80073f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e005      	b.n	80073fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b32      	cmp	r3, #50	; 0x32
 80073f4:	d101      	bne.n	80073fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007404:	b084      	sub	sp, #16
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e009      	b.n	8007438 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3340      	adds	r3, #64	; 0x40
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	2200      	movs	r2, #0
 8007430:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b0e      	cmp	r3, #14
 800743c:	d9f2      	bls.n	8007424 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800743e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11c      	bne.n	800747e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007452:	f043 0302 	orr.w	r3, r3, #2
 8007456:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
 800747c:	e00b      	b.n	8007496 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800749c:	461a      	mov	r2, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a8:	4619      	mov	r1, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	461a      	mov	r2, r3
 80074b2:	680b      	ldr	r3, [r1, #0]
 80074b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d10c      	bne.n	80074d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f965 	bl	8007794 <USB_SetDevSpeed>
 80074ca:	e008      	b.n	80074de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074cc:	2101      	movs	r1, #1
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f960 	bl	8007794 <USB_SetDevSpeed>
 80074d4:	e003      	b.n	80074de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074d6:	2103      	movs	r1, #3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f95b 	bl	8007794 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074de:	2110      	movs	r1, #16
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8f3 	bl	80076cc <USB_FlushTxFifo>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f91f 	bl	8007734 <USB_FlushRxFifo>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	461a      	mov	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	461a      	mov	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751e:	461a      	mov	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	e043      	b.n	80075b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007540:	d118      	bne.n	8007574 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	461a      	mov	r2, r3
 8007556:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	e013      	b.n	8007586 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	461a      	mov	r2, r3
 800756c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e008      	b.n	8007586 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	461a      	mov	r2, r3
 8007582:	2300      	movs	r3, #0
 8007584:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	461a      	mov	r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	461a      	mov	r2, r3
 80075a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	3301      	adds	r3, #1
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d3b7      	bcc.n	800752a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e043      	b.n	8007648 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d6:	d118      	bne.n	800760a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	461a      	mov	r2, r3
 80075ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	e013      	b.n	800761c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e008      	b.n	800761c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	461a      	mov	r2, r3
 8007618:	2300      	movs	r3, #0
 800761a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	461a      	mov	r2, r3
 800762a:	2300      	movs	r3, #0
 800762c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	461a      	mov	r2, r3
 800763c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	429a      	cmp	r2, r3
 800764e:	d3b7      	bcc.n	80075c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007662:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007670:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f043 0210 	orr.w	r2, r3, #16
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <USB_DevInit+0x2c4>)
 800768a:	4313      	orrs	r3, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f043 0208 	orr.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d107      	bne.n	80076b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b0:	f043 0304 	orr.w	r3, r3, #4
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c4:	b004      	add	sp, #16
 80076c6:	4770      	bx	lr
 80076c8:	803c3800 	.word	0x803c3800

080076cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a13      	ldr	r2, [pc, #76]	; (8007730 <USB_FlushTxFifo+0x64>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d901      	bls.n	80076ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e01b      	b.n	8007724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	daf2      	bge.n	80076da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	019b      	lsls	r3, r3, #6
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a08      	ldr	r2, [pc, #32]	; (8007730 <USB_FlushTxFifo+0x64>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d901      	bls.n	8007716 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e006      	b.n	8007724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b20      	cmp	r3, #32
 8007720:	d0f0      	beq.n	8007704 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	00030d40 	.word	0x00030d40

08007734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <USB_FlushRxFifo+0x5c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d901      	bls.n	8007752 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e018      	b.n	8007784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	daf2      	bge.n	8007740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2210      	movs	r2, #16
 8007762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <USB_FlushRxFifo+0x5c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e006      	b.n	8007784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b10      	cmp	r3, #16
 8007780:	d0f0      	beq.n	8007764 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	00030d40 	.word	0x00030d40

08007794 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	68f9      	ldr	r1, [r7, #12]
 80077b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
 80077ea:	e00a      	b.n	8007802 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d002      	beq.n	80077f8 <USB_GetDevSpeed+0x32>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d102      	bne.n	80077fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80077f8:	2302      	movs	r3, #2
 80077fa:	75fb      	strb	r3, [r7, #23]
 80077fc:	e001      	b.n	8007802 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80077fe:	230f      	movs	r3, #15
 8007800:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d13a      	bne.n	80078a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	68f9      	ldr	r1, [r7, #12]
 8007846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784a:	4313      	orrs	r3, r2
 800784c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d155      	bne.n	8007910 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	791b      	ldrb	r3, [r3, #4]
 800787e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007880:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	059b      	lsls	r3, r3, #22
 8007886:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007888:	4313      	orrs	r3, r2
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	0151      	lsls	r1, r2, #5
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	440a      	add	r2, r1
 8007892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e036      	b.n	8007910 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	2101      	movs	r1, #1
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	041b      	lsls	r3, r3, #16
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d11a      	bne.n	8007910 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	791b      	ldrb	r3, [r3, #4]
 80078f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078f6:	430b      	orrs	r3, r1
 80078f8:	4313      	orrs	r3, r2
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
	...

08007920 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d161      	bne.n	8007a00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800794e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007952:	d11f      	bne.n	8007994 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	440a      	add	r2, r1
 800796a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007972:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007992:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	2101      	movs	r1, #1
 80079a6:	fa01 f303 	lsl.w	r3, r1, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	43db      	mvns	r3, r3
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b4:	4013      	ands	r3, r2
 80079b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f303 	lsl.w	r3, r1, r3
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d8:	4013      	ands	r3, r2
 80079da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	0159      	lsls	r1, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	440b      	add	r3, r1
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	4619      	mov	r1, r3
 80079f8:	4b35      	ldr	r3, [pc, #212]	; (8007ad0 <USB_DeactivateEndpoint+0x1b0>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]
 80079fe:	e060      	b.n	8007ac2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a16:	d11f      	bne.n	8007a58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	2101      	movs	r1, #1
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	43db      	mvns	r3, r3
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a78:	4013      	ands	r3, r2
 8007a7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	43db      	mvns	r3, r3
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	0159      	lsls	r1, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	4619      	mov	r1, r3
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <USB_DeactivateEndpoint+0x1b4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	ec337800 	.word	0xec337800
 8007ad4:	eff37800 	.word	0xeff37800

08007ad8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 815c 	bne.w	8007db2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d132      	bne.n	8007b68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b60:	0cdb      	lsrs	r3, r3, #19
 8007b62:	04db      	lsls	r3, r3, #19
 8007b64:	6113      	str	r3, [r2, #16]
 8007b66:	e074      	b.n	8007c52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b82:	0cdb      	lsrs	r3, r3, #19
 8007b84:	04db      	lsls	r3, r3, #19
 8007b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6999      	ldr	r1, [r3, #24]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	440b      	add	r3, r1
 8007bc4:	1e59      	subs	r1, r3, #1
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007bd0:	4b9d      	ldr	r3, [pc, #628]	; (8007e48 <USB_EPStartXfer+0x370>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	69b9      	ldr	r1, [r7, #24]
 8007bd6:	0148      	lsls	r0, r1, #5
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	4401      	add	r1, r0
 8007bdc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007be0:	4313      	orrs	r3, r2
 8007be2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	0148      	lsls	r0, r1, #5
 8007bfe:	69f9      	ldr	r1, [r7, #28]
 8007c00:	4401      	add	r1, r0
 8007c02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c06:	4313      	orrs	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	791b      	ldrb	r3, [r3, #4]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d11f      	bne.n	8007c52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d14b      	bne.n	8007cf0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	791b      	ldrb	r3, [r3, #4]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d128      	bne.n	8007cce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d110      	bne.n	8007cae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e00f      	b.n	8007cce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ccc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e133      	b.n	8007f58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d015      	beq.n	8007d44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 811b 	beq.w	8007f58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	2101      	movs	r1, #1
 8007d34:	fa01 f303 	lsl.w	r3, r1, r3
 8007d38:	69f9      	ldr	r1, [r7, #28]
 8007d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	634b      	str	r3, [r1, #52]	; 0x34
 8007d42:	e109      	b.n	8007f58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d110      	bne.n	8007d76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e00f      	b.n	8007d96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6919      	ldr	r1, [r3, #16]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	b298      	uxth	r0, r3
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4603      	mov	r3, r0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fade 	bl	800836c <USB_WritePacket>
 8007db0:	e0d2      	b.n	8007f58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dcc:	0cdb      	lsrs	r3, r3, #19
 8007dce:	04db      	lsls	r3, r3, #19
 8007dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007df4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d126      	bne.n	8007e4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	0148      	lsls	r0, r1, #5
 8007e18:	69f9      	ldr	r1, [r7, #28]
 8007e1a:	4401      	add	r1, r0
 8007e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e20:	4313      	orrs	r3, r2
 8007e22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e42:	6113      	str	r3, [r2, #16]
 8007e44:	e03a      	b.n	8007ebc <USB_EPStartXfer+0x3e4>
 8007e46:	bf00      	nop
 8007e48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	8afa      	ldrh	r2, [r7, #22]
 8007e68:	fb03 f202 	mul.w	r2, r3, r2
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	8afb      	ldrh	r3, [r7, #22]
 8007e80:	04d9      	lsls	r1, r3, #19
 8007e82:	4b38      	ldr	r3, [pc, #224]	; (8007f64 <USB_EPStartXfer+0x48c>)
 8007e84:	400b      	ands	r3, r1
 8007e86:	69b9      	ldr	r1, [r7, #24]
 8007e88:	0148      	lsls	r0, r1, #5
 8007e8a:	69f9      	ldr	r1, [r7, #28]
 8007e8c:	4401      	add	r1, r0
 8007e8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e92:	4313      	orrs	r3, r2
 8007e94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	0148      	lsls	r0, r1, #5
 8007eb0:	69f9      	ldr	r1, [r7, #28]
 8007eb2:	4401      	add	r1, r0
 8007eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d10d      	bne.n	8007ede <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6919      	ldr	r1, [r3, #16]
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eda:	460a      	mov	r2, r1
 8007edc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	791b      	ldrb	r3, [r3, #4]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d128      	bne.n	8007f38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d110      	bne.n	8007f18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e00f      	b.n	8007f38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	1ff80000 	.word	0x1ff80000

08007f68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 80ce 	bne.w	8008126 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d132      	bne.n	8007ff8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	0151      	lsls	r1, r2, #5
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	440a      	add	r2, r1
 8007fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff0:	0cdb      	lsrs	r3, r3, #19
 8007ff2:	04db      	lsls	r3, r3, #19
 8007ff4:	6113      	str	r3, [r2, #16]
 8007ff6:	e04e      	b.n	8008096 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008012:	0cdb      	lsrs	r3, r3, #19
 8008014:	04db      	lsls	r3, r3, #19
 8008016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008032:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008036:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800803a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	429a      	cmp	r2, r3
 8008046:	d903      	bls.n	8008050 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800806e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008086:	6939      	ldr	r1, [r7, #16]
 8008088:	0148      	lsls	r0, r1, #5
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	4401      	add	r1, r0
 800808e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008092:	4313      	orrs	r3, r2
 8008094:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d11e      	bne.n	80080da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	461a      	mov	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	e097      	b.n	800820a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	0151      	lsls	r1, r2, #5
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	440a      	add	r2, r1
 80080f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8083 	beq.w	800820a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f303 	lsl.w	r3, r1, r3
 800811a:	6979      	ldr	r1, [r7, #20]
 800811c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008120:	4313      	orrs	r3, r2
 8008122:	634b      	str	r3, [r1, #52]	; 0x34
 8008124:	e071      	b.n	800820a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	440a      	add	r2, r1
 800813c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008140:	0cdb      	lsrs	r3, r3, #19
 8008142:	04db      	lsls	r3, r3, #19
 8008144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008168:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081b8:	6939      	ldr	r1, [r7, #16]
 80081ba:	0148      	lsls	r0, r1, #5
 80081bc:	6979      	ldr	r1, [r7, #20]
 80081be:	4401      	add	r1, r0
 80081c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081c4:	4313      	orrs	r3, r2
 80081c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10d      	bne.n	80081ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6919      	ldr	r1, [r3, #16]
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	460a      	mov	r2, r1
 80081e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	0151      	lsls	r1, r2, #5
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	440a      	add	r2, r1
 8008200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d14a      	bne.n	80082cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800824e:	f040 8086 	bne.w	800835e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008270:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008274:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008298:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d902      	bls.n	80082b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]
          break;
 80082ae:	e056      	b.n	800835e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082c8:	d0e7      	beq.n	800829a <USB_EPStopXfer+0x82>
 80082ca:	e048      	b.n	800835e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e4:	d13b      	bne.n	800835e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008308:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	7812      	ldrb	r2, [r2, #0]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	440a      	add	r2, r1
 8008324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800832c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f242 7210 	movw	r2, #10000	; 0x2710
 800833a:	4293      	cmp	r3, r2
 800833c:	d902      	bls.n	8008344 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
          break;
 8008342:	e00c      	b.n	800835e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800835c:	d0e7      	beq.n	800832e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008360:	4618      	mov	r0, r3
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800836c:	b480      	push	{r7}
 800836e:	b089      	sub	sp, #36	; 0x24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	460b      	mov	r3, r1
 800837c:	71fb      	strb	r3, [r7, #7]
 800837e:	4613      	mov	r3, r2
 8008380:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800838a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800838e:	2b00      	cmp	r3, #0
 8008390:	d123      	bne.n	80083da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008392:	88bb      	ldrh	r3, [r7, #4]
 8008394:	3303      	adds	r3, #3
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	e018      	b.n	80083d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	031a      	lsls	r2, r3, #12
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ac:	461a      	mov	r2, r3
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	3301      	adds	r3, #1
 80083b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	3301      	adds	r3, #1
 80083be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	3301      	adds	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d3e2      	bcc.n	80083a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3724      	adds	r7, #36	; 0x24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b08b      	sub	sp, #44	; 0x2c
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	089b      	lsrs	r3, r3, #2
 8008402:	b29b      	uxth	r3, r3
 8008404:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800840e:	2300      	movs	r3, #0
 8008410:	623b      	str	r3, [r7, #32]
 8008412:	e014      	b.n	800843e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	3301      	adds	r3, #1
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	3301      	adds	r3, #1
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	3301      	adds	r3, #1
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	3301      	adds	r3, #1
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	3301      	adds	r3, #1
 800843c:	623b      	str	r3, [r7, #32]
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	429a      	cmp	r2, r3
 8008444:	d3e6      	bcc.n	8008414 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008446:	8bfb      	ldrh	r3, [r7, #30]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	461a      	mov	r2, r3
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	fa22 f303 	lsr.w	r3, r2, r3
 800846c:	b2da      	uxtb	r2, r3
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	701a      	strb	r2, [r3, #0]
      i++;
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	3301      	adds	r3, #1
 8008476:	623b      	str	r3, [r7, #32]
      pDest++;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	3301      	adds	r3, #1
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800847e:	8bfb      	ldrh	r3, [r7, #30]
 8008480:	3b01      	subs	r3, #1
 8008482:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008484:	8bfb      	ldrh	r3, [r7, #30]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1ea      	bne.n	8008460 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800848c:	4618      	mov	r0, r3
 800848e:	372c      	adds	r7, #44	; 0x2c
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d12c      	bne.n	800850e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	db12      	blt.n	80084ec <USB_EPSetStall+0x54>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00f      	beq.n	80084ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	440a      	add	r2, r1
 8008502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	e02b      	b.n	8008566 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	db12      	blt.n	8008546 <USB_EPSetStall+0xae>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00f      	beq.n	8008546 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	440a      	add	r2, r1
 800853c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008540:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008544:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008564:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d128      	bne.n	80085e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	791b      	ldrb	r3, [r3, #4]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d003      	beq.n	80085c0 <USB_EPClearStall+0x4c>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d138      	bne.n	8008632 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	0151      	lsls	r1, r2, #5
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	440a      	add	r2, r1
 80085d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e027      	b.n	8008632 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008600:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d003      	beq.n	8008612 <USB_EPClearStall+0x9e>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d10f      	bne.n	8008632 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008630:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800865e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008662:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800867a:	4313      	orrs	r3, r2
 800867c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086a6:	f023 0303 	bic.w	r3, r3, #3
 80086aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086ba:	f023 0302 	bic.w	r3, r3, #2
 80086be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086fc:	f043 0302 	orr.w	r3, r3, #2
 8008700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4013      	ands	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4013      	ands	r3, r2
 8008758:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	0c1b      	lsrs	r3, r3, #16
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	4013      	ands	r3, r2
 800878c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	b29b      	uxth	r3, r3
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	4013      	ands	r3, r2
 80087ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087cc:	68bb      	ldr	r3, [r7, #8]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	fa22 f303 	lsr.w	r3, r2, r3
 800880a:	01db      	lsls	r3, r3, #7
 800880c:	b2db      	uxtb	r3, r3
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4013      	ands	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008828:	68bb      	ldr	r3, [r7, #8]
}
 800882a:	4618      	mov	r0, r3
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	f003 0301 	and.w	r3, r3, #1
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008870:	f023 0307 	bic.w	r3, r3, #7
 8008874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	460b      	mov	r3, r1
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	333c      	adds	r3, #60	; 0x3c
 80088ae:	3304      	adds	r3, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	4a26      	ldr	r2, [pc, #152]	; (8008950 <USB_EP0_OutStart+0xb8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d90a      	bls.n	80088d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088cc:	d101      	bne.n	80088d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e037      	b.n	8008942 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d8:	461a      	mov	r2, r3
 80088da:	2300      	movs	r3, #0
 80088dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008900:	f043 0318 	orr.w	r3, r3, #24
 8008904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008914:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008918:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10f      	bne.n	8008940 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800893e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	4f54300a 	.word	0x4f54300a

08008954 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4a13      	ldr	r2, [pc, #76]	; (80089b8 <USB_CoreReset+0x64>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e01b      	b.n	80089aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	daf2      	bge.n	8008960 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f043 0201 	orr.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3301      	adds	r3, #1
 800898e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <USB_CoreReset+0x64>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d901      	bls.n	800899c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e006      	b.n	80089aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d0f0      	beq.n	800898a <USB_CoreReset+0x36>

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	00030d40 	.word	0x00030d40

080089bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089cc:	f002 fc28 	bl	800b220 <USBD_static_malloc>
 80089d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32b0      	adds	r2, #176	; 0xb0
 80089e2:	2100      	movs	r1, #0
 80089e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80089e8:	2302      	movs	r3, #2
 80089ea:	e0d4      	b.n	8008b96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80089ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80089f0:	2100      	movs	r1, #0
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f002 fc58 	bl	800b2a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	32b0      	adds	r2, #176	; 0xb0
 8008a02:	68f9      	ldr	r1, [r7, #12]
 8008a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32b0      	adds	r2, #176	; 0xb0
 8008a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7c1b      	ldrb	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d138      	bne.n	8008a96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a24:	4b5e      	ldr	r3, [pc, #376]	; (8008ba0 <USBD_CDC_Init+0x1e4>)
 8008a26:	7819      	ldrb	r1, [r3, #0]
 8008a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f002 fad3 	bl	800afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a34:	4b5a      	ldr	r3, [pc, #360]	; (8008ba0 <USBD_CDC_Init+0x1e4>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	3324      	adds	r3, #36	; 0x24
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a4e:	4b55      	ldr	r3, [pc, #340]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008a50:	7819      	ldrb	r1, [r3, #0]
 8008a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a56:	2202      	movs	r2, #2
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 fabe 	bl	800afda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a5e:	4b51      	ldr	r3, [pc, #324]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 020f 	and.w	r2, r3, #15
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a76:	2201      	movs	r2, #1
 8008a78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a7a:	4b4b      	ldr	r3, [pc, #300]	; (8008ba8 <USBD_CDC_Init+0x1ec>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 020f 	and.w	r2, r3, #15
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	3326      	adds	r3, #38	; 0x26
 8008a90:	2210      	movs	r2, #16
 8008a92:	801a      	strh	r2, [r3, #0]
 8008a94:	e035      	b.n	8008b02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a96:	4b42      	ldr	r3, [pc, #264]	; (8008ba0 <USBD_CDC_Init+0x1e4>)
 8008a98:	7819      	ldrb	r1, [r3, #0]
 8008a9a:	2340      	movs	r3, #64	; 0x40
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f002 fa9b 	bl	800afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008aa4:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <USBD_CDC_Init+0x1e4>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f003 020f 	and.w	r2, r3, #15
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3324      	adds	r3, #36	; 0x24
 8008aba:	2201      	movs	r2, #1
 8008abc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008abe:	4b39      	ldr	r3, [pc, #228]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008ac0:	7819      	ldrb	r1, [r3, #0]
 8008ac2:	2340      	movs	r3, #64	; 0x40
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f002 fa87 	bl	800afda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008acc:	4b35      	ldr	r3, [pc, #212]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 020f 	and.w	r2, r3, #15
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ae8:	4b2f      	ldr	r3, [pc, #188]	; (8008ba8 <USBD_CDC_Init+0x1ec>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 020f 	and.w	r2, r3, #15
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	3326      	adds	r3, #38	; 0x26
 8008afe:	2210      	movs	r2, #16
 8008b00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b02:	4b29      	ldr	r3, [pc, #164]	; (8008ba8 <USBD_CDC_Init+0x1ec>)
 8008b04:	7819      	ldrb	r1, [r3, #0]
 8008b06:	2308      	movs	r3, #8
 8008b08:	2203      	movs	r2, #3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f002 fa65 	bl	800afda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <USBD_CDC_Init+0x1ec>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 020f 	and.w	r2, r3, #15
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	440b      	add	r3, r1
 8008b24:	3324      	adds	r3, #36	; 0x24
 8008b26:	2201      	movs	r2, #1
 8008b28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	33b0      	adds	r3, #176	; 0xb0
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008b60:	2302      	movs	r3, #2
 8008b62:	e018      	b.n	8008b96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7c1b      	ldrb	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008b6e:	7819      	ldrb	r1, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f002 fb1c 	bl	800b1b8 <USBD_LL_PrepareReceive>
 8008b80:	e008      	b.n	8008b94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b82:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <USBD_CDC_Init+0x1e8>)
 8008b84:	7819      	ldrb	r1, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f002 fb12 	bl	800b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200000bb 	.word	0x200000bb
 8008ba4:	200000bc 	.word	0x200000bc
 8008ba8:	200000bd 	.word	0x200000bd

08008bac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008bb8:	4b3a      	ldr	r3, [pc, #232]	; (8008ca4 <USBD_CDC_DeInit+0xf8>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f002 fa31 	bl	800b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008bc4:	4b37      	ldr	r3, [pc, #220]	; (8008ca4 <USBD_CDC_DeInit+0xf8>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3324      	adds	r3, #36	; 0x24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008bde:	4b32      	ldr	r3, [pc, #200]	; (8008ca8 <USBD_CDC_DeInit+0xfc>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f002 fa1e 	bl	800b026 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008bea:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <USBD_CDC_DeInit+0xfc>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c02:	2200      	movs	r2, #0
 8008c04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c06:	4b29      	ldr	r3, [pc, #164]	; (8008cac <USBD_CDC_DeInit+0x100>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f002 fa0a 	bl	800b026 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c12:	4b26      	ldr	r3, [pc, #152]	; (8008cac <USBD_CDC_DeInit+0x100>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 020f 	and.w	r2, r3, #15
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3324      	adds	r3, #36	; 0x24
 8008c28:	2200      	movs	r2, #0
 8008c2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c2c:	4b1f      	ldr	r3, [pc, #124]	; (8008cac <USBD_CDC_DeInit+0x100>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 020f 	and.w	r2, r3, #15
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	3326      	adds	r3, #38	; 0x26
 8008c42:	2200      	movs	r2, #0
 8008c44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	32b0      	adds	r2, #176	; 0xb0
 8008c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01f      	beq.n	8008c98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	33b0      	adds	r3, #176	; 0xb0
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32b0      	adds	r2, #176	; 0xb0
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f002 fade 	bl	800b23c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	32b0      	adds	r2, #176	; 0xb0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200000bb 	.word	0x200000bb
 8008ca8:	200000bc 	.word	0x200000bc
 8008cac:	200000bd 	.word	0x200000bd

08008cb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	32b0      	adds	r2, #176	; 0xb0
 8008cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e0bf      	b.n	8008e60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d050      	beq.n	8008d8e <USBD_CDC_Setup+0xde>
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	f040 80af 	bne.w	8008e50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	88db      	ldrh	r3, [r3, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d03a      	beq.n	8008d70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da1b      	bge.n	8008d3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	33b0      	adds	r3, #176	; 0xb0
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	88d2      	ldrh	r2, [r2, #6]
 8008d20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	bf28      	it	cs
 8008d2a:	2307      	movcs	r3, #7
 8008d2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	89fa      	ldrh	r2, [r7, #14]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fd43 	bl	800a7c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d3a:	e090      	b.n	8008e5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	785a      	ldrb	r2, [r3, #1]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	88db      	ldrh	r3, [r3, #6]
 8008d4a:	2b3f      	cmp	r3, #63	; 0x3f
 8008d4c:	d803      	bhi.n	8008d56 <USBD_CDC_Setup+0xa6>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	88db      	ldrh	r3, [r3, #6]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	e000      	b.n	8008d58 <USBD_CDC_Setup+0xa8>
 8008d56:	2240      	movs	r2, #64	; 0x40
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008d5e:	6939      	ldr	r1, [r7, #16]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d66:	461a      	mov	r2, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 fd55 	bl	800a818 <USBD_CtlPrepareRx>
      break;
 8008d6e:	e076      	b.n	8008e5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	33b0      	adds	r3, #176	; 0xb0
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	7850      	ldrb	r0, [r2, #1]
 8008d86:	2200      	movs	r2, #0
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	4798      	blx	r3
      break;
 8008d8c:	e067      	b.n	8008e5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	2b0b      	cmp	r3, #11
 8008d94:	d851      	bhi.n	8008e3a <USBD_CDC_Setup+0x18a>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <USBD_CDC_Setup+0xec>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008e49 	.word	0x08008e49
 8008da4:	08008e3b 	.word	0x08008e3b
 8008da8:	08008e3b 	.word	0x08008e3b
 8008dac:	08008e3b 	.word	0x08008e3b
 8008db0:	08008e3b 	.word	0x08008e3b
 8008db4:	08008e3b 	.word	0x08008e3b
 8008db8:	08008e3b 	.word	0x08008e3b
 8008dbc:	08008e3b 	.word	0x08008e3b
 8008dc0:	08008e3b 	.word	0x08008e3b
 8008dc4:	08008df7 	.word	0x08008df7
 8008dc8:	08008e21 	.word	0x08008e21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d107      	bne.n	8008de8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008dd8:	f107 030a 	add.w	r3, r7, #10
 8008ddc:	2202      	movs	r2, #2
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fced 	bl	800a7c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008de6:	e032      	b.n	8008e4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fc77 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	75fb      	strb	r3, [r7, #23]
          break;
 8008df4:	e02b      	b.n	8008e4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d107      	bne.n	8008e12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e02:	f107 030d 	add.w	r3, r7, #13
 8008e06:	2201      	movs	r2, #1
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fcd8 	bl	800a7c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e10:	e01d      	b.n	8008e4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fc62 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e1e:	e016      	b.n	8008e4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d00f      	beq.n	8008e4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 fc55 	bl	800a6de <USBD_CtlError>
            ret = USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e38:	e008      	b.n	8008e4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 fc4e 	bl	800a6de <USBD_CtlError>
          ret = USBD_FAIL;
 8008e42:	2303      	movs	r3, #3
 8008e44:	75fb      	strb	r3, [r7, #23]
          break;
 8008e46:	e002      	b.n	8008e4e <USBD_CDC_Setup+0x19e>
          break;
 8008e48:	bf00      	nop
 8008e4a:	e008      	b.n	8008e5e <USBD_CDC_Setup+0x1ae>
          break;
 8008e4c:	bf00      	nop
      }
      break;
 8008e4e:	e006      	b.n	8008e5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fc43 	bl	800a6de <USBD_CtlError>
      ret = USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	32b0      	adds	r2, #176	; 0xb0
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e065      	b.n	8008f5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	32b0      	adds	r2, #176	; 0xb0
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3318      	adds	r3, #24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02f      	beq.n	8008f1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	f003 020f 	and.w	r2, r3, #15
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	3318      	adds	r3, #24
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	f003 010f 	and.w	r1, r3, #15
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	460b      	mov	r3, r1
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	440b      	add	r3, r1
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4403      	add	r3, r0
 8008ee4:	3348      	adds	r3, #72	; 0x48
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d112      	bne.n	8008f1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	3318      	adds	r3, #24
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f0e:	78f9      	ldrb	r1, [r7, #3]
 8008f10:	2300      	movs	r3, #0
 8008f12:	2200      	movs	r2, #0
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f002 f92e 	bl	800b176 <USBD_LL_Transmit>
 8008f1a:	e01f      	b.n	8008f5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	33b0      	adds	r3, #176	; 0xb0
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d010      	beq.n	8008f5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	33b0      	adds	r3, #176	; 0xb0
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	32b0      	adds	r2, #176	; 0xb0
 8008f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	32b0      	adds	r2, #176	; 0xb0
 8008f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01a      	b.n	8008fce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f002 f92c 	bl	800b1fa <USBD_LL_GetRxDataSize>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	33b0      	adds	r3, #176	; 0xb0
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	32b0      	adds	r2, #176	; 0xb0
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e025      	b.n	8009044 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	33b0      	adds	r3, #176	; 0xb0
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01a      	beq.n	8009042 <USBD_CDC_EP0_RxReady+0x6c>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009012:	2bff      	cmp	r3, #255	; 0xff
 8009014:	d015      	beq.n	8009042 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	33b0      	adds	r3, #176	; 0xb0
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800902e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009036:	b292      	uxth	r2, r2
 8009038:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	; 0xff
 800903e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009054:	2182      	movs	r1, #130	; 0x82
 8009056:	4818      	ldr	r0, [pc, #96]	; (80090b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009058:	f000 fd09 	bl	8009a6e <USBD_GetEpDesc>
 800905c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800905e:	2101      	movs	r1, #1
 8009060:	4815      	ldr	r0, [pc, #84]	; (80090b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009062:	f000 fd04 	bl	8009a6e <USBD_GetEpDesc>
 8009066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009068:	2181      	movs	r1, #129	; 0x81
 800906a:	4813      	ldr	r0, [pc, #76]	; (80090b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800906c:	f000 fcff 	bl	8009a6e <USBD_GetEpDesc>
 8009070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2210      	movs	r2, #16
 800907c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2200      	movs	r2, #0
 8009088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800908c:	711a      	strb	r2, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d006      	beq.n	80090a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090a0:	711a      	strb	r2, [r3, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2243      	movs	r2, #67	; 0x43
 80090aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000078 	.word	0x20000078

080090bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090c4:	2182      	movs	r1, #130	; 0x82
 80090c6:	4818      	ldr	r0, [pc, #96]	; (8009128 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090c8:	f000 fcd1 	bl	8009a6e <USBD_GetEpDesc>
 80090cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090ce:	2101      	movs	r1, #1
 80090d0:	4815      	ldr	r0, [pc, #84]	; (8009128 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090d2:	f000 fccc 	bl	8009a6e <USBD_GetEpDesc>
 80090d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090d8:	2181      	movs	r1, #129	; 0x81
 80090da:	4813      	ldr	r0, [pc, #76]	; (8009128 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090dc:	f000 fcc7 	bl	8009a6e <USBD_GetEpDesc>
 80090e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2210      	movs	r2, #16
 80090ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d006      	beq.n	8009102 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2200      	movs	r2, #0
 80090f8:	711a      	strb	r2, [r3, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f042 0202 	orr.w	r2, r2, #2
 8009100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	711a      	strb	r2, [r3, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f042 0202 	orr.w	r2, r2, #2
 8009114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2243      	movs	r2, #67	; 0x43
 800911a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000078 	.word	0x20000078

0800912c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009134:	2182      	movs	r1, #130	; 0x82
 8009136:	4818      	ldr	r0, [pc, #96]	; (8009198 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009138:	f000 fc99 	bl	8009a6e <USBD_GetEpDesc>
 800913c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800913e:	2101      	movs	r1, #1
 8009140:	4815      	ldr	r0, [pc, #84]	; (8009198 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009142:	f000 fc94 	bl	8009a6e <USBD_GetEpDesc>
 8009146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009148:	2181      	movs	r1, #129	; 0x81
 800914a:	4813      	ldr	r0, [pc, #76]	; (8009198 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800914c:	f000 fc8f 	bl	8009a6e <USBD_GetEpDesc>
 8009150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2210      	movs	r2, #16
 800915c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2200      	movs	r2, #0
 8009168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916c:	711a      	strb	r2, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d006      	beq.n	8009186 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009180:	711a      	strb	r2, [r3, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2243      	movs	r2, #67	; 0x43
 800918a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000078 	.word	0x20000078

0800919c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	220a      	movs	r2, #10
 80091a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	20000034 	.word	0x20000034

080091bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e009      	b.n	80091e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	33b0      	adds	r3, #176	; 0xb0
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	32b0      	adds	r2, #176	; 0xb0
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009212:	2303      	movs	r3, #3
 8009214:	e008      	b.n	8009228 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	32b0      	adds	r2, #176	; 0xb0
 8009248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	e004      	b.n	8009262 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32b0      	adds	r2, #176	; 0xb0
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	32b0      	adds	r2, #176	; 0xb0
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800929a:	2303      	movs	r3, #3
 800929c:	e018      	b.n	80092d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7c1b      	ldrb	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <USBD_CDC_ReceivePacket+0x68>)
 80092a8:	7819      	ldrb	r1, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 ff7f 	bl	800b1b8 <USBD_LL_PrepareReceive>
 80092ba:	e008      	b.n	80092ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <USBD_CDC_ReceivePacket+0x68>)
 80092be:	7819      	ldrb	r1, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ff75 	bl	800b1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	200000bc 	.word	0x200000bc

080092dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e01f      	b.n	8009334 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	79fa      	ldrb	r2, [r7, #7]
 8009326:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f001 fdef 	bl	800af0c <USBD_LL_Init>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	e025      	b.n	80093a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	32ae      	adds	r2, #174	; 0xae
 8009366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00f      	beq.n	8009390 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	32ae      	adds	r2, #174	; 0xae
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	f107 020e 	add.w	r2, r7, #14
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	4602      	mov	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 fdf7 	bl	800afa4 <USBD_LL_Start>
 80093b6:	4603      	mov	r3, r0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	4611      	mov	r1, r2
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009434:	2303      	movs	r3, #3
 8009436:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f001 f908 	bl	800a66a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009468:	461a      	mov	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	2b02      	cmp	r3, #2
 800947c:	d01a      	beq.n	80094b4 <USBD_LL_SetupStage+0x72>
 800947e:	2b02      	cmp	r3, #2
 8009480:	d822      	bhi.n	80094c8 <USBD_LL_SetupStage+0x86>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <USBD_LL_SetupStage+0x4a>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d00a      	beq.n	80094a0 <USBD_LL_SetupStage+0x5e>
 800948a:	e01d      	b.n	80094c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb5f 	bl	8009b58 <USBD_StdDevReq>
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
      break;
 800949e:	e020      	b.n	80094e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbc7 	bl	8009c3c <USBD_StdItfReq>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73fb      	strb	r3, [r7, #15]
      break;
 80094b2:	e016      	b.n	80094e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fc29 	bl	8009d14 <USBD_StdEPReq>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]
      break;
 80094c6:	e00c      	b.n	80094e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fdc4 	bl	800b064 <USBD_LL_StallEP>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
      break;
 80094e0:	bf00      	nop
  }

  return ret;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	460b      	mov	r3, r1
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d16e      	bne.n	80095e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800950a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009512:	2b03      	cmp	r3, #3
 8009514:	f040 8098 	bne.w	8009648 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	429a      	cmp	r2, r3
 8009522:	d913      	bls.n	800954c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	4293      	cmp	r3, r2
 800953c:	bf28      	it	cs
 800953e:	4613      	movcs	r3, r2
 8009540:	461a      	mov	r2, r3
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 f984 	bl	800a852 <USBD_CtlContinueRx>
 800954a:	e07d      	b.n	8009648 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2b02      	cmp	r3, #2
 8009558:	d014      	beq.n	8009584 <USBD_LL_DataOutStage+0x98>
 800955a:	2b02      	cmp	r3, #2
 800955c:	d81d      	bhi.n	800959a <USBD_LL_DataOutStage+0xae>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <USBD_LL_DataOutStage+0x7c>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d003      	beq.n	800956e <USBD_LL_DataOutStage+0x82>
 8009566:	e018      	b.n	800959a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	75bb      	strb	r3, [r7, #22]
            break;
 800956c:	e018      	b.n	80095a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009574:	b2db      	uxtb	r3, r3
 8009576:	4619      	mov	r1, r3
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fa5e 	bl	8009a3a <USBD_CoreFindIF>
 800957e:	4603      	mov	r3, r0
 8009580:	75bb      	strb	r3, [r7, #22]
            break;
 8009582:	e00d      	b.n	80095a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800958a:	b2db      	uxtb	r3, r3
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 fa60 	bl	8009a54 <USBD_CoreFindEP>
 8009594:	4603      	mov	r3, r0
 8009596:	75bb      	strb	r3, [r7, #22]
            break;
 8009598:	e002      	b.n	80095a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	75bb      	strb	r3, [r7, #22]
            break;
 800959e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80095a0:	7dbb      	ldrb	r3, [r7, #22]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d119      	bne.n	80095da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d113      	bne.n	80095da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80095b2:	7dba      	ldrb	r2, [r7, #22]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	32ae      	adds	r2, #174	; 0xae
 80095b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80095c2:	7dba      	ldrb	r2, [r7, #22]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80095ca:	7dba      	ldrb	r2, [r7, #22]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	32ae      	adds	r2, #174	; 0xae
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f001 f94a 	bl	800a874 <USBD_CtlSendStatus>
 80095e0:	e032      	b.n	8009648 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80095e2:	7afb      	ldrb	r3, [r7, #11]
 80095e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	4619      	mov	r1, r3
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fa31 	bl	8009a54 <USBD_CoreFindEP>
 80095f2:	4603      	mov	r3, r0
 80095f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095f6:	7dbb      	ldrb	r3, [r7, #22]
 80095f8:	2bff      	cmp	r3, #255	; 0xff
 80095fa:	d025      	beq.n	8009648 <USBD_LL_DataOutStage+0x15c>
 80095fc:	7dbb      	ldrb	r3, [r7, #22]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d122      	bne.n	8009648 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b03      	cmp	r3, #3
 800960c:	d117      	bne.n	800963e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800960e:	7dba      	ldrb	r2, [r7, #22]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	32ae      	adds	r2, #174	; 0xae
 8009614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00f      	beq.n	800963e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800961e:	7dba      	ldrb	r2, [r7, #22]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009626:	7dba      	ldrb	r2, [r7, #22]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	32ae      	adds	r2, #174	; 0xae
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	7afa      	ldrb	r2, [r7, #11]
 8009634:	4611      	mov	r1, r2
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	4798      	blx	r3
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	e000      	b.n	800964a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	460b      	mov	r3, r1
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d16f      	bne.n	8009746 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3314      	adds	r3, #20
 800966a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009672:	2b02      	cmp	r3, #2
 8009674:	d15a      	bne.n	800972c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	689a      	ldr	r2, [r3, #8]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	429a      	cmp	r2, r3
 8009680:	d914      	bls.n	80096ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	689a      	ldr	r2, [r3, #8]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	461a      	mov	r2, r3
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f001 f8ac 	bl	800a7f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800969e:	2300      	movs	r3, #0
 80096a0:	2200      	movs	r2, #0
 80096a2:	2100      	movs	r1, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f001 fd87 	bl	800b1b8 <USBD_LL_PrepareReceive>
 80096aa:	e03f      	b.n	800972c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d11c      	bne.n	80096f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d316      	bcc.n	80096f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d20f      	bcs.n	80096f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f001 f88d 	bl	800a7f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e4:	2300      	movs	r3, #0
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f001 fd64 	bl	800b1b8 <USBD_LL_PrepareReceive>
 80096f0:	e01c      	b.n	800972c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d10f      	bne.n	800971e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800971e:	2180      	movs	r1, #128	; 0x80
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f001 fc9f 	bl	800b064 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f001 f8b7 	bl	800a89a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d03a      	beq.n	80097ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7ff fe42 	bl	80093c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009744:	e032      	b.n	80097ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800974c:	b2db      	uxtb	r3, r3
 800974e:	4619      	mov	r1, r3
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f97f 	bl	8009a54 <USBD_CoreFindEP>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	2bff      	cmp	r3, #255	; 0xff
 800975e:	d025      	beq.n	80097ac <USBD_LL_DataInStage+0x15a>
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d122      	bne.n	80097ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b03      	cmp	r3, #3
 8009770:	d11c      	bne.n	80097ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009772:	7dfa      	ldrb	r2, [r7, #23]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	32ae      	adds	r2, #174	; 0xae
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d014      	beq.n	80097ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009782:	7dfa      	ldrb	r2, [r7, #23]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800978a:	7dfa      	ldrb	r2, [r7, #23]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	32ae      	adds	r2, #174	; 0xae
 8009790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	7afa      	ldrb	r2, [r7, #11]
 8009798:	4611      	mov	r1, r2
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	4798      	blx	r3
 800979e:	4603      	mov	r3, r0
 80097a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80097a2:	7dbb      	ldrb	r3, [r7, #22]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80097a8:	7dbb      	ldrb	r3, [r7, #22]
 80097aa:	e000      	b.n	80097ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00e      	beq.n	800981c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	6852      	ldr	r2, [r2, #4]
 800980a:	b2d2      	uxtb	r2, r2
 800980c:	4611      	mov	r1, r2
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009818:	2303      	movs	r3, #3
 800981a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	2200      	movs	r2, #0
 8009820:	2100      	movs	r1, #0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 fbd9 	bl	800afda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2240      	movs	r2, #64	; 0x40
 8009834:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	2200      	movs	r2, #0
 800983c:	2180      	movs	r1, #128	; 0x80
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fbcb 	bl	800afda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2240      	movs	r2, #64	; 0x40
 800984e:	621a      	str	r2, [r3, #32]

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009888:	b2da      	uxtb	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2204      	movs	r2, #4
 8009894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d106      	bne.n	80098c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d110      	bne.n	800990c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	32ae      	adds	r2, #174	; 0xae
 800992c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009934:	2303      	movs	r3, #3
 8009936:	e01c      	b.n	8009972 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b03      	cmp	r3, #3
 8009942:	d115      	bne.n	8009970 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	32ae      	adds	r2, #174	; 0xae
 800994e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	32ae      	adds	r2, #174	; 0xae
 8009962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	4611      	mov	r1, r2
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	32ae      	adds	r2, #174	; 0xae
 8009990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009998:	2303      	movs	r3, #3
 800999a:	e01c      	b.n	80099d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d115      	bne.n	80099d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	32ae      	adds	r2, #174	; 0xae
 80099b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	32ae      	adds	r2, #174	; 0xae
 80099c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	4611      	mov	r1, r2
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00e      	beq.n	8009a30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6852      	ldr	r2, [r2, #4]
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	4611      	mov	r1, r2
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b086      	sub	sp, #24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d920      	bls.n	8009ad8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a9e:	e013      	b.n	8009ac8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009aa0:	f107 030a 	add.w	r3, r7, #10
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f000 f81b 	bl	8009ae2 <USBD_GetNextDesc>
 8009aac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d108      	bne.n	8009ac8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	789b      	ldrb	r3, [r3, #2]
 8009abe:	78fa      	ldrb	r2, [r7, #3]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d008      	beq.n	8009ad6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	885b      	ldrh	r3, [r3, #2]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	897b      	ldrh	r3, [r7, #10]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d8e5      	bhi.n	8009aa0 <USBD_GetEpDesc+0x32>
 8009ad4:	e000      	b.n	8009ad8 <USBD_GetEpDesc+0x6a>
          break;
 8009ad6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ad8:	693b      	ldr	r3, [r7, #16]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	881a      	ldrh	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	3301      	adds	r3, #1
 8009b32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b3a:	8a3b      	ldrh	r3, [r7, #16]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	b21a      	sxth	r2, r3
 8009b40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b4a:	89fb      	ldrh	r3, [r7, #14]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	371c      	adds	r7, #28
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b6e:	2b40      	cmp	r3, #64	; 0x40
 8009b70:	d005      	beq.n	8009b7e <USBD_StdDevReq+0x26>
 8009b72:	2b40      	cmp	r3, #64	; 0x40
 8009b74:	d857      	bhi.n	8009c26 <USBD_StdDevReq+0xce>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00f      	beq.n	8009b9a <USBD_StdDevReq+0x42>
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d153      	bne.n	8009c26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	32ae      	adds	r2, #174	; 0xae
 8009b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
      break;
 8009b98:	e04a      	b.n	8009c30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	d83b      	bhi.n	8009c1a <USBD_StdDevReq+0xc2>
 8009ba2:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USBD_StdDevReq+0x50>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009c11 	.word	0x08009c11
 8009bb0:	08009c1b 	.word	0x08009c1b
 8009bb4:	08009c07 	.word	0x08009c07
 8009bb8:	08009c1b 	.word	0x08009c1b
 8009bbc:	08009bdb 	.word	0x08009bdb
 8009bc0:	08009bd1 	.word	0x08009bd1
 8009bc4:	08009c1b 	.word	0x08009c1b
 8009bc8:	08009bf3 	.word	0x08009bf3
 8009bcc:	08009be5 	.word	0x08009be5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa3c 	bl	800a050 <USBD_GetDescriptor>
          break;
 8009bd8:	e024      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fba1 	bl	800a324 <USBD_SetAddress>
          break;
 8009be2:	e01f      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fbe0 	bl	800a3ac <USBD_SetConfig>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
          break;
 8009bf0:	e018      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fc83 	bl	800a500 <USBD_GetConfig>
          break;
 8009bfa:	e013      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fcb4 	bl	800a56c <USBD_GetStatus>
          break;
 8009c04:	e00e      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fce3 	bl	800a5d4 <USBD_SetFeature>
          break;
 8009c0e:	e009      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fd07 	bl	800a626 <USBD_ClrFeature>
          break;
 8009c18:	e004      	b.n	8009c24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fd5e 	bl	800a6de <USBD_CtlError>
          break;
 8009c22:	bf00      	nop
      }
      break;
 8009c24:	e004      	b.n	8009c30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fd58 	bl	800a6de <USBD_CtlError>
      break;
 8009c2e:	bf00      	nop
  }

  return ret;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop

08009c3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c52:	2b40      	cmp	r3, #64	; 0x40
 8009c54:	d005      	beq.n	8009c62 <USBD_StdItfReq+0x26>
 8009c56:	2b40      	cmp	r3, #64	; 0x40
 8009c58:	d852      	bhi.n	8009d00 <USBD_StdItfReq+0xc4>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <USBD_StdItfReq+0x26>
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d14e      	bne.n	8009d00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d840      	bhi.n	8009cf2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	889b      	ldrh	r3, [r3, #4]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d836      	bhi.n	8009ce8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	889b      	ldrh	r3, [r3, #4]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff fed9 	bl	8009a3a <USBD_CoreFindIF>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2bff      	cmp	r3, #255	; 0xff
 8009c90:	d01d      	beq.n	8009cce <USBD_StdItfReq+0x92>
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11a      	bne.n	8009cce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c98:	7bba      	ldrb	r2, [r7, #14]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32ae      	adds	r2, #174	; 0xae
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00f      	beq.n	8009cc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ca8:	7bba      	ldrb	r2, [r7, #14]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009cb0:	7bba      	ldrb	r2, [r7, #14]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	32ae      	adds	r2, #174	; 0xae
 8009cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cc6:	e004      	b.n	8009cd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ccc:	e001      	b.n	8009cd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	88db      	ldrh	r3, [r3, #6]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d110      	bne.n	8009cfc <USBD_StdItfReq+0xc0>
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10d      	bne.n	8009cfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fdc7 	bl	800a874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ce6:	e009      	b.n	8009cfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fcf7 	bl	800a6de <USBD_CtlError>
          break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fcf2 	bl	800a6de <USBD_CtlError>
          break;
 8009cfa:	e000      	b.n	8009cfe <USBD_StdItfReq+0xc2>
          break;
 8009cfc:	bf00      	nop
      }
      break;
 8009cfe:	e004      	b.n	8009d0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fceb 	bl	800a6de <USBD_CtlError>
      break;
 8009d08:	bf00      	nop
  }

  return ret;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	889b      	ldrh	r3, [r3, #4]
 8009d26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d30:	2b40      	cmp	r3, #64	; 0x40
 8009d32:	d007      	beq.n	8009d44 <USBD_StdEPReq+0x30>
 8009d34:	2b40      	cmp	r3, #64	; 0x40
 8009d36:	f200 817f 	bhi.w	800a038 <USBD_StdEPReq+0x324>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d02a      	beq.n	8009d94 <USBD_StdEPReq+0x80>
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	f040 817a 	bne.w	800a038 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fe83 	bl	8009a54 <USBD_CoreFindEP>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d52:	7b7b      	ldrb	r3, [r7, #13]
 8009d54:	2bff      	cmp	r3, #255	; 0xff
 8009d56:	f000 8174 	beq.w	800a042 <USBD_StdEPReq+0x32e>
 8009d5a:	7b7b      	ldrb	r3, [r7, #13]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8170 	bne.w	800a042 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d62:	7b7a      	ldrb	r2, [r7, #13]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d6a:	7b7a      	ldrb	r2, [r7, #13]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	32ae      	adds	r2, #174	; 0xae
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8163 	beq.w	800a042 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d7c:	7b7a      	ldrb	r2, [r7, #13]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32ae      	adds	r2, #174	; 0xae
 8009d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d92:	e156      	b.n	800a042 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d008      	beq.n	8009dae <USBD_StdEPReq+0x9a>
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	f300 8145 	bgt.w	800a02c <USBD_StdEPReq+0x318>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 809b 	beq.w	8009ede <USBD_StdEPReq+0x1ca>
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d03c      	beq.n	8009e26 <USBD_StdEPReq+0x112>
 8009dac:	e13e      	b.n	800a02c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d002      	beq.n	8009dc0 <USBD_StdEPReq+0xac>
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d016      	beq.n	8009dec <USBD_StdEPReq+0xd8>
 8009dbe:	e02c      	b.n	8009e1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <USBD_StdEPReq+0xce>
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d00a      	beq.n	8009de2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 f947 	bl	800b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 f943 	bl	800b064 <USBD_LL_StallEP>
 8009dde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de0:	e020      	b.n	8009e24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc7a 	bl	800a6de <USBD_CtlError>
              break;
 8009dea:	e01b      	b.n	8009e24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	885b      	ldrh	r3, [r3, #2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10e      	bne.n	8009e12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <USBD_StdEPReq+0xfe>
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d008      	beq.n	8009e12 <USBD_StdEPReq+0xfe>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	88db      	ldrh	r3, [r3, #6]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f929 	bl	800b064 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fd2e 	bl	800a874 <USBD_CtlSendStatus>

              break;
 8009e18:	e004      	b.n	8009e24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc5e 	bl	800a6de <USBD_CtlError>
              break;
 8009e22:	bf00      	nop
          }
          break;
 8009e24:	e107      	b.n	800a036 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d002      	beq.n	8009e38 <USBD_StdEPReq+0x124>
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d016      	beq.n	8009e64 <USBD_StdEPReq+0x150>
 8009e36:	e04b      	b.n	8009ed0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <USBD_StdEPReq+0x146>
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	2b80      	cmp	r3, #128	; 0x80
 8009e42:	d00a      	beq.n	8009e5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f90b 	bl	800b064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e4e:	2180      	movs	r1, #128	; 0x80
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f907 	bl	800b064 <USBD_LL_StallEP>
 8009e56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e58:	e040      	b.n	8009edc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc3e 	bl	800a6de <USBD_CtlError>
              break;
 8009e62:	e03b      	b.n	8009edc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	885b      	ldrh	r3, [r3, #2]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d136      	bne.n	8009eda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 f911 	bl	800b0a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fcf7 	bl	800a874 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fde2 	bl	8009a54 <USBD_CoreFindEP>
 8009e90:	4603      	mov	r3, r0
 8009e92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e94:	7b7b      	ldrb	r3, [r7, #13]
 8009e96:	2bff      	cmp	r3, #255	; 0xff
 8009e98:	d01f      	beq.n	8009eda <USBD_StdEPReq+0x1c6>
 8009e9a:	7b7b      	ldrb	r3, [r7, #13]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11c      	bne.n	8009eda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ea0:	7b7a      	ldrb	r2, [r7, #13]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ea8:	7b7a      	ldrb	r2, [r7, #13]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32ae      	adds	r2, #174	; 0xae
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d010      	beq.n	8009eda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009eb8:	7b7a      	ldrb	r2, [r7, #13]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	32ae      	adds	r2, #174	; 0xae
 8009ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	4798      	blx	r3
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ece:	e004      	b.n	8009eda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fc03 	bl	800a6de <USBD_CtlError>
              break;
 8009ed8:	e000      	b.n	8009edc <USBD_StdEPReq+0x1c8>
              break;
 8009eda:	bf00      	nop
          }
          break;
 8009edc:	e0ab      	b.n	800a036 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d002      	beq.n	8009ef0 <USBD_StdEPReq+0x1dc>
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d032      	beq.n	8009f54 <USBD_StdEPReq+0x240>
 8009eee:	e097      	b.n	800a020 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <USBD_StdEPReq+0x1f2>
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	2b80      	cmp	r3, #128	; 0x80
 8009efa:	d004      	beq.n	8009f06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fbed 	bl	800a6de <USBD_CtlError>
                break;
 8009f04:	e091      	b.n	800a02a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da0b      	bge.n	8009f26 <USBD_StdEPReq+0x212>
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	3310      	adds	r3, #16
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	3304      	adds	r3, #4
 8009f24:	e00b      	b.n	8009f3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2202      	movs	r2, #2
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc37 	bl	800a7c0 <USBD_CtlSendData>
              break;
 8009f52:	e06a      	b.n	800a02a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	da11      	bge.n	8009f80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	f003 020f 	and.w	r2, r3, #15
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	3324      	adds	r3, #36	; 0x24
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d117      	bne.n	8009fa6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fbb0 	bl	800a6de <USBD_CtlError>
                  break;
 8009f7e:	e054      	b.n	800a02a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	f003 020f 	and.w	r2, r3, #15
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d104      	bne.n	8009fa6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fb9d 	bl	800a6de <USBD_CtlError>
                  break;
 8009fa4:	e041      	b.n	800a02a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da0b      	bge.n	8009fc6 <USBD_StdEPReq+0x2b2>
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	e00b      	b.n	8009fde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4413      	add	r3, r2
 8009fdc:	3304      	adds	r3, #4
 8009fde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <USBD_StdEPReq+0x2d8>
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b80      	cmp	r3, #128	; 0x80
 8009fea:	d103      	bne.n	8009ff4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e00e      	b.n	800a012 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 f871 	bl	800b0e0 <USBD_LL_IsStallEP>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2201      	movs	r2, #1
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	e002      	b.n	800a012 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2202      	movs	r2, #2
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fbd1 	bl	800a7c0 <USBD_CtlSendData>
              break;
 800a01e:	e004      	b.n	800a02a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fb5b 	bl	800a6de <USBD_CtlError>
              break;
 800a028:	bf00      	nop
          }
          break;
 800a02a:	e004      	b.n	800a036 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fb55 	bl	800a6de <USBD_CtlError>
          break;
 800a034:	bf00      	nop
      }
      break;
 800a036:	e005      	b.n	800a044 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fb4f 	bl	800a6de <USBD_CtlError>
      break;
 800a040:	e000      	b.n	800a044 <USBD_StdEPReq+0x330>
      break;
 800a042:	bf00      	nop
  }

  return ret;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	885b      	ldrh	r3, [r3, #2]
 800a06a:	0a1b      	lsrs	r3, r3, #8
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	3b01      	subs	r3, #1
 800a070:	2b06      	cmp	r3, #6
 800a072:	f200 8128 	bhi.w	800a2c6 <USBD_GetDescriptor+0x276>
 800a076:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <USBD_GetDescriptor+0x2c>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a099 	.word	0x0800a099
 800a080:	0800a0b1 	.word	0x0800a0b1
 800a084:	0800a0f1 	.word	0x0800a0f1
 800a088:	0800a2c7 	.word	0x0800a2c7
 800a08c:	0800a2c7 	.word	0x0800a2c7
 800a090:	0800a267 	.word	0x0800a267
 800a094:	0800a293 	.word	0x0800a293
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
      break;
 800a0ae:	e112      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10d      	bne.n	800a0d4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c0:	f107 0208 	add.w	r2, r7, #8
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4798      	blx	r3
 800a0c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0d2:	e100      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	f107 0208 	add.w	r2, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	701a      	strb	r2, [r3, #0]
      break;
 800a0ee:	e0f2      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	885b      	ldrh	r3, [r3, #2]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	f200 80ac 	bhi.w	800a254 <USBD_GetDescriptor+0x204>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <USBD_GetDescriptor+0xb4>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a185 	.word	0x0800a185
 800a110:	0800a1b9 	.word	0x0800a1b9
 800a114:	0800a1ed 	.word	0x0800a1ed
 800a118:	0800a221 	.word	0x0800a221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e091      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 facb 	bl	800a6de <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e089      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e077      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fab1 	bl	800a6de <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e06f      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e05d      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa97 	bl	800a6de <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e055      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e043      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa7d 	bl	800a6de <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e03b      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20e:	e029      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa63 	bl	800a6de <USBD_CtlError>
            err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
          break;
 800a21e:	e021      	b.n	800a264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a242:	e00f      	b.n	800a264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa49 	bl	800a6de <USBD_CtlError>
            err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
          break;
 800a252:	e007      	b.n	800a264 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa41 	bl	800a6de <USBD_CtlError>
          err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a262:	bf00      	nop
      }
      break;
 800a264:	e037      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	f107 0208 	add.w	r2, r7, #8
 800a27a:	4610      	mov	r0, r2
 800a27c:	4798      	blx	r3
 800a27e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a280:	e029      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa2a 	bl	800a6de <USBD_CtlError>
        err++;
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	3301      	adds	r3, #1
 800a28e:	72fb      	strb	r3, [r7, #11]
      break;
 800a290:	e021      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7c1b      	ldrb	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10d      	bne.n	800a2b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	f107 0208 	add.w	r2, r7, #8
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	4798      	blx	r3
 800a2aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2b4:	e00f      	b.n	800a2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa10 	bl	800a6de <USBD_CtlError>
        err++;
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c4:	e007      	b.n	800a2d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa08 	bl	800a6de <USBD_CtlError>
      err++;
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2d4:	bf00      	nop
  }

  if (err != 0U)
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11e      	bne.n	800a31a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d016      	beq.n	800a312 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88da      	ldrh	r2, [r3, #6]
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	bf28      	it	cs
 800a2f4:	4613      	movcs	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2fa:	893b      	ldrh	r3, [r7, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa5d 	bl	800a7c0 <USBD_CtlSendData>
 800a306:	e009      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9e7 	bl	800a6de <USBD_CtlError>
 800a310:	e004      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 faae 	bl	800a874 <USBD_CtlSendStatus>
 800a318:	e000      	b.n	800a31c <USBD_GetDescriptor+0x2cc>
    return;
 800a31a:	bf00      	nop
  }
}
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop

0800a324 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	889b      	ldrh	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d131      	bne.n	800a39a <USBD_SetAddress+0x76>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	88db      	ldrh	r3, [r3, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d12d      	bne.n	800a39a <USBD_SetAddress+0x76>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	885b      	ldrh	r3, [r3, #2]
 800a342:	2b7f      	cmp	r3, #127	; 0x7f
 800a344:	d829      	bhi.n	800a39a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d104      	bne.n	800a368 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f9bc 	bl	800a6de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	e01d      	b.n	800a3a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7bfa      	ldrb	r2, [r7, #15]
 800a36c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fedf 	bl	800b138 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa7a 	bl	800a874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2202      	movs	r2, #2
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	e009      	b.n	800a3a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a398:	e004      	b.n	800a3a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f99e 	bl	800a6de <USBD_CtlError>
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b4e      	ldr	r3, [pc, #312]	; (800a4fc <USBD_SetConfig+0x150>)
 800a3c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3c4:	4b4d      	ldr	r3, [pc, #308]	; (800a4fc <USBD_SetConfig+0x150>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d905      	bls.n	800a3d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f985 	bl	800a6de <USBD_CtlError>
    return USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e08c      	b.n	800a4f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d002      	beq.n	800a3ea <USBD_SetConfig+0x3e>
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d029      	beq.n	800a43c <USBD_SetConfig+0x90>
 800a3e8:	e075      	b.n	800a4d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3ea:	4b44      	ldr	r3, [pc, #272]	; (800a4fc <USBD_SetConfig+0x150>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d020      	beq.n	800a434 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3f2:	4b42      	ldr	r3, [pc, #264]	; (800a4fc <USBD_SetConfig+0x150>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3fc:	4b3f      	ldr	r3, [pc, #252]	; (800a4fc <USBD_SetConfig+0x150>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe ffe7 	bl	80093d6 <USBD_SetClassConfig>
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f962 	bl	800a6de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2202      	movs	r2, #2
 800a41e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a422:	e065      	b.n	800a4f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fa25 	bl	800a874 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2203      	movs	r2, #3
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a432:	e05d      	b.n	800a4f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa1d 	bl	800a874 <USBD_CtlSendStatus>
      break;
 800a43a:	e059      	b.n	800a4f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a43c:	4b2f      	ldr	r3, [pc, #188]	; (800a4fc <USBD_SetConfig+0x150>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d112      	bne.n	800a46a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a44c:	4b2b      	ldr	r3, [pc, #172]	; (800a4fc <USBD_SetConfig+0x150>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a456:	4b29      	ldr	r3, [pc, #164]	; (800a4fc <USBD_SetConfig+0x150>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fe ffd6 	bl	800940e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa06 	bl	800a874 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a468:	e042      	b.n	800a4f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a46a:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <USBD_SetConfig+0x150>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d02a      	beq.n	800a4ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7fe ffc4 	bl	800940e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a486:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <USBD_SetConfig+0x150>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a490:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <USBD_SetConfig+0x150>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe ff9d 	bl	80093d6 <USBD_SetClassConfig>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00f      	beq.n	800a4c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f918 	bl	800a6de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7fe ffa9 	bl	800940e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4c4:	e014      	b.n	800a4f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9d4 	bl	800a874 <USBD_CtlSendStatus>
      break;
 800a4cc:	e010      	b.n	800a4f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f9d0 	bl	800a874 <USBD_CtlSendStatus>
      break;
 800a4d4:	e00c      	b.n	800a4f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f900 	bl	800a6de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <USBD_SetConfig+0x150>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7fe ff92 	bl	800940e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ee:	bf00      	nop
  }

  return ret;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000640 	.word	0x20000640

0800a500 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	88db      	ldrh	r3, [r3, #6]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d004      	beq.n	800a51c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f8e2 	bl	800a6de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a51a:	e023      	b.n	800a564 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	dc02      	bgt.n	800a52e <USBD_GetConfig+0x2e>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc03      	bgt.n	800a534 <USBD_GetConfig+0x34>
 800a52c:	e015      	b.n	800a55a <USBD_GetConfig+0x5a>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d00b      	beq.n	800a54a <USBD_GetConfig+0x4a>
 800a532:	e012      	b.n	800a55a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3308      	adds	r3, #8
 800a53e:	2201      	movs	r2, #1
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f93c 	bl	800a7c0 <USBD_CtlSendData>
        break;
 800a548:	e00c      	b.n	800a564 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2201      	movs	r2, #1
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f934 	bl	800a7c0 <USBD_CtlSendData>
        break;
 800a558:	e004      	b.n	800a564 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8be 	bl	800a6de <USBD_CtlError>
        break;
 800a562:	bf00      	nop
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	3b01      	subs	r3, #1
 800a580:	2b02      	cmp	r3, #2
 800a582:	d81e      	bhi.n	800a5c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	88db      	ldrh	r3, [r3, #6]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d004      	beq.n	800a596 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8a5 	bl	800a6de <USBD_CtlError>
        break;
 800a594:	e01a      	b.n	800a5cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f043 0202 	orr.w	r2, r3, #2
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f900 	bl	800a7c0 <USBD_CtlSendData>
      break;
 800a5c0:	e004      	b.n	800a5cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f88a 	bl	800a6de <USBD_CtlError>
      break;
 800a5ca:	bf00      	nop
  }
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d107      	bne.n	800a5f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f940 	bl	800a874 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5f4:	e013      	b.n	800a61e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d10b      	bne.n	800a616 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	889b      	ldrh	r3, [r3, #4]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	b29b      	uxth	r3, r3
 800a606:	b2da      	uxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f930 	bl	800a874 <USBD_CtlSendStatus>
}
 800a614:	e003      	b.n	800a61e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f860 	bl	800a6de <USBD_CtlError>
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a636:	b2db      	uxtb	r3, r3
 800a638:	3b01      	subs	r3, #1
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d80b      	bhi.n	800a656 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	885b      	ldrh	r3, [r3, #2]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10c      	bne.n	800a660 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f910 	bl	800a874 <USBD_CtlSendStatus>
      }
      break;
 800a654:	e004      	b.n	800a660 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f840 	bl	800a6de <USBD_CtlError>
      break;
 800a65e:	e000      	b.n	800a662 <USBD_ClrFeature+0x3c>
      break;
 800a660:	bf00      	nop
  }
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3301      	adds	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7ff fa41 	bl	8009b1c <SWAPBYTE>
 800a69a:	4603      	mov	r3, r0
 800a69c:	461a      	mov	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fa34 	bl	8009b1c <SWAPBYTE>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff fa27 	bl	8009b1c <SWAPBYTE>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	80da      	strh	r2, [r3, #6]
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6e8:	2180      	movs	r1, #128	; 0x80
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fcba 	bl	800b064 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fcb6 	bl	800b064 <USBD_LL_StallEP>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d036      	beq.n	800a784 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f836 	bl	800a78c <USBD_GetLen>
 800a720:	4603      	mov	r3, r0
 800a722:	3301      	adds	r3, #1
 800a724:	b29b      	uxth	r3, r3
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	b29a      	uxth	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	4413      	add	r3, r2
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	7812      	ldrb	r2, [r2, #0]
 800a738:	701a      	strb	r2, [r3, #0]
  idx++;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	3301      	adds	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	2203      	movs	r2, #3
 800a748:	701a      	strb	r2, [r3, #0]
  idx++;
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	3301      	adds	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a750:	e013      	b.n	800a77a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	4413      	add	r3, r2
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	7812      	ldrb	r2, [r2, #0]
 800a75c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]
    idx++;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	3301      	adds	r3, #1
 800a768:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	2200      	movs	r2, #0
 800a772:	701a      	strb	r2, [r3, #0]
    idx++;
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	3301      	adds	r3, #1
 800a778:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e7      	bne.n	800a752 <USBD_GetString+0x52>
 800a782:	e000      	b.n	800a786 <USBD_GetString+0x86>
    return;
 800a784:	bf00      	nop
  }
}
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a79c:	e005      	b.n	800a7aa <USBD_GetLen+0x1e>
  {
    len++;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1f5      	bne.n	800a79e <USBD_GetLen+0x12>
  }

  return len;
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 fcc5 	bl	800b176 <USBD_LL_Transmit>

  return USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	2100      	movs	r1, #0
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 fcb4 	bl	800b176 <USBD_LL_Transmit>

  return USBD_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2203      	movs	r2, #3
 800a828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	2100      	movs	r1, #0
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 fcb8 	bl	800b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	2100      	movs	r1, #0
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 fca7 	bl	800b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2204      	movs	r2, #4
 800a880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a884:	2300      	movs	r3, #0
 800a886:	2200      	movs	r2, #0
 800a888:	2100      	movs	r1, #0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fc73 	bl	800b176 <USBD_LL_Transmit>

  return USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fc81 	bl	800b1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4912      	ldr	r1, [pc, #72]	; (800a910 <MX_USB_DEVICE_Init+0x50>)
 800a8c8:	4812      	ldr	r0, [pc, #72]	; (800a914 <MX_USB_DEVICE_Init+0x54>)
 800a8ca:	f7fe fd07 	bl	80092dc <USBD_Init>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8d4:	f7f7 f8d0 	bl	8001a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8d8:	490f      	ldr	r1, [pc, #60]	; (800a918 <MX_USB_DEVICE_Init+0x58>)
 800a8da:	480e      	ldr	r0, [pc, #56]	; (800a914 <MX_USB_DEVICE_Init+0x54>)
 800a8dc:	f7fe fd2e 	bl	800933c <USBD_RegisterClass>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8e6:	f7f7 f8c7 	bl	8001a78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8ea:	490c      	ldr	r1, [pc, #48]	; (800a91c <MX_USB_DEVICE_Init+0x5c>)
 800a8ec:	4809      	ldr	r0, [pc, #36]	; (800a914 <MX_USB_DEVICE_Init+0x54>)
 800a8ee:	f7fe fc65 	bl	80091bc <USBD_CDC_RegisterInterface>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a8f8:	f7f7 f8be 	bl	8001a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8fc:	4805      	ldr	r0, [pc, #20]	; (800a914 <MX_USB_DEVICE_Init+0x54>)
 800a8fe:	f7fe fd53 	bl	80093a8 <USBD_Start>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a908:	f7f7 f8b6 	bl	8001a78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a90c:	bf00      	nop
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	200000d4 	.word	0x200000d4
 800a914:	20000644 	.word	0x20000644
 800a918:	20000040 	.word	0x20000040
 800a91c:	200000c0 	.word	0x200000c0

0800a920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a924:	2200      	movs	r2, #0
 800a926:	4905      	ldr	r1, [pc, #20]	; (800a93c <CDC_Init_FS+0x1c>)
 800a928:	4805      	ldr	r0, [pc, #20]	; (800a940 <CDC_Init_FS+0x20>)
 800a92a:	f7fe fc61 	bl	80091f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a92e:	4905      	ldr	r1, [pc, #20]	; (800a944 <CDC_Init_FS+0x24>)
 800a930:	4803      	ldr	r0, [pc, #12]	; (800a940 <CDC_Init_FS+0x20>)
 800a932:	f7fe fc7f 	bl	8009234 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20001120 	.word	0x20001120
 800a940:	20000644 	.word	0x20000644
 800a944:	20000920 	.word	0x20000920

0800a948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a94c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a94e:	4618      	mov	r0, r3
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
 800a964:	4613      	mov	r3, r2
 800a966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	2b23      	cmp	r3, #35	; 0x23
 800a96c:	d84a      	bhi.n	800aa04 <CDC_Control_FS+0xac>
 800a96e:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <CDC_Control_FS+0x1c>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800aa05 	.word	0x0800aa05
 800a978:	0800aa05 	.word	0x0800aa05
 800a97c:	0800aa05 	.word	0x0800aa05
 800a980:	0800aa05 	.word	0x0800aa05
 800a984:	0800aa05 	.word	0x0800aa05
 800a988:	0800aa05 	.word	0x0800aa05
 800a98c:	0800aa05 	.word	0x0800aa05
 800a990:	0800aa05 	.word	0x0800aa05
 800a994:	0800aa05 	.word	0x0800aa05
 800a998:	0800aa05 	.word	0x0800aa05
 800a99c:	0800aa05 	.word	0x0800aa05
 800a9a0:	0800aa05 	.word	0x0800aa05
 800a9a4:	0800aa05 	.word	0x0800aa05
 800a9a8:	0800aa05 	.word	0x0800aa05
 800a9ac:	0800aa05 	.word	0x0800aa05
 800a9b0:	0800aa05 	.word	0x0800aa05
 800a9b4:	0800aa05 	.word	0x0800aa05
 800a9b8:	0800aa05 	.word	0x0800aa05
 800a9bc:	0800aa05 	.word	0x0800aa05
 800a9c0:	0800aa05 	.word	0x0800aa05
 800a9c4:	0800aa05 	.word	0x0800aa05
 800a9c8:	0800aa05 	.word	0x0800aa05
 800a9cc:	0800aa05 	.word	0x0800aa05
 800a9d0:	0800aa05 	.word	0x0800aa05
 800a9d4:	0800aa05 	.word	0x0800aa05
 800a9d8:	0800aa05 	.word	0x0800aa05
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa05 	.word	0x0800aa05
 800a9e4:	0800aa05 	.word	0x0800aa05
 800a9e8:	0800aa05 	.word	0x0800aa05
 800a9ec:	0800aa05 	.word	0x0800aa05
 800a9f0:	0800aa05 	.word	0x0800aa05
 800a9f4:	0800aa05 	.word	0x0800aa05
 800a9f8:	0800aa05 	.word	0x0800aa05
 800a9fc:	0800aa05 	.word	0x0800aa05
 800aa00:	0800aa05 	.word	0x0800aa05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa04:	bf00      	nop
  }

  return (USBD_OK);
 800aa06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	4805      	ldr	r0, [pc, #20]	; (800aa38 <CDC_Receive_FS+0x24>)
 800aa22:	f7fe fc07 	bl	8009234 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa26:	4804      	ldr	r0, [pc, #16]	; (800aa38 <CDC_Receive_FS+0x24>)
 800aa28:	f7fe fc22 	bl	8009270 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000644 	.word	0x20000644

0800aa3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2212      	movs	r2, #18
 800aa70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa72:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	200000f0 	.word	0x200000f0

0800aa84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2204      	movs	r2, #4
 800aa94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	20000104 	.word	0x20000104

0800aaa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	; (800aae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aac0:	f7ff fe1e 	bl	800a700 <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aacc:	f7ff fe18 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20001920 	.word	0x20001920
 800aae0:	0800b334 	.word	0x0800b334

0800aae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4904      	ldr	r1, [pc, #16]	; (800ab04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aaf4:	4804      	ldr	r0, [pc, #16]	; (800ab08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aaf6:	f7ff fe03 	bl	800a700 <USBD_GetString>
  return USBD_StrDesc;
 800aafa:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20001920 	.word	0x20001920
 800ab08:	0800b34c 	.word	0x0800b34c

0800ab0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	221a      	movs	r2, #26
 800ab1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab1e:	f000 f843 	bl	800aba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab22:	4b02      	ldr	r3, [pc, #8]	; (800ab2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000108 	.word	0x20000108

0800ab30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d105      	bne.n	800ab4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4907      	ldr	r1, [pc, #28]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab46:	4808      	ldr	r0, [pc, #32]	; (800ab68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab48:	f7ff fdda 	bl	800a700 <USBD_GetString>
 800ab4c:	e004      	b.n	800ab58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	4904      	ldr	r1, [pc, #16]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab52:	4805      	ldr	r0, [pc, #20]	; (800ab68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab54:	f7ff fdd4 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20001920 	.word	0x20001920
 800ab68:	0800b360 	.word	0x0800b360

0800ab6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4907      	ldr	r1, [pc, #28]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab82:	4808      	ldr	r0, [pc, #32]	; (800aba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab84:	f7ff fdbc 	bl	800a700 <USBD_GetString>
 800ab88:	e004      	b.n	800ab94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab8e:	4805      	ldr	r0, [pc, #20]	; (800aba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab90:	f7ff fdb6 	bl	800a700 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab94:	4b02      	ldr	r3, [pc, #8]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20001920 	.word	0x20001920
 800aba4:	0800b36c 	.word	0x0800b36c

0800aba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <Get_SerialNum+0x44>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <Get_SerialNum+0x48>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abba:	4b0e      	ldr	r3, [pc, #56]	; (800abf4 <Get_SerialNum+0x4c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abce:	2208      	movs	r2, #8
 800abd0:	4909      	ldr	r1, [pc, #36]	; (800abf8 <Get_SerialNum+0x50>)
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f814 	bl	800ac00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abd8:	2204      	movs	r2, #4
 800abda:	4908      	ldr	r1, [pc, #32]	; (800abfc <Get_SerialNum+0x54>)
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f000 f80f 	bl	800ac00 <IntToUnicode>
  }
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	1fff7a10 	.word	0x1fff7a10
 800abf0:	1fff7a14 	.word	0x1fff7a14
 800abf4:	1fff7a18 	.word	0x1fff7a18
 800abf8:	2000010a 	.word	0x2000010a
 800abfc:	2000011a 	.word	0x2000011a

0800ac00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
 800ac16:	e027      	b.n	800ac68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	0f1b      	lsrs	r3, r3, #28
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d80b      	bhi.n	800ac38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	440b      	add	r3, r1
 800ac30:	3230      	adds	r2, #48	; 0x30
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e00a      	b.n	800ac4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4619      	mov	r1, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	440b      	add	r3, r1
 800ac48:	3237      	adds	r2, #55	; 0x37
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	3301      	adds	r3, #1
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	3301      	adds	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
 800ac68:	7dfa      	ldrb	r2, [r7, #23]
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3d3      	bcc.n	800ac18 <IntToUnicode+0x18>
  }
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
	...

0800ac80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	; 0x28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac88:	f107 0314 	add.w	r3, r7, #20
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	605a      	str	r2, [r3, #4]
 800ac92:	609a      	str	r2, [r3, #8]
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aca0:	d13a      	bne.n	800ad18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aca2:	2300      	movs	r3, #0
 800aca4:	613b      	str	r3, [r7, #16]
 800aca6:	4b1e      	ldr	r3, [pc, #120]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800aca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acaa:	4a1d      	ldr	r2, [pc, #116]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800acac:	f043 0301 	orr.w	r3, r3, #1
 800acb0:	6313      	str	r3, [r2, #48]	; 0x30
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acc4:	2302      	movs	r3, #2
 800acc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc8:	2300      	movs	r3, #0
 800acca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800accc:	2303      	movs	r3, #3
 800acce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acd0:	230a      	movs	r3, #10
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acd4:	f107 0314 	add.w	r3, r7, #20
 800acd8:	4619      	mov	r1, r3
 800acda:	4812      	ldr	r0, [pc, #72]	; (800ad24 <HAL_PCD_MspInit+0xa4>)
 800acdc:	f7f8 fb8a 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800ace2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace4:	4a0e      	ldr	r2, [pc, #56]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800ace6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acea:	6353      	str	r3, [r2, #52]	; 0x34
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf4:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800acf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acfa:	6453      	str	r3, [r2, #68]	; 0x44
 800acfc:	4b08      	ldr	r3, [pc, #32]	; (800ad20 <HAL_PCD_MspInit+0xa0>)
 800acfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	2043      	movs	r0, #67	; 0x43
 800ad0e:	f7f7 ff38 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad12:	2043      	movs	r0, #67	; 0x43
 800ad14:	f7f7 ff51 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad18:	bf00      	nop
 800ad1a:	3728      	adds	r7, #40	; 0x28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	40023800 	.word	0x40023800
 800ad24:	40020000 	.word	0x40020000

0800ad28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7fe fb7f 	bl	8009442 <USBD_LL_SetupStage>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	4619      	mov	r1, r3
 800ad76:	f7fe fbb9 	bl	80094ec <USBD_LL_DataOutStage>
}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	334c      	adds	r3, #76	; 0x4c
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	78fb      	ldrb	r3, [r7, #3]
 800ada8:	4619      	mov	r1, r3
 800adaa:	f7fe fc52 	bl	8009652 <USBD_LL_DataInStage>
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fd86 	bl	80098d6 <USBD_LL_SOF>
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adda:	2301      	movs	r3, #1
 800addc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
 800adea:	e008      	b.n	800adfe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d102      	bne.n	800adfa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
 800adf8:	e001      	b.n	800adfe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800adfa:	f7f6 fe3d 	bl	8001a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae04:	7bfa      	ldrb	r2, [r7, #15]
 800ae06:	4611      	mov	r1, r2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fd26 	bl	800985a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe fcce 	bl	80097b6 <USBD_LL_Reset>
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fd21 	bl	800987a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6812      	ldr	r2, [r2, #0]
 800ae46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d005      	beq.n	800ae64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <HAL_PCD_SuspendCallback+0x48>)
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	4a03      	ldr	r2, [pc, #12]	; (800ae6c <HAL_PCD_SuspendCallback+0x48>)
 800ae5e:	f043 0306 	orr.w	r3, r3, #6
 800ae62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	e000ed00 	.word	0xe000ed00

0800ae70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fd11 	bl	80098a6 <USBD_LL_Resume>
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae9e:	78fa      	ldrb	r2, [r7, #3]
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe fd69 	bl	800997a <USBD_LL_IsoOUTIncomplete>
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fd25 	bl	8009916 <USBD_LL_IsoINIncomplete>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe fd7b 	bl	80099de <USBD_LL_DevConnected>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fd78 	bl	80099f4 <USBD_LL_DevDisconnected>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d13c      	bne.n	800af96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af1c:	4a20      	ldr	r2, [pc, #128]	; (800afa0 <USBD_LL_Init+0x94>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a1e      	ldr	r2, [pc, #120]	; (800afa0 <USBD_LL_Init+0x94>)
 800af28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af2c:	4b1c      	ldr	r3, [pc, #112]	; (800afa0 <USBD_LL_Init+0x94>)
 800af2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af34:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <USBD_LL_Init+0x94>)
 800af36:	2204      	movs	r2, #4
 800af38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <USBD_LL_Init+0x94>)
 800af3c:	2202      	movs	r2, #2
 800af3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af40:	4b17      	ldr	r3, [pc, #92]	; (800afa0 <USBD_LL_Init+0x94>)
 800af42:	2200      	movs	r2, #0
 800af44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af46:	4b16      	ldr	r3, [pc, #88]	; (800afa0 <USBD_LL_Init+0x94>)
 800af48:	2202      	movs	r2, #2
 800af4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af4c:	4b14      	ldr	r3, [pc, #80]	; (800afa0 <USBD_LL_Init+0x94>)
 800af4e:	2200      	movs	r2, #0
 800af50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af52:	4b13      	ldr	r3, [pc, #76]	; (800afa0 <USBD_LL_Init+0x94>)
 800af54:	2200      	movs	r2, #0
 800af56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af58:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <USBD_LL_Init+0x94>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af5e:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <USBD_LL_Init+0x94>)
 800af60:	2200      	movs	r2, #0
 800af62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af64:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <USBD_LL_Init+0x94>)
 800af66:	2200      	movs	r2, #0
 800af68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af6a:	480d      	ldr	r0, [pc, #52]	; (800afa0 <USBD_LL_Init+0x94>)
 800af6c:	f7f8 fc11 	bl	8003792 <HAL_PCD_Init>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af76:	f7f6 fd7f 	bl	8001a78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af7a:	2180      	movs	r1, #128	; 0x80
 800af7c:	4808      	ldr	r0, [pc, #32]	; (800afa0 <USBD_LL_Init+0x94>)
 800af7e:	f7f9 fe68 	bl	8004c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af82:	2240      	movs	r2, #64	; 0x40
 800af84:	2100      	movs	r1, #0
 800af86:	4806      	ldr	r0, [pc, #24]	; (800afa0 <USBD_LL_Init+0x94>)
 800af88:	f7f9 fe1c 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af8c:	2280      	movs	r2, #128	; 0x80
 800af8e:	2101      	movs	r1, #1
 800af90:	4803      	ldr	r0, [pc, #12]	; (800afa0 <USBD_LL_Init+0x94>)
 800af92:	f7f9 fe17 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20001b20 	.word	0x20001b20

0800afa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afba:	4618      	mov	r0, r3
 800afbc:	f7f8 fd06 	bl	80039cc <HAL_PCD_Start>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f942 	bl	800b250 <USBD_Get_USB_Status>
 800afcc:	4603      	mov	r3, r0
 800afce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	4608      	mov	r0, r1
 800afe4:	4611      	mov	r1, r2
 800afe6:	461a      	mov	r2, r3
 800afe8:	4603      	mov	r3, r0
 800afea:	70fb      	strb	r3, [r7, #3]
 800afec:	460b      	mov	r3, r1
 800afee:	70bb      	strb	r3, [r7, #2]
 800aff0:	4613      	mov	r3, r2
 800aff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b002:	78bb      	ldrb	r3, [r7, #2]
 800b004:	883a      	ldrh	r2, [r7, #0]
 800b006:	78f9      	ldrb	r1, [r7, #3]
 800b008:	f7f9 f9d7 	bl	80043ba <HAL_PCD_EP_Open>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 f91c 	bl	800b250 <USBD_Get_USB_Status>
 800b018:	4603      	mov	r3, r0
 800b01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	460b      	mov	r3, r1
 800b030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b040:	78fa      	ldrb	r2, [r7, #3]
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7f9 fa20 	bl	800448a <HAL_PCD_EP_Close>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
 800b050:	4618      	mov	r0, r3
 800b052:	f000 f8fd 	bl	800b250 <USBD_Get_USB_Status>
 800b056:	4603      	mov	r3, r0
 800b058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b07e:	78fa      	ldrb	r2, [r7, #3]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7f9 faf8 	bl	8004678 <HAL_PCD_EP_SetStall>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f8de 	bl	800b250 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b098:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0bc:	78fa      	ldrb	r2, [r7, #3]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7f9 fb3d 	bl	8004740 <HAL_PCD_EP_ClrStall>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 f8bf 	bl	800b250 <USBD_Get_USB_Status>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	da0b      	bge.n	800b114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0fc:	78fb      	ldrb	r3, [r7, #3]
 800b0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b102:	68f9      	ldr	r1, [r7, #12]
 800b104:	4613      	mov	r3, r2
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	333e      	adds	r3, #62	; 0x3e
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	e00b      	b.n	800b12c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	4613      	mov	r3, r2
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b12a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7f9 f90a 	bl	8004370 <HAL_PCD_SetAddress>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f874 	bl	800b250 <USBD_Get_USB_Status>
 800b168:	4603      	mov	r3, r0
 800b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
 800b182:	460b      	mov	r3, r1
 800b184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b194:	7af9      	ldrb	r1, [r7, #11]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	f7f9 fa23 	bl	80045e4 <HAL_PCD_EP_Transmit>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f853 	bl	800b250 <USBD_Get_USB_Status>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1d6:	7af9      	ldrb	r1, [r7, #11]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	f7f9 f99f 	bl	800451e <HAL_PCD_EP_Receive>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 f832 	bl	800b250 <USBD_Get_USB_Status>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	460b      	mov	r3, r1
 800b204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b20c:	78fa      	ldrb	r2, [r7, #3]
 800b20e:	4611      	mov	r1, r2
 800b210:	4618      	mov	r0, r3
 800b212:	f7f9 f9cf 	bl	80045b4 <HAL_PCD_EP_GetRxCount>
 800b216:	4603      	mov	r3, r0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b228:	4b03      	ldr	r3, [pc, #12]	; (800b238 <USBD_static_malloc+0x18>)
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	2000202c 	.word	0x2000202c

0800b23c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]

}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d817      	bhi.n	800b294 <USBD_Get_USB_Status+0x44>
 800b264:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <USBD_Get_USB_Status+0x1c>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b283 	.word	0x0800b283
 800b274:	0800b289 	.word	0x0800b289
 800b278:	0800b28f 	.word	0x0800b28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e00b      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e008      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e005      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	e002      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	bf00      	nop
  }
  return usb_status;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <memset>:
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d100      	bne.n	800b2b2 <memset+0xa>
 800b2b0:	4770      	bx	lr
 800b2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b6:	e7f9      	b.n	800b2ac <memset+0x4>

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	; (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	; (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	; (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	; (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f000 f826 	bl	800b31c <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800b3a4 	.word	0x0800b3a4
 800b2f4:	0800b3a4 	.word	0x0800b3a4
 800b2f8:	0800b3a4 	.word	0x0800b3a4
 800b2fc:	0800b3a8 	.word	0x0800b3a8

0800b300 <memcpy>:
 800b300:	440a      	add	r2, r1
 800b302:	4291      	cmp	r1, r2
 800b304:	f100 33ff 	add.w	r3, r0, #4294967295
 800b308:	d100      	bne.n	800b30c <memcpy+0xc>
 800b30a:	4770      	bx	lr
 800b30c:	b510      	push	{r4, lr}
 800b30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b316:	4291      	cmp	r1, r2
 800b318:	d1f9      	bne.n	800b30e <memcpy+0xe>
 800b31a:	bd10      	pop	{r4, pc}

0800b31c <_init>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr

0800b328 <_fini>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr
