
0_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020e04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003054  08020f98  08020f98  00030f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023fec  08023fec  000408b4  2**0
                  CONTENTS
  4 .ARM          00000008  08023fec  08023fec  00033fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023ff4  08023ff4  000408b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023ff4  08023ff4  00033ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023ff8  08023ff8  00033ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008b4  20000000  08023ffc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000408b4  2**0
                  CONTENTS
 10 .bss          00002214  200008b4  200008b4  000408b4  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20002ac8  20002ac8  000408b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000408b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000408e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003932d  00000000  00000000  00040927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007451  00000000  00000000  00079c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002008  00000000  00000000  000810a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c22  00000000  00000000  000830b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002af8b  00000000  00000000  00084cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003073b  00000000  00000000  000afc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0753  00000000  00000000  000e0398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009b5c  00000000  00000000  001c0aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000038  00000000  00000000  001ca648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200008b4 	.word	0x200008b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020f7c 	.word	0x08020f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200008b8 	.word	0x200008b8
 80001cc:	08020f7c 	.word	0x08020f7c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000fcc:	73fb      	strb	r3, [r7, #15]
    return value;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800100c:	2304      	movs	r3, #4
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <OD_getIndex>:
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex ( const OD_entry_t* entry)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <OD_getIndex+0x14>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	e000      	b.n	8001030 <OD_getIndex+0x16>
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <OD_extension_init+0x14>
 800104c:	2305      	movs	r3, #5
 800104e:	e003      	b.n	8001058 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <OD_get_u32>:



/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001074:	7af9      	ldrb	r1, [r7, #11]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2304      	movs	r3, #4
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f001 fbf2 	bl	8002868 <OD_get_value>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00c      	beq.n	80010bc <OD_read_1014_default+0x2e>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	7d1b      	ldrb	r3, [r3, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <OD_read_1014_default+0x2e>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <OD_read_1014_default+0x2e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d902      	bls.n	80010bc <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 80010bc:	2309      	movs	r3, #9
 80010be:	e01a      	b.n	80010f6 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <OD_read_1014_default+0x44>
 80010ce:	2300      	movs	r3, #0
 80010d0:	e001      	b.n	80010d6 <OD_read_1014_default+0x48>
 80010d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010d6:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010de:	3380      	adds	r3, #128	; 0x80
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	68b8      	ldr	r0, [r7, #8]
 80010ea:	f7ff ff87 	bl	8000ffc <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2204      	movs	r2, #4
 80010f2:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00f      	beq.n	8001132 <OD_read_1003+0x34>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00c      	beq.n	8001132 <OD_read_1003+0x34>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d009      	beq.n	8001132 <OD_read_1003+0x34>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d803      	bhi.n	800112c <OD_read_1003+0x2e>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7d1b      	ldrb	r3, [r3, #20]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <OD_read_1003+0x34>
        || (count < 1U)) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 8001132:	2309      	movs	r3, #9
 8001134:	e04d      	b.n	80011d2 <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d801      	bhi.n	8001148 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8001144:	2309      	movs	r3, #9
 8001146:	e044      	b.n	80011d2 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	7d1b      	ldrb	r3, [r3, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10b      	bne.n	8001168 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001156:	4619      	mov	r1, r3
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f7ff ff3f 	bl	8000fdc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	e034      	b.n	80011d2 <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	7d1a      	ldrb	r2, [r3, #20]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001172:	429a      	cmp	r2, r3
 8001174:	d82c      	bhi.n	80011d0 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	7f5b      	ldrb	r3, [r3, #29]
 800117a:	b29a      	uxth	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	7d1b      	ldrb	r3, [r3, #20]
 8001180:	b29b      	uxth	r3, r3
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8001188:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118c:	2b00      	cmp	r3, #0
 800118e:	da07      	bge.n	80011a0 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	7f1b      	ldrb	r3, [r3, #28]
 8001194:	b29a      	uxth	r2, r3
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	82fb      	strh	r3, [r7, #22]
 800119e:	e007      	b.n	80011b0 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 80011a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	7f12      	ldrb	r2, [r2, #28]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	db01      	blt.n	80011b0 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 80011ac:	2309      	movs	r3, #9
 80011ae:	e010      	b.n	80011d2 <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	699a      	ldr	r2, [r3, #24]
 80011b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f7ff ff1b 	bl	8000ffc <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2204      	movs	r2, #4
 80011ca:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e000      	b.n	80011d2 <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 80011d0:	2319      	movs	r3, #25
    }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <OD_write_1003+0x2e>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	7d1b      	ldrb	r3, [r3, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <OD_write_1003+0x2e>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <OD_write_1003+0x2e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <OD_write_1003+0x2e>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 8001208:	2309      	movs	r3, #9
 800120a:	e012      	b.n	8001232 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f7ff fed7 	bl	8000fc0 <CO_getUint8>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8001218:	230f      	movs	r3, #15
 800121a:	e00a      	b.n	8001232 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01a      	beq.n	800128a <CO_EM_init+0x4e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d017      	beq.n	800128a <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <CO_EM_init+0x2c>
 8001260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d810      	bhi.n	800128a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00d      	beq.n	800128a <CO_EM_init+0x4e>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00a      	beq.n	800128a <CO_EM_init+0x4e>
 8001274:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <CO_EM_init+0x4e>
 800127c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	db02      	blt.n	800128a <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8001284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e0a7      	b.n	80013e0 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8001290:	2250      	movs	r2, #80	; 0x50
 8001292:	2100      	movs	r1, #0
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f01d ffe5 	bl	801f264 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80012a0:	2300      	movs	r3, #0
 80012a2:	2201      	movs	r2, #1
 80012a4:	2100      	movs	r1, #0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f001 fb58 	bl	800295c <OD_getPtr>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 80012ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff feaa 	bl	800101a <OD_getIndex>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80012ce:	f06f 030b 	mvn.w	r3, #11
 80012d2:	e085      	b.n	80013e0 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012e8:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80012ea:	f107 0210 	add.w	r2, r7, #16
 80012ee:	2301      	movs	r3, #1
 80012f0:	2100      	movs	r1, #0
 80012f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f4:	f7ff feb6 	bl	8001064 <OD_get_u32>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80012fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d104      	bne.n	800130e <CO_EM_init+0xd2>
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <CO_EM_init+0x1ac>)
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d010      	beq.n	8001330 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001316:	f7ff fe80 	bl	800101a <OD_getIndex>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001320:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 8001322:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 800132a:	f06f 030b 	mvn.w	r3, #11
 800132e:	e057      	b.n	80013e0 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 8001330:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001334:	b29b      	uxth	r3, r3
 8001336:	3380      	adds	r3, #128	; 0x80
 8001338:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4a26      	ldr	r2, [pc, #152]	; (80013ec <CO_EM_init+0x1b0>)
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <CO_EM_init+0x1b4>)
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3330      	adds	r3, #48	; 0x30
 800135e:	4619      	mov	r1, r3
 8001360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001362:	f7ff fe6b 	bl	800103c <OD_extension_init>
 8001366:	4603      	mov	r3, r0
 8001368:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800136a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00c      	beq.n	800138c <CO_EM_init+0x150>
        if (errInfo != NULL) {
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137a:	f7ff fe4e 	bl	800101a <OD_getIndex>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001386:	f06f 030b 	mvn.w	r3, #11
 800138a:	e029      	b.n	80013e0 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8001396:	8aba      	ldrh	r2, [r7, #20]
 8001398:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800139a:	2300      	movs	r3, #0
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2308      	movs	r3, #8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	68b8      	ldr	r0, [r7, #8]
 80013a6:	f011 fb0d 	bl	80129c4 <CO_CANtxBufferInit>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e010      	b.n	80013e0 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <CO_EM_init+0x1b8>)
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <CO_EM_init+0x1bc>)
 80013ce:	649a      	str	r2, [r3, #72]	; 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3340      	adds	r3, #64	; 0x40
 80013d4:	4619      	mov	r1, r3
 80013d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013d8:	f7ff fe30 	bl	800103c <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80013dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	7ffff800 	.word	0x7ffff800
 80013ec:	0800108f 	.word	0x0800108f
 80013f0:	08002473 	.word	0x08002473
 80013f4:	080010ff 	.word	0x080010ff
 80013f8:	080011db 	.word	0x080011db

080013fc <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	8a5b      	ldrh	r3, [r3, #18]
 8001410:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8a1b      	ldrh	r3, [r3, #16]
 8001416:	8aba      	ldrh	r2, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f000 80a3 	beq.w	8001564 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8a1a      	ldrh	r2, [r3, #16]
 8001422:	8abb      	ldrh	r3, [r7, #20]
 8001424:	4053      	eors	r3, r2
 8001426:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8aba      	ldrh	r2, [r7, #20]
 800142c:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 800142e:	8a7a      	ldrh	r2, [r7, #18]
 8001430:	f240 1301 	movw	r3, #257	; 0x101
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 800143a:	8aba      	ldrh	r2, [r7, #20]
 800143c:	f240 1301 	movw	r3, #257	; 0x101
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	2201      	movs	r2, #1
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f91b 	bl	8001692 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 800145c:	8a7b      	ldrh	r3, [r7, #18]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8001466:	8abb      	ldrh	r3, [r7, #20]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f248 1320 	movw	r3, #33056	; 0x8120
 8001480:	2207      	movs	r2, #7
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f905 	bl	8001692 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8001492:	8abb      	ldrh	r3, [r7, #20]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	f248 1340 	movw	r3, #33088	; 0x8140
 80014ac:	2212      	movs	r2, #18
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f8ef 	bl	8001692 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 80014b4:	8a7b      	ldrh	r3, [r7, #18]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80014be:	8abb      	ldrh	r3, [r7, #20]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f248 1310 	movw	r3, #33040	; 0x8110
 80014d8:	2214      	movs	r2, #20
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f8d9 	bl	8001692 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 80014e0:	8a7b      	ldrh	r3, [r7, #18]
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d010      	beq.n	800150c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 80014ea:	8abb      	ldrh	r3, [r7, #20]
 80014ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001504:	2215      	movs	r2, #21
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f8c3 	bl	8001692 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001512:	2b00      	cmp	r3, #0
 8001514:	d010      	beq.n	8001538 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8001516:	8abb      	ldrh	r3, [r7, #20]
 8001518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f248 1320 	movw	r3, #33056	; 0x8120
 8001530:	2206      	movs	r2, #6
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f8ad 	bl	8001692 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8001538:	8a7b      	ldrh	r3, [r7, #18]
 800153a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8001542:	8abb      	ldrh	r3, [r7, #20]
 8001544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	2300      	movs	r3, #0
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f248 1310 	movw	r3, #33040	; 0x8110
 800155c:	2213      	movs	r2, #19
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f897 	bl	8001692 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	795b      	ldrb	r3, [r3, #5]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <CO_EM_process+0x18c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	7a1b      	ldrb	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <CO_EM_process+0x1a4>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	7a5b      	ldrb	r3, [r3, #9]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015a6:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	7dfa      	ldrb	r2, [r7, #23]
 80015ae:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d067      	beq.n	8001686 <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	7f1b      	ldrb	r3, [r3, #28]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d965      	bls.n	800168a <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	7f9b      	ldrb	r3, [r3, #30]
 80015c2:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <CO_EM_process+0x28e>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	7f5b      	ldrb	r3, [r3, #29]
 80015d2:	7c7a      	ldrb	r2, [r7, #17]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d058      	beq.n	800168a <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	699a      	ldr	r2, [r3, #24]
 80015dc:	7c7b      	ldrb	r3, [r7, #17]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	041a      	lsls	r2, r3, #16
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6998      	ldr	r0, [r3, #24]
 80015ec:	7c7b      	ldrb	r3, [r7, #17]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4403      	add	r3, r0
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	1d58      	adds	r0, r3, #5
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	7c7b      	ldrb	r3, [r7, #17]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	2208      	movs	r2, #8
 8001608:	4619      	mov	r1, r3
 800160a:	f01d fec7 	bl	801f39c <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	f011 fa4d 	bl	8012ab8 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 800161e:	7c7b      	ldrb	r3, [r7, #17]
 8001620:	3301      	adds	r3, #1
 8001622:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	7f1b      	ldrb	r3, [r3, #28]
 8001628:	7c7a      	ldrb	r2, [r7, #17]
 800162a:	429a      	cmp	r2, r3
 800162c:	d201      	bcs.n	8001632 <CO_EM_process+0x236>
 800162e:	7c7a      	ldrb	r2, [r7, #17]
 8001630:	e000      	b.n	8001634 <CO_EM_process+0x238>
 8001632:	2200      	movs	r2, #0
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	7fdb      	ldrb	r3, [r3, #31]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10c      	bne.n	800165a <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2202      	movs	r2, #2
 8001644:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	2220      	movs	r2, #32
 8001650:	2101      	movs	r1, #1
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f81d 	bl	8001692 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8001658:	e017      	b.n	800168a <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	7fdb      	ldrb	r3, [r3, #31]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d113      	bne.n	800168a <CO_EM_process+0x28e>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	7f9a      	ldrb	r2, [r3, #30]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	7f5b      	ldrb	r3, [r3, #29]
 800166a:	429a      	cmp	r2, r3
 800166c:	d10d      	bne.n	800168a <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8001674:	2300      	movs	r3, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2220      	movs	r2, #32
 800167c:	2100      	movs	r1, #0
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f807 	bl	8001692 <CO_error>
    return;
 8001684:	e001      	b.n	800168a <CO_EM_process+0x28e>
        return;
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <CO_EM_process+0x290>
    return;
 800168a:	bf00      	nop
}
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8001692:	b480      	push	{r7}
 8001694:	b08d      	sub	sp, #52	; 0x34
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	4611      	mov	r1, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80a6 	beq.w	80017fc <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	2201      	movs	r2, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 80016c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d90a      	bls.n	80016e6 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 80016d0:	2305      	movs	r3, #5
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 80016dc:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80016e0:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 80016e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80016f8:	4013      	ands	r3, r2
 80016fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8001704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <CO_error+0x88>
            return;
 800170c:	e079      	b.n	8001802 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001712:	2b00      	cmp	r3, #0
 8001714:	d074      	beq.n	8001800 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8001716:	2300      	movs	r3, #0
 8001718:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	061a      	lsls	r2, r3, #24
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8001724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001726:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172c:	f3ef 8210 	mrs	r2, PRIMASK
 8001730:	617a      	str	r2, [r7, #20]
  return(result);
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001736:	b672      	cpsid	i
}
 8001738:	bf00      	nop
    if (setError) {
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001748:	4313      	orrs	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e00b      	b.n	800176a <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800175c:	43db      	mvns	r3, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4013      	ands	r3, r2
 8001762:	b25b      	sxtb	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	7f1b      	ldrb	r3, [r3, #28]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d93c      	bls.n	80017ec <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7f5b      	ldrb	r3, [r3, #29]
 8001776:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8001778:	7efb      	ldrb	r3, [r7, #27]
 800177a:	3301      	adds	r3, #1
 800177c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	7f1b      	ldrb	r3, [r3, #28]
 8001784:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001788:	429a      	cmp	r2, r3
 800178a:	d302      	bcc.n	8001792 <CO_error+0x100>
            fifoWrPtrNext = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	7f9b      	ldrb	r3, [r3, #30]
 8001796:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800179a:	429a      	cmp	r2, r3
 800179c:	d103      	bne.n	80017a6 <CO_error+0x114>
            em->fifoOverflow = 1;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	77da      	strb	r2, [r3, #31]
 80017a4:	e022      	b.n	80017ec <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	7efb      	ldrb	r3, [r7, #27]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	7efb      	ldrb	r3, [r7, #27]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017c8:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	7f1b      	ldrb	r3, [r3, #28]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <CO_error+0x15a>
                em->fifoCount++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f383 8810 	msr	PRIMASK, r3
}
 80017fa:	e002      	b.n	8001802 <CO_error+0x170>
        return;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <CO_error+0x170>
            return;
 8001800:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8001802:	3734      	adds	r7, #52	; 0x34
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001818:	60fb      	str	r3, [r7, #12]
    return value;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <OD_getIndex>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <OD_getIndex+0x14>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	e000      	b.n	800183e <OD_getIndex+0x16>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <OD_extension_init>:
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <OD_extension_init+0x14>
 800185a:	2305      	movs	r3, #5
 800185c:	e003      	b.n	8001866 <OD_extension_init+0x1c>
    entry->extension = extension;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af02      	add	r7, sp, #8
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	460b      	mov	r3, r1
 8001880:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001882:	7af9      	ldrb	r1, [r7, #11]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2304      	movs	r3, #4
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 ffeb 	bl	8002868 <OD_get_value>
 8001892:	4603      	mov	r3, r0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	3305      	adds	r3, #5
 80018b4:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 80018b6:	7cfb      	ldrb	r3, [r7, #19]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2201      	movs	r2, #1
 80018ca:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <OD_write_1016+0x40>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <OD_write_1016+0x40>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	7d1b      	ldrb	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	7d1a      	ldrb	r2, [r3, #20]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	7a1b      	ldrb	r3, [r3, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d805      	bhi.n	8001918 <OD_write_1016+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d102      	bne.n	8001918 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8001918:	2309      	movs	r3, #9
 800191a:	e020      	b.n	800195e <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7ff ff75 	bl	800180c <CO_getUint32>
 8001922:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	7d1b      	ldrb	r3, [r3, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	8abb      	ldrh	r3, [r7, #20]
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	69f8      	ldr	r0, [r7, #28]
 800193c:	f000 f8be 	bl	8001abc <CO_HBconsumer_initEntry>
 8001940:	4603      	mov	r3, r0
 8001942:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8001944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 800194c:	2308      	movs	r3, #8
 800194e:	e006      	b.n	800195e <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fd8b 	bl	8002472 <OD_writeOriginal>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <CO_HBconsumer_init+0x2c>
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <CO_HBconsumer_init+0x2c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <CO_HBconsumer_init+0x2c>
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
 8001998:	e087      	b.n	8001aaa <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 800199a:	2230      	movs	r2, #48	; 0x30
 800199c:	2100      	movs	r1, #0
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f01d fc60 	bl	801f264 <memset>
    HBcons->em = em;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b4:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80019ba:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	789b      	ldrb	r3, [r3, #2]
 80019c2:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf28      	it	cs
 80019c8:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
 80019d4:	e041      	b.n	8001a5a <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2d9      	uxtb	r1, r3
 80019dc:	f107 0214 	add.w	r2, r7, #20
 80019e0:	2301      	movs	r3, #1
 80019e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019e4:	f7ff ff45 	bl	8001872 <OD_get_u32>
 80019e8:	4603      	mov	r3, r0
 80019ea:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 80019ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 80019fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019fc:	f7ff ff14 	bl	8001828 <OD_getIndex>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001a08:	f06f 030b 	mvn.w	r3, #11
 8001a0c:	e04d      	b.n	8001aaa <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8001a18:	8b7b      	ldrh	r3, [r7, #26]
 8001a1a:	7f7a      	ldrb	r2, [r7, #29]
 8001a1c:	7ff9      	ldrb	r1, [r7, #31]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f84c 	bl	8001abc <CO_HBconsumer_initEntry>
 8001a24:	4603      	mov	r3, r0
 8001a26:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001a28:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d011      	beq.n	8001a54 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8001a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a38:	f7ff fef6 	bl	8001828 <OD_getIndex>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8001a44:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a48:	f113 0f0c 	cmn.w	r3, #12
 8001a4c:	d002      	beq.n	8001a54 <CO_HBconsumer_init+0xec>
                return ret;
 8001a4e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a52:	e02a      	b.n	8001aaa <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
 8001a56:	3301      	adds	r3, #1
 8001a58:	77fb      	strb	r3, [r7, #31]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	7a1b      	ldrb	r3, [r3, #8]
 8001a5e:	7ffa      	ldrb	r2, [r7, #31]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3b8      	bcc.n	80019d6 <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <CO_HBconsumer_init+0x14c>)
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <CO_HBconsumer_init+0x150>)
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3320      	adds	r3, #32
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a7e:	f7ff fee4 	bl	800184a <OD_extension_init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001a86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00c      	beq.n	8001aa8 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a96:	f7ff fec7 	bl	8001828 <OD_getIndex>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001aa2:	f06f 030b 	mvn.w	r3, #11
 8001aa6:	e000      	b.n	8001aaa <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	080023c3 	.word	0x080023c3
 8001ab8:	080018d9 	.word	0x080018d9

08001abc <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08d      	sub	sp, #52	; 0x34
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	70fb      	strb	r3, [r7, #3]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70bb      	strb	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <CO_HBconsumer_initEntry+0x2e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7a1b      	ldrb	r3, [r3, #8]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d302      	bcc.n	8001af0 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e076      	b.n	8001bde <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8001af0:	883b      	ldrh	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <CO_HBconsumer_initEntry+0x84>
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d021      	beq.n	8001b40 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	77bb      	strb	r3, [r7, #30]
 8001b00:	e019      	b.n	8001b36 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	7fbb      	ldrb	r3, [r7, #30]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f107 0408 	add.w	r4, r7, #8
 8001b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	7fbb      	ldrb	r3, [r7, #30]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d008      	beq.n	8001b30 <CO_HBconsumer_initEntry+0x74>
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <CO_HBconsumer_initEntry+0x74>
 8001b24:	7a3b      	ldrb	r3, [r7, #8]
 8001b26:	78ba      	ldrb	r2, [r7, #2]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d101      	bne.n	8001b30 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001b2c:	23f4      	movs	r3, #244	; 0xf4
 8001b2e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001b30:	7fbb      	ldrb	r3, [r7, #30]
 8001b32:	3301      	adds	r3, #1
 8001b34:	77bb      	strb	r3, [r7, #30]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7a1b      	ldrb	r3, [r3, #8]
 8001b3a:	7fba      	ldrb	r2, [r7, #30]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3e0      	bcc.n	8001b02 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d148      	bne.n	8001bda <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	78ba      	ldrb	r2, [r7, #2]
 8001b58:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b60:	fb03 f202 	mul.w	r2, r3, r2
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <CO_HBconsumer_initEntry+0xdc>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001b8e:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2201      	movs	r2, #1
 8001b94:	709a      	strb	r2, [r3, #2]
 8001b96:	e007      	b.n	8001ba8 <CO_HBconsumer_initEntry+0xec>
        } else {
            COB_ID = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6998      	ldr	r0, [r3, #24]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8b9a      	ldrh	r2, [r3, #28]
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001bc2:	8bba      	ldrh	r2, [r7, #28]
 8001bc4:	4c08      	ldr	r4, [pc, #32]	; (8001be8 <CO_HBconsumer_initEntry+0x12c>)
 8001bc6:	9402      	str	r4, [sp, #8]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bd2:	f010 fe99 	bl	8012908 <CO_CANrxBufferInit>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8001bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800189d 	.word	0x0800189d

08001bec <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d077      	beq.n	8001cf8 <CO_HBconsumer_process+0x10c>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d073      	beq.n	8001cf8 <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c16:	e068      	b.n	8001cea <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	789b      	ldrb	r3, [r3, #2]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d055      	beq.n	8001cde <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d022      	beq.n	8001c80 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d112      	bne.n	8001c6a <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d10a      	bne.n	8001c62 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f248 1330 	movw	r3, #33072	; 0x8130
 8001c5a:	221c      	movs	r2, #28
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	f7ff fd18 	bl	8001692 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2201      	movs	r2, #1
 8001c66:	709a      	strb	r2, [r3, #2]
 8001c68:	e007      	b.n	8001c7a <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d11c      	bne.n	8001cc2 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	441a      	add	r2, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d310      	bcc.n	8001cc2 <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f248 1330 	movw	r3, #33072	; 0x8130
 8001cae:	221b      	movs	r2, #27
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f7ff fcee 	bl	8001692 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	22ff      	movs	r2, #255	; 0xff
 8001cba:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	789b      	ldrb	r3, [r3, #2]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d001      	beq.n	8001cce <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d003      	beq.n	8001ce0 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cdc:	e000      	b.n	8001ce0 <CO_HBconsumer_process+0xf4>
                continue;
 8001cde:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	7a1b      	ldrb	r3, [r3, #8]
 8001cee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d390      	bcc.n	8001c18 <CO_HBconsumer_process+0x2c>
 8001cf6:	e028      	b.n	8001d4a <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <CO_HBconsumer_process+0x11a>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d021      	beq.n	8001d4a <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	77fb      	strb	r3, [r7, #31]
 8001d0a:	e015      	b.n	8001d38 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	3301      	adds	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	7a1b      	ldrb	r3, [r3, #8]
 8001d3c:	7ffa      	ldrb	r2, [r7, #31]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3e4      	bcc.n	8001d0c <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d114      	bne.n	8001d7c <CO_HBconsumer_process+0x190>
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d011      	beq.n	8001d7c <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2300      	movs	r3, #0
 8001d62:	221b      	movs	r2, #27
 8001d64:	2100      	movs	r1, #0
 8001d66:	f7ff fc94 	bl	8001692 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	221c      	movs	r2, #28
 8001d76:	2100      	movs	r1, #0
 8001d78:	f7ff fc8b 	bl	8001692 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d80:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d86:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	615a      	str	r2, [r3, #20]
}
 8001d8e:	bf00      	nop
 8001d90:	3730      	adds	r7, #48	; 0x30
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8001da4:	81fb      	strh	r3, [r7, #14]
    return value;
 8001da6:	89fb      	ldrh	r3, [r7, #14]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <OD_getIndex>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <OD_getIndex+0x14>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	e000      	b.n	8001dca <OD_getIndex+0x16>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <OD_extension_init>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <OD_extension_init+0x14>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e003      	b.n	8001df2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e0e:	7af9      	ldrb	r1, [r7, #11]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2302      	movs	r3, #2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fd25 	bl	8002868 <OD_get_value>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	2201      	movs	r2, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d807      	bhi.n	8001e64 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	5cd2      	ldrb	r2, [r2, r3]
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
               : false;
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <CO_isError+0x40>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <CO_isError+0x42>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <CO_getErrorRegister+0x1e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <CO_getErrorRegister+0x1e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	e000      	b.n	8001e96 <CO_getErrorRegister+0x20>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d10a      	bne.n	8001ee6 <CO_NMT_receive+0x44>
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <CO_NMT_receive+0x3e>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	78db      	ldrb	r3, [r3, #3]
 8001eda:	7bba      	ldrb	r2, [r7, #14]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d102      	bne.n	8001ee6 <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <OD_write_1017+0x2e>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	7d1b      	ldrb	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <OD_write_1017+0x2e>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <OD_write_1017+0x2e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d102      	bne.n	8001f20 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8001f20:	2309      	movs	r3, #9
 8001f22:	e017      	b.n	8001f54 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f7ff ff33 	bl	8001d96 <CO_getUint16>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f38:	fb03 f202 	mul.w	r2, r3, r2
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fa90 	bl	8002472 <OD_writeOriginal>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <CO_NMT_init+0x36>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <CO_NMT_init+0x36>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <CO_NMT_init+0x36>
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <CO_NMT_init+0x36>
        || (HB_CANdevTx == NULL)
 8001f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <CO_NMT_init+0x3c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e0b0      	b.n	80020fa <CO_NMT_init+0x19e>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f01d f961 	bl	801f264 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8c3a      	ldrh	r2, [r7, #32]
 8001fb8:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc6:	fb03 f202 	mul.w	r2, r3, r2
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001fce:	f107 0214 	add.w	r2, r7, #20
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f7ff ff11 	bl	8001dfe <OD_get_u16>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001fe0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00c      	beq.n	8002002 <CO_NMT_init+0xa6>
        if (errInfo != NULL) {
 8001fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <CO_NMT_init+0xa0>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001fee:	68b8      	ldr	r0, [r7, #8]
 8001ff0:	f7ff fee0 	bl	8001db4 <OD_getIndex>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffa:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001ffc:	f06f 030b 	mvn.w	r3, #11
 8002000:	e07b      	b.n	80020fa <CO_NMT_init+0x19e>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8002002:	8abb      	ldrh	r3, [r7, #20]
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <CO_NMT_init+0x1a8>)
 800201c:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a39      	ldr	r2, [pc, #228]	; (8002108 <CO_NMT_init+0x1ac>)
 8002022:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3310      	adds	r3, #16
 8002028:	4619      	mov	r1, r3
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f7ff fed3 	bl	8001dd6 <OD_extension_init>
 8002030:	4603      	mov	r3, r0
 8002032:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002034:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <CO_NMT_init+0xfa>
        if (errInfo != NULL) {
 800203c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <CO_NMT_init+0xf4>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002042:	68b8      	ldr	r0, [r7, #8]
 8002044:	f7ff feb6 	bl	8001db4 <OD_getIndex>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002050:	f06f 030b 	mvn.w	r3, #11
 8002054:	e051      	b.n	80020fa <CO_NMT_init+0x19e>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d903      	bls.n	800206a <CO_NMT_init+0x10e>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 800206a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800206c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <CO_NMT_init+0x1b0>)
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800207e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002080:	f010 fc42 	bl	8012908 <CO_CANrxBufferInit>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 8002088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <CO_NMT_init+0x13a>
        return ret;
 8002090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002094:	e031      	b.n	80020fa <CO_NMT_init+0x19e>
    }

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
    /* configure NMT CAN transmission */
    NMT->NMT_CANdevTx = NMT_CANdevTx;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->NMT_TXbuff = CO_CANtxBufferInit(NMT_CANdevTx, NMT_txIdx, CANidTxNMT, false, 2, false);
 800209c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800209e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80020a0:	2300      	movs	r3, #0
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2302      	movs	r3, #2
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020ac:	f010 fc8a 	bl	80129c4 <CO_CANtxBufferInit>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->NMT_TXbuff == NULL) {
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e01a      	b.n	80020fa <CO_NMT_init+0x19e>
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 80020ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80020ce:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020de:	f010 fc71 	bl	80129c4 <CO_CANtxBufferInit>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (NMT->HB_TXbuff == NULL) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <CO_NMT_init+0x19a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	e001      	b.n	80020fa <CO_NMT_init+0x19e>
    }

    return ret;
 80020f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	080023c3 	.word	0x080023c3
 8002108:	08001ef3 	.word	0x08001ef3
 800210c:	08001ea3 	.word	0x08001ea3

08002110 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 800212c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d204      	bcs.n	8002150 <CO_NMT_process+0x40>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	e000      	b.n	8002152 <CO_NMT_process+0x42>
 8002150:	2300      	movs	r3, #0
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10e      	bne.n	800217a <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d02b      	beq.n	80021bc <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <CO_NMT_process+0x6a>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002172:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002176:	429a      	cmp	r2, r3
 8002178:	d020      	beq.n	80021bc <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002182:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f010 fc92 	bl	8012ab8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8002194:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <CO_NMT_process+0x9c>
 80021a8:	2305      	movs	r3, #5
 80021aa:	e000      	b.n	80021ae <CO_NMT_process+0x9e>
 80021ac:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80021ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021b2:	e003      	b.n	80021bc <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021c2:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	789b      	ldrb	r3, [r3, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d02a      	beq.n	8002222 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	789b      	ldrb	r3, [r3, #2]
 80021d0:	2b82      	cmp	r3, #130	; 0x82
 80021d2:	d01e      	beq.n	8002212 <CO_NMT_process+0x102>
 80021d4:	2b82      	cmp	r3, #130	; 0x82
 80021d6:	dc20      	bgt.n	800221a <CO_NMT_process+0x10a>
 80021d8:	2b81      	cmp	r3, #129	; 0x81
 80021da:	d016      	beq.n	800220a <CO_NMT_process+0xfa>
 80021dc:	2b81      	cmp	r3, #129	; 0x81
 80021de:	dc1c      	bgt.n	800221a <CO_NMT_process+0x10a>
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d00e      	beq.n	8002202 <CO_NMT_process+0xf2>
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	dc18      	bgt.n	800221a <CO_NMT_process+0x10a>
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d002      	beq.n	80021f2 <CO_NMT_process+0xe2>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d004      	beq.n	80021fa <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 80021f0:	e013      	b.n	800221a <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 80021f2:	2305      	movs	r3, #5
 80021f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021f8:	e010      	b.n	800221c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 80021fa:	2304      	movs	r3, #4
 80021fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002200:	e00c      	b.n	800221c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8002202:	237f      	movs	r3, #127	; 0x7f
 8002204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002208:	e008      	b.n	800221c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800220a:	2302      	movs	r3, #2
 800220c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002210:	e004      	b.n	800221c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002218:	e000      	b.n	800221c <CO_NMT_process+0x10c>
                break;
 800221a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	2112      	movs	r1, #18
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fdf3 	bl	8001e28 <CO_isError>
 8002242:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	211b      	movs	r1, #27
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fdec 	bl	8001e28 <CO_isError>
 8002250:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	211c      	movs	r1, #28
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fde5 	bl	8001e28 <CO_isError>
 800225e:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <CO_NMT_process+0x16c>
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <CO_NMT_process+0x168>
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <CO_NMT_process+0x168>
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <CO_NMT_process+0x16c>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <CO_NMT_process+0x16e>
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	889b      	ldrh	r3, [r3, #4]
 8002284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fdec 	bl	8001e76 <CO_getErrorRegister>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	889b      	ldrh	r3, [r3, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <CO_NMT_process+0x1b8>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <CO_NMT_process+0x1b8>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <CO_NMT_process+0x1ba>
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 80022cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d111      	bne.n	80022f8 <CO_NMT_process+0x1e8>
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <CO_NMT_process+0x1d0>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	889b      	ldrh	r3, [r3, #4]
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <CO_NMT_process+0x1e0>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e000      	b.n	80022f2 <CO_NMT_process+0x1e2>
 80022f0:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 80022f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022f6:	e011      	b.n	800231c <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da0c      	bge.n	800231c <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8002302:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002306:	2b7f      	cmp	r3, #127	; 0x7f
 8002308:	d108      	bne.n	800231c <CO_NMT_process+0x20c>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <CO_NMT_process+0x20c>
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8002316:	2305      	movs	r3, #5
 8002318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_CALLBACK_CHANGE) != 0
    /* Notify operating state change */
    if ((NMT->operatingStatePrev != NMTstateCpy) || NNTinit) {
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002322:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002326:	429a      	cmp	r2, r3
 8002328:	d102      	bne.n	8002330 <CO_NMT_process+0x220>
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <CO_NMT_process+0x234>
        if (NMT->pFunctNMT != NULL) {
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <CO_NMT_process+0x234>
            NMT->pFunctNMT(NMTstateCpy);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002340:	4610      	mov	r0, r2
 8002342:	4798      	blx	r3
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800234a:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <CO_NMT_process+0x24a>
        *NMTstate = NMTstateCpy;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002358:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 800235a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800235e:	4618      	mov	r0, r3
 8002360:	3738      	adds	r7, #56	; 0x38
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <CO_NMT_sendCommand>:

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
CO_ReturnError_t
CO_NMT_sendCommand(CO_NMT_t* NMT, CO_NMT_command_t command, uint8_t nodeID) {
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
 8002372:	4613      	mov	r3, r2
 8002374:	70bb      	strb	r3, [r7, #2]
    /* verify arguments */
    if (NMT == NULL) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <CO_NMT_sendCommand+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	e01b      	b.n	80023ba <CO_NMT_sendCommand+0x54>
    }

    /* Apply NMT command also to this node, if set so. */
    if ((nodeID == 0U) || (nodeID == NMT->nodeId)) {
 8002382:	78bb      	ldrb	r3, [r7, #2]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <CO_NMT_sendCommand+0x2c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	78ba      	ldrb	r2, [r7, #2]
 800238e:	429a      	cmp	r2, r3
 8002390:	d102      	bne.n	8002398 <CO_NMT_sendCommand+0x32>
        NMT->internalCommand = command;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	709a      	strb	r2, [r3, #2]
    }

    /* Send NMT master message. */
    NMT->NMT_TXbuff->data[0] = (uint8_t)command;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	715a      	strb	r2, [r3, #5]
    NMT->NMT_TXbuff->data[1] = nodeID;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	78ba      	ldrb	r2, [r7, #2]
 80023a6:	719a      	strb	r2, [r3, #6]
    return CO_CANsend(NMT->NMT_CANdevTx, NMT->NMT_TXbuff);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f010 fb80 	bl	8012ab8 <CO_CANsend>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b088      	sub	sp, #32
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <OD_readOriginal+0x20>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <OD_readOriginal+0x20>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80023e2:	2309      	movs	r3, #9
 80023e4:	e041      	b.n	800246a <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80023f8:	230e      	movs	r3, #14
 80023fa:	e036      	b.n	800246a <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <OD_readOriginal+0x4e>
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d922      	bls.n	8002456 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	429a      	cmp	r2, r3
 8002418:	d801      	bhi.n	800241e <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800241a:	2309      	movs	r3, #9
 800241c:	e025      	b.n	800246a <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d90a      	bls.n	8002450 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	441a      	add	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800244a:	23ff      	movs	r3, #255	; 0xff
 800244c:	75fb      	strb	r3, [r7, #23]
 800244e:	e002      	b.n	8002456 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	f01c ff9e 	bl	801f39c <memcpy>

    *countRead = dataLenToCopy;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002472:	b580      	push	{r7, lr}
 8002474:	b088      	sub	sp, #32
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <OD_writeOriginal+0x20>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <OD_writeOriginal+0x20>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8002492:	2309      	movs	r3, #9
 8002494:	e056      	b.n	8002544 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 80024ac:	230e      	movs	r3, #14
 80024ae:	e049      	b.n	8002544 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <OD_writeOriginal+0x52>
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d924      	bls.n	800250e <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d801      	bhi.n	80024d2 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80024ce:	2309      	movs	r3, #9
 80024d0:	e038      	b.n	8002544 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90a      	bls.n	8002508 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	441a      	add	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002502:	23ff      	movs	r3, #255	; 0xff
 8002504:	74fb      	strb	r3, [r7, #19]
 8002506:	e002      	b.n	800250e <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d201      	bcs.n	800251a <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8002516:	230c      	movs	r3, #12
 8002518:	e014      	b.n	8002544 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	429a      	cmp	r2, r3
 8002520:	d80f      	bhi.n	8002542 <OD_writeOriginal+0xd0>
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d80b      	bhi.n	8002542 <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f01c ff34 	bl	801f39c <memcpy>
 8002534:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	601a      	str	r2, [r3, #0]
    return returnCode;
 800253c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002540:	e000      	b.n	8002544 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8002542:	2309      	movs	r3, #9
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 800255a:	2302      	movs	r3, #2
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8002576:	2302      	movs	r3, #2
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
if ((od == NULL) || (od->size == 0U)) { return NULL; }
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <OD_find+0x1a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <OD_find+0x1e>
 800259e:	2300      	movs	r3, #0
 80025a0:	e046      	b.n	8002630 <OD_find+0xac>

uint16_t min = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	82fb      	strh	r3, [r7, #22]
uint16_t max = od->size - 1U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
while (min < max)
 80025ae:	e026      	b.n	80025fe <OD_find+0x7a>
{
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80025b0:	8afa      	ldrh	r2, [r7, #22]
 80025b2:	8abb      	ldrh	r3, [r7, #20]
 80025b4:	4413      	add	r3, r2
 80025b6:	105b      	asrs	r3, r3, #1
 80025b8:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	89fa      	ldrh	r2, [r7, #14]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) { return entry; }
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d101      	bne.n	80025da <OD_find+0x56>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	e02a      	b.n	8002630 <OD_find+0xac>

        if (index <  entry->index)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d209      	bcs.n	80025f8 <OD_find+0x74>
			{
			  max = (cur > 0U) ? (cur - 1U) : cur;
 80025e4:	89fb      	ldrh	r3, [r7, #14]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <OD_find+0x6e>
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	e000      	b.n	80025f4 <OD_find+0x70>
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	82bb      	strh	r3, [r7, #20]
 80025f6:	e002      	b.n	80025fe <OD_find+0x7a>
			} else { min = cur + 1U;}
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	3301      	adds	r3, #1
 80025fc:	82fb      	strh	r3, [r7, #22]
while (min < max)
 80025fe:	8afa      	ldrh	r2, [r7, #22]
 8002600:	8abb      	ldrh	r3, [r7, #20]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3d4      	bcc.n	80025b0 <OD_find+0x2c>
}/////////////////////////////////////while (min < max)

if (min == max)
 8002606:	8afa      	ldrh	r2, [r7, #22]
 8002608:	8abb      	ldrh	r3, [r7, #20]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10f      	bne.n	800262e <OD_find+0xaa>
    {
    OD_entry_t* entry = &od->list[min];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	8afa      	ldrh	r2, [r7, #22]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	613b      	str	r3, [r7, #16]
    if (index == entry->index) {return entry; }
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	429a      	cmp	r2, r3
 8002628:	d101      	bne.n	800262e <OD_find+0xaa>
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	e000      	b.n	8002630 <OD_find+0xac>
    }

return NULL; /* entry does not exist in OD */
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <OD_getSub>:
ODR_t  ///Return code from OD access function.
OD_getSub (	const OD_entry_t*	entry,
			uint8_t 			subIndex,
			OD_IO_t*			io,
			bool_t				odOrig )
{
 800263c:	b480      	push	{r7}
 800263e:	b08d      	sub	sp, #52	; 0x34
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	460b      	mov	r3, r1
 800264a:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <OD_getSub+0x1e>
    	|| entry->odObject == NULL)  { return ODR_IDX_NOT_EXIST; }
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <OD_getSub+0x22>
 800265a:	2305      	movs	r3, #5
 800265c:	e0d7      	b.n	800280e <OD_getSub+0x1d2>

    if ( io == NULL ) {  return ODR_DEV_INCOMPAT; }
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <OD_getSub+0x2c>
 8002664:	2309      	movs	r3, #9
 8002666:	e0d2      	b.n	800280e <OD_getSub+0x1d2>

    OD_stream_t* stream = &io->stream;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	78db      	ldrb	r3, [r3, #3]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	2b03      	cmp	r3, #3
 8002676:	d051      	beq.n	800271c <OD_getSub+0xe0>
 8002678:	2b03      	cmp	r3, #3
 800267a:	f300 808d 	bgt.w	8002798 <OD_getSub+0x15c>
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <OD_getSub+0x4c>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d015      	beq.n	80026b2 <OD_getSub+0x76>
 8002686:	e087      	b.n	8002798 <OD_getSub+0x15c>
    {
     case ODT_VAR: {
            		if (subIndex > 0U) {return ODR_SUB_NOT_EXIST;}
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <OD_getSub+0x56>
 800268e:	230e      	movs	r3, #14
 8002690:	e0bd      	b.n	800280e <OD_getSub+0x1d2>
            		CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	617b      	str	r3, [r7, #20]

					stream->attribute  = odo->attribute;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	791a      	ldrb	r2, [r3, #4]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	601a      	str	r2, [r3, #0]
					stream->dataLength = odo->dataLength;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	609a      	str	r2, [r3, #8]
					break;}
 80026b0:	e074      	b.n	800279c <OD_getSub+0x160>

	case ODT_ARR: {
            		if (subIndex >= entry->subEntriesCount) { return ODR_SUB_NOT_EXIST; }
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	789b      	ldrb	r3, [r3, #2]
 80026b6:	7afa      	ldrb	r2, [r7, #11]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d301      	bcc.n	80026c0 <OD_getSub+0x84>
 80026bc:	230e      	movs	r3, #14
 80026be:	e0a6      	b.n	800280e <OD_getSub+0x1d2>
           			CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	61fb      	str	r3, [r7, #28]

					if (subIndex == 0U)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <OD_getSub+0xa8>
					{
					stream->attribute  = odo->attribute0;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	7a1a      	ldrb	r2, [r3, #8]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig0;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	601a      	str	r2, [r3, #0]
					stream->dataLength = 1;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	2201      	movs	r2, #1
 80026e0:	609a      	str	r2, [r3, #8]
							stream->attribute  = odo->attribute;
							uint8_t* ptr       = odo->dataOrig;
							stream->dataOrig   = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
							stream->dataLength = odo->dataElementLength;
							}
					break;}
 80026e2:	e05b      	b.n	800279c <OD_getSub+0x160>
							stream->attribute  = odo->attribute;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	7a5a      	ldrb	r2, [r3, #9]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	741a      	strb	r2, [r3, #16]
							uint8_t* ptr       = odo->dataOrig;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
							stream->dataOrig   = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <OD_getSub+0xd0>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	7afa      	ldrb	r2, [r7, #11]
 80026fe:	3a01      	subs	r2, #1
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	e000      	b.n	800270e <OD_getSub+0xd2>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	6013      	str	r3, [r2, #0]
							stream->dataLength = odo->dataElementLength;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	609a      	str	r2, [r3, #8]
					break;}
 800271a:	e03f      	b.n	800279c <OD_getSub+0x160>

	case ODT_REC: {
				   CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	623b      	str	r3, [r7, #32]
				   CO_PROGMEM OD_obj_record_t* odo    = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
				   for (uint8_t i = 0; i < entry->subEntriesCount; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800272c:	e01c      	b.n	8002768 <OD_getSub+0x12c>
				   	   {
						if (odoArr[i].subIndex == subIndex) {odo = &odoArr[i];break;}
 800272e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	4413      	add	r3, r2
 8002740:	791b      	ldrb	r3, [r3, #4]
 8002742:	7afa      	ldrb	r2, [r7, #11]
 8002744:	429a      	cmp	r2, r3
 8002746:	d10a      	bne.n	800275e <OD_getSub+0x122>
 8002748:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	4413      	add	r3, r2
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275c:	e00a      	b.n	8002774 <OD_getSub+0x138>
				   for (uint8_t i = 0; i < entry->subEntriesCount; i++)
 800275e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002762:	3301      	adds	r3, #1
 8002764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	789b      	ldrb	r3, [r3, #2]
 800276c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002770:	429a      	cmp	r2, r3
 8002772:	d3dc      	bcc.n	800272e <OD_getSub+0xf2>
					   }
					if (odo == NULL) {return ODR_SUB_NOT_EXIST;}
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <OD_getSub+0x142>
 800277a:	230e      	movs	r3, #14
 800277c:	e047      	b.n	800280e <OD_getSub+0x1d2>
					stream->attribute  = odo->attribute;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	795a      	ldrb	r2, [r3, #5]
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig;
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	601a      	str	r2, [r3, #0]
					stream->dataLength = odo->dataLength;
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	609a      	str	r2, [r3, #8]
					break;}
 8002796:	e001      	b.n	800279c <OD_getSub+0x160>

        default:  { return ODR_DEV_INCOMPAT; break; }
 8002798:	2309      	movs	r3, #9
 800279a:	e038      	b.n	800280e <OD_getSub+0x1d2>




    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <OD_getSub+0x16e>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <OD_getSub+0x182>
    {
        io->read 		= OD_readOriginal;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <OD_getSub+0x1e0>)
 80027ae:	619a      	str	r2, [r3, #24]
        io->write 		= OD_writeOriginal;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <OD_getSub+0x1e4>)
 80027b4:	61da      	str	r2, [r3, #28]
        stream->object 	= NULL;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	e01c      	b.n	80027f8 <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
         io->read       = (entry->extension->read  != NULL) ? entry->extension->read  : OD_readDisabled;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <OD_getSub+0x194>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	e000      	b.n	80027d2 <OD_getSub+0x196>
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <OD_getSub+0x1e8>)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6193      	str	r3, [r2, #24]
         io->write      = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <OD_getSub+0x1ac>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	e000      	b.n	80027ea <OD_getSub+0x1ae>
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <OD_getSub+0x1ec>)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	61d3      	str	r3, [r2, #28]
         stream->object =  entry->extension->object;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	605a      	str	r2, [r3, #4]
         }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	7afa      	ldrb	r2, [r7, #11]
 800280a:	751a      	strb	r2, [r3, #20]
    return ODR_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3734      	adds	r7, #52	; 0x34
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	080023c3 	.word	0x080023c3
 8002820:	08002473 	.word	0x08002473
 8002824:	0800254d 	.word	0x0800254d
 8002828:	08002569 	.word	0x08002569

0800282c <OD_getSDOabCode>:


uint32_t
OD_getSDOabCode(ODR_t returnCode)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db03      	blt.n	8002846 <OD_getSDOabCode+0x1a>
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b19      	cmp	r3, #25
 8002844:	dd02      	ble.n	800284c <OD_getSDOabCode+0x20>
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <OD_getSDOabCode+0x38>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	e004      	b.n	8002856 <OD_getSDOabCode+0x2a>
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <OD_getSDOabCode+0x38>)
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	08021da4 	.word	0x08021da4

08002868 <OD_get_value>:
OD_get_value (	const OD_entry_t* 	entry,
				uint8_t 			subIndex,
				void* 				val,
				OD_size_t 			len,
				bool_t 				odOrig )
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b091      	sub	sp, #68	; 0x44
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) { return ODR_DEV_INCOMPAT; }
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <OD_get_value+0x1a>
 800287e:	2309      	movs	r3, #9
 8002880:	e02b      	b.n	80028da <OD_get_value+0x72>

    OD_IO_t io = {NULL};
 8002882:	f107 0318 	add.w	r3, r7, #24
 8002886:	2220      	movs	r2, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f01c fcea 	bl	801f264 <memset>
    OD_stream_t* stream  = &io.stream;
 8002890:	f107 0318 	add.w	r3, r7, #24
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t    countRd = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
    ODR_t 		 ret     = OD_getSub(entry, subIndex, &io, odOrig);
 800289a:	f107 0218 	add.w	r2, r7, #24
 800289e:	7af9      	ldrb	r1, [r7, #11]
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff feca 	bl	800263c <OD_getSub>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) { return ret; }
 80028ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <OD_get_value+0x54>
 80028b6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80028ba:	e00e      	b.n	80028da <OD_get_value+0x72>

    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 80028bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <OD_get_value+0x62>
 80028c6:	230b      	movs	r3, #11
 80028c8:	e007      	b.n	80028da <OD_get_value+0x72>

    return io.read(stream, val, len, &countRd);
 80028ca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028d6:	47a0      	blx	r4
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3744      	adds	r7, #68	; 0x44
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <OD_set_value>:
			const OD_entry_t*	entry,
			uint8_t 			subIndex,
			void* 				val,
			OD_size_t 			len,
			bool_t 				odOrig )
{
 80028e2:	b590      	push	{r4, r7, lr}
 80028e4:	b091      	sub	sp, #68	; 0x44
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	460b      	mov	r3, r1
 80028f0:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {return ODR_DEV_INCOMPAT; }
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <OD_set_value+0x1a>
 80028f8:	2309      	movs	r3, #9
 80028fa:	e02b      	b.n	8002954 <OD_set_value+0x72>
    OD_IO_t io = {NULL};
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	2220      	movs	r2, #32
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f01c fcad 	bl	801f264 <memset>
    OD_stream_t* stream = &io.stream;
 800290a:	f107 0318 	add.w	r3, r7, #24
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002914:	f107 0218 	add.w	r2, r7, #24
 8002918:	7af9      	ldrb	r1, [r7, #11]
 800291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fe8d 	bl	800263c <OD_getSub>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {  return ret;  }
 8002928:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <OD_set_value+0x54>
 8002930:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002934:	e00e      	b.n	8002954 <OD_set_value+0x72>

    if (stream->dataLength != len) {  return ODR_TYPE_MISMATCH;  }
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <OD_set_value+0x62>
 8002940:	230b      	movs	r3, #11
 8002942:	e007      	b.n	8002954 <OD_set_value+0x72>

    return io.write(stream, val, len, &countWritten);
 8002944:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002950:	47a0      	blx	r4
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3744      	adds	r7, #68	; 0x44
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <OD_getPtr>:



void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	; 0x38
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8002972:	f107 0210 	add.w	r2, r7, #16
 8002976:	7af9      	ldrb	r1, [r7, #11]
 8002978:	2301      	movs	r3, #1
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fe5e 	bl	800263c <OD_getSub>
 8002980:	4603      	mov	r3, r0
 8002982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK)
 8002986:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <OD_getPtr+0x60>
    {
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U))
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <OD_getPtr+0x42>
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <OD_getPtr+0x4a>
        {
         errCopy = ODR_DEV_INCOMPAT;
 800299e:	2309      	movs	r3, #9
 80029a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80029a4:	e00a      	b.n	80029bc <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <OD_getPtr+0x60>
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d002      	beq.n	80029bc <OD_getPtr+0x60>
        			{
            		errCopy = ODR_TYPE_MISMATCH;
 80029b6:	230b      	movs	r3, #11
 80029b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        			} else {} /* MISRA C 2004 14.10 */

    }

    if (err != NULL) { *err = errCopy; }
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <OD_getPtr+0x6e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80029c8:	701a      	strb	r2, [r3, #0]

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 80029ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <OD_getPtr+0x7c>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e000      	b.n	80029da <OD_getPtr+0x7e>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3738      	adds	r7, #56	; 0x38
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <CO_getUint8>:
CO_getUint8(const void* buf) {
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80029ee:	73fb      	strb	r3, [r7, #15]
    return value;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <CO_getUint16>:
CO_getUint16(const void* buf) {
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8002a0c:	81fb      	strh	r3, [r7, #14]
    return value;
 8002a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002a28:	60fb      	str	r3, [r7, #12]
    return value;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002a48:	2304      	movs	r3, #4
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <OD_getIndex>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <OD_getIndex+0x14>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	e000      	b.n	8002a6c <OD_getIndex+0x16>
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <OD_extension_init>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <OD_extension_init+0x14>
 8002a88:	2305      	movs	r3, #5
 8002a8a:	e003      	b.n	8002a94 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002ab0:	7af9      	ldrb	r1, [r7, #11]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff fed4 	bl	8002868 <OD_get_value>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002ada:	7af9      	ldrb	r1, [r7, #11]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff febf 	bl	8002868 <OD_get_value>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	460b      	mov	r3, r1
 8002b02:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002b04:	7af9      	ldrb	r1, [r7, #11]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff feaa 	bl	8002868 <OD_get_value>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <OD_write_dummy+0x1a>
        *countWritten = count;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <OD_read_dummy+0x20>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <OD_read_dummy+0x20>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002b66:	2309      	movs	r3, #9
 8002b68:	e010      	b.n	8002b8c <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d902      	bls.n	8002b7a <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f01c fb70 	bl	801f264 <memset>

    *countRead = count;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b092      	sub	sp, #72	; 0x48
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002bba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	015b      	lsls	r3, r3, #5
 8002bc8:	3310      	adds	r3, #16
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d901      	bls.n	8002bdc <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002bd8:	2307      	movs	r3, #7
 8002bda:	e090      	b.n	8002cfe <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8002bdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002be0:	2b1f      	cmp	r3, #31
 8002be2:	d81a      	bhi.n	8002c1a <PDOconfigMap+0x86>
 8002be4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8002bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8002bf0:	2218      	movs	r2, #24
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bf6:	f01c fb35 	bl	801f264 <memset>
        stream->dataLength = mappedLength;
 8002bfa:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8002c02:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	4a3e      	ldr	r2, [pc, #248]	; (8002d08 <PDOconfigMap+0x174>)
 8002c0e:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	4a3e      	ldr	r2, [pc, #248]	; (8002d0c <PDOconfigMap+0x178>)
 8002c14:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e071      	b.n	8002cfe <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8002c1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c22:	f7ff fcaf 	bl	8002584 <OD_find>
 8002c26:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002c28:	f107 0210 	add.w	r2, r7, #16
 8002c2c:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002c30:	2300      	movs	r3, #0
 8002c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c34:	f7ff fd02 	bl	800263c <OD_getSub>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8002c3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <PDOconfigMap+0xb8>
        return odRet;
 8002c46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c4a:	e058      	b.n	8002cfe <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <PDOconfigMap+0xc2>
 8002c52:	2308      	movs	r3, #8
 8002c54:	e000      	b.n	8002c58 <PDOconfigMap+0xc4>
 8002c56:	2304      	movs	r3, #4
 8002c58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8002c5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002c64:	4013      	ands	r3, r2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <PDOconfigMap+0xee>
 8002c6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d201      	bcs.n	8002c86 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002c82:	2306      	movs	r3, #6
 8002c84:	e03b      	b.n	8002cfe <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	461d      	mov	r5, r3
 8002c8a:	f107 0410 	add.w	r4, r7, #16
 8002c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8002c9a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d129      	bne.n	8002cfc <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8002ca8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002cac:	2b1f      	cmp	r3, #31
 8002cae:	d81f      	bhi.n	8002cf0 <PDOconfigMap+0x15c>
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	79fa      	ldrb	r2, [r7, #7]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	440b      	add	r3, r1
 8002cca:	1d19      	adds	r1, r3, #4
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3244      	adds	r2, #68	; 0x44
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8002cd4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	b2d1      	uxtb	r1, r2
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	460a      	mov	r2, r1
 8002cea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8002cee:	e005      	b.n	8002cfc <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3244      	adds	r2, #68	; 0x44
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3748      	adds	r7, #72	; 0x48
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bdb0      	pop	{r4, r5, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	08002b47 	.word	0x08002b47
 8002d0c:	08002b1f 	.word	0x08002b1f

08002d10 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002d26:	f107 021b 	add.w	r2, r7, #27
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff feb6 	bl	8002aa0 <OD_get_u8>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002d3a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff fe84 	bl	8002a56 <OD_getIndex>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002d56:	f06f 030b 	mvn.w	r3, #11
 8002d5a:	e07f      	b.n	8002e5c <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d62:	e05b      	b.n	8002e1c <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	3310      	adds	r3, #16
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8002d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b2d9      	uxtb	r1, r3
 8002d7e:	f107 0214 	add.w	r2, r7, #20
 8002d82:	2301      	movs	r3, #1
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff feb5 	bl	8002af4 <OD_get_u32>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002d90:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002d94:	2b0e      	cmp	r3, #14
 8002d96:	d03b      	beq.n	8002e10 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8002d98:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fe55 	bl	8002a56 <OD_getIndex>
 8002dac:	4603      	mov	r3, r0
 8002dae:	021a      	lsls	r2, r3, #8
 8002db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002db4:	431a      	orrs	r2, r3
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002dba:	f06f 030b 	mvn.w	r3, #11
 8002dbe:	e04d      	b.n	8002e5c <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002dc0:	6979      	ldr	r1, [r7, #20]
 8002dc2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fee1 	bl	8002b94 <PDOconfigMap>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002dd8:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <PDO_initMapping+0xea>
                *erroneousMap = map;
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8002dfa:	7efb      	ldrb	r3, [r7, #27]
 8002dfc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d206      	bcs.n	8002e12 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	4413      	add	r3, r2
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e000      	b.n	8002e12 <PDO_initMapping+0x102>
            continue;
 8002e10:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e16:	3301      	adds	r3, #1
 8002e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	d99f      	bls.n	8002d64 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d805      	bhi.n	8002e36 <PDO_initMapping+0x126>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <PDO_initMapping+0x134>
 8002e30:	7efb      	ldrb	r3, [r7, #27]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002e54:	7efa      	ldrb	r2, [r7, #27]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	; 0x38
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <OD_write_PDO_mapping+0x28>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <OD_write_PDO_mapping+0x28>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <OD_write_PDO_mapping+0x28>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	7d1b      	ldrb	r3, [r3, #20]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d901      	bls.n	8002e90 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8002e8c:	2309      	movs	r3, #9
 8002e8e:	e07e      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <OD_write_PDO_mapping+0x4a>
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	7b5b      	ldrb	r3, [r3, #13]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <OD_write_PDO_mapping+0x4e>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7d1b      	ldrb	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e06d      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	7d1b      	ldrb	r3, [r3, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d145      	bne.n	8002f46 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002eba:	68b8      	ldr	r0, [r7, #8]
 8002ebc:	f7ff fd91 	bl	80029e2 <CO_getUint8>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002ec8:	7fbb      	ldrb	r3, [r7, #30]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d901      	bls.n	8002ed2 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e05d      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed8:	e01b      	b.n	8002f12 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ede:	015b      	lsls	r3, r3, #5
 8002ee0:	3310      	adds	r3, #16
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d901      	bls.n	8002f00 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002efc:	2306      	movs	r3, #6
 8002efe:	e046      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f12:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002f16:	7fbb      	ldrb	r3, [r7, #30]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3de      	bcc.n	8002eda <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d901      	bls.n	8002f26 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8002f22:	2307      	movs	r3, #7
 8002f24:	e033      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <OD_write_PDO_mapping+0xd2>
 8002f2c:	7fbb      	ldrb	r3, [r7, #30]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8002f32:	230f      	movs	r3, #15
 8002f34:	e02b      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	7fba      	ldrb	r2, [r7, #30]
 8002f42:	735a      	strb	r2, [r3, #13]
 8002f44:	e01c      	b.n	8002f80 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002f46:	68b8      	ldr	r0, [r7, #8]
 8002f48:	f7ff fd68 	bl	8002a1c <CO_getUint32>
 8002f4c:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	7d1b      	ldrb	r3, [r3, #20]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	460b      	mov	r3, r1
 8002f66:	6a39      	ldr	r1, [r7, #32]
 8002f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f6a:	f7ff fe13 	bl	8002b94 <PDOconfigMap>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002f72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002f7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f7e:	e006      	b.n	8002f8e <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff fa73 	bl	8002472 <OD_writeOriginal>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3730      	adds	r7, #48	; 0x30
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b088      	sub	sp, #32
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fa09 	bl	80023c2 <OD_readOriginal>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002fb4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d134      	bne.n	8003026 <OD_read_PDO_commParam+0x90>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7d1b      	ldrb	r3, [r3, #20]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d130      	bne.n	8003026 <OD_read_PDO_commParam+0x90>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d12c      	bne.n	8003026 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002fd2:	68b8      	ldr	r0, [r7, #8]
 8002fd4:	f7ff fd22 	bl	8002a1c <CO_getUint32>
 8002fd8:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe2:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002fe4:	8a7b      	ldrh	r3, [r7, #18]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <OD_read_PDO_commParam+0x78>
 8002fea:	8a7a      	ldrh	r2, [r7, #18]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d107      	bne.n	800300e <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800300a:	4313      	orrs	r3, r2
 800300c:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800301c:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 800301e:	69f9      	ldr	r1, [r7, #28]
 8003020:	68b8      	ldr	r0, [r7, #8]
 8003022:	f7ff fd09 	bl	8002a38 <CO_setUint32>
    }

    return returnCode;
 8003026:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 8003032:	b580      	push	{r7, lr}
 8003034:	b088      	sub	sp, #32
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	791b      	ldrb	r3, [r3, #4]
 8003048:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	3305      	adds	r3, #5
 800304e:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003056:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d03e      	beq.n	80030de <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	7b1b      	ldrb	r3, [r3, #12]
 8003064:	7cfa      	ldrb	r2, [r7, #19]
 8003066:	429a      	cmp	r2, r3
 8003068:	d334      	bcc.n	80030d4 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	7b1b      	ldrb	r3, [r3, #12]
 800306e:	7cfa      	ldrb	r2, [r7, #19]
 8003070:	429a      	cmp	r2, r3
 8003072:	d105      	bne.n	8003080 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 8003074:	7ffb      	ldrb	r3, [r7, #31]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 800307a:	230b      	movs	r3, #11
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e004      	b.n	800308a <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 8003086:	230d      	movs	r3, #13
 8003088:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <CO_PDO_receive+0x80>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <CO_PDO_receive+0x80>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <CO_PDO_receive+0x80>
                bufNo = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 80030b2:	7fbb      	ldrb	r3, [r7, #30]
 80030b4:	332e      	adds	r3, #46	; 0x2e
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	2208      	movs	r2, #8
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f01c f96b 	bl	801f39c <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80030c6:	7fba      	ldrb	r2, [r7, #30]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	325a      	adds	r2, #90	; 0x5a
 80030cc:	2101      	movs	r1, #1
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80030d2:	e004      	b.n	80030de <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 80030da:	230c      	movs	r3, #12
 80030dc:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	7ffa      	ldrb	r2, [r7, #31]
 80030e2:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 80030e6:	bf00      	nop
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b092      	sub	sp, #72	; 0x48
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <OD_write_14xx+0x26>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <OD_write_14xx+0x26>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <OD_write_14xx+0x26>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d901      	bls.n	800311a <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003116:	2309      	movs	r3, #9
 8003118:	e102      	b.n	8003320 <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f01c f935 	bl	801f39c <memcpy>

    switch (stream->subIndex) {
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	7d1b      	ldrb	r3, [r3, #20]
 8003136:	2b05      	cmp	r3, #5
 8003138:	f000 80d5 	beq.w	80032e6 <OD_write_14xx+0x1f6>
 800313c:	2b05      	cmp	r3, #5
 800313e:	f300 80e4 	bgt.w	800330a <OD_write_14xx+0x21a>
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <OD_write_14xx+0x5e>
 8003146:	2b02      	cmp	r3, #2
 8003148:	f000 80a6 	beq.w	8003298 <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 800314c:	e0dd      	b.n	800330a <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f7ff fc64 	bl	8002a1c <CO_getUint32>
 8003154:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315e:	86fb      	strh	r3, [r7, #54]	; 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	43db      	mvns	r3, r3
 8003164:	0fdb      	lsrs	r3, r3, #31
 8003166:	b2db      	uxtb	r3, r3
 8003168:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4b6e      	ldr	r3, [pc, #440]	; (8003328 <OD_write_14xx+0x238>)
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13d      	bne.n	80031f0 <OD_write_14xx+0x100>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <OD_write_14xx+0x9e>
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <OD_write_14xx+0x9e>
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8003188:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800318a:	429a      	cmp	r2, r3
 800318c:	d130      	bne.n	80031f0 <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d026      	beq.n	80031e2 <OD_write_14xx+0xf2>
 8003194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003196:	2b7f      	cmp	r3, #127	; 0x7f
 8003198:	d92a      	bls.n	80031f0 <OD_write_14xx+0x100>
 800319a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800319c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a0:	d903      	bls.n	80031aa <OD_write_14xx+0xba>
 80031a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031a4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80031a8:	d922      	bls.n	80031f0 <OD_write_14xx+0x100>
 80031aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031ac:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80031b0:	d903      	bls.n	80031ba <OD_write_14xx+0xca>
 80031b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031b8:	d31a      	bcc.n	80031f0 <OD_write_14xx+0x100>
 80031ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031c0:	d903      	bls.n	80031ca <OD_write_14xx+0xda>
 80031c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c4:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80031c8:	d312      	bcc.n	80031f0 <OD_write_14xx+0x100>
 80031ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031cc:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80031d0:	d303      	bcc.n	80031da <OD_write_14xx+0xea>
 80031d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031d8:	d30a      	bcc.n	80031f0 <OD_write_14xx+0x100>
 80031da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e0:	d806      	bhi.n	80031f0 <OD_write_14xx+0x100>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <OD_write_14xx+0x104>
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	7b5b      	ldrb	r3, [r3, #13]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 80031f0:	230f      	movs	r3, #15
 80031f2:	e095      	b.n	8003320 <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d106      	bne.n	800320c <OD_write_14xx+0x11c>
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8003204:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003206:	429a      	cmp	r2, r3
 8003208:	f000 8081 	beq.w	800330e <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8003212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003214:	429a      	cmp	r2, r3
 8003216:	d108      	bne.n	800322a <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fc07 	bl	8002a38 <CO_setUint32>
                if (!valid) {
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <OD_write_14xx+0x144>
                    CAN_ID = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	86fb      	strh	r3, [r7, #54]	; 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	6858      	ldr	r0, [r3, #4]
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 800323e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <OD_write_14xx+0x23c>)
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003250:	f00f fb5a 	bl	8012908 <CO_CANrxBufferInit>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <OD_write_14xx+0x186>
 800325e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <OD_write_14xx+0x186>
                    PDO->valid = true;
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2201      	movs	r2, #1
 800326a:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003270:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            break;
 8003274:	e04b      	b.n	800330e <OD_write_14xx+0x21e>
                    PDO->valid = false;
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
                    if (ret != CO_ERROR_NO) {
 800328c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03c      	beq.n	800330e <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 8003294:	2309      	movs	r3, #9
 8003296:	e043      	b.n	8003320 <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	f7ff fba2 	bl	80029e2 <CO_getUint8>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	2bf0      	cmp	r3, #240	; 0xf0
 80032aa:	d905      	bls.n	80032b8 <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b0:	2bfd      	cmp	r3, #253	; 0xfd
 80032b2:	d801      	bhi.n	80032b8 <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 80032b4:	230f      	movs	r3, #15
 80032b6:	e033      	b.n	8003320 <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	2bf0      	cmp	r3, #240	; 0xf0
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d003      	beq.n	80032dc <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            RPDO->synchronous = synchronous;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 80032e4:	e014      	b.n	8003310 <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f7ff fb89 	bl	80029fe <CO_getUint16>
 80032ec:	4603      	mov	r3, r0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032f6:	fb03 f202 	mul.w	r2, r3, r2
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
            RPDO->timeoutTimer = 0;
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 8003308:	e002      	b.n	8003310 <OD_write_14xx+0x220>
            break;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <OD_write_14xx+0x220>
            break;
 800330e:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003310:	f107 0110 	add.w	r1, r7, #16
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff f8aa 	bl	8002472 <OD_writeOriginal>
 800331e:	4603      	mov	r3, r0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3738      	adds	r7, #56	; 0x38
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	3ffff800 	.word	0x3ffff800
 800332c:	08003033 	.word	0x08003033

08003330 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b090      	sub	sp, #64	; 0x40
 8003334:	af04      	add	r7, sp, #16
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <CO_RPDO_init+0x36>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <CO_RPDO_init+0x36>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <CO_RPDO_init+0x36>
 8003354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <CO_RPDO_init+0x36>
 800335a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 8003360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e115      	b.n	8003598 <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 800336c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8003370:	2100      	movs	r1, #0
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f01b ff76 	bl	801f264 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003382:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2301      	movs	r3, #1
 8003394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800339a:	f7ff fcb9 	bl	8002d10 <PDO_initMapping>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 80033a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <CO_RPDO_init+0x82>
        return ret;
 80033ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80033b0:	e0f2      	b.n	8003598 <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80033b6:	f107 0218 	add.w	r2, r7, #24
 80033ba:	2301      	movs	r3, #1
 80033bc:	2101      	movs	r1, #1
 80033be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033c0:	f7ff fb98 	bl	8002af4 <OD_get_u32>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80033ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00e      	beq.n	80033f0 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 80033d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 80033d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033da:	f7ff fb3c 	bl	8002a56 <OD_getIndex>
 80033de:	4603      	mov	r3, r0
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80033ea:	f06f 030b 	mvn.w	r3, #11
 80033ee:	e0d3      	b.n	8003598 <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	0fdb      	lsrs	r3, r3, #31
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <CO_RPDO_init+0xf6>
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	7b5b      	ldrb	r3, [r3, #13]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <CO_RPDO_init+0xe8>
 8003412:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <CO_RPDO_init+0xf6>
        valid = false;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <CO_RPDO_init+0x10a>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	e000      	b.n	800343c <CO_RPDO_init+0x10c>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003442:	221a      	movs	r2, #26
 8003444:	2101      	movs	r1, #1
 8003446:	f7fe f924 	bl	8001692 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8003454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <CO_RPDO_init+0x13c>
 800345a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800345c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800345e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003462:	400b      	ands	r3, r1
 8003464:	429a      	cmp	r2, r3
 8003466:	d101      	bne.n	800346c <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8003468:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800346a:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 800346c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800346e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8003472:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <CO_RPDO_init+0x270>)
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003482:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003484:	f00f fa40 	bl	8012908 <CO_CANrxBufferInit>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 800348e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <CO_RPDO_init+0x16c>
        return ret;
 8003496:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800349a:	e07d      	b.n	8003598 <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a0:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80034a2:	23fe      	movs	r3, #254	; 0xfe
 80034a4:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80034a6:	f107 0217 	add.w	r2, r7, #23
 80034aa:	2301      	movs	r3, #1
 80034ac:	2102      	movs	r1, #2
 80034ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034b0:	f7ff faf6 	bl	8002aa0 <OD_get_u8>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80034ba:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 80034c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034ca:	f7ff fac4 	bl	8002a56 <OD_getIndex>
 80034ce:	4603      	mov	r3, r0
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80034da:	f06f 030b 	mvn.w	r3, #11
 80034de:	e05b      	b.n	8003598 <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2bf0      	cmp	r3, #240	; 0xf0
 80034ec:	bf94      	ite	ls
 80034ee:	2301      	movls	r3, #1
 80034f0:	2300      	movhi	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8003500:	f107 0214 	add.w	r2, r7, #20
 8003504:	2301      	movs	r3, #1
 8003506:	2105      	movs	r1, #5
 8003508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800350a:	f7ff fade 	bl	8002aca <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 800350e:	8abb      	ldrh	r3, [r7, #20]
 8003510:	461a      	mov	r2, r3
 8003512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003516:	fb03 f202 	mul.w	r2, r3, r2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	2201      	movs	r2, #1
 8003524:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003536:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800353e:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003546:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <CO_RPDO_init+0x274>)
 8003556:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <CO_RPDO_init+0x278>)
 800355e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <CO_RPDO_init+0x27c>)
 800356e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <CO_RPDO_init+0x280>)
 8003576:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003580:	4619      	mov	r1, r3
 8003582:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003584:	f7ff fa78 	bl	8002a78 <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800358e:	4619      	mov	r1, r3
 8003590:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003592:	f7ff fa71 	bl	8002a78 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3730      	adds	r7, #48	; 0x30
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	08003033 	.word	0x08003033
 80035a4:	08002f97 	.word	0x08002f97
 80035a8:	080030f1 	.word	0x080030f1
 80035ac:	080023c3 	.word	0x080023c3
 80035b0:	08002e65 	.word	0x08002e65

080035b4 <CO_RPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t syncWas)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b097      	sub	sp, #92	; 0x5c
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
 (void)		syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
 (void)		timerNext_us;
#endif

CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (PDO->valid && NMTisOperational
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8124 	beq.w	8003818 <CO_RPDO_process+0x264>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8120 	beq.w	8003818 <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 80035d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <CO_RPDO_process+0x36>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 8117 	bne.w	8003818 <CO_RPDO_process+0x264>
#endif
       ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80035f0:	2b0a      	cmp	r3, #10
 80035f2:	d927      	bls.n	8003644 <CO_RPDO_process+0x90>
        	{
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80035fa:	2b0b      	cmp	r3, #11
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d102      	bne.n	8003616 <CO_RPDO_process+0x62>
 8003610:	f248 2310 	movw	r3, #33296	; 0x8210
 8003614:	e001      	b.n	800361a <CO_RPDO_process+0x66>
 8003616:	f248 2320 	movw	r3, #33312	; 0x8220
 800361a:	857b      	strh	r3, [r7, #42]	; 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	7b1b      	ldrb	r3, [r3, #12]
 8003624:	461a      	mov	r2, r3
 8003626:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	2204      	movs	r2, #4
 800362c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800362e:	f7fe f830 	bl	8001692 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <CO_RPDO_process+0x88>
 8003638:	2201      	movs	r2, #1
 800363a:	e000      	b.n	800363e <CO_RPDO_process+0x8a>
 800363c:	2200      	movs	r2, #0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        	}

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) { bufNo = 1; }
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <CO_RPDO_process+0xbc>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <CO_RPDO_process+0xbc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <CO_RPDO_process+0xbc>
 800366a:	2301      	movs	r3, #1
 800366c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8003670:	2300      	movs	r3, #0
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003674:	e07d      	b.n	8003772 <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 8003676:	2301      	movs	r3, #1
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 800367a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800367e:	332e      	adds	r3, #46	; 0x2e
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	647b      	str	r3, [r7, #68]	; 0x44
            OD_size_t verifyLength = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	643b      	str	r3, [r7, #64]	; 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 800368c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	325a      	adds	r2, #90	; 0x5a
 8003694:	2100      	movs	r1, #0
 8003696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800369a:	2300      	movs	r3, #0
 800369c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80036a0:	e04a      	b.n	8003738 <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80036a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	3310      	adds	r3, #16
 80036aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ac:	4413      	add	r3, r2
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	330c      	adds	r3, #12
 80036b4:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 80036bc:	7ffb      	ldrb	r3, [r7, #31]
 80036be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036c0:	4413      	add	r3, r2
 80036c2:	643b      	str	r3, [r7, #64]	; 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 80036c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d83d      	bhi.n	8003746 <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d901      	bls.n	80036da <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 80036d6:	2308      	movs	r3, #8
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036de:	429a      	cmp	r2, r3
 80036e0:	d911      	bls.n	8003706 <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	2208      	movs	r2, #8
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f01b fdba 	bl	801f264 <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 80036f0:	7ffa      	ldrb	r2, [r7, #31]
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036f8:	4618      	mov	r0, r3
 80036fa:	f01b fe4f 	bl	801f39c <memcpy>
                    dataOD = buf;
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	e001      	b.n	800370a <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 8003706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	69dc      	ldr	r4, [r3, #28]
 8003714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003716:	f107 0310 	add.w	r3, r7, #16
 800371a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800371c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800371e:	47a0      	blx	r4
                *dataOffset = mappedLength;
 8003720:	7ffa      	ldrb	r2, [r7, #31]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800372a:	4413      	add	r3, r2
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800372e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003732:	3301      	adds	r3, #1
 8003734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	7b5b      	ldrb	r3, [r3, #13]
 800373c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003740:	429a      	cmp	r2, r3
 8003742:	d3ae      	bcc.n	80036a2 <CO_RPDO_process+0xee>
 8003744:	e000      	b.n	8003748 <CO_RPDO_process+0x194>
                    break;
 8003746:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8003748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374a:	2b08      	cmp	r3, #8
 800374c:	d805      	bhi.n	800375a <CO_RPDO_process+0x1a6>
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	7b1b      	ldrb	r3, [r3, #12]
 8003752:	461a      	mov	r2, r3
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	4293      	cmp	r3, r2
 8003758:	d00b      	beq.n	8003772 <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800376a:	222c      	movs	r2, #44	; 0x2c
 800376c:	2101      	movs	r1, #1
 800376e:	f7fd ff90 	bl	8001692 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003772:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	325a      	adds	r2, #90	; 0x5a
 800377a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f47f af79 	bne.w	8003676 <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d058      	beq.n	8003840 <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d90a      	bls.n	80037ba <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	2217      	movs	r2, #23
 80037b4:	2100      	movs	r1, #0
 80037b6:	f7fd ff6c 	bl	8001692 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
       ) {
 80037c2:	e03d      	b.n	8003840 <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d038      	beq.n	8003840 <CO_RPDO_process+0x28c>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d230      	bcs.n	8003840 <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d920      	bls.n	8003840 <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f248 2350 	movw	r3, #33360	; 0x8250
 800380e:	2217      	movs	r2, #23
 8003810:	2101      	movs	r1, #1
 8003812:	f7fd ff3e 	bl	8001692 <CO_error>
       ) {
 8003816:	e013      	b.n	8003840 <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <CO_RPDO_process+0x272>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 800383e:	e000      	b.n	8003842 <CO_RPDO_process+0x28e>
       ) {
 8003840:	bf00      	nop
}
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	; 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
	...

0800384c <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b093      	sub	sp, #76	; 0x4c
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <OD_write_18xx+0x26>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <OD_write_18xx+0x26>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <OD_write_18xx+0x26>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d901      	bls.n	8003876 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003872:	2309      	movs	r3, #9
 8003874:	e136      	b.n	8003ae4 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4618      	mov	r0, r3
 800388a:	f01b fd87 	bl	801f39c <memcpy>

    switch (stream->subIndex) {
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	7d1b      	ldrb	r3, [r3, #20]
 8003892:	3b01      	subs	r3, #1
 8003894:	2b05      	cmp	r3, #5
 8003896:	f200 811a 	bhi.w	8003ace <OD_write_18xx+0x282>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <OD_write_18xx+0x54>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080039ef 	.word	0x080039ef
 80038a8:	08003a51 	.word	0x08003a51
 80038ac:	08003acf 	.word	0x08003acf
 80038b0:	08003a7f 	.word	0x08003a7f
 80038b4:	08003aa3 	.word	0x08003aa3
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 80038b8:	68b8      	ldr	r0, [r7, #8]
 80038ba:	f7ff f8af 	bl	8002a1c <CO_getUint32>
 80038be:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	0fdb      	lsrs	r3, r3, #31
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	4b85      	ldr	r3, [pc, #532]	; (8003aec <OD_write_18xx+0x2a0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d13d      	bne.n	800395a <OD_write_18xx+0x10e>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <OD_write_18xx+0xac>
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <OD_write_18xx+0xac>
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80038f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d130      	bne.n	800395a <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d026      	beq.n	800394c <OD_write_18xx+0x100>
 80038fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003900:	2b7f      	cmp	r3, #127	; 0x7f
 8003902:	d92a      	bls.n	800395a <OD_write_18xx+0x10e>
 8003904:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d903      	bls.n	8003914 <OD_write_18xx+0xc8>
 800390c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800390e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003912:	d922      	bls.n	800395a <OD_write_18xx+0x10e>
 8003914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003916:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800391a:	d903      	bls.n	8003924 <OD_write_18xx+0xd8>
 800391c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800391e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003922:	d31a      	bcc.n	800395a <OD_write_18xx+0x10e>
 8003924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003926:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800392a:	d903      	bls.n	8003934 <OD_write_18xx+0xe8>
 800392c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800392e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003932:	d312      	bcc.n	800395a <OD_write_18xx+0x10e>
 8003934:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003936:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800393a:	d303      	bcc.n	8003944 <OD_write_18xx+0xf8>
 800393c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800393e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003942:	d30a      	bcc.n	800395a <OD_write_18xx+0x10e>
 8003944:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003946:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800394a:	d806      	bhi.n	800395a <OD_write_18xx+0x10e>
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <OD_write_18xx+0x112>
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	7b5b      	ldrb	r3, [r3, #13]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 800395a:	230f      	movs	r3, #15
 800395c:	e0c2      	b.n	8003ae4 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	429a      	cmp	r2, r3
 8003966:	d106      	bne.n	8003976 <OD_write_18xx+0x12a>
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800396e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003970:	429a      	cmp	r2, r3
 8003972:	f000 80ae 	beq.w	8003ad2 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800397c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800397e:	429a      	cmp	r2, r3
 8003980:	d108      	bne.n	8003994 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff f852 	bl	8002a38 <CO_setUint32>
                }
                if (!valid) {
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <OD_write_18xx+0x152>
                    CAN_ID = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	87fb      	strh	r3, [r7, #62]	; 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	6858      	ldr	r0, [r3, #4]
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 80039ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ae:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 80039b2:	2af0      	cmp	r2, #240	; 0xf0
 80039b4:	bf94      	ite	ls
 80039b6:	2201      	movls	r2, #1
 80039b8:	2200      	movhi	r2, #0
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	4614      	mov	r4, r2
 80039be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80039c0:	9401      	str	r4, [sp, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	f00e fffd 	bl	80129c4 <CO_CANtxBufferInit>
 80039ca:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 80039d2:	2309      	movs	r3, #9
 80039d4:	e086      	b.n	8003ae4 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                PDO->valid = valid;
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80039e8:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            }
            break;
 80039ec:	e071      	b.n	8003ad2 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f7fe fff7 	bl	80029e2 <CO_getUint8>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039fe:	2bf0      	cmp	r3, #240	; 0xf0
 8003a00:	d905      	bls.n	8003a0e <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8003a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a06:	2bfd      	cmp	r3, #253	; 0xfd
 8003a08:	d801      	bhi.n	8003a0e <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 8003a0a:	230f      	movs	r3, #15
 8003a0c:	e06a      	b.n	8003ae4 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8003a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a12:	2bf0      	cmp	r3, #240	; 0xf0
 8003a14:	bf94      	ite	ls
 8003a16:	2301      	movls	r3, #1
 8003a18:	2300      	movhi	r3, #0
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003a22:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a32:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
            TPDO->sendRequest = true;
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            TPDO->eventTimer = 0;
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
            break;
 8003a4e:	e041      	b.n	8003ad4 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8003a58:	230f      	movs	r3, #15
 8003a5a:	e043      	b.n	8003ae4 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f7fe ffce 	bl	80029fe <CO_getUint16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	2264      	movs	r2, #100	; 0x64
 8003a6a:	fb03 f202 	mul.w	r2, r3, r2
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            TPDO->inhibitTimer = 0;
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            break;
 8003a7c:	e02a      	b.n	8003ad4 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f7fe ffbd 	bl	80029fe <CO_getUint16>
 8003a84:	4603      	mov	r3, r0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            TPDO->eventTimer = 0;
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8003aa0:	e018      	b.n	8003ad4 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f7fe ff9d 	bl	80029e2 <CO_getUint8>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <OD_write_18xx+0x272>
 8003ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aba:	2bf0      	cmp	r3, #240	; 0xf0
 8003abc:	d901      	bls.n	8003ac2 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 8003abe:	230f      	movs	r3, #15
 8003ac0:	e010      	b.n	8003ae4 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003ac8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            break;
 8003acc:	e002      	b.n	8003ad4 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <OD_write_18xx+0x288>
            break;
 8003ad2:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003ad4:	f107 0114 	add.w	r1, r7, #20
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7fe fcc8 	bl	8002472 <OD_writeOriginal>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3744      	adds	r7, #68	; 0x44
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	3ffff800 	.word	0x3ffff800

08003af0 <CO_TPDO_init>:
				OD_entry_t* OD_18xx_TPDOCommPar,
				OD_entry_t* OD_1Axx_TPDOMapPar,
				CO_CANmodule_t* CANdevTx,
				uint16_t 	CANdevTxIdx,
				uint32_t* 	errInfo  )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	; 0x38
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <CO_TPDO_init+0x36>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <CO_TPDO_init+0x36>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <CO_TPDO_init+0x36>
 8003b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <CO_TPDO_init+0x36>
 8003b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) 	{
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <CO_TPDO_init+0x3c>
        						return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e144      	b.n	8003db6 <CO_TPDO_init+0x2c6>
    							}

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003b2c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003b30:	2100      	movs	r1, #0
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f01b fb96 	bl	801f264 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b42:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping (PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5a:	f7ff f8d9 	bl	8002d10 <PDO_initMapping>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (ret != CO_ERROR_NO) { return ret;}
 8003b64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <CO_TPDO_init+0x82>
 8003b6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003b70:	e121      	b.n	8003db6 <CO_TPDO_init+0x2c6>



    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003b72:	23fe      	movs	r3, #254	; 0xfe
 8003b74:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8003b76:	f107 021b 	add.w	r2, r7, #27
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b80:	f7fe ff8e 	bl	8002aa0 <OD_get_u8>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK)
 8003b8a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <CO_TPDO_init+0xc0>
    {
        if (errInfo != NULL)
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <CO_TPDO_init+0xba>
        {
         *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8003b98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b9a:	f7fe ff5c 	bl	8002a56 <OD_getIndex>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003baa:	f06f 030b 	mvn.w	r3, #11
 8003bae:	e102      	b.n	8003db6 <CO_TPDO_init+0x2c6>
    }

    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8003bb0:	7efb      	ldrb	r3, [r7, #27]
 8003bb2:	2bfd      	cmp	r3, #253	; 0xfd
 8003bb4:	d804      	bhi.n	8003bc0 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8003bb6:	7efb      	ldrb	r3, [r7, #27]
 8003bb8:	2bf0      	cmp	r3, #240	; 0xf0
 8003bba:	d901      	bls.n	8003bc0 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003bbc:	23fe      	movs	r3, #254	; 0xfe
 8003bbe:	76fb      	strb	r3, [r7, #27]
      }
    TPDO->transmissionType = transmissionType;
 8003bc0:	7efa      	ldrb	r2, [r7, #27]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    TPDO->sendRequest = true;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
              odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003bd4:	f107 0214 	add.w	r2, r7, #20
 8003bd8:	2301      	movs	r3, #1
 8003bda:	2101      	movs	r1, #1
 8003bdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bde:	f7fe ff89 	bl	8002af4 <OD_get_u32>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK)
 8003be8:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <CO_TPDO_init+0x11e>
    {
        if (errInfo != NULL)
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <CO_TPDO_init+0x118>
        {
        *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8003bf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bf8:	f7fe ff2d 	bl	8002a56 <OD_getIndex>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c06:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003c08:	f06f 030b 	mvn.w	r3, #11
 8003c0c:	e0d3      	b.n	8003db6 <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	0fdb      	lsrs	r3, r3, #31
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00d      	beq.n	8003c44 <CO_TPDO_init+0x154>
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	7b5b      	ldrb	r3, [r3, #13]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <CO_TPDO_init+0x146>
 8003c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <CO_TPDO_init+0x154>
        valid = false;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8003c40:	2301      	movs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00e      	beq.n	8003c68 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <CO_TPDO_init+0x168>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	e000      	b.n	8003c5a <CO_TPDO_init+0x16a>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003c60:	221a      	movs	r2, #26
 8003c62:	2101      	movs	r1, #1
 8003c64:	f7fd fd15 	bl	8001692 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8003c72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <CO_TPDO_init+0x19a>
 8003c78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003c7a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003c7c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003c80:	400b      	ands	r3, r1
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d101      	bne.n	8003c8a <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8003c86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c88:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8003c94:	2af0      	cmp	r2, #240	; 0xf0
 8003c96:	bf94      	ite	ls
 8003c98:	2201      	movls	r2, #1
 8003c9a:	2200      	movhi	r2, #0
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003ca2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8003ca6:	9001      	str	r0, [sp, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003cae:	f00e fe89 	bl	80129c4 <CO_CANtxBufferInit>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    if (TPDO->CANtxBuff == NULL) {
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	e075      	b.n	8003db6 <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003cd8:	f107 0212 	add.w	r2, r7, #18
 8003cdc:	2301      	movs	r3, #1
 8003cde:	2103      	movs	r1, #3
 8003ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ce2:	f7fe fef2 	bl	8002aca <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003ce6:	f107 0210 	add.w	r2, r7, #16
 8003cea:	2301      	movs	r3, #1
 8003cec:	2105      	movs	r1, #5
 8003cee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cf0:	f7fe feeb 	bl	8002aca <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2364      	movs	r3, #100	; 0x64
 8003cfa:	fb03 f202 	mul.w	r2, r3, r2
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8003d04:	8a3b      	ldrh	r3, [r7, #16]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d0c:	fb03 f202 	mul.w	r2, r3, r2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8003d24:	2301      	movs	r3, #1
 8003d26:	2106      	movs	r1, #6
 8003d28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d2a:	f7fe feb9 	bl	8002aa0 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    TPDO->syncCounter = 255;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d54:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003d5c:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003d64:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <CO_TPDO_init+0x2d0>)
 8003d74:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <CO_TPDO_init+0x2d4>)
 8003d7c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <CO_TPDO_init+0x2d8>)
 8003d8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <CO_TPDO_init+0x2dc>)
 8003d94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003da2:	f7fe fe69 	bl	8002a78 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003dac:	4619      	mov	r1, r3
 8003dae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003db0:	f7fe fe62 	bl	8002a78 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3730      	adds	r7, #48	; 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08002f97 	.word	0x08002f97
 8003dc4:	0800384d 	.word	0x0800384d
 8003dc8:	080023c3 	.word	0x080023c3
 8003dcc:	08002e65 	.word	0x08002e65

08003dd0 <CO_TPDOsend>:
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO)
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b093      	sub	sp, #76	; 0x4c
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
CO_PDO_common_t* PDO 	= &TPDO->PDO_common;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t* 	dataTPDO 	= &TPDO->CANtxBuff->data[0];
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003de2:	3305      	adds	r3, #5
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
OD_size_t verifyLength 	= 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <CO_TPDOsend+0x2e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003dfa:	2bfd      	cmp	r3, #253	; 0xfd
 8003dfc:	d901      	bls.n	8003e02 <CO_TPDOsend+0x32>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <CO_TPDOsend+0x34>
 8003e02:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003e0c:	e066      	b.n	8003edc <CO_TPDOsend+0x10c>
    {
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8003e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	3310      	adds	r3, #16
 8003e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e18:	4413      	add	r3, r2
 8003e1a:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 8003e26:	7efb      	ldrb	r3, [r7, #27]
 8003e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2a:	4413      	add	r3, r2
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d85a      	bhi.n	8003eea <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d901      	bls.n	8003e44 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003e40:	2308      	movs	r3, #8
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003e44:	7efb      	ldrb	r3, [r7, #27]
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d90a      	bls.n	8003e62 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	2208      	movs	r2, #8
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f01b fa05 	bl	801f264 <memset>
            dataTPDOCopy = buf;
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e60:	e001      	b.n	8003e66 <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	699c      	ldr	r4, [r3, #24]
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e78:	69f8      	ldr	r0, [r7, #28]
 8003e7a:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003e7c:	7efa      	ldrb	r2, [r7, #27]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003e82:	7efb      	ldrb	r3, [r7, #27]
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d906      	bls.n	8003e98 <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8003e8a:	7efa      	ldrb	r2, [r7, #27]
 8003e8c:	f107 030c 	add.w	r3, r7, #12
 8003e90:	4619      	mov	r1, r3
 8003e92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e94:	f01b fa82 	bl	801f39c <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8003e98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	3244      	adds	r2, #68	; 0x44
 8003ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea4:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <CO_TPDOsend+0xfa>
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 8003eca:	7efb      	ldrb	r3, [r7, #27]
 8003ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ece:	4413      	add	r3, r2
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8003ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	7b5b      	ldrb	r3, [r3, #13]
 8003ee0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d392      	bcc.n	8003e0e <CO_TPDOsend+0x3e>
 8003ee8:	e000      	b.n	8003eec <CO_TPDOsend+0x11c>
            break;
 8003eea:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d805      	bhi.n	8003efe <CO_TPDOsend+0x12e>
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	7b1b      	ldrb	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8003f0e:	222c      	movs	r2, #44	; 0x2c
 8003f10:	2101      	movs	r1, #1
 8003f12:	f7fd fbbe 	bl	8001692 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8003f16:	f06f 030c 	mvn.w	r3, #12
 8003f1a:	e019      	b.n	8003f50 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f00e fdb5 	bl	8012ab8 <CO_CANsend>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3744      	adds	r7, #68	; 0x44
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd90      	pop	{r4, r7, pc}

08003f58 <CO_TPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t 		syncWas )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
(void)timerNext_us;
#endif
(void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80dc 	beq.w	800412c <CO_TPDO_process+0x1d4>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80d8 	beq.w	800412c <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003f8c:	2bfd      	cmp	r3, #253	; 0xfd
 8003f8e:	d946      	bls.n	800401e <CO_TPDO_process+0xc6>
        {
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <CO_TPDO_process+0x74>
            {
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d205      	bcs.n	8003fb2 <CO_TPDO_process+0x5a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	e000      	b.n	8003fb4 <CO_TPDO_process+0x5c>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {TPDO->sendRequest = true;}
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <CO_TPDO_process+0x74>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d123      	bne.n	800401e <CO_TPDO_process+0xc6>
            {
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e01b      	b.n	8004014 <CO_TPDO_process+0xbc>
                {
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8003fdc:	7ffa      	ldrb	r2, [r7, #31]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	3244      	adds	r2, #68	; 0x44
 8003fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe6:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00f      	beq.n	800400e <CO_TPDO_process+0xb6>
                    {
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <CO_TPDO_process+0xb6>
                        	{TPDO->sendRequest = true; break;}
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800400c:	e007      	b.n	800401e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	3301      	adds	r3, #1
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	7b5b      	ldrb	r3, [r3, #13]
 8004018:	7ffa      	ldrb	r2, [r7, #31]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3de      	bcc.n	8003fdc <CO_TPDO_process+0x84>


#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8004024:	2bfd      	cmp	r3, #253	; 0xfd
 8004026:	d91d      	bls.n	8004064 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	d205      	bcs.n	8004040 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	e000      	b.n	8004042 <CO_TPDO_process+0xea>
 8004040:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) { (void)CO_TPDOsend(TPDO); }
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800404e:	2b00      	cmp	r3, #0
 8004050:	d07d      	beq.n	800414e <CO_TPDO_process+0x1f6>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8004058:	2b00      	cmp	r3, #0
 800405a:	d178      	bne.n	800414e <CO_TPDO_process+0x1f6>
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff feb7 	bl	8003dd0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8004062:	e074      	b.n	800414e <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06f      	beq.n	800414e <CO_TPDO_process+0x1f6>
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d06c      	beq.n	800414e <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8004084:	2b00      	cmp	r3, #0
 8004086:	d062      	beq.n	800414e <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fea1 	bl	8003dd0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800408e:	e05e      	b.n	800414e <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8004096:	2bff      	cmp	r3, #255	; 0xff
 8004098:	d119      	bne.n	80040ce <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80040a0:	7c5b      	ldrb	r3, [r3, #17]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <CO_TPDO_process+0x162>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	22fe      	movs	r2, #254	; 0xfe
 80040b4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80040b8:	e009      	b.n	80040ce <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80040d4:	2bfe      	cmp	r3, #254	; 0xfe
 80040d6:	d112      	bne.n	80040fe <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80040de:	7c9a      	ldrb	r2, [r3, #18]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d131      	bne.n	800414e <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff fe6a 	bl	8003dd0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80040fc:	e027      	b.n	800414e <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8004104:	3b01      	subs	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11a      	bne.n	800414e <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fe53 	bl	8003dd0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800412a:	e010      	b.n	800414e <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	22ff      	movs	r2, #255	; 0xff
 8004148:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 800414c:	e000      	b.n	8004150 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800414e:	bf00      	nop
}
 8004150:	bf00      	nop
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004164:	73fb      	strb	r3, [r7, #15]
    return value;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004180:	60fb      	str	r3, [r7, #12]
    return value;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <OD_getIndex>:
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <OD_getIndex+0x14>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	e000      	b.n	80041a6 <OD_getIndex+0x16>
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <OD_extension_init>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <OD_extension_init+0x14>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e003      	b.n	80041ce <OD_extension_init+0x1c>
    entry->extension = extension;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	460b      	mov	r3, r1
 80041e8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80041ea:	7af9      	ldrb	r1, [r7, #11]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2301      	movs	r3, #1
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7fe fb37 	bl	8002868 <OD_get_value>
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004214:	7af9      	ldrb	r1, [r7, #11]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2304      	movs	r3, #4
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7fe fb22 	bl	8002868 <OD_get_value>
 8004224:	4603      	mov	r3, r0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <CO_fifo_reset>:
 * Reset fifo object, make it empty
 *
 * @param fifo This object
 */
static inline void
CO_fifo_reset(CO_fifo_t* fifo) {
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <CO_fifo_reset+0x22>
        fifo->readPtr = 0;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_DATATYPES) != 0
        fifo->started = false;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	615a      	str	r2, [r3, #20]
#endif
    }

    return;
 800424e:	bf00      	nop
 8004250:	bf00      	nop
}
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <CO_fifo_getSpace>:
 * @param fifo This object
 *
 * @return number of available bytes
 */
static inline size_t
CO_fifo_getSpace(CO_fifo_t* fifo) {
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    int sizeLeft = (int)fifo->readPtr - (int)fifo->writePtr - 1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
    if (sizeLeft < 0) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da05      	bge.n	8004286 <CO_fifo_getSpace+0x2a>
        sizeLeft += (int)fifo->bufSize;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
    }

    return (size_t)sizeLeft;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <CO_fifo_getOccupied>:
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da05      	bge.n	80042bc <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	461a      	mov	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    }

    return (size_t)sizeOccupied;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <CO_fifo_altGetOccupied>:
 *
 * @return number of occupied bytes.
 */
static inline size_t
CO_fifo_altGetOccupied(CO_fifo_t* fifo)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)(fifo->writePtr) - (int)(fifo->altReadPtr);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	461a      	mov	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	60fb      	str	r3, [r7, #12]
		if (sizeOccupied < 0)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da05      	bge.n	80042f2 <CO_fifo_altGetOccupied+0x28>
		{
		 sizeOccupied += (int)(fifo->bufSize);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
		}

    return (size_t)sizeOccupied;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <CO_SDOclient_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDOclient_receive(void* object, void* msg)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)object;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	623b      	str	r3, [r7, #32]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	791b      	ldrb	r3, [r3, #4]
 8004312:	77fb      	strb	r3, [r7, #31]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3305      	adds	r3, #5
 8004318:	61bb      	str	r3, [r7, #24]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if ((SDO_C->state != CO_SDO_ST_IDLE) && (DLC == 8U) && (!CO_FLAG_READ(SDO_C->CANrxNew) || (data[0] == 0x80U)))
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80c7 	beq.w	80044b6 <CO_SDOclient_receive+0x1b6>
 8004328:	7ffb      	ldrb	r3, [r7, #31]
 800432a:	2b08      	cmp	r3, #8
 800432c:	f040 80c3 	bne.w	80044b6 <CO_SDOclient_receive+0x1b6>
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <CO_SDOclient_receive+0x44>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	f040 80b9 	bne.w	80044b6 <CO_SDOclient_receive+0x1b6>
    {
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        bool_t state_not_upload_blk_sublock_sreq = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	617b      	str	r3, [r7, #20]
        bool_t state_not_upload_blk_sublock_crsp = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b65      	cmp	r3, #101	; 0x65
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	613b      	str	r3, [r7, #16]
        if ((data[0] == 0x80U) /* abort from server */
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d005      	beq.n	8004380 <CO_SDOclient_receive+0x80>
            || (state_not_upload_blk_sublock_sreq && state_not_upload_blk_sublock_crsp))
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <CO_SDOclient_receive+0xb6>
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01a      	beq.n	80043b6 <CO_SDOclient_receive+0xb6>
        	{
#endif
            /* copy data and set 'new message' flag */
            (void)memcpy((void*)&SDO_C->CANrxData[0], (const void*)&data[0], 8);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8004386:	2208      	movs	r2, #8
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	4618      	mov	r0, r3
 800438c:	f01b f806 	bl	801f39c <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2201      	movs	r2, #1
 8004394:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
            /* Optional signal to RTOS, which can resume task, which handles
             * SDO client processing. */
            if (SDO_C->pFunctSignal != NULL)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8089 	beq.w	80044b6 <CO_SDOclient_receive+0x1b6>
            	{
                SDO_C->pFunctSignal(SDO_C->functSignalObject);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	f8d2 2490 	ldr.w	r2, [r2, #1168]	; 0x490
 80043b0:	4610      	mov	r0, r2
 80043b2:	4798      	blx	r3
            if (SDO_C->pFunctSignal != NULL)
 80043b4:	e07f      	b.n	80044b6 <CO_SDOclient_receive+0x1b6>
            	}
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0

        } else if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b64      	cmp	r3, #100	; 0x64
 80043c0:	d179      	bne.n	80044b6 <CO_SDOclient_receive+0x1b6>
            /* block upload, copy data directly */
            CO_SDO_state_t state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80043c2:	2364      	movs	r3, #100	; 0x64
 80043c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uint8_t seqno = data[0] & 0x7FU;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d0:	73fb      	strb	r3, [r7, #15]
            SDO_C->timeoutTimer = 0;
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2200      	movs	r2, #0
 80043d6:	675a      	str	r2, [r3, #116]	; 0x74
            SDO_C->block_timeoutTimer = 0;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

            /* verify if sequence number is correct */
            if ((seqno <= SDO_C->block_blksize) && (seqno == (SDO_C->block_seqno + 1U))) {
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d839      	bhi.n	8004460 <CO_SDOclient_receive+0x160>
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 80043f4:	3301      	adds	r3, #1
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d132      	bne.n	8004460 <CO_SDOclient_receive+0x160>
                SDO_C->block_seqno = seqno;
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0

                /* is this the last segment? */
                if ((data[0] & 0x80U) != 0U) {
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b25b      	sxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	da0f      	bge.n	800442c <CO_SDOclient_receive+0x12c>
                    /* copy data to temporary buffer, because we don't know the number of bytes not containing data */
                    (void)memcpy((void*)&SDO_C->block_dataUploadLast[0], (const void*)&data[1], 7);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f503 6095 	add.w	r0, r3, #1192	; 0x4a8
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3301      	adds	r3, #1
 8004416:	2207      	movs	r2, #7
 8004418:	4619      	mov	r1, r3
 800441a:	f01a ffbf 	bl	801f39c <memcpy>
                    SDO_C->finished = true;
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2201      	movs	r2, #1
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
                    state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8004424:	2365      	movs	r3, #101	; 0x65
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ((data[0] & 0x80U) != 0U) {
 800442a:	e028      	b.n	800447e <CO_SDOclient_receive+0x17e>
                } else {
                    /* Copy data. There is always enough space in fifo buffer,
                     * because block_blksize was calculated before */
                    (void)CO_fifo_write(&SDO_C->bufFifo, &data[1], 7, &SDO_C->block_crc);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800443c:	2207      	movs	r2, #7
 800443e:	f005 fad3 	bl	80099e8 <CO_fifo_write>
                    SDO_C->sizeTran += 7U;
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004446:	1dda      	adds	r2, r3, #7
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	669a      	str	r2, [r3, #104]	; 0x68
                    /* all segments in sub-block has been transferred */
                    if (seqno == SDO_C->block_blksize) {
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	429a      	cmp	r2, r3
 8004456:	d112      	bne.n	800447e <CO_SDOclient_receive+0x17e>
                        state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8004458:	2365      	movs	r3, #101	; 0x65
 800445a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ((data[0] & 0x80U) != 0U) {
 800445e:	e00e      	b.n	800447e <CO_SDOclient_receive+0x17e>
                    }
                }
            }
            /* If message is duplicate or sequence didn't start yet, ignore it. Otherwise seqno is wrong,
             * so break sub-block. Data after last good seqno will be re-transmitted. */
            else if ((seqno != SDO_C->block_seqno) && (SDO_C->block_seqno != 0U)) {
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	429a      	cmp	r2, r3
 800446a:	d009      	beq.n	8004480 <CO_SDOclient_receive+0x180>
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <CO_SDOclient_receive+0x180>
                state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8004476:	2365      	movs	r3, #101	; 0x65
 8004478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800447c:	e000      	b.n	8004480 <CO_SDOclient_receive+0x180>
                if ((data[0] & 0x80U) != 0U) {
 800447e:	bf00      	nop
                CO_DEBUG_SDO_CLIENT(msg);
#endif
            }

            /* Is exit from sub-block receive state? */
            if (state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d016      	beq.n	80044b6 <CO_SDOclient_receive+0x1b6>
                /* Processing will continue in another thread, so make memory
                 * barrier here with CO_FLAG_CLEAR() call. */
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                SDO_C->state = state;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004496:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
                /* Optional signal to RTOS, which can resume task, which handles SDO client processing. */
                if (SDO_C->pFunctSignal != NULL) {
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <CO_SDOclient_receive+0x1b6>
                    SDO_C->pFunctSignal(SDO_C->functSignalObject);
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	f8d2 2490 	ldr.w	r2, [r2, #1168]	; 0x490
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
        } else { /* MISRA C 2004 14.10 */
        }

#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 80044b4:	e7ff      	b.n	80044b6 <CO_SDOclient_receive+0x1b6>
 80044b6:	bf00      	nop
 80044b8:	3728      	adds	r7, #40	; 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <OD_write_1280>:
 * Custom function for writing OD object _SDO client parameter_
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1280(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <OD_write_1280+0x20>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <OD_write_1280+0x20>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <OD_write_1280+0x24>
        return ODR_DEV_INCOMPAT;
 80044e0:	2309      	movs	r3, #9
 80044e2:	e0e4      	b.n	80046ae <OD_write_1280+0x1ee>
    }

    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)stream->object;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	7d1b      	ldrb	r3, [r3, #20]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	f200 80d4 	bhi.w	800469c <OD_write_1280+0x1dc>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <OD_write_1280+0x3c>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004511 	.word	0x08004511
 8004504:	080045c5 	.word	0x080045c5
 8004508:	08004679 	.word	0x08004679
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 800450c:	2304      	movs	r3, #4
 800450e:	e0ce      	b.n	80046ae <OD_write_1280+0x1ee>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f7ff fe2f 	bl	8004174 <CO_getUint32>
 8004516:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004520:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO_C->COB_IDClientToServer & 0x7FFU);
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	b29b      	uxth	r3, r3
 8004528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800452c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	43db      	mvns	r3, r3
 8004532:	0fdb      	lsrs	r3, r3, #31
 8004534:	b2db      	uxtb	r3, r3
 8004536:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && SDO_C->valid && (CAN_ID != CAN_ID_cur))
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <OD_write_1280+0x1f8>)
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d134      	bne.n	80045ac <OD_write_1280+0xec>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <OD_write_1280+0x98>
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <OD_write_1280+0x98>
 8004550:	8afa      	ldrh	r2, [r7, #22]
 8004552:	8abb      	ldrh	r3, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	d129      	bne.n	80045ac <OD_write_1280+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d028      	beq.n	80045b0 <OD_write_1280+0xf0>
 800455e:	8afb      	ldrh	r3, [r7, #22]
 8004560:	2b7f      	cmp	r3, #127	; 0x7f
 8004562:	d923      	bls.n	80045ac <OD_write_1280+0xec>
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d903      	bls.n	8004574 <OD_write_1280+0xb4>
 800456c:	8afb      	ldrh	r3, [r7, #22]
 800456e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004572:	d91b      	bls.n	80045ac <OD_write_1280+0xec>
 8004574:	8afb      	ldrh	r3, [r7, #22]
 8004576:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800457a:	d903      	bls.n	8004584 <OD_write_1280+0xc4>
 800457c:	8afb      	ldrh	r3, [r7, #22]
 800457e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004582:	d313      	bcc.n	80045ac <OD_write_1280+0xec>
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800458a:	d903      	bls.n	8004594 <OD_write_1280+0xd4>
 800458c:	8afb      	ldrh	r3, [r7, #22]
 800458e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004592:	d30b      	bcc.n	80045ac <OD_write_1280+0xec>
 8004594:	8afb      	ldrh	r3, [r7, #22]
 8004596:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800459a:	d303      	bcc.n	80045a4 <OD_write_1280+0xe4>
 800459c:	8afb      	ldrh	r3, [r7, #22]
 800459e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a2:	d303      	bcc.n	80045ac <OD_write_1280+0xec>
 80045a4:	8afb      	ldrh	r3, [r7, #22]
 80045a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045aa:	d901      	bls.n	80045b0 <OD_write_1280+0xf0>
                return ODR_INVALID_VALUE;
 80045ac:	230f      	movs	r3, #15
 80045ae:	e07e      	b.n	80046ae <OD_write_1280+0x1ee>
            }
            (void)CO_SDOclient_setup(SDO_C, COB_ID, SDO_C->COB_IDServerToClient, SDO_C->nodeIDOfTheSDOServer);
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045be:	f000 f95b 	bl	8004878 <CO_SDOclient_setup>
            break;
 80045c2:	e06d      	b.n	80046a0 <OD_write_1280+0x1e0>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f7ff fdd5 	bl	8004174 <CO_getUint32>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d4:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO_C->COB_IDServerToClient & 0x7FFU);
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e0:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	43db      	mvns	r3, r3
 80045e6:	0fdb      	lsrs	r3, r3, #31
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && SDO_C->valid && (CAN_ID != CAN_ID_cur))
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <OD_write_1280+0x1f8>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d134      	bne.n	8004660 <OD_write_1280+0x1a0>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <OD_write_1280+0x14c>
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <OD_write_1280+0x14c>
 8004604:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004606:	8c3b      	ldrh	r3, [r7, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d129      	bne.n	8004660 <OD_write_1280+0x1a0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d028      	beq.n	8004664 <OD_write_1280+0x1a4>
 8004612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004614:	2b7f      	cmp	r3, #127	; 0x7f
 8004616:	d923      	bls.n	8004660 <OD_write_1280+0x1a0>
 8004618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d903      	bls.n	8004628 <OD_write_1280+0x168>
 8004620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004622:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004626:	d91b      	bls.n	8004660 <OD_write_1280+0x1a0>
 8004628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800462a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800462e:	d903      	bls.n	8004638 <OD_write_1280+0x178>
 8004630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004632:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004636:	d313      	bcc.n	8004660 <OD_write_1280+0x1a0>
 8004638:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800463a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800463e:	d903      	bls.n	8004648 <OD_write_1280+0x188>
 8004640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004642:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004646:	d30b      	bcc.n	8004660 <OD_write_1280+0x1a0>
 8004648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800464a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800464e:	d303      	bcc.n	8004658 <OD_write_1280+0x198>
 8004650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004652:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004656:	d303      	bcc.n	8004660 <OD_write_1280+0x1a0>
 8004658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800465a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800465e:	d901      	bls.n	8004664 <OD_write_1280+0x1a4>
                return ODR_INVALID_VALUE;
 8004660:	230f      	movs	r3, #15
 8004662:	e024      	b.n	80046ae <OD_write_1280+0x1ee>
            }
            (void)CO_SDOclient_setup(SDO_C, SDO_C->COB_IDClientToServer, COB_ID, SDO_C->nodeIDOfTheSDOServer);
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004672:	f000 f901 	bl	8004878 <CO_SDOclient_setup>
            break;
 8004676:	e013      	b.n	80046a0 <OD_write_1280+0x1e0>
        }

        case 3: { /* Node-ID of the SDO server */
            uint8_t nodeId = CO_getUint8(buf);
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	f7ff fd6d 	bl	8004158 <CO_getUint8>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId > 127U) {
 8004684:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004688:	2b00      	cmp	r3, #0
 800468a:	da01      	bge.n	8004690 <OD_write_1280+0x1d0>
                return ODR_INVALID_VALUE;
 800468c:	230f      	movs	r3, #15
 800468e:	e00e      	b.n	80046ae <OD_write_1280+0x1ee>
            }
            SDO_C->nodeIDOfTheSDOServer = nodeId;
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004696:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            break;
 800469a:	e001      	b.n	80046a0 <OD_write_1280+0x1e0>
        }

        default: return ODR_SUB_NOT_EXIST; break;
 800469c:	230e      	movs	r3, #14
 800469e:	e006      	b.n	80046ae <OD_write_1280+0x1ee>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7fd fee3 	bl	8002472 <OD_writeOriginal>
 80046ac:	4603      	mov	r3, r0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	; 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	3ffff800 	.word	0x3ffff800

080046bc <CO_SDOclient_init>:
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOclient_init(CO_SDOclient_t* SDO_C, OD_t* OD, OD_entry_t* OD_1280_SDOcliPar, uint8_t nodeId,
                  CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
                  uint32_t* errInfo) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	70fb      	strb	r3, [r7, #3]
    bool_t index_SDOcliPar_min = (OD_getIndex(OD_1280_SDOcliPar) < (uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM));
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fd60 	bl	8004190 <OD_getIndex>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	f241 237f 	movw	r3, #4735	; 0x127f
 80046d8:	429a      	cmp	r2, r3
 80046da:	bf94      	ite	ls
 80046dc:	2301      	movls	r3, #1
 80046de:	2300      	movhi	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    bool_t index_SDOcliPar_max = (OD_getIndex(OD_1280_SDOcliPar) > ((uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM) + 0x7FU));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fd53 	bl	8004190 <OD_getIndex>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	f241 23ff 	movw	r3, #4863	; 0x12ff
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf8c      	ite	hi
 80046f6:	2301      	movhi	r3, #1
 80046f8:	2300      	movls	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	623b      	str	r3, [r7, #32]

    /* verify arguments */
    if ((SDO_C == NULL) || (OD_1280_SDOcliPar == NULL) || index_SDOcliPar_min || index_SDOcliPar_max
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00e      	beq.n	8004722 <CO_SDOclient_init+0x66>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <CO_SDOclient_init+0x66>
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <CO_SDOclient_init+0x66>
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <CO_SDOclient_init+0x66>
        || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <CO_SDOclient_init+0x66>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <CO_SDOclient_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	e09f      	b.n	8004868 <CO_SDOclient_init+0x1ac>
    }

    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    SDO_C->OD = OD;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	601a      	str	r2, [r3, #0]
    SDO_C->nodeId = nodeId;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	711a      	strb	r2, [r3, #4]
#endif
    SDO_C->CANdevRx = CANdevRx;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800473e:	859a      	strh	r2, [r3, #44]	; 0x2c
    SDO_C->CANdevTx = CANdevTx;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800474a:	869a      	strh	r2, [r3, #52]	; 0x34
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
    SDO_C->pFunctSignal = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
    SDO_C->functSignalObject = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf, CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3394      	adds	r3, #148	; 0x94
 8004766:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800476a:	4619      	mov	r1, r3
 800476c:	f005 f91a 	bl	80099a4 <CO_fifo_init>

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8004770:	f107 0219 	add.w	r2, r7, #25
 8004774:	2301      	movs	r3, #1
 8004776:	2100      	movs	r1, #0
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fd2e 	bl	80041da <OD_get_u8>
 800477e:	4603      	mov	r3, r0
 8004780:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8004782:	f107 0214 	add.w	r2, r7, #20
 8004786:	2301      	movs	r3, #1
 8004788:	2101      	movs	r1, #1
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fd3a 	bl	8004204 <OD_get_u32>
 8004790:	4603      	mov	r3, r0
 8004792:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8004794:	f107 0210 	add.w	r2, r7, #16
 8004798:	2301      	movs	r3, #1
 800479a:	2102      	movs	r1, #2
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fd31 	bl	8004204 <OD_get_u32>
 80047a2:	4603      	mov	r3, r0
 80047a4:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 80047a6:	f107 0218 	add.w	r2, r7, #24
 80047aa:	2301      	movs	r3, #1
 80047ac:	2103      	movs	r1, #3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fd13 	bl	80041da <OD_get_u8>
 80047b4:	4603      	mov	r3, r0
 80047b6:	773b      	strb	r3, [r7, #28]

    if ((odRet0 != ODR_OK) || (maxSubIndex != 3U) || (odRet1 != ODR_OK) || (odRet2 != ODR_OK) || (odRet3 != ODR_OK)) {
 80047b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10e      	bne.n	80047de <CO_SDOclient_init+0x122>
 80047c0:	7e7b      	ldrb	r3, [r7, #25]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d10b      	bne.n	80047de <CO_SDOclient_init+0x122>
 80047c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <CO_SDOclient_init+0x122>
 80047ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <CO_SDOclient_init+0x122>
 80047d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <CO_SDOclient_init+0x13c>
        if (errInfo != NULL) {
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <CO_SDOclient_init+0x136>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fcd3 	bl	8004190 <OD_getIndex>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80047f2:	f06f 030b 	mvn.w	r3, #11
 80047f6:	e037      	b.n	8004868 <CO_SDOclient_init+0x1ac>
    }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO_C->OD_1280_extension.object = SDO_C;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
    SDO_C->OD_1280_extension.read = OD_readOriginal;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <CO_SDOclient_init+0x1b4>)
 8004802:	649a      	str	r2, [r3, #72]	; 0x48
    SDO_C->OD_1280_extension.write = OD_write_1280;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <CO_SDOclient_init+0x1b8>)
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
    ODR_t odRetE = OD_extension_init(OD_1280_SDOcliPar, &SDO_C->OD_1280_extension);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3344      	adds	r3, #68	; 0x44
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fcce 	bl	80041b2 <OD_extension_init>
 8004816:	4603      	mov	r3, r0
 8004818:	76fb      	strb	r3, [r7, #27]
    if (odRetE != ODR_OK) {
 800481a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <CO_SDOclient_init+0x180>
        if (errInfo != NULL) {
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <CO_SDOclient_init+0x17a>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fcb1 	bl	8004190 <OD_getIndex>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004836:	f06f 030b 	mvn.w	r3, #11
 800483a:	e015      	b.n	8004868 <CO_SDOclient_init+0x1ac>
    }

    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c
    SDO_C->COB_IDServerToClient = 0;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C, COB_IDClientToServer, COB_IDServerToClient,
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	7e3b      	ldrb	r3, [r7, #24]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f812 	bl	8004878 <CO_SDOclient_setup>
 8004854:	4603      	mov	r3, r0
 8004856:	76bb      	strb	r3, [r7, #26]
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 8004858:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <CO_SDOclient_init+0x1aa>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	e000      	b.n	8004868 <CO_SDOclient_init+0x1ac>
    }

    return CO_ERROR_NO;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	080023c3 	.word	0x080023c3
 8004874:	080044c1 	.word	0x080044c1

08004878 <CO_SDOclient_setup>:
CO_SDOclient_setup (
					CO_SDOclient_t* SDO_C,
					uint32_t COB_IDClientToServer,
					uint32_t COB_IDServerToClient,
                    uint8_t nodeIDOfTheSDOServer)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af04      	add	r7, sp, #16
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {  return CO_SDO_RT_wrongArguments;}
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <CO_SDOclient_setup+0x1a>
 800488c:	f06f 0301 	mvn.w	r3, #1
 8004890:	e073      	b.n	800497a <CO_SDOclient_setup+0x102>


    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_OD_DYNAMIC)!=0

    /* proceed only, if parameters change */
    if (
    		(COB_IDClientToServer == SDO_C->COB_IDClientToServer)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if (
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d106      	bne.n	80048c2 <CO_SDOclient_setup+0x4a>
         && (COB_IDServerToClient == SDO_C->COB_IDServerToClient)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d101      	bne.n	80048c2 <CO_SDOclient_setup+0x4a>
	   ) {return CO_SDO_RT_ok_communicationEnd; }
 80048be:	2300      	movs	r3, #0
 80048c0:	e05b      	b.n	800497a <CO_SDOclient_setup+0x102>


    /* store variables */
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40

#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDClientToServer & 0x7FFU) : 0U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db05      	blt.n	80048e0 <CO_SDOclient_setup+0x68>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048dc:	b29b      	uxth	r3, r3
 80048de:	e000      	b.n	80048e2 <CO_SDOclient_setup+0x6a>
 80048e0:	2300      	movs	r3, #0
 80048e2:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDServerToClient & 0x7FFU) : 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	db05      	blt.n	80048f6 <CO_SDOclient_setup+0x7e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	e000      	b.n	80048f8 <CO_SDOclient_setup+0x80>
 80048f6:	2300      	movs	r3, #0
 80048f8:	82bb      	strh	r3, [r7, #20]
    if (
 80048fa:	8afb      	ldrh	r3, [r7, #22]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <CO_SDOclient_setup+0x96>
    		(CanIdC2S != 0U)
		 && (CanIdS2C != 0U)
 8004900:	8abb      	ldrh	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <CO_SDOclient_setup+0x96>
	   ) {SDO_C->valid = true;} else {
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	659a      	str	r2, [r3, #88]	; 0x58
 800490c:	e006      	b.n	800491c <CO_SDOclient_setup+0xa4>
		   	   	   	   	   	   	   	   CanIdC2S = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	82fb      	strh	r3, [r7, #22]
		   	   	   	   	   	   	   	   CanIdS2C = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	82bb      	strh	r3, [r7, #20]
		   	   	   	   	   	   	   	   SDO_C->valid = false;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	659a      	str	r2, [r3, #88]	; 0x58
	   	   	   	   	   	   	   	   	 }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(SDO_C->CANdevRx, SDO_C->CANdevRxIdx, CanIdS2C, 0x7FF, false, (void*)SDO_C,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8004924:	8aba      	ldrh	r2, [r7, #20]
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <CO_SDOclient_setup+0x10c>)
 8004928:	9302      	str	r3, [sp, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004936:	f00d ffe7 	bl	8012908 <CO_CANrxBufferInit>
 800493a:	4603      	mov	r3, r0
 800493c:	74fb      	strb	r3, [r7, #19]
                                              CO_SDOclient_receive);

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(SDO_C->CANdevTx, SDO_C->CANdevTxIdx, CanIdC2S, false, 8, false);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8004946:	8afa      	ldrh	r2, [r7, #22]
 8004948:	2300      	movs	r3, #0
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	2308      	movs	r3, #8
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2300      	movs	r3, #0
 8004952:	f00e f837 	bl	80129c4 <CO_CANtxBufferInit>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((ret != CO_ERROR_NO) || (SDO_C->CANtxBuff == NULL)) {
 800495c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <CO_SDOclient_setup+0xf4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <CO_SDOclient_setup+0x100>
        SDO_C->valid = false;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	659a      	str	r2, [r3, #88]	; 0x58
        return CO_SDO_RT_wrongArguments;
 8004972:	f06f 0301 	mvn.w	r3, #1
 8004976:	e000      	b.n	800497a <CO_SDOclient_setup+0x102>
    }

    return CO_SDO_RT_ok_communicationEnd;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	08004301 	.word	0x08004301

08004988 <CO_SDOclientDownloadInitiate>:
/******************************************************************************
 * DOWNLOAD                                                                   *
 ******************************************************************************/
CO_SDO_return_t
CO_SDOclientDownloadInitiate(CO_SDOclient_t* SDO_C, uint16_t index, uint8_t subIndex, size_t sizeIndicated,
                             uint16_t SDOtimeoutTime_ms, bool_t blockEnable) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	817b      	strh	r3, [r7, #10]
 8004996:	4613      	mov	r3, r2
 8004998:	727b      	strb	r3, [r7, #9]
    /* verify parameters */
    if ((SDO_C == NULL) || !SDO_C->valid) {
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <CO_SDOclientDownloadInitiate+0x20>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <CO_SDOclientDownloadInitiate+0x26>
        return CO_SDO_RT_wrongArguments;
 80049a8:	f06f 0301 	mvn.w	r3, #1
 80049ac:	e04d      	b.n	8004a4a <CO_SDOclientDownloadInitiate+0xc2>
    }

    /* save parameters */
    SDO_C->index 				= index;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	897a      	ldrh	r2, [r7, #10]
 80049b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    SDO_C->subIndex 			= subIndex;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	7a7a      	ldrb	r2, [r7, #9]
 80049ba:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO_C->sizeInd 				= sizeIndicated;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	665a      	str	r2, [r3, #100]	; 0x64
    SDO_C->sizeTran 			= 0;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	669a      	str	r2, [r3, #104]	; 0x68
    SDO_C->finished 			= false;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60
    SDO_C->SDOtimeoutTime_us 	= (uint32_t)SDOtimeoutTime_ms * 1000U;
 80049d0:	8b3b      	ldrh	r3, [r7, #24]
 80049d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d6:	fb03 f202 	mul.w	r2, r3, r2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	671a      	str	r2, [r3, #112]	; 0x70
    SDO_C->timeoutTimer 		= 0;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	675a      	str	r2, [r3, #116]	; 0x74
    CO_fifo_reset(&SDO_C->bufFifo);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3378      	adds	r3, #120	; 0x78
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fc20 	bl	800422e <CO_fifo_reset>

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* if node-ID of the SDO server is the same as node-ID of this node, then transfer data within this node */
    if ((SDO_C->OD != NULL) && (SDO_C->nodeId != 0U) && (SDO_C->nodeIDOfTheSDOServer == SDO_C->nodeId)) {
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <CO_SDOclientDownloadInitiate+0x94>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	791b      	ldrb	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <CO_SDOclientDownloadInitiate+0x94>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d107      	bne.n	8004a1c <CO_SDOclientDownloadInitiate+0x94>
        SDO_C->OD_IO.write = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
        SDO_C->state = CO_SDO_ST_DOWNLOAD_LOCAL_TRANSFER;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2210      	movs	r2, #16
 8004a16:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004a1a:	e011      	b.n	8004a40 <CO_SDOclientDownloadInitiate+0xb8>
    } else
#endif
#if (CO_CONFIG_SDO_CLI&&CO_CONFIG_SDO_CLI_BLOCK)!=0
        if (blockEnable && ((sizeIndicated == 0U) || (sizeIndicated > (size_t)(CO_CONFIG_SDO_CLI_PST)))) {
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <CO_SDOclientDownloadInitiate+0xb0>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <CO_SDOclientDownloadInitiate+0xa6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b15      	cmp	r3, #21
 8004a2c:	d904      	bls.n	8004a38 <CO_SDOclientDownloadInitiate+0xb0>
        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2251      	movs	r2, #81	; 0x51
 8004a32:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004a36:	e003      	b.n	8004a40 <CO_SDOclientDownloadInitiate+0xb8>
    } else
#endif
    {
        SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2211      	movs	r2, #17
 8004a3c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

    return CO_SDO_RT_ok_communicationEnd;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <CO_SDOclientDownloadInitSize>:



void
CO_SDOclientDownloadInitSize(CO_SDOclient_t* SDO_C, size_t sizeIndicated) {
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
    if (SDO_C != NULL) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d012      	beq.n	8004a88 <CO_SDOclientDownloadInitSize+0x36>
        SDO_C->sizeInd = sizeIndicated;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	665a      	str	r2, [r3, #100]	; 0x64
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        if ((SDO_C->state == CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ) && (sizeIndicated > 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b51      	cmp	r3, #81	; 0x51
 8004a72:	d109      	bne.n	8004a88 <CO_SDOclientDownloadInitSize+0x36>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <CO_SDOclientDownloadInitSize+0x36>
            && (sizeIndicated <= (size_t)(CO_CONFIG_SDO_CLI_PST))) {
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b15      	cmp	r3, #21
 8004a7e:	d803      	bhi.n	8004a88 <CO_SDOclientDownloadInitSize+0x36>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2211      	movs	r2, #17
 8004a84:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        }
#endif
    }
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <CO_SDOclientDownloadBufWrite>:

size_t
CO_SDOclientDownloadBufWrite(CO_SDOclient_t* SDO_C, const uint8_t* buf, size_t count) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
    if ((SDO_C != NULL) && (buf != NULL)) {
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <CO_SDOclientDownloadBufWrite+0x2e>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <CO_SDOclientDownloadBufWrite+0x2e>
        ret = CO_fifo_write(&SDO_C->bufFifo, buf, count, NULL);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	f004 ff94 	bl	80099e8 <CO_fifo_write>
 8004ac0:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <CO_SDOclientDownload>:

CO_SDO_return_t
CO_SDOclientDownload(CO_SDOclient_t* SDO_C, uint32_t timeDifference_us, bool_t send_abort, bool_t bufferPartial,
                     CO_SDO_abortCode_t* SDOabortCode, size_t* sizeTransferred, uint32_t* timerNext_us) {
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8004ad8:	f2a4 443c 	subw	r4, r4, #1084	; 0x43c
 8004adc:	6020      	str	r0, [r4, #0]
 8004ade:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 8004ae2:	f5a0 6088 	sub.w	r0, r0, #1088	; 0x440
 8004ae6:	6001      	str	r1, [r0, #0]
 8004ae8:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004aec:	f2a1 4144 	subw	r1, r1, #1092	; 0x444
 8004af0:	600a      	str	r2, [r1, #0]
 8004af2:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8004af6:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004afa:	6013      	str	r3, [r2, #0]
    (void)timerNext_us;
    (void)bufferPartial; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

    if ((SDO_C == NULL) || !SDO_C->valid) {
 8004b08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b0c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <CO_SDOclientDownload+0x5a>
 8004b16:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b1a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <CO_SDOclientDownload+0x6a>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004b26:	4b93      	ldr	r3, [pc, #588]	; (8004d74 <CO_SDOclientDownload+0x2a8>)
 8004b28:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ret = CO_SDO_RT_wrongArguments;
 8004b2c:	23fe      	movs	r3, #254	; 0xfe
 8004b2e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004b32:	f000 bda2 	b.w	800567a <CO_SDOclientDownload+0xbae>
    } else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8004b36:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b3a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <CO_SDOclientDownload+0x88>
        ret = CO_SDO_RT_ok_communicationEnd;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004b50:	f000 bd93 	b.w	800567a <CO_SDOclientDownload+0xbae>
    }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* Transfer data locally */
    else if ((SDO_C->state == CO_SDO_ST_DOWNLOAD_LOCAL_TRANSFER) && !send_abort) {
 8004b54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b58:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	f040 8246 	bne.w	8004ff6 <CO_SDOclientDownload+0x52a>
 8004b6a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b6e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 823e 	bne.w	8004ff6 <CO_SDOclientDownload+0x52a>
        /* search object dictionary in first pass */
        if (SDO_C->OD_IO.write == NULL)
 8004b7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d163      	bne.n	8004c52 <CO_SDOclientDownload+0x186>
        {
            ODR_t odRet;
            odRet = OD_getSub(OD_find(SDO_C->OD, SDO_C->index), SDO_C->subIndex, &SDO_C->OD_IO, false);
 8004b8a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b8e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b9a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fd fcec 	bl	8002584 <OD_find>
 8004bac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004bb0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 8004bba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004bbe:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f103 0208 	add.w	r2, r3, #8
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f7fd fd37 	bl	800263c <OD_getSub>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b

            if (odRet != ODR_OK) {
 8004bd4:	f997 343b 	ldrsb.w	r3, [r7, #1083]	; 0x43b
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <CO_SDOclientDownload+0x126>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004bdc:	f997 343b 	ldrsb.w	r3, [r7, #1083]	; 0x43b
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fe23 	bl	800282c <OD_getSDOabCode>
 8004be6:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004bea:	23f7      	movs	r3, #247	; 0xf7
 8004bec:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004bf0:	e02f      	b.n	8004c52 <CO_SDOclientDownload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8004bf2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004bf6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	7e1b      	ldrb	r3, [r3, #24]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <CO_SDOclientDownload+0x148>
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004c06:	4b5c      	ldr	r3, [pc, #368]	; (8004d78 <CO_SDOclientDownload+0x2ac>)
 8004c08:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004c0c:	23f7      	movs	r3, #247	; 0xf7
 8004c0e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004c12:	e01e      	b.n	8004c52 <CO_SDOclientDownload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U) {
 8004c14:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c18:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	7e1b      	ldrb	r3, [r3, #24]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <CO_SDOclientDownload+0x16a>
                abortCode = CO_SDO_AB_READONLY;
 8004c28:	4b54      	ldr	r3, [pc, #336]	; (8004d7c <CO_SDOclientDownload+0x2b0>)
 8004c2a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004c2e:	23f7      	movs	r3, #247	; 0xf7
 8004c30:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004c34:	e00d      	b.n	8004c52 <CO_SDOclientDownload+0x186>
            } else if (SDO_C->OD_IO.write == NULL) {
 8004c36:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c3a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <CO_SDOclientDownload+0x186>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004c46:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <CO_SDOclientDownload+0x2a8>)
 8004c48:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004c4c:	23f7      	movs	r3, #247	; 0xf7
 8004c4e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
            } else { /* MISRA C 2004 14.10 */
            }
        }

        /* write data, in several passes if necessary */
        if (SDO_C->OD_IO.write != NULL)
 8004c52:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c56:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 81b2 	beq.w	8004fc8 <CO_SDOclientDownload+0x4fc>
        {
            size_t count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8004c64:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c68:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3378      	adds	r3, #120	; 0x78
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fb0f 	bl	8004294 <CO_fifo_getOccupied>
 8004c76:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
            uint8_t buf[CO_CONFIG_SDO_CLI_BUFFER_SIZE + 2U];

            (void)CO_fifo_read(&SDO_C->bufFifo, buf, count, NULL);
 8004c7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004c88:	f107 0114 	add.w	r1, r7, #20
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8004c92:	f004 ff01 	bl	8009a98 <CO_fifo_read>
            SDO_C->sizeTran += count;
 8004c96:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c9a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ca2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004ca6:	441a      	add	r2, r3
 8004ca8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004cac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	669a      	str	r2, [r3, #104]	; 0x68

            /* error: no data */
            if ((count == 0U) || (count > CO_CONFIG_SDO_CLI_BUFFER_SIZE)) {
 8004cb4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <CO_SDOclientDownload+0x1fa>
 8004cbc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc4:	d906      	bls.n	8004cd4 <CO_SDOclientDownload+0x208>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <CO_SDOclientDownload+0x2a8>)
 8004cc8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004ccc:	23f7      	movs	r3, #247	; 0xf7
 8004cce:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004cd2:	e0fe      	b.n	8004ed2 <CO_SDOclientDownload+0x406>
            }
            /* verify if sizeTran is too large */
            else if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 8004cd4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004cd8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d023      	beq.n	8004d2c <CO_SDOclientDownload+0x260>
 8004ce4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ce8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cf0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004cf4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d915      	bls.n	8004d2c <CO_SDOclientDownload+0x260>
                SDO_C->sizeTran -= count;
 8004d00:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d04:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d0c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d16:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	669a      	str	r2, [r3, #104]	; 0x68
                abortCode = CO_SDO_AB_DATA_LONG;
 8004d1e:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <CO_SDOclientDownload+0x2b4>)
 8004d20:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004d24:	23f7      	movs	r3, #247	; 0xf7
 8004d26:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004d2a:	e0d2      	b.n	8004ed2 <CO_SDOclientDownload+0x406>
            }
            /* Verify sizeTran is too small in last segment of data */
            else if (!bufferPartial && (SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8004d2c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d30:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d126      	bne.n	8004d88 <CO_SDOclientDownload+0x2bc>
 8004d3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01e      	beq.n	8004d88 <CO_SDOclientDownload+0x2bc>
 8004d4a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d4e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d56:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d5a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d210      	bcs.n	8004d88 <CO_SDOclientDownload+0x2bc>
                abortCode = CO_SDO_AB_DATA_SHORT;
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <CO_SDOclientDownload+0x2b8>)
 8004d68:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8004d6c:	23f7      	movs	r3, #247	; 0xf7
 8004d6e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004d72:	e0ae      	b.n	8004ed2 <CO_SDOclientDownload+0x406>
 8004d74:	06040047 	.word	0x06040047
 8004d78:	06010000 	.word	0x06010000
 8004d7c:	06010002 	.word	0x06010002
 8004d80:	06070012 	.word	0x06070012
 8004d84:	06070013 	.word	0x06070013
            }
            /* is the last segment of data? */
            else if (!bufferPartial) {
 8004d88:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d8c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 809d 	bne.w	8004ed2 <CO_SDOclientDownload+0x406>
                if ((SDO_C->OD_IO.stream.attribute & ODA_MB) != 0) {reverseBytes(buf, count); }


#endif

                OD_size_t sizeInOd = SDO_C->OD_IO.stream.dataLength;
 8004d98:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d9c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434

                /* If dataType is string, then size of data downloaded may be shorter than size of
                 * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
                 * also OD data size, (temporary, send info about EOF into OD_IO.write) */
                if (
                	 (SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U
 8004da8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004dac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	b25b      	sxtb	r3, r3
                if (
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da5e      	bge.n	8004e78 <CO_SDOclientDownload+0x3ac>
                    &&
 8004dba:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <CO_SDOclientDownload+0x30a>
					 ((sizeInOd == 0U) || (SDO_C->sizeTran < sizeInOd))
 8004dc2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004dc6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dce:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d950      	bls.n	8004e78 <CO_SDOclientDownload+0x3ac>
					) {
                       buf[count] = 0;
 8004dd6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004dda:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8004dde:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004de2:	4413      	add	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
                       count++;
 8004de8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004dec:	3301      	adds	r3, #1
 8004dee:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
                       SDO_C->sizeTran++;
 8004df2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004df6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e04:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	669a      	str	r2, [r3, #104]	; 0x68
						if ( (sizeInOd == 0U) || (sizeInOd > SDO_C->sizeTran) )
 8004e0c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <CO_SDOclientDownload+0x35c>
 8004e14:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e18:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e20:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d91a      	bls.n	8004e5e <CO_SDOclientDownload+0x392>
							{
							buf[count] = 0;
 8004e28:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e2c:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8004e30:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004e34:	4413      	add	r3, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
							count++;
 8004e3a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
							SDO_C->sizeTran++;
 8004e44:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e48:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e56:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	669a      	str	r2, [r3, #104]	; 0x68
							}
						SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran;
 8004e5e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e62:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e6a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e6e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	611a      	str	r2, [r3, #16]
 8004e76:	e02c      	b.n	8004ed2 <CO_SDOclientDownload+0x406>
                      }


                		else if (sizeInOd == 0U) /* Indicate OD data size, if necessary. Used for EOF check. */
 8004e78:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <CO_SDOclientDownload+0x3ce>
                		{
                		SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran;
 8004e80:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e84:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e8c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e90:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]
 8004e98:	e01b      	b.n	8004ed2 <CO_SDOclientDownload+0x406>
                		}

                		else if (SDO_C->sizeTran != sizeInOd) /* Verify if size of data downloaded matches data size in OD. */
 8004e9a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004e9e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea6:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d011      	beq.n	8004ed2 <CO_SDOclientDownload+0x406>
                		{
                		abortCode = (SDO_C->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004eae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004eb2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eba:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d201      	bcs.n	8004ec6 <CO_SDOclientDownload+0x3fa>
 8004ec2:	4bc2      	ldr	r3, [pc, #776]	; (80051cc <CO_SDOclientDownload+0x700>)
 8004ec4:	e000      	b.n	8004ec8 <CO_SDOclientDownload+0x3fc>
 8004ec6:	4bc2      	ldr	r3, [pc, #776]	; (80051d0 <CO_SDOclientDownload+0x704>)
 8004ec8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                		ret = CO_SDO_RT_endedWithClientAbort;
 8004ecc:	23f7      	movs	r3, #247	; 0xf7
 8004ece:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                		} else { } /* MISRA C 2004 14.10 */

            } else { /* MISRA C 2004 14.10 */
            }

            if (abortCode == CO_SDO_AB_NONE) {
 8004ed2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d176      	bne.n	8004fc8 <CO_SDOclientDownload+0x4fc>
                OD_size_t countWritten = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

                /* write data to Object Dictionary */
                CO_LOCK_OD(SDO_C->CANdevTx);
 8004ee0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ee4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eec:	f3ef 8210 	mrs	r2, PRIMASK
 8004ef0:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
  return(result);
 8004ef4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004efa:	b672      	cpsid	i
}
 8004efc:	bf00      	nop
                ODR_t odRet = SDO_C->OD_IO.write(&SDO_C->OD_IO.stream, buf, (OD_size_t)count, &countWritten);
 8004efe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f02:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004f0a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f0e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f103 0008 	add.w	r0, r3, #8
 8004f18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f1c:	f107 0114 	add.w	r1, r7, #20
 8004f20:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8004f24:	47a0      	blx	r4
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
                CO_UNLOCK_OD(SDO_C->CANdevTx);
 8004f2c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f30:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	bf00      	nop

                /* verify for errors in write */
                if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8004f48:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <CO_SDOclientDownload+0x4a4>
 8004f50:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d00a      	beq.n	8004f70 <CO_SDOclientDownload+0x4a4>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004f5a:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd fc64 	bl	800282c <OD_getSDOabCode>
 8004f64:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
                    ret = CO_SDO_RT_endedWithServerAbort;
 8004f68:	23f6      	movs	r3, #246	; 0xf6
 8004f6a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004f6e:	e02b      	b.n	8004fc8 <CO_SDOclientDownload+0x4fc>
                }
                /* error if OD variable was written completely, but SDO download still has data */
                else if (bufferPartial && (odRet == ODR_OK)) {
 8004f70:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f74:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <CO_SDOclientDownload+0x4c8>
 8004f7e:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <CO_SDOclientDownload+0x4c8>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004f86:	4b91      	ldr	r3, [pc, #580]	; (80051cc <CO_SDOclientDownload+0x700>)
 8004f88:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    ret = CO_SDO_RT_endedWithClientAbort;
 8004f8c:	23f7      	movs	r3, #247	; 0xf7
 8004f8e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004f92:	e019      	b.n	8004fc8 <CO_SDOclientDownload+0x4fc>
                }
                /* is end of transfer? */
                else if (!bufferPartial) {
 8004f94:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f98:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <CO_SDOclientDownload+0x4f6>
                    /* error if OD variable was not written completely, but SDO download finished */
                    if (odRet == ODR_PARTIAL) {
 8004fa2:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d106      	bne.n	8004fba <CO_SDOclientDownload+0x4ee>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004fac:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <CO_SDOclientDownload+0x704>)
 8004fae:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        ret = CO_SDO_RT_endedWithClientAbort;
 8004fb2:	23f7      	movs	r3, #247	; 0xf7
 8004fb4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004fb8:	e006      	b.n	8004fc8 <CO_SDOclientDownload+0x4fc>
                    }
                    /* data transfer finished successfully */
                    else {
                        ret = CO_SDO_RT_ok_communicationEnd;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004fc0:	e002      	b.n	8004fc8 <CO_SDOclientDownload+0x4fc>
                    }
                } else {
                    ret = CO_SDO_RT_waitingLocalTransfer;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                }
            }
        }

        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8004fc8:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d008      	beq.n	8004fe2 <CO_SDOclientDownload+0x516>
        	{ SDO_C->state = CO_SDO_ST_IDLE; }
 8004fd0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fd4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8004fe0:	e34a      	b.n	8005678 <CO_SDOclientDownload+0xbac>


#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        /* Inform OS to call this function again without delay. */
        		else if (timerNext_us != NULL) {*timerNext_us = 0;}
 8004fe2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8346 	beq.w	8005678 <CO_SDOclientDownload+0xbac>
 8004fec:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8004ff4:	e340      	b.n	8005678 <CO_SDOclientDownload+0xbac>
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */


    /* CAN data received */
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8004ff6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ffa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 831c 	beq.w	8005642 <CO_SDOclientDownload+0xb76>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80U) {
 800500a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800500e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d119      	bne.n	8005050 <CO_SDOclientDownload+0x584>
            uint32_t code;
            (void)memcpy((void*)(&code), (const void*)(&SDO_C->CANrxData[4]), sizeof(code));
 800501c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005020:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8005030:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8005034:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_IDLE;
 8005038:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800503c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithServerAbort;
 8005048:	23f6      	movs	r3, #246	; 0xf6
 800504a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 800504e:	e2e2      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
        } else if (send_abort) {
 8005050:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005054:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d013      	beq.n	8005086 <CO_SDOclientDownload+0x5ba>
            abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 800505e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <CO_SDOclientDownload+0x5a2>
 8005066:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	e000      	b.n	8005070 <CO_SDOclientDownload+0x5a4>
 800506e:	4b59      	ldr	r3, [pc, #356]	; (80051d4 <CO_SDOclientDownload+0x708>)
 8005070:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_ABORT;
 8005074:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005078:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005084:	e2c7      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
        } else {
            switch (SDO_C->state) {
 8005086:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800508a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b56      	cmp	r3, #86	; 0x56
 8005098:	f300 82b0 	bgt.w	80055fc <CO_SDOclientDownload+0xb30>
 800509c:	2b52      	cmp	r3, #82	; 0x52
 800509e:	da05      	bge.n	80050ac <CO_SDOclientDownload+0x5e0>
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d015      	beq.n	80050d0 <CO_SDOclientDownload+0x604>
 80050a4:	2b14      	cmp	r3, #20
 80050a6:	f000 809b 	beq.w	80051e0 <CO_SDOclientDownload+0x714>
 80050aa:	e2a7      	b.n	80055fc <CO_SDOclientDownload+0xb30>
 80050ac:	3b52      	subs	r3, #82	; 0x52
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	f200 82a4 	bhi.w	80055fc <CO_SDOclientDownload+0xb30>
 80050b4:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <CO_SDOclientDownload+0x5f0>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080052a9 	.word	0x080052a9
 80050c0:	08005615 	.word	0x08005615
 80050c4:	080053f7 	.word	0x080053f7
 80050c8:	080055fd 	.word	0x080055fd
 80050cc:	080055bb 	.word	0x080055bb
                case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                    if (SDO_C->CANrxData[0] == 0x60U) {
 80050d0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050d4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80050de:	2b60      	cmp	r3, #96	; 0x60
 80050e0:	d167      	bne.n	80051b2 <CO_SDOclientDownload+0x6e6>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 80050e2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050e6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
                        index |= SDO_C->CANrxData[1];
 80050f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050fc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 800510c:	4313      	orrs	r3, r2
 800510e:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
                        subindex = SDO_C->CANrxData[3];
 8005112:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005116:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8005120:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8005124:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005128:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005132:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8005136:	429a      	cmp	r2, r3
 8005138:	d10a      	bne.n	8005150 <CO_SDOclientDownload+0x684>
 800513a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800513e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005148:	f897 2425 	ldrb.w	r2, [r7, #1061]	; 0x425
 800514c:	429a      	cmp	r2, r3
 800514e:	d00b      	beq.n	8005168 <CO_SDOclientDownload+0x69c>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8005150:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <CO_SDOclientDownload+0x70c>)
 8005152:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 8005156:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800515a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8005166:	e256      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        }

#if (CO_CONFIG_SDO_CLI&&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                        if (SDO_C->finished) {
 8005168:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800516c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <CO_SDOclientDownload+0x6c4>
                            /* expedited transfer */
                            SDO_C->state = CO_SDO_ST_IDLE;
 8005178:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800517c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
#endif
                    } else {
                        	abortCode = CO_SDO_AB_CMD;
                        	SDO_C->state = CO_SDO_ST_ABORT;
                    		}
                    break;
 800518e:	e242      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                            SDO_C->toggle = 0x00;
 8005190:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005194:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80051a0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051a4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2213      	movs	r2, #19
 80051ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80051b0:	e231      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        	abortCode = CO_SDO_AB_CMD;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <CO_SDOclientDownload+0x710>)
 80051b4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        	SDO_C->state = CO_SDO_ST_ABORT;
 80051b8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051bc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80051c8:	e225      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
 80051ca:	bf00      	nop
 80051cc:	06070012 	.word	0x06070012
 80051d0:	06070013 	.word	0x06070013
 80051d4:	06040047 	.word	0x06040047
 80051d8:	06040043 	.word	0x06040043
 80051dc:	05040001 	.word	0x05040001
                }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xEFU) == 0x20U) {
 80051e0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051e4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80051ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d14c      	bne.n	8005290 <CO_SDOclientDownload+0x7c4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO_C->CANrxData[0] & 0x10U;
 80051f6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051fa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
                        if (toggle != SDO_C->toggle) {
 800520c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005210:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800521a:	f897 2428 	ldrb.w	r2, [r7, #1064]	; 0x428
 800521e:	429a      	cmp	r2, r3
 8005220:	d00b      	beq.n	800523a <CO_SDOclientDownload+0x76e>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8005222:	4bc8      	ldr	r3, [pc, #800]	; (8005544 <CO_SDOclientDownload+0xa78>)
 8005224:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 8005228:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800522c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8005238:	e1ed      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        }
                        SDO_C->toggle = (toggle == 0x00U) ? 0x10U : 0x00U;
 800523a:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <CO_SDOclientDownload+0x77a>
 8005242:	2210      	movs	r2, #16
 8005244:	e000      	b.n	8005248 <CO_SDOclientDownload+0x77c>
 8005246:	2200      	movs	r2, #0
 8005248:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800524c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

                        /* is end of transfer? */
                        if (SDO_C->finished) {
 8005256:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800525a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <CO_SDOclientDownload+0x7b2>
                            SDO_C->state = CO_SDO_ST_IDLE;
 8005266:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800526a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800527c:	e1cb      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800527e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005282:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2213      	movs	r2, #19
 800528a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 800528e:	e1c2      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 8005290:	4bad      	ldr	r3, [pc, #692]	; (8005548 <CO_SDOclientDownload+0xa7c>)
 8005292:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 8005296:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800529a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80052a6:	e1b6      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_SEGMENTED */

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
                case CO_SDO_ST_DOWNLOAD_BLK_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xFBU) == 0xA0U) {
 80052a8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052ac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80052b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80052ba:	2ba0      	cmp	r3, #160	; 0xa0
 80052bc:	f040 808f 	bne.w	80053de <CO_SDOclientDownload+0x912>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 80052c0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052c4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
                        index |= SDO_C->CANrxData[1];
 80052d6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052da:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
                        subindex = SDO_C->CANrxData[3];
 80052f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052f4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 80052fe:	f887 3429 	strb.w	r3, [r7, #1065]	; 0x429
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8005302:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005306:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005310:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 8005314:	429a      	cmp	r2, r3
 8005316:	d10a      	bne.n	800532e <CO_SDOclientDownload+0x862>
 8005318:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800531c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005326:	f897 2429 	ldrb.w	r2, [r7, #1065]	; 0x429
 800532a:	429a      	cmp	r2, r3
 800532c:	d00b      	beq.n	8005346 <CO_SDOclientDownload+0x87a>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 800532e:	4b87      	ldr	r3, [pc, #540]	; (800554c <CO_SDOclientDownload+0xa80>)
 8005330:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 8005334:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005338:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8005344:	e167      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        }

                        SDO_C->block_crc = 0;
 8005346:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800534a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
                        SDO_C->block_blksize = SDO_C->CANrxData[4];
 8005356:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800535a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f893 2488 	ldrb.w	r2, [r3, #1160]	; 0x488
 8005364:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005368:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                        if ((SDO_C->block_blksize < 1U) || (SDO_C->block_blksize > 127U)) {
 8005372:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005376:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <CO_SDOclientDownload+0x8cc>
 8005384:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005388:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 8005392:	b25b      	sxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	da07      	bge.n	80053a8 <CO_SDOclientDownload+0x8dc>
                            SDO_C->block_blksize = 127;
 8005398:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800539c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	227f      	movs	r2, #127	; 0x7f
 80053a4:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                        }
                        SDO_C->block_seqno = 0;
 80053a8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053ac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                        (void)CO_fifo_altBegin(&SDO_C->bufFifo, 0);
 80053b8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053bc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3378      	adds	r3, #120	; 0x78
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 fbd0 	bl	8009b6c <CO_fifo_altBegin>
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 80053cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2253      	movs	r2, #83	; 0x53
 80053d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    } else {
                           abortCode = CO_SDO_AB_CMD;
                           SDO_C->state = CO_SDO_ST_ABORT;
                           }
                    break;
 80053dc:	e11b      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                           abortCode = CO_SDO_AB_CMD;
 80053de:	4b5a      	ldr	r3, [pc, #360]	; (8005548 <CO_SDOclientDownload+0xa7c>)
 80053e0:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                           SDO_C->state = CO_SDO_ST_ABORT;
 80053e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053e8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80053f4:	e10f      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                }

                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ: break;
                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP:
                {
                    if (SDO_C->CANrxData[0] == 0xA2U) {
 80053f6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053fa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005404:	2ba2      	cmp	r3, #162	; 0xa2
 8005406:	f040 80cc 	bne.w	80055a2 <CO_SDOclientDownload+0xad6>
                        /* check number of segments */
                        if (SDO_C->CANrxData[1] < SDO_C->block_seqno) {
 800540a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800540e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8005418:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800541c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8005426:	429a      	cmp	r2, r3
 8005428:	d24d      	bcs.n	80054c6 <CO_SDOclientDownload+0x9fa>
                            /* NOT all segments transferred successfully. Re-transmit data after erroneous segment. */
                            size_t cntFailed = (size_t)(SDO_C->block_seqno) - (size_t)(SDO_C->CANrxData[1]);
 800542a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800542e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8005438:	461a      	mov	r2, r3
 800543a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800543e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
                            cntFailed = (cntFailed * 7U) - SDO_C->block_noData;
 800544e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800545c:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f892 24a2 	ldrb.w	r2, [r2, #1186]	; 0x4a2
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
                            SDO_C->sizeTran -= cntFailed;
 800546c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005470:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005478:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005482:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	669a      	str	r2, [r3, #104]	; 0x68
                            (void)CO_fifo_altBegin(&SDO_C->bufFifo, (size_t)SDO_C->CANrxData[1] * 7U);
 800548a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800548e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8005498:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800549c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80054a6:	4619      	mov	r1, r3
 80054a8:	460b      	mov	r3, r1
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	1a5b      	subs	r3, r3, r1
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f004 fb5b 	bl	8009b6c <CO_fifo_altBegin>
                            SDO_C->finished = false;
 80054b6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054ba:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2200      	movs	r2, #0
 80054c2:	661a      	str	r2, [r3, #96]	; 0x60
 80054c4:	e01b      	b.n	80054fe <CO_SDOclientDownload+0xa32>
                        } else if (SDO_C->CANrxData[1] > SDO_C->block_seqno) {
 80054c6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054ca:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 80054d4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054d8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d90b      	bls.n	80054fe <CO_SDOclientDownload+0xa32>
                            /* something strange from server, break transmission */
                            abortCode = CO_SDO_AB_CMD;
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <CO_SDOclientDownload+0xa7c>)
 80054e8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 80054ec:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054f0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 80054fc:	e08b      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* confirm successfully transmitted data */
                        CO_fifo_altFinish(&SDO_C->bufFifo, &SDO_C->block_crc);
 80054fe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005502:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800550c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005510:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f004 fb5b 	bl	8009bd8 <CO_fifo_altFinish>

                        if (SDO_C->finished) {
 8005522:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005526:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <CO_SDOclientDownload+0xa84>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_END_REQ;
 8005532:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005536:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2255      	movs	r2, #85	; 0x55
 800553e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8005542:	e068      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
 8005544:	05030000 	.word	0x05030000
 8005548:	05040001 	.word	0x05040001
 800554c:	06040043 	.word	0x06040043
                            SDO_C->block_blksize = SDO_C->CANrxData[2];
 8005550:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005554:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f893 2486 	ldrb.w	r2, [r3, #1158]	; 0x486
 800555e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005562:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                            SDO_C->block_seqno = 0;
 800556c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005570:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                            (void)CO_fifo_altBegin(&SDO_C->bufFifo, 0);
 800557c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005580:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3378      	adds	r3, #120	; 0x78
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f004 faee 	bl	8009b6c <CO_fifo_altBegin>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 8005590:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005594:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2253      	movs	r2, #83	; 0x53
 800559c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80055a0:	e039      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 80055a2:	4b83      	ldr	r3, [pc, #524]	; (80057b0 <CO_SDOclientDownload+0xce4>)
 80055a4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 80055a8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055ac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80055b8:	e02d      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                }

                case CO_SDO_ST_DOWNLOAD_BLK_END_RSP: {
                    if (SDO_C->CANrxData[0] == 0xA1U) {
 80055ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055be:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80055c8:	2ba1      	cmp	r3, #161	; 0xa1
 80055ca:	d10b      	bne.n	80055e4 <CO_SDOclientDownload+0xb18>
                        /*  SDO block download successfully transferred */
                        SDO_C->state = CO_SDO_ST_IDLE;
 80055cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        ret = CO_SDO_RT_ok_communicationEnd;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80055e2:	e018      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 80055e4:	4b72      	ldr	r3, [pc, #456]	; (80057b0 <CO_SDOclientDownload+0xce4>)
 80055e6:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 80055ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055ee:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80055fa:	e00c      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
                case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
                default: {
                    abortCode = CO_SDO_AB_CMD;
 80055fc:	4b6c      	ldr	r3, [pc, #432]	; (80057b0 <CO_SDOclientDownload+0xce4>)
 80055fe:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8005602:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005606:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005612:	e000      	b.n	8005616 <CO_SDOclientDownload+0xb4a>
                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ: break;
 8005614:	bf00      	nop
                }
            }
        }
        SDO_C->timeoutTimer = 0;
 8005616:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800561a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	675a      	str	r2, [r3, #116]	; 0x74
        timeDifference_us = 0;
 8005624:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005628:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8005630:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005634:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8005640:	e01b      	b.n	800567a <CO_SDOclientDownload+0xbae>
    } else if (send_abort) {
 8005642:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005646:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d014      	beq.n	800567a <CO_SDOclientDownload+0xbae>
        abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8005650:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <CO_SDOclientDownload+0xb94>
 8005658:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	e000      	b.n	8005662 <CO_SDOclientDownload+0xb96>
 8005660:	4b54      	ldr	r3, [pc, #336]	; (80057b4 <CO_SDOclientDownload+0xce8>)
 8005662:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        SDO_C->state = CO_SDO_ST_ABORT;
 8005666:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800566a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005676:	e000      	b.n	800567a <CO_SDOclientDownload+0xbae>
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8005678:	bf00      	nop
    } else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag */
    if (ret == CO_SDO_RT_waitingResponse) {
 800567a:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 800567e:	2b01      	cmp	r3, #1
 8005680:	d164      	bne.n	800574c <CO_SDOclientDownload+0xc80>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8005682:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005686:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800568e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005692:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	429a      	cmp	r2, r3
 800569c:	d211      	bcs.n	80056c2 <CO_SDOclientDownload+0xbf6>
            SDO_C->timeoutTimer += timeDifference_us;
 800569e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056a2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80056aa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056ae:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	441a      	add	r2, r3
 80056b6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056ba:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 80056c2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056c6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80056ce:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056d2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	429a      	cmp	r2, r3
 80056dc:	d30b      	bcc.n	80056f6 <CO_SDOclientDownload+0xc2a>
            abortCode = CO_SDO_AB_TIMEOUT;
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <CO_SDOclientDownload+0xcec>)
 80056e0:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_ABORT;
 80056e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056e8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80056f4:	e01e      	b.n	8005734 <CO_SDOclientDownload+0xc68>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        else if (timerNext_us != NULL) {
 80056f6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01a      	beq.n	8005734 <CO_SDOclientDownload+0xc68>
            /* check again after timeout time elapsed */
            uint32_t diff = SDO_C->SDOtimeoutTime_us - SDO_C->timeoutTimer;
 80056fe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005702:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800570a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800570e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            if (*timerNext_us > diff) {
 800571c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8005726:	429a      	cmp	r2, r3
 8005728:	d204      	bcs.n	8005734 <CO_SDOclientDownload+0xc68>
                *timerNext_us = diff;
 800572a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800572e:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8005732:	601a      	str	r2, [r3, #0]
            }
        } else { /* MISRA C 2004 14.10 */
        }
#endif
        if (SDO_C->CANtxBuff->bufferFull) {
 8005734:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005738:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <CO_SDOclientDownload+0xc80>
            ret = CO_SDO_RT_transmittBufferFull;
 8005746:	2304      	movs	r3, #4
 8005748:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
        }
    }

    /* Transmit CAN data */
    if (ret == CO_SDO_RT_waitingResponse) {
 800574c:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 8005750:	2b01      	cmp	r3, #1
 8005752:	f040 8432 	bne.w	8005fba <CO_SDOclientDownload+0x14ee>
        size_t count;
        (void)memset((void*)&SDO_C->CANtxBuff->data[0], 0, 8);
 8005756:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800575a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	3305      	adds	r3, #5
 8005764:	2208      	movs	r2, #8
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f019 fd7b 	bl	801f264 <memset>

        switch (SDO_C->state) {
 800576e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005772:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b55      	cmp	r3, #85	; 0x55
 8005780:	f000 83c5 	beq.w	8005f0e <CO_SDOclientDownload+0x1442>
 8005784:	2b55      	cmp	r3, #85	; 0x55
 8005786:	f300 8415 	bgt.w	8005fb4 <CO_SDOclientDownload+0x14e8>
 800578a:	2b53      	cmp	r3, #83	; 0x53
 800578c:	f000 829d 	beq.w	8005cca <CO_SDOclientDownload+0x11fe>
 8005790:	2b53      	cmp	r3, #83	; 0x53
 8005792:	f300 840f 	bgt.w	8005fb4 <CO_SDOclientDownload+0x14e8>
 8005796:	2b51      	cmp	r3, #81	; 0x51
 8005798:	f000 8216 	beq.w	8005bc8 <CO_SDOclientDownload+0x10fc>
 800579c:	2b51      	cmp	r3, #81	; 0x51
 800579e:	f300 8409 	bgt.w	8005fb4 <CO_SDOclientDownload+0x14e8>
 80057a2:	2b11      	cmp	r3, #17
 80057a4:	d00a      	beq.n	80057bc <CO_SDOclientDownload+0xcf0>
 80057a6:	2b13      	cmp	r3, #19
 80057a8:	f000 812e 	beq.w	8005a08 <CO_SDOclientDownload+0xf3c>
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 80057ac:	f000 bc02 	b.w	8005fb4 <CO_SDOclientDownload+0x14e8>
 80057b0:	05040001 	.word	0x05040001
 80057b4:	06040047 	.word	0x06040047
 80057b8:	05040000 	.word	0x05040000
                SDO_C->CANtxBuff->data[0] = 0x20;
 80057bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	2220      	movs	r2, #32
 80057ca:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 80057cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057da:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057de:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 80057ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057ee:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005800:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800580c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005810:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800581c:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8005826:	721a      	strb	r2, [r3, #8]
                count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8005828:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800582c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3378      	adds	r3, #120	; 0x78
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fd2d 	bl	8004294 <CO_fifo_getOccupied>
 800583a:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                if (((SDO_C->sizeInd == 0U) && (count <= 4U)) || ((SDO_C->sizeInd > 0U) && (SDO_C->sizeInd <= 4U))) {
 800583e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005842:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584a:	2b00      	cmp	r3, #0
 800584c:	d103      	bne.n	8005856 <CO_SDOclientDownload+0xd8a>
 800584e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005852:	2b04      	cmp	r3, #4
 8005854:	d910      	bls.n	8005878 <CO_SDOclientDownload+0xdac>
 8005856:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800585a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8085 	beq.w	8005972 <CO_SDOclientDownload+0xea6>
 8005868:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800586c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005874:	2b04      	cmp	r3, #4
 8005876:	d87c      	bhi.n	8005972 <CO_SDOclientDownload+0xea6>
                    SDO_C->CANtxBuff->data[0] |= 0x02U;
 8005878:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800587c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	795a      	ldrb	r2, [r3, #5]
 8005886:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800588a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	f042 0202 	orr.w	r2, r2, #2
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	715a      	strb	r2, [r3, #5]
                    if ((count == 0U) || ((SDO_C->sizeInd > 0U) && (SDO_C->sizeInd != count))) {
 800589a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <CO_SDOclientDownload+0xdfa>
 80058a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058a6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <CO_SDOclientDownload+0xe18>
 80058b2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058b6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058be:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d00e      	beq.n	80058e4 <CO_SDOclientDownload+0xe18>
                        SDO_C->state = CO_SDO_ST_IDLE;
 80058c6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058ca:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        abortCode = CO_SDO_AB_TYPE_MISMATCH;
 80058d6:	4bb9      	ldr	r3, [pc, #740]	; (8005bbc <CO_SDOclientDownload+0x10f0>)
 80058d8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        ret = CO_SDO_RT_endedWithClientAbort;
 80058dc:	23f7      	movs	r3, #247	; 0xf7
 80058de:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                        break;
 80058e2:	e36a      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                    if (SDO_C->sizeInd > 0U) {
 80058e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058e8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <CO_SDOclientDownload+0xe5e>
                        SDO_C->CANtxBuff->data[0] |= (uint8_t)(0x01U | ((4U - count) << 2));
 80058f4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058f8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	795a      	ldrb	r2, [r3, #5]
 8005902:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f1c3 0304 	rsb	r3, r3, #4
 800590c:	b2db      	uxtb	r3, r3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	b2db      	uxtb	r3, r3
 8005912:	4313      	orrs	r3, r2
 8005914:	b2da      	uxtb	r2, r3
 8005916:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800591a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	715a      	strb	r2, [r3, #5]
                    (void)CO_fifo_read(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[4], count, NULL);
 800592a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800592e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005938:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800593c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	f103 0109 	add.w	r1, r3, #9
 8005948:	2300      	movs	r3, #0
 800594a:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 800594e:	f004 f8a3 	bl	8009a98 <CO_fifo_read>
                    SDO_C->sizeTran = count;
 8005952:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005956:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8005960:	669a      	str	r2, [r3, #104]	; 0x68
                    SDO_C->finished = true;
 8005962:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005966:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	661a      	str	r2, [r3, #96]	; 0x60
 8005970:	e02a      	b.n	80059c8 <CO_SDOclientDownload+0xefc>
                    if (SDO_C->sizeInd > 0U) {
 8005972:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005976:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597e:	2b00      	cmp	r3, #0
 8005980:	d022      	beq.n	80059c8 <CO_SDOclientDownload+0xefc>
                        uint32_t size = CO_SWAP_32((uint32_t)SDO_C->sizeInd);
 8005982:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005986:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
                        SDO_C->CANtxBuff->data[0] |= 0x01U;
 8005992:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005996:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	795a      	ldrb	r2, [r3, #5]
 80059a0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059a4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&size), sizeof(size));
 80059b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059b8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	3309      	adds	r3, #9
 80059c2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80059c6:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 80059c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059cc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80059d6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059da:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059e6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4619      	mov	r1, r3
 80059f0:	4610      	mov	r0, r2
 80059f2:	f00d f861 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80059f6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059fa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2212      	movs	r2, #18
 8005a02:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005a06:	e2d8      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                count = CO_fifo_read(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[1], 7, NULL);
 8005a08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a0c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005a16:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a1a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	1d99      	adds	r1, r3, #6
 8005a24:	2300      	movs	r3, #0
 8005a26:	2207      	movs	r2, #7
 8005a28:	f004 f836 	bl	8009a98 <CO_fifo_read>
 8005a2c:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                SDO_C->sizeTran += count;
 8005a30:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a34:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005a3c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005a40:	441a      	add	r2, r3
 8005a42:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a46:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	669a      	str	r2, [r3, #104]	; 0x68
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 8005a4e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a52:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d028      	beq.n	8005ab0 <CO_SDOclientDownload+0xfe4>
 8005a5e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a62:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005a6a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a6e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d91a      	bls.n	8005ab0 <CO_SDOclientDownload+0xfe4>
                    SDO_C->sizeTran -= count;
 8005a7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005a86:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a90:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	669a      	str	r2, [r3, #104]	; 0x68
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005a98:	4b49      	ldr	r3, [pc, #292]	; (8005bc0 <CO_SDOclientDownload+0x10f4>)
 8005a9a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8005a9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005aa2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005aae:	e284      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                SDO_C->CANtxBuff->data[0] = (uint8_t)(SDO_C->toggle | ((7U - count) << 1));
 8005ab0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ab4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f893 1494 	ldrb.w	r1, [r3, #1172]	; 0x494
 8005abe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f1c3 0307 	rsb	r3, r3, #7
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ad2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	430a      	orrs	r2, r1
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	715a      	strb	r2, [r3, #5]
                if ((CO_fifo_getOccupied(&SDO_C->bufFifo) == 0U) && !bufferPartial) {
 8005ae0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ae4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3378      	adds	r3, #120	; 0x78
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fbd1 	bl	8004294 <CO_fifo_getOccupied>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d140      	bne.n	8005b7a <CO_SDOclientDownload+0x10ae>
 8005af8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005afc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d139      	bne.n	8005b7a <CO_SDOclientDownload+0x10ae>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8005b06:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b0a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <CO_SDOclientDownload+0x107e>
 8005b16:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b1a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b22:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b26:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d20b      	bcs.n	8005b4a <CO_SDOclientDownload+0x107e>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <CO_SDOclientDownload+0x10f8>)
 8005b34:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 8005b38:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b3c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 8005b48:	e237      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                    SDO_C->CANtxBuff->data[0] |= 0x01U;
 8005b4a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b4e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	795a      	ldrb	r2, [r3, #5]
 8005b58:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b5c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	715a      	strb	r2, [r3, #5]
                    SDO_C->finished = true;
 8005b6c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b70:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2201      	movs	r2, #1
 8005b78:	661a      	str	r2, [r3, #96]	; 0x60
                SDO_C->timeoutTimer = 0;
 8005b7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2200      	movs	r2, #0
 8005b86:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005b88:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b8c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b94:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b98:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	f00c ff88 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8005ba8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2214      	movs	r2, #20
 8005bb4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005bb8:	e1ff      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
 8005bba:	bf00      	nop
 8005bbc:	06070010 	.word	0x06070010
 8005bc0:	06070012 	.word	0x06070012
 8005bc4:	06070013 	.word	0x06070013
                SDO_C->CANtxBuff->data[0] = 0xC4;
 8005bc8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bcc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	22c4      	movs	r2, #196	; 0xc4
 8005bd6:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8005bd8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bdc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005be6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bea:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8005bf6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bfa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c0c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8005c18:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c1c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8005c28:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8005c32:	721a      	strb	r2, [r3, #8]
                if (SDO_C->sizeInd > 0U) {
 8005c34:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c38:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <CO_SDOclientDownload+0x11be>
                    uint32_t size = CO_SWAP_32((uint32_t)SDO_C->sizeInd);
 8005c44:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c48:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c50:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
                    SDO_C->CANtxBuff->data[0] |= 0x02U;
 8005c54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c58:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	795a      	ldrb	r2, [r3, #5]
 8005c62:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c66:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	f042 0202 	orr.w	r2, r2, #2
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&size), sizeof(size));
 8005c76:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c7a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	3309      	adds	r3, #9
 8005c84:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8005c88:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 8005c8a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c8e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005c98:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c9c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ca8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f00c ff00 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_RSP;
 8005cb8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cbc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2252      	movs	r2, #82	; 0x52
 8005cc4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005cc8:	e177      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                if ((CO_fifo_altGetOccupied(&SDO_C->bufFifo) < 7U) && bufferPartial) {
 8005cca:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cce:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3378      	adds	r3, #120	; 0x78
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe faf7 	bl	80042ca <CO_fifo_altGetOccupied>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d807      	bhi.n	8005cf2 <CO_SDOclientDownload+0x1226>
 8005ce2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ce6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 8163 	bne.w	8005fb8 <CO_SDOclientDownload+0x14ec>
                SDO_C->block_seqno++;
 8005cf2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cf6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8005d00:	3301      	adds	r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d08:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                SDO_C->CANtxBuff->data[0] = SDO_C->block_seqno;
 8005d12:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d16:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8005d22:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	f892 24a0 	ldrb.w	r2, [r2, #1184]	; 0x4a0
 8005d2c:	715a      	strb	r2, [r3, #5]
                count = CO_fifo_altRead(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[1], 7);
 8005d2e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d32:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005d3c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d40:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	3306      	adds	r3, #6
 8005d4a:	2207      	movs	r2, #7
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f003 ff80 	bl	8009c52 <CO_fifo_altRead>
 8005d52:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                SDO_C->block_noData = (uint8_t)(7U - count);
 8005d56:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f1c3 0307 	rsb	r3, r3, #7
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d66:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
                SDO_C->sizeTran += count;
 8005d70:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d74:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005d7c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005d80:	441a      	add	r2, r3
 8005d82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d86:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	669a      	str	r2, [r3, #104]	; 0x68
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 8005d8e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d92:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d028      	beq.n	8005df0 <CO_SDOclientDownload+0x1324>
 8005d9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005da2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005daa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dae:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d91a      	bls.n	8005df0 <CO_SDOclientDownload+0x1324>
                    SDO_C->sizeTran -= count;
 8005dba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dbe:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005dc6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dd0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	669a      	str	r2, [r3, #104]	; 0x68
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005dd8:	4bc4      	ldr	r3, [pc, #784]	; (80060ec <CO_SDOclientDownload+0x1620>)
 8005dda:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8005dde:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005de2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005dee:	e0e4      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                if ((CO_fifo_altGetOccupied(&SDO_C->bufFifo) == 0U) && !bufferPartial) {
 8005df0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005df4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3378      	adds	r3, #120	; 0x78
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fa64 	bl	80042ca <CO_fifo_altGetOccupied>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d149      	bne.n	8005e9c <CO_SDOclientDownload+0x13d0>
 8005e08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e0c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d142      	bne.n	8005e9c <CO_SDOclientDownload+0x13d0>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8005e16:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e1a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d019      	beq.n	8005e5a <CO_SDOclientDownload+0x138e>
 8005e26:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e2a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e32:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e36:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d20b      	bcs.n	8005e5a <CO_SDOclientDownload+0x138e>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8005e42:	4bab      	ldr	r3, [pc, #684]	; (80060f0 <CO_SDOclientDownload+0x1624>)
 8005e44:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 8005e48:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e4c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 8005e58:	e0af      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                    SDO_C->CANtxBuff->data[0] |= 0x80U;
 8005e5a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e5e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	795a      	ldrb	r2, [r3, #5]
 8005e68:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e6c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	715a      	strb	r2, [r3, #5]
                    SDO_C->finished = true;
 8005e7c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e80:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
                    SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8005e8a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e8e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2254      	movs	r2, #84	; 0x54
 8005e96:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005e9a:	e020      	b.n	8005ede <CO_SDOclientDownload+0x1412>
                else if (SDO_C->block_seqno >= SDO_C->block_blksize) {
 8005e9c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ea0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f893 24a0 	ldrb.w	r2, [r3, #1184]	; 0x4a0
 8005eaa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005eae:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d308      	bcc.n	8005ece <CO_SDOclientDownload+0x1402>
                    SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8005ebc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ec0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2254      	movs	r2, #84	; 0x54
 8005ec8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005ecc:	e007      	b.n	8005ede <CO_SDOclientDownload+0x1412>
                    if (timerNext_us != NULL) {
 8005ece:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <CO_SDOclientDownload+0x1412>
                        *timerNext_us = 0;
 8005ed6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 8005ede:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ee2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005eec:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ef0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005efc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f00c fdd6 	bl	8012ab8 <CO_CANsend>
                break;
 8005f0c:	e055      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                SDO_C->CANtxBuff->data[0] = (uint8_t)(0xC1U | (SDO_C->block_noData << 2));
 8005f0e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f12:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f893 34a2 	ldrb.w	r3, [r3, #1186]	; 0x4a2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f24:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->block_crc;
 8005f34:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f38:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 24b0 	ldrh.w	r2, [r3, #1200]	; 0x4b0
 8005f42:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f46:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->block_crc >> 8);
 8005f52:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f56:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	; 0x4b0
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f68:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	71da      	strb	r2, [r3, #7]
                SDO_C->timeoutTimer = 0;
 8005f74:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f78:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005f82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f86:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f92:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f00c fd8b 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_END_RSP;
 8005fa2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fa6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2256      	movs	r2, #86	; 0x56
 8005fae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005fb2:	e002      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <CO_SDOclientDownload+0x14ee>
                    break;
 8005fb8:	bf00      	nop
            }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8005fba:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d176      	bne.n	80060b0 <CO_SDOclientDownload+0x15e4>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 8005fc2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fc6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d15f      	bne.n	8006096 <CO_SDOclientDownload+0x15ca>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8005fd6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8005fda:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8005fde:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fe2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8005fee:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ff2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ffc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006000:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800600c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006010:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	b29a      	uxth	r2, r3
 800601e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006022:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800602e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006032:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800603e:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8006048:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 800604a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800604e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	3309      	adds	r3, #9
 8006058:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800605c:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 800605e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006062:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800606e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f00c fd1d 	bl	8012ab8 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 800607e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006082:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithClientAbort;
 800608e:	23f7      	movs	r3, #247	; 0xf7
 8006090:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8006094:	e00c      	b.n	80060b0 <CO_SDOclientDownload+0x15e4>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        else if (SDO_C->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 8006096:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800609a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b53      	cmp	r3, #83	; 0x53
 80060a8:	d102      	bne.n	80060b0 <CO_SDOclientDownload+0x15e4>
            ret = CO_SDO_RT_blockDownldInProgress;
 80060aa:	2303      	movs	r3, #3
 80060ac:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
        } else { /* MISRA C 2004 14.10 */
        }
#endif
    }

    if (sizeTransferred != NULL) {
 80060b0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <CO_SDOclientDownload+0x15fe>
        *sizeTransferred = SDO_C->sizeTran;
 80060b8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060bc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80060c4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80060c8:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 80060ca:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <CO_SDOclientDownload+0x1610>
        *SDOabortCode = abortCode;
 80060d2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80060d6:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80060da:	601a      	str	r2, [r3, #0]
    }

    return ret;
 80060dc:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	f207 474c 	addw	r7, r7, #1100	; 0x44c
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	bf00      	nop
 80060ec:	06070012 	.word	0x06070012
 80060f0:	06070013 	.word	0x06070013

080060f4 <CO_SDOclientUploadInitiate>:
/******************************************************************************
 * UPLOAD                                                                     *
 ******************************************************************************/
CO_SDO_return_t
CO_SDOclientUploadInitiate(CO_SDOclient_t* SDO_C, uint16_t index, uint8_t subIndex, uint16_t SDOtimeoutTime_ms,
                           bool_t blockEnable) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	4603      	mov	r3, r0
 8006104:	817b      	strh	r3, [r7, #10]
 8006106:	460b      	mov	r3, r1
 8006108:	727b      	strb	r3, [r7, #9]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
    /* verify parameters */
    if ((SDO_C == NULL) || !SDO_C->valid) { return CO_SDO_RT_wrongArguments;}
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <CO_SDOclientUploadInitiate+0x28>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <CO_SDOclientUploadInitiate+0x2e>
 800611c:	f06f 0301 	mvn.w	r3, #1
 8006120:	e04f      	b.n	80061c2 <CO_SDOclientUploadInitiate+0xce>

    /* save parameters */
    SDO_C->index = index;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	897a      	ldrh	r2, [r7, #10]
 8006126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    SDO_C->subIndex = subIndex;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7a7a      	ldrb	r2, [r7, #9]
 800612e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO_C->sizeInd = 0;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	665a      	str	r2, [r3, #100]	; 0x64
    SDO_C->sizeTran = 0;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	669a      	str	r2, [r3, #104]	; 0x68
    SDO_C->finished = false;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	661a      	str	r2, [r3, #96]	; 0x60
    CO_fifo_reset(&SDO_C->bufFifo);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3378      	adds	r3, #120	; 0x78
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe f870 	bl	800422e <CO_fifo_reset>
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006154:	fb03 f202 	mul.w	r2, r3, r2
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	671a      	str	r2, [r3, #112]	; 0x70
    SDO_C->timeoutTimer = 0;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	675a      	str	r2, [r3, #116]	; 0x74
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK)!=0
    SDO_C->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700U;
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8006168:	fb03 f202 	mul.w	r2, r3, r2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* if node-ID of the SDO server is the same as node-ID of this node, then transfer data within this node */
    if (((SDO_C->OD != NULL) && (SDO_C->nodeId != 0U)) && (SDO_C->nodeIDOfTheSDOServer == SDO_C->nodeId)) {
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d012      	beq.n	80061a0 <CO_SDOclientUploadInitiate+0xac>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <CO_SDOclientUploadInitiate+0xac>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	791b      	ldrb	r3, [r3, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d107      	bne.n	80061a0 <CO_SDOclientUploadInitiate+0xac>
        SDO_C->OD_IO.read = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	621a      	str	r2, [r3, #32]
        SDO_C->state = CO_SDO_ST_UPLOAD_LOCAL_TRANSFER;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800619e:	e00b      	b.n	80061b8 <CO_SDOclientUploadInitiate+0xc4>
    } else
#endif
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        if (blockEnable) {
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <CO_SDOclientUploadInitiate+0xbc>
        SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2261      	movs	r2, #97	; 0x61
 80061aa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80061ae:	e003      	b.n	80061b8 <CO_SDOclientUploadInitiate+0xc4>
    } else
#endif
    {
        SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2221      	movs	r2, #33	; 0x21
 80061b4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

    return CO_SDO_RT_ok_communicationEnd;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <CO_SDOclientUpload>:

CO_SDO_return_t
CO_SDOclientUpload(CO_SDOclient_t* SDO_C, uint32_t timeDifference_us, bool_t send_abort,
                   CO_SDO_abortCode_t* SDOabortCode, size_t* sizeIndicated, size_t* sizeTransferred,
                   uint32_t* timerNext_us) {
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 80061d8:	f2a4 4464 	subw	r4, r4, #1124	; 0x464
 80061dc:	6020      	str	r0, [r4, #0]
 80061de:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 80061e2:	f5a0 608d 	sub.w	r0, r0, #1128	; 0x468
 80061e6:	6001      	str	r1, [r0, #0]
 80061e8:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80061ec:	f2a1 416c 	subw	r1, r1, #1132	; 0x46c
 80061f0:	600a      	str	r2, [r1, #0]
 80061f2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80061f6:	f5a2 628e 	sub.w	r2, r2, #1136	; 0x470
 80061fa:	6013      	str	r3, [r2, #0]
    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8006202:	2300      	movs	r3, #0
 8006204:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    if ((SDO_C == NULL) || !SDO_C->valid) {
 8006208:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800620c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <CO_SDOclientUpload+0x5a>
 8006216:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800621a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <CO_SDOclientUpload+0x6a>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8006226:	4b8b      	ldr	r3, [pc, #556]	; (8006454 <CO_SDOclientUpload+0x288>)
 8006228:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        ret = CO_SDO_RT_wrongArguments;
 800622c:	23fe      	movs	r3, #254	; 0xfe
 800622e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006232:	f000 beb2 	b.w	8006f9a <CO_SDOclientUpload+0xdce>
    } else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8006236:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800623a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <CO_SDOclientUpload+0x88>
        ret = CO_SDO_RT_ok_communicationEnd;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006250:	f000 bea3 	b.w	8006f9a <CO_SDOclientUpload+0xdce>
    }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* Transfer data locally */
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 8006254:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006258:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b20      	cmp	r3, #32
 8006266:	f040 81ca 	bne.w	80065fe <CO_SDOclientUpload+0x432>
 800626a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800626e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 81c2 	bne.w	80065fe <CO_SDOclientUpload+0x432>
        /* search object dictionary in first pass */
        if (SDO_C->OD_IO.read == NULL) {
 800627a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800627e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d163      	bne.n	8006352 <CO_SDOclientUpload+0x186>
            ODR_t odRet;

            odRet = OD_getSub(OD_find(SDO_C->OD, SDO_C->index), SDO_C->subIndex, &SDO_C->OD_IO, false);
 800628a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800628e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800629a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fc f96c 	bl	8002584 <OD_find>
 80062ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80062b0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 80062ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80062be:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f103 0208 	add.w	r2, r3, #8
 80062c8:	2300      	movs	r3, #0
 80062ca:	f7fc f9b7 	bl	800263c <OD_getSub>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453

            if (odRet != ODR_OK) {
 80062d4:	f997 3453 	ldrsb.w	r3, [r7, #1107]	; 0x453
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <CO_SDOclientUpload+0x126>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80062dc:	f997 3453 	ldrsb.w	r3, [r7, #1107]	; 0x453
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fc faa3 	bl	800282c <OD_getSDOabCode>
 80062e6:	f8c7 0468 	str.w	r0, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 80062ea:	23f7      	movs	r3, #247	; 0xf7
 80062ec:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80062f0:	e02f      	b.n	8006352 <CO_SDOclientUpload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 80062f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80062f6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	7e1b      	ldrb	r3, [r3, #24]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <CO_SDOclientUpload+0x148>
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8006306:	4b54      	ldr	r3, [pc, #336]	; (8006458 <CO_SDOclientUpload+0x28c>)
 8006308:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 800630c:	23f7      	movs	r3, #247	; 0xf7
 800630e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006312:	e01e      	b.n	8006352 <CO_SDOclientUpload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U) {
 8006314:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006318:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	7e1b      	ldrb	r3, [r3, #24]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <CO_SDOclientUpload+0x16a>
                abortCode = CO_SDO_AB_WRITEONLY;
 8006328:	4b4c      	ldr	r3, [pc, #304]	; (800645c <CO_SDOclientUpload+0x290>)
 800632a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 800632e:	23f7      	movs	r3, #247	; 0xf7
 8006330:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006334:	e00d      	b.n	8006352 <CO_SDOclientUpload+0x186>
            } else if (SDO_C->OD_IO.read == NULL) {
 8006336:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800633a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d105      	bne.n	8006352 <CO_SDOclientUpload+0x186>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8006346:	4b43      	ldr	r3, [pc, #268]	; (8006454 <CO_SDOclientUpload+0x288>)
 8006348:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 800634c:	23f7      	movs	r3, #247	; 0xf7
 800634e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
            } else { /* MISRA C 2004 14.10 */
            }
        }

        size_t countFifo = CO_fifo_getSpace(&SDO_C->bufFifo);
 8006352:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006356:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3378      	adds	r3, #120	; 0x78
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd ff7c 	bl	800425c <CO_fifo_getSpace>
 8006364:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c

        /* skip copying if buffer full */
        if (countFifo == 0U) {
 8006368:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <CO_SDOclientUpload+0x1ac>
            ret = CO_SDO_RT_uploadDataBufferFull;
 8006370:	2305      	movs	r3, #5
 8006372:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006376:	e125      	b.n	80065c4 <CO_SDOclientUpload+0x3f8>
        }
        /* read data, in several passes if necessary */
        else if (SDO_C->OD_IO.read != NULL) {
 8006378:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800637c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 811d 	beq.w	80065c4 <CO_SDOclientUpload+0x3f8>
            /* Get size of data in Object Dictionary. If size is not indicated
             * use maximum SDO client buffer size. Prepare temp buffer. */
            OD_size_t countData = SDO_C->OD_IO.stream.dataLength;
 800638a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800638e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
            OD_size_t countBuf = ((countData > 0U) && (countData <= countFifo)) ? countData : (OD_size_t)countFifo;
 800639a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <CO_SDOclientUpload+0x1e8>
 80063a2:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80063a6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d802      	bhi.n	80063b4 <CO_SDOclientUpload+0x1e8>
 80063ae:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80063b2:	e001      	b.n	80063b8 <CO_SDOclientUpload+0x1ec>
 80063b4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80063b8:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            OD_size_t countRd = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
            uint8_t buf[CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U];

            /* load data from OD variable into the buffer */
            CO_LOCK_OD(SDO_C->CANdevTx);
 80063c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063c6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ce:	f3ef 8210 	mrs	r2, PRIMASK
 80063d2:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
  return(result);
 80063d6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80063da:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80063dc:	b672      	cpsid	i
}
 80063de:	bf00      	nop
            ODR_t odRet = SDO_C->OD_IO.read(&SDO_C->OD_IO.stream, buf, countBuf, &countRd);
 80063e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063e4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1c      	ldr	r4, [r3, #32]
 80063ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80063f0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f103 0008 	add.w	r0, r3, #8
 80063fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80063fe:	f107 0110 	add.w	r1, r7, #16
 8006402:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8006406:	47a0      	blx	r4
 8006408:	4603      	mov	r3, r0
 800640a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
            CO_UNLOCK_OD(SDO_C->CANdevTx);
 800640e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006412:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8006424:	f383 8810 	msr	PRIMASK, r3
}
 8006428:	bf00      	nop

            if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 800642a:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <CO_SDOclientUpload+0x294>
 8006432:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d011      	beq.n	8006460 <CO_SDOclientUpload+0x294>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800643c:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 8006440:	4618      	mov	r0, r3
 8006442:	f7fc f9f3 	bl	800282c <OD_getSDOabCode>
 8006446:	f8c7 0468 	str.w	r0, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithServerAbort;
 800644a:	23f6      	movs	r3, #246	; 0xf6
 800644c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006450:	e0b8      	b.n	80065c4 <CO_SDOclientUpload+0x3f8>
 8006452:	bf00      	nop
 8006454:	06040047 	.word	0x06040047
 8006458:	06010000 	.word	0x06010000
 800645c:	06010001 	.word	0x06010001
            } else {
                /* if data is string, send only data up to null termination */
                if ((countRd > 0U) && (countRd <= CO_CONFIG_SDO_CLI_BUFFER_SIZE)
 8006460:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006464:	2b00      	cmp	r3, #0
 8006466:	d03f      	beq.n	80064e8 <CO_SDOclientUpload+0x31c>
 8006468:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800646c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006470:	d83a      	bhi.n	80064e8 <CO_SDOclientUpload+0x31c>
                    && ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8006472:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006476:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	7e1b      	ldrb	r3, [r3, #24]
 800647e:	b25b      	sxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	da31      	bge.n	80064e8 <CO_SDOclientUpload+0x31c>
                    buf[countRd] = 0; /* (buf is one byte larger) */
 8006484:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006488:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800648c:	f5a2 628c 	sub.w	r2, r2, #1120	; 0x460
 8006490:	2100      	movs	r1, #0
 8006492:	54d1      	strb	r1, [r2, r3]
                    OD_size_t countStr = (OD_size_t)strlen((char*)buf);
 8006494:	f107 0310 	add.w	r3, r7, #16
 8006498:	4618      	mov	r0, r3
 800649a:	f7f9 fef9 	bl	8000290 <strlen>
 800649e:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
                    if (countStr == 0U) {
 80064a2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <CO_SDOclientUpload+0x2e4>
                        countStr = 1; /* no zero length */
 80064aa:	2301      	movs	r3, #1
 80064ac:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
                    }
                    if (countStr < countRd) {
 80064b0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80064b4:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d215      	bcs.n	80064e8 <CO_SDOclientUpload+0x31c>
                        /* string terminator found, finish read, shorten data */
                        countRd = countStr;
 80064bc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80064c0:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
                        odRet = ODR_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
                        SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran + countRd;
 80064ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80064ce:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064d6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80064da:	441a      	add	r2, r3
 80064dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80064e0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
                    }
                }

                (void)CO_fifo_write(&SDO_C->bufFifo, buf, countRd, NULL);
 80064e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80064ec:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80064f6:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80064fa:	f107 0110 	add.w	r1, r7, #16
 80064fe:	2300      	movs	r3, #0
 8006500:	f003 fa72 	bl	80099e8 <CO_fifo_write>
                SDO_C->sizeTran += countRd;
 8006504:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006508:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006510:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006514:	441a      	add	r2, r3
 8006516:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800651a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	669a      	str	r2, [r3, #104]	; 0x68

                /* verify if size of data uploaded is too large */
                SDO_C->sizeInd = SDO_C->OD_IO.stream.dataLength;
 8006522:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006526:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006532:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	665a      	str	r2, [r3, #100]	; 0x64
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 800653a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800653e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006546:	2b00      	cmp	r3, #0
 8006548:	d014      	beq.n	8006574 <CO_SDOclientUpload+0x3a8>
 800654a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800654e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006556:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800655a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	429a      	cmp	r2, r3
 8006564:	d906      	bls.n	8006574 <CO_SDOclientUpload+0x3a8>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8006566:	4bcb      	ldr	r3, [pc, #812]	; (8006894 <CO_SDOclientUpload+0x6c8>)
 8006568:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    ret = CO_SDO_RT_endedWithClientAbort;
 800656c:	23f7      	movs	r3, #247	; 0xf7
 800656e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006572:	e027      	b.n	80065c4 <CO_SDOclientUpload+0x3f8>
                }
                /* If no more segments to be upload, finish */
                else if (odRet == ODR_OK) {
 8006574:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 8006578:	2b00      	cmp	r3, #0
 800657a:	d120      	bne.n	80065be <CO_SDOclientUpload+0x3f2>
                    /* verify size of data uploaded */
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 800657c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006580:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006588:	2b00      	cmp	r3, #0
 800658a:	d014      	beq.n	80065b6 <CO_SDOclientUpload+0x3ea>
 800658c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006590:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006598:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800659c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d206      	bcs.n	80065b6 <CO_SDOclientUpload+0x3ea>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 80065a8:	4bbb      	ldr	r3, [pc, #748]	; (8006898 <CO_SDOclientUpload+0x6cc>)
 80065aa:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        ret = CO_SDO_RT_endedWithClientAbort;
 80065ae:	23f7      	movs	r3, #247	; 0xf7
 80065b0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80065b4:	e006      	b.n	80065c4 <CO_SDOclientUpload+0x3f8>
                    } else {
                        ret = CO_SDO_RT_ok_communicationEnd;
 80065b6:	2300      	movs	r3, #0
 80065b8:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80065bc:	e002      	b.n	80065c4 <CO_SDOclientUpload+0x3f8>
                    }
                } else {
                    ret = CO_SDO_RT_waitingLocalTransfer;
 80065be:	2306      	movs	r3, #6
 80065c0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                }
            }
        } else { /* MISRA C 2004 14.10 */
        }

        if ((ret != CO_SDO_RT_uploadDataBufferFull) && (ret != CO_SDO_RT_waitingLocalTransfer)) {
 80065c4:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	d00d      	beq.n	80065e8 <CO_SDOclientUpload+0x41c>
 80065cc:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	d009      	beq.n	80065e8 <CO_SDOclientUpload+0x41c>
            SDO_C->state = CO_SDO_ST_IDLE;
 80065d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065d8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 80065e4:	f000 bcd8 	b.w	8006f98 <CO_SDOclientUpload+0xdcc>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        /* Inform OS to call this function again without delay. */
        else if (timerNext_us != NULL) {
 80065e8:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 84d3 	beq.w	8006f98 <CO_SDOclientUpload+0xdcc>
            *timerNext_us = 0;
 80065f2:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 80065fa:	f000 bccd 	b.w	8006f98 <CO_SDOclientUpload+0xdcc>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received */
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 80065fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006602:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8498 	beq.w	8006f42 <CO_SDOclientUpload+0xd76>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80U) {
 8006612:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006616:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006620:	2b80      	cmp	r3, #128	; 0x80
 8006622:	d11a      	bne.n	800665a <CO_SDOclientUpload+0x48e>
            uint32_t code;
            (void)memcpy((void*)(&code), (const void*)(&SDO_C->CANrxData[4]), sizeof(code));
 8006624:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006628:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8006638:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800663c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            SDO_C->state = CO_SDO_ST_IDLE;
 8006640:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006644:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithServerAbort;
 8006650:	23f6      	movs	r3, #246	; 0xf6
 8006652:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006656:	f000 bc5e 	b.w	8006f16 <CO_SDOclientUpload+0xd4a>
        } else if (send_abort) {
 800665a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800665e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <CO_SDOclientUpload+0x4d2>
            abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8006668:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800666c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d006      	beq.n	8006684 <CO_SDOclientUpload+0x4b8>
 8006676:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800667a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	e000      	b.n	8006686 <CO_SDOclientUpload+0x4ba>
 8006684:	4b85      	ldr	r3, [pc, #532]	; (800689c <CO_SDOclientUpload+0x6d0>)
 8006686:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            SDO_C->state = CO_SDO_ST_ABORT;
 800668a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800668e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800669a:	f000 bc3c 	b.w	8006f16 <CO_SDOclientUpload+0xd4a>
        } else {
            switch (SDO_C->state) {
 800669e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066a2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b66      	cmp	r3, #102	; 0x66
 80066b0:	f000 8361 	beq.w	8006d76 <CO_SDOclientUpload+0xbaa>
 80066b4:	2b66      	cmp	r3, #102	; 0x66
 80066b6:	f300 8421 	bgt.w	8006efc <CO_SDOclientUpload+0xd30>
 80066ba:	2b64      	cmp	r3, #100	; 0x64
 80066bc:	f000 842a 	beq.w	8006f14 <CO_SDOclientUpload+0xd48>
 80066c0:	2b64      	cmp	r3, #100	; 0x64
 80066c2:	f300 841b 	bgt.w	8006efc <CO_SDOclientUpload+0xd30>
 80066c6:	2b62      	cmp	r3, #98	; 0x62
 80066c8:	f000 81de 	beq.w	8006a88 <CO_SDOclientUpload+0x8bc>
 80066cc:	2b62      	cmp	r3, #98	; 0x62
 80066ce:	f300 8415 	bgt.w	8006efc <CO_SDOclientUpload+0xd30>
 80066d2:	2b22      	cmp	r3, #34	; 0x22
 80066d4:	d004      	beq.n	80066e0 <CO_SDOclientUpload+0x514>
 80066d6:	2b24      	cmp	r3, #36	; 0x24
 80066d8:	f000 80e6 	beq.w	80068a8 <CO_SDOclientUpload+0x6dc>
 80066dc:	f000 bc0e 	b.w	8006efc <CO_SDOclientUpload+0xd30>
                case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xF0U) == 0x40U) {
 80066e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066e4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80066ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	f040 80c1 	bne.w	800687a <CO_SDOclientUpload+0x6ae>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 80066f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066fc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006706:	b29b      	uxth	r3, r3
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
                        index |= SDO_C->CANrxData[1];
 800670e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006712:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8006722:	4313      	orrs	r3, r2
 8006724:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
                        subindex = SDO_C->CANrxData[3];
 8006728:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800672c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8006736:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 800673a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800673e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006748:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	; 0x42e
 800674c:	429a      	cmp	r2, r3
 800674e:	d10a      	bne.n	8006766 <CO_SDOclientUpload+0x59a>
 8006750:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006754:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800675e:	f897 242d 	ldrb.w	r2, [r7, #1069]	; 0x42d
 8006762:	429a      	cmp	r2, r3
 8006764:	d00b      	beq.n	800677e <CO_SDOclientUpload+0x5b2>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8006766:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <CO_SDOclientUpload+0x6d4>)
 8006768:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 800676c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006770:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 800677c:	e3cb      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        }

                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 800677e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006782:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d044      	beq.n	800681e <CO_SDOclientUpload+0x652>
                            /* Expedited transfer */
                            size_t count = 4;
 8006794:	2304      	movs	r3, #4
 8006796:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
                            /* is size indicated? */
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 800679a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800679e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00f      	beq.n	80067d0 <CO_SDOclientUpload+0x604>
                                count -= (((size_t)SDO_C->CANrxData[0]) >> 2) & 0x03U;
 80067b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067b4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
                            }
                            /* copy data, indicate size and finish */
                            (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[4], count, NULL);
 80067d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067d4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80067de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067e2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 6191 	add.w	r1, r3, #1160	; 0x488
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80067f2:	f003 f8f9 	bl	80099e8 <CO_fifo_write>
                            SDO_C->sizeTran = count;
 80067f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067fa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8006804:	669a      	str	r2, [r3, #104]	; 0x68
                            SDO_C->state = CO_SDO_ST_IDLE;
 8006806:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800680a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800681c:	e37b      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 800681e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006822:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d011      	beq.n	8006858 <CO_SDOclientUpload+0x68c>
                                (void)memcpy((void*)(&size), (void*)(&SDO_C->CANrxData[4]), sizeof(size));
 8006834:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006838:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
                                SDO_C->sizeInd = CO_SWAP_32(size);
 8006848:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800684c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006850:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	665a      	str	r2, [r3, #100]	; 0x64
                            SDO_C->toggle = 0x00;
 8006858:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800685c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8006868:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800686c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2223      	movs	r2, #35	; 0x23
 8006874:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006878:	e34d      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <CO_SDOclientUpload+0x6d8>)
 800687c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006880:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006884:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006890:	e341      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
 8006892:	bf00      	nop
 8006894:	06070012 	.word	0x06070012
 8006898:	06070013 	.word	0x06070013
 800689c:	06040047 	.word	0x06040047
 80068a0:	06040043 	.word	0x06040043
 80068a4:	05040001 	.word	0x05040001
                }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xE0U) == 0x00U) {
 80068a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068ac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80068b6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 80d8 	bne.w	8006a70 <CO_SDOclientUpload+0x8a4>
                        size_t count, countWr;

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO_C->CANrxData[0] & 0x10U;
 80068c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068c4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
                        if (toggle != SDO_C->toggle) {
 80068d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068da:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80068e4:	f897 2438 	ldrb.w	r2, [r7, #1080]	; 0x438
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d00b      	beq.n	8006904 <CO_SDOclientUpload+0x738>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 80068ec:	4baf      	ldr	r3, [pc, #700]	; (8006bac <CO_SDOclientUpload+0x9e0>)
 80068ee:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 80068f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068f6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006902:	e308      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        }
                        SDO_C->toggle = (toggle == 0x00U) ? 0x10U : 0x00U;
 8006904:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <CO_SDOclientUpload+0x744>
 800690c:	2210      	movs	r2, #16
 800690e:	e000      	b.n	8006912 <CO_SDOclientUpload+0x746>
 8006910:	2200      	movs	r2, #0
 8006912:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006916:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

                        /* get data size and write data to the buffer */
                        count = (size_t)(7U) - (((size_t)(SDO_C->CANrxData[0]) >> 1) & 0x07U);
 8006920:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006924:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	43db      	mvns	r3, r3
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
                        countWr = CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[1], count, NULL);
 800693c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006940:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800694a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800694e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f203 4185 	addw	r1, r3, #1157	; 0x485
 8006958:	2300      	movs	r3, #0
 800695a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800695e:	f003 f843 	bl	80099e8 <CO_fifo_write>
 8006962:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
                        SDO_C->sizeTran += countWr;
 8006966:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800696a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006972:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006976:	441a      	add	r2, r3
 8006978:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800697c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	669a      	str	r2, [r3, #104]	; 0x68

                        /* verify, if there was not enough space in fifo buffer */
                        if (countWr != count) {
 8006984:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8006988:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800698c:	429a      	cmp	r2, r3
 800698e:	d00b      	beq.n	80069a8 <CO_SDOclientUpload+0x7dc>
                            abortCode = CO_SDO_AB_OUT_OF_MEM;
 8006990:	4b87      	ldr	r3, [pc, #540]	; (8006bb0 <CO_SDOclientUpload+0x9e4>)
 8006992:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006996:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800699a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 80069a6:	e2b6      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        }

                        /* verify if size of data uploaded is too large */
                        if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 80069a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069ac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d019      	beq.n	80069ec <CO_SDOclientUpload+0x820>
 80069b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069bc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069c8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d90b      	bls.n	80069ec <CO_SDOclientUpload+0x820>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80069d4:	4b77      	ldr	r3, [pc, #476]	; (8006bb4 <CO_SDOclientUpload+0x9e8>)
 80069d6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 80069da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 80069ea:	e294      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        }

                        /* If no more segments to be upload, finish */
                        if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 80069ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069f0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d02d      	beq.n	8006a5e <CO_SDOclientUpload+0x892>
                            /* verify size of data uploaded */
                            if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8006a02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a06:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d019      	beq.n	8006a46 <CO_SDOclientUpload+0x87a>
 8006a12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a16:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a22:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d20b      	bcs.n	8006a46 <CO_SDOclientUpload+0x87a>
                                abortCode = CO_SDO_AB_DATA_SHORT;
 8006a2e:	4b62      	ldr	r3, [pc, #392]	; (8006bb8 <CO_SDOclientUpload+0x9ec>)
 8006a30:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                                SDO_C->state = CO_SDO_ST_ABORT;
 8006a34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a38:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006a44:	e267      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                                SDO_C->state = CO_SDO_ST_IDLE;
 8006a46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a4a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                                ret = CO_SDO_RT_ok_communicationEnd;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 8006a5c:	e25b      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8006a5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a62:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2223      	movs	r2, #35	; 0x23
 8006a6a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006a6e:	e252      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8006a70:	4b52      	ldr	r3, [pc, #328]	; (8006bbc <CO_SDOclientUpload+0x9f0>)
 8006a72:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006a76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a7a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006a86:	e246      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_SEGMENTED */

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xF9U) == 0xC0U) {
 8006a88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a8c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006a96:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8006a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a9c:	f040 8092 	bne.w	8006bc4 <CO_SDOclientUpload+0x9f8>
                        uint16_t index;
                        uint8_t subindex;

                        /* get server CRC support info and data size */
                        if ((SDO_C->CANrxData[0] & 0x04U) != 0U) {
 8006aa0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006aa4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <CO_SDOclientUpload+0x8fc>
                            SDO_C->block_crcEnabled = true;
 8006ab6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006aba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 8006ac6:	e007      	b.n	8006ad8 <CO_SDOclientUpload+0x90c>
                        } else {
                            SDO_C->block_crcEnabled = false;
 8006ac8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006acc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                        }
                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 8006ad8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006adc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <CO_SDOclientUpload+0x946>
                            uint32_t size;
                            (void)memcpy((void*)(&size), (const void*)(&SDO_C->CANrxData[4]), sizeof(size));
 8006aee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006af2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
                            SDO_C->sizeInd = CO_SWAP_32(size);
 8006b02:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8006b06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b0a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	665a      	str	r2, [r3, #100]	; 0x64
                        }

                        /* verify index and subindex */
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8006b12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b16:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
                        index |= SDO_C->CANrxData[1];
 8006b28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b2c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
                        subindex = SDO_C->CANrxData[3];
 8006b42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b46:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8006b50:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8006b54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b58:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b62:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d10a      	bne.n	8006b80 <CO_SDOclientUpload+0x9b4>
 8006b6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b6e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006b78:	f897 2439 	ldrb.w	r2, [r7, #1081]	; 0x439
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d00b      	beq.n	8006b98 <CO_SDOclientUpload+0x9cc>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8006b80:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <CO_SDOclientUpload+0x9f4>)
 8006b82:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006b86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b8a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006b96:	e1be      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                            SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2;
 8006b98:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b9c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2263      	movs	r2, #99	; 0x63
 8006ba4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006ba8:	e1b5      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
 8006baa:	bf00      	nop
 8006bac:	05030000 	.word	0x05030000
 8006bb0:	05040005 	.word	0x05040005
 8006bb4:	06070012 	.word	0x06070012
 8006bb8:	06070013 	.word	0x06070013
 8006bbc:	05040001 	.word	0x05040001
 8006bc0:	06040043 	.word	0x06040043
                    else if ((SDO_C->CANrxData[0] & 0xF0U) == 0x40U) {
 8006bc4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bc8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	f040 80c1 	bne.w	8006d5e <CO_SDOclientUpload+0xb92>
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8006bdc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006be0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
                        index |= SDO_C->CANrxData[1];
 8006bf2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bf6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
                        subindex = SDO_C->CANrxData[3];
 8006c0c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c10:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8006c1a:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8006c1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c22:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c2c:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d10a      	bne.n	8006c4a <CO_SDOclientUpload+0xa7e>
 8006c34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c38:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006c42:	f897 243d 	ldrb.w	r2, [r7, #1085]	; 0x43d
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d00b      	beq.n	8006c62 <CO_SDOclientUpload+0xa96>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8006c4a:	4bc8      	ldr	r3, [pc, #800]	; (8006f6c <CO_SDOclientUpload+0xda0>)
 8006c4c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006c50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c54:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006c60:	e159      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 8006c62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c66:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d044      	beq.n	8006d02 <CO_SDOclientUpload+0xb36>
                            size_t count = 4;
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8006c7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c82:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00f      	beq.n	8006cb4 <CO_SDOclientUpload+0xae8>
                                count -= ((size_t)(SDO_C->CANrxData[0]) >> 2) & 0x03U;
 8006c94:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c98:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
                            (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[4], count, NULL);
 8006cb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cb8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006cc2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cc6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f503 6191 	add.w	r1, r3, #1160	; 0x488
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8006cd6:	f002 fe87 	bl	80099e8 <CO_fifo_write>
                            SDO_C->sizeTran = count;
 8006cda:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cde:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8006ce8:	669a      	str	r2, [r3, #104]	; 0x68
                            SDO_C->state = CO_SDO_ST_IDLE;
 8006cea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cee:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 8006d00:	e109      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8006d02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d06:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d011      	beq.n	8006d3c <CO_SDOclientUpload+0xb70>
                                (void)memcpy((void*)(&size), (const void*)(&SDO_C->CANrxData[4]), sizeof(size));
 8006d18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d1c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                                SDO_C->sizeInd = CO_SWAP_32(size);
 8006d2c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8006d30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d34:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	665a      	str	r2, [r3, #100]	; 0x64
                            SDO_C->toggle = 0x00;
 8006d3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d40:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8006d4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d50:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2223      	movs	r2, #35	; 0x23
 8006d58:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006d5c:	e0db      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8006d5e:	4b84      	ldr	r3, [pc, #528]	; (8006f70 <CO_SDOclientUpload+0xda4>)
 8006d60:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006d64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d68:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006d74:	e0cf      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                    /* data are copied directly in the receive function */
                    break;
                }

                case CO_SDO_ST_UPLOAD_BLK_END_SREQ: {
                    if ((SDO_C->CANrxData[0] & 0xE3U) == 0xC1U) {
 8006d76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d7a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006d84:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006d88:	2bc1      	cmp	r3, #193	; 0xc1
 8006d8a:	f040 80ab 	bne.w	8006ee4 <CO_SDOclientUpload+0xd18>
                        /* Get number of data bytes in last segment, that do not
                         * contain data. Then copy remaining data into fifo */
                        uint8_t noData = ((SDO_C->CANrxData[0] >> 2) & 0x07U);
 8006d8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d92:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
                        (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->block_dataUploadLast[0], (size_t)(7U) - noData,
 8006da8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006db6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f503 6195 	add.w	r1, r3, #1192	; 0x4a8
 8006dc4:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 8006dc8:	f1c3 0207 	rsb	r2, r3, #7
 8006dcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dd0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8006dda:	f002 fe05 	bl	80099e8 <CO_fifo_write>
                                            &SDO_C->block_crc);
                        SDO_C->sizeTran += (size_t)(7U) - noData;
 8006dde:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006de2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006dea:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	1dda      	adds	r2, r3, #7
 8006df2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006df6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	669a      	str	r2, [r3, #104]	; 0x68

                        /* verify length */
                        if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran != SDO_C->sizeInd)) {
 8006dfe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e02:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d029      	beq.n	8006e62 <CO_SDOclientUpload+0xc96>
 8006e0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e12:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e1e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d01b      	beq.n	8006e62 <CO_SDOclientUpload+0xc96>
                            abortCode = (SDO_C->sizeTran > SDO_C->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8006e2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e2e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e3a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d901      	bls.n	8006e4a <CO_SDOclientUpload+0xc7e>
 8006e46:	4b4b      	ldr	r3, [pc, #300]	; (8006f74 <CO_SDOclientUpload+0xda8>)
 8006e48:	e000      	b.n	8006e4c <CO_SDOclientUpload+0xc80>
 8006e4a:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <CO_SDOclientUpload+0xdac>)
 8006e4c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006e50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e54:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006e60:	e059      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        }

                        /* verify CRC */
                        if (SDO_C->block_crcEnabled) {
 8006e62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e66:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02e      	beq.n	8006ed2 <CO_SDOclientUpload+0xd06>
                            uint16_t crcServer;
                            crcServer = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8006e74:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e78:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	f8a7 3440 	strh.w	r3, [r7, #1088]	; 0x440
                            crcServer |= SDO_C->CANrxData[1];
 8006e8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e8e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	f8b7 3440 	ldrh.w	r3, [r7, #1088]	; 0x440
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8a7 3440 	strh.w	r3, [r7, #1088]	; 0x440
                            if (crcServer != SDO_C->block_crc) {
 8006ea4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ea8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	; 0x4b0
 8006eb2:	f8b7 2440 	ldrh.w	r2, [r7, #1088]	; 0x440
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d00b      	beq.n	8006ed2 <CO_SDOclientUpload+0xd06>
                                abortCode = CO_SDO_AB_CRC;
 8006eba:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <CO_SDOclientUpload+0xdb0>)
 8006ebc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                                SDO_C->state = CO_SDO_ST_ABORT;
 8006ec0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ec4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                                break;
 8006ed0:	e021      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                            }
                        }
                        SDO_C->state = CO_SDO_ST_UPLOAD_BLK_END_CRSP;
 8006ed2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ed6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2267      	movs	r2, #103	; 0x67
 8006ede:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006ee2:	e018      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8006ee4:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <CO_SDOclientUpload+0xda4>)
 8006ee6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006eea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006eee:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006efa:	e00c      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ:
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
                case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
                default: {
                    abortCode = CO_SDO_AB_CMD;
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <CO_SDOclientUpload+0xda4>)
 8006efe:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    SDO_C->state = CO_SDO_ST_ABORT;
 8006f02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f06:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006f12:	e000      	b.n	8006f16 <CO_SDOclientUpload+0xd4a>
                    break;
 8006f14:	bf00      	nop
                }
            }
        }
        SDO_C->timeoutTimer = 0;
 8006f16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f1a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2200      	movs	r2, #0
 8006f22:	675a      	str	r2, [r3, #116]	; 0x74
        timeDifference_us = 0;
 8006f24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f28:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8006f30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f34:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8006f40:	e02b      	b.n	8006f9a <CO_SDOclientUpload+0xdce>
    } else if (send_abort) {
 8006f42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f46:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d024      	beq.n	8006f9a <CO_SDOclientUpload+0xdce>
        abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8006f50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f54:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d010      	beq.n	8006f80 <CO_SDOclientUpload+0xdb4>
 8006f5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f62:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	e00a      	b.n	8006f82 <CO_SDOclientUpload+0xdb6>
 8006f6c:	06040043 	.word	0x06040043
 8006f70:	05040001 	.word	0x05040001
 8006f74:	06070012 	.word	0x06070012
 8006f78:	06070013 	.word	0x06070013
 8006f7c:	05040004 	.word	0x05040004
 8006f80:	4ba4      	ldr	r3, [pc, #656]	; (8007214 <CO_SDOclientUpload+0x1048>)
 8006f82:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        SDO_C->state = CO_SDO_ST_ABORT;
 8006f86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f8a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8006f96:	e000      	b.n	8006f9a <CO_SDOclientUpload+0xdce>
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 8006f98:	bf00      	nop
    } else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag */
    if (ret == CO_SDO_RT_waitingResponse) {
 8006f9a:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	f040 8100 	bne.w	80071a4 <CO_SDOclientUpload+0xfd8>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8006fa4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fa8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006fb0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fb4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d211      	bcs.n	8006fe4 <CO_SDOclientUpload+0xe18>
            SDO_C->timeoutTimer += timeDifference_us;
 8006fc0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fc4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006fcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fd0:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	441a      	add	r2, r3
 8006fd8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fdc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	675a      	str	r2, [r3, #116]	; 0x74
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8006fe4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fe8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006ff0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ff4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d336      	bcc.n	800706e <CO_SDOclientUpload+0xea2>
            bool_t state_upload_seg_req = (SDO_C->state == CO_SDO_ST_UPLOAD_SEGMENT_REQ);
 8007000:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007004:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b23      	cmp	r3, #35	; 0x23
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
            bool_t state_upload_blk_sublock_crsp = (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
 800701e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007022:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b65      	cmp	r3, #101	; 0x65
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            if (state_upload_seg_req || state_upload_blk_sublock_crsp) {
 800703c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <CO_SDOclientUpload+0xe80>
 8007044:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <CO_SDOclientUpload+0xe8a>
                /* application didn't empty buffer */
                abortCode = CO_SDO_AB_GENERAL;
 800704c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007050:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8007054:	e002      	b.n	800705c <CO_SDOclientUpload+0xe90>
            } else {
                abortCode = CO_SDO_AB_TIMEOUT;
 8007056:	4b70      	ldr	r3, [pc, #448]	; (8007218 <CO_SDOclientUpload+0x104c>)
 8007058:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            }
            SDO_C->state = CO_SDO_ST_ABORT;
 800705c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007060:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800706c:	e01e      	b.n	80070ac <CO_SDOclientUpload+0xee0>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        else if (timerNext_us != NULL) {
 800706e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01a      	beq.n	80070ac <CO_SDOclientUpload+0xee0>
            /* check again after timeout time elapsed */
            uint32_t diff = SDO_C->SDOtimeoutTime_us - SDO_C->timeoutTimer;
 8007076:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800707a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007082:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007086:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
            if (*timerNext_us > diff) {
 8007094:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800709e:	429a      	cmp	r2, r3
 80070a0:	d204      	bcs.n	80070ac <CO_SDOclientUpload+0xee0>
                *timerNext_us = diff;
 80070a2:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80070a6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80070aa:	601a      	str	r2, [r3, #0]
        }
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        /* Timeout for sub-block reception */
        if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80070ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070b0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b64      	cmp	r3, #100	; 0x64
 80070be:	d165      	bne.n	800718c <CO_SDOclientUpload+0xfc0>
            if (SDO_C->block_timeoutTimer < SDO_C->block_SDOtimeoutTime_us) {
 80070c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070c4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 80070ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070d2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80070dc:	429a      	cmp	r2, r3
 80070de:	d213      	bcs.n	8007108 <CO_SDOclientUpload+0xf3c>
                SDO_C->block_timeoutTimer += timeDifference_us;
 80070e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070e4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 80070ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070f2:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	441a      	add	r2, r3
 80070fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070fe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
            }
            if (SDO_C->block_timeoutTimer >= SDO_C->block_SDOtimeoutTime_us) {
 8007108:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800710c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 8007116:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800711a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007124:	429a      	cmp	r2, r3
 8007126:	d310      	bcc.n	800714a <CO_SDOclientUpload+0xf7e>
                /* SDO_C->state will change, processing will continue in this
                 * thread. Make memory barrier here with CO_FLAG_CLEAR() call. */
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8007128:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800712c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2265      	movs	r2, #101	; 0x65
 8007134:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8007138:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800713c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8007148:	e020      	b.n	800718c <CO_SDOclientUpload+0xfc0>
            }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
            else if (timerNext_us != NULL) {
 800714a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01c      	beq.n	800718c <CO_SDOclientUpload+0xfc0>
                /* check again after timeout time elapsed */
                uint32_t diff = SDO_C->block_SDOtimeoutTime_us - SDO_C->block_timeoutTimer;
 8007152:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007156:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8007160:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007164:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
                if (*timerNext_us > diff) {
 8007174:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 800717e:	429a      	cmp	r2, r3
 8007180:	d204      	bcs.n	800718c <CO_SDOclientUpload+0xfc0>
                    *timerNext_us = diff;
 8007182:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007186:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 800718a:	601a      	str	r2, [r3, #0]
            }
#endif
        }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_BLOCK */

        if (SDO_C->CANtxBuff->bufferFull) {
 800718c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007190:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <CO_SDOclientUpload+0xfd8>
            ret = CO_SDO_RT_transmittBufferFull;
 800719e:	2304      	movs	r3, #4
 80071a0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
        }
    }

    /* Transmit CAN data */
    if (ret == CO_SDO_RT_waitingResponse) {
 80071a4:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	f040 82aa 	bne.w	8007702 <CO_SDOclientUpload+0x1536>
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        size_t count;
#endif
        (void)memset((void*)&SDO_C->CANtxBuff->data[0], 0, 8);
 80071ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	3305      	adds	r3, #5
 80071bc:	2208      	movs	r2, #8
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f018 f84f 	bl	801f264 <memset>

        switch (SDO_C->state) {
 80071c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071ca:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b67      	cmp	r3, #103	; 0x67
 80071d8:	f300 8289 	bgt.w	80076ee <CO_SDOclientUpload+0x1522>
 80071dc:	2b61      	cmp	r3, #97	; 0x61
 80071de:	da04      	bge.n	80071ea <CO_SDOclientUpload+0x101e>
 80071e0:	2b21      	cmp	r3, #33	; 0x21
 80071e2:	d01b      	beq.n	800721c <CO_SDOclientUpload+0x1050>
 80071e4:	2b23      	cmp	r3, #35	; 0x23
 80071e6:	d06f      	beq.n	80072c8 <CO_SDOclientUpload+0x10fc>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
            case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
            default: {
                /* none */
                break;
 80071e8:	e281      	b.n	80076ee <CO_SDOclientUpload+0x1522>
        switch (SDO_C->state) {
 80071ea:	3b61      	subs	r3, #97	; 0x61
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	f200 827e 	bhi.w	80076ee <CO_SDOclientUpload+0x1522>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <CO_SDOclientUpload+0x102c>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800734b 	.word	0x0800734b
 80071fc:	080076ef 	.word	0x080076ef
 8007200:	0800748d 	.word	0x0800748d
 8007204:	080076ef 	.word	0x080076ef
 8007208:	0800751d 	.word	0x0800751d
 800720c:	080076ef 	.word	0x080076ef
 8007210:	080076a7 	.word	0x080076a7
 8007214:	06040047 	.word	0x06040047
 8007218:	05040000 	.word	0x05040000
                SDO_C->CANtxBuff->data[0] = 0x40;
 800721c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007220:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	2240      	movs	r2, #64	; 0x40
 800722a:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 800722c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007230:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800723a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800723e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800724a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800724e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	0a1b      	lsrs	r3, r3, #8
 800725a:	b29a      	uxth	r2, r3
 800725c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007260:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800726c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007270:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800727c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8007286:	721a      	strb	r2, [r3, #8]
                SDO_C->timeoutTimer = 0;
 8007288:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800728c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007296:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800729a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072a6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f00b fc01 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80072b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072ba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2222      	movs	r2, #34	; 0x22
 80072c2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 80072c6:	e21c      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                if (CO_fifo_getSpace(&SDO_C->bufFifo) < 7U) {
 80072c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072cc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3378      	adds	r3, #120	; 0x78
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fc ffc1 	bl	800425c <CO_fifo_getSpace>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b06      	cmp	r3, #6
 80072de:	d803      	bhi.n	80072e8 <CO_SDOclientUpload+0x111c>
                    ret = CO_SDO_RT_uploadDataBufferFull;
 80072e0:	2305      	movs	r3, #5
 80072e2:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 80072e6:	e20c      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0x60U | SDO_C->toggle;
 80072e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072ec:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 80072f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072fa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	715a      	strb	r2, [r3, #5]
                SDO_C->timeoutTimer = 0;
 800730a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800730e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007318:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800731c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007324:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007328:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f00b fbc0 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8007338:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800733c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8007348:	e1db      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA4;
 800734a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800734e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	22a4      	movs	r2, #164	; 0xa4
 8007358:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 800735a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800735e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007368:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800736c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8007378:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800737c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	b29a      	uxth	r2, r3
 800738a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800738e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800739a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800739e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80073aa:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 80073b4:	721a      	strb	r2, [r3, #8]
                count = CO_fifo_getSpace(&SDO_C->bufFifo) / 7U;
 80073b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073ba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3378      	adds	r3, #120	; 0x78
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fc ff4a 	bl	800425c <CO_fifo_getSpace>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4bca      	ldr	r3, [pc, #808]	; (80076f4 <CO_SDOclientUpload+0x1528>)
 80073cc:	fba3 1302 	umull	r1, r3, r3, r2
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	0852      	lsrs	r2, r2, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	089b      	lsrs	r3, r3, #2
 80073d8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
                if (count > 127U) {
 80073dc:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80073e0:	2b7f      	cmp	r3, #127	; 0x7f
 80073e2:	d903      	bls.n	80073ec <CO_SDOclientUpload+0x1220>
                    count = 127;
 80073e4:	237f      	movs	r3, #127	; 0x7f
 80073e6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80073ea:	e00f      	b.n	800740c <CO_SDOclientUpload+0x1240>
                } else if (count == 0U) {
 80073ec:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <CO_SDOclientUpload+0x1240>
                    abortCode = CO_SDO_AB_OUT_OF_MEM;
 80073f4:	4bc0      	ldr	r3, [pc, #768]	; (80076f8 <CO_SDOclientUpload+0x152c>)
 80073f6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    SDO_C->state = CO_SDO_ST_ABORT;
 80073fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073fe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 800740a:	e17a      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->block_blksize = (uint8_t)count;
 800740c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007410:	b2da      	uxtb	r2, r3
 8007412:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007416:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                SDO_C->CANtxBuff->data[4] = SDO_C->block_blksize;
 8007420:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007424:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007430:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	f892 24a1 	ldrb.w	r2, [r2, #1185]	; 0x4a1
 800743a:	725a      	strb	r2, [r3, #9]
                SDO_C->CANtxBuff->data[5] = CO_CONFIG_SDO_CLI_PST;
 800743c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007440:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	2215      	movs	r2, #21
 800744a:	729a      	strb	r2, [r3, #10]
                SDO_C->timeoutTimer = 0;
 800744c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007450:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2200      	movs	r2, #0
 8007458:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 800745a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800745e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007466:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800746a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f00b fb1f 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP;
 800747a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800747e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2262      	movs	r2, #98	; 0x62
 8007486:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 800748a:	e13a      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA3;
 800748c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007490:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	22a3      	movs	r2, #163	; 0xa3
 800749a:	715a      	strb	r2, [r3, #5]
                SDO_C->timeoutTimer = 0;
 800749c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074a0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	675a      	str	r2, [r3, #116]	; 0x74
                SDO_C->block_timeoutTimer = 0;
 80074aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074ae:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
                SDO_C->block_seqno = 0;
 80074ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074be:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                SDO_C->block_crc = 0;
 80074ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074ce:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80074da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2264      	movs	r2, #100	; 0x64
 80074e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80074ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074ee:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80074fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074fe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007506:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800750a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f00b facf 	bl	8012ab8 <CO_CANsend>
                break;
 800751a:	e0f2      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA2;
 800751c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007520:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	22a2      	movs	r2, #162	; 0xa2
 800752a:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = SDO_C->block_seqno;
 800752c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007530:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800753c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	f892 24a0 	ldrb.w	r2, [r2, #1184]	; 0x4a0
 8007546:	719a      	strb	r2, [r3, #6]
                if (SDO_C->finished) {
 8007548:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800754c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <CO_SDOclientUpload+0x139e>
                    SDO_C->state = CO_SDO_ST_UPLOAD_BLK_END_SREQ;
 8007558:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800755c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2266      	movs	r2, #102	; 0x66
 8007564:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8007568:	e076      	b.n	8007658 <CO_SDOclientUpload+0x148c>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 800756a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800756e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007576:	2b00      	cmp	r3, #0
 8007578:	d019      	beq.n	80075ae <CO_SDOclientUpload+0x13e2>
 800757a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800757e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007586:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800758a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007592:	429a      	cmp	r2, r3
 8007594:	d90b      	bls.n	80075ae <CO_SDOclientUpload+0x13e2>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8007596:	4b59      	ldr	r3, [pc, #356]	; (80076fc <CO_SDOclientUpload+0x1530>)
 8007598:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 800759c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075a0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 80075ac:	e0a9      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                    count = CO_fifo_getSpace(&SDO_C->bufFifo) / 7U;
 80075ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3378      	adds	r3, #120	; 0x78
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fc fe4e 	bl	800425c <CO_fifo_getSpace>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b4c      	ldr	r3, [pc, #304]	; (80076f4 <CO_SDOclientUpload+0x1528>)
 80075c4:	fba3 1302 	umull	r1, r3, r3, r2
 80075c8:	1ad2      	subs	r2, r2, r3
 80075ca:	0852      	lsrs	r2, r2, #1
 80075cc:	4413      	add	r3, r2
 80075ce:	089b      	lsrs	r3, r3, #2
 80075d0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
                    if (count >= 127U) {
 80075d4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80075d8:	2b7e      	cmp	r3, #126	; 0x7e
 80075da:	d903      	bls.n	80075e4 <CO_SDOclientUpload+0x1418>
                        count = 127;
 80075dc:	237f      	movs	r3, #127	; 0x7f
 80075de:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80075e2:	e017      	b.n	8007614 <CO_SDOclientUpload+0x1448>
                    } else if (CO_fifo_getOccupied(&SDO_C->bufFifo) > 0U) {
 80075e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3378      	adds	r3, #120	; 0x78
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fc fe4f 	bl	8004294 <CO_fifo_getOccupied>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <CO_SDOclientUpload+0x1448>
                        ret = CO_SDO_RT_uploadDataBufferFull;
 80075fc:	2305      	movs	r3, #5
 80075fe:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                        if (timerNext_us != NULL) {
 8007602:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007606:	2b00      	cmp	r3, #0
 8007608:	d07a      	beq.n	8007700 <CO_SDOclientUpload+0x1534>
                            *timerNext_us = 0;
 800760a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
                        break;
 8007612:	e075      	b.n	8007700 <CO_SDOclientUpload+0x1534>
                    SDO_C->block_blksize = (uint8_t)count;
 8007614:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007618:	b2da      	uxtb	r2, r3
 800761a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800761e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                    SDO_C->block_seqno = 0;
 8007628:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800762c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                    SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 8007638:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800763c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2264      	movs	r2, #100	; 0x64
 8007644:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8007648:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800764c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                SDO_C->CANtxBuff->data[2] = SDO_C->block_blksize;
 8007658:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800765c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007668:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	f892 24a1 	ldrb.w	r2, [r2, #1185]	; 0x4a1
 8007672:	71da      	strb	r2, [r3, #7]
                SDO_C->block_timeoutTimer = 0;
 8007674:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007678:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007684:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007688:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007690:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007694:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f00b fa0a 	bl	8012ab8 <CO_CANsend>
                break;
 80076a4:	e02d      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA1;
 80076a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076aa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	22a1      	movs	r2, #161	; 0xa1
 80076b4:	715a      	strb	r2, [r3, #5]
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80076b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076ba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076c6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f00b f9f1 	bl	8012ab8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_IDLE;
 80076d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076da:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                ret = CO_SDO_RT_ok_communicationEnd;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                break;
 80076ec:	e009      	b.n	8007702 <CO_SDOclientUpload+0x1536>
                break;
 80076ee:	bf00      	nop
 80076f0:	e007      	b.n	8007702 <CO_SDOclientUpload+0x1536>
 80076f2:	bf00      	nop
 80076f4:	24924925 	.word	0x24924925
 80076f8:	05040005 	.word	0x05040005
 80076fc:	06070012 	.word	0x06070012
                        break;
 8007700:	bf00      	nop
            }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8007702:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 8007706:	2b01      	cmp	r3, #1
 8007708:	d176      	bne.n	80077f8 <CO_SDOclientUpload+0x162c>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 800770a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800770e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d15f      	bne.n	80077de <CO_SDOclientUpload+0x1612>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 800771e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8007722:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8007726:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800772a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	2280      	movs	r2, #128	; 0x80
 8007734:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8007736:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800773a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007744:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007748:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8007754:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007758:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	b29a      	uxth	r2, r3
 8007766:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800776a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8007776:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800777a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007786:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8007790:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8007792:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007796:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	3309      	adds	r3, #9
 80077a0:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80077a4:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80077a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077aa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077b6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f00b f979 	bl	8012ab8 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 80077c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077ca:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithClientAbort;
 80077d6:	23f7      	movs	r3, #247	; 0xf7
 80077d8:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80077dc:	e00c      	b.n	80077f8 <CO_SDOclientUpload+0x162c>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        else if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80077de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077e2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d102      	bne.n	80077f8 <CO_SDOclientUpload+0x162c>
            ret = CO_SDO_RT_blockUploadInProgress;
 80077f2:	2302      	movs	r3, #2
 80077f4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
        } else { /* MISRA C 2004 14.10 */
        }
#endif
    }

    if (sizeIndicated != NULL) {
 80077f8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <CO_SDOclientUpload+0x1646>
        *sizeIndicated = SDO_C->sizeInd;
 8007800:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007804:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800780c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8007810:	601a      	str	r2, [r3, #0]
    }
    if (sizeTransferred != NULL) {
 8007812:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <CO_SDOclientUpload+0x1660>
        *sizeTransferred = SDO_C->sizeTran;
 800781a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800781e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007826:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800782a:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 800782c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007830:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <CO_SDOclientUpload+0x167e>
        *SDOabortCode = abortCode;
 800783a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800783e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8007848:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800784a:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
}
 800784e:	4618      	mov	r0, r3
 8007850:	f207 4774 	addw	r7, r7, #1140	; 0x474
 8007854:	46bd      	mov	sp, r7
 8007856:	bd90      	pop	{r4, r7, pc}

08007858 <CO_SDOclientUploadBufRead>:

size_t
CO_SDOclientUploadBufRead(CO_SDOclient_t* SDO_C, uint8_t* buf, size_t count)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
size_t ret = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]

if ( (SDO_C != NULL) && (buf != NULL) )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <CO_SDOclientUploadBufRead+0x2e>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <CO_SDOclientUploadBufRead+0x2e>
	{
	ret = CO_fifo_read(&SDO_C->bufFifo, buf, count, NULL);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800787a:	2300      	movs	r3, #0
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	f002 f90a 	bl	8009a98 <CO_fifo_read>
 8007884:	6178      	str	r0, [r7, #20]
	}

return ret;
 8007886:	697b      	ldr	r3, [r7, #20]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800789c:	73fb      	strb	r3, [r7, #15]
    return value;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <CO_getUint32>:
CO_getUint32(const void* buf) {
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80078b8:	60fb      	str	r3, [r7, #12]
    return value;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <OD_getIndex>:
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <OD_getIndex+0x14>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	e000      	b.n	80078de <OD_getIndex+0x16>
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <OD_extension_init>:
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <OD_extension_init+0x14>
 80078fa:	2305      	movs	r3, #5
 80078fc:	e003      	b.n	8007906 <OD_extension_init+0x1c>
    entry->extension = extension;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af02      	add	r7, sp, #8
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	460b      	mov	r3, r1
 8007920:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8007922:	7af9      	ldrb	r1, [r7, #11]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	2301      	movs	r3, #1
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7fa ff9b 	bl	8002868 <OD_get_value>
 8007932:	4603      	mov	r3, r0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af02      	add	r7, sp, #8
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	460b      	mov	r3, r1
 800794a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800794c:	7af9      	ldrb	r1, [r7, #11]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2304      	movs	r3, #4
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7fa ff86 	bl	8002868 <OD_get_value>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8007966:	b580      	push	{r7, lr}
 8007968:	b086      	sub	sp, #24
 800796a:	af02      	add	r7, sp, #8
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	460b      	mov	r3, r1
 8007974:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8007976:	1d3a      	adds	r2, r7, #4
 8007978:	7af9      	ldrb	r1, [r7, #11]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2304      	movs	r3, #4
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7fa ffae 	bl	80028e2 <OD_set_value>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	3305      	adds	r3, #5
 80079a8:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d115      	bne.n	80079dc <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d103      	bne.n	80079c0 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2200      	movs	r2, #0
 80079bc:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80079be:	e00d      	b.n	80079dc <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	3340      	adds	r3, #64	; 0x40
 80079cc:	7cfa      	ldrb	r2, [r7, #19]
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f017 fce3 	bl	801f39c <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2201      	movs	r2, #1
 80079da:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08a      	sub	sp, #40	; 0x28
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	80fb      	strh	r3, [r7, #6]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d106      	bne.n	8007a12 <CO_SDOserver_init_canRxTx+0x2e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d101      	bne.n	8007a12 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e04e      	b.n	8007ab0 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1c:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db02      	blt.n	8007a2a <CO_SDOserver_init_canRxTx+0x46>
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	e000      	b.n	8007a2c <CO_SDOserver_init_canRxTx+0x48>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db02      	blt.n	8007a3a <CO_SDOserver_init_canRxTx+0x56>
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	e000      	b.n	8007a3c <CO_SDOserver_init_canRxTx+0x58>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <CO_SDOserver_init_canRxTx+0x6e>
 8007a44:	8abb      	ldrh	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	611a      	str	r2, [r3, #16]
 8007a50:	e006      	b.n	8007a60 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8007a60:	8afa      	ldrh	r2, [r7, #22]
 8007a62:	88f9      	ldrh	r1, [r7, #6]
 8007a64:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <CO_SDOserver_init_canRxTx+0xd4>)
 8007a66:	9302      	str	r3, [sp, #8]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f00a ff47 	bl	8012908 <CO_CANrxBufferInit>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	8aba      	ldrh	r2, [r7, #20]
 8007a84:	88b9      	ldrh	r1, [r7, #4]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f00a ff98 	bl	80129c4 <CO_CANtxBufferInit>
 8007a94:	4602      	mov	r2, r0
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007aa2:	23ff      	movs	r3, #255	; 0xff
 8007aa4:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8007aac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	08007991 	.word	0x08007991

08007abc <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b08f      	sub	sp, #60	; 0x3c
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <OD_write_1201_additional+0x20>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <OD_write_1201_additional+0x20>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8007adc:	2309      	movs	r3, #9
 8007ade:	e0f9      	b.n	8007cd4 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	7d1b      	ldrb	r3, [r3, #20]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	f200 80e8 	bhi.w	8007cc0 <OD_write_1201_additional+0x204>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <OD_write_1201_additional+0x3c>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007bd1 	.word	0x08007bd1
 8007b04:	08007c97 	.word	0x08007c97
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8007b08:	2304      	movs	r3, #4
 8007b0a:	e0e3      	b.n	8007cd4 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8007b0c:	68b8      	ldr	r0, [r7, #8]
 8007b0e:	f7ff fecd 	bl	80078ac <CO_getUint32>
 8007b12:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b1c:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b28:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	0fdb      	lsrs	r3, r3, #31
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	4b69      	ldr	r3, [pc, #420]	; (8007cdc <OD_write_1201_additional+0x220>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d134      	bne.n	8007ba8 <OD_write_1201_additional+0xec>
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <OD_write_1201_additional+0x98>
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <OD_write_1201_additional+0x98>
 8007b4c:	8afa      	ldrh	r2, [r7, #22]
 8007b4e:	8abb      	ldrh	r3, [r7, #20]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d129      	bne.n	8007ba8 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d028      	beq.n	8007bac <OD_write_1201_additional+0xf0>
 8007b5a:	8afb      	ldrh	r3, [r7, #22]
 8007b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b5e:	d923      	bls.n	8007ba8 <OD_write_1201_additional+0xec>
 8007b60:	8afb      	ldrh	r3, [r7, #22]
 8007b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b66:	d903      	bls.n	8007b70 <OD_write_1201_additional+0xb4>
 8007b68:	8afb      	ldrh	r3, [r7, #22]
 8007b6a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007b6e:	d91b      	bls.n	8007ba8 <OD_write_1201_additional+0xec>
 8007b70:	8afb      	ldrh	r3, [r7, #22]
 8007b72:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007b76:	d903      	bls.n	8007b80 <OD_write_1201_additional+0xc4>
 8007b78:	8afb      	ldrh	r3, [r7, #22]
 8007b7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b7e:	d313      	bcc.n	8007ba8 <OD_write_1201_additional+0xec>
 8007b80:	8afb      	ldrh	r3, [r7, #22]
 8007b82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b86:	d903      	bls.n	8007b90 <OD_write_1201_additional+0xd4>
 8007b88:	8afb      	ldrh	r3, [r7, #22]
 8007b8a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007b8e:	d30b      	bcc.n	8007ba8 <OD_write_1201_additional+0xec>
 8007b90:	8afb      	ldrh	r3, [r7, #22]
 8007b92:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8007b96:	d303      	bcc.n	8007ba0 <OD_write_1201_additional+0xe4>
 8007b98:	8afb      	ldrh	r3, [r7, #22]
 8007b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b9e:	d303      	bcc.n	8007ba8 <OD_write_1201_additional+0xec>
 8007ba0:	8afb      	ldrh	r3, [r7, #22]
 8007ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ba6:	d901      	bls.n	8007bac <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8007ba8:	230f      	movs	r3, #15
 8007baa:	e093      	b.n	8007cd4 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bca:	f7ff ff0b 	bl	80079e4 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8007bce:	e07a      	b.n	8007cc6 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8007bd0:	68b8      	ldr	r0, [r7, #8]
 8007bd2:	f7ff fe6b 	bl	80078ac <CO_getUint32>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be0:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bec:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	0fdb      	lsrs	r3, r3, #31
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	4b38      	ldr	r3, [pc, #224]	; (8007cdc <OD_write_1201_additional+0x220>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d134      	bne.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <OD_write_1201_additional+0x15c>
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <OD_write_1201_additional+0x15c>
 8007c10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007c12:	8c3b      	ldrh	r3, [r7, #32]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d129      	bne.n	8007c6c <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d028      	beq.n	8007c70 <OD_write_1201_additional+0x1b4>
 8007c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c20:	2b7f      	cmp	r3, #127	; 0x7f
 8007c22:	d923      	bls.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2a:	d903      	bls.n	8007c34 <OD_write_1201_additional+0x178>
 8007c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c2e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007c32:	d91b      	bls.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c36:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007c3a:	d903      	bls.n	8007c44 <OD_write_1201_additional+0x188>
 8007c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c42:	d313      	bcc.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c4a:	d903      	bls.n	8007c54 <OD_write_1201_additional+0x198>
 8007c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c4e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007c52:	d30b      	bcc.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c56:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8007c5a:	d303      	bcc.n	8007c64 <OD_write_1201_additional+0x1a8>
 8007c5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c62:	d303      	bcc.n	8007c6c <OD_write_1201_additional+0x1b0>
 8007c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c6a:	d901      	bls.n	8007c70 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8007c6c:	230f      	movs	r3, #15
 8007c6e:	e031      	b.n	8007cd4 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c86:	9201      	str	r2, [sp, #4]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c90:	f7ff fea8 	bl	80079e4 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8007c94:	e017      	b.n	8007cc6 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d001      	beq.n	8007ca0 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8007c9c:	230b      	movs	r3, #11
 8007c9e:	e019      	b.n	8007cd4 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8007ca0:	68b8      	ldr	r0, [r7, #8]
 8007ca2:	f7ff fdf5 	bl	8007890 <CO_getUint8>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8007cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <OD_write_1201_additional+0x200>
 8007cb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da03      	bge.n	8007cc4 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8007cbc:	230f      	movs	r3, #15
 8007cbe:	e009      	b.n	8007cd4 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8007cc0:	230e      	movs	r3, #14
 8007cc2:	e007      	b.n	8007cd4 <OD_write_1201_additional+0x218>
            break;
 8007cc4:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7fa fbd0 	bl	8002472 <OD_writeOriginal>
 8007cd2:	4603      	mov	r3, r0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3734      	adds	r7, #52	; 0x34
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd90      	pop	{r4, r7, pc}
 8007cdc:	3ffff800 	.word	0x3ffff800

08007ce0 <CO_SDOserver_init>:
					uint16_t CANdevRxIdx,
					CO_CANmodule_t* CANdevTx,
					uint16_t CANdevTxIdx,
					uint32_t* errInfo
					)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	; 0x30
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d008      	beq.n	8007d06 <CO_SDOserver_init+0x26>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <CO_SDOserver_init+0x26>
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <CO_SDOserver_init+0x26>
 8007d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d102      	bne.n	8007d0c <CO_SDOserver_init+0x2c>
        { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	e0f5      	b.n	8007ef8 <CO_SDOserver_init+0x218>


    /* Configure object variables */
    SDO->OD = OD;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	731a      	strb	r2, [r3, #12]

#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8007d18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d1e:	fb03 f202 	mul.w	r2, r3, r2
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	679a      	str	r2, [r3, #120]	; 0x78

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif

    SDO->state = CO_SDO_ST_IDLE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d117      	bne.n	8007d62 <CO_SDOserver_init+0x82>
    {
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U))
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <CO_SDOserver_init+0x60>
 8007d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da02      	bge.n	8007d46 <CO_SDOserver_init+0x66>
        	{  return CO_ERROR_ILLEGAL_ARGUMENT; }
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	e0d8      	b.n	8007ef8 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8007d58:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	611a      	str	r2, [r3, #16]
 8007d60:	e0a4      	b.n	8007eac <CO_SDOserver_init+0x1cc>
    } else {
        	uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fdb0 	bl	80078c8 <OD_getIndex>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	847b      	strh	r3, [r7, #34]	; 0x22

        	if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8007d6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d6e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8007d72:	d123      	bne.n	8007dbc <CO_SDOserver_init+0xdc>
        	{
            /* configure default SDO channel and SDO server parameters for it */
        		if ((nodeId < 1U) || (nodeId > 127U)) {  return CO_ERROR_ILLEGAL_ARGUMENT;  }
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <CO_SDOserver_init+0xa2>
 8007d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da02      	bge.n	8007d88 <CO_SDOserver_init+0xa8>
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295
 8007d86:	e0b7      	b.n	8007ef8 <CO_SDOserver_init+0x218>

				CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007d90:	84fb      	strh	r3, [r7, #38]	; 0x26
				CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8007d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
				SDO->valid = true;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	611a      	str	r2, [r3, #16]

				(void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8007da2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007da4:	2301      	movs	r3, #1
 8007da6:	2101      	movs	r1, #1
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff fddc 	bl	8007966 <OD_set_u32>
				(void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8007dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007db0:	2301      	movs	r3, #1
 8007db2:	2102      	movs	r1, #2
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fdd6 	bl	8007966 <OD_set_u32>
 8007dba:	e077      	b.n	8007eac <CO_SDOserver_init+0x1cc>

        	} else if (
 8007dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dbe:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8007dc2:	d96f      	bls.n	8007ea4 <CO_SDOserver_init+0x1c4>
        				 (OD_SDOsrvParIdx >   (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
                      && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))
 8007dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dc6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8007dca:	d26b      	bcs.n	8007ea4 <CO_SDOserver_init+0x1c4>
							/* configure additional SDO channel and SDO server parameters for it */
						uint8_t maxSubIndex;
						uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

						/* get and verify parameters from Object Dictionary (initial values) */
						ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8007dcc:	f107 021d 	add.w	r2, r7, #29
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fd9c 	bl	8007912 <OD_get_u8>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8007de0:	f107 0218 	add.w	r2, r7, #24
 8007de4:	2301      	movs	r3, #1
 8007de6:	2101      	movs	r1, #1
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fda7 	bl	800793c <OD_get_u32>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3020 	strb.w	r3, [r7, #32]
						ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8007df4:	f107 0214 	add.w	r2, r7, #20
 8007df8:	2301      	movs	r3, #1
 8007dfa:	2102      	movs	r1, #2
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fd9d 	bl	800793c <OD_get_u32>
 8007e02:	4603      	mov	r3, r0
 8007e04:	77fb      	strb	r3, [r7, #31]

						 if (
 8007e06:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <CO_SDOserver_init+0x14a>
								(odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U))
 8007e0e:	7f7b      	ldrb	r3, [r7, #29]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d002      	beq.n	8007e1a <CO_SDOserver_init+0x13a>
 8007e14:	7f7b      	ldrb	r3, [r7, #29]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d107      	bne.n	8007e2a <CO_SDOserver_init+0x14a>
							 || (odRet1 != ODR_OK)|| (odRet2 != ODR_OK)
 8007e1a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <CO_SDOserver_init+0x14a>
 8007e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <CO_SDOserver_init+0x15c>
							) {
								if (errInfo != NULL) {*errInfo = OD_SDOsrvParIdx; }
 8007e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <CO_SDOserver_init+0x156>
 8007e30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e34:	601a      	str	r2, [r3, #0]
								return CO_ERROR_OD_PARAMETERS;
 8007e36:	f06f 030b 	mvn.w	r3, #11
 8007e3a:	e05d      	b.n	8007ef8 <CO_SDOserver_init+0x218>
							  }



						CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	db05      	blt.n	8007e4e <CO_SDOserver_init+0x16e>
												   ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	b29b      	uxth	r3, r3
						CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8007e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	e000      	b.n	8007e50 <CO_SDOserver_init+0x170>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	84fb      	strh	r3, [r7, #38]	; 0x26
												   : 0U;
						CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	db05      	blt.n	8007e64 <CO_SDOserver_init+0x184>
												   ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	b29b      	uxth	r3, r3
						CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8007e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	e000      	b.n	8007e66 <CO_SDOserver_init+0x186>
 8007e64:	2300      	movs	r3, #0
 8007e66:	84bb      	strh	r3, [r7, #36]	; 0x24
												   : 0U;


#if ( (CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0

            SDO->OD_1200_extension.object = SDO;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <CO_SDOserver_init+0x220>)
 8007e72:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a23      	ldr	r2, [pc, #140]	; (8007f04 <CO_SDOserver_init+0x224>)
 8007e78:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3358      	adds	r3, #88	; 0x58
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fd32 	bl	80078ea <OD_extension_init>
 8007e86:	4603      	mov	r3, r0
 8007e88:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK)
 8007e8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <CO_SDOserver_init+0x1ca>
            	{
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 8007e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <CO_SDOserver_init+0x1be>
 8007e98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e9c:	601a      	str	r2, [r3, #0]
                  return CO_ERROR_OD_PARAMETERS;
 8007e9e:	f06f 030b 	mvn.w	r3, #11
 8007ea2:	e029      	b.n	8007ef8 <CO_SDOserver_init+0x218>
                }


#endif
        } else { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e026      	b.n	8007ef8 <CO_SDOserver_init+0x218>
					  ) {
 8007eaa:	bf00      	nop


    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eb6:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007ebc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007ec6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eda:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8007edc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ee0:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8007ee4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8007ee6:	9201      	str	r2, [sp, #4]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	4603      	mov	r3, r0
 8007eec:	460a      	mov	r2, r1
 8007eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fd77 	bl	80079e4 <CO_SDOserver_init_canRxTx>
 8007ef6:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3728      	adds	r7, #40	; 0x28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	080023c3 	.word	0x080023c3
 8007f04:	08007abd 	.word	0x08007abd

08007f08 <validateAndWriteToOD>:
validateAndWriteToOD ( 	CO_SDOserver_t* SDO,
						CO_SDO_abortCode_t* abortCode,
						uint8_t crcOperation,
						uint16_t crcClient
					 )
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b08b      	sub	sp, #44	; 0x2c
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4611      	mov	r1, r2
 8007f14:	461a      	mov	r2, r3
 8007f16:	460b      	mov	r3, r1
 8007f18:	71fb      	strb	r3, [r7, #7]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8082 	beq.w	8008034 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d015      	beq.n	8007f64 <validateAndWriteToOD+0x5c>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d00f      	beq.n	8007f64 <validateAndWriteToOD+0x5c>
        {
         *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d901      	bls.n	8007f54 <validateAndWriteToOD+0x4c>
 8007f50:	4a73      	ldr	r2, [pc, #460]	; (8008120 <validateAndWriteToOD+0x218>)
 8007f52:	e000      	b.n	8007f56 <validateAndWriteToOD+0x4e>
 8007f54:	4a73      	ldr	r2, [pc, #460]	; (8008124 <validateAndWriteToOD+0x21c>)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	601a      	str	r2, [r3, #0]
          SDO->state = CO_SDO_ST_ABORT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	751a      	strb	r2, [r3, #20]
          return false;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e0d8      	b.n	8008116 <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f70:	b25b      	sxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da42      	bge.n	8007ffc <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <validateAndWriteToOD+0x7e>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f80:	6a3a      	ldr	r2, [r7, #32]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d93a      	bls.n	8007ffc <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d834      	bhi.n	8007ffc <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <validateAndWriteToOD+0xc2>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc4:	6a3a      	ldr	r2, [r7, #32]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d913      	bls.n	8007ff2 <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]
 8007ffa:	e02d      	b.n	8008058 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
 800800a:	e025      	b.n	8008058 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	429a      	cmp	r2, r3
 8008014:	d020      	beq.n	8008058 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	429a      	cmp	r2, r3
 800801e:	d201      	bcs.n	8008024 <validateAndWriteToOD+0x11c>
 8008020:	4a3f      	ldr	r2, [pc, #252]	; (8008120 <validateAndWriteToOD+0x218>)
 8008022:	e000      	b.n	8008026 <validateAndWriteToOD+0x11e>
 8008024:	4a3f      	ldr	r2, [pc, #252]	; (8008124 <validateAndWriteToOD+0x21c>)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	751a      	strb	r2, [r3, #20]
            return false;
 8008030:	2300      	movs	r3, #0
 8008032:	e070      	b.n	8008116 <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <validateAndWriteToOD+0x150>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008044:	429a      	cmp	r2, r3
 8008046:	d907      	bls.n	8008058 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4a35      	ldr	r2, [pc, #212]	; (8008120 <validateAndWriteToOD+0x218>)
 800804c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	751a      	strb	r2, [r3, #20]
            return false;
 8008054:	2300      	movs	r3, #0
 8008056:	e05e      	b.n	8008116 <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008060:	f3ef 8210 	mrs	r2, PRIMASK
 8008064:	617a      	str	r2, [r7, #20]
  return(result);
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800806a:	b672      	cpsid	i
}
 800806c:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f103 0018 	add.w	r0, r3, #24
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008084:	f107 0310 	add.w	r3, r7, #16
 8008088:	47a0      	blx	r4
 800808a:	4603      	mov	r3, r0
 800808c:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	bf00      	nop

    SDO->bufOffsetWr = 0;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80080a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d011      	beq.n	80080d2 <validateAndWriteToOD+0x1ca>
 80080ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d00c      	beq.n	80080d2 <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80080b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fa fbb5 	bl	800282c <OD_getSDOabCode>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	751a      	strb	r2, [r3, #20]
        return false;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e021      	b.n	8008116 <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <validateAndWriteToOD+0x1ec>
 80080da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d107      	bne.n	80080f4 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <validateAndWriteToOD+0x21c>)
 80080e8:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	751a      	strb	r2, [r3, #20]
        return false;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e010      	b.n	8008116 <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <validateAndWriteToOD+0x20c>
 80080fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4a06      	ldr	r2, [pc, #24]	; (8008120 <validateAndWriteToOD+0x218>)
 8008108:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	751a      	strb	r2, [r3, #20]
        return false;
 8008110:	2300      	movs	r3, #0
 8008112:	e000      	b.n	8008116 <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8008114:	2301      	movs	r3, #1
}
 8008116:	4618      	mov	r0, r3
 8008118:	372c      	adds	r7, #44	; 0x2c
 800811a:	46bd      	mov	sp, r7
 800811c:	bd90      	pop	{r4, r7, pc}
 800811e:	bf00      	nop
 8008120:	06070012 	.word	0x06070012
 8008124:	06070013 	.word	0x06070013

08008128 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8008128:	b590      	push	{r4, r7, lr}
 800812a:	b08d      	sub	sp, #52	; 0x34
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 80ab 	bne.w	80082a6 <readFromOd+0x17e>
 8008150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	f080 80a6 	bcs.w	80082a6 <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800816c:	4413      	add	r3, r2
 800816e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008170:	4619      	mov	r1, r3
 8008172:	f017 f85d 	bl	801f230 <memmove>
        SDO->bufOffsetRd = 0;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008182:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	f1c3 0320 	rsb	r3, r3, #32
 800818c:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008196:	f3ef 8210 	mrs	r2, PRIMASK
 800819a:	617a      	str	r2, [r7, #20]
  return(result);
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80081a0:	b672      	cpsid	i
}
 80081a2:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f103 0018 	add.w	r0, r3, #24
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	3380      	adds	r3, #128	; 0x80
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	18d1      	adds	r1, r2, r3
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	47a0      	blx	r4
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f383 8810 	msr	PRIMASK, r3
}
 80081d2:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80081d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d011      	beq.n	8008200 <readFromOd+0xd8>
 80081dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d00c      	beq.n	8008200 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80081e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fa fb1e 	bl	800282c <OD_getSDOabCode>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	751a      	strb	r2, [r3, #20]
            return false;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e053      	b.n	80082a8 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008204:	4413      	add	r3, r2
 8008206:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d027      	beq.n	800825e <readFromOd+0x136>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008214:	b25b      	sxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	da21      	bge.n	800825e <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	3380      	adds	r3, #128	; 0x80
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	3380      	adds	r3, #128	; 0x80
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7f8 f82e 	bl	8000290 <strlen>
 8008234:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <readFromOd+0x118>
                countStr = 1;
 800823c:	2301      	movs	r3, #1
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008244:	429a      	cmp	r2, r3
 8008246:	d20a      	bcs.n	800825e <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	441a      	add	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	441a      	add	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <readFromOd+0x156>
 8008274:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d110      	bne.n	80082a0 <readFromOd+0x178>
            SDO->finished = false;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d90a      	bls.n	80082a6 <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4a07      	ldr	r2, [pc, #28]	; (80082b0 <readFromOd+0x188>)
 8008294:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	751a      	strb	r2, [r3, #20]
                return false;
 800829c:	2300      	movs	r3, #0
 800829e:	e003      	b.n	80082a8 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 80082a6:	2301      	movs	r3, #1
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3734      	adds	r7, #52	; 0x34
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}
 80082b0:	06040047 	.word	0x06040047

080082b4 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b09b      	sub	sp, #108	; 0x6c
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 80082c8:	f06f 0301 	mvn.w	r3, #1
 80082cc:	f000 bd00 	b.w	8008cd0 <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bf14      	ite	ne
 80082e2:	2301      	movne	r3, #1
 80082e4:	2300      	moveq	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	7d1b      	ldrb	r3, [r3, #20]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <CO_SDOserver_process+0x56>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <CO_SDOserver_process+0x56>
 80082fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8008302:	2300      	movs	r3, #0
 8008304:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008308:	e2d7      	b.n	80088ba <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <CO_SDOserver_process+0x64>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8008324:	2300      	movs	r3, #0
 8008326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800832a:	e2c6      	b.n	80088ba <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 800832c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 82c3 	beq.w	80088ba <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	7d1b      	ldrb	r3, [r3, #20]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 80cc 	bne.w	80084d8 <CO_SDOserver_process+0x224>
            bool_t upload = false;
 8008340:	2300      	movs	r3, #0
 8008342:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800834a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800834e:	2b20      	cmp	r3, #32
 8008350:	d103      	bne.n	800835a <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2211      	movs	r2, #17
 8008356:	751a      	strb	r2, [r3, #20]
 8008358:	e00f      	b.n	800837a <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d105      	bne.n	8008370 <CO_SDOserver_process+0xbc>
                upload = true;
 8008364:	2301      	movs	r3, #1
 8008366:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2221      	movs	r2, #33	; 0x21
 800836c:	751a      	strb	r2, [r3, #20]
 800836e:	e004      	b.n	800837a <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8008370:	4ba7      	ldr	r3, [pc, #668]	; (8008610 <CO_SDOserver_process+0x35c>)
 8008372:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d162      	bne.n	8008446 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	b21a      	sxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008390:	b21b      	sxth	r3, r3
 8008392:	4313      	orrs	r3, r2
 8008394:	b21b      	sxth	r3, r3
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fa f8e6 	bl	8002584 <OD_find>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0218 	add.w	r2, r3, #24
 80083c4:	2300      	movs	r3, #0
 80083c6:	f7fa f939 	bl	800263c <OD_getSub>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 80083d0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80083d8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fa fa25 	bl	800282c <OD_getSDOabCode>
 80083e2:	4603      	mov	r3, r0
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	751a      	strb	r2, [r3, #20]
 80083ec:	e02b      	b.n	8008446 <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d105      	bne.n	8008408 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80083fc:	4b85      	ldr	r3, [pc, #532]	; (8008614 <CO_SDOserver_process+0x360>)
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	751a      	strb	r2, [r3, #20]
 8008406:	e01e      	b.n	8008446 <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8008408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <CO_SDOserver_process+0x174>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 800841c:	4b7e      	ldr	r3, [pc, #504]	; (8008618 <CO_SDOserver_process+0x364>)
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	751a      	strb	r2, [r3, #20]
 8008426:	e00e      	b.n	8008446 <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8008428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10b      	bne.n	8008446 <CO_SDOserver_process+0x192>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 800843c:	4b77      	ldr	r3, [pc, #476]	; (800861c <CO_SDOserver_process+0x368>)
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8008446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008448:	2b00      	cmp	r3, #0
 800844a:	d045      	beq.n	80084d8 <CO_SDOserver_process+0x224>
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d142      	bne.n	80084d8 <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800846e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008472:	2300      	movs	r3, #0
 8008474:	2207      	movs	r2, #7
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fe56 	bl	8008128 <readFromOd>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d02a      	beq.n	80084d8 <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01a      	beq.n	80084c0 <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	669a      	str	r2, [r3, #104]	; 0x68
 80084a4:	e018      	b.n	80084d8 <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d011      	beq.n	80084d8 <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80084b4:	4b5a      	ldr	r3, [pc, #360]	; (8008620 <CO_SDOserver_process+0x36c>)
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	751a      	strb	r2, [r3, #20]
 80084be:	e00b      	b.n	80084d8 <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c6:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db02      	blt.n	80084d2 <CO_SDOserver_process+0x21e>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	e000      	b.n	80084d4 <CO_SDOserver_process+0x220>
 80084d2:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	7d1b      	ldrb	r3, [r3, #20]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf14      	ite	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	2300      	moveq	r3, #0
 80084e6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	7d1b      	ldrb	r3, [r3, #20]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d005      	beq.n	8008500 <CO_SDOserver_process+0x24c>
 80084f4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <CO_SDOserver_process+0x24c>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <CO_SDOserver_process+0x24e>
 8008500:	2300      	movs	r3, #0
 8008502:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008506:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 8008512:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 81c7 	beq.w	80088aa <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7d1b      	ldrb	r3, [r3, #20]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	3b11      	subs	r3, #17
 8008524:	2b12      	cmp	r3, #18
 8008526:	f200 81b1 	bhi.w	800888c <CO_SDOserver_process+0x5d8>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <CO_SDOserver_process+0x27c>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	0800857d 	.word	0x0800857d
 8008534:	0800888d 	.word	0x0800888d
 8008538:	08008745 	.word	0x08008745
 800853c:	0800888d 	.word	0x0800888d
 8008540:	0800888d 	.word	0x0800888d
 8008544:	0800888d 	.word	0x0800888d
 8008548:	0800888d 	.word	0x0800888d
 800854c:	0800888d 	.word	0x0800888d
 8008550:	0800888d 	.word	0x0800888d
 8008554:	0800888d 	.word	0x0800888d
 8008558:	0800888d 	.word	0x0800888d
 800855c:	0800888d 	.word	0x0800888d
 8008560:	0800888d 	.word	0x0800888d
 8008564:	0800888d 	.word	0x0800888d
 8008568:	0800888d 	.word	0x0800888d
 800856c:	0800888d 	.word	0x0800888d
 8008570:	0800883b 	.word	0x0800883b
 8008574:	0800888d 	.word	0x0800888d
 8008578:	08008843 	.word	0x08008843
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80a2 	beq.w	80086d0 <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8008592:	2304      	movs	r3, #4
 8008594:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085aa:	089b      	lsrs	r3, r3, #2
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085b8:	e007      	b.n	80085ca <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 80085ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <CO_SDOserver_process+0x316>
 80085c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d801      	bhi.n	80085ca <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 80085c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
 80085ce:	2300      	movs	r3, #0
 80085d0:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80085d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085de:	4618      	mov	r0, r3
 80085e0:	f016 fedc 	bl	801f39c <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ea:	b25b      	sxtb	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	da21      	bge.n	8008634 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80085f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <CO_SDOserver_process+0x34a>
 80085f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d21a      	bcs.n	8008634 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 80085fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	2b01      	cmp	r3, #1
 800860a:	d10b      	bne.n	8008624 <CO_SDOserver_process+0x370>
 800860c:	2301      	movs	r3, #1
 800860e:	e00a      	b.n	8008626 <CO_SDOserver_process+0x372>
 8008610:	05040001 	.word	0x05040001
 8008614:	06010000 	.word	0x06010000
 8008618:	06010001 	.word	0x06010001
 800861c:	06010002 	.word	0x06010002
 8008620:	06040047 	.word	0x06040047
 8008624:	2302      	movs	r3, #2
 8008626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008628:	4413      	add	r3, r2
 800862a:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008630:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8008632:	e016      	b.n	8008662 <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8008634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800863e:	621a      	str	r2, [r3, #32]
 8008640:	e00f      	b.n	8008662 <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8008642:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008646:	429a      	cmp	r2, r3
 8008648:	d00b      	beq.n	8008662 <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800864a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800864c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864e:	429a      	cmp	r2, r3
 8008650:	d901      	bls.n	8008656 <CO_SDOserver_process+0x3a2>
 8008652:	4b91      	ldr	r3, [pc, #580]	; (8008898 <CO_SDOserver_process+0x5e4>)
 8008654:	e000      	b.n	8008658 <CO_SDOserver_process+0x3a4>
 8008656:	4b91      	ldr	r3, [pc, #580]	; (800889c <CO_SDOserver_process+0x5e8>)
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	751a      	strb	r2, [r3, #20]
                            break;
 8008660:	e123      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866a:	f3ef 8210 	mrs	r2, PRIMASK
 800866e:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8008670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008672:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8008674:	b672      	cpsid	i
}
 8008676:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f103 0018 	add.w	r0, r3, #24
 8008682:	f107 0320 	add.w	r3, r7, #32
 8008686:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800868a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800868c:	47a0      	blx	r4
 800868e:	4603      	mov	r3, r0
 8008690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	f383 8810 	msr	PRIMASK, r3
}
 80086a2:	bf00      	nop

                        if (odRet != ODR_OK) {
 80086a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80086ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fa f8bb 	bl	800282c <OD_getSDOabCode>
 80086b6:	4603      	mov	r3, r0
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	751a      	strb	r2, [r3, #20]
                            break;
 80086c0:	e0f3      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2212      	movs	r2, #18
 80086c6:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 80086ce:	e0ec      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d028      	beq.n	8008730 <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3344      	adds	r3, #68	; 0x44
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 80086f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01e      	beq.n	8008736 <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086fe:	429a      	cmp	r2, r3
 8008700:	d205      	bcs.n	800870e <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 8008702:	4b65      	ldr	r3, [pc, #404]	; (8008898 <CO_SDOserver_process+0x5e4>)
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	751a      	strb	r2, [r3, #20]
                                    break;
 800870c:	e0cd      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008714:	429a      	cmp	r2, r3
 8008716:	d90e      	bls.n	8008736 <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800871e:	b25b      	sxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	db08      	blt.n	8008736 <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8008724:	4b5d      	ldr	r3, [pc, #372]	; (800889c <CO_SDOserver_process+0x5e8>)
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	751a      	strb	r2, [r3, #20]
                                    break;
 800872e:	e0bc      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2212      	movs	r2, #18
 800873a:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 8008742:	e0b2      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800874a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d16d      	bne.n	800882e <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2301      	movne	r3, #1
 8008762:	2300      	moveq	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008780:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008784:	429a      	cmp	r2, r3
 8008786:	d005      	beq.n	8008794 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8008788:	4b45      	ldr	r3, [pc, #276]	; (80088a0 <CO_SDOserver_process+0x5ec>)
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	751a      	strb	r2, [r3, #20]
                            break;
 8008792:	e08a      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	43db      	mvns	r3, r3
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087b2:	18d0      	adds	r0, r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3341      	adds	r3, #65	; 0x41
 80087b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087ba:	4619      	mov	r1, r3
 80087bc:	f016 fdee 	bl	801f39c <memcpy>
                        SDO->bufOffsetWr += count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80087c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c8:	441a      	add	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80087d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d6:	441a      	add	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <CO_SDOserver_process+0x548>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d905      	bls.n	80087fc <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80087f0:	4b29      	ldr	r3, [pc, #164]	; (8008898 <CO_SDOserver_process+0x5e4>)
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	751a      	strb	r2, [r3, #20]
                            break;
 80087fa:	e056      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <CO_SDOserver_process+0x55e>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800880a:	f1c3 0320 	rsb	r3, r3, #32
 800880e:	2b08      	cmp	r3, #8
 8008810:	d809      	bhi.n	8008826 <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8008812:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008816:	2300      	movs	r3, #0
 8008818:	2200      	movs	r2, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fb74 	bl	8007f08 <validateAndWriteToOD>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d040      	beq.n	80088a8 <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2214      	movs	r2, #20
 800882a:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800882c:	e03d      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 800882e:	4b1d      	ldr	r3, [pc, #116]	; (80088a4 <CO_SDOserver_process+0x5f0>)
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	751a      	strb	r2, [r3, #20]
                    break;
 8008838:	e037      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2222      	movs	r2, #34	; 0x22
 800883e:	751a      	strb	r2, [r3, #20]
                    break;
 8008840:	e033      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008848:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800884c:	2b60      	cmp	r3, #96	; 0x60
 800884e:	d117      	bne.n	8008880 <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008864:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8008868:	429a      	cmp	r2, r3
 800886a:	d005      	beq.n	8008878 <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <CO_SDOserver_process+0x5ec>)
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	751a      	strb	r2, [r3, #20]
                            break;
 8008876:	e018      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2224      	movs	r2, #36	; 0x24
 800887c:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800887e:	e014      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8008880:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <CO_SDOserver_process+0x5f0>)
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	751a      	strb	r2, [r3, #20]
                    break;
 800888a:	e00e      	b.n	80088aa <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <CO_SDOserver_process+0x5f0>)
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	751a      	strb	r2, [r3, #20]
                    break;
 8008896:	e008      	b.n	80088aa <CO_SDOserver_process+0x5f6>
 8008898:	06070012 	.word	0x06070012
 800889c:	06070013 	.word	0x06070013
 80088a0:	05030000 	.word	0x05030000
 80088a4:	05040001 	.word	0x05040001
                                break;
 80088a8:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 80088ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d11e      	bne.n	8008900 <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d205      	bcs.n	80088da <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d304      	bcc.n	80088f0 <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 80088e6:	4b9c      	ldr	r3, [pc, #624]	; (8008b58 <CO_SDOserver_process+0x8a4>)
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 80088fa:	2304      	movs	r3, #4
 80088fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8008900:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008904:	2b01      	cmp	r3, #1
 8008906:	f040 81ab 	bne.w	8008c60 <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	3305      	adds	r3, #5
 8008910:	2208      	movs	r2, #8
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f016 fca5 	bl	801f264 <memset>

        switch (SDO->state) {
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	7d1b      	ldrb	r3, [r3, #20]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	3b12      	subs	r3, #18
 8008922:	2b12      	cmp	r3, #18
 8008924:	f200 8199 	bhi.w	8008c5a <CO_SDOserver_process+0x9a6>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <CO_SDOserver_process+0x67c>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	0800897d 	.word	0x0800897d
 8008934:	08008c5b 	.word	0x08008c5b
 8008938:	080089ff 	.word	0x080089ff
 800893c:	08008c5b 	.word	0x08008c5b
 8008940:	08008c5b 	.word	0x08008c5b
 8008944:	08008c5b 	.word	0x08008c5b
 8008948:	08008c5b 	.word	0x08008c5b
 800894c:	08008c5b 	.word	0x08008c5b
 8008950:	08008c5b 	.word	0x08008c5b
 8008954:	08008c5b 	.word	0x08008c5b
 8008958:	08008c5b 	.word	0x08008c5b
 800895c:	08008c5b 	.word	0x08008c5b
 8008960:	08008c5b 	.word	0x08008c5b
 8008964:	08008c5b 	.word	0x08008c5b
 8008968:	08008c5b 	.word	0x08008c5b
 800896c:	08008c5b 	.word	0x08008c5b
 8008970:	08008a5b 	.word	0x08008a5b
 8008974:	08008c5b 	.word	0x08008c5b
 8008978:	08008b29 	.word	0x08008b29
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2260      	movs	r2, #96	; 0x60
 8008982:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80089aa:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f00a f87b 	bl	8012ab8 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 80089d6:	e143      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2213      	movs	r2, #19
 80089fa:	751a      	strb	r2, [r3, #20]
                break;
 80089fc:	e130      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f042 0220 	orr.w	r2, r2, #32
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <CO_SDOserver_process+0x76a>
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	e000      	b.n	8008a20 <CO_SDOserver_process+0x76c>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f00a f83e 	bl	8012ab8 <CO_CANsend>
                if (SDO->finished) {
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d006      	beq.n	8008a52 <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8008a50:	e106      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2213      	movs	r2, #19
 8008a56:	751a      	strb	r2, [r3, #20]
                break;
 8008a58:	e102      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d024      	beq.n	8008aac <CO_SDOserver_process+0x7f8>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d820      	bhi.n	8008aac <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f1c3 0304 	rsb	r3, r3, #4
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f103 0009 	add.w	r0, r3, #9
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a98:	461a      	mov	r2, r3
 8008a9a:	f016 fc7f 	bl	801f39c <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008aaa:	e020      	b.n	8008aee <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00e      	beq.n	8008ad2 <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab8:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2241      	movs	r2, #65	; 0x41
 8008ac4:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	3309      	adds	r3, #9
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e003      	b.n	8008ada <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2240      	movs	r2, #64	; 0x40
 8008ad8:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2223      	movs	r2, #35	; 0x23
 8008aec:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8008b14:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f009 ffc9 	bl	8012ab8 <CO_CANsend>
                break;
 8008b26:	e09b      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8008b28:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2207      	movs	r2, #7
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff faf9 	bl	8008128 <readFromOd>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8090 	beq.w	8008c5e <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008b48:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d103      	bne.n	8008b5c <CO_SDOserver_process+0x8a8>
 8008b54:	2210      	movs	r2, #16
 8008b56:	e002      	b.n	8008b5e <CO_SDOserver_process+0x8aa>
 8008b58:	05040000 	.word	0x05040000
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8008b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b76:	2b06      	cmp	r3, #6
 8008b78:	d906      	bls.n	8008b88 <CO_SDOserver_process+0x8d4>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01b      	beq.n	8008bba <CO_SDOserver_process+0x906>
 8008b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b84:	2b07      	cmp	r3, #7
 8008b86:	d118      	bne.n	8008bba <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	795a      	ldrb	r2, [r3, #5]
 8008b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f1c3 0307 	rsb	r3, r3, #7
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f042 0201 	orr.w	r2, r2, #1
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008bb8:	e007      	b.n	8008bca <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2223      	movs	r2, #35	; 0x23
 8008bc4:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8008bc6:	2307      	movs	r3, #7
 8008bc8:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	1d98      	adds	r0, r3, #6
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bdc:	4413      	add	r3, r2
 8008bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008be0:	4619      	mov	r1, r3
 8008be2:	f016 fbdb 	bl	801f39c <memcpy>
                SDO->bufOffsetRd += count;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8008bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bfc:	441a      	add	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01e      	beq.n	8008c48 <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d905      	bls.n	8008c22 <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8008c16:	4b30      	ldr	r3, [pc, #192]	; (8008cd8 <CO_SDOserver_process+0xa24>)
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	751a      	strb	r2, [r3, #20]
                        break;
 8008c20:	e01e      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8008c22:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10e      	bne.n	8008c48 <CO_SDOserver_process+0x994>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d208      	bcs.n	8008c48 <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8008c36:	4b29      	ldr	r3, [pc, #164]	; (8008cdc <CO_SDOserver_process+0xa28>)
 8008c38:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	751a      	strb	r2, [r3, #20]
                        break;
 8008c46:	e00b      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f009 ff30 	bl	8012ab8 <CO_CANsend>
                break;
 8008c58:	e002      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <CO_SDOserver_process+0x9ac>
                    break;
 8008c5e:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8008c60:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d131      	bne.n	8008ccc <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d12c      	bne.n	8008ccc <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2280      	movs	r2, #128	; 0x80
 8008c7c:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8008ca4:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	3309      	adds	r3, #9
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f009 fefc 	bl	8012ab8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8008cc6:	23f6      	movs	r3, #246	; 0xf6
 8008cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8008ccc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	376c      	adds	r7, #108	; 0x6c
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd90      	pop	{r4, r7, pc}
 8008cd8:	06070012 	.word	0x06070012
 8008cdc:	06070013 	.word	0x06070013

08008ce0 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8008cec:	73fb      	strb	r3, [r7, #15]
    return value;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <CO_getUint32>:
CO_getUint32(const void* buf) {
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8008d08:	60fb      	str	r3, [r7, #12]
    return value;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <OD_getIndex>:
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <OD_getIndex+0x14>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	e000      	b.n	8008d2e <OD_getIndex+0x16>
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <OD_extension_init>:
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <OD_extension_init+0x14>
 8008d4a:	2305      	movs	r3, #5
 8008d4c:	e003      	b.n	8008d56 <OD_extension_init+0x1c>
    entry->extension = extension;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af02      	add	r7, sp, #8
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8008d72:	7af9      	ldrb	r1, [r7, #11]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	2301      	movs	r3, #1
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7f9 fd73 	bl	8002868 <OD_get_value>
 8008d82:	4603      	mov	r3, r0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8008d9c:	7af9      	ldrb	r1, [r7, #11]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	2304      	movs	r3, #4
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7f9 fd5e 	bl	8002868 <OD_get_value>
 8008dac:	4603      	mov	r3, r0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7c9b      	ldrb	r3, [r3, #18]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	749a      	strb	r2, [r3, #18]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	7c9a      	ldrb	r2, [r3, #18]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7c5b      	ldrb	r3, [r3, #17]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d902      	bls.n	8008ddc <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bf0c      	ite	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	2300      	movne	r3, #0
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	461a      	mov	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	7c92      	ldrb	r2, [r2, #18]
 8008dfe:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f009 fe54 	bl	8012ab8 <CO_CANsend>
 8008e10:	4603      	mov	r3, r0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8008e1a:	b480      	push	{r7}
 8008e1c:	b087      	sub	sp, #28
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	791b      	ldrb	r3, [r3, #4]
 8008e2c:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	7c5b      	ldrb	r3, [r3, #17]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8008e40:	2301      	movs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e019      	b.n	8008e7a <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	721a      	strb	r2, [r3, #8]
 8008e52:	e012      	b.n	8008e7a <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d109      	bne.n	8008e6e <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	3305      	adds	r3, #5
 8008e5e:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e005      	b.n	8008e7a <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bf0c      	ite	eq
 8008e88:	2301      	moveq	r3, #1
 8008e8a:	2300      	movne	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2201      	movs	r2, #1
 8008e98:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8008ea8:	b590      	push	{r4, r7, lr}
 8008eaa:	b08f      	sub	sp, #60	; 0x3c
 8008eac:	af04      	add	r7, sp, #16
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00c      	beq.n	8008ed6 <OD_write_1005+0x2e>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d108      	bne.n	8008ed6 <OD_write_1005+0x2e>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <OD_write_1005+0x2e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d102      	bne.n	8008ed6 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8008ed6:	2309      	movs	r3, #9
 8008ed8:	e0a2      	b.n	8009020 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8008ee0:	68b8      	ldr	r0, [r7, #8]
 8008ee2:	f7ff ff0b 	bl	8008cfc <CO_getUint32>
 8008ee6:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ef0:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8008f04:	6a3a      	ldr	r2, [r7, #32]
 8008f06:	4b48      	ldr	r3, [pc, #288]	; (8009028 <OD_write_1005+0x180>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d133      	bne.n	8008f76 <OD_write_1005+0xce>
 8008f0e:	8bfb      	ldrh	r3, [r7, #30]
 8008f10:	2b7f      	cmp	r3, #127	; 0x7f
 8008f12:	d930      	bls.n	8008f76 <OD_write_1005+0xce>
 8008f14:	8bfb      	ldrh	r3, [r7, #30]
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1a:	d903      	bls.n	8008f24 <OD_write_1005+0x7c>
 8008f1c:	8bfb      	ldrh	r3, [r7, #30]
 8008f1e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008f22:	d928      	bls.n	8008f76 <OD_write_1005+0xce>
 8008f24:	8bfb      	ldrh	r3, [r7, #30]
 8008f26:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8008f2a:	d903      	bls.n	8008f34 <OD_write_1005+0x8c>
 8008f2c:	8bfb      	ldrh	r3, [r7, #30]
 8008f2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f32:	d320      	bcc.n	8008f76 <OD_write_1005+0xce>
 8008f34:	8bfb      	ldrh	r3, [r7, #30]
 8008f36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f3a:	d903      	bls.n	8008f44 <OD_write_1005+0x9c>
 8008f3c:	8bfb      	ldrh	r3, [r7, #30]
 8008f3e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8008f42:	d318      	bcc.n	8008f76 <OD_write_1005+0xce>
 8008f44:	8bfb      	ldrh	r3, [r7, #30]
 8008f46:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8008f4a:	d303      	bcc.n	8008f54 <OD_write_1005+0xac>
 8008f4c:	8bfb      	ldrh	r3, [r7, #30]
 8008f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f52:	d310      	bcc.n	8008f76 <OD_write_1005+0xce>
 8008f54:	8bfb      	ldrh	r3, [r7, #30]
 8008f56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f5a:	d80c      	bhi.n	8008f76 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <OD_write_1005+0xd2>
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <OD_write_1005+0xd2>
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f70:	8bfa      	ldrh	r2, [r7, #30]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d001      	beq.n	8008f7a <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 8008f76:	230f      	movs	r3, #15
 8008f78:	e052      	b.n	8009020 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f80:	8bfa      	ldrh	r2, [r7, #30]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d039      	beq.n	8008ffa <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8008f8e:	8bfa      	ldrh	r2, [r7, #30]
 8008f90:	4b26      	ldr	r3, [pc, #152]	; (800902c <OD_write_1005+0x184>)
 8008f92:	9302      	str	r3, [sp, #8]
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008fa0:	f009 fcb2 	bl	8012908 <CO_CANrxBufferInit>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8008fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8008fb0:	2309      	movs	r3, #9
 8008fb2:	e035      	b.n	8009020 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <OD_write_1005+0x122>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <OD_write_1005+0x124>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	8bfa      	ldrh	r2, [r7, #30]
 8008fce:	2400      	movs	r4, #0
 8008fd0:	9401      	str	r4, [sp, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f009 fcf5 	bl	80129c4 <CO_CANtxBufferInit>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d104      	bne.n	8008ff2 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	2200      	movs	r2, #0
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8008fee:	2309      	movs	r3, #9
 8008ff0:	e016      	b.n	8009020 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	8bfa      	ldrh	r2, [r7, #30]
 8008ff6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	2200      	movs	r2, #0
 800900a:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	2200      	movs	r2, #0
 8009010:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7f9 fa2a 	bl	8002472 <OD_writeOriginal>
 800901e:	4603      	mov	r3, r0
}
 8009020:	4618      	mov	r0, r3
 8009022:	372c      	adds	r7, #44	; 0x2c
 8009024:	46bd      	mov	sp, r7
 8009026:	bd90      	pop	{r4, r7, pc}
 8009028:	bffff800 	.word	0xbffff800
 800902c:	08008e1b 	.word	0x08008e1b

08009030 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b089      	sub	sp, #36	; 0x24
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00c      	beq.n	800905e <OD_write_1019+0x2e>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	7d1b      	ldrb	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d108      	bne.n	800905e <OD_write_1019+0x2e>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <OD_write_1019+0x2e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d102      	bne.n	800905e <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 800905e:	2309      	movs	r3, #9
 8009060:	e040      	b.n	80090e4 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8009068:	68b8      	ldr	r0, [r7, #8]
 800906a:	f7ff fe39 	bl	8008ce0 <CO_getUint8>
 800906e:	4603      	mov	r3, r0
 8009070:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8009072:	7cfb      	ldrb	r3, [r7, #19]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d002      	beq.n	800907e <OD_write_1019+0x4e>
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2bf0      	cmp	r3, #240	; 0xf0
 800907c:	d901      	bls.n	8009082 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800907e:	230f      	movs	r3, #15
 8009080:	e030      	b.n	80090e4 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 800908c:	2317      	movs	r3, #23
 800908e:	e029      	b.n	80090e4 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090a0:	7cfb      	ldrb	r3, [r7, #19]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <OD_write_1019+0x7a>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <OD_write_1019+0x7c>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2400      	movs	r4, #0
 80090ae:	9401      	str	r4, [sp, #4]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	f009 fc86 	bl	80129c4 <CO_CANtxBufferInit>
 80090b8:	4602      	mov	r2, r0
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d104      	bne.n	80090d0 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80090cc:	2309      	movs	r3, #9
 80090ce:	e009      	b.n	80090e4 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	7cfa      	ldrb	r2, [r7, #19]
 80090d4:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7f9 f9c8 	bl	8002472 <OD_writeOriginal>
 80090e2:	4603      	mov	r3, r0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd90      	pop	{r4, r7, pc}

080090ec <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	; 0x30
 80090f0:	af04      	add	r7, sp, #16
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00e      	beq.n	800911e <CO_SYNC_init+0x32>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <CO_SYNC_init+0x32>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <CO_SYNC_init+0x32>
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	e0fd      	b.n	8009320 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8009124:	225c      	movs	r2, #92	; 0x5c
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f016 f89b 	bl	801f264 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800912e:	2380      	movs	r3, #128	; 0x80
 8009130:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8009132:	f107 0218 	add.w	r2, r7, #24
 8009136:	2301      	movs	r3, #1
 8009138:	2100      	movs	r1, #0
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff fe26 	bl	8008d8c <OD_get_u32>
 8009140:	4603      	mov	r3, r0
 8009142:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8009144:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00c      	beq.n	8009166 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 800914c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fde0 	bl	8008d18 <OD_getIndex>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8009160:	f06f 030b 	mvn.w	r3, #11
 8009164:	e0dc      	b.n	8009320 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4a6e      	ldr	r2, [pc, #440]	; (8009328 <CO_SYNC_init+0x23c>)
 8009170:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a6d      	ldr	r2, [pc, #436]	; (800932c <CO_SYNC_init+0x240>)
 8009176:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3338      	adds	r3, #56	; 0x38
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fddb 	bl	8008d3a <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8009184:	2300      	movs	r3, #0
 8009186:	2204      	movs	r2, #4
 8009188:	2100      	movs	r1, #0
 800918a:	6838      	ldr	r0, [r7, #0]
 800918c:	f7f9 fbe6 	bl	800295c <OD_getPtr>
 8009190:	4602      	mov	r2, r0
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10c      	bne.n	80091b8 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 800919e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d006      	beq.n	80091b2 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80091a4:	6838      	ldr	r0, [r7, #0]
 80091a6:	f7ff fdb7 	bl	8008d18 <OD_getIndex>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461a      	mov	r2, r3
 80091ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80091b2:	f06f 030b 	mvn.w	r3, #11
 80091b6:	e0b3      	b.n	8009320 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 80091b8:	2300      	movs	r3, #0
 80091ba:	2204      	movs	r2, #4
 80091bc:	2100      	movs	r1, #0
 80091be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c0:	f7f9 fbcc 	bl	800295c <OD_getPtr>
 80091c4:	4602      	mov	r2, r0
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d010      	beq.n	80091f2 <CO_SYNC_init+0x106>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 80091d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80091de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e0:	f7ff fd9a 	bl	8008d18 <OD_getIndex>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ea:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80091ec:	f06f 030b 	mvn.w	r3, #11
 80091f0:	e096      	b.n	8009320 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d033      	beq.n	8009264 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80091fc:	f107 0217 	add.w	r2, r7, #23
 8009200:	2301      	movs	r3, #1
 8009202:	2100      	movs	r1, #0
 8009204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009206:	f7ff fdac 	bl	8008d62 <OD_get_u8>
 800920a:	4603      	mov	r3, r0
 800920c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800920e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 8009216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d006      	beq.n	800922a <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800921c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800921e:	f7ff fd7b 	bl	8008d18 <OD_getIndex>
 8009222:	4603      	mov	r3, r0
 8009224:	461a      	mov	r2, r3
 8009226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009228:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800922a:	f06f 030b 	mvn.w	r3, #11
 800922e:	e077      	b.n	8009320 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d102      	bne.n	800923c <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8009236:	2302      	movs	r3, #2
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e004      	b.n	8009246 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2bf0      	cmp	r3, #240	; 0xf0
 8009240:	d901      	bls.n	8009246 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8009242:	23f0      	movs	r3, #240	; 0xf0
 8009244:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4a36      	ldr	r2, [pc, #216]	; (8009328 <CO_SYNC_init+0x23c>)
 8009250:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4a36      	ldr	r2, [pc, #216]	; (8009330 <CO_SYNC_init+0x244>)
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	334c      	adds	r3, #76	; 0x4c
 800925c:	4619      	mov	r1, r3
 800925e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009260:	f7ff fd6b 	bl	8008d3a <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8009264:	7dfa      	ldrb	r2, [r7, #23]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf14      	ite	ne
 800927a:	2301      	movne	r3, #1
 800927c:	2300      	moveq	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	461a      	mov	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	b29b      	uxth	r3, r3
 8009290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a0:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80092a6:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80092ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80092bc:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <CO_SYNC_init+0x248>)
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	2300      	movs	r3, #0
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80092cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ce:	f009 fb1b 	bl	8012908 <CO_CANrxBufferInit>
 80092d2:	4603      	mov	r3, r0
 80092d4:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 80092d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <CO_SYNC_init+0x1f8>
        return ret;
 80092de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80092e2:	e01d      	b.n	8009320 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ec:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <CO_SYNC_init+0x20c>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <CO_SYNC_init+0x20e>
 80092f8:	2300      	movs	r3, #0
 80092fa:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80092fc:	2000      	movs	r0, #0
 80092fe:	9001      	str	r0, [sp, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009306:	f009 fb5d 	bl	80129c4 <CO_CANtxBufferInit>
 800930a:	4602      	mov	r2, r0
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009318:	f04f 33ff 	mov.w	r3, #4294967295
 800931c:	e000      	b.n	8009320 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	080023c3 	.word	0x080023c3
 800932c:	08008ea9 	.word	0x08008ea9
 8009330:	08009031 	.word	0x08009031
 8009334:	08008e1b 	.word	0x08008e1b

08009338 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af02      	add	r7, sp, #8
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8009346:	2300      	movs	r3, #0
 8009348:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8088 	beq.w	8009462 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	4413      	add	r3, r2
 800935a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	429a      	cmp	r2, r3
 8009364:	d902      	bls.n	800936c <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d007      	beq.n	8009384 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800937a:	2301      	movs	r3, #1
 800937c:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <CO_SYNC_process+0x5c>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	e000      	b.n	8009396 <CO_SYNC_process+0x5e>
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d031      	beq.n	8009402 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d828      	bhi.n	8009402 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80093b0:	2301      	movs	r3, #1
 80093b2:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fcfe 	bl	8008db6 <CO_SYNCsend>
 80093ba:	e022      	b.n	8009402 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	7c1b      	ldrb	r3, [r3, #16]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d11e      	bne.n	8009402 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	085b      	lsrs	r3, r3, #1
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d202      	bcs.n	80093dc <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d20d      	bcs.n	8009402 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80093f4:	2218      	movs	r2, #24
 80093f6:	2101      	movs	r1, #1
 80093f8:	f7f8 f94b 	bl	8001692 <CO_error>
                        SYNC->timeoutError = 2;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2202      	movs	r2, #2
 8009400:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d015      	beq.n	8009436 <CO_SYNC_process+0xfe>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d010      	beq.n	8009436 <CO_SYNC_process+0xfe>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	699a      	ldr	r2, [r3, #24]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d909      	bls.n	8009436 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800942a:	2302      	movs	r3, #2
 800942c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	615a      	str	r2, [r3, #20]
 8009434:	e002      	b.n	800943c <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	7a1b      	ldrb	r3, [r3, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01a      	beq.n	800947a <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	7a1b      	ldrb	r3, [r3, #8]
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f248 2340 	movw	r3, #33344	; 0x8240
 8009452:	2219      	movs	r2, #25
 8009454:	2101      	movs	r1, #1
 8009456:	f7f8 f91c 	bl	8001692 <CO_error>
            SYNC->receiveError = 0;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	721a      	strb	r2, [r3, #8]
 8009460:	e00b      	b.n	800947a <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800947a:	7ffb      	ldrb	r3, [r7, #31]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d10f      	bne.n	80094a0 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	7c1b      	ldrb	r3, [r3, #16]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d108      	bne.n	800949a <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	2300      	movs	r3, #0
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2300      	movs	r3, #0
 8009492:	2218      	movs	r2, #24
 8009494:	2100      	movs	r1, #0
 8009496:	f7f8 f8fc 	bl	8001692 <CO_error>
        }
        SYNC->timeoutError = 1;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80094a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <CO_getUint16>:
CO_getUint16(const void* buf) {
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 80094b8:	81fb      	strh	r3, [r7, #14]
    return value;
 80094ba:	89fb      	ldrh	r3, [r7, #14]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80094d4:	60fb      	str	r3, [r7, #12]
    return value;
 80094d6:	68fb      	ldr	r3, [r7, #12]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <OD_getIndex>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <OD_getIndex+0x14>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	e000      	b.n	80094fa <OD_getIndex+0x16>
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <OD_extension_init>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <OD_extension_init+0x14>
 8009516:	2305      	movs	r3, #5
 8009518:	e003      	b.n	8009522 <OD_extension_init+0x1c>
    entry->extension = extension;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af02      	add	r7, sp, #8
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	460b      	mov	r3, r1
 800953c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800953e:	7af9      	ldrb	r1, [r7, #11]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	2304      	movs	r3, #4
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7f9 f98d 	bl	8002868 <OD_get_value>
 800954e:	4603      	mov	r3, r0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	791b      	ldrb	r3, [r3, #4]
 800956a:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	3305      	adds	r3, #5
 8009570:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8009572:	7cfb      	ldrb	r3, [r7, #19]
 8009574:	2b06      	cmp	r3, #6
 8009576:	d108      	bne.n	800958a <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2206      	movs	r2, #6
 800957c:	68f9      	ldr	r1, [r7, #12]
 800957e:	4618      	mov	r0, r3
 8009580:	f015 ff0c 	bl	801f39c <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2201      	movs	r2, #1
 8009588:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 800958a:	bf00      	nop
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <OD_write_1012+0x2e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	7d1b      	ldrb	r3, [r3, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d108      	bne.n	80095c2 <OD_write_1012+0x2e>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <OD_write_1012+0x2e>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d102      	bne.n	80095c2 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 80095c2:	2309      	movs	r3, #9
 80095c4:	e051      	b.n	800966a <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80095cc:	68b8      	ldr	r0, [r7, #8]
 80095ce:	f7ff ff7b 	bl	80094c8 <CO_getUint32>
 80095d2:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095dc:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	4b24      	ldr	r3, [pc, #144]	; (8009674 <OD_write_1012+0xe0>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d126      	bne.n	8009636 <OD_write_1012+0xa2>
 80095e8:	8afb      	ldrh	r3, [r7, #22]
 80095ea:	2b7f      	cmp	r3, #127	; 0x7f
 80095ec:	d923      	bls.n	8009636 <OD_write_1012+0xa2>
 80095ee:	8afb      	ldrh	r3, [r7, #22]
 80095f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f4:	d903      	bls.n	80095fe <OD_write_1012+0x6a>
 80095f6:	8afb      	ldrh	r3, [r7, #22]
 80095f8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80095fc:	d91b      	bls.n	8009636 <OD_write_1012+0xa2>
 80095fe:	8afb      	ldrh	r3, [r7, #22]
 8009600:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8009604:	d903      	bls.n	800960e <OD_write_1012+0x7a>
 8009606:	8afb      	ldrh	r3, [r7, #22]
 8009608:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800960c:	d313      	bcc.n	8009636 <OD_write_1012+0xa2>
 800960e:	8afb      	ldrh	r3, [r7, #22]
 8009610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009614:	d903      	bls.n	800961e <OD_write_1012+0x8a>
 8009616:	8afb      	ldrh	r3, [r7, #22]
 8009618:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800961c:	d30b      	bcc.n	8009636 <OD_write_1012+0xa2>
 800961e:	8afb      	ldrh	r3, [r7, #22]
 8009620:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8009624:	d303      	bcc.n	800962e <OD_write_1012+0x9a>
 8009626:	8afb      	ldrh	r3, [r7, #22]
 8009628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800962c:	d303      	bcc.n	8009636 <OD_write_1012+0xa2>
 800962e:	8afb      	ldrh	r3, [r7, #22]
 8009630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009634:	d901      	bls.n	800963a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8009636:	230f      	movs	r3, #15
 8009638:	e017      	b.n	800966a <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	0fdb      	lsrs	r3, r3, #31
 800963e:	b2db      	uxtb	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	bf14      	ite	ne
 8009650:	2301      	movne	r3, #1
 8009652:	2300      	moveq	r3, #0
 8009654:	b2db      	uxtb	r3, r3
 8009656:	461a      	mov	r2, r3
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7f8 ff05 	bl	8002472 <OD_writeOriginal>
 8009668:	4603      	mov	r3, r0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	3ffff800 	.word	0x3ffff800

08009678 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b08c      	sub	sp, #48	; 0x30
 800967c:	af04      	add	r7, sp, #16
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <CO_TIME_init+0x20>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <CO_TIME_init+0x20>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009698:	f04f 33ff 	mov.w	r3, #4294967295
 800969c:	e061      	b.n	8009762 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 800969e:	222c      	movs	r2, #44	; 0x2c
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f015 fdde 	bl	801f264 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80096a8:	f107 0214 	add.w	r2, r7, #20
 80096ac:	2301      	movs	r3, #1
 80096ae:	2100      	movs	r1, #0
 80096b0:	68b8      	ldr	r0, [r7, #8]
 80096b2:	f7ff ff3c 	bl	800952e <OD_get_u32>
 80096b6:	4603      	mov	r3, r0
 80096b8:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80096ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00c      	beq.n	80096dc <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80096c8:	68b8      	ldr	r0, [r7, #8]
 80096ca:	f7ff ff0b 	bl	80094e4 <OD_getIndex>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80096d6:	f06f 030b 	mvn.w	r3, #11
 80096da:	e042      	b.n	8009762 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4a21      	ldr	r2, [pc, #132]	; (800976c <CO_TIME_init+0xf4>)
 80096e6:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a21      	ldr	r2, [pc, #132]	; (8009770 <CO_TIME_init+0xf8>)
 80096ec:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	331c      	adds	r3, #28
 80096f2:	4619      	mov	r1, r3
 80096f4:	68b8      	ldr	r0, [r7, #8]
 80096f6:	f7ff ff06 	bl	8009506 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009702:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	0fdb      	lsrs	r3, r3, #31
 8009708:	b2db      	uxtb	r3, r3
 800970a:	461a      	mov	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009716:	2b00      	cmp	r3, #0
 8009718:	bf14      	ite	ne
 800971a:	2301      	movne	r3, #1
 800971c:	2300      	moveq	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d015      	beq.n	8009760 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8009734:	8bba      	ldrh	r2, [r7, #28]
 8009736:	8879      	ldrh	r1, [r7, #2]
 8009738:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <CO_TIME_init+0xfc>)
 800973a:	9302      	str	r3, [sp, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	2300      	movs	r3, #0
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f009 f8dd 	bl	8012908 <CO_CANrxBufferInit>
 800974e:	4603      	mov	r3, r0
 8009750:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8009752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <CO_TIME_init+0xe8>
            return ret;
 800975a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800975e:	e000      	b.n	8009762 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	080023c3 	.word	0x080023c3
 8009770:	08009595 	.word	0x08009595
 8009774:	08009559 	.word	0x08009559

08009778 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	; 0x28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8009784:	2300      	movs	r3, #0
 8009786:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d024      	beq.n	80097d8 <CO_TIME_process+0x60>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d020      	beq.n	80097d8 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01f      	beq.n	80097de <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fe91 	bl	80094c8 <CO_getUint32>
 80097a6:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fe7c 	bl	80094aa <CO_getUint16>
 80097b2:	4603      	mov	r3, r0
 80097b4:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8bfa      	ldrh	r2, [r7, #30]
 80097c4:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80097cc:	2301      	movs	r3, #1
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80097d6:	e002      	b.n	80097de <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d132      	bne.n	800984e <CO_TIME_process+0xd6>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d02f      	beq.n	800984e <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	89db      	ldrh	r3, [r3, #14]
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4a16      	ldr	r2, [pc, #88]	; (8009858 <CO_TIME_process+0xe0>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	099b      	lsrs	r3, r3, #6
 8009804:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4b13      	ldr	r3, [pc, #76]	; (8009858 <CO_TIME_process+0xe0>)
 800980a:	fba3 1302 	umull	r1, r3, r3, r2
 800980e:	099b      	lsrs	r3, r3, #6
 8009810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009814:	fb01 f303 	mul.w	r3, r1, r3
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <CO_TIME_process+0xe4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d90b      	bls.n	800984e <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <CO_TIME_process+0xe8>)
 800983c:	4413      	add	r3, r2
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	899b      	ldrh	r3, [r3, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	10624dd3 	.word	0x10624dd3
 800985c:	05265bff 	.word	0x05265bff
 8009860:	fad9a400 	.word	0xfad9a400

08009864 <CO_fifo_getSpace>:
CO_fifo_getSpace(CO_fifo_t* fifo) {
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
    int sizeLeft = (int)fifo->readPtr - (int)fifo->writePtr - 1;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	60fb      	str	r3, [r7, #12]
    if (sizeLeft < 0) {
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	da05      	bge.n	800988e <CO_fifo_getSpace+0x2a>
        sizeLeft += (int)fifo->bufSize;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	461a      	mov	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeLeft;
 800988e:	68fb      	ldr	r3, [r7, #12]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <CO_fifo_getOccupied>:
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	461a      	mov	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da05      	bge.n	80098c4 <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	461a      	mov	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeOccupied;
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <CO_fifo_putc>:
CO_fifo_putc(CO_fifo_t* fifo, const uint8_t c) {
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
    if (fifo != NULL && fifo->buf != NULL) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d028      	beq.n	8009936 <CO_fifo_putc+0x64>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d024      	beq.n	8009936 <CO_fifo_putc+0x64>
        size_t writePtrNext = fifo->writePtr + 1;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
        if (writePtrNext != fifo->readPtr && !(writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d01b      	beq.n	8009936 <CO_fifo_putc+0x64>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	429a      	cmp	r2, r3
 8009906:	d103      	bne.n	8009910 <CO_fifo_putc+0x3e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d012      	beq.n	8009936 <CO_fifo_putc+0x64>
            fifo->buf[fifo->writePtr] = c;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	4413      	add	r3, r2
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	701a      	strb	r2, [r3, #0]
            fifo->writePtr = (writePtrNext == fifo->bufSize) ? 0 : writePtrNext;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d001      	beq.n	800992c <CO_fifo_putc+0x5a>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	e000      	b.n	800992e <CO_fifo_putc+0x5c>
 800992c:	2300      	movs	r3, #0
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6093      	str	r3, [r2, #8]
            return true;
 8009932:	2301      	movs	r3, #1
 8009934:	e000      	b.n	8009938 <CO_fifo_putc+0x66>
    return false;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <CO_fifo_getc>:
CO_fifo_getc(CO_fifo_t* fifo, uint8_t* buf) {
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
    if (fifo != NULL && buf != NULL && fifo->readPtr != fifo->writePtr) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d020      	beq.n	8009996 <CO_fifo_getc+0x52>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01d      	beq.n	8009996 <CO_fifo_getc+0x52>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	d017      	beq.n	8009996 <CO_fifo_getc+0x52>
        *buf = fifo->buf[fifo->readPtr];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	4413      	add	r3, r2
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	701a      	strb	r2, [r3, #0]
        if (++fifo->readPtr == fifo->bufSize) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	429a      	cmp	r2, r3
 800998a:	d102      	bne.n	8009992 <CO_fifo_getc+0x4e>
            fifo->readPtr = 0;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	60da      	str	r2, [r3, #12]
        return true;
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <CO_fifo_getc+0x54>
    return false;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <CO_fifo_init>:
#error CO_CONFIG_CRC16_ENABLE must be enabled.
#endif
#endif

void
CO_fifo_init(CO_fifo_t* fifo, uint8_t* buf, size_t bufSize) {
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]

    if ((fifo == NULL) || (buf == NULL) || (bufSize < 2U)) {
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d012      	beq.n	80099dc <CO_fifo_init+0x38>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00f      	beq.n	80099dc <CO_fifo_init+0x38>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d90c      	bls.n	80099dc <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]

    return;
 80099da:	e000      	b.n	80099de <CO_fifo_init+0x3a>
        return;
 80099dc:	bf00      	nop
}
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <CO_fifo_write>:
 *                                                                            *
 *        empty       3 bytes       4 bytes       buffer                      *
 *        buffer      in buff       in buff       full                        *
 ******************************************************************************/
size_t
CO_fifo_write(CO_fifo_t* fifo, const uint8_t* buf, size_t count, uint16_t* crc) {
 80099e8:	b480      	push	{r7}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t* bufDest;

    if ((fifo == NULL) || (fifo->buf == NULL) || (buf == NULL)) {
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d006      	beq.n	8009a0a <CO_fifo_write+0x22>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <CO_fifo_write+0x22>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <CO_fifo_write+0x26>
        return 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e03e      	b.n	8009a8c <CO_fifo_write+0xa4>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	4413      	add	r3, r2
 8009a18:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	e02f      	b.n	8009a80 <CO_fifo_write+0x98>
        size_t writePtrNext = fifo->writePtr + 1U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	3301      	adds	r3, #1
 8009a26:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if ((writePtrNext == fifo->readPtr) || ((writePtrNext == fifo->bufSize) && (fifo->readPtr == 0U))) {
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d029      	beq.n	8009a86 <CO_fifo_write+0x9e>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d103      	bne.n	8009a44 <CO_fifo_write+0x5c>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d020      	beq.n	8009a86 <CO_fifo_write+0x9e>
            break;
        }

        *bufDest = *buf;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	701a      	strb	r2, [r3, #0]
            crc16_ccitt_single(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d106      	bne.n	8009a64 <CO_fifo_write+0x7c>
            fifo->writePtr = 0;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e007      	b.n	8009a74 <CO_fifo_write+0x8c>
        } else {
            fifo->writePtr++;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	609a      	str	r2, [r3, #8]
            bufDest++;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	3301      	adds	r3, #1
 8009a72:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0U; i--) {
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	61fb      	str	r3, [r7, #28]
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1cc      	bne.n	8009a20 <CO_fifo_write+0x38>
    }

    return count - i;
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	1ad3      	subs	r3, r2, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3724      	adds	r7, #36	; 0x24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <CO_fifo_read>:

size_t
CO_fifo_read(CO_fifo_t* fifo, uint8_t* buf, size_t count, bool_t* eof) {
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
    size_t i;
    const uint8_t* bufSrc;
    bool_t alive_cycle = true;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]

    if (eof != NULL) {
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <CO_fifo_read+0x1e>
        *eof = false;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
    }
    if ((fifo == NULL) || (buf == NULL) || (fifo->readPtr == fifo->writePtr)) {
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <CO_fifo_read+0x36>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <CO_fifo_read+0x36>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d101      	bne.n	8009ad2 <CO_fifo_read+0x3a>
        return 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e046      	b.n	8009b60 <CO_fifo_read+0xc8>
    }

    bufSrc = &fifo->buf[fifo->readPtr];
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	61bb      	str	r3, [r7, #24]
    for (i = count; (i > 0U) && alive_cycle;) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	e034      	b.n	8009b4e <CO_fifo_read+0xb6>
        const uint8_t c = *bufSrc;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	74fb      	strb	r3, [r7, #19]

        /* is circular buffer empty */
        if (fifo->readPtr == fifo->writePtr) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d102      	bne.n	8009afc <CO_fifo_read+0x64>
            alive_cycle = false;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e028      	b.n	8009b4e <CO_fifo_read+0xb6>
        } else {
            *buf = c;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7cfa      	ldrb	r2, [r7, #19]
 8009b00:	701a      	strb	r2, [r3, #0]
            buf++;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	3301      	adds	r3, #1
 8009b06:	60bb      	str	r3, [r7, #8]

            /* increment variables */
            if (++fifo->readPtr == fifo->bufSize) {
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	60da      	str	r2, [r3, #12]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d106      	bne.n	8009b2c <CO_fifo_read+0x94>
                fifo->readPtr = 0;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	e002      	b.n	8009b32 <CO_fifo_read+0x9a>
            } else {
                bufSrc++;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	61bb      	str	r3, [r7, #24]
            }
            i--;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_COMMANDS) != 0
            /* is delimiter? */
            if ((eof != NULL) && (c == DELIM_COMMAND))
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <CO_fifo_read+0xb6>
 8009b3e:	7cfb      	ldrb	r3, [r7, #19]
 8009b40:	2b0a      	cmp	r3, #10
 8009b42:	d104      	bne.n	8009b4e <CO_fifo_read+0xb6>
            {
                *eof = true;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
                alive_cycle = false;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]
    for (i = count; (i > 0U) && alive_cycle;) {
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <CO_fifo_read+0xc2>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1c4      	bne.n	8009ae4 <CO_fifo_read+0x4c>
            }
#endif
        }
    }

    return count - i;
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	1ad3      	subs	r3, r2, r3
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3724      	adds	r7, #36	; 0x24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <CO_fifo_altBegin>:

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ALT_READ) != 0
size_t
CO_fifo_altBegin(CO_fifo_t* fifo, size_t offset) {
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
    size_t i;

    if (fifo == NULL) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <CO_fifo_altBegin+0x14>
        return 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e025      	b.n	8009bcc <CO_fifo_altBegin+0x60>
    }

    fifo->altReadPtr = fifo->readPtr;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0U; i--) {
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e016      	b.n	8009bbc <CO_fifo_altBegin+0x50>
        /* is circular buffer empty */
        if (fifo->altReadPtr == fifo->writePtr) {
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691a      	ldr	r2, [r3, #16]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d014      	beq.n	8009bc4 <CO_fifo_altBegin+0x58>
            break;
        }

        /* increment variable */
        if (++fifo->altReadPtr == fifo->bufSize) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	611a      	str	r2, [r3, #16]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d102      	bne.n	8009bb6 <CO_fifo_altBegin+0x4a>
            fifo->altReadPtr = 0;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0U; i--) {
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <CO_fifo_altBegin+0x22>
 8009bc2:	e000      	b.n	8009bc6 <CO_fifo_altBegin+0x5a>
            break;
 8009bc4:	bf00      	nop
        }
    }

    return offset - i;
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	1ad3      	subs	r3, r2, r3
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <CO_fifo_altFinish>:

void
CO_fifo_altFinish(CO_fifo_t* fifo, uint16_t* crc) {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]

    if (fifo == NULL) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d030      	beq.n	8009c4a <CO_fifo_altFinish+0x72>
        return;
    }

    if (crc == NULL) {
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <CO_fifo_altFinish+0x20>
        fifo->readPtr = fifo->altReadPtr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	e029      	b.n	8009c4c <CO_fifo_altFinish+0x74>
    } else {
        const uint8_t* bufSrc = &fifo->buf[fifo->readPtr];
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 8009c04:	e01a      	b.n	8009c3c <CO_fifo_altFinish+0x64>
#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_CRC16_CCITT) != 0
            crc16_ccitt_single(crc, *bufSrc);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6838      	ldr	r0, [r7, #0]
 8009c0e:	f001 ff11 	bl	800ba34 <crc16_ccitt_single>
#endif
            /* increment variable */
            if (++fifo->readPtr == fifo->bufSize) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60da      	str	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d106      	bne.n	8009c36 <CO_fifo_altFinish+0x5e>
                fifo->readPtr = 0;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e002      	b.n	8009c3c <CO_fifo_altFinish+0x64>
            } else {
                bufSrc++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d1de      	bne.n	8009c06 <CO_fifo_altFinish+0x2e>
 8009c48:	e000      	b.n	8009c4c <CO_fifo_altFinish+0x74>
        return;
 8009c4a:	bf00      	nop
            }
        }
    }
}
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <CO_fifo_altRead>:

size_t
CO_fifo_altRead(CO_fifo_t* fifo, uint8_t* buf, size_t count) {
 8009c52:	b480      	push	{r7}
 8009c54:	b089      	sub	sp, #36	; 0x24
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
    size_t i;
    const uint8_t* bufSrc;

    bufSrc = &fifo->buf[fifo->altReadPtr];
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	4413      	add	r3, r2
 8009c68:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	e026      	b.n	8009cbe <CO_fifo_altRead+0x6c>
        const uint8_t c = *bufSrc;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	75fb      	strb	r3, [r7, #23]

        /* is there no more data */
        if (fifo->altReadPtr == fifo->writePtr) {
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	691a      	ldr	r2, [r3, #16]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d021      	beq.n	8009cc6 <CO_fifo_altRead+0x74>
            break;
        }

        *buf = c;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	7dfa      	ldrb	r2, [r7, #23]
 8009c86:	701a      	strb	r2, [r3, #0]
        buf++;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60bb      	str	r3, [r7, #8]

        /* increment variables */
        if (++fifo->altReadPtr == fifo->bufSize) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	611a      	str	r2, [r3, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d106      	bne.n	8009cb2 <CO_fifo_altRead+0x60>
            fifo->altReadPtr = 0;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	611a      	str	r2, [r3, #16]
            bufSrc = &fifo->buf[0];
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	61bb      	str	r3, [r7, #24]
 8009cb0:	e002      	b.n	8009cb8 <CO_fifo_altRead+0x66>
        } else {
            bufSrc++;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1d5      	bne.n	8009c70 <CO_fifo_altRead+0x1e>
 8009cc4:	e000      	b.n	8009cc8 <CO_fifo_altRead+0x76>
            break;
 8009cc6:	bf00      	nop
        }
    }

    return count - i;
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	1ad3      	subs	r3, r2, r3
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3724      	adds	r7, #36	; 0x24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <CO_fifo_CommSearch>:
#endif /* (CO_CONFIG_FIFO) & CO_CONFIG_FIFO_ALT_READ */

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_COMMANDS) != 0
bool_t
CO_fifo_CommSearch(CO_fifo_t* fifo, bool_t clear) {
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
    bool_t newCommand = false;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
    size_t count;
    uint8_t* commandEnd;

    if ((fifo == NULL) || (fifo->readPtr == fifo->writePtr)) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <CO_fifo_CommSearch+0x20>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68da      	ldr	r2, [r3, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d101      	bne.n	8009cfe <CO_fifo_CommSearch+0x24>
        return false;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e068      	b.n	8009dd0 <CO_fifo_CommSearch+0xf6>
    }

    /* search delimiter until writePtr or until end of buffer */
    if (fifo->readPtr < fifo->writePtr) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d206      	bcs.n	8009d18 <CO_fifo_CommSearch+0x3e>
        count = fifo->writePtr - fifo->readPtr;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	613b      	str	r3, [r7, #16]
 8009d16:	e005      	b.n	8009d24 <CO_fifo_CommSearch+0x4a>
    } else {
        count = fifo->bufSize - fifo->readPtr;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	613b      	str	r3, [r7, #16]
    }
    commandEnd = (uint8_t*)memchr((const void*)&fifo->buf[fifo->readPtr], (int32_t)DELIM_COMMAND, count);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	210a      	movs	r1, #10
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f6 fa5c 	bl	80001f0 <memchr>
 8009d38:	60f8      	str	r0, [r7, #12]
    if (commandEnd != NULL) {
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <CO_fifo_CommSearch+0x6c>
        newCommand = true;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e028      	b.n	8009d98 <CO_fifo_CommSearch+0xbe>
    } else if (fifo->readPtr > fifo->writePtr) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d915      	bls.n	8009d7e <CO_fifo_CommSearch+0xa4>
        /* not found, search in the beginning of the circular buffer */
        commandEnd = (uint8_t*)memchr((const void*)&fifo->buf[0], (int32_t)DELIM_COMMAND, fifo->writePtr);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	f7f6 fa47 	bl	80001f0 <memchr>
 8009d62:	60f8      	str	r0, [r7, #12]
        if ((commandEnd != NULL) || (fifo->readPtr == (fifo->writePtr + 1U))) {
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <CO_fifo_CommSearch+0x9e>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	3301      	adds	r3, #1
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d10f      	bne.n	8009d98 <CO_fifo_CommSearch+0xbe>
            /* command delimiter found or buffer full */
            newCommand = true;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	e00c      	b.n	8009d98 <CO_fifo_CommSearch+0xbe>
        }
    } else if ((fifo->readPtr == 0U) && (fifo->writePtr == (fifo->bufSize - 1U))) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d108      	bne.n	8009d98 <CO_fifo_CommSearch+0xbe>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d101      	bne.n	8009d98 <CO_fifo_CommSearch+0xbe>
        /* buffer full */
        newCommand = true;
 8009d94:	2301      	movs	r3, #1
 8009d96:	617b      	str	r3, [r7, #20]
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear buffer if set so */
    if (clear) {
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d017      	beq.n	8009dce <CO_fifo_CommSearch+0xf4>
        if (commandEnd != NULL) {
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d010      	beq.n	8009dc6 <CO_fifo_CommSearch+0xec>
            fifo->readPtr = ((size_t)commandEnd - (size_t)fifo->buf) + 1U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6812      	ldr	r2, [r2, #0]
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60da      	str	r2, [r3, #12]
            if (fifo->readPtr == fifo->bufSize) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d107      	bne.n	8009dce <CO_fifo_CommSearch+0xf4>
                fifo->readPtr = 0;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	60da      	str	r2, [r3, #12]
 8009dc4:	e003      	b.n	8009dce <CO_fifo_CommSearch+0xf4>
            }
        } else {
            fifo->readPtr = fifo->writePtr;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60da      	str	r2, [r3, #12]
        }
    }

    return newCommand;
 8009dce:	697b      	ldr	r3, [r7, #20]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <CO_fifo_trimSpaces>:

bool_t
CO_fifo_trimSpaces(CO_fifo_t* fifo, bool_t* insideComment) {
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
    bool_t delimCommandFound = false;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
    bool_t alive_cycle = true;
 8009de6:	2301      	movs	r3, #1
 8009de8:	613b      	str	r3, [r7, #16]

    if ((fifo != NULL) && (insideComment != NULL)) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d044      	beq.n	8009e7a <CO_fifo_trimSpaces+0xa2>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d041      	beq.n	8009e7a <CO_fifo_trimSpaces+0xa2>
        while ((fifo->readPtr != fifo->writePtr) && alive_cycle) {
 8009df6:	e037      	b.n	8009e68 <CO_fifo_trimSpaces+0x90>
            uint8_t c = fifo->buf[fifo->readPtr];
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	73fb      	strb	r3, [r7, #15]

            if (c == DELIM_COMMENT) {
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b23      	cmp	r3, #35	; 0x23
 8009e0a:	d103      	bne.n	8009e14 <CO_fifo_trimSpaces+0x3c>
                *insideComment = true;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e00e      	b.n	8009e32 <CO_fifo_trimSpaces+0x5a>
            } else if ((isgraph((int)c) != 0) && !(*insideComment)) {
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	3301      	adds	r3, #1
 8009e18:	4a1b      	ldr	r2, [pc, #108]	; (8009e88 <CO_fifo_trimSpaces+0xb0>)
 8009e1a:	4413      	add	r3, r2
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	f003 0317 	and.w	r3, r3, #23
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <CO_fifo_trimSpaces+0x5a>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <CO_fifo_trimSpaces+0x5a>
                alive_cycle = false;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	613b      	str	r3, [r7, #16]
            } else { /* MISRA C 2004 14.10 */
            }

            if (alive_cycle) {
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d017      	beq.n	8009e68 <CO_fifo_trimSpaces+0x90>
                if (++fifo->readPtr == fifo->bufSize) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d102      	bne.n	8009e54 <CO_fifo_trimSpaces+0x7c>
                    fifo->readPtr = 0;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	60da      	str	r2, [r3, #12]
                }
                if (c == DELIM_COMMAND) {
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b0a      	cmp	r3, #10
 8009e58:	d106      	bne.n	8009e68 <CO_fifo_trimSpaces+0x90>
                    delimCommandFound = true;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	617b      	str	r3, [r7, #20]
                    *insideComment = false;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
                    alive_cycle = false;
 8009e64:	2300      	movs	r3, #0
 8009e66:	613b      	str	r3, [r7, #16]
        while ((fifo->readPtr != fifo->writePtr) && alive_cycle) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d002      	beq.n	8009e7a <CO_fifo_trimSpaces+0xa2>
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1be      	bne.n	8009df8 <CO_fifo_trimSpaces+0x20>
                }
            }
        }
    }
    return delimCommandFound;
 8009e7a:	697b      	ldr	r3, [r7, #20]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	371c      	adds	r7, #28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	08023c90 	.word	0x08023c90

08009e8c <CO_fifo_readToken>:

size_t
CO_fifo_readToken(CO_fifo_t* fifo, char* buf, size_t count, uint8_t* closed, bool_t* err) {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08c      	sub	sp, #48	; 0x30
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
    bool_t delimCommandFound = false;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t delimCommentFound = false;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t tokenSize = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24

    if ((fifo != NULL) && (buf != NULL) && (count > 1U) && ((err == NULL) || (*err == false))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 80eb 	beq.w	800a084 <CO_fifo_readToken+0x1f8>
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 80e7 	beq.w	800a084 <CO_fifo_readToken+0x1f8>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	f240 80e3 	bls.w	800a084 <CO_fifo_readToken+0x1f8>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <CO_fifo_readToken+0x42>
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 80db 	bne.w	800a084 <CO_fifo_readToken+0x1f8>
        && (fifo->readPtr != fifo->writePtr)) {
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	f000 80d4 	beq.w	800a084 <CO_fifo_readToken+0x1f8>
        bool_t finished = false;
 8009edc:	2300      	movs	r3, #0
 8009ede:	623b      	str	r3, [r7, #32]
        uint8_t step = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	77fb      	strb	r3, [r7, #31]
        size_t ptr = fifo->readPtr;   /* current pointer (integer, 0 based) */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	61bb      	str	r3, [r7, #24]
        uint8_t* c = &fifo->buf[ptr]; /* current character */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
        do {
            switch (step) {
 8009ef4:	7ffb      	ldrb	r3, [r7, #31]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d054      	beq.n	8009fa4 <CO_fifo_readToken+0x118>
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	dc70      	bgt.n	8009fe0 <CO_fifo_readToken+0x154>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <CO_fifo_readToken+0x7c>
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d025      	beq.n	8009f52 <CO_fifo_readToken+0xc6>
                    } else { /* MISRA C 2004 14.10 */
                    }
                    break;
                default:
                    /* MISRA C 2004 15.3 */
                    break;
 8009f06:	e06b      	b.n	8009fe0 <CO_fifo_readToken+0x154>
                    if (isgraph((int)*c) != 0) {
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	4a81      	ldr	r2, [pc, #516]	; (800a114 <CO_fifo_readToken+0x288>)
 8009f10:	4413      	add	r3, r2
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 0317 	and.w	r3, r3, #23
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d013      	beq.n	8009f44 <CO_fifo_readToken+0xb8>
                        if (*c == DELIM_COMMENT) {
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b23      	cmp	r3, #35	; 0x23
 8009f22:	d102      	bne.n	8009f2a <CO_fifo_readToken+0x9e>
                            delimCommentFound = true;
 8009f24:	2301      	movs	r3, #1
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 8009f28:	e05c      	b.n	8009fe4 <CO_fifo_readToken+0x158>
                            buf[tokenSize] = (char)*c;
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	4413      	add	r3, r2
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	7812      	ldrb	r2, [r2, #0]
 8009f34:	701a      	strb	r2, [r3, #0]
                            tokenSize++;
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	3301      	adds	r3, #1
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
                            step++;
 8009f3c:	7ffb      	ldrb	r3, [r7, #31]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	77fb      	strb	r3, [r7, #31]
                    break;
 8009f42:	e04f      	b.n	8009fe4 <CO_fifo_readToken+0x158>
                    } else if (*c == DELIM_COMMAND) {
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b0a      	cmp	r3, #10
 8009f4a:	d14b      	bne.n	8009fe4 <CO_fifo_readToken+0x158>
                        delimCommandFound = true;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8009f50:	e048      	b.n	8009fe4 <CO_fifo_readToken+0x158>
                    if (isgraph((int)*c) != 0) {
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	4a6e      	ldr	r2, [pc, #440]	; (800a114 <CO_fifo_readToken+0x288>)
 8009f5a:	4413      	add	r3, r2
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	f003 0317 	and.w	r3, r3, #23
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d014      	beq.n	8009f90 <CO_fifo_readToken+0x104>
                        if (*c == DELIM_COMMENT) {
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b23      	cmp	r3, #35	; 0x23
 8009f6c:	d102      	bne.n	8009f74 <CO_fifo_readToken+0xe8>
                            delimCommentFound = true;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 8009f72:	e039      	b.n	8009fe8 <CO_fifo_readToken+0x15c>
                        } else if (tokenSize < count) {
 8009f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d235      	bcs.n	8009fe8 <CO_fifo_readToken+0x15c>
                            buf[tokenSize] = (char)*c;
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	4413      	add	r3, r2
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	7812      	ldrb	r2, [r2, #0]
 8009f86:	701a      	strb	r2, [r3, #0]
                            tokenSize++;
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 8009f8e:	e02b      	b.n	8009fe8 <CO_fifo_readToken+0x15c>
                        if (*c == DELIM_COMMAND) {
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b0a      	cmp	r3, #10
 8009f96:	d101      	bne.n	8009f9c <CO_fifo_readToken+0x110>
                            delimCommandFound = true;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        step++;
 8009f9c:	7ffb      	ldrb	r3, [r7, #31]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	77fb      	strb	r3, [r7, #31]
                    break;
 8009fa2:	e021      	b.n	8009fe8 <CO_fifo_readToken+0x15c>
                    if (isgraph((int)*c) != 0) {
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	4a5a      	ldr	r2, [pc, #360]	; (800a114 <CO_fifo_readToken+0x288>)
 8009fac:	4413      	add	r3, r2
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 0317 	and.w	r3, r3, #23
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00c      	beq.n	8009fd2 <CO_fifo_readToken+0x146>
                        if (*c == DELIM_COMMENT) {
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b23      	cmp	r3, #35	; 0x23
 8009fbe:	d102      	bne.n	8009fc6 <CO_fifo_readToken+0x13a>
                            delimCommentFound = true;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 8009fc4:	e012      	b.n	8009fec <CO_fifo_readToken+0x160>
                            fifo->readPtr = ptr;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	60da      	str	r2, [r3, #12]
                            finished = true;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	623b      	str	r3, [r7, #32]
                    break;
 8009fd0:	e00c      	b.n	8009fec <CO_fifo_readToken+0x160>
                    } else if (*c == DELIM_COMMAND) {
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b0a      	cmp	r3, #10
 8009fd8:	d108      	bne.n	8009fec <CO_fifo_readToken+0x160>
                        delimCommandFound = true;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8009fde:	e005      	b.n	8009fec <CO_fifo_readToken+0x160>
                    break;
 8009fe0:	bf00      	nop
 8009fe2:	e004      	b.n	8009fee <CO_fifo_readToken+0x162>
                    break;
 8009fe4:	bf00      	nop
 8009fe6:	e002      	b.n	8009fee <CO_fifo_readToken+0x162>
                    break;
 8009fe8:	bf00      	nop
 8009fea:	e000      	b.n	8009fee <CO_fifo_readToken+0x162>
                    break;
 8009fec:	bf00      	nop
            }
            if (delimCommentFound == true) {
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d10a      	bne.n	800a00a <CO_fifo_readToken+0x17e>
                /* Comment delimiter found, clear all till end of the line. */
                fifo->readPtr = ptr;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	60da      	str	r2, [r3, #12]
                delimCommandFound = CO_fifo_CommSearch(fifo, true);
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7ff fe6c 	bl	8009cda <CO_fifo_CommSearch>
 800a002:	62f8      	str	r0, [r7, #44]	; 0x2c
                finished = true;
 800a004:	2301      	movs	r3, #1
 800a006:	623b      	str	r3, [r7, #32]
 800a008:	e038      	b.n	800a07c <CO_fifo_readToken+0x1f0>
            } else if (delimCommandFound) {
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00f      	beq.n	800a030 <CO_fifo_readToken+0x1a4>
                /* command delimiter found, set readPtr behind it. */
                if (++ptr == fifo->bufSize) {
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	3301      	adds	r3, #1
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d101      	bne.n	800a024 <CO_fifo_readToken+0x198>
                    ptr = 0;
 800a020:	2300      	movs	r3, #0
 800a022:	61bb      	str	r3, [r7, #24]
                }
                fifo->readPtr = ptr;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	60da      	str	r2, [r3, #12]
                finished = true;
 800a02a:	2301      	movs	r3, #1
 800a02c:	623b      	str	r3, [r7, #32]
 800a02e:	e025      	b.n	800a07c <CO_fifo_readToken+0x1f0>
            } else if (!finished) {
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d122      	bne.n	800a07c <CO_fifo_readToken+0x1f0>
                /* find next character in the circular buffer */
                if (++ptr == fifo->bufSize) {
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	3301      	adds	r3, #1
 800a03a:	61bb      	str	r3, [r7, #24]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	429a      	cmp	r2, r3
 800a044:	d107      	bne.n	800a056 <CO_fifo_readToken+0x1ca>
                    ptr = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	61bb      	str	r3, [r7, #24]
                    c = &fifo->buf[ptr];
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	4413      	add	r3, r2
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	e002      	b.n	800a05c <CO_fifo_readToken+0x1d0>
                } else {
                    c++;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	3301      	adds	r3, #1
 800a05a:	617b      	str	r3, [r7, #20]
                }
                /* end, if buffer is now empty */
                if (ptr == fifo->writePtr) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	429a      	cmp	r2, r3
 800a064:	d10a      	bne.n	800a07c <CO_fifo_readToken+0x1f0>
                    if (step == 2U) {
 800a066:	7ffb      	ldrb	r3, [r7, #31]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d103      	bne.n	800a074 <CO_fifo_readToken+0x1e8>
                        fifo->readPtr = ptr;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	60da      	str	r2, [r3, #12]
 800a072:	e001      	b.n	800a078 <CO_fifo_readToken+0x1ec>
                    } else {
                        tokenSize = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                    finished = true;
 800a078:	2301      	movs	r3, #1
 800a07a:	623b      	str	r3, [r7, #32]
                }
            } else { /* MISRA C 2004 14.10 */
            }
        } while (!finished);
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f43f af38 	beq.w	8009ef4 <CO_fifo_readToken+0x68>
    }

    /* set 'err' return value */
    if ((err != NULL) && (*err == false)) {
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	2b00      	cmp	r3, #0
 800a088:	d021      	beq.n	800a0ce <CO_fifo_readToken+0x242>
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d11d      	bne.n	800a0ce <CO_fifo_readToken+0x242>
        if ((tokenSize == count)
 800a092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d016      	beq.n	800a0c8 <CO_fifo_readToken+0x23c>
            || ((closed != NULL)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d016      	beq.n	800a0ce <CO_fifo_readToken+0x242>
                && (((*closed == 1U) && (!delimCommandFound || (tokenSize == 0U)))
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d105      	bne.n	800a0b4 <CO_fifo_readToken+0x228>
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00c      	beq.n	800a0c8 <CO_fifo_readToken+0x23c>
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <CO_fifo_readToken+0x23c>
                    || ((*closed == 0U) && (delimCommandFound || (tokenSize == 0U)))))) {
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d108      	bne.n	800a0ce <CO_fifo_readToken+0x242>
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <CO_fifo_readToken+0x23c>
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <CO_fifo_readToken+0x242>
            *err = true;
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
        }
    }
    /* set 'closed' return value */
    if (closed != NULL) {
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <CO_fifo_readToken+0x258>
        *closed = delimCommandFound ? 1U : 0U;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <CO_fifo_readToken+0x252>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	e000      	b.n	800a0e0 <CO_fifo_readToken+0x254>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	701a      	strb	r2, [r3, #0]
    }

    /* token was larger then size of the buffer, all was cleaned, return empty */
    if (tokenSize == count) {
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d101      	bne.n	800a0f0 <CO_fifo_readToken+0x264>
        tokenSize = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* write string terminator character */
    if ((buf != NULL) && (count > tokenSize)) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d008      	beq.n	800a108 <CO_fifo_readToken+0x27c>
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d904      	bls.n	800a108 <CO_fifo_readToken+0x27c>
        buf[tokenSize] = '\0';
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	4413      	add	r3, r2
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
    }

    return tokenSize;
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3730      	adds	r7, #48	; 0x30
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	08023c90 	.word	0x08023c90

0800a118 <CO_fifo_readU82a>:
    1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,
    23,  24,  25,  255, 255, 255, 255, 255, 255, 26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  255, 255, 255, 255, 255};

size_t
CO_fifo_readU82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
    uint8_t n = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <CO_fifo_readU82a+0x1c>
        return 0;
 800a130:	2300      	movs	r3, #0
 800a132:	e01e      	b.n	800a172 <CO_fifo_readU82a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fbb1 	bl	800989c <CO_fifo_getOccupied>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d111      	bne.n	800a164 <CO_fifo_readU82a+0x4c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b05      	cmp	r3, #5
 800a144:	d90e      	bls.n	800a164 <CO_fifo_readU82a+0x4c>
        (void)CO_fifo_read(fifo, &n, sizeof(n), NULL);
 800a146:	f107 0117 	add.w	r1, r7, #23
 800a14a:	2300      	movs	r3, #0
 800a14c:	2201      	movs	r2, #1
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fca2 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu8, n);
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	461a      	mov	r2, r3
 800a158:	4908      	ldr	r1, [pc, #32]	; (800a17c <CO_fifo_readU82a+0x64>)
 800a15a:	68b8      	ldr	r0, [r7, #8]
 800a15c:	f014 ff70 	bl	801f040 <siprintf>
 800a160:	4603      	mov	r3, r0
 800a162:	e006      	b.n	800a172 <CO_fifo_readU82a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fac0 	bl	800a6f0 <CO_fifo_readHex2a>
 800a170:	4603      	mov	r3, r0
    }
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	08020f98 	.word	0x08020f98

0800a180 <CO_fifo_readU162a>:

size_t
CO_fifo_readU162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
    uint16_t n = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <CO_fifo_readU162a+0x1c>
        return 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	e01e      	b.n	800a1da <CO_fifo_readU162a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff fb7d 	bl	800989c <CO_fifo_getOccupied>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d111      	bne.n	800a1cc <CO_fifo_readU162a+0x4c>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b07      	cmp	r3, #7
 800a1ac:	d90e      	bls.n	800a1cc <CO_fifo_readU162a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a1ae:	f107 0116 	add.w	r1, r7, #22
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff fc6e 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu16, CO_SWAP_16(n));
 800a1bc:	8afb      	ldrh	r3, [r7, #22]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4908      	ldr	r1, [pc, #32]	; (800a1e4 <CO_fifo_readU162a+0x64>)
 800a1c2:	68b8      	ldr	r0, [r7, #8]
 800a1c4:	f014 ff3c 	bl	801f040 <siprintf>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	e006      	b.n	800a1da <CO_fifo_readU162a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fa8c 	bl	800a6f0 <CO_fifo_readHex2a>
 800a1d8:	4603      	mov	r3, r0
    }
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	08020fa0 	.word	0x08020fa0

0800a1e8 <CO_fifo_readU322a>:

size_t
CO_fifo_readU322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
    uint32_t n = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <CO_fifo_readU322a+0x1c>
        return 0;
 800a200:	2300      	movs	r3, #0
 800a202:	e01e      	b.n	800a242 <CO_fifo_readU322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 12U)) {
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fb49 	bl	800989c <CO_fifo_getOccupied>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d111      	bne.n	800a234 <CO_fifo_readU322a+0x4c>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b0b      	cmp	r3, #11
 800a214:	d90e      	bls.n	800a234 <CO_fifo_readU322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a216:	f107 0114 	add.w	r1, r7, #20
 800a21a:	2300      	movs	r3, #0
 800a21c:	2204      	movs	r2, #4
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fc3a 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu32, CO_SWAP_32(n));
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	461a      	mov	r2, r3
 800a228:	4908      	ldr	r1, [pc, #32]	; (800a24c <CO_fifo_readU322a+0x64>)
 800a22a:	68b8      	ldr	r0, [r7, #8]
 800a22c:	f014 ff08 	bl	801f040 <siprintf>
 800a230:	4603      	mov	r3, r0
 800a232:	e006      	b.n	800a242 <CO_fifo_readU322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 fa58 	bl	800a6f0 <CO_fifo_readHex2a>
 800a240:	4603      	mov	r3, r0
    }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	08020fa4 	.word	0x08020fa4

0800a250 <CO_fifo_readU642a>:

size_t
CO_fifo_readU642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
    uint64_t n = 0;
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <CO_fifo_readU642a+0x24>
        return 0;
 800a270:	2300      	movs	r3, #0
 800a272:	e01e      	b.n	800a2b2 <CO_fifo_readU642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff fb11 	bl	800989c <CO_fifo_getOccupied>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	d111      	bne.n	800a2a4 <CO_fifo_readU642a+0x54>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b13      	cmp	r3, #19
 800a284:	d90e      	bls.n	800a2a4 <CO_fifo_readU642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a286:	f107 0110 	add.w	r1, r7, #16
 800a28a:	2300      	movs	r3, #0
 800a28c:	2208      	movs	r2, #8
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff fc02 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu64, CO_SWAP_64(n));
 800a294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a298:	4908      	ldr	r1, [pc, #32]	; (800a2bc <CO_fifo_readU642a+0x6c>)
 800a29a:	68b8      	ldr	r0, [r7, #8]
 800a29c:	f014 fed0 	bl	801f040 <siprintf>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	e006      	b.n	800a2b2 <CO_fifo_readU642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fa20 	bl	800a6f0 <CO_fifo_readHex2a>
 800a2b0:	4603      	mov	r3, r0
    }
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	08020fa8 	.word	0x08020fa8

0800a2c0 <CO_fifo_readX82a>:

size_t
CO_fifo_readX82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
    uint8_t n = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <CO_fifo_readX82a+0x1c>
        return 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e01e      	b.n	800a31a <CO_fifo_readX82a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff fadd 	bl	800989c <CO_fifo_getOccupied>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d111      	bne.n	800a30c <CO_fifo_readX82a+0x4c>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d90e      	bls.n	800a30c <CO_fifo_readX82a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a2ee:	f107 0117 	add.w	r1, r7, #23
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fbce 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%02" PRIX8, (uint32_t)n);
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	461a      	mov	r2, r3
 800a300:	4908      	ldr	r1, [pc, #32]	; (800a324 <CO_fifo_readX82a+0x64>)
 800a302:	68b8      	ldr	r0, [r7, #8]
 800a304:	f014 fe9c 	bl	801f040 <siprintf>
 800a308:	4603      	mov	r3, r0
 800a30a:	e006      	b.n	800a31a <CO_fifo_readX82a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	68b9      	ldr	r1, [r7, #8]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f9ec 	bl	800a6f0 <CO_fifo_readHex2a>
 800a318:	4603      	mov	r3, r0
    }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	08020fb0 	.word	0x08020fb0

0800a328 <CO_fifo_readX162a>:

size_t
CO_fifo_readX162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
    uint16_t n = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <CO_fifo_readX162a+0x1c>
        return 0;
 800a340:	2300      	movs	r3, #0
 800a342:	e01e      	b.n	800a382 <CO_fifo_readX162a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7ff faa9 	bl	800989c <CO_fifo_getOccupied>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d111      	bne.n	800a374 <CO_fifo_readX162a+0x4c>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b07      	cmp	r3, #7
 800a354:	d90e      	bls.n	800a374 <CO_fifo_readX162a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a356:	f107 0116 	add.w	r1, r7, #22
 800a35a:	2300      	movs	r3, #0
 800a35c:	2202      	movs	r2, #2
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fb9a 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%04" PRIX16, (uint32_t)CO_SWAP_16(n));
 800a364:	8afb      	ldrh	r3, [r7, #22]
 800a366:	461a      	mov	r2, r3
 800a368:	4908      	ldr	r1, [pc, #32]	; (800a38c <CO_fifo_readX162a+0x64>)
 800a36a:	68b8      	ldr	r0, [r7, #8]
 800a36c:	f014 fe68 	bl	801f040 <siprintf>
 800a370:	4603      	mov	r3, r0
 800a372:	e006      	b.n	800a382 <CO_fifo_readX162a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f9b8 	bl	800a6f0 <CO_fifo_readHex2a>
 800a380:	4603      	mov	r3, r0
    }
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08020fbc 	.word	0x08020fbc

0800a390 <CO_fifo_readX322a>:

size_t
CO_fifo_readX322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
    uint32_t n = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <CO_fifo_readX322a+0x1c>
        return 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e01e      	b.n	800a3ea <CO_fifo_readX322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 12U)) {
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7ff fa75 	bl	800989c <CO_fifo_getOccupied>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d111      	bne.n	800a3dc <CO_fifo_readX322a+0x4c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b0b      	cmp	r3, #11
 800a3bc:	d90e      	bls.n	800a3dc <CO_fifo_readX322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a3be:	f107 0114 	add.w	r1, r7, #20
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fb66 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%08" PRIX32, CO_SWAP_32(n));
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4908      	ldr	r1, [pc, #32]	; (800a3f4 <CO_fifo_readX322a+0x64>)
 800a3d2:	68b8      	ldr	r0, [r7, #8]
 800a3d4:	f014 fe34 	bl	801f040 <siprintf>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	e006      	b.n	800a3ea <CO_fifo_readX322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f984 	bl	800a6f0 <CO_fifo_readHex2a>
 800a3e8:	4603      	mov	r3, r0
    }
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	08020fc4 	.word	0x08020fc4

0800a3f8 <CO_fifo_readX642a>:

size_t
CO_fifo_readX642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
    uint64_t n = 0;
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <CO_fifo_readX642a+0x24>
        return 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	e01e      	b.n	800a45a <CO_fifo_readX642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7ff fa3d 	bl	800989c <CO_fifo_getOccupied>
 800a422:	4603      	mov	r3, r0
 800a424:	2b08      	cmp	r3, #8
 800a426:	d111      	bne.n	800a44c <CO_fifo_readX642a+0x54>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b13      	cmp	r3, #19
 800a42c:	d90e      	bls.n	800a44c <CO_fifo_readX642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a42e:	f107 0110 	add.w	r1, r7, #16
 800a432:	2300      	movs	r3, #0
 800a434:	2208      	movs	r2, #8
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fb2e 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%016" PRIX64, CO_SWAP_64(n));
 800a43c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a440:	4908      	ldr	r1, [pc, #32]	; (800a464 <CO_fifo_readX642a+0x6c>)
 800a442:	68b8      	ldr	r0, [r7, #8]
 800a444:	f014 fdfc 	bl	801f040 <siprintf>
 800a448:	4603      	mov	r3, r0
 800a44a:	e006      	b.n	800a45a <CO_fifo_readX642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f94c 	bl	800a6f0 <CO_fifo_readHex2a>
 800a458:	4603      	mov	r3, r0
    }
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	08020fcc 	.word	0x08020fcc

0800a468 <CO_fifo_readI82a>:

size_t
CO_fifo_readI82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
    int8_t n = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <CO_fifo_readI82a+0x1c>
        return 0;
 800a480:	2300      	movs	r3, #0
 800a482:	e01f      	b.n	800a4c4 <CO_fifo_readI82a+0x5c>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fa09 	bl	800989c <CO_fifo_getOccupied>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d112      	bne.n	800a4b6 <CO_fifo_readI82a+0x4e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b05      	cmp	r3, #5
 800a494:	d90f      	bls.n	800a4b6 <CO_fifo_readI82a+0x4e>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a496:	f107 0117 	add.w	r1, r7, #23
 800a49a:	2300      	movs	r3, #0
 800a49c:	2201      	movs	r2, #1
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff fafa 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId8, n);
 800a4a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4908      	ldr	r1, [pc, #32]	; (800a4cc <CO_fifo_readI82a+0x64>)
 800a4ac:	68b8      	ldr	r0, [r7, #8]
 800a4ae:	f014 fdc7 	bl	801f040 <siprintf>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	e006      	b.n	800a4c4 <CO_fifo_readI82a+0x5c>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f917 	bl	800a6f0 <CO_fifo_readHex2a>
 800a4c2:	4603      	mov	r3, r0
    }
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	08020fd8 	.word	0x08020fd8

0800a4d0 <CO_fifo_readI162a>:

size_t
CO_fifo_readI162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
    int16_t n = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <CO_fifo_readI162a+0x1c>
        return 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e01f      	b.n	800a52c <CO_fifo_readI162a+0x5c>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff f9d5 	bl	800989c <CO_fifo_getOccupied>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d112      	bne.n	800a51e <CO_fifo_readI162a+0x4e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b07      	cmp	r3, #7
 800a4fc:	d90f      	bls.n	800a51e <CO_fifo_readI162a+0x4e>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a4fe:	f107 0116 	add.w	r1, r7, #22
 800a502:	2300      	movs	r3, #0
 800a504:	2202      	movs	r2, #2
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7ff fac6 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId16, CO_SWAP_16(n));
 800a50c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a510:	461a      	mov	r2, r3
 800a512:	4908      	ldr	r1, [pc, #32]	; (800a534 <CO_fifo_readI162a+0x64>)
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f014 fd93 	bl	801f040 <siprintf>
 800a51a:	4603      	mov	r3, r0
 800a51c:	e006      	b.n	800a52c <CO_fifo_readI162a+0x5c>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 f8e3 	bl	800a6f0 <CO_fifo_readHex2a>
 800a52a:	4603      	mov	r3, r0
    }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	08020fe0 	.word	0x08020fe0

0800a538 <CO_fifo_readI322a>:

size_t
CO_fifo_readI322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
    int32_t n = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <CO_fifo_readI322a+0x1c>
        return 0;
 800a550:	2300      	movs	r3, #0
 800a552:	e01e      	b.n	800a592 <CO_fifo_readI322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 13U)) {
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff f9a1 	bl	800989c <CO_fifo_getOccupied>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d111      	bne.n	800a584 <CO_fifo_readI322a+0x4c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b0c      	cmp	r3, #12
 800a564:	d90e      	bls.n	800a584 <CO_fifo_readI322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a566:	f107 0114 	add.w	r1, r7, #20
 800a56a:	2300      	movs	r3, #0
 800a56c:	2204      	movs	r2, #4
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff fa92 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId32, CO_SWAP_32(n));
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	461a      	mov	r2, r3
 800a578:	4908      	ldr	r1, [pc, #32]	; (800a59c <CO_fifo_readI322a+0x64>)
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f014 fd60 	bl	801f040 <siprintf>
 800a580:	4603      	mov	r3, r0
 800a582:	e006      	b.n	800a592 <CO_fifo_readI322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	68b9      	ldr	r1, [r7, #8]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f8b0 	bl	800a6f0 <CO_fifo_readHex2a>
 800a590:	4603      	mov	r3, r0
    }
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	08020fe4 	.word	0x08020fe4

0800a5a0 <CO_fifo_readI642a>:

size_t
CO_fifo_readI642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
    int64_t n = 0;
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	f04f 0300 	mov.w	r3, #0
 800a5b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <CO_fifo_readI642a+0x24>
        return 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e01e      	b.n	800a602 <CO_fifo_readI642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 23U)) {
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff f969 	bl	800989c <CO_fifo_getOccupied>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d111      	bne.n	800a5f4 <CO_fifo_readI642a+0x54>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b16      	cmp	r3, #22
 800a5d4:	d90e      	bls.n	800a5f4 <CO_fifo_readI642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a5d6:	f107 0110 	add.w	r1, r7, #16
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2208      	movs	r2, #8
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fa5a 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId64, CO_SWAP_64(n));
 800a5e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5e8:	4908      	ldr	r1, [pc, #32]	; (800a60c <CO_fifo_readI642a+0x6c>)
 800a5ea:	68b8      	ldr	r0, [r7, #8]
 800a5ec:	f014 fd28 	bl	801f040 <siprintf>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	e006      	b.n	800a602 <CO_fifo_readI642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f878 	bl	800a6f0 <CO_fifo_readHex2a>
 800a600:	4603      	mov	r3, r0
    }
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	08020fe8 	.word	0x08020fe8

0800a610 <CO_fifo_readR322a>:

size_t
CO_fifo_readR322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
    float32_t n = (float32_t)0;
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <CO_fifo_readR322a+0x1e>
        return 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e022      	b.n	800a674 <CO_fifo_readR322a+0x64>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff f934 	bl	800989c <CO_fifo_getOccupied>
 800a634:	4603      	mov	r3, r0
 800a636:	2b04      	cmp	r3, #4
 800a638:	d115      	bne.n	800a666 <CO_fifo_readR322a+0x56>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b13      	cmp	r3, #19
 800a63e:	d912      	bls.n	800a666 <CO_fifo_readR322a+0x56>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a640:	f107 0114 	add.w	r1, r7, #20
 800a644:	2300      	movs	r3, #0
 800a646:	2204      	movs	r2, #4
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fa25 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%g", (float32_t)CO_SWAP_32(n));
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	4618      	mov	r0, r3
 800a652:	f7f5 ff89 	bl	8000568 <__aeabi_f2d>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4908      	ldr	r1, [pc, #32]	; (800a67c <CO_fifo_readR322a+0x6c>)
 800a65c:	68b8      	ldr	r0, [r7, #8]
 800a65e:	f014 fcef 	bl	801f040 <siprintf>
 800a662:	4603      	mov	r3, r0
 800a664:	e006      	b.n	800a674 <CO_fifo_readR322a+0x64>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68b9      	ldr	r1, [r7, #8]
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f83f 	bl	800a6f0 <CO_fifo_readHex2a>
 800a672:	4603      	mov	r3, r0
    }
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	08020ff0 	.word	0x08020ff0

0800a680 <CO_fifo_readR642a>:

size_t
CO_fifo_readR642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
    float64_t n = (float64_t)0;
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <CO_fifo_readR642a+0x24>
        return 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e01e      	b.n	800a6e2 <CO_fifo_readR642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 30U)) {
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7ff f8f9 	bl	800989c <CO_fifo_getOccupied>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d111      	bne.n	800a6d4 <CO_fifo_readR642a+0x54>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b1d      	cmp	r3, #29
 800a6b4:	d90e      	bls.n	800a6d4 <CO_fifo_readR642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a6b6:	f107 0110 	add.w	r1, r7, #16
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2208      	movs	r2, #8
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff f9ea 	bl	8009a98 <CO_fifo_read>
        return (size_t)sprintf(buf, "%g", (float64_t)CO_SWAP_64(n));
 800a6c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6c8:	4908      	ldr	r1, [pc, #32]	; (800a6ec <CO_fifo_readR642a+0x6c>)
 800a6ca:	68b8      	ldr	r0, [r7, #8]
 800a6cc:	f014 fcb8 	bl	801f040 <siprintf>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	e006      	b.n	800a6e2 <CO_fifo_readR642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f808 	bl	800a6f0 <CO_fifo_readHex2a>
 800a6e0:	4603      	mov	r3, r0
    }
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08020ff0 	.word	0x08020ff0

0800a6f0 <CO_fifo_readHex2a>:

size_t
CO_fifo_readHex2a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
    (void)end; /* unused */

    size_t len = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]

    if ((fifo != NULL) && (count > 3U)) {
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d038      	beq.n	800a77a <CO_fifo_readHex2a+0x8a>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d935      	bls.n	800a77a <CO_fifo_readHex2a+0x8a>
        /* Very first write is without leading space */
        if (!fifo->started) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d12a      	bne.n	800a76c <CO_fifo_readHex2a+0x7c>
            uint8_t c;
            if (CO_fifo_getc(fifo, &c)) {
 800a716:	f107 0313 	add.w	r3, r7, #19
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff f911 	bl	8009944 <CO_fifo_getc>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d021      	beq.n	800a76c <CO_fifo_readHex2a+0x7c>
                len = (size_t)sprintf(&buf[0], "%02" PRIX8, (uint32_t)c);
 800a728:	7cfb      	ldrb	r3, [r7, #19]
 800a72a:	461a      	mov	r2, r3
 800a72c:	4915      	ldr	r1, [pc, #84]	; (800a784 <CO_fifo_readHex2a+0x94>)
 800a72e:	68b8      	ldr	r0, [r7, #8]
 800a730:	f014 fc86 	bl	801f040 <siprintf>
 800a734:	4603      	mov	r3, r0
 800a736:	617b      	str	r3, [r7, #20]
                fifo->started = true;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	615a      	str	r2, [r3, #20]
            }
        }

        while ((len + 3U) < count) {
 800a73e:	e015      	b.n	800a76c <CO_fifo_readHex2a+0x7c>
            uint8_t c;
            if (!CO_fifo_getc(fifo, &c)) {
 800a740:	f107 0312 	add.w	r3, r7, #18
 800a744:	4619      	mov	r1, r3
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff f8fc 	bl	8009944 <CO_fifo_getc>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d012      	beq.n	800a778 <CO_fifo_readHex2a+0x88>
                break;
            }
            len += (size_t)sprintf(&buf[len], " %02" PRIX8, (uint32_t)c);
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	4413      	add	r3, r2
 800a758:	7cba      	ldrb	r2, [r7, #18]
 800a75a:	490b      	ldr	r1, [pc, #44]	; (800a788 <CO_fifo_readHex2a+0x98>)
 800a75c:	4618      	mov	r0, r3
 800a75e:	f014 fc6f 	bl	801f040 <siprintf>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]
        while ((len + 3U) < count) {
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	3303      	adds	r3, #3
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	d8e4      	bhi.n	800a740 <CO_fifo_readHex2a+0x50>
 800a776:	e000      	b.n	800a77a <CO_fifo_readHex2a+0x8a>
                break;
 800a778:	bf00      	nop
        }
    }

    return len;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	08020ff4 	.word	0x08020ff4
 800a788:	08020ffc 	.word	0x08020ffc

0800a78c <CO_fifo_readVs2a>:

size_t
CO_fifo_readVs2a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
    size_t len = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]

    if ((fifo != NULL) && (count > 3U)) {
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d047      	beq.n	800a834 <CO_fifo_readVs2a+0xa8>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d944      	bls.n	800a834 <CO_fifo_readVs2a+0xa8>
        /* Start with '"' */
        if (!fifo->started) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d139      	bne.n	800a826 <CO_fifo_readVs2a+0x9a>
            buf[len] = '"';
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	2222      	movs	r2, #34	; 0x22
 800a7ba:	701a      	strb	r2, [r3, #0]
            len++;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]
            fifo->started = true;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	615a      	str	r2, [r3, #20]
        }

        while ((len + 2U) < count) {
 800a7c8:	e02d      	b.n	800a826 <CO_fifo_readVs2a+0x9a>
            uint8_t c;
            if (!CO_fifo_getc(fifo, &c)) {
 800a7ca:	f107 0313 	add.w	r3, r7, #19
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff f8b7 	bl	8009944 <CO_fifo_getc>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10b      	bne.n	800a7f4 <CO_fifo_readVs2a+0x68>
                if (end) {
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d027      	beq.n	800a832 <CO_fifo_readVs2a+0xa6>
                    buf[len] = '"';
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	2222      	movs	r2, #34	; 0x22
 800a7ea:	701a      	strb	r2, [r3, #0]
                    len++;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	e01f      	b.n	800a834 <CO_fifo_readVs2a+0xa8>
                }
                break;
            } else if ((c != 0U) && (c != (uint8_t)'\r')) {
 800a7f4:	7cfb      	ldrb	r3, [r7, #19]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d015      	beq.n	800a826 <CO_fifo_readVs2a+0x9a>
 800a7fa:	7cfb      	ldrb	r3, [r7, #19]
 800a7fc:	2b0d      	cmp	r3, #13
 800a7fe:	d012      	beq.n	800a826 <CO_fifo_readVs2a+0x9a>
                /* skip null and CR inside string */
                buf[len] = (char)c;
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	7cfa      	ldrb	r2, [r7, #19]
 800a808:	701a      	strb	r2, [r3, #0]
                len++;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	3301      	adds	r3, #1
 800a80e:	617b      	str	r3, [r7, #20]
                if (c == DELIM_DQUOTE) {
 800a810:	7cfb      	ldrb	r3, [r7, #19]
 800a812:	2b22      	cmp	r3, #34	; 0x22
 800a814:	d107      	bne.n	800a826 <CO_fifo_readVs2a+0x9a>
                    buf[len] = '"';
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	4413      	add	r3, r2
 800a81c:	2222      	movs	r2, #34	; 0x22
 800a81e:	701a      	strb	r2, [r3, #0]
                    len++;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	3301      	adds	r3, #1
 800a824:	617b      	str	r3, [r7, #20]
        while ((len + 2U) < count) {
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	3302      	adds	r3, #2
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d8cc      	bhi.n	800a7ca <CO_fifo_readVs2a+0x3e>
 800a830:	e000      	b.n	800a834 <CO_fifo_readVs2a+0xa8>
                break;
 800a832:	bf00      	nop
            } else { /* MISRA C 2004 14.10 */
            }
        }
    }

    return len;
 800a834:	697b      	ldr	r3, [r7, #20]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <CO_fifo_readB642a>:

size_t
CO_fifo_readB642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
    /* mime-base64 encoding, see description above base64EncTable */

    size_t len = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	61fb      	str	r3, [r7, #28]

    if ((fifo != NULL) && (count >= 4U)) {
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 80ba 	beq.w	800a9ce <CO_fifo_readB642a+0x18e>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	f240 80b6 	bls.w	800a9ce <CO_fifo_readB642a+0x18e>
        uint8_t step;
        uint16_t word;

        if (!fifo->started) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d107      	bne.n	800a87a <CO_fifo_readB642a+0x3a>
            fifo->started = true;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2201      	movs	r2, #1
 800a86e:	615a      	str	r2, [r3, #20]
            step = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	76fb      	strb	r3, [r7, #27]
            word = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	833b      	strh	r3, [r7, #24]
 800a878:	e09b      	b.n	800a9b2 <CO_fifo_readB642a+0x172>
        } else {
            /* get memorized variables from previous function calls */
            step = (uint8_t)(fifo->aux >> 16);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	0c1b      	lsrs	r3, r3, #16
 800a880:	76fb      	strb	r3, [r7, #27]
            word = (uint16_t)fifo->aux;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	833b      	strh	r3, [r7, #24]
        }

        while ((len + 3U) <= count) {
 800a888:	e093      	b.n	800a9b2 <CO_fifo_readB642a+0x172>
            uint8_t c;

            if (!CO_fifo_getc(fifo, &c)) {
 800a88a:	f107 0317 	add.w	r3, r7, #23
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff f857 	bl	8009944 <CO_fifo_getc>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d13f      	bne.n	800a91c <CO_fifo_readB642a+0xdc>
                /* buffer is empty, is also SDO communication finished? */
                if (end) {
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 808e 	beq.w	800a9c0 <CO_fifo_readB642a+0x180>
                    /* add padding if necessary */
                    switch (step) {
 800a8a4:	7efb      	ldrb	r3, [r7, #27]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d002      	beq.n	800a8b0 <CO_fifo_readB642a+0x70>
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d01f      	beq.n	800a8ee <CO_fifo_readB642a+0xae>
                            buf[len] = '=';
                            len++;
                            break;
                        default:
                            /* MISRA C 2004 15.3 */
                            break;
 800a8ae:	e088      	b.n	800a9c2 <CO_fifo_readB642a+0x182>
                            buf[len] = base64EncTable[(word >> 4) & 0x3FU];
 800a8b0:	8b3b      	ldrh	r3, [r7, #24]
 800a8b2:	091b      	lsrs	r3, r3, #4
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	440b      	add	r3, r1
 800a8c0:	4945      	ldr	r1, [pc, #276]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a8c2:	5c8a      	ldrb	r2, [r1, r2]
 800a8c4:	701a      	strb	r2, [r3, #0]
                            len++;
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	223d      	movs	r2, #61	; 0x3d
 800a8d4:	701a      	strb	r2, [r3, #0]
                            len++;
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	223d      	movs	r2, #61	; 0x3d
 800a8e4:	701a      	strb	r2, [r3, #0]
                            len++;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	61fb      	str	r3, [r7, #28]
                            break;
 800a8ec:	e069      	b.n	800a9c2 <CO_fifo_readB642a+0x182>
                            buf[len] = base64EncTable[(word >> 6) & 0x3FU];
 800a8ee:	8b3b      	ldrh	r3, [r7, #24]
 800a8f0:	099b      	lsrs	r3, r3, #6
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	440b      	add	r3, r1
 800a8fe:	4936      	ldr	r1, [pc, #216]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a900:	5c8a      	ldrb	r2, [r1, r2]
 800a902:	701a      	strb	r2, [r3, #0]
                            len++;
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	3301      	adds	r3, #1
 800a908:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	4413      	add	r3, r2
 800a910:	223d      	movs	r2, #61	; 0x3d
 800a912:	701a      	strb	r2, [r3, #0]
                            len++;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	3301      	adds	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
                            break;
 800a91a:	e052      	b.n	800a9c2 <CO_fifo_readB642a+0x182>
                    }
                }
                break;
            }

            word |= c;
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	8b3b      	ldrh	r3, [r7, #24]
 800a922:	4313      	orrs	r3, r2
 800a924:	833b      	strh	r3, [r7, #24]

            switch (step++) {
 800a926:	7efb      	ldrb	r3, [r7, #27]
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	76fa      	strb	r2, [r7, #27]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <CO_fifo_readB642a+0xf6>
 800a930:	2b01      	cmp	r3, #1
 800a932:	d00f      	beq.n	800a954 <CO_fifo_readB642a+0x114>
 800a934:	e01d      	b.n	800a972 <CO_fifo_readB642a+0x132>
                case 0:
                    buf[len] = base64EncTable[(word >> 2) & 0x3FU];
 800a936:	8b3b      	ldrh	r3, [r7, #24]
 800a938:	089b      	lsrs	r3, r3, #2
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	440b      	add	r3, r1
 800a946:	4924      	ldr	r1, [pc, #144]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a948:	5c8a      	ldrb	r2, [r1, r2]
 800a94a:	701a      	strb	r2, [r3, #0]
                    len++;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	3301      	adds	r3, #1
 800a950:	61fb      	str	r3, [r7, #28]
                    break;
 800a952:	e02b      	b.n	800a9ac <CO_fifo_readB642a+0x16c>
                case 1:
                    buf[len] = base64EncTable[(word >> 4) & 0x3FU];
 800a954:	8b3b      	ldrh	r3, [r7, #24]
 800a956:	091b      	lsrs	r3, r3, #4
 800a958:	b29b      	uxth	r3, r3
 800a95a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	440b      	add	r3, r1
 800a964:	491c      	ldr	r1, [pc, #112]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a966:	5c8a      	ldrb	r2, [r1, r2]
 800a968:	701a      	strb	r2, [r3, #0]
                    len++;
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	3301      	adds	r3, #1
 800a96e:	61fb      	str	r3, [r7, #28]
                    break;
 800a970:	e01c      	b.n	800a9ac <CO_fifo_readB642a+0x16c>
                default:
                    buf[len] = base64EncTable[(word >> 6) & 0x3FU];
 800a972:	8b3b      	ldrh	r3, [r7, #24]
 800a974:	099b      	lsrs	r3, r3, #6
 800a976:	b29b      	uxth	r3, r3
 800a978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	440b      	add	r3, r1
 800a982:	4915      	ldr	r1, [pc, #84]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a984:	5c8a      	ldrb	r2, [r1, r2]
 800a986:	701a      	strb	r2, [r3, #0]
                    len++;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	3301      	adds	r3, #1
 800a98c:	61fb      	str	r3, [r7, #28]
                    buf[len] = base64EncTable[word & 0x3FU];
 800a98e:	8b3b      	ldrh	r3, [r7, #24]
 800a990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	440b      	add	r3, r1
 800a99a:	490f      	ldr	r1, [pc, #60]	; (800a9d8 <CO_fifo_readB642a+0x198>)
 800a99c:	5c8a      	ldrb	r2, [r1, r2]
 800a99e:	701a      	strb	r2, [r3, #0]
                    len++;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	61fb      	str	r3, [r7, #28]
                    step = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	76fb      	strb	r3, [r7, #27]
                    break;
 800a9aa:	bf00      	nop
            }
            word <<= 8;
 800a9ac:	8b3b      	ldrh	r3, [r7, #24]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	833b      	strh	r3, [r7, #24]
        while ((len + 3U) <= count) {
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	3303      	adds	r3, #3
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	f4bf af66 	bcs.w	800a88a <CO_fifo_readB642a+0x4a>
 800a9be:	e000      	b.n	800a9c2 <CO_fifo_readB642a+0x182>
                break;
 800a9c0:	bf00      	nop
        }

        /* memorize variables for next iteration */
        fifo->aux = ((uint32_t)step << 16) | word;
 800a9c2:	7efb      	ldrb	r3, [r7, #27]
 800a9c4:	041a      	lsls	r2, r3, #16
 800a9c6:	8b3b      	ldrh	r3, [r7, #24]
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	619a      	str	r2, [r3, #24]
    }

    return len;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3720      	adds	r7, #32
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	08021e0c 	.word	0x08021e0c

0800a9dc <CO_fifo_cpyTok2U8>:

size_t
CO_fifo_cpyTok2U8(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b092      	sub	sp, #72	; 0x48
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800a9e8:	23ff      	movs	r3, #255	; 0xff
 800a9ea:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800a9f4:	f107 021f 	add.w	r2, r7, #31
 800a9f8:	f107 0120 	add.w	r1, r7, #32
 800a9fc:	f107 0318 	add.w	r3, r7, #24
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4613      	mov	r3, r2
 800aa04:	220f      	movs	r2, #15
 800aa06:	68b8      	ldr	r0, [r7, #8]
 800aa08:	f7ff fa40 	bl	8009e8c <CO_fifo_readToken>
 800aa0c:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
 800aa10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800aa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <CO_fifo_cpyTok2U8+0x44>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d006      	beq.n	800aa2e <CO_fifo_cpyTok2U8+0x52>
        st |= CO_fifo_st_errTok;
 800aa20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa24:	f043 0310 	orr.w	r3, r3, #16
 800aa28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800aa2c:	e033      	b.n	800aa96 <CO_fifo_cpyTok2U8+0xba>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800aa2e:	f107 0114 	add.w	r1, r7, #20
 800aa32:	f107 0320 	add.w	r3, r7, #32
 800aa36:	2200      	movs	r2, #0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f013 ffa5 	bl	801e988 <strtoul>
 800aa3e:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (u32 > (uint32_t)UINT8_MAX)) {
 800aa40:	f107 0320 	add.w	r3, r7, #32
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7f5 fc23 	bl	8000290 <strlen>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f107 0320 	add.w	r3, r7, #32
 800aa52:	441a      	add	r2, r3
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d102      	bne.n	800aa60 <CO_fifo_cpyTok2U8+0x84>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	2bff      	cmp	r3, #255	; 0xff
 800aa5e:	d906      	bls.n	800aa6e <CO_fifo_cpyTok2U8+0x92>
            st |= CO_fifo_st_errVal;
 800aa60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa64:	f043 0320 	orr.w	r3, r3, #32
 800aa68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800aa6c:	e013      	b.n	800aa96 <CO_fifo_cpyTok2U8+0xba>
        } else {
            uint8_t num = (uint8_t)u32;
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	74fb      	strb	r3, [r7, #19]
            nWr = CO_fifo_write(dest, &num, sizeof(num), NULL);
 800aa74:	f107 0113 	add.w	r1, r7, #19
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7fe ffb3 	bl	80099e8 <CO_fifo_write>
 800aa82:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d005      	beq.n	800aa96 <CO_fifo_cpyTok2U8+0xba>
                st |= CO_fifo_st_errBuf;
 800aa8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <CO_fifo_cpyTok2U8+0xc8>
        *status = st;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800aaa2:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3740      	adds	r7, #64	; 0x40
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <CO_fifo_cpyTok2U16>:

size_t
CO_fifo_cpyTok2U16(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b092      	sub	sp, #72	; 0x48
 800aab2:	af02      	add	r7, sp, #8
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800aaba:	23ff      	movs	r3, #255	; 0xff
 800aabc:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800aabe:	2300      	movs	r3, #0
 800aac0:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800aac6:	f107 021f 	add.w	r2, r7, #31
 800aaca:	f107 0120 	add.w	r1, r7, #32
 800aace:	f107 0318 	add.w	r3, r7, #24
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4613      	mov	r3, r2
 800aad6:	220f      	movs	r2, #15
 800aad8:	68b8      	ldr	r0, [r7, #8]
 800aada:	f7ff f9d7 	bl	8009e8c <CO_fifo_readToken>
 800aade:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800aae0:	7ffb      	ldrb	r3, [r7, #31]
 800aae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <CO_fifo_cpyTok2U16+0x44>
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d006      	beq.n	800ab00 <CO_fifo_cpyTok2U16+0x52>
        st |= CO_fifo_st_errTok;
 800aaf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aaf6:	f043 0310 	orr.w	r3, r3, #16
 800aafa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800aafe:	e034      	b.n	800ab6a <CO_fifo_cpyTok2U16+0xbc>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800ab00:	f107 0114 	add.w	r1, r7, #20
 800ab04:	f107 0320 	add.w	r3, r7, #32
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f013 ff3c 	bl	801e988 <strtoul>
 800ab10:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (u32 > (uint32_t)UINT16_MAX)) {
 800ab12:	f107 0320 	add.w	r3, r7, #32
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f5 fbba 	bl	8000290 <strlen>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f107 0320 	add.w	r3, r7, #32
 800ab24:	441a      	add	r2, r3
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d103      	bne.n	800ab34 <CO_fifo_cpyTok2U16+0x86>
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab32:	d306      	bcc.n	800ab42 <CO_fifo_cpyTok2U16+0x94>
            st |= CO_fifo_st_errVal;
 800ab34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab38:	f043 0320 	orr.w	r3, r3, #32
 800ab3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ab40:	e013      	b.n	800ab6a <CO_fifo_cpyTok2U16+0xbc>
        } else {
            uint16_t num = CO_SWAP_16((uint16_t)u32);
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	827b      	strh	r3, [r7, #18]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800ab48:	f107 0112 	add.w	r1, r7, #18
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2202      	movs	r2, #2
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7fe ff49 	bl	80099e8 <CO_fifo_write>
 800ab56:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800ab58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d005      	beq.n	800ab6a <CO_fifo_cpyTok2U16+0xbc>
                st |= CO_fifo_st_errBuf;
 800ab5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <CO_fifo_cpyTok2U16+0xca>
        *status = st;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ab76:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800ab78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3740      	adds	r7, #64	; 0x40
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <CO_fifo_cpyTok2U32>:

size_t
CO_fifo_cpyTok2U32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b092      	sub	sp, #72	; 0x48
 800ab86:	af02      	add	r7, sp, #8
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800ab8e:	23ff      	movs	r3, #255	; 0xff
 800ab90:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800ab9a:	f107 021f 	add.w	r2, r7, #31
 800ab9e:	f107 0120 	add.w	r1, r7, #32
 800aba2:	f107 0318 	add.w	r3, r7, #24
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4613      	mov	r3, r2
 800abaa:	220f      	movs	r2, #15
 800abac:	68b8      	ldr	r0, [r7, #8]
 800abae:	f7ff f96d 	bl	8009e8c <CO_fifo_readToken>
 800abb2:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <CO_fifo_cpyTok2U32+0x44>
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d006      	beq.n	800abd4 <CO_fifo_cpyTok2U32+0x52>
        st |= CO_fifo_st_errTok;
 800abc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abca:	f043 0310 	orr.w	r3, r3, #16
 800abce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800abd2:	e02f      	b.n	800ac34 <CO_fifo_cpyTok2U32+0xb2>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800abd4:	f107 0114 	add.w	r1, r7, #20
 800abd8:	f107 0320 	add.w	r3, r7, #32
 800abdc:	2200      	movs	r2, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f013 fed2 	bl	801e988 <strtoul>
 800abe4:	6338      	str	r0, [r7, #48]	; 0x30
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800abe6:	f107 0320 	add.w	r3, r7, #32
 800abea:	4618      	mov	r0, r3
 800abec:	f7f5 fb50 	bl	8000290 <strlen>
 800abf0:	4603      	mov	r3, r0
 800abf2:	461a      	mov	r2, r3
 800abf4:	f107 0320 	add.w	r3, r7, #32
 800abf8:	441a      	add	r2, r3
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d006      	beq.n	800ac0e <CO_fifo_cpyTok2U32+0x8c>
            st |= CO_fifo_st_errVal;
 800ac00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac04:	f043 0320 	orr.w	r3, r3, #32
 800ac08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ac0c:	e012      	b.n	800ac34 <CO_fifo_cpyTok2U32+0xb2>
        } else {
            uint32_t num = CO_SWAP_32(u32);
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800ac12:	f107 0110 	add.w	r1, r7, #16
 800ac16:	2300      	movs	r3, #0
 800ac18:	2204      	movs	r2, #4
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f7fe fee4 	bl	80099e8 <CO_fifo_write>
 800ac20:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800ac22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d005      	beq.n	800ac34 <CO_fifo_cpyTok2U32+0xb2>
                st |= CO_fifo_st_errBuf;
 800ac28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <CO_fifo_cpyTok2U32+0xc0>
        *status = st;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ac40:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800ac42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3740      	adds	r7, #64	; 0x40
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <CO_fifo_cpyTok2U64>:

size_t
CO_fifo_cpyTok2U64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b098      	sub	sp, #96	; 0x60
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
    char buf[25];
    uint8_t closed = 0xFFU;
 800ac58:	23ff      	movs	r3, #255	; 0xff
 800ac5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t err = false;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
    size_t nWr = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	657b      	str	r3, [r7, #84]	; 0x54
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800ac66:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800ac6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ac6e:	f107 031c 	add.w	r3, r7, #28
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	2219      	movs	r2, #25
 800ac78:	68b8      	ldr	r0, [r7, #8]
 800ac7a:	f7ff f907 	bl	8009e8c <CO_fifo_readToken>
 800ac7e:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint8_t st = closed;
 800ac80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac84:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if ((nRd == 0U) || err) {
 800ac88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <CO_fifo_cpyTok2U64+0x48>
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d006      	beq.n	800aca2 <CO_fifo_cpyTok2U64+0x56>
        st |= CO_fifo_st_errTok;
 800ac94:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ac98:	f043 0310 	orr.w	r3, r3, #16
 800ac9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800aca0:	e032      	b.n	800ad08 <CO_fifo_cpyTok2U64+0xbc>
    } else {
        char* sRet;
        uint64_t u64 = strtoull(buf, &sRet, 0);
 800aca2:	f107 0118 	add.w	r1, r7, #24
 800aca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acaa:	2200      	movs	r2, #0
 800acac:	4618      	mov	r0, r3
 800acae:	f013 ffa9 	bl	801ec04 <strtoull>
 800acb2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800acb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f5 fae8 	bl	8000290 <strlen>
 800acc0:	4603      	mov	r3, r0
 800acc2:	461a      	mov	r2, r3
 800acc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acc8:	441a      	add	r2, r3
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	429a      	cmp	r2, r3
 800acce:	d006      	beq.n	800acde <CO_fifo_cpyTok2U64+0x92>
            st |= CO_fifo_st_errVal;
 800acd0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800acd4:	f043 0320 	orr.w	r3, r3, #32
 800acd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800acdc:	e014      	b.n	800ad08 <CO_fifo_cpyTok2U64+0xbc>
        } else {
            uint64_t num = CO_SWAP_64(u64);
 800acde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ace2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800ace6:	f107 0110 	add.w	r1, r7, #16
 800acea:	2300      	movs	r3, #0
 800acec:	2208      	movs	r2, #8
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7fe fe7a 	bl	80099e8 <CO_fifo_write>
 800acf4:	6578      	str	r0, [r7, #84]	; 0x54
            if (nWr != sizeof(num)) {
 800acf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d005      	beq.n	800ad08 <CO_fifo_cpyTok2U64+0xbc>
                st |= CO_fifo_st_errBuf;
 800acfc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ad00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad04:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            }
        }
    }
    if (status != NULL) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <CO_fifo_cpyTok2U64+0xca>
        *status = (uint8_t)st;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800ad14:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800ad16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3758      	adds	r7, #88	; 0x58
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <CO_fifo_cpyTok2I8>:

size_t
CO_fifo_cpyTok2I8(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b092      	sub	sp, #72	; 0x48
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800ad2c:	23ff      	movs	r3, #255	; 0xff
 800ad2e:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800ad38:	f107 021f 	add.w	r2, r7, #31
 800ad3c:	f107 0120 	add.w	r1, r7, #32
 800ad40:	f107 0318 	add.w	r3, r7, #24
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4613      	mov	r3, r2
 800ad48:	220f      	movs	r2, #15
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f7ff f89e 	bl	8009e8c <CO_fifo_readToken>
 800ad50:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800ad52:	7ffb      	ldrb	r3, [r7, #31]
 800ad54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <CO_fifo_cpyTok2I8+0x44>
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d006      	beq.n	800ad72 <CO_fifo_cpyTok2I8+0x52>
        st |= CO_fifo_st_errTok;
 800ad64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad68:	f043 0310 	orr.w	r3, r3, #16
 800ad6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ad70:	e037      	b.n	800ade2 <CO_fifo_cpyTok2I8+0xc2>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800ad72:	f107 0114 	add.w	r1, r7, #20
 800ad76:	f107 0320 	add.w	r3, r7, #32
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f013 fd87 	bl	801e890 <strtol>
 800ad82:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (i32 < INT8_MIN) || (i32 > INT8_MAX)) {
 800ad84:	f107 0320 	add.w	r3, r7, #32
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f5 fa81 	bl	8000290 <strlen>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	461a      	mov	r2, r3
 800ad92:	f107 0320 	add.w	r3, r7, #32
 800ad96:	441a      	add	r2, r3
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d106      	bne.n	800adac <CO_fifo_cpyTok2I8+0x8c>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800ada4:	db02      	blt.n	800adac <CO_fifo_cpyTok2I8+0x8c>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	2b7f      	cmp	r3, #127	; 0x7f
 800adaa:	dd06      	ble.n	800adba <CO_fifo_cpyTok2I8+0x9a>
            st |= CO_fifo_st_errVal;
 800adac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800adb0:	f043 0320 	orr.w	r3, r3, #32
 800adb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800adb8:	e013      	b.n	800ade2 <CO_fifo_cpyTok2I8+0xc2>
        } else {
            int8_t num = (int8_t)i32;
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	b25b      	sxtb	r3, r3
 800adbe:	74fb      	strb	r3, [r7, #19]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800adc0:	f107 0113 	add.w	r1, r7, #19
 800adc4:	2300      	movs	r3, #0
 800adc6:	2201      	movs	r2, #1
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7fe fe0d 	bl	80099e8 <CO_fifo_write>
 800adce:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add2:	2b01      	cmp	r3, #1
 800add4:	d005      	beq.n	800ade2 <CO_fifo_cpyTok2I8+0xc2>
                st |= CO_fifo_st_errBuf;
 800add6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800adda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <CO_fifo_cpyTok2I8+0xd0>
        *status = st;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800adee:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800adf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3740      	adds	r7, #64	; 0x40
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <CO_fifo_cpyTok2I16>:

size_t
CO_fifo_cpyTok2I16(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b092      	sub	sp, #72	; 0x48
 800adfe:	af02      	add	r7, sp, #8
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800ae06:	23ff      	movs	r3, #255	; 0xff
 800ae08:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800ae12:	f107 021f 	add.w	r2, r7, #31
 800ae16:	f107 0120 	add.w	r1, r7, #32
 800ae1a:	f107 0318 	add.w	r3, r7, #24
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	4613      	mov	r3, r2
 800ae22:	220f      	movs	r2, #15
 800ae24:	68b8      	ldr	r0, [r7, #8]
 800ae26:	f7ff f831 	bl	8009e8c <CO_fifo_readToken>
 800ae2a:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800ae2c:	7ffb      	ldrb	r3, [r7, #31]
 800ae2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <CO_fifo_cpyTok2I16+0x44>
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d006      	beq.n	800ae4c <CO_fifo_cpyTok2I16+0x52>
        st |= CO_fifo_st_errTok;
 800ae3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae42:	f043 0310 	orr.w	r3, r3, #16
 800ae46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ae4a:	e038      	b.n	800aebe <CO_fifo_cpyTok2I16+0xc4>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800ae4c:	f107 0114 	add.w	r1, r7, #20
 800ae50:	f107 0320 	add.w	r3, r7, #32
 800ae54:	2200      	movs	r2, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f013 fd1a 	bl	801e890 <strtol>
 800ae5c:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (i32 < INT16_MIN) || (i32 > INT16_MAX)) {
 800ae5e:	f107 0320 	add.w	r3, r7, #32
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f5 fa14 	bl	8000290 <strlen>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f107 0320 	add.w	r3, r7, #32
 800ae70:	441a      	add	r2, r3
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d107      	bne.n	800ae88 <CO_fifo_cpyTok2I16+0x8e>
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ae7e:	db03      	blt.n	800ae88 <CO_fifo_cpyTok2I16+0x8e>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae86:	db06      	blt.n	800ae96 <CO_fifo_cpyTok2I16+0x9c>
            st |= CO_fifo_st_errVal;
 800ae88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae8c:	f043 0320 	orr.w	r3, r3, #32
 800ae90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ae94:	e013      	b.n	800aebe <CO_fifo_cpyTok2I16+0xc4>
        } else {
            int16_t num = CO_SWAP_16((int16_t)i32);
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	827b      	strh	r3, [r7, #18]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800ae9c:	f107 0112 	add.w	r1, r7, #18
 800aea0:	2300      	movs	r3, #0
 800aea2:	2202      	movs	r2, #2
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7fe fd9f 	bl	80099e8 <CO_fifo_write>
 800aeaa:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d005      	beq.n	800aebe <CO_fifo_cpyTok2I16+0xc4>
                st |= CO_fifo_st_errBuf;
 800aeb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aeb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <CO_fifo_cpyTok2I16+0xd2>
        *status = st;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800aeca:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3740      	adds	r7, #64	; 0x40
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <CO_fifo_cpyTok2I32>:

size_t
CO_fifo_cpyTok2I32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b092      	sub	sp, #72	; 0x48
 800aeda:	af02      	add	r7, sp, #8
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800aee2:	23ff      	movs	r3, #255	; 0xff
 800aee4:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800aeee:	f107 021f 	add.w	r2, r7, #31
 800aef2:	f107 0120 	add.w	r1, r7, #32
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4613      	mov	r3, r2
 800aefe:	220f      	movs	r2, #15
 800af00:	68b8      	ldr	r0, [r7, #8]
 800af02:	f7fe ffc3 	bl	8009e8c <CO_fifo_readToken>
 800af06:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800af08:	7ffb      	ldrb	r3, [r7, #31]
 800af0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800af0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <CO_fifo_cpyTok2I32+0x44>
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d006      	beq.n	800af28 <CO_fifo_cpyTok2I32+0x52>
        st |= CO_fifo_st_errTok;
 800af1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af1e:	f043 0310 	orr.w	r3, r3, #16
 800af22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800af26:	e02f      	b.n	800af88 <CO_fifo_cpyTok2I32+0xb2>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800af28:	f107 0114 	add.w	r1, r7, #20
 800af2c:	f107 0320 	add.w	r3, r7, #32
 800af30:	2200      	movs	r2, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f013 fcac 	bl	801e890 <strtol>
 800af38:	6338      	str	r0, [r7, #48]	; 0x30
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800af3a:	f107 0320 	add.w	r3, r7, #32
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f5 f9a6 	bl	8000290 <strlen>
 800af44:	4603      	mov	r3, r0
 800af46:	461a      	mov	r2, r3
 800af48:	f107 0320 	add.w	r3, r7, #32
 800af4c:	441a      	add	r2, r3
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	429a      	cmp	r2, r3
 800af52:	d006      	beq.n	800af62 <CO_fifo_cpyTok2I32+0x8c>
            st |= CO_fifo_st_errVal;
 800af54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af58:	f043 0320 	orr.w	r3, r3, #32
 800af5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800af60:	e012      	b.n	800af88 <CO_fifo_cpyTok2I32+0xb2>
        } else {
            int32_t num = CO_SWAP_32(i32);
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800af66:	f107 0110 	add.w	r1, r7, #16
 800af6a:	2300      	movs	r3, #0
 800af6c:	2204      	movs	r2, #4
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7fe fd3a 	bl	80099e8 <CO_fifo_write>
 800af74:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800af76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d005      	beq.n	800af88 <CO_fifo_cpyTok2I32+0xb2>
                st |= CO_fifo_st_errBuf;
 800af7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <CO_fifo_cpyTok2I32+0xc0>
        *status = st;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800af94:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3740      	adds	r7, #64	; 0x40
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <CO_fifo_cpyTok2I64>:

size_t
CO_fifo_cpyTok2I64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b098      	sub	sp, #96	; 0x60
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
    char buf[25];
    uint8_t closed = 0xFFU;
 800afac:	23ff      	movs	r3, #255	; 0xff
 800afae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t err = false;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
    size_t nWr = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	657b      	str	r3, [r7, #84]	; 0x54
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800afba:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800afbe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800afc2:	f107 031c 	add.w	r3, r7, #28
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	2219      	movs	r2, #25
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f7fe ff5d 	bl	8009e8c <CO_fifo_readToken>
 800afd2:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint8_t st = closed;
 800afd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if ((nRd == 0U) || err) {
 800afdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <CO_fifo_cpyTok2I64+0x48>
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <CO_fifo_cpyTok2I64+0x56>
        st |= CO_fifo_st_errTok;
 800afe8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800afec:	f043 0310 	orr.w	r3, r3, #16
 800aff0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800aff4:	e032      	b.n	800b05c <CO_fifo_cpyTok2I64+0xbc>
    } else {
        char* sRet;
        int64_t i64 = strtoll(buf, &sRet, 0);
 800aff6:	f107 0118 	add.w	r1, r7, #24
 800affa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800affe:	2200      	movs	r2, #0
 800b000:	4618      	mov	r0, r3
 800b002:	f013 fd5d 	bl	801eac0 <strtoll>
 800b006:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b00a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f5 f93e 	bl	8000290 <strlen>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b01c:	441a      	add	r2, r3
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	429a      	cmp	r2, r3
 800b022:	d006      	beq.n	800b032 <CO_fifo_cpyTok2I64+0x92>
            st |= CO_fifo_st_errVal;
 800b024:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b028:	f043 0320 	orr.w	r3, r3, #32
 800b02c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b030:	e014      	b.n	800b05c <CO_fifo_cpyTok2I64+0xbc>
        } else {
            int64_t num = CO_SWAP_64(i64);
 800b032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b036:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b03a:	f107 0110 	add.w	r1, r7, #16
 800b03e:	2300      	movs	r3, #0
 800b040:	2208      	movs	r2, #8
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7fe fcd0 	bl	80099e8 <CO_fifo_write>
 800b048:	6578      	str	r0, [r7, #84]	; 0x54
            if (nWr != sizeof(num)) {
 800b04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b04c:	2b08      	cmp	r3, #8
 800b04e:	d005      	beq.n	800b05c <CO_fifo_cpyTok2I64+0xbc>
                st |= CO_fifo_st_errBuf;
 800b050:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b058:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            }
        }
    }
    if (status != NULL) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <CO_fifo_cpyTok2I64+0xca>
        *status = (uint8_t)st;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b068:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3758      	adds	r7, #88	; 0x58
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <CO_fifo_cpyTok2R32>:

size_t
CO_fifo_cpyTok2R32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b096      	sub	sp, #88	; 0x58
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
    char buf[30];
    uint8_t closed = 0xFFU;
 800b080:	23ff      	movs	r3, #255	; 0xff
 800b082:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800b084:	2300      	movs	r3, #0
 800b086:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b08c:	f107 021f 	add.w	r2, r7, #31
 800b090:	f107 0120 	add.w	r1, r7, #32
 800b094:	f107 0318 	add.w	r3, r7, #24
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4613      	mov	r3, r2
 800b09c:	221e      	movs	r2, #30
 800b09e:	68b8      	ldr	r0, [r7, #8]
 800b0a0:	f7fe fef4 	bl	8009e8c <CO_fifo_readToken>
 800b0a4:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t st = closed;
 800b0a6:	7ffb      	ldrb	r3, [r7, #31]
 800b0a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if ((nRd == 0U) || err) {
 800b0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <CO_fifo_cpyTok2R32+0x44>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d006      	beq.n	800b0c6 <CO_fifo_cpyTok2R32+0x52>
        st |= CO_fifo_st_errTok;
 800b0b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b0bc:	f043 0310 	orr.w	r3, r3, #16
 800b0c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b0c4:	e030      	b.n	800b128 <CO_fifo_cpyTok2R32+0xb4>
    } else {
        char* sRet;
        float32_t f32 = strtof(buf, &sRet);
 800b0c6:	f107 0214 	add.w	r2, r7, #20
 800b0ca:	f107 0320 	add.w	r3, r7, #32
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f013 faf5 	bl	801e6c0 <strtof>
 800b0d6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b0da:	f107 0320 	add.w	r3, r7, #32
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f5 f8d6 	bl	8000290 <strlen>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f107 0320 	add.w	r3, r7, #32
 800b0ec:	441a      	add	r2, r3
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d006      	beq.n	800b102 <CO_fifo_cpyTok2R32+0x8e>
            st |= CO_fifo_st_errVal;
 800b0f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b0f8:	f043 0320 	orr.w	r3, r3, #32
 800b0fc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b100:	e012      	b.n	800b128 <CO_fifo_cpyTok2R32+0xb4>
        } else {
            float32_t num = CO_SWAP_32(f32);
 800b102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b104:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b106:	f107 0110 	add.w	r1, r7, #16
 800b10a:	2300      	movs	r3, #0
 800b10c:	2204      	movs	r2, #4
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7fe fc6a 	bl	80099e8 <CO_fifo_write>
 800b114:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (nWr != sizeof(num)) {
 800b116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d005      	beq.n	800b128 <CO_fifo_cpyTok2R32+0xb4>
                st |= CO_fifo_st_errBuf;
 800b11c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b124:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
        }
    }
    if (status != NULL) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <CO_fifo_cpyTok2R32+0xc2>
        *status = st;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800b134:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3750      	adds	r7, #80	; 0x50
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <CO_fifo_cpyTok2R64>:

size_t
CO_fifo_cpyTok2R64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b140:	b580      	push	{r7, lr}
 800b142:	b09c      	sub	sp, #112	; 0x70
 800b144:	af02      	add	r7, sp, #8
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
    char buf[40];
    uint8_t closed = 0xFFU;
 800b14c:	23ff      	movs	r3, #255	; 0xff
 800b14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool_t err = false;
 800b152:	2300      	movs	r3, #0
 800b154:	623b      	str	r3, [r7, #32]
    size_t nWr = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	667b      	str	r3, [r7, #100]	; 0x64
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b15a:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800b15e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b162:	f107 0320 	add.w	r3, r7, #32
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	4613      	mov	r3, r2
 800b16a:	2228      	movs	r2, #40	; 0x28
 800b16c:	68b8      	ldr	r0, [r7, #8]
 800b16e:	f7fe fe8d 	bl	8009e8c <CO_fifo_readToken>
 800b172:	65f8      	str	r0, [r7, #92]	; 0x5c
    uint8_t st = closed;
 800b174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b178:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if ((nRd == 0U) || err) {
 800b17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <CO_fifo_cpyTok2R64+0x48>
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d006      	beq.n	800b196 <CO_fifo_cpyTok2R64+0x56>
        st |= CO_fifo_st_errTok;
 800b188:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b18c:	f043 0310 	orr.w	r3, r3, #16
 800b190:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b194:	e039      	b.n	800b20a <CO_fifo_cpyTok2R64+0xca>
    } else {
        char* sRet;
        float64_t f64 = strtof(buf, &sRet);
 800b196:	f107 021c 	add.w	r2, r7, #28
 800b19a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f013 fa8d 	bl	801e6c0 <strtof>
 800b1a6:	ee10 3a10 	vmov	r3, s0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7f5 f9dc 	bl	8000568 <__aeabi_f2d>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b1b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f5 f867 	bl	8000290 <strlen>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b1ca:	441a      	add	r2, r3
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d006      	beq.n	800b1e0 <CO_fifo_cpyTok2R64+0xa0>
            st |= CO_fifo_st_errVal;
 800b1d2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b1d6:	f043 0320 	orr.w	r3, r3, #32
 800b1da:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b1de:	e014      	b.n	800b20a <CO_fifo_cpyTok2R64+0xca>
        } else {
            float64_t num = CO_SWAP_64(f64);
 800b1e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b1e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b1e8:	f107 0110 	add.w	r1, r7, #16
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2208      	movs	r2, #8
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7fe fbf9 	bl	80099e8 <CO_fifo_write>
 800b1f6:	6678      	str	r0, [r7, #100]	; 0x64
            if (nWr != sizeof(num)) {
 800b1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1fa:	2b08      	cmp	r3, #8
 800b1fc:	d005      	beq.n	800b20a <CO_fifo_cpyTok2R64+0xca>
                st |= CO_fifo_st_errBuf;
 800b1fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b206:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            }
        }
    }
    if (status != NULL) {
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <CO_fifo_cpyTok2R64+0xd8>
        *status = st;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800b216:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3768      	adds	r7, #104	; 0x68
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <CO_fifo_cpyTok2Hex>:

size_t
CO_fifo_cpyTok2Hex(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b090      	sub	sp, #64	; 0x40
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800b230:	2300      	movs	r3, #0
 800b232:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t step;
    uint8_t firstChar;
    uint8_t st = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    if ((dest == NULL) || (src == NULL)) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <CO_fifo_cpyTok2Hex+0x22>
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <CO_fifo_cpyTok2Hex+0x26>
        return 0;
 800b246:	2300      	movs	r3, #0
 800b248:	e109      	b.n	800b45e <CO_fifo_cpyTok2Hex+0x23a>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7fe fb0a 	bl	8009864 <CO_fifo_getSpace>
 800b250:	6338      	str	r0, [r7, #48]	; 0x30
    destSpace = destSpaceStart;
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* is this the first write into dest? */
    if (!dest->started) {
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11d      	bne.n	800b29a <CO_fifo_cpyTok2Hex+0x76>
        bool_t insideComment = false;
 800b25e:	2300      	movs	r3, #0
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800b262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b266:	4619      	mov	r1, r3
 800b268:	68b8      	ldr	r0, [r7, #8]
 800b26a:	f7fe fdb5 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <CO_fifo_cpyTok2Hex+0x56>
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	2b00      	cmp	r3, #0
 800b278:	d005      	beq.n	800b286 <CO_fifo_cpyTok2Hex+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800b27a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b27e:	f043 0310 	orr.w	r3, r3, #16
 800b282:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        }
        dest->started = true;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2201      	movs	r2, #1
 800b28a:	615a      	str	r2, [r3, #20]
        step = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        firstChar = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800b298:	e0b7      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)(dest->aux >> 8);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        firstChar = (uint8_t)(dest->aux & 0xFFU);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    /* repeat until destination space available and no error and not finished
     * and source characters available */
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b2ac:	e0ad      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800b2ae:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	68b8      	ldr	r0, [r7, #8]
 800b2b6:	f7fe fb45 	bl	8009944 <CO_fifo_getc>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 80b2 	beq.w	800b426 <CO_fifo_cpyTok2Hex+0x202>
            break;
        }

        if (step == 6U) {
 800b2c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2c6:	2b06      	cmp	r3, #6
 800b2c8:	d118      	bne.n	800b2fc <CO_fifo_cpyTok2Hex+0xd8>
            /* command is inside comment, waiting for command delimiter */
            bool_t insideComment = true;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	61fb      	str	r3, [r7, #28]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b2ce:	f107 031c 	add.w	r3, r7, #28
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	68b8      	ldr	r0, [r7, #8]
 800b2d6:	f7fe fd7f 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d103      	bne.n	800b2e8 <CO_fifo_cpyTok2Hex+0xc4>
 800b2e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2e4:	2b0a      	cmp	r3, #10
 800b2e6:	d107      	bne.n	800b2f8 <CO_fifo_cpyTok2Hex+0xd4>
                st |= CO_fifo_st_closed;
 800b2e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                finished = true;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            continue;
 800b2f8:	bf00      	nop
 800b2fa:	e086      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
        }

        if ((int32_t)(isxdigit((int32_t)c)) != 0) {
 800b2fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b300:	3301      	adds	r3, #1
 800b302:	4a59      	ldr	r2, [pc, #356]	; (800b468 <CO_fifo_cpyTok2Hex+0x244>)
 800b304:	4413      	add	r3, r2
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d028      	beq.n	800b362 <CO_fifo_cpyTok2Hex+0x13e>
            /* first or second hex digit */
            if (step == 0U) {
 800b310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b314:	2b00      	cmp	r3, #0
 800b316:	d107      	bne.n	800b328 <CO_fifo_cpyTok2Hex+0x104>
                firstChar = c;
 800b318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b31c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                step = 1;
 800b320:	2301      	movs	r3, #1
 800b322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b326:	e070      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
            } else {
                /* write the byte */
                uint8_t s[3];
                int32_t num;
                s[0] = firstChar;
 800b328:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b32c:	763b      	strb	r3, [r7, #24]
                s[1] = c;
 800b32e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b332:	767b      	strb	r3, [r7, #25]
                s[2] = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	76bb      	strb	r3, [r7, #26]
                num = strtol((char*)&s[0], NULL, 16);
 800b338:	f107 0318 	add.w	r3, r7, #24
 800b33c:	2210      	movs	r2, #16
 800b33e:	2100      	movs	r1, #0
 800b340:	4618      	mov	r0, r3
 800b342:	f013 faa5 	bl	801e890 <strtol>
 800b346:	62b8      	str	r0, [r7, #40]	; 0x28
                (void)CO_fifo_putc(dest, (uint8_t)num);
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f7fe fabf 	bl	80098d2 <CO_fifo_putc>
                destSpace--;
 800b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b356:	3b01      	subs	r3, #1
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
                step = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b360:	e053      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
            }
        } else if ((int32_t)(isgraph((int32_t)c)) != 0) {
 800b362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b366:	3301      	adds	r3, #1
 800b368:	4a3f      	ldr	r2, [pc, #252]	; (800b468 <CO_fifo_cpyTok2Hex+0x244>)
 800b36a:	4413      	add	r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f003 0317 	and.w	r3, r3, #23
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00e      	beq.n	800b394 <CO_fifo_cpyTok2Hex+0x170>
            /* printable character, not hex digit */
            if (c == DELIM_COMMENT) { /* comment start */
 800b376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b37a:	2b23      	cmp	r3, #35	; 0x23
 800b37c:	d103      	bne.n	800b386 <CO_fifo_cpyTok2Hex+0x162>
                step = 6;
 800b37e:	2306      	movs	r3, #6
 800b380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b384:	e041      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
            } else { /* syntax error */
                st |= CO_fifo_st_errTok;
 800b386:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b38a:	f043 0310 	orr.w	r3, r3, #16
 800b38e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800b392:	e03a      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
            }
        } else {
            /* this is space or delimiter */
            if (step == 1U) {
 800b394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d118      	bne.n	800b3ce <CO_fifo_cpyTok2Hex+0x1aa>
                /* write the byte */
                uint8_t s[2];
                int32_t num;
                s[0] = firstChar;
 800b39c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b3a0:	743b      	strb	r3, [r7, #16]
                s[1] = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	747b      	strb	r3, [r7, #17]
                num = strtol((char*)&s[0], NULL, 16);
 800b3a6:	f107 0310 	add.w	r3, r7, #16
 800b3aa:	2210      	movs	r2, #16
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f013 fa6e 	bl	801e890 <strtol>
 800b3b4:	62f8      	str	r0, [r7, #44]	; 0x2c
                (void)CO_fifo_putc(dest, (uint8_t)num);
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7fe fa88 	bl	80098d2 <CO_fifo_putc>
                destSpace--;
 800b3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                step = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
            bool_t insideComment = false;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	f7fe fcfd 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d103      	bne.n	800b3ec <CO_fifo_cpyTok2Hex+0x1c8>
 800b3e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3e8:	2b0a      	cmp	r3, #10
 800b3ea:	d108      	bne.n	800b3fe <CO_fifo_cpyTok2Hex+0x1da>
                /* newline found, finish */
                st |= CO_fifo_st_closed;
 800b3ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b3f0:	f043 0301 	orr.w	r3, r3, #1
 800b3f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                finished = true;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3fc:	e005      	b.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
            } else if (insideComment) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <CO_fifo_cpyTok2Hex+0x1e6>
                step = 6;
 800b404:	2306      	movs	r3, #6
 800b406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00b      	beq.n	800b428 <CO_fifo_cpyTok2Hex+0x204>
 800b410:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d105      	bne.n	800b428 <CO_fifo_cpyTok2Hex+0x204>
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f43f af45 	beq.w	800b2ae <CO_fifo_cpyTok2Hex+0x8a>
 800b424:	e000      	b.n	800b428 <CO_fifo_cpyTok2Hex+0x204>
            break;
 800b426:	bf00      	nop
            } else { /* MISRA C 2004 14.10 */
            }
        }
    } /* while ... */

    if (!finished) {
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10d      	bne.n	800b44a <CO_fifo_cpyTok2Hex+0x226>
        st |= CO_fifo_st_partial;
 800b42e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b432:	f043 0302 	orr.w	r3, r3, #2
 800b436:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        /* memorize variables for next iteration */
        dest->aux = ((uint32_t)step << 8) | firstChar;
 800b43a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b43e:	021a      	lsls	r2, r3, #8
 800b440:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b444:	431a      	orrs	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <CO_fifo_cpyTok2Hex+0x234>
        *status = st;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800b456:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800b458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45c:	1ad3      	subs	r3, r2, r3
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3740      	adds	r7, #64	; 0x40
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	08023c90 	.word	0x08023c90

0800b46c <CO_fifo_cpyTok2Vs>:

size_t
CO_fifo_cpyTok2Vs(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08e      	sub	sp, #56	; 0x38
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800b478:	2300      	movs	r3, #0
 800b47a:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t step;
    uint8_t st = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if ((dest == NULL) || (src == NULL)) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <CO_fifo_cpyTok2Vs+0x22>
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <CO_fifo_cpyTok2Vs+0x26>
        return 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	e17e      	b.n	800b790 <CO_fifo_cpyTok2Vs+0x324>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7fe f9e6 	bl	8009864 <CO_fifo_getSpace>
 800b498:	62b8      	str	r0, [r7, #40]	; 0x28
    destSpace = destSpaceStart;
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34

    /* is this the first write into dest? */
    if (!dest->started) {
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d11a      	bne.n	800b4dc <CO_fifo_cpyTok2Vs+0x70>
        bool_t insideComment = false;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800b4aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f7fe fc91 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <CO_fifo_cpyTok2Vs+0x56>
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d005      	beq.n	800b4ce <CO_fifo_cpyTok2Vs+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800b4c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b4c6:	f043 0310 	orr.w	r3, r3, #16
 800b4ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        dest->started = true;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	615a      	str	r2, [r3, #20]
        step = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4da:	e133      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)dest->aux;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    /* repeat until destination space available and no error and not finished and source characters available */
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b4e4:	e12e      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800b4e6:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	68b8      	ldr	r0, [r7, #8]
 800b4ee:	f7fe fa29 	bl	8009944 <CO_fifo_getc>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8133 	beq.w	800b760 <CO_fifo_cpyTok2Vs+0x2f4>
            break;
        }

        switch (step) {
 800b4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4fe:	2b06      	cmp	r3, #6
 800b500:	f200 8116 	bhi.w	800b730 <CO_fifo_cpyTok2Vs+0x2c4>
 800b504:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <CO_fifo_cpyTok2Vs+0xa0>)
 800b506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50a:	bf00      	nop
 800b50c:	0800b529 	.word	0x0800b529
 800b510:	0800b553 	.word	0x0800b553
 800b514:	0800b553 	.word	0x0800b553
 800b518:	0800b5f1 	.word	0x0800b5f1
 800b51c:	0800b5f1 	.word	0x0800b5f1
 800b520:	0800b691 	.word	0x0800b691
 800b524:	0800b701 	.word	0x0800b701
            case 0: /* beginning of the string, first write into dest */
                if (c == DELIM_DQUOTE) {
 800b528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b52c:	2b22      	cmp	r3, #34	; 0x22
 800b52e:	d103      	bne.n	800b538 <CO_fifo_cpyTok2Vs+0xcc>
                    /* Indicated beginning of the string, skip this character. */
                    step = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    /* copy the character */
                    (void)CO_fifo_putc(dest, c);
                    destSpace--;
                    step = 2;
                }
                break;
 800b536:	e105      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                    (void)CO_fifo_putc(dest, c);
 800b538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b53c:	4619      	mov	r1, r3
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7fe f9c7 	bl	80098d2 <CO_fifo_putc>
                    destSpace--;
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	3b01      	subs	r3, #1
 800b548:	637b      	str	r3, [r7, #52]	; 0x34
                    step = 2;
 800b54a:	2302      	movs	r3, #2
 800b54c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800b550:	e0f8      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>

            case 1: /* inside string, quoted string */
            case 2: /* inside string, single word, no quotes */
                if (c == DELIM_DQUOTE) {
 800b552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b556:	2b22      	cmp	r3, #34	; 0x22
 800b558:	d105      	bne.n	800b566 <CO_fifo_cpyTok2Vs+0xfa>
                    /* double quote found, this may be end of the string or escaped
                     * double quote (with two double quotes) */
                    step += 2U;
 800b55a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b55e:	3302      	adds	r3, #2
 800b560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                } else {
                    /* copy the character */
                    (void)CO_fifo_putc(dest, c);
                    destSpace--;
                }
                break;
 800b564:	e0ee      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b56a:	3301      	adds	r3, #1
 800b56c:	4a8a      	ldr	r2, [pc, #552]	; (800b798 <CO_fifo_cpyTok2Vs+0x32c>)
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	f003 0317 	and.w	r3, r3, #23
 800b576:	2b00      	cmp	r3, #0
 800b578:	d124      	bne.n	800b5c4 <CO_fifo_cpyTok2Vs+0x158>
 800b57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d120      	bne.n	800b5c4 <CO_fifo_cpyTok2Vs+0x158>
                    bool_t insideComment = false;
 800b582:	2300      	movs	r3, #0
 800b584:	61fb      	str	r3, [r7, #28]
                    if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b586:	f107 031c 	add.w	r3, r7, #28
 800b58a:	4619      	mov	r1, r3
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f7fe fc23 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d103      	bne.n	800b5a0 <CO_fifo_cpyTok2Vs+0x134>
 800b598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b59c:	2b0a      	cmp	r3, #10
 800b59e:	d108      	bne.n	800b5b2 <CO_fifo_cpyTok2Vs+0x146>
                        st |= CO_fifo_st_closed;
 800b5a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5a4:	f043 0301 	orr.w	r3, r3, #1
 800b5a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                        finished = true;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	633b      	str	r3, [r7, #48]	; 0x30
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b5b0:	e01d      	b.n	800b5ee <CO_fifo_cpyTok2Vs+0x182>
                        step = insideComment ? 6U : 5U;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <CO_fifo_cpyTok2Vs+0x150>
 800b5b8:	2306      	movs	r3, #6
 800b5ba:	e000      	b.n	800b5be <CO_fifo_cpyTok2Vs+0x152>
 800b5bc:	2305      	movs	r3, #5
 800b5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b5c2:	e014      	b.n	800b5ee <CO_fifo_cpyTok2Vs+0x182>
                } else if (c == DELIM_COMMAND) {
 800b5c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5c8:	2b0a      	cmp	r3, #10
 800b5ca:	d106      	bne.n	800b5da <CO_fifo_cpyTok2Vs+0x16e>
                    st |= CO_fifo_st_errTok;
 800b5cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5d0:	f043 0310 	orr.w	r3, r3, #16
 800b5d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800b5d8:	e0b4      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                    (void)CO_fifo_putc(dest, c);
 800b5da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5de:	4619      	mov	r1, r3
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7fe f976 	bl	80098d2 <CO_fifo_putc>
                    destSpace--;
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800b5ec:	e0aa      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
 800b5ee:	e0a9      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>

            case 3: /* previous was double quote, parsing quoted string */
            case 4: /* previous was double quote, parsing no quoted word */
                if (c == DELIM_DQUOTE) {
 800b5f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5f4:	2b22      	cmp	r3, #34	; 0x22
 800b5f6:	d10e      	bne.n	800b616 <CO_fifo_cpyTok2Vs+0x1aa>
                    /* escaped double quote, copy the character and continue */
                    (void)CO_fifo_putc(dest, c);
 800b5f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f7fe f967 	bl	80098d2 <CO_fifo_putc>
                    destSpace--;
 800b604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b606:	3b01      	subs	r3, #1
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
                    step -= 2U;
 800b60a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b60e:	3b02      	subs	r3, #2
 800b610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            /* space must follow closing double quote, error */
                            st |= CO_fifo_st_errTok;
                        }
                    }
                }
                break;
 800b614:	e096      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                    if (step == 4U) {
 800b616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d106      	bne.n	800b62c <CO_fifo_cpyTok2Vs+0x1c0>
                        st |= CO_fifo_st_errTok;
 800b61e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b622:	f043 0310 	orr.w	r3, r3, #16
 800b626:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800b62a:	e08b      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                        if (isgraph((int)c) == 0) {
 800b62c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b630:	3301      	adds	r3, #1
 800b632:	4a59      	ldr	r2, [pc, #356]	; (800b798 <CO_fifo_cpyTok2Vs+0x32c>)
 800b634:	4413      	add	r3, r2
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	f003 0317 	and.w	r3, r3, #23
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d120      	bne.n	800b682 <CO_fifo_cpyTok2Vs+0x216>
                            bool_t insideComment = false;
 800b640:	2300      	movs	r3, #0
 800b642:	61bb      	str	r3, [r7, #24]
                            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b644:	f107 0318 	add.w	r3, r7, #24
 800b648:	4619      	mov	r1, r3
 800b64a:	68b8      	ldr	r0, [r7, #8]
 800b64c:	f7fe fbc4 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d103      	bne.n	800b65e <CO_fifo_cpyTok2Vs+0x1f2>
 800b656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b65a:	2b0a      	cmp	r3, #10
 800b65c:	d108      	bne.n	800b670 <CO_fifo_cpyTok2Vs+0x204>
                                st |= CO_fifo_st_closed;
 800b65e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b662:	f043 0301 	orr.w	r3, r3, #1
 800b666:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                finished = true;
 800b66a:	2301      	movs	r3, #1
 800b66c:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800b66e:	e069      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                                step = insideComment ? 6U : 5U;
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <CO_fifo_cpyTok2Vs+0x20e>
 800b676:	2306      	movs	r3, #6
 800b678:	e000      	b.n	800b67c <CO_fifo_cpyTok2Vs+0x210>
 800b67a:	2305      	movs	r3, #5
 800b67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800b680:	e060      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                            st |= CO_fifo_st_errTok;
 800b682:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b686:	f043 0310 	orr.w	r3, r3, #16
 800b68a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800b68e:	e059      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>

            case 5: { /* String token is finished, waiting for command delimiter */
                bool_t insideComment = false;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]
                if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	4619      	mov	r1, r3
 800b69a:	68b8      	ldr	r0, [r7, #8]
 800b69c:	f7fe fb9c 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d103      	bne.n	800b6ae <CO_fifo_cpyTok2Vs+0x242>
 800b6a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6aa:	2b0a      	cmp	r3, #10
 800b6ac:	d108      	bne.n	800b6c0 <CO_fifo_cpyTok2Vs+0x254>
                    st |= CO_fifo_st_closed;
 800b6ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    finished = true;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	633b      	str	r3, [r7, #48]	; 0x30
                    } else { /* syntax error */
                        st |= CO_fifo_st_errTok;
                    }
                } else { /* MISRA C 2004 14.10 */
                }
                break;
 800b6be:	e03e      	b.n	800b73e <CO_fifo_cpyTok2Vs+0x2d2>
                } else if (insideComment) {
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <CO_fifo_cpyTok2Vs+0x262>
                    step = 6;
 800b6c6:	2306      	movs	r3, #6
 800b6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800b6cc:	e037      	b.n	800b73e <CO_fifo_cpyTok2Vs+0x2d2>
                } else if (isgraph((int)c) != 0) {
 800b6ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	4a30      	ldr	r2, [pc, #192]	; (800b798 <CO_fifo_cpyTok2Vs+0x32c>)
 800b6d6:	4413      	add	r3, r2
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 0317 	and.w	r3, r3, #23
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d02d      	beq.n	800b73e <CO_fifo_cpyTok2Vs+0x2d2>
                    if (c == DELIM_COMMENT) { /* comment start */
 800b6e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6e6:	2b23      	cmp	r3, #35	; 0x23
 800b6e8:	d103      	bne.n	800b6f2 <CO_fifo_cpyTok2Vs+0x286>
                        step = 6;
 800b6ea:	2306      	movs	r3, #6
 800b6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800b6f0:	e025      	b.n	800b73e <CO_fifo_cpyTok2Vs+0x2d2>
                        st |= CO_fifo_st_errTok;
 800b6f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6f6:	f043 0310 	orr.w	r3, r3, #16
 800b6fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800b6fe:	e01e      	b.n	800b73e <CO_fifo_cpyTok2Vs+0x2d2>
            }
            case 6: { /* String token is finished, waiting for command delimiter */
                bool_t insideComment = true;
 800b700:	2301      	movs	r3, #1
 800b702:	613b      	str	r3, [r7, #16]
                if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b704:	f107 0310 	add.w	r3, r7, #16
 800b708:	4619      	mov	r1, r3
 800b70a:	68b8      	ldr	r0, [r7, #8]
 800b70c:	f7fe fb64 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d103      	bne.n	800b71e <CO_fifo_cpyTok2Vs+0x2b2>
 800b716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b71a:	2b0a      	cmp	r3, #10
 800b71c:	d111      	bne.n	800b742 <CO_fifo_cpyTok2Vs+0x2d6>
                    st |= CO_fifo_st_closed;
 800b71e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    finished = true;
 800b72a:	2301      	movs	r3, #1
 800b72c:	633b      	str	r3, [r7, #48]	; 0x30
                }
                break;
 800b72e:	e008      	b.n	800b742 <CO_fifo_cpyTok2Vs+0x2d6>
            }
            default: /* internal error */ st |= CO_fifo_st_errInt; break;
 800b730:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b738:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b73c:	e002      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                break;
 800b73e:	bf00      	nop
 800b740:	e000      	b.n	800b744 <CO_fifo_cpyTok2Vs+0x2d8>
                break;
 800b742:	bf00      	nop
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00b      	beq.n	800b762 <CO_fifo_cpyTok2Vs+0x2f6>
 800b74a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d105      	bne.n	800b762 <CO_fifo_cpyTok2Vs+0x2f6>
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f43f aec4 	beq.w	800b4e6 <CO_fifo_cpyTok2Vs+0x7a>
 800b75e:	e000      	b.n	800b762 <CO_fifo_cpyTok2Vs+0x2f6>
            break;
 800b760:	bf00      	nop
        }
    }

    if (!finished) {
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	2b00      	cmp	r3, #0
 800b766:	d109      	bne.n	800b77c <CO_fifo_cpyTok2Vs+0x310>
        st |= CO_fifo_st_partial;
 800b768:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b76c:	f043 0302 	orr.w	r3, r3, #2
 800b770:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        /* memorize variables for next iteration */
        dest->aux = step;
 800b774:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <CO_fifo_cpyTok2Vs+0x31e>
        *status = st;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b788:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800b78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78e:	1ad3      	subs	r3, r2, r3
}
 800b790:	4618      	mov	r0, r3
 800b792:	3738      	adds	r7, #56	; 0x38
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	08023c90 	.word	0x08023c90

0800b79c <CO_fifo_cpyTok2B64>:

size_t
CO_fifo_cpyTok2B64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b090      	sub	sp, #64	; 0x40
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
    /* mime-base64 decoding, see description above base64EncTable */

    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t step;
    uint32_t dword;
    uint8_t st = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if ((dest == NULL) || (src == NULL)) {
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <CO_fifo_cpyTok2B64+0x22>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <CO_fifo_cpyTok2B64+0x26>
        return 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	e130      	b.n	800ba24 <CO_fifo_cpyTok2B64+0x288>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7fe f84e 	bl	8009864 <CO_fifo_getSpace>
 800b7c8:	62b8      	str	r0, [r7, #40]	; 0x28
    destSpace = destSpaceStart;
 800b7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* is this the first write into dest? */
    if (!dest->started) {
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d11c      	bne.n	800b810 <CO_fifo_cpyTok2B64+0x74>
        bool_t insideComment = false;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	623b      	str	r3, [r7, #32]
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800b7da:	f107 0320 	add.w	r3, r7, #32
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68b8      	ldr	r0, [r7, #8]
 800b7e2:	f7fe faf9 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <CO_fifo_cpyTok2B64+0x56>
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d005      	beq.n	800b7fe <CO_fifo_cpyTok2B64+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800b7f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7f6:	f043 0310 	orr.w	r3, r3, #16
 800b7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        dest->started = true;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	615a      	str	r2, [r3, #20]
        step = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        dword = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	633b      	str	r3, [r7, #48]	; 0x30
 800b80e:	e0de      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)(dest->aux >> 24);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	0e1b      	lsrs	r3, r3, #24
 800b816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        dword = dest->aux & 0xFFFFFFU;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b822:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /* repeat until destination space available and no error and not finished and source characters available */
    while ((destSpace >= 3U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b824:	e0d3      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800b826:	f107 031f 	add.w	r3, r7, #31
 800b82a:	4619      	mov	r1, r3
 800b82c:	68b8      	ldr	r0, [r7, #8]
 800b82e:	f7fe f889 	bl	8009944 <CO_fifo_getc>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 80d8 	beq.w	800b9ea <CO_fifo_cpyTok2B64+0x24e>
            break;
        }

        if (step >= 5U) {
 800b83a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d93e      	bls.n	800b8c0 <CO_fifo_cpyTok2B64+0x124>
            /* String token is finished, waiting for command delimiter */
            bool_t insideComment = step > 5U;
 800b842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b846:	2b05      	cmp	r3, #5
 800b848:	bf8c      	ite	hi
 800b84a:	2301      	movhi	r3, #1
 800b84c:	2300      	movls	r3, #0
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	61bb      	str	r3, [r7, #24]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b852:	f107 0318 	add.w	r3, r7, #24
 800b856:	4619      	mov	r1, r3
 800b858:	68b8      	ldr	r0, [r7, #8]
 800b85a:	f7fe fabd 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <CO_fifo_cpyTok2B64+0xce>
 800b864:	7ffb      	ldrb	r3, [r7, #31]
 800b866:	2b0a      	cmp	r3, #10
 800b868:	d108      	bne.n	800b87c <CO_fifo_cpyTok2B64+0xe0>
                st |= CO_fifo_st_closed;
 800b86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b86e:	f043 0301 	orr.w	r3, r3, #1
 800b872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                finished = true;
 800b876:	2301      	movs	r3, #1
 800b878:	63bb      	str	r3, [r7, #56]	; 0x38
                } else { /* syntax error */
                    st |= CO_fifo_st_errTok;
                }
            } else { /* MISRA C 2004 14.10 */
            }
            continue;
 800b87a:	e01f      	b.n	800b8bc <CO_fifo_cpyTok2B64+0x120>
            } else if (insideComment) {
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <CO_fifo_cpyTok2B64+0xee>
                step = 6;
 800b882:	2306      	movs	r3, #6
 800b884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            continue;
 800b888:	e018      	b.n	800b8bc <CO_fifo_cpyTok2B64+0x120>
            } else if ((isgraph((int)c) != 0) && (c != (uint8_t)'=')) {
 800b88a:	7ffb      	ldrb	r3, [r7, #31]
 800b88c:	3301      	adds	r3, #1
 800b88e:	4a67      	ldr	r2, [pc, #412]	; (800ba2c <CO_fifo_cpyTok2B64+0x290>)
 800b890:	4413      	add	r3, r2
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	f003 0317 	and.w	r3, r3, #23
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00f      	beq.n	800b8bc <CO_fifo_cpyTok2B64+0x120>
 800b89c:	7ffb      	ldrb	r3, [r7, #31]
 800b89e:	2b3d      	cmp	r3, #61	; 0x3d
 800b8a0:	d00c      	beq.n	800b8bc <CO_fifo_cpyTok2B64+0x120>
                if (c == DELIM_COMMENT) { /* comment start */
 800b8a2:	7ffb      	ldrb	r3, [r7, #31]
 800b8a4:	2b23      	cmp	r3, #35	; 0x23
 800b8a6:	d103      	bne.n	800b8b0 <CO_fifo_cpyTok2B64+0x114>
                    step = 6;
 800b8a8:	2306      	movs	r3, #6
 800b8aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            continue;
 800b8ae:	e005      	b.n	800b8bc <CO_fifo_cpyTok2B64+0x120>
                    st |= CO_fifo_st_errTok;
 800b8b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8b4:	f043 0310 	orr.w	r3, r3, #16
 800b8b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            continue;
 800b8bc:	bf00      	nop
 800b8be:	e086      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
        }

        uint8_t code = base64DecTable[c & 0x7FU];
 800b8c0:	7ffb      	ldrb	r3, [r7, #31]
 800b8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c6:	4a5a      	ldr	r2, [pc, #360]	; (800ba30 <CO_fifo_cpyTok2B64+0x294>)
 800b8c8:	5cd3      	ldrb	r3, [r2, r3]
 800b8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (((c & 0x80U) != 0U) || ((code & 0x80U) != 0U)) {
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
 800b8d0:	b25b      	sxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	db03      	blt.n	800b8de <CO_fifo_cpyTok2B64+0x142>
 800b8d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	da06      	bge.n	800b8ec <CO_fifo_cpyTok2B64+0x150>
            st |= CO_fifo_st_errTok;
 800b8de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8e2:	f043 0310 	orr.w	r3, r3, #16
 800b8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b8ea:	e070      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
        } else if (code >= 64U /* '=' (pad) or DELIM_COMMAND or space */) {
 800b8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f0:	2b3f      	cmp	r3, #63	; 0x3f
 800b8f2:	d943      	bls.n	800b97c <CO_fifo_cpyTok2B64+0x1e0>
            /* base64 string finished, write remaining bytes */
            switch (step) {
 800b8f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d002      	beq.n	800b902 <CO_fifo_cpyTok2B64+0x166>
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d00b      	beq.n	800b918 <CO_fifo_cpyTok2B64+0x17c>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 2));
                    destSpace -= 2U;
                    break;
                default:
                    /* MISRA C 2004 15.3 */
                    break;
 800b900:	e01c      	b.n	800b93c <CO_fifo_cpyTok2B64+0x1a0>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 4));
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	091b      	lsrs	r3, r3, #4
 800b906:	b2db      	uxtb	r3, r3
 800b908:	4619      	mov	r1, r3
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f7fd ffe1 	bl	80098d2 <CO_fifo_putc>
                    destSpace--;
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	3b01      	subs	r3, #1
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800b916:	e011      	b.n	800b93c <CO_fifo_cpyTok2B64+0x1a0>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 10));
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	0a9b      	lsrs	r3, r3, #10
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	4619      	mov	r1, r3
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7fd ffd6 	bl	80098d2 <CO_fifo_putc>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 2));
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	089b      	lsrs	r3, r3, #2
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4619      	mov	r1, r3
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f7fd ffcf 	bl	80098d2 <CO_fifo_putc>
                    destSpace -= 2U;
 800b934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b936:	3b02      	subs	r3, #2
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800b93a:	bf00      	nop
            }

            bool_t insideComment = false;
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b940:	f107 0314 	add.w	r3, r7, #20
 800b944:	4619      	mov	r1, r3
 800b946:	68b8      	ldr	r0, [r7, #8]
 800b948:	f7fe fa46 	bl	8009dd8 <CO_fifo_trimSpaces>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <CO_fifo_cpyTok2B64+0x1bc>
 800b952:	7ffb      	ldrb	r3, [r7, #31]
 800b954:	2b0a      	cmp	r3, #10
 800b956:	d108      	bne.n	800b96a <CO_fifo_cpyTok2B64+0x1ce>
                st |= CO_fifo_st_closed;
 800b958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b95c:	f043 0301 	orr.w	r3, r3, #1
 800b960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                finished = true;
 800b964:	2301      	movs	r3, #1
 800b966:	63bb      	str	r3, [r7, #56]	; 0x38
 800b968:	e031      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
            } else {
                step = insideComment ? 6U : 5U;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <CO_fifo_cpyTok2B64+0x1d8>
 800b970:	2306      	movs	r3, #6
 800b972:	e000      	b.n	800b976 <CO_fifo_cpyTok2B64+0x1da>
 800b974:	2305      	movs	r3, #5
 800b976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b97a:	e028      	b.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
            }
        } else {
            dword = (dword << 6) | code;
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	019a      	lsls	r2, r3, #6
 800b980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b984:	4313      	orrs	r3, r2
 800b986:	633b      	str	r3, [r7, #48]	; 0x30
            if (step++ == 3U) {
 800b988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800b992:	2b03      	cmp	r3, #3
 800b994:	d11b      	bne.n	800b9ce <CO_fifo_cpyTok2B64+0x232>
                (void)CO_fifo_putc(dest, (uint8_t)((dword >> 16) & 0xFFU));
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	0c1b      	lsrs	r3, r3, #16
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	4619      	mov	r1, r3
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fd ff97 	bl	80098d2 <CO_fifo_putc>
                (void)CO_fifo_putc(dest, (uint8_t)((dword >> 8) & 0xFFU));
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	0a1b      	lsrs	r3, r3, #8
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7fd ff90 	bl	80098d2 <CO_fifo_putc>
                (void)CO_fifo_putc(dest, (uint8_t)(dword & 0xFFU));
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7fd ff8a 	bl	80098d2 <CO_fifo_putc>
                destSpace -= 3U;
 800b9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c0:	3b03      	subs	r3, #3
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                dword = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	633b      	str	r3, [r7, #48]	; 0x30
                step = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while ((destSpace >= 3U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d90b      	bls.n	800b9ec <CO_fifo_cpyTok2B64+0x250>
 800b9d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d105      	bne.n	800b9ec <CO_fifo_cpyTok2B64+0x250>
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f43f af1f 	beq.w	800b826 <CO_fifo_cpyTok2B64+0x8a>
 800b9e8:	e000      	b.n	800b9ec <CO_fifo_cpyTok2B64+0x250>
            break;
 800b9ea:	bf00      	nop
            }
        }
    } /* while ... */

    if (!finished) {
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10e      	bne.n	800ba10 <CO_fifo_cpyTok2B64+0x274>
        st |= CO_fifo_st_partial;
 800b9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9f6:	f043 0302 	orr.w	r3, r3, #2
 800b9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* memorize variables for next iteration */
        dest->aux = ((uint32_t)step << 24) | (dword & 0xFFFFFFU);
 800b9fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba02:	061a      	lsls	r2, r3, #24
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <CO_fifo_cpyTok2B64+0x282>
        *status = st;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ba1c:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800ba1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	1ad3      	subs	r3, r2, r3
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3740      	adds	r7, #64	; 0x40
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	08023c90 	.word	0x08023c90
 800ba30:	08021e50 	.word	0x08021e50

0800ba34 <crc16_ccitt_single>:
    0x1AD0U, 0x2AB3U, 0x3A92U, 0xFD2EU, 0xED0FU, 0xDD6CU, 0xCD4DU, 0xBDAAU, 0xAD8BU, 0x9DE8U, 0x8DC9U, 0x7C26U, 0x6C07U,
    0x5C64U, 0x4C45U, 0x3CA2U, 0x2C83U, 0x1CE0U, 0x0CC1U, 0xEF1FU, 0xFF3EU, 0xCF5DU, 0xDF7CU, 0xAF9BU, 0xBFBAU, 0x8FD9U,
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U};

void
crc16_ccitt_single(uint16_t* crc, const uint8_t chr) {
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp = (uint8_t)(*crc >> 8U) ^ chr;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	0a1b      	lsrs	r3, r3, #8
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	4053      	eors	r3, r2
 800ba4e:	73fb      	strb	r3, [r7, #15]
    *crc = (uint16_t)((*crc << 8U) ^ crc16_ccitt_table[tmp]);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	b21a      	sxth	r2, r3
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
 800ba5a:	4907      	ldr	r1, [pc, #28]	; (800ba78 <crc16_ccitt_single+0x44>)
 800ba5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ba60:	b21b      	sxth	r3, r3
 800ba62:	4053      	eors	r3, r2
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	801a      	strh	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	08021ed0 	.word	0x08021ed0

0800ba7c <CO_LEDs_init>:

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {return CO_ERROR_ILLEGAL_ARGUMENT;}
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <CO_LEDs_init+0x18>
 800ba8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba92:	e006      	b.n	800baa2 <CO_LEDs_init+0x26>

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 800ba94:	220c      	movs	r2, #12
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f013 fbe3 	bl	801f264 <memset>
    return ret;
 800ba9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <CO_LEDs_process>:
				bool_t ErrHbCons,
                bool_t ErrOther,
				bool_t firmwareDownload,
				uint32_t* timerNext_us
			   )
{
 800baac:	b480      	push	{r7}
 800baae:	b089      	sub	sp, #36	; 0x24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 800bac4:	2300      	movs	r3, #0
 800bac6:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	441a      	add	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U)
 800bad4:	e112      	b.n	800bcfc <CO_LEDs_process+0x250>
    {
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7a5b      	ldrb	r3, [r3, #9]
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bf0c      	ite	eq
 800bae2:	2301      	moveq	r3, #1
 800bae4:	2300      	movne	r3, #0
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	613b      	str	r3, [r7, #16]

        tick = true;
 800baea:	2301      	movs	r3, #1
 800baec:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800baf6:	3b50      	subs	r3, #80	; 0x50
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	791b      	ldrb	r3, [r3, #4]
 800bb00:	3301      	adds	r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	711a      	strb	r2, [r3, #4]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	791b      	ldrb	r3, [r3, #4]
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	f240 80dd 	bls.w	800bccc <CO_LEDs_process+0x220>
        {
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	711a      	strb	r2, [r3, #4]
            rd = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	7a5b      	ldrb	r3, [r3, #9]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d104      	bne.n	800bb36 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 800bb2c:	7ffb      	ldrb	r3, [r7, #31]
 800bb2e:	f043 0302 	orr.w	r3, r3, #2
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e003      	b.n	800bb3e <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 800bb36:	7fbb      	ldrb	r3, [r7, #30]
 800bb38:	f043 0302 	orr.w	r3, r3, #2
 800bb3c:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	795b      	ldrb	r3, [r3, #5]
 800bb42:	3301      	adds	r3, #1
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	715a      	strb	r2, [r3, #5]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	795b      	ldrb	r3, [r3, #5]
 800bb4e:	2b06      	cmp	r3, #6
 800bb50:	d010      	beq.n	800bb74 <CO_LEDs_process+0xc8>
 800bb52:	2b06      	cmp	r3, #6
 800bb54:	dc12      	bgt.n	800bb7c <CO_LEDs_process+0xd0>
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d002      	beq.n	800bb60 <CO_LEDs_process+0xb4>
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d005      	beq.n	800bb6a <CO_LEDs_process+0xbe>
            {
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 800bb5e:	e00d      	b.n	800bb7c <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 800bb60:	7ffb      	ldrb	r3, [r7, #31]
 800bb62:	f043 0304 	orr.w	r3, r3, #4
 800bb66:	77fb      	strb	r3, [r7, #31]
 800bb68:	e009      	b.n	800bb7e <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 800bb6a:	7fbb      	ldrb	r3, [r7, #30]
 800bb6c:	f043 0304 	orr.w	r3, r3, #4
 800bb70:	77bb      	strb	r3, [r7, #30]
 800bb72:	e004      	b.n	800bb7e <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	715a      	strb	r2, [r3, #5]
 800bb7a:	e000      	b.n	800bb7e <CO_LEDs_process+0xd2>
                default: /* none */ break;
 800bb7c:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_2)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	799b      	ldrb	r3, [r3, #6]
 800bb82:	3301      	adds	r3, #1
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	719a      	strb	r2, [r3, #6]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	799b      	ldrb	r3, [r3, #6]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	2b07      	cmp	r3, #7
 800bb92:	d821      	bhi.n	800bbd8 <CO_LEDs_process+0x12c>
 800bb94:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <CO_LEDs_process+0xf0>)
 800bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9a:	bf00      	nop
 800bb9c:	0800bbbd 	.word	0x0800bbbd
 800bba0:	0800bbc7 	.word	0x0800bbc7
 800bba4:	0800bbbd 	.word	0x0800bbbd
 800bba8:	0800bbc7 	.word	0x0800bbc7
 800bbac:	0800bbd9 	.word	0x0800bbd9
 800bbb0:	0800bbd9 	.word	0x0800bbd9
 800bbb4:	0800bbd9 	.word	0x0800bbd9
 800bbb8:	0800bbd1 	.word	0x0800bbd1
            {
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 800bbbc:	7ffb      	ldrb	r3, [r7, #31]
 800bbbe:	f043 0308 	orr.w	r3, r3, #8
 800bbc2:	77fb      	strb	r3, [r7, #31]
 800bbc4:	e009      	b.n	800bbda <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 800bbc6:	7fbb      	ldrb	r3, [r7, #30]
 800bbc8:	f043 0308 	orr.w	r3, r3, #8
 800bbcc:	77bb      	strb	r3, [r7, #30]
 800bbce:	e004      	b.n	800bbda <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	719a      	strb	r2, [r3, #6]
 800bbd6:	e000      	b.n	800bbda <CO_LEDs_process+0x12e>
                default: /* none */ break;
 800bbd8:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_3)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	79db      	ldrb	r3, [r3, #7]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	71da      	strb	r2, [r3, #7]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	79db      	ldrb	r3, [r3, #7]
 800bbea:	2b0a      	cmp	r3, #10
 800bbec:	bf8c      	ite	hi
 800bbee:	2201      	movhi	r2, #1
 800bbf0:	2200      	movls	r2, #0
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	d12c      	bne.n	800bc52 <CO_LEDs_process+0x1a6>
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800bc02:	2a00      	cmp	r2, #0
 800bc04:	bf14      	ite	ne
 800bc06:	2201      	movne	r2, #1
 800bc08:	2200      	moveq	r2, #0
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	2a00      	cmp	r2, #0
 800bc0e:	d117      	bne.n	800bc40 <CO_LEDs_process+0x194>
 800bc10:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	bf14      	ite	ne
 800bc18:	2201      	movne	r2, #1
 800bc1a:	2200      	moveq	r2, #0
 800bc1c:	b2d2      	uxtb	r2, r2
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	d109      	bne.n	800bc36 <CO_LEDs_process+0x18a>
 800bc22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bf14      	ite	ne
 800bc2a:	2301      	movne	r3, #1
 800bc2c:	2300      	moveq	r3, #0
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 800bc34:	e00d      	b.n	800bc52 <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 800bc36:	7ffb      	ldrb	r3, [r7, #31]
 800bc38:	f043 0310 	orr.w	r3, r3, #16
 800bc3c:	77fb      	strb	r3, [r7, #31]
 800bc3e:	e009      	b.n	800bc54 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 800bc40:	7fbb      	ldrb	r3, [r7, #30]
 800bc42:	f043 0310 	orr.w	r3, r3, #16
 800bc46:	77bb      	strb	r3, [r7, #30]
 800bc48:	e004      	b.n	800bc54 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	71da      	strb	r2, [r3, #7]
 800bc50:	e000      	b.n	800bc54 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 800bc52:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_4)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	7a1b      	ldrb	r3, [r3, #8]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	721a      	strb	r2, [r3, #8]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	7a1b      	ldrb	r3, [r3, #8]
 800bc64:	2b0c      	cmp	r3, #12
 800bc66:	bf8c      	ite	hi
 800bc68:	2201      	movhi	r2, #1
 800bc6a:	2200      	movls	r2, #0
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	2a00      	cmp	r2, #0
 800bc70:	d137      	bne.n	800bce2 <CO_LEDs_process+0x236>
 800bc72:	2201      	movs	r2, #1
 800bc74:	fa02 f303 	lsl.w	r3, r2, r3
 800bc78:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 800bc7c:	2a00      	cmp	r2, #0
 800bc7e:	bf14      	ite	ne
 800bc80:	2201      	movne	r2, #1
 800bc82:	2200      	moveq	r2, #0
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d117      	bne.n	800bcba <CO_LEDs_process+0x20e>
 800bc8a:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	bf14      	ite	ne
 800bc92:	2201      	movne	r2, #1
 800bc94:	2200      	moveq	r2, #0
 800bc96:	b2d2      	uxtb	r2, r2
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	d109      	bne.n	800bcb0 <CO_LEDs_process+0x204>
 800bc9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf14      	ite	ne
 800bca4:	2301      	movne	r3, #1
 800bca6:	2300      	moveq	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 800bcae:	e018      	b.n	800bce2 <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 800bcb0:	7ffb      	ldrb	r3, [r7, #31]
 800bcb2:	f043 0320 	orr.w	r3, r3, #32
 800bcb6:	77fb      	strb	r3, [r7, #31]
 800bcb8:	e014      	b.n	800bce4 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 800bcba:	7fbb      	ldrb	r3, [r7, #30]
 800bcbc:	f043 0320 	orr.w	r3, r3, #32
 800bcc0:	77bb      	strb	r3, [r7, #30]
 800bcc2:	e00f      	b.n	800bce4 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	721a      	strb	r2, [r3, #8]
 800bcca:	e00b      	b.n	800bce4 <CO_LEDs_process+0x238>
            }


        } else 	{
					/* clear flicker and CANopen bits, keep others */
					rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	7a5b      	ldrb	r3, [r3, #9]
 800bcd0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800bcd4:	77fb      	strb	r3, [r7, #31]
					gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	7a9b      	ldrb	r3, [r3, #10]
 800bcda:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800bcde:	77bb      	strb	r3, [r7, #30]
 800bce0:	e000      	b.n	800bce4 <CO_LEDs_process+0x238>
                default: /* none */ break;
 800bce2:	bf00      	nop
				}


        /* calculate 10Hz flickering */
        if (rdFlickerNext)
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <CO_LEDs_process+0x248>
        {
            rd |= CO_LED_flicker;
 800bcea:	7ffb      	ldrb	r3, [r7, #31]
 800bcec:	f043 0301 	orr.w	r3, r3, #1
 800bcf0:	77fb      	strb	r3, [r7, #31]
 800bcf2:	e003      	b.n	800bcfc <CO_LEDs_process+0x250>
        } else 	{
            	gr |= CO_LED_flicker;
 800bcf4:	7fbb      	ldrb	r3, [r7, #30]
 800bcf6:	f043 0301 	orr.w	r3, r3, #1
 800bcfa:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800bd04:	4293      	cmp	r3, r2
 800bd06:	f63f aee6 	bhi.w	800bad6 <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */



    if (tick) {
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d077      	beq.n	800be00 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <CO_LEDs_process+0x270>
            rd_co = 1;
 800bd16:	2301      	movs	r3, #1
 800bd18:	75fb      	strb	r3, [r7, #23]
 800bd1a:	e032      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 800bd1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d104      	bne.n	800bd2e <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 800bd24:	7ffb      	ldrb	r3, [r7, #31]
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	75fb      	strb	r3, [r7, #23]
 800bd2c:	e029      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 800bd34:	7ffb      	ldrb	r3, [r7, #31]
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e021      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 800bd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 800bd44:	7ffb      	ldrb	r3, [r7, #31]
 800bd46:	f003 0310 	and.w	r3, r3, #16
 800bd4a:	75fb      	strb	r3, [r7, #23]
 800bd4c:	e019      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d004      	beq.n	800bd5e <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 800bd54:	7ffb      	ldrb	r3, [r7, #31]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	75fb      	strb	r3, [r7, #23]
 800bd5c:	e011      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 800bd64:	7ffb      	ldrb	r3, [r7, #31]
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	75fb      	strb	r3, [r7, #23]
 800bd6c:	e009      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 800bd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 800bd74:	7ffb      	ldrb	r3, [r7, #31]
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	75fb      	strb	r3, [r7, #23]
 800bd7c:	e001      	b.n	800bd82 <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d004      	beq.n	800bd92 <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 800bd88:	7fbb      	ldrb	r3, [r7, #30]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	75bb      	strb	r3, [r7, #22]
 800bd90:	e022      	b.n	800bdd8 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 800bd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d004      	beq.n	800bda2 <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 800bd98:	7fbb      	ldrb	r3, [r7, #30]
 800bd9a:	f003 0310 	and.w	r3, r3, #16
 800bd9e:	75bb      	strb	r3, [r7, #22]
 800bda0:	e01a      	b.n	800bdd8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 800bda2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d104      	bne.n	800bdb4 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 800bdaa:	7fbb      	ldrb	r3, [r7, #30]
 800bdac:	f003 0304 	and.w	r3, r3, #4
 800bdb0:	75bb      	strb	r3, [r7, #22]
 800bdb2:	e011      	b.n	800bdd8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 800bdb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdb8:	2b7f      	cmp	r3, #127	; 0x7f
 800bdba:	d104      	bne.n	800bdc6 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 800bdbc:	7fbb      	ldrb	r3, [r7, #30]
 800bdbe:	f003 0302 	and.w	r3, r3, #2
 800bdc2:	75bb      	strb	r3, [r7, #22]
 800bdc4:	e008      	b.n	800bdd8 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 800bdc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdca:	2b05      	cmp	r3, #5
 800bdcc:	d102      	bne.n	800bdd4 <CO_LEDs_process+0x328>
            gr_co = 1;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	75bb      	strb	r3, [r7, #22]
 800bdd2:	e001      	b.n	800bdd8 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bde4:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 800bde6:	7dbb      	ldrb	r3, [r7, #22]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 800bdec:	7fbb      	ldrb	r3, [r7, #30]
 800bdee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdf2:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	7ffa      	ldrb	r2, [r7, #31]
 800bdf8:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	7fba      	ldrb	r2, [r7, #30]
 800bdfe:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 800be00:	bf00      	nop
 800be02:	3724      	adds	r7, #36	; 0x24
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800be18:	60fb      	str	r3, [r7, #12]
    return value;
 800be1a:	68fb      	ldr	r3, [r7, #12]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <CO_setUint16>:
CO_setUint16(void* buf, uint16_t value) {
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	807b      	strh	r3, [r7, #2]
 800be34:	887a      	ldrh	r2, [r7, #2]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	801a      	strh	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800be3a:	2302      	movs	r3, #2
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800be58:	2304      	movs	r3, #4
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <CO_LSSmaster_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSmaster_receive(void* object, void* msg) {
 800be66:	b580      	push	{r7, lr}
 800be68:	b086      	sub	sp, #24
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_t* LSSmaster;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	3305      	adds	r3, #5
 800be7a:	613b      	str	r3, [r7, #16]

    LSSmaster = (CO_LSSmaster_t*)object; /* this is the correct pointer type of the first argument */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	60fb      	str	r3, [r7, #12]

    /* verify message length and message overflow (previous message was not processed yet). */
    if ((DLC == 8U) && !CO_FLAG_READ(LSSmaster->CANrxNew) && (LSSmaster->command != CO_LSSmaster_COMMAND_WAITING)) {
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	2b08      	cmp	r3, #8
 800be84:	d111      	bne.n	800beaa <CO_LSSmaster_receive+0x44>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10d      	bne.n	800beaa <CO_LSSmaster_receive+0x44>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	795b      	ldrb	r3, [r3, #5]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <CO_LSSmaster_receive+0x44>

        /* copy data and set 'new message' flag */
        (void)memcpy(LSSmaster->CANrxData, data, sizeof(LSSmaster->CANrxData));
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3318      	adds	r3, #24
 800be9a:	2208      	movs	r2, #8
 800be9c:	6939      	ldr	r1, [r7, #16]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f013 fa7c 	bl	801f39c <memcpy>

        CO_FLAG_SET(LSSmaster->CANrxNew);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	615a      	str	r2, [r3, #20]
        if (LSSmaster->pFunctSignal != NULL) {
            LSSmaster->pFunctSignal(LSSmaster->functSignalObject);
        }
#endif
    }
}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <CO_LSSmaster_check_timeout>:
 *
 * Generally, we do not really care if the message has been received before or after the timeout
 * expired. Only if no message has been received we have to check for timeouts.
 */
static inline CO_LSSmaster_return_t
CO_LSSmaster_check_timeout(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret = CO_LSSmaster_WAIT_SLAVE;
 800bebc:	2301      	movs	r3, #1
 800bebe:	73fb      	strb	r3, [r7, #15]

    LSSmaster->timeoutTimer += timeDifference_us;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	689a      	ldr	r2, [r3, #8]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	441a      	add	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	609a      	str	r2, [r3, #8]
    if (LSSmaster->timeoutTimer >= LSSmaster->timeout_us) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d304      	bcc.n	800bee2 <CO_LSSmaster_check_timeout+0x30>
        LSSmaster->timeoutTimer = 0;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	609a      	str	r2, [r3, #8]
        ret = CO_LSSmaster_TIMEOUT;
 800bede:	23ff      	movs	r3, #255	; 0xff
 800bee0:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800bee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
	...

0800bef4 <CO_LSSmaster_init>:

CO_ReturnError_t
CO_LSSmaster_init(CO_LSSmaster_t* LSSmaster, uint16_t timeout_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
                  uint16_t CANidLssSlave, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssMaster) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af04      	add	r7, sp, #16
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	461a      	mov	r2, r3
 800bf00:	460b      	mov	r3, r1
 800bf02:	817b      	strh	r3, [r7, #10]
 800bf04:	4613      	mov	r3, r2
 800bf06:	813b      	strh	r3, [r7, #8]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSmaster == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <CO_LSSmaster_init+0x2a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <CO_LSSmaster_init+0x2a>
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <CO_LSSmaster_init+0x30>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	e040      	b.n	800bfa6 <CO_LSSmaster_init+0xb2>
    }

    LSSmaster->timeout_us = (uint32_t)timeout_ms * 1000U;
 800bf24:	897b      	ldrh	r3, [r7, #10]
 800bf26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf2a:	fb03 f202 	mul.w	r2, r3, r2
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]
    LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	711a      	strb	r2, [r3, #4]
    LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	715a      	strb	r2, [r3, #5]
    LSSmaster->timeoutTimer = 0;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	609a      	str	r2, [r3, #8]
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	615a      	str	r2, [r3, #20]
    (void)memset(LSSmaster->CANrxData, 0, sizeof(LSSmaster->CANrxData));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3318      	adds	r3, #24
 800bf4e:	2208      	movs	r2, #8
 800bf50:	2100      	movs	r1, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f013 f986 	bl	801f264 <memset>
    LSSmaster->pFunctSignal = NULL;
    LSSmaster->functSignalObject = NULL;
#endif

    /* configure LSS CAN Slave response message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssSlave, 0x7FF, false, (void*)LSSmaster,
 800bf58:	8c3a      	ldrh	r2, [r7, #32]
 800bf5a:	8939      	ldrh	r1, [r7, #8]
 800bf5c:	4b14      	ldr	r3, [pc, #80]	; (800bfb0 <CO_LSSmaster_init+0xbc>)
 800bf5e:	9302      	str	r3, [sp, #8]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	2300      	movs	r3, #0
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f006 fccb 	bl	8012908 <CO_CANrxBufferInit>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
                             CO_LSSmaster_receive);

    /* configure LSS CAN Master message transmission */
    LSSmaster->CANdevTx = CANdevTx;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7a:	621a      	str	r2, [r3, #32]
    LSSmaster->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssMaster, false, 8, false);
 800bf7c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bf7e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800bf80:	2300      	movs	r3, #0
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	2308      	movs	r3, #8
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf8c:	f006 fd1a 	bl	80129c4 <CO_CANtxBufferInit>
 800bf90:	4602      	mov	r2, r0
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	625a      	str	r2, [r3, #36]	; 0x24

    if (LSSmaster->TXbuff == NULL) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <CO_LSSmaster_init+0xae>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800bf9e:	23ff      	movs	r3, #255	; 0xff
 800bfa0:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800bfa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800be67 	.word	0x0800be67

0800bfb4 <CO_LSSmaster_changeTimeout>:

void
CO_LSSmaster_changeTimeout(CO_LSSmaster_t* LSSmaster, uint16_t timeout_ms) {
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	807b      	strh	r3, [r7, #2]
    if (LSSmaster != NULL) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d006      	beq.n	800bfd4 <CO_LSSmaster_changeTimeout+0x20>
        LSSmaster->timeout_us = (uint32_t)timeout_ms * 1000U;
 800bfc6:	887b      	ldrh	r3, [r7, #2]
 800bfc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfcc:	fb03 f202 	mul.w	r2, r3, r2
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	601a      	str	r2, [r3, #0]
    }
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <CO_LSSmaster_switchStateSelectInitiate>:

/*
 * Helper function - initiate switch state
 */
static CO_LSSmaster_return_t
CO_LSSmaster_switchStateSelectInitiate(CO_LSSmaster_t* LSSmaster, CO_LSS_address_t* lssAddress) {
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    if (lssAddress != NULL) {
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d06a      	beq.n	800c0c6 <CO_LSSmaster_switchStateSelectInitiate+0xe6>
        /* switch state select specific using LSS address */
        LSSmaster->state = CO_LSSmaster_STATE_CFG_SLECTIVE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	711a      	strb	r2, [r3, #4]
        LSSmaster->command = CO_LSSmaster_COMMAND_SWITCH_STATE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	615a      	str	r2, [r3, #20]
        (void)memset(&LSSmaster->TXbuff->data[6], 0, sizeof(LSSmaster->TXbuff->data) - 6U);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	330b      	adds	r3, #11
 800c00e:	2202      	movs	r2, #2
 800c010:	2100      	movs	r1, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f013 f926 	bl	801f264 <memset>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_VENDOR;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2240      	movs	r2, #64	; 0x40
 800c01e:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.vendorID);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	1d9a      	adds	r2, r3, #6
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7ff ff0b 	bl	800be48 <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1a      	ldr	r2, [r3, #32]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	4619      	mov	r1, r3
 800c03c:	4610      	mov	r0, r2
 800c03e:	f006 fd3b 	bl	8012ab8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_PRODUCT;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2241      	movs	r2, #65	; 0x41
 800c048:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.productCode);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	1d9a      	adds	r2, r3, #6
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7ff fef6 	bl	800be48 <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1a      	ldr	r2, [r3, #32]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f006 fd26 	bl	8012ab8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_REV;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	2242      	movs	r2, #66	; 0x42
 800c072:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.revisionNumber);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	1d9a      	adds	r2, r3, #6
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7ff fee1 	bl	800be48 <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1a      	ldr	r2, [r3, #32]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08e:	4619      	mov	r1, r3
 800c090:	4610      	mov	r0, r2
 800c092:	f006 fd11 	bl	8012ab8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_SERIAL;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09a:	2243      	movs	r2, #67	; 0x43
 800c09c:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.serialNumber);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a2:	1d9a      	adds	r2, r3, #6
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7ff fecc 	bl	800be48 <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1a      	ldr	r2, [r3, #32]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f006 fcfc 	bl	8012ab8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
 800c0c4:	e01f      	b.n	800c106 <CO_LSSmaster_switchStateSelectInitiate+0x126>
    } else {
        /* switch state global */
        LSSmaster->state = CO_LSSmaster_STATE_CFG_GLOBAL;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	711a      	strb	r2, [r3, #4]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_GLOBAL;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d6:	2204      	movs	r2, #4
 800c0d8:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = CO_LSS_STATE_CONFIGURATION;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0de:	2201      	movs	r2, #1
 800c0e0:	719a      	strb	r2, [r3, #6]
        (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	2206      	movs	r2, #6
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f013 f8b9 	bl	801f264 <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1a      	ldr	r2, [r3, #32]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	f006 fcdb 	bl	8012ab8 <CO_CANsend>

        /* This is non-confirmed service! */
        ret = CO_LSSmaster_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800c106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <CO_LSSmaster_switchStateSelectWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_switchStateSelectWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <CO_LSSmaster_switchStateSelectWait+0x38>
        uint8_t cs = LSSmaster->CANrxData[0];
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7e1b      	ldrb	r3, [r3, #24]
 800c128:	73bb      	strb	r3, [r7, #14]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	615a      	str	r2, [r3, #20]

        if (cs == CO_LSS_SWITCH_STATE_SEL) {
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	2b44      	cmp	r3, #68	; 0x44
 800c134:	d102      	bne.n	800c13c <CO_LSSmaster_switchStateSelectWait+0x2a>
            /* confirmation received */
            ret = CO_LSSmaster_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
 800c13a:	e00c      	b.n	800c156 <CO_LSSmaster_switchStateSelectWait+0x44>
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff feb7 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
 800c148:	e005      	b.n	800c156 <CO_LSSmaster_switchStateSelectWait+0x44>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff feb0 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800c156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <CO_LSSmaster_swStateSelect>:

CO_LSSmaster_return_t
CO_LSSmaster_swStateSelect(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSS_address_t* lssAddress) {
 800c162:	b580      	push	{r7, lr}
 800c164:	b086      	sub	sp, #24
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c16e:	23fd      	movs	r3, #253	; 0xfd
 800c170:	75fb      	strb	r3, [r7, #23]

    if (LSSmaster == NULL) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <CO_LSSmaster_swStateSelect+0x1c>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c178:	f06f 0301 	mvn.w	r3, #1
 800c17c:	e030      	b.n	800c1e0 <CO_LSSmaster_swStateSelect+0x7e>
    }

    /* Initiate select */
    if ((LSSmaster->state == CO_LSSmaster_STATE_WAITING) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	791b      	ldrb	r3, [r3, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <CO_LSSmaster_swStateSelect+0x3a>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	795b      	ldrb	r3, [r3, #5]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <CO_LSSmaster_swStateSelect+0x3a>

        ret = CO_LSSmaster_switchStateSelectInitiate(LSSmaster, lssAddress);
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f7ff ff25 	bl	800bfe0 <CO_LSSmaster_switchStateSelectInitiate>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
 800c19a:	e009      	b.n	800c1b0 <CO_LSSmaster_swStateSelect+0x4e>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_SWITCH_STATE) {
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	795b      	ldrb	r3, [r3, #5]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d105      	bne.n	800c1b0 <CO_LSSmaster_swStateSelect+0x4e>
        ret = CO_LSSmaster_switchStateSelectWait(LSSmaster, timeDifference_us);
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff ffb3 	bl	800c112 <CO_LSSmaster_switchStateSelectWait>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1b4:	f113 0f03 	cmn.w	r3, #3
 800c1b8:	d006      	beq.n	800c1c8 <CO_LSSmaster_swStateSelect+0x66>
 800c1ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d002      	beq.n	800c1c8 <CO_LSSmaster_swStateSelect+0x66>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	715a      	strb	r2, [r3, #5]
    }
    if (ret < CO_LSSmaster_OK) {
 800c1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da05      	bge.n	800c1dc <CO_LSSmaster_swStateSelect+0x7a>
        /* switching failed, go back to waiting */
        LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	711a      	strb	r2, [r3, #4]
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c1dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <CO_LSSmaster_swStateDeselect>:

CO_LSSmaster_return_t
CO_LSSmaster_swStateDeselect(CO_LSSmaster_t* LSSmaster) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c1f0:	23fd      	movs	r3, #253	; 0xfd
 800c1f2:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <CO_LSSmaster_swStateDeselect+0x18>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c1fa:	f06f 0301 	mvn.w	r3, #1
 800c1fe:	e027      	b.n	800c250 <CO_LSSmaster_swStateDeselect+0x68>
    }

    /* We can always send this command to get into a clean state on the network.
     * If no slave is selected, this command is ignored. */
    LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	711a      	strb	r2, [r3, #4]
    LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	715a      	strb	r2, [r3, #5]
    LSSmaster->timeoutTimer = 0;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	609a      	str	r2, [r3, #8]

    /* switch state global */
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_GLOBAL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	2204      	movs	r2, #4
 800c21e:	715a      	strb	r2, [r3, #5]
    LSSmaster->TXbuff->data[1] = CO_LSS_STATE_WAITING;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	2200      	movs	r2, #0
 800c226:	719a      	strb	r2, [r3, #6]
    (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22c:	3307      	adds	r3, #7
 800c22e:	2206      	movs	r2, #6
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f013 f816 	bl	801f264 <memset>
    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a1a      	ldr	r2, [r3, #32]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	4619      	mov	r1, r3
 800c242:	4610      	mov	r0, r2
 800c244:	f006 fc38 	bl	8012ab8 <CO_CANsend>

    /* This is non-confirmed service! */
    ret = CO_LSSmaster_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73fb      	strb	r3, [r7, #15]

    return ret;
 800c24c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <CO_LSSmaster_configureCheckWait>:
 * - CO_LSS_CFG_NODE_ID_status
 * - CO_LSS_CFG_BIT_TIMING
 * - CO_LSS_CFG_STORE_status
 */
static CO_LSSmaster_return_t
CO_LSSmaster_configureCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t csWait) {
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d022      	beq.n	800c2b4 <CO_LSSmaster_configureCheckWait+0x5c>
        uint8_t cs = LSSmaster->CANrxData[0];
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	7e1b      	ldrb	r3, [r3, #24]
 800c272:	75bb      	strb	r3, [r7, #22]
        uint8_t errorCode = LSSmaster->CANrxData[1];
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	7e5b      	ldrb	r3, [r3, #25]
 800c278:	757b      	strb	r3, [r7, #21]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	615a      	str	r2, [r3, #20]

        if (cs == csWait) {
 800c280:	7dba      	ldrb	r2, [r7, #22]
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	429a      	cmp	r2, r3
 800c286:	d10e      	bne.n	800c2a6 <CO_LSSmaster_configureCheckWait+0x4e>
            if (errorCode == 0U) {
 800c288:	7d7b      	ldrb	r3, [r7, #21]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d102      	bne.n	800c294 <CO_LSSmaster_configureCheckWait+0x3c>
                ret = CO_LSSmaster_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75fb      	strb	r3, [r7, #23]
 800c292:	e015      	b.n	800c2c0 <CO_LSSmaster_configureCheckWait+0x68>
            } else if (errorCode == 0xFFU) {
 800c294:	7d7b      	ldrb	r3, [r7, #21]
 800c296:	2bff      	cmp	r3, #255	; 0xff
 800c298:	d102      	bne.n	800c2a0 <CO_LSSmaster_configureCheckWait+0x48>
                ret = CO_LSSmaster_OK_MANUFACTURER;
 800c29a:	239a      	movs	r3, #154	; 0x9a
 800c29c:	75fb      	strb	r3, [r7, #23]
 800c29e:	e00f      	b.n	800c2c0 <CO_LSSmaster_configureCheckWait+0x68>
            } else {
                ret = CO_LSSmaster_OK_ILLEGAL_ARGUMENT;
 800c2a0:	239b      	movs	r3, #155	; 0x9b
 800c2a2:	75fb      	strb	r3, [r7, #23]
 800c2a4:	e00c      	b.n	800c2c0 <CO_LSSmaster_configureCheckWait+0x68>
            }
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7ff fe02 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75fb      	strb	r3, [r7, #23]
 800c2b2:	e005      	b.n	800c2c0 <CO_LSSmaster_configureCheckWait+0x68>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff fdfb 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	75fb      	strb	r3, [r7, #23]
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c4:	f113 0f03 	cmn.w	r3, #3
 800c2c8:	d006      	beq.n	800c2d8 <CO_LSSmaster_configureCheckWait+0x80>
 800c2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d002      	beq.n	800c2d8 <CO_LSSmaster_configureCheckWait+0x80>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <CO_LSSmaster_configureBitTiming>:

CO_LSSmaster_return_t
CO_LSSmaster_configureBitTiming(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint16_t bit) {
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80fb      	strh	r3, [r7, #6]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c2f2:	23fd      	movs	r3, #253	; 0xfd
 800c2f4:	75fb      	strb	r3, [r7, #23]
    uint8_t bitTiming;

    if (LSSmaster == NULL) {
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <CO_LSSmaster_configureBitTiming+0x1e>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c2fc:	f06f 0301 	mvn.w	r3, #1
 800c300:	e08e      	b.n	800c420 <CO_LSSmaster_configureBitTiming+0x13c>
    }

    switch (bit) {
 800c302:	88fb      	ldrh	r3, [r7, #6]
 800c304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c308:	d023      	beq.n	800c352 <CO_LSSmaster_configureBitTiming+0x6e>
 800c30a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c30e:	dc3b      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c310:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c314:	d020      	beq.n	800c358 <CO_LSSmaster_configureBitTiming+0x74>
 800c316:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c31a:	dc35      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c31c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c320:	d01d      	beq.n	800c35e <CO_LSSmaster_configureBitTiming+0x7a>
 800c322:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c326:	dc2f      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c328:	2bfa      	cmp	r3, #250	; 0xfa
 800c32a:	d01b      	beq.n	800c364 <CO_LSSmaster_configureBitTiming+0x80>
 800c32c:	2bfa      	cmp	r3, #250	; 0xfa
 800c32e:	dc2b      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c330:	2b7d      	cmp	r3, #125	; 0x7d
 800c332:	d01a      	beq.n	800c36a <CO_LSSmaster_configureBitTiming+0x86>
 800c334:	2b7d      	cmp	r3, #125	; 0x7d
 800c336:	dc27      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c338:	2b32      	cmp	r3, #50	; 0x32
 800c33a:	d019      	beq.n	800c370 <CO_LSSmaster_configureBitTiming+0x8c>
 800c33c:	2b32      	cmp	r3, #50	; 0x32
 800c33e:	dc23      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c340:	2b14      	cmp	r3, #20
 800c342:	d018      	beq.n	800c376 <CO_LSSmaster_configureBitTiming+0x92>
 800c344:	2b14      	cmp	r3, #20
 800c346:	dc1f      	bgt.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01a      	beq.n	800c382 <CO_LSSmaster_configureBitTiming+0x9e>
 800c34c:	2b0a      	cmp	r3, #10
 800c34e:	d015      	beq.n	800c37c <CO_LSSmaster_configureBitTiming+0x98>
 800c350:	e01a      	b.n	800c388 <CO_LSSmaster_configureBitTiming+0xa4>
        case 1000: bitTiming = CO_LSS_BIT_TIMING_1000; break;
 800c352:	2300      	movs	r3, #0
 800c354:	75bb      	strb	r3, [r7, #22]
 800c356:	e01a      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 800: bitTiming = CO_LSS_BIT_TIMING_800; break;
 800c358:	2301      	movs	r3, #1
 800c35a:	75bb      	strb	r3, [r7, #22]
 800c35c:	e017      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 500: bitTiming = CO_LSS_BIT_TIMING_500; break;
 800c35e:	2302      	movs	r3, #2
 800c360:	75bb      	strb	r3, [r7, #22]
 800c362:	e014      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 250: bitTiming = CO_LSS_BIT_TIMING_250; break;
 800c364:	2303      	movs	r3, #3
 800c366:	75bb      	strb	r3, [r7, #22]
 800c368:	e011      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 125: bitTiming = CO_LSS_BIT_TIMING_125; break;
 800c36a:	2304      	movs	r3, #4
 800c36c:	75bb      	strb	r3, [r7, #22]
 800c36e:	e00e      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 50: bitTiming = CO_LSS_BIT_TIMING_50; break;
 800c370:	2306      	movs	r3, #6
 800c372:	75bb      	strb	r3, [r7, #22]
 800c374:	e00b      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 20: bitTiming = CO_LSS_BIT_TIMING_20; break;
 800c376:	2307      	movs	r3, #7
 800c378:	75bb      	strb	r3, [r7, #22]
 800c37a:	e008      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 10: bitTiming = CO_LSS_BIT_TIMING_10; break;
 800c37c:	2308      	movs	r3, #8
 800c37e:	75bb      	strb	r3, [r7, #22]
 800c380:	e005      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        case 0: bitTiming = CO_LSS_BIT_TIMING_AUTO; break;
 800c382:	2309      	movs	r3, #9
 800c384:	75bb      	strb	r3, [r7, #22]
 800c386:	e002      	b.n	800c38e <CO_LSSmaster_configureBitTiming+0xaa>
        default: return CO_LSSmaster_ILLEGAL_ARGUMENT; break;
 800c388:	f06f 0301 	mvn.w	r3, #1
 800c38c:	e048      	b.n	800c420 <CO_LSSmaster_configureBitTiming+0x13c>
    }

    /* Initiate config bit */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	791b      	ldrb	r3, [r3, #4]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d12b      	bne.n	800c3ee <CO_LSSmaster_configureBitTiming+0x10a>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	795b      	ldrb	r3, [r3, #5]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d127      	bne.n	800c3ee <CO_LSSmaster_configureBitTiming+0x10a>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_BIT_TIMING;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_BIT_TIMING;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b4:	2213      	movs	r2, #19
 800c3b6:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = 0;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3bc:	2200      	movs	r2, #0
 800c3be:	719a      	strb	r2, [r3, #6]
        LSSmaster->TXbuff->data[2] = bitTiming;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c4:	7dba      	ldrb	r2, [r7, #22]
 800c3c6:	71da      	strb	r2, [r3, #7]
        (void)memset(&LSSmaster->TXbuff->data[3], 0, sizeof(LSSmaster->TXbuff->data) - 3U);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	2205      	movs	r2, #5
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f012 ff46 	bl	801f264 <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a1a      	ldr	r2, [r3, #32]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f006 fb68 	bl	8012ab8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	75fb      	strb	r3, [r7, #23]
 800c3ec:	e00a      	b.n	800c404 <CO_LSSmaster_configureBitTiming+0x120>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_BIT_TIMING) {
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	795b      	ldrb	r3, [r3, #5]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d106      	bne.n	800c404 <CO_LSSmaster_configureBitTiming+0x120>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_BIT_TIMING);
 800c3f6:	2213      	movs	r2, #19
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff ff2c 	bl	800c258 <CO_LSSmaster_configureCheckWait>
 800c400:	4603      	mov	r3, r0
 800c402:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c408:	f113 0f03 	cmn.w	r3, #3
 800c40c:	d006      	beq.n	800c41c <CO_LSSmaster_configureBitTiming+0x138>
 800c40e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d002      	beq.n	800c41c <CO_LSSmaster_configureBitTiming+0x138>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c41c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <CO_LSSmaster_configureNodeId>:

CO_LSSmaster_return_t
CO_LSSmaster_configureNodeId(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t nodeId) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c436:	23fd      	movs	r3, #253	; 0xfd
 800c438:	75fb      	strb	r3, [r7, #23]

    if ((LSSmaster == NULL) || !CO_LSS_NODE_ID_VALID(nodeId)) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d009      	beq.n	800c454 <CO_LSSmaster_configureNodeId+0x2c>
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <CO_LSSmaster_configureNodeId+0x26>
 800c446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da05      	bge.n	800c45a <CO_LSSmaster_configureNodeId+0x32>
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2bff      	cmp	r3, #255	; 0xff
 800c452:	d002      	beq.n	800c45a <CO_LSSmaster_configureNodeId+0x32>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c454:	f06f 0301 	mvn.w	r3, #1
 800c458:	e04b      	b.n	800c4f2 <CO_LSSmaster_configureNodeId+0xca>
    }

    /* Initiate config node ID */
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) ||
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	791b      	ldrb	r3, [r3, #4]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d006      	beq.n	800c470 <CO_LSSmaster_configureNodeId+0x48>
         /* Let un-config node ID also be run in global mode for unconfiguring all nodes */
         ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	791b      	ldrb	r3, [r3, #4]
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) ||
 800c466:	2b02      	cmp	r3, #2
 800c468:	d12a      	bne.n	800c4c0 <CO_LSSmaster_configureNodeId+0x98>
         ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)))
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	2bff      	cmp	r3, #255	; 0xff
 800c46e:	d127      	bne.n	800c4c0 <CO_LSSmaster_configureNodeId+0x98>
        && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	795b      	ldrb	r3, [r3, #5]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d123      	bne.n	800c4c0 <CO_LSSmaster_configureNodeId+0x98>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_NODE_ID;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2203      	movs	r2, #3
 800c47c:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_NODE_ID;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	2211      	movs	r2, #17
 800c490:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = nodeId;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	79fa      	ldrb	r2, [r7, #7]
 800c498:	719a      	strb	r2, [r3, #6]
        (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	3307      	adds	r3, #7
 800c4a0:	2206      	movs	r2, #6
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f012 fedd 	bl	801f264 <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6a1a      	ldr	r2, [r3, #32]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	f006 faff 	bl	8012ab8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	75fb      	strb	r3, [r7, #23]
 800c4be:	e00a      	b.n	800c4d6 <CO_LSSmaster_configureNodeId+0xae>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_NODE_ID) {
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	795b      	ldrb	r3, [r3, #5]
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d106      	bne.n	800c4d6 <CO_LSSmaster_configureNodeId+0xae>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_NODE_ID);
 800c4c8:	2211      	movs	r2, #17
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff fec3 	bl	800c258 <CO_LSSmaster_configureCheckWait>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4da:	f113 0f03 	cmn.w	r3, #3
 800c4de:	d006      	beq.n	800c4ee <CO_LSSmaster_configureNodeId+0xc6>
 800c4e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d002      	beq.n	800c4ee <CO_LSSmaster_configureNodeId+0xc6>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c4ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <CO_LSSmaster_configureStore>:

CO_LSSmaster_return_t
CO_LSSmaster_configureStore(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c504:	23fd      	movs	r3, #253	; 0xfd
 800c506:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <CO_LSSmaster_configureStore+0x1a>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c50e:	f06f 0301 	mvn.w	r3, #1
 800c512:	e040      	b.n	800c596 <CO_LSSmaster_configureStore+0x9c>
    }

    /* Initiate config store */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	791b      	ldrb	r3, [r3, #4]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d123      	bne.n	800c564 <CO_LSSmaster_configureStore+0x6a>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	795b      	ldrb	r3, [r3, #5]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11f      	bne.n	800c564 <CO_LSSmaster_configureStore+0x6a>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_STORE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2204      	movs	r2, #4
 800c528:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_STORE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53a:	2217      	movs	r2, #23
 800c53c:	715a      	strb	r2, [r3, #5]
        (void)memset(&LSSmaster->TXbuff->data[1], 0, sizeof(LSSmaster->TXbuff->data) - 1U);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	3306      	adds	r3, #6
 800c544:	2207      	movs	r2, #7
 800c546:	2100      	movs	r1, #0
 800c548:	4618      	mov	r0, r3
 800c54a:	f012 fe8b 	bl	801f264 <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1a      	ldr	r2, [r3, #32]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f006 faad 	bl	8012ab8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c55e:	2301      	movs	r3, #1
 800c560:	73fb      	strb	r3, [r7, #15]
 800c562:	e00a      	b.n	800c57a <CO_LSSmaster_configureStore+0x80>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_STORE) {
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	795b      	ldrb	r3, [r3, #5]
 800c568:	2b04      	cmp	r3, #4
 800c56a:	d106      	bne.n	800c57a <CO_LSSmaster_configureStore+0x80>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_STORE);
 800c56c:	2217      	movs	r2, #23
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff fe71 	bl	800c258 <CO_LSSmaster_configureCheckWait>
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57e:	f113 0f03 	cmn.w	r3, #3
 800c582:	d006      	beq.n	800c592 <CO_LSSmaster_configureStore+0x98>
 800c584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d002      	beq.n	800c592 <CO_LSSmaster_configureStore+0x98>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <CO_LSSmaster_ActivateBit>:

CO_LSSmaster_return_t
CO_LSSmaster_ActivateBit(CO_LSSmaster_t* LSSmaster, uint16_t switchDelay_ms) {
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	807b      	strh	r3, [r7, #2]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c5aa:	23fd      	movs	r3, #253	; 0xfd
 800c5ac:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <CO_LSSmaster_ActivateBit+0x1c>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c5b4:	f06f 0301 	mvn.w	r3, #1
 800c5b8:	e02a      	b.n	800c610 <CO_LSSmaster_ActivateBit+0x72>
    }

    /* for activating bit timing, we need to have all slaves set to config
     * state. This check makes it a bit harder to shoot ourselves in the foot */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	791b      	ldrb	r3, [r3, #4]
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d124      	bne.n	800c60c <CO_LSSmaster_ActivateBit+0x6e>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	795b      	ldrb	r3, [r3, #5]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d120      	bne.n	800c60c <CO_LSSmaster_ActivateBit+0x6e>

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_ACTIVATE_BIT_TIMING;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d4:	2215      	movs	r2, #21
 800c5d6:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint16(&LSSmaster->TXbuff->data[1], switchDelay_ms);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	3306      	adds	r3, #6
 800c5de:	887a      	ldrh	r2, [r7, #2]
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff fc20 	bl	800be28 <CO_setUint16>
        (void)memset(&LSSmaster->TXbuff->data[3], 0, sizeof(LSSmaster->TXbuff->data) - 3U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	2205      	movs	r2, #5
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f012 fe36 	bl	801f264 <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a1a      	ldr	r2, [r3, #32]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c600:	4619      	mov	r1, r3
 800c602:	4610      	mov	r0, r2
 800c604:	f006 fa58 	bl	8012ab8 <CO_CANsend>

        /* This is non-confirmed service! */
        ret = CO_LSSmaster_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800c60c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <CO_LSSmaster_inquireInitiate>:

/*
 * Helper function - send request
 */
static CO_LSSmaster_return_t
CO_LSSmaster_inquireInitiate(CO_LSSmaster_t* LSSmaster, uint8_t cs) {
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	460b      	mov	r3, r1
 800c622:	70fb      	strb	r3, [r7, #3]
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = cs;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62e:	78fa      	ldrb	r2, [r7, #3]
 800c630:	715a      	strb	r2, [r3, #5]
    (void)memset(&LSSmaster->TXbuff->data[1], 0, sizeof(LSSmaster->TXbuff->data) - 1U);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	3306      	adds	r3, #6
 800c638:	2207      	movs	r2, #7
 800c63a:	2100      	movs	r1, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f012 fe11 	bl	801f264 <memset>
    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a1a      	ldr	r2, [r3, #32]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f006 fa33 	bl	8012ab8 <CO_CANsend>

    return CO_LSSmaster_WAIT_SLAVE;
 800c652:	2301      	movs	r3, #1
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <CO_LSSmaster_inquireCheckWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_inquireCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t csWait, uint32_t* value) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d01b      	beq.n	800c6ac <CO_LSSmaster_inquireCheckWait+0x50>
        uint8_t cs = LSSmaster->CANrxData[0];
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	7e1b      	ldrb	r3, [r3, #24]
 800c678:	75bb      	strb	r3, [r7, #22]
        *value = CO_getUint32(&LSSmaster->CANrxData[1]);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3319      	adds	r3, #25
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff fbc4 	bl	800be0c <CO_getUint32>
 800c684:	4602      	mov	r2, r0
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	615a      	str	r2, [r3, #20]

        if (cs == csWait) {
 800c690:	7dba      	ldrb	r2, [r7, #22]
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	429a      	cmp	r2, r3
 800c696:	d102      	bne.n	800c69e <CO_LSSmaster_inquireCheckWait+0x42>
            ret = CO_LSSmaster_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	75fb      	strb	r3, [r7, #23]
 800c69c:	e00c      	b.n	800c6b8 <CO_LSSmaster_inquireCheckWait+0x5c>
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c69e:	68b9      	ldr	r1, [r7, #8]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f7ff fc06 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	75fb      	strb	r3, [r7, #23]
 800c6aa:	e005      	b.n	800c6b8 <CO_LSSmaster_inquireCheckWait+0x5c>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c6ac:	68b9      	ldr	r1, [r7, #8]
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff fbff 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800c6b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <CO_LSSmaster_InquireLssAddress>:

CO_LSSmaster_return_t
CO_LSSmaster_InquireLssAddress(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSS_address_t* lssAddress) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c6d0:	23fd      	movs	r3, #253	; 0xfd
 800c6d2:	75fb      	strb	r3, [r7, #23]
    uint8_t next = CO_LSSmaster_COMMAND_WAITING;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	75bb      	strb	r3, [r7, #22]

    if ((LSSmaster == NULL) || (lssAddress == NULL)) {
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <CO_LSSmaster_InquireLssAddress+0x20>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d102      	bne.n	800c6ea <CO_LSSmaster_InquireLssAddress+0x26>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c6e4:	f06f 0301 	mvn.w	r3, #1
 800c6e8:	e0a3      	b.n	800c832 <CO_LSSmaster_InquireLssAddress+0x16e>
    }

    /* Check for reply */
    if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_VENDOR) {
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	795b      	ldrb	r3, [r3, #5]
 800c6ee:	2b05      	cmp	r3, #5
 800c6f0:	d110      	bne.n	800c714 <CO_LSSmaster_InquireLssAddress+0x50>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_VENDOR,
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	225a      	movs	r2, #90	; 0x5a
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7ff ffaf 	bl	800c65c <CO_LSSmaster_inquireCheckWait>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.vendorID);
        if (ret == CO_LSSmaster_OK) {
 800c702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d13d      	bne.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_PRODUCT;
 800c70a:	2306      	movs	r3, #6
 800c70c:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800c70e:	2301      	movs	r3, #1
 800c710:	75fb      	strb	r3, [r7, #23]
 800c712:	e038      	b.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_PRODUCT) {
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	795b      	ldrb	r3, [r3, #5]
 800c718:	2b06      	cmp	r3, #6
 800c71a:	d111      	bne.n	800c740 <CO_LSSmaster_InquireLssAddress+0x7c>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_PRODUCT,
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3304      	adds	r3, #4
 800c720:	225b      	movs	r2, #91	; 0x5b
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7ff ff99 	bl	800c65c <CO_LSSmaster_inquireCheckWait>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.productCode);
        if (ret == CO_LSSmaster_OK) {
 800c72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d127      	bne.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_REV;
 800c736:	2307      	movs	r3, #7
 800c738:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800c73a:	2301      	movs	r3, #1
 800c73c:	75fb      	strb	r3, [r7, #23]
 800c73e:	e022      	b.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_REV) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	795b      	ldrb	r3, [r3, #5]
 800c744:	2b07      	cmp	r3, #7
 800c746:	d111      	bne.n	800c76c <CO_LSSmaster_InquireLssAddress+0xa8>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_REV,
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3308      	adds	r3, #8
 800c74c:	225c      	movs	r2, #92	; 0x5c
 800c74e:	68b9      	ldr	r1, [r7, #8]
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff ff83 	bl	800c65c <CO_LSSmaster_inquireCheckWait>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.revisionNumber);
        if (ret == CO_LSSmaster_OK) {
 800c75a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d111      	bne.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_SERIAL;
 800c762:	2308      	movs	r3, #8
 800c764:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800c766:	2301      	movs	r3, #1
 800c768:	75fb      	strb	r3, [r7, #23]
 800c76a:	e00c      	b.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_SERIAL) {
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	795b      	ldrb	r3, [r3, #5]
 800c770:	2b08      	cmp	r3, #8
 800c772:	d108      	bne.n	800c786 <CO_LSSmaster_InquireLssAddress+0xc2>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_SERIAL,
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	330c      	adds	r3, #12
 800c778:	225d      	movs	r2, #93	; 0x5d
 800c77a:	68b9      	ldr	r1, [r7, #8]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff ff6d 	bl	800c65c <CO_LSSmaster_inquireCheckWait>
 800c782:	4603      	mov	r3, r0
 800c784:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.serialNumber);
    } else { /* MISRA C 2004 14.10 */
    }

    /* Check for next request */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) || (LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL)) {
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	791b      	ldrb	r3, [r3, #4]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d003      	beq.n	800c796 <CO_LSSmaster_InquireLssAddress+0xd2>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	791b      	ldrb	r3, [r3, #4]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d13f      	bne.n	800c816 <CO_LSSmaster_InquireLssAddress+0x152>
        if (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	795b      	ldrb	r3, [r3, #5]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10c      	bne.n	800c7b8 <CO_LSSmaster_InquireLssAddress+0xf4>

            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_VENDOR;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2205      	movs	r2, #5
 800c7a2:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_VENDOR);
 800c7aa:	215a      	movs	r1, #90	; 0x5a
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff ff33 	bl	800c618 <CO_LSSmaster_inquireInitiate>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	75fb      	strb	r3, [r7, #23]
 800c7b6:	e02e      	b.n	800c816 <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_PRODUCT) {
 800c7b8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ba:	2b06      	cmp	r3, #6
 800c7bc:	d10c      	bne.n	800c7d8 <CO_LSSmaster_InquireLssAddress+0x114>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_PRODUCT;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2206      	movs	r2, #6
 800c7c2:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_PRODUCT);
 800c7ca:	215b      	movs	r1, #91	; 0x5b
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff ff23 	bl	800c618 <CO_LSSmaster_inquireInitiate>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	75fb      	strb	r3, [r7, #23]
 800c7d6:	e01e      	b.n	800c816 <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_REV) {
 800c7d8:	7dbb      	ldrb	r3, [r7, #22]
 800c7da:	2b07      	cmp	r3, #7
 800c7dc:	d10c      	bne.n	800c7f8 <CO_LSSmaster_InquireLssAddress+0x134>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_REV;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2207      	movs	r2, #7
 800c7e2:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_REV);
 800c7ea:	215c      	movs	r1, #92	; 0x5c
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff ff13 	bl	800c618 <CO_LSSmaster_inquireInitiate>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	75fb      	strb	r3, [r7, #23]
 800c7f6:	e00e      	b.n	800c816 <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_SERIAL) {
 800c7f8:	7dbb      	ldrb	r3, [r7, #22]
 800c7fa:	2b08      	cmp	r3, #8
 800c7fc:	d10b      	bne.n	800c816 <CO_LSSmaster_InquireLssAddress+0x152>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_SERIAL;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2208      	movs	r2, #8
 800c802:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_SERIAL);
 800c80a:	215d      	movs	r1, #93	; 0x5d
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff ff03 	bl	800c618 <CO_LSSmaster_inquireInitiate>
 800c812:	4603      	mov	r3, r0
 800c814:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c81a:	f113 0f03 	cmn.w	r3, #3
 800c81e:	d006      	beq.n	800c82e <CO_LSSmaster_InquireLssAddress+0x16a>
 800c820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d002      	beq.n	800c82e <CO_LSSmaster_InquireLssAddress+0x16a>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c82e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <CO_LSSmaster_Inquire>:

CO_LSSmaster_return_t
CO_LSSmaster_Inquire(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t lssInquireCs, uint32_t* value) {
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b086      	sub	sp, #24
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	603b      	str	r3, [r7, #0]
 800c846:	4613      	mov	r3, r2
 800c848:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c84a:	23fd      	movs	r3, #253	; 0xfd
 800c84c:	75fb      	strb	r3, [r7, #23]

    if ((LSSmaster == NULL) || (value == NULL)) {
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <CO_LSSmaster_Inquire+0x20>
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d102      	bne.n	800c860 <CO_LSSmaster_Inquire+0x26>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c85a:	f06f 0301 	mvn.w	r3, #1
 800c85e:	e02e      	b.n	800c8be <CO_LSSmaster_Inquire+0x84>
    }

    /* send request */
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) || (LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL))
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	791b      	ldrb	r3, [r3, #4]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d003      	beq.n	800c870 <CO_LSSmaster_Inquire+0x36>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	791b      	ldrb	r3, [r3, #4]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d111      	bne.n	800c894 <CO_LSSmaster_Inquire+0x5a>
        && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	795b      	ldrb	r3, [r3, #5]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10d      	bne.n	800c894 <CO_LSSmaster_Inquire+0x5a>

        LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2209      	movs	r2, #9
 800c87c:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	609a      	str	r2, [r3, #8]

        ret = CO_LSSmaster_inquireInitiate(LSSmaster, lssInquireCs);
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	4619      	mov	r1, r3
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fec5 	bl	800c618 <CO_LSSmaster_inquireInitiate>
 800c88e:	4603      	mov	r3, r0
 800c890:	75fb      	strb	r3, [r7, #23]
 800c892:	e00b      	b.n	800c8ac <CO_LSSmaster_Inquire+0x72>
    }
    /* Check for reply */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	795b      	ldrb	r3, [r3, #5]
 800c898:	2b09      	cmp	r3, #9
 800c89a:	d107      	bne.n	800c8ac <CO_LSSmaster_Inquire+0x72>
        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, lssInquireCs, value);
 800c89c:	79fa      	ldrb	r2, [r7, #7]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	68b9      	ldr	r1, [r7, #8]
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff feda 	bl	800c65c <CO_LSSmaster_inquireCheckWait>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 800c8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d002      	beq.n	800c8ba <CO_LSSmaster_Inquire+0x80>
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <CO_LSSmaster_FsSendMsg>:
/*
 * Helper function - send request
 */
static void
CO_LSSmaster_FsSendMsg(CO_LSSmaster_t* LSSmaster, uint32_t idNumber, uint8_t bitCheck, uint8_t lssSub,
                       uint8_t lssNext) {
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	60b9      	str	r1, [r7, #8]
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	71fb      	strb	r3, [r7, #7]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	71bb      	strb	r3, [r7, #6]
    LSSmaster->timeoutTimer = 0;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	609a      	str	r2, [r3, #8]

    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = CO_LSS_IDENT_FASTSCAN;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	2251      	movs	r2, #81	; 0x51
 800c8ee:	715a      	strb	r2, [r3, #5]
    (void)CO_setUint32(&LSSmaster->TXbuff->data[1], idNumber);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	3306      	adds	r3, #6
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff faa5 	bl	800be48 <CO_setUint32>
    LSSmaster->TXbuff->data[5] = bitCheck;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c902:	79fa      	ldrb	r2, [r7, #7]
 800c904:	729a      	strb	r2, [r3, #10]
    LSSmaster->TXbuff->data[6] = lssSub;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90a:	79ba      	ldrb	r2, [r7, #6]
 800c90c:	72da      	strb	r2, [r3, #11]
    LSSmaster->TXbuff->data[7] = lssNext;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	7e3a      	ldrb	r2, [r7, #24]
 800c914:	731a      	strb	r2, [r3, #12]

    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6a1a      	ldr	r2, [r3, #32]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	4619      	mov	r1, r3
 800c920:	4610      	mov	r0, r2
 800c922:	f006 f8c9 	bl	8012ab8 <CO_CANsend>
}
 800c926:	bf00      	nop
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <CO_LSSmaster_FsCheckWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff fab9 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800c944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94c:	d110      	bne.n	800c970 <CO_LSSmaster_FsCheckWait+0x42>
        ret = CO_LSSmaster_SCAN_NOACK;
 800c94e:	23fc      	movs	r3, #252	; 0xfc
 800c950:	73fb      	strb	r3, [r7, #15]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <CO_LSSmaster_FsCheckWait+0x42>
            uint8_t cs = LSSmaster->CANrxData[0];
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7e1b      	ldrb	r3, [r3, #24]
 800c95e:	73bb      	strb	r3, [r7, #14]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	615a      	str	r2, [r3, #20]

            if (cs == CO_LSS_IDENT_SLAVE) {
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	2b4f      	cmp	r3, #79	; 0x4f
 800c96a:	d101      	bne.n	800c970 <CO_LSSmaster_FsCheckWait+0x42>
                /* At least one node is waiting for fastscan */
                ret = CO_LSSmaster_SCAN_FINISHED;
 800c96c:	2302      	movs	r3, #2
 800c96e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return ret;
 800c970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <CO_LSSmaster_FsScanInitiate>:
/*
 * Helper function - initiate scan for 32 bit part of LSS address
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsScanInitiate(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                            uint8_t lssSub) {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af02      	add	r7, sp, #8
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4611      	mov	r1, r2
 800c988:	461a      	mov	r2, r3
 800c98a:	460b      	mov	r3, r1
 800c98c:	71fb      	strb	r3, [r7, #7]
 800c98e:	4613      	mov	r3, r2
 800c990:	71bb      	strb	r3, [r7, #6]
    (void)timeDifference_us; /* unused */

    LSSmaster->fsLssSub = lssSub;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	79ba      	ldrb	r2, [r7, #6]
 800c996:	735a      	strb	r2, [r3, #13]
    LSSmaster->fsIdNumber = 0;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]

    switch (scan) {
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d006      	beq.n	800c9b2 <CO_LSSmaster_FsScanInitiate+0x36>
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d101      	bne.n	800c9ac <CO_LSSmaster_FsScanInitiate+0x30>
        case CO_LSSmaster_FS_SCAN: break;
        case CO_LSSmaster_FS_MATCH:
            /* No scanning requested */
            return CO_LSSmaster_SCAN_FINISHED;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e014      	b.n	800c9d6 <CO_LSSmaster_FsScanInitiate+0x5a>
            break;
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800c9ac:	f06f 0304 	mvn.w	r3, #4
 800c9b0:	e011      	b.n	800c9d6 <CO_LSSmaster_FsScanInitiate+0x5a>
        case CO_LSSmaster_FS_SCAN: break;
 800c9b2:	bf00      	nop
    }

    LSSmaster->fsBitChecked = CO_LSS_FASTSCAN_BIT31;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	221f      	movs	r2, #31
 800c9b8:	739a      	strb	r2, [r3, #14]

    /* trigger scan procedure by sending first message */
    CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub,
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6919      	ldr	r1, [r3, #16]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	7b9a      	ldrb	r2, [r3, #14]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	7b58      	ldrb	r0, [r3, #13]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	7b5b      	ldrb	r3, [r3, #13]
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff ff79 	bl	800c8c6 <CO_LSSmaster_FsSendMsg>
                           LSSmaster->fsLssSub);

    return CO_LSSmaster_WAIT_SLAVE;
 800c9d4:	2301      	movs	r3, #1
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <CO_LSSmaster_FsScanWait>:

/*
 * Helper function - scan for 32 bits of LSS address, one by one
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsScanWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan) {
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b088      	sub	sp, #32
 800c9e2:	af02      	add	r7, sp, #8
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    switch (scan) {
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d006      	beq.n	800ca00 <CO_LSSmaster_FsScanWait+0x22>
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d101      	bne.n	800c9fa <CO_LSSmaster_FsScanWait+0x1c>
        case CO_LSSmaster_FS_SCAN: break;
        case CO_LSSmaster_FS_MATCH:
            /* No scanning requested */
            return CO_LSSmaster_SCAN_FINISHED;
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	e046      	b.n	800ca88 <CO_LSSmaster_FsScanWait+0xaa>
            break;
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800c9fa:	f06f 0304 	mvn.w	r3, #4
 800c9fe:	e043      	b.n	800ca88 <CO_LSSmaster_FsScanWait+0xaa>
        case CO_LSSmaster_FS_SCAN: break;
 800ca00:	bf00      	nop
    }

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800ca02:	68b9      	ldr	r1, [r7, #8]
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f7ff fa54 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	75fb      	strb	r3, [r7, #23]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800ca0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d135      	bne.n	800ca84 <CO_LSSmaster_FsScanWait+0xa6>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00b      	beq.n	800ca3c <CO_LSSmaster_FsScanWait+0x5e>
            uint8_t cs = LSSmaster->CANrxData[0];
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	7e1b      	ldrb	r3, [r3, #24]
 800ca28:	75bb      	strb	r3, [r7, #22]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	615a      	str	r2, [r3, #20]

            if (cs != CO_LSS_IDENT_SLAVE) {
 800ca30:	7dbb      	ldrb	r3, [r7, #22]
 800ca32:	2b4f      	cmp	r3, #79	; 0x4f
 800ca34:	d00c      	beq.n	800ca50 <CO_LSSmaster_FsScanWait+0x72>
                /* wrong response received. Can not continue */
                return CO_LSSmaster_SCAN_FAILED;
 800ca36:	f06f 0304 	mvn.w	r3, #4
 800ca3a:	e025      	b.n	800ca88 <CO_LSSmaster_FsScanWait+0xaa>
            }
        } else {
            /* no response received, assumption is wrong */
            LSSmaster->fsIdNumber |= 1UL << LSSmaster->fsBitChecked;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	691a      	ldr	r2, [r3, #16]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7b9b      	ldrb	r3, [r3, #14]
 800ca44:	4619      	mov	r1, r3
 800ca46:	2301      	movs	r3, #1
 800ca48:	408b      	lsls	r3, r1
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	611a      	str	r2, [r3, #16]
        }

        if (LSSmaster->fsBitChecked == CO_LSS_FASTSCAN_BIT0) {
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	7b9b      	ldrb	r3, [r3, #14]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <CO_LSSmaster_FsScanWait+0x80>
            /* Scanning cycle is finished, we now have 32 bit address data */
            ret = CO_LSSmaster_SCAN_FINISHED;
 800ca58:	2302      	movs	r3, #2
 800ca5a:	75fb      	strb	r3, [r7, #23]
 800ca5c:	e012      	b.n	800ca84 <CO_LSSmaster_FsScanWait+0xa6>
        } else {
            LSSmaster->fsBitChecked--;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	7b9b      	ldrb	r3, [r3, #14]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	739a      	strb	r2, [r3, #14]

            CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub,
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6919      	ldr	r1, [r3, #16]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	7b9a      	ldrb	r2, [r3, #14]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	7b58      	ldrb	r0, [r3, #13]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	7b5b      	ldrb	r3, [r3, #13]
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff ff21 	bl	800c8c6 <CO_LSSmaster_FsSendMsg>
                                   LSSmaster->fsLssSub);
        }
    }

    return ret;
 800ca84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <CO_LSSmaster_FsVerifyInitiate>:
/*
 * Helper function - initiate check for 32 bit part of LSS address
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsVerifyInitiate(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                              uint32_t idNumberCheck, uint8_t lssNext) {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af02      	add	r7, sp, #8
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	71fb      	strb	r3, [r7, #7]
    (void)timeDifference_us; /* unused */

    switch (scan) {
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <CO_LSSmaster_FsVerifyInitiate+0x28>
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d103      	bne.n	800cab2 <CO_LSSmaster_FsVerifyInitiate+0x22>
        case CO_LSSmaster_FS_SCAN:
            /* ID obtained by scan */
            break;
        case CO_LSSmaster_FS_MATCH:
            /* ID given by user */
            LSSmaster->fsIdNumber = idNumberCheck;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	611a      	str	r2, [r3, #16]
            break;
 800cab0:	e003      	b.n	800caba <CO_LSSmaster_FsVerifyInitiate+0x2a>
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800cab2:	f06f 0304 	mvn.w	r3, #4
 800cab6:	e010      	b.n	800cada <CO_LSSmaster_FsVerifyInitiate+0x4a>
            break;
 800cab8:	bf00      	nop
    }

    LSSmaster->fsBitChecked = CO_LSS_FASTSCAN_BIT0;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	739a      	strb	r2, [r3, #14]

    /* send request */
    CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub, lssNext);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6919      	ldr	r1, [r3, #16]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	7b9a      	ldrb	r2, [r3, #14]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	7b58      	ldrb	r0, [r3, #13]
 800cacc:	7e3b      	ldrb	r3, [r7, #24]
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	4603      	mov	r3, r0
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7ff fef7 	bl	800c8c6 <CO_LSSmaster_FsSendMsg>

    return CO_LSSmaster_WAIT_SLAVE;
 800cad8:	2301      	movs	r3, #1
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <CO_LSSmaster_FsVerifyWait>:
/*
 * Helper function - verify 32 bit LSS address, request node(s) to switch their state machine to the next state
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsVerifyWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                          uint32_t* idNumberRet) {
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	603b      	str	r3, [r7, #0]
 800caee:	4613      	mov	r3, r2
 800caf0:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (scan == CO_LSSmaster_FS_SKIP) {
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d102      	bne.n	800cafe <CO_LSSmaster_FsVerifyWait+0x1c>
        return CO_LSSmaster_SCAN_FAILED;
 800caf8:	f06f 0304 	mvn.w	r3, #4
 800cafc:	e027      	b.n	800cb4e <CO_LSSmaster_FsVerifyWait+0x6c>
    }

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800cafe:	68b9      	ldr	r1, [r7, #8]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f7ff f9d6 	bl	800beb2 <CO_LSSmaster_check_timeout>
 800cb06:	4603      	mov	r3, r0
 800cb08:	75fb      	strb	r3, [r7, #23]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800cb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d11a      	bne.n	800cb4a <CO_LSSmaster_FsVerifyWait+0x68>

        *idNumberRet = 0;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
        ret = CO_LSSmaster_SCAN_NOACK;
 800cb1a:	23fc      	movs	r3, #252	; 0xfc
 800cb1c:	75fb      	strb	r3, [r7, #23]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d011      	beq.n	800cb4a <CO_LSSmaster_FsVerifyWait+0x68>
            uint8_t cs = LSSmaster->CANrxData[0];
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	7e1b      	ldrb	r3, [r3, #24]
 800cb2a:	75bb      	strb	r3, [r7, #22]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	615a      	str	r2, [r3, #20]

            if (cs == CO_LSS_IDENT_SLAVE) {
 800cb32:	7dbb      	ldrb	r3, [r7, #22]
 800cb34:	2b4f      	cmp	r3, #79	; 0x4f
 800cb36:	d106      	bne.n	800cb46 <CO_LSSmaster_FsVerifyWait+0x64>
                *idNumberRet = LSSmaster->fsIdNumber;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	691a      	ldr	r2, [r3, #16]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	601a      	str	r2, [r3, #0]
                ret = CO_LSSmaster_SCAN_FINISHED;
 800cb40:	2302      	movs	r3, #2
 800cb42:	75fb      	strb	r3, [r7, #23]
 800cb44:	e001      	b.n	800cb4a <CO_LSSmaster_FsVerifyWait+0x68>
            } else {
                ret = CO_LSSmaster_SCAN_FAILED;
 800cb46:	23fb      	movs	r3, #251	; 0xfb
 800cb48:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return ret;
 800cb4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <CO_LSSmaster_FsSearchNext>:

/*
 * Helper function - check which 32 bit to scan for next, if any
 */
static uint8_t
CO_LSSmaster_FsSearchNext(CO_LSSmaster_t* LSSmaster, const CO_LSSmaster_fastscan_t* fastscan) {
 800cb56:	b480      	push	{r7}
 800cb58:	b085      	sub	sp, #20
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
    uint8_t i;

    /* we search for the next LSS address part to scan for, beginning with the
     * one after the current one. If there is none remaining, scanning is finished */
    for (i = LSSmaster->fsLssSub + 1U; i <= CO_LSS_FASTSCAN_SERIAL; i++) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7b5b      	ldrb	r3, [r3, #13]
 800cb64:	3301      	adds	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e009      	b.n	800cb7e <CO_LSSmaster_FsSearchNext+0x28>
        if (fastscan->scan[i] != CO_LSSmaster_FS_SKIP) {
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	5cd3      	ldrb	r3, [r2, r3]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d001      	beq.n	800cb78 <CO_LSSmaster_FsSearchNext+0x22>
            return i;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	e006      	b.n	800cb86 <CO_LSSmaster_FsSearchNext+0x30>
    for (i = LSSmaster->fsLssSub + 1U; i <= CO_LSS_FASTSCAN_SERIAL; i++) {
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	73fb      	strb	r3, [r7, #15]
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d9f2      	bls.n	800cb6a <CO_LSSmaster_FsSearchNext+0x14>
        }
    }
    /* node selection is triggered by switching node state machine back to initial state */
    return CO_LSS_FASTSCAN_VENDOR_ID;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <CO_LSSmaster_IdentifyFastscan>:

CO_LSSmaster_return_t
CO_LSSmaster_IdentifyFastscan(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us,
                              CO_LSSmaster_fastscan_t* fastscan) {
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b088      	sub	sp, #32
 800cb96:	af02      	add	r7, sp, #8
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
    uint8_t i;
    uint8_t count;
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800cb9e:	23fd      	movs	r3, #253	; 0xfd
 800cba0:	757b      	strb	r3, [r7, #21]
    uint8_t next;

    /* parameter validation */
    if ((LSSmaster == NULL) || (fastscan == NULL)) {
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <CO_LSSmaster_IdentifyFastscan+0x1c>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <CO_LSSmaster_IdentifyFastscan+0x22>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cbae:	f06f 0301 	mvn.w	r3, #1
 800cbb2:	e0e3      	b.n	800cd7c <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }
    if (fastscan->scan[0] == CO_LSSmaster_FS_SKIP) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d102      	bne.n	800cbc2 <CO_LSSmaster_IdentifyFastscan+0x30>
        /* vendor ID scan cannot be skipped */
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cbbc:	f06f 0301 	mvn.w	r3, #1
 800cbc0:	e0dc      	b.n	800cd7c <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }
    count = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	75bb      	strb	r3, [r7, #22]
    for (i = 0; i < (sizeof(fastscan->scan) / sizeof(fastscan->scan[0])); i++) {
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	75fb      	strb	r3, [r7, #23]
 800cbca:	e010      	b.n	800cbee <CO_LSSmaster_IdentifyFastscan+0x5c>
        if (fastscan->scan[i] == CO_LSSmaster_FS_SKIP) {
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	5cd3      	ldrb	r3, [r2, r3]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d102      	bne.n	800cbdc <CO_LSSmaster_IdentifyFastscan+0x4a>
            count++;
 800cbd6:	7dbb      	ldrb	r3, [r7, #22]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	75bb      	strb	r3, [r7, #22]
        }
        if (count > 2U) {
 800cbdc:	7dbb      	ldrb	r3, [r7, #22]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d902      	bls.n	800cbe8 <CO_LSSmaster_IdentifyFastscan+0x56>
            /* Node selection needs the Vendor ID and at least one other value */
            return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cbe2:	f06f 0301 	mvn.w	r3, #1
 800cbe6:	e0c9      	b.n	800cd7c <CO_LSSmaster_IdentifyFastscan+0x1ea>
    for (i = 0; i < (sizeof(fastscan->scan) / sizeof(fastscan->scan[0])); i++) {
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	3301      	adds	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	2b03      	cmp	r3, #3
 800cbf2:	d9eb      	bls.n	800cbcc <CO_LSSmaster_IdentifyFastscan+0x3a>
        }
    }

    /* state machine validation */
    if ((LSSmaster->state != CO_LSSmaster_STATE_WAITING)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	791b      	ldrb	r3, [r3, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d107      	bne.n	800cc0c <CO_LSSmaster_IdentifyFastscan+0x7a>
        || ((LSSmaster->command != CO_LSSmaster_COMMAND_WAITING)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	795b      	ldrb	r3, [r3, #5]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d006      	beq.n	800cc12 <CO_LSSmaster_IdentifyFastscan+0x80>
            && (LSSmaster->command != CO_LSSmaster_COMMAND_IDENTIFY_FASTSCAN))) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	795b      	ldrb	r3, [r3, #5]
 800cc08:	2b0a      	cmp	r3, #10
 800cc0a:	d002      	beq.n	800cc12 <CO_LSSmaster_IdentifyFastscan+0x80>
        /* state machine not ready, other command is already processed */
        return CO_LSSmaster_INVALID_STATE;
 800cc0c:	f06f 0302 	mvn.w	r3, #2
 800cc10:	e0b4      	b.n	800cd7c <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }

    /* evaluate LSS state machine */
    if (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	795b      	ldrb	r3, [r3, #5]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10f      	bne.n	800cc3a <CO_LSSmaster_IdentifyFastscan+0xa8>
        /* start fastscan */
        LSSmaster->command = CO_LSSmaster_COMMAND_IDENTIFY_FASTSCAN;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	220a      	movs	r2, #10
 800cc1e:	715a      	strb	r2, [r3, #5]

        /* check if any nodes are waiting, if yes fastscan is reset */
        LSSmaster->fsState = CO_LSSmaster_FS_STATE_CHECK;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	731a      	strb	r2, [r3, #12]
        CO_LSSmaster_FsSendMsg(LSSmaster, 0, CO_LSS_FASTSCAN_CONFIRM, 0, 0);
 800cc26:	2300      	movs	r3, #0
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2280      	movs	r2, #128	; 0x80
 800cc2e:	2100      	movs	r1, #0
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fe48 	bl	800c8c6 <CO_LSSmaster_FsSendMsg>

        return CO_LSSmaster_WAIT_SLAVE;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e0a0      	b.n	800cd7c <CO_LSSmaster_IdentifyFastscan+0x1ea>
     * - scan for serial number
     * - verify serial number, switch node to LSS configuration mode
     * Certain steps can be skipped as mentioned in the function description. If one step is
     * not ack'ed by a node, the scanning process is terminated and the correspondign error is returned.
     */
    switch (LSSmaster->fsState) {
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7b1b      	ldrb	r3, [r3, #12]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d054      	beq.n	800ccec <CO_LSSmaster_IdentifyFastscan+0x15a>
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	f300 808a 	bgt.w	800cd5c <CO_LSSmaster_IdentifyFastscan+0x1ca>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <CO_LSSmaster_IdentifyFastscan+0xc0>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d01e      	beq.n	800cc8e <CO_LSSmaster_IdentifyFastscan+0xfc>
                }
            }
            break;
        default:
            /* none */
            break;
 800cc50:	e084      	b.n	800cd5c <CO_LSSmaster_IdentifyFastscan+0x1ca>
            ret = CO_LSSmaster_FsCheckWait(LSSmaster, timeDifference_us);
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f7ff fe6a 	bl	800c92e <CO_LSSmaster_FsCheckWait>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800cc5e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d17c      	bne.n	800cd60 <CO_LSSmaster_IdentifyFastscan+0x1ce>
                (void)memset(&fastscan->found, 0, sizeof(fastscan->found));
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3314      	adds	r3, #20
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f012 faf8 	bl	801f264 <memset>
                (void)CO_LSSmaster_FsScanInitiate(LSSmaster, timeDifference_us,
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f7ff fe7d 	bl	800c97c <CO_LSSmaster_FsScanInitiate>
                ret = CO_LSSmaster_WAIT_SLAVE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	757b      	strb	r3, [r7, #21]
                LSSmaster->fsState = CO_LSSmaster_FS_STATE_SCAN;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	731a      	strb	r2, [r3, #12]
            break;
 800cc8c:	e068      	b.n	800cd60 <CO_LSSmaster_IdentifyFastscan+0x1ce>
            ret = CO_LSSmaster_FsScanWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub]);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	7b5b      	ldrb	r3, [r3, #13]
 800cc92:	461a      	mov	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	5c9b      	ldrb	r3, [r3, r2]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f7ff fe9e 	bl	800c9de <CO_LSSmaster_FsScanWait>
 800cca2:	4603      	mov	r3, r0
 800cca4:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800cca6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d15a      	bne.n	800cd64 <CO_LSSmaster_IdentifyFastscan+0x1d2>
                next = CO_LSSmaster_FsSearchNext(LSSmaster, fastscan);
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff ff50 	bl	800cb56 <CO_LSSmaster_FsSearchNext>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	753b      	strb	r3, [r7, #20]
                ret = CO_LSSmaster_FsVerifyInitiate(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	7b5b      	ldrb	r3, [r3, #13]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	5c99      	ldrb	r1, [r3, r2]
                                                    fastscan->match.addr[LSSmaster->fsLssSub], next);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	7b5b      	ldrb	r3, [r3, #13]
                ret = CO_LSSmaster_FsVerifyInitiate(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	7d3b      	ldrb	r3, [r7, #20]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	460a      	mov	r2, r1
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7ff fed8 	bl	800ca90 <CO_LSSmaster_FsVerifyInitiate>
 800cce0:	4603      	mov	r3, r0
 800cce2:	757b      	strb	r3, [r7, #21]
                LSSmaster->fsState = CO_LSSmaster_FS_STATE_VERIFY;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2202      	movs	r2, #2
 800cce8:	731a      	strb	r2, [r3, #12]
            break;
 800ccea:	e03b      	b.n	800cd64 <CO_LSSmaster_IdentifyFastscan+0x1d2>
            ret = CO_LSSmaster_FsVerifyWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	7b5b      	ldrb	r3, [r3, #13]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	5c99      	ldrb	r1, [r3, r2]
                                            &fastscan->found.addr[LSSmaster->fsLssSub]);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	7b5b      	ldrb	r3, [r3, #13]
            ret = CO_LSSmaster_FsVerifyWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	4413      	add	r3, r2
 800cd02:	3304      	adds	r3, #4
 800cd04:	460a      	mov	r2, r1
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff feea 	bl	800cae2 <CO_LSSmaster_FsVerifyWait>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800cd12:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d126      	bne.n	800cd68 <CO_LSSmaster_IdentifyFastscan+0x1d6>
                next = CO_LSSmaster_FsSearchNext(LSSmaster, fastscan);
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff ff1a 	bl	800cb56 <CO_LSSmaster_FsSearchNext>
 800cd22:	4603      	mov	r3, r0
 800cd24:	753b      	strb	r3, [r7, #20]
                if (next == CO_LSS_FASTSCAN_VENDOR_ID) {
 800cd26:	7d3b      	ldrb	r3, [r7, #20]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d103      	bne.n	800cd34 <CO_LSSmaster_IdentifyFastscan+0x1a2>
                    LSSmaster->state = CO_LSSmaster_STATE_CFG_SLECTIVE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	711a      	strb	r2, [r3, #4]
            break;
 800cd32:	e019      	b.n	800cd68 <CO_LSSmaster_IdentifyFastscan+0x1d6>
                    ret = CO_LSSmaster_FsScanInitiate(LSSmaster, timeDifference_us, fastscan->scan[next], next);
 800cd34:	7d3b      	ldrb	r3, [r7, #20]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	5cd2      	ldrb	r2, [r2, r3]
 800cd3a:	7d3b      	ldrb	r3, [r7, #20]
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fe1c 	bl	800c97c <CO_LSSmaster_FsScanInitiate>
 800cd44:	4603      	mov	r3, r0
 800cd46:	757b      	strb	r3, [r7, #21]
                    if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800cd48:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d101      	bne.n	800cd54 <CO_LSSmaster_IdentifyFastscan+0x1c2>
                        ret = CO_LSSmaster_WAIT_SLAVE;
 800cd50:	2301      	movs	r3, #1
 800cd52:	757b      	strb	r3, [r7, #21]
                    LSSmaster->fsState = CO_LSSmaster_FS_STATE_SCAN;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2201      	movs	r2, #1
 800cd58:	731a      	strb	r2, [r3, #12]
            break;
 800cd5a:	e005      	b.n	800cd68 <CO_LSSmaster_IdentifyFastscan+0x1d6>
            break;
 800cd5c:	bf00      	nop
 800cd5e:	e004      	b.n	800cd6a <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800cd60:	bf00      	nop
 800cd62:	e002      	b.n	800cd6a <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800cd64:	bf00      	nop
 800cd66:	e000      	b.n	800cd6a <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800cd68:	bf00      	nop
    }

    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 800cd6a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d002      	beq.n	800cd78 <CO_LSSmaster_IdentifyFastscan+0x1e6>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800cd78:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b090      	sub	sp, #64	; 0x40
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	791b      	ldrb	r3, [r3, #4]
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800cd9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd9e:	2b08      	cmp	r3, #8
 800cda0:	f040 814f 	bne.w	800d042 <CO_LSSslave_receive+0x2be>
 800cda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f040 814a 	bne.w	800d042 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	3305      	adds	r3, #5
 800cdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 800cdc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cdc4:	2b04      	cmp	r3, #4
 800cdc6:	d12d      	bne.n	800ce24 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	3301      	adds	r3, #1
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 800cdd0:	7ffb      	ldrb	r3, [r7, #31]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <CO_LSSslave_receive+0x58>
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d020      	beq.n	800ce1c <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 800cdda:	e12c      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 800cddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdde:	7c1b      	ldrb	r3, [r3, #16]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d110      	bne.n	800ce06 <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800cde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdea:	2bff      	cmp	r3, #255	; 0xff
 800cdec:	d10b      	bne.n	800ce06 <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 800cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	2bff      	cmp	r3, #255	; 0xff
 800cdf6:	d006      	beq.n	800ce06 <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800cdfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 800ce02:	2301      	movs	r3, #1
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800ce06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce08:	2200      	movs	r2, #0
 800ce0a:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0e:	3314      	adds	r3, #20
 800ce10:	2210      	movs	r2, #16
 800ce12:	2100      	movs	r1, #0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f012 fa25 	bl	801f264 <memset>
                    break;
 800ce1a:	e10c      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1e:	2201      	movs	r2, #1
 800ce20:	741a      	strb	r2, [r3, #16]
 800ce22:	e108      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800ce24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce26:	7c1b      	ldrb	r3, [r3, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f040 80f0 	bne.w	800d00e <CO_LSSslave_receive+0x28a>
            switch (cs) {
 800ce2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce32:	3b40      	subs	r3, #64	; 0x40
 800ce34:	2b11      	cmp	r3, #17
 800ce36:	f200 80f9 	bhi.w	800d02c <CO_LSSslave_receive+0x2a8>
 800ce3a:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <CO_LSSslave_receive+0xbc>)
 800ce3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce40:	0800ce89 	.word	0x0800ce89
 800ce44:	0800ce99 	.word	0x0800ce99
 800ce48:	0800cea9 	.word	0x0800cea9
 800ce4c:	0800ceb9 	.word	0x0800ceb9
 800ce50:	0800d02d 	.word	0x0800d02d
 800ce54:	0800d02d 	.word	0x0800d02d
 800ce58:	0800d02d 	.word	0x0800d02d
 800ce5c:	0800d02d 	.word	0x0800d02d
 800ce60:	0800d02d 	.word	0x0800d02d
 800ce64:	0800d02d 	.word	0x0800d02d
 800ce68:	0800d02d 	.word	0x0800d02d
 800ce6c:	0800d02d 	.word	0x0800d02d
 800ce70:	0800d02d 	.word	0x0800d02d
 800ce74:	0800d02d 	.word	0x0800d02d
 800ce78:	0800d02d 	.word	0x0800d02d
 800ce7c:	0800d02d 	.word	0x0800d02d
 800ce80:	0800d02d 	.word	0x0800d02d
 800ce84:	0800cf15 	.word	0x0800cf15
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800ce90:	69ba      	ldr	r2, [r7, #24]
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	615a      	str	r2, [r3, #20]
                    break;
 800ce96:	e0ce      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea4:	619a      	str	r2, [r3, #24]
                    break;
 800cea6:	e0c6      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	3301      	adds	r3, #1
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb4:	61da      	str	r2, [r3, #28]
                    break;
 800ceb6:	e0be      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	3301      	adds	r3, #1
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 800cec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	429a      	cmp	r2, r3
 800ced0:	f040 80ae 	bne.w	800d030 <CO_LSSslave_receive+0x2ac>
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	689a      	ldr	r2, [r3, #8]
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	429a      	cmp	r2, r3
 800cede:	f040 80a7 	bne.w	800d030 <CO_LSSslave_receive+0x2ac>
 800cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	f040 80a0 	bne.w	800d030 <CO_LSSslave_receive+0x2ac>
 800cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	f040 8099 	bne.w	800d030 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800cefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf00:	2201      	movs	r2, #1
 800cf02:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 800cf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf06:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800cf0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 800cf12:	e08d      	b.n	800d030 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800cf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2bff      	cmp	r3, #255	; 0xff
 800cf1c:	f040 808a 	bne.w	800d034 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800cf20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf26:	2bff      	cmp	r3, #255	; 0xff
 800cf28:	f040 8084 	bne.w	800d034 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	3305      	adds	r3, #5
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	3306      	adds	r3, #6
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	3307      	adds	r3, #7
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 800cf4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cf4e:	2b1f      	cmp	r3, #31
 800cf50:	d903      	bls.n	800cf5a <CO_LSSslave_receive+0x1d6>
 800cf52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cf56:	2b80      	cmp	r3, #128	; 0x80
 800cf58:	d16d      	bne.n	800d036 <CO_LSSslave_receive+0x2b2>
 800cf5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	d869      	bhi.n	800d036 <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800cf62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d865      	bhi.n	800d036 <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 800cf76:	2300      	movs	r3, #0
 800cf78:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800cf7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cf7e:	2b80      	cmp	r3, #128	; 0x80
 800cf80:	d10d      	bne.n	800cf9e <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 800cf82:	2301      	movs	r3, #1
 800cf84:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 800cf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf90:	3324      	adds	r3, #36	; 0x24
 800cf92:	2210      	movs	r2, #16
 800cf94:	2100      	movs	r1, #0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f012 f964 	bl	801f264 <memset>
 800cf9c:	e02c      	b.n	800cff8 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfa4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d125      	bne.n	800cff8 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 800cfac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb8:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 800cfba:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800cfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	405a      	eors	r2, r3
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d113      	bne.n	800cff8 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cfda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 800cfde:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d108      	bne.n	800cff8 <CO_LSSslave_receive+0x274>
 800cfe6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cfea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d202      	bcs.n	800cff8 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	2201      	movs	r2, #1
 800cff6:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 800cff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d01a      	beq.n	800d034 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 800d008:	2301      	movs	r3, #1
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 800d00c:	e012      	b.n	800d034 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 800d00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d010:	3349      	adds	r3, #73	; 0x49
 800d012:	2208      	movs	r2, #8
 800d014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d016:	4618      	mov	r0, r3
 800d018:	f012 f9c0 	bl	801f39c <memcpy>
            LSSslave->service = cs;
 800d01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 800d026:	2301      	movs	r3, #1
 800d028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02a:	e004      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                    break;
 800d02c:	bf00      	nop
 800d02e:	e002      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                    break;
 800d030:	bf00      	nop
 800d032:	e000      	b.n	800d036 <CO_LSSslave_receive+0x2b2>
                    break;
 800d034:	bf00      	nop
        }

        if (request_LSSslave_process) {
 800d036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 800d03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03e:	2201      	movs	r2, #1
 800d040:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 800d042:	bf00      	nop
 800d044:	3740      	adds	r7, #64	; 0x40
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop

0800d04c <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08a      	sub	sp, #40	; 0x28
 800d050:	af04      	add	r7, sp, #16
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800d05a:	2300      	movs	r3, #0
 800d05c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d018      	beq.n	800d096 <CO_LSSslave_init+0x4a>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d015      	beq.n	800d096 <CO_LSSslave_init+0x4a>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d012      	beq.n	800d096 <CO_LSSslave_init+0x4a>
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00f      	beq.n	800d096 <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00c      	beq.n	800d096 <CO_LSSslave_init+0x4a>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d004      	beq.n	800d08e <CO_LSSslave_init+0x42>
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	b25b      	sxtb	r3, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	da06      	bge.n	800d09c <CO_LSSslave_init+0x50>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2bff      	cmp	r3, #255	; 0xff
 800d094:	d002      	beq.n	800d09c <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800d096:	f04f 33ff 	mov.w	r3, #4294967295
 800d09a:	e046      	b.n	800d12a <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800d09c:	2274      	movs	r2, #116	; 0x74
 800d09e:	2100      	movs	r1, #0
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f012 f8df 	bl	801f264 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2210      	movs	r2, #16
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f012 f975 	bl	801f39c <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781a      	ldrb	r2, [r3, #0]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 800d0dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d0de:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d0e0:	4b14      	ldr	r3, [pc, #80]	; (800d134 <CO_LSSslave_init+0xe8>)
 800d0e2:	9302      	str	r3, [sp, #8]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d0f0:	6a38      	ldr	r0, [r7, #32]
 800d0f2:	f005 fc09 	bl	8012908 <CO_CANrxBufferInit>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0fe:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 800d100:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d102:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800d104:	2300      	movs	r3, #0
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	2308      	movs	r3, #8
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	2300      	movs	r3, #0
 800d10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d110:	f005 fc58 	bl	80129c4 <CO_CANtxBufferInit>
 800d114:	4602      	mov	r2, r0
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800d122:	23ff      	movs	r3, #255	; 0xff
 800d124:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800d126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	0800cd85 	.word	0x0800cd85

0800d138 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08c      	sub	sp, #48	; 0x30
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 800d140:	2300      	movs	r3, #0
 800d142:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 8203 	beq.w	800d554 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800d14e:	2300      	movs	r3, #0
 800d150:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d156:	3305      	adds	r3, #5
 800d158:	2208      	movs	r2, #8
 800d15a:	2100      	movs	r1, #0
 800d15c:	4618      	mov	r0, r3
 800d15e:	f012 f881 	bl	801f264 <memset>

        switch (LSSslave->service) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d168:	3b04      	subs	r3, #4
 800d16a:	2b5a      	cmp	r3, #90	; 0x5a
 800d16c:	f200 81dd 	bhi.w	800d52a <CO_LSSslave_process+0x3f2>
 800d170:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <CO_LSSslave_process+0x40>)
 800d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d176:	bf00      	nop
 800d178:	0800d2e5 	.word	0x0800d2e5
 800d17c:	0800d52b 	.word	0x0800d52b
 800d180:	0800d52b 	.word	0x0800d52b
 800d184:	0800d52b 	.word	0x0800d52b
 800d188:	0800d52b 	.word	0x0800d52b
 800d18c:	0800d52b 	.word	0x0800d52b
 800d190:	0800d52b 	.word	0x0800d52b
 800d194:	0800d52b 	.word	0x0800d52b
 800d198:	0800d52b 	.word	0x0800d52b
 800d19c:	0800d52b 	.word	0x0800d52b
 800d1a0:	0800d52b 	.word	0x0800d52b
 800d1a4:	0800d52b 	.word	0x0800d52b
 800d1a8:	0800d52b 	.word	0x0800d52b
 800d1ac:	0800d2f9 	.word	0x0800d2f9
 800d1b0:	0800d52b 	.word	0x0800d52b
 800d1b4:	0800d347 	.word	0x0800d347
 800d1b8:	0800d52b 	.word	0x0800d52b
 800d1bc:	0800d3e3 	.word	0x0800d3e3
 800d1c0:	0800d52b 	.word	0x0800d52b
 800d1c4:	0800d421 	.word	0x0800d421
 800d1c8:	0800d52b 	.word	0x0800d52b
 800d1cc:	0800d52b 	.word	0x0800d52b
 800d1d0:	0800d52b 	.word	0x0800d52b
 800d1d4:	0800d52b 	.word	0x0800d52b
 800d1d8:	0800d52b 	.word	0x0800d52b
 800d1dc:	0800d52b 	.word	0x0800d52b
 800d1e0:	0800d52b 	.word	0x0800d52b
 800d1e4:	0800d52b 	.word	0x0800d52b
 800d1e8:	0800d52b 	.word	0x0800d52b
 800d1ec:	0800d52b 	.word	0x0800d52b
 800d1f0:	0800d52b 	.word	0x0800d52b
 800d1f4:	0800d52b 	.word	0x0800d52b
 800d1f8:	0800d52b 	.word	0x0800d52b
 800d1fc:	0800d52b 	.word	0x0800d52b
 800d200:	0800d52b 	.word	0x0800d52b
 800d204:	0800d52b 	.word	0x0800d52b
 800d208:	0800d52b 	.word	0x0800d52b
 800d20c:	0800d52b 	.word	0x0800d52b
 800d210:	0800d52b 	.word	0x0800d52b
 800d214:	0800d52b 	.word	0x0800d52b
 800d218:	0800d52b 	.word	0x0800d52b
 800d21c:	0800d52b 	.word	0x0800d52b
 800d220:	0800d52b 	.word	0x0800d52b
 800d224:	0800d52b 	.word	0x0800d52b
 800d228:	0800d52b 	.word	0x0800d52b
 800d22c:	0800d52b 	.word	0x0800d52b
 800d230:	0800d52b 	.word	0x0800d52b
 800d234:	0800d52b 	.word	0x0800d52b
 800d238:	0800d52b 	.word	0x0800d52b
 800d23c:	0800d52b 	.word	0x0800d52b
 800d240:	0800d52b 	.word	0x0800d52b
 800d244:	0800d52b 	.word	0x0800d52b
 800d248:	0800d52b 	.word	0x0800d52b
 800d24c:	0800d52b 	.word	0x0800d52b
 800d250:	0800d52b 	.word	0x0800d52b
 800d254:	0800d52b 	.word	0x0800d52b
 800d258:	0800d52b 	.word	0x0800d52b
 800d25c:	0800d52b 	.word	0x0800d52b
 800d260:	0800d52b 	.word	0x0800d52b
 800d264:	0800d52b 	.word	0x0800d52b
 800d268:	0800d52b 	.word	0x0800d52b
 800d26c:	0800d52b 	.word	0x0800d52b
 800d270:	0800d52b 	.word	0x0800d52b
 800d274:	0800d2eb 	.word	0x0800d2eb
 800d278:	0800d52b 	.word	0x0800d52b
 800d27c:	0800d52b 	.word	0x0800d52b
 800d280:	0800d52b 	.word	0x0800d52b
 800d284:	0800d52b 	.word	0x0800d52b
 800d288:	0800d52b 	.word	0x0800d52b
 800d28c:	0800d52b 	.word	0x0800d52b
 800d290:	0800d52b 	.word	0x0800d52b
 800d294:	0800d52b 	.word	0x0800d52b
 800d298:	0800d52b 	.word	0x0800d52b
 800d29c:	0800d52b 	.word	0x0800d52b
 800d2a0:	0800d52b 	.word	0x0800d52b
 800d2a4:	0800d52b 	.word	0x0800d52b
 800d2a8:	0800d52b 	.word	0x0800d52b
 800d2ac:	0800d51d 	.word	0x0800d51d
 800d2b0:	0800d52b 	.word	0x0800d52b
 800d2b4:	0800d52b 	.word	0x0800d52b
 800d2b8:	0800d52b 	.word	0x0800d52b
 800d2bc:	0800d52b 	.word	0x0800d52b
 800d2c0:	0800d52b 	.word	0x0800d52b
 800d2c4:	0800d52b 	.word	0x0800d52b
 800d2c8:	0800d52b 	.word	0x0800d52b
 800d2cc:	0800d52b 	.word	0x0800d52b
 800d2d0:	0800d477 	.word	0x0800d477
 800d2d4:	0800d499 	.word	0x0800d499
 800d2d8:	0800d4bb 	.word	0x0800d4bb
 800d2dc:	0800d4dd 	.word	0x0800d4dd
 800d2e0:	0800d4ff 	.word	0x0800d4ff
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d2e8:	e126      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ee:	2244      	movs	r2, #68	; 0x44
 800d2f0:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d2f6:	e11f      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d2fe:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 800d306:	7cfb      	ldrb	r3, [r7, #19]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <CO_LSSslave_process+0x1dc>
 800d30c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d310:	2b00      	cmp	r3, #0
 800d312:	da02      	bge.n	800d31a <CO_LSSslave_process+0x1e2>
 800d314:	7cfb      	ldrb	r3, [r7, #19]
 800d316:	2bff      	cmp	r3, #255	; 0xff
 800d318:	d104      	bne.n	800d324 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31e:	7cfa      	ldrb	r2, [r7, #19]
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	e002      	b.n	800d32a <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 800d324:	2301      	movs	r3, #1
 800d326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d334:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d33e:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800d340:	2301      	movs	r3, #1
 800d342:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d344:	e0f8      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80ef 	beq.w	800d52e <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d356:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d35e:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 800d360:	2300      	movs	r3, #0
 800d362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d36c:	7f7b      	ldrb	r3, [r7, #29]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d121      	bne.n	800d3b6 <CO_LSSslave_process+0x27e>
 800d372:	7f3b      	ldrb	r3, [r7, #28]
 800d374:	2b05      	cmp	r3, #5
 800d376:	d01e      	beq.n	800d3b6 <CO_LSSslave_process+0x27e>
 800d378:	7f3b      	ldrb	r3, [r7, #28]
 800d37a:	2b09      	cmp	r3, #9
 800d37c:	d81b      	bhi.n	800d3b6 <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 800d37e:	7f3b      	ldrb	r3, [r7, #28]
 800d380:	4a77      	ldr	r2, [pc, #476]	; (800d560 <CO_LSSslave_process+0x428>)
 800d382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d386:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d390:	8b79      	ldrh	r1, [r7, #26]
 800d392:	4610      	mov	r0, r2
 800d394:	4798      	blx	r3
 800d396:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d004      	beq.n	800d3a8 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	8b7a      	ldrh	r2, [r7, #26]
 800d3a4:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d3a6:	e009      	b.n	800d3bc <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800d3a8:	23ff      	movs	r3, #255	; 0xff
 800d3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d3b4:	e002      	b.n	800d3bc <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d3c6:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d3d0:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800d3da:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d3e0:	e0aa      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f000 80a3 	beq.w	800d532 <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80a0 	beq.w	800d536 <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d408:	b29a      	uxth	r2, r3
 800d40a:	8bfb      	ldrh	r3, [r7, #30]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800d418:	8bf9      	ldrh	r1, [r7, #30]
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
                }
                break;
 800d41e:	e08a      	b.n	800d536 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d103      	bne.n	800d436 <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d434:	e011      	b.n	800d45a <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d442:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800d448:	8812      	ldrh	r2, [r2, #0]
 800d44a:	4798      	blx	r3
 800d44c:	6238      	str	r0, [r7, #32]
                    if (!result) {
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d102      	bne.n	800d45a <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 800d454:	2302      	movs	r3, #2
 800d456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d464:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d46e:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800d470:	2301      	movs	r3, #1
 800d472:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d474:	e060      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d480:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48c:	3306      	adds	r3, #6
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d492:	2301      	movs	r3, #1
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d496:	e04f      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d4a2:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ae:	3306      	adds	r3, #6
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d4b8:	e03e      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d4c4:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d0:	3306      	adds	r3, #6
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d4da:	e02d      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d4e6:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f2:	3306      	adds	r3, #6
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d4fc:	e01c      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d508:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800d514:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 800d516:	2301      	movs	r3, #1
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d51a:	e00d      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d520:	224f      	movs	r2, #79	; 0x4f
 800d522:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800d524:	2301      	movs	r3, #1
 800d526:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d528:	e006      	b.n	800d538 <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 800d52a:	bf00      	nop
 800d52c:	e004      	b.n	800d538 <CO_LSSslave_process+0x400>
                    break;
 800d52e:	bf00      	nop
 800d530:	e002      	b.n	800d538 <CO_LSSslave_process+0x400>
                    break;
 800d532:	bf00      	nop
 800d534:	e000      	b.n	800d538 <CO_LSSslave_process+0x400>
                break;
 800d536:	bf00      	nop
            }
        }

        if (CANsend) {
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d546:	4619      	mov	r1, r3
 800d548:	4610      	mov	r0, r2
 800d54a:	f005 fab5 	bl	8012ab8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d556:	4618      	mov	r0, r3
 800d558:	3730      	adds	r7, #48	; 0x30
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	080220d0 	.word	0x080220d0

0800d564 <CO_fifo_reset>:
CO_fifo_reset(CO_fifo_t* fifo) {
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <CO_fifo_reset+0x22>
        fifo->readPtr = 0;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	609a      	str	r2, [r3, #8]
        fifo->started = false;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	615a      	str	r2, [r3, #20]
    return;
 800d584:	bf00      	nop
 800d586:	bf00      	nop
}
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <CO_fifo_purge>:
CO_fifo_purge(CO_fifo_t* fifo) {
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
    if (fifo != NULL && fifo->readPtr != fifo->writePtr) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00d      	beq.n	800d5bc <CO_fifo_purge+0x2a>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68da      	ldr	r2, [r3, #12]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d007      	beq.n	800d5bc <CO_fifo_purge+0x2a>
        fifo->readPtr = 0;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	609a      	str	r2, [r3, #8]
        return true;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <CO_fifo_purge+0x2c>
    return false;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <CO_fifo_getOccupied>:
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 800d5ca:	b480      	push	{r7}
 800d5cc:	b085      	sub	sp, #20
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	da05      	bge.n	800d5f2 <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeOccupied;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <CO_GTWA_init>:
             CO_LSSmaster_t* LSSmaster,
#endif
#if (((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0) || defined CO_DOXYGEN
             CO_LEDs_t* LEDs,
#endif
             uint8_t dummy) {
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	4613      	mov	r3, r2
 800d60e:	80fb      	strh	r3, [r7, #6]
    (void)dummy;
    /* verify arguments */
    if ((gtwa == NULL)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00e      	beq.n	800d634 <CO_GTWA_init+0x34>
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        || (SDO_C == NULL) || (SDOclientTimeoutTime_ms == 0U)
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <CO_GTWA_init+0x34>
 800d61c:	88fb      	ldrh	r3, [r7, #6]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d008      	beq.n	800d634 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        || (NMT == NULL)
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d005      	beq.n	800d634 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        || (LSSmaster == NULL)
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        || (LEDs == NULL)
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <CO_GTWA_init+0x3a>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295
 800d638:	e037      	b.n	800d6aa <CO_GTWA_init+0xaa>
    }

    /* clear the object */
    (void)memset(gtwa, 0, sizeof(CO_GTWA_t));
 800d63a:	f44f 7215 	mov.w	r2, #596	; 0x254
 800d63e:	2100      	movs	r1, #0
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f011 fe0f 	bl	801f264 <memset>

    /* initialize variables */
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
    gtwa->SDO_C = SDO_C;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    gtwa->SDOtimeoutTime = SDOclientTimeoutTime_ms;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	88fa      	ldrh	r2, [r7, #6]
 800d652:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
    gtwa->SDOblockTransferEnable = SDOclientBlockTransfer;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
    gtwa->NMT = NMT;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
    gtwa->LSSmaster = LSSmaster;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	69fa      	ldr	r2, [r7, #28]
 800d66a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
    gtwa->LEDs = LEDs;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6a3a      	ldr	r2, [r7, #32]
 800d672:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
#endif
    gtwa->net_default = -1;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f04f 32ff 	mov.w	r2, #4294967295
 800d67c:	60da      	str	r2, [r3, #12]
    gtwa->node_default = -1;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d684:	821a      	strh	r2, [r3, #16]
    gtwa->state = CO_GTWA_ST_IDLE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
    gtwa->respHold = false;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

    CO_fifo_init(&gtwa->commFifo, &gtwa->commBuf[0], CO_CONFIG_GTWA_COMM_BUF_SIZE + 1);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f103 0018 	add.w	r0, r3, #24
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3334      	adds	r3, #52	; 0x34
 800d6a0:	22c9      	movs	r2, #201	; 0xc9
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f7fc f97e 	bl	80099a4 <CO_fifo_init>

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LOG) != 0
    CO_fifo_init(&gtwa->logFifo, &gtwa->logBuf[0], CO_CONFIG_GTWA_LOG_BUF_SIZE + 1);
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG) */

    return CO_ERROR_NO;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <getU32>:
    "                                   \r"};
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

/* Get uint32 number from token, verify limits and set *err if necessary */
static inline uint32_t
getU32(char* token, uint32_t min, uint32_t max, bool_t* err) {
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b086      	sub	sp, #24
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	607a      	str	r2, [r7, #4]
 800d6be:	603b      	str	r3, [r7, #0]
    char* sRet;
    uint32_t num = strtoul(token, &sRet, 0);
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f011 f95d 	bl	801e988 <strtoul>
 800d6ce:	6178      	str	r0, [r7, #20]

    if ((sRet != strchr(token, (int32_t)'\0')) || (num < min) || (num > max)) {
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7f2 fddd 	bl	8000290 <strlen>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	461a      	mov	r2, r3
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	441a      	add	r2, r3
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d107      	bne.n	800d6f4 <getU32+0x42>
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d303      	bcc.n	800d6f4 <getU32+0x42>
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d902      	bls.n	800d6fa <getU32+0x48>
        *err = true;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]
    }

    return num;
 800d6fa:	697b      	ldr	r3, [r7, #20]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <checkNetNode>:

/* Verify net and node, return true on error */
static bool_t
checkNetNode(CO_GTWA_t* gtwa, int32_t net, int16_t node, uint8_t NodeMin, CO_GTWA_respErrorCode_t* errCode) {
 800d704:	b480      	push	{r7}
 800d706:	b087      	sub	sp, #28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	4611      	mov	r1, r2
 800d710:	461a      	mov	r2, r3
 800d712:	460b      	mov	r3, r1
 800d714:	80fb      	strh	r3, [r7, #6]
 800d716:	4613      	mov	r3, r2
 800d718:	717b      	strb	r3, [r7, #5]
    bool_t e = false;
 800d71a:	2300      	movs	r3, #0
 800d71c:	617b      	str	r3, [r7, #20]
    CO_GTWA_respErrorCode_t eCode;

    if (node == -1) {
 800d71e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d104      	bne.n	800d732 <checkNetNode+0x2e>
        eCode = CO_GTWA_respErrorNoDefaultNodeSet;
 800d728:	2369      	movs	r3, #105	; 0x69
 800d72a:	827b      	strh	r3, [r7, #18]
        e = true;
 800d72c:	2301      	movs	r3, #1
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e015      	b.n	800d75e <checkNetNode+0x5a>
    } else if ((node < (int16_t)NodeMin) || (node > (int16_t)127)) {
 800d732:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d736:	797b      	ldrb	r3, [r7, #5]
 800d738:	429a      	cmp	r2, r3
 800d73a:	db03      	blt.n	800d744 <checkNetNode+0x40>
 800d73c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d740:	2b7f      	cmp	r3, #127	; 0x7f
 800d742:	dd04      	ble.n	800d74e <checkNetNode+0x4a>
        eCode = CO_GTWA_respErrorUnsupportedNode;
 800d744:	236b      	movs	r3, #107	; 0x6b
 800d746:	827b      	strh	r3, [r7, #18]
        e = true;
 800d748:	2301      	movs	r3, #1
 800d74a:	617b      	str	r3, [r7, #20]
 800d74c:	e007      	b.n	800d75e <checkNetNode+0x5a>
        eCode = CO_GTWA_respErrorUnsupportedNet;
        e = true;
    }
#endif
    else {
        gtwa->net = (uint16_t)net;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	b29a      	uxth	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	825a      	strh	r2, [r3, #18]
        gtwa->node = (uint8_t)node;
 800d756:	88fb      	ldrh	r3, [r7, #6]
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	751a      	strb	r2, [r3, #20]
    }
    if (e) {
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <checkNetNode+0x66>
        *errCode = eCode;
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	8a7a      	ldrh	r2, [r7, #18]
 800d768:	801a      	strh	r2, [r3, #0]
    }
    return e;
 800d76a:	697b      	ldr	r3, [r7, #20]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	371c      	adds	r7, #28
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <checkNet>:

/* Verify net, return true on error */
static bool_t
checkNet(CO_GTWA_t* gtwa, int32_t net, CO_GTWA_respErrorCode_t* errCode) {
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
    return e;
#else
    (void)errCode; /* unused */
#define CO_CONFIG_GTW_NET_MIN 0
#define CO_CONFIG_GTW_NET_MAX 0xFFFF
    gtwa->net = (uint16_t)net;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	825a      	strh	r2, [r3, #18]
    return false;
 800d78c:	2300      	movs	r3, #0
#endif
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3714      	adds	r7, #20
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <CO_GTWA_getDataType>:
};

/* get data type from token */
static const CO_GTWA_dataType_t*
CO_GTWA_getDataType(char* token, bool_t* err)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
    if ((token != NULL) && (*err == false))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01f      	beq.n	800d7ec <CO_GTWA_getDataType+0x50>
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d11b      	bne.n	800d7ec <CO_GTWA_getDataType+0x50>
    {
        uint32_t i;
        uint32_t len = sizeof(dataTypes) / sizeof(CO_GTWA_dataType_t);
 800d7b4:	2314      	movs	r3, #20
 800d7b6:	613b      	str	r3, [r7, #16]

        for (i = 0; i < len; i++)
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]
 800d7bc:	e012      	b.n	800d7e4 <CO_GTWA_getDataType+0x48>
        {
        const CO_GTWA_dataType_t* dt = &dataTypes[i];
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	4a0e      	ldr	r2, [pc, #56]	; (800d7fc <CO_GTWA_getDataType+0x60>)
 800d7c4:	4413      	add	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
        if (strcmp(token, dt->syntax) == 0) {return dt;}
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7f2 fcfe 	bl	80001d0 <strcmp>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <CO_GTWA_getDataType+0x42>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	e00a      	b.n	800d7f4 <CO_GTWA_getDataType+0x58>
        for (i = 0; i < len; i++)
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	617b      	str	r3, [r7, #20]
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d3e8      	bcc.n	800d7be <CO_GTWA_getDataType+0x22>
        }
    }
    *err = true;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
    return NULL;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	08022e4c 	.word	0x08022e4c

0800d800 <respBufTransfer>:


/* transfer response buffer and verify if all bytes was read. Return true on
 * success, or false, if communication is broken. */
static bool_t
respBufTransfer(CO_GTWA_t* gtwa) {
 800d800:	b590      	push	{r4, r7, lr}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
    uint8_t connectionOK = 1;
 800d808:	2301      	movs	r3, #1
 800d80a:	72fb      	strb	r3, [r7, #11]

    if (gtwa->readCallback == NULL) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10c      	bne.n	800d82e <respBufTransfer+0x2e>
        /* no callback registered, just purge the response */
        gtwa->respBufOffset = 0;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
        gtwa->respBufCount = 0;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
        gtwa->respHold = false;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800d82c:	e038      	b.n	800d8a0 <respBufTransfer+0xa0>
    } else {
        /* transfer response to the application */
        size_t countRead = gtwa->readCallback(gtwa->readCallbackObject,
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681c      	ldr	r4, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6858      	ldr	r0, [r3, #4]
                                              (const char*)&gtwa->respBuf[gtwa->respBufOffset], gtwa->respBufCount,
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d83c:	33f8      	adds	r3, #248	; 0xf8
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4413      	add	r3, r2
 800d842:	1d59      	adds	r1, r3, #5
        size_t countRead = gtwa->readCallback(gtwa->readCallbackObject,
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800d84a:	f107 030b 	add.w	r3, r7, #11
 800d84e:	47a0      	blx	r4
 800d850:	60f8      	str	r0, [r7, #12]
                                              &connectionOK);

        if (countRead < gtwa->respBufCount) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d214      	bcs.n	800d888 <respBufTransfer+0x88>
            gtwa->respBufOffset += countRead;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	441a      	add	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            gtwa->respBufCount -= countRead;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	1ad2      	subs	r2, r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            gtwa->respHold = true;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800d886:	e00b      	b.n	800d8a0 <respBufTransfer+0xa0>
        } else {
            gtwa->respBufOffset = 0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            gtwa->respBufCount = 0;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            gtwa->respHold = false;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        }
    }
    return connectionOK != 0U;
 800d8a0:	7afb      	ldrb	r3, [r7, #11]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bf14      	ite	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	2300      	moveq	r3, #0
 800d8aa:	b2db      	uxtb	r3, r3
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd90      	pop	{r4, r7, pc}

0800d8b4 <responseWithError>:
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
#endif /* CO_CONFIG_GTW_ASCII_ERROR_DESC_STRINGS */

static void
responseWithError(CO_GTWA_t* gtwa, CO_GTWA_respErrorCode_t respErrorCode)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af02      	add	r7, sp, #8
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	807b      	strh	r3, [r7, #2]
    uint32_t i;
    uint32_t len = sizeof(errorDescs) / sizeof(errorDescs_t);
 800d8c0:	231b      	movs	r3, #27
 800d8c2:	60fb      	str	r3, [r7, #12]
    const char* desc = "-";
 800d8c4:	4b1a      	ldr	r3, [pc, #104]	; (800d930 <responseWithError+0x7c>)
 800d8c6:	613b      	str	r3, [r7, #16]

    for (i = 0; i < len; i++)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	617b      	str	r3, [r7, #20]
 800d8cc:	e010      	b.n	800d8f0 <responseWithError+0x3c>
    {
        const errorDescs_t* ed = &errorDescs[i];
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	4a18      	ldr	r2, [pc, #96]	; (800d934 <responseWithError+0x80>)
 800d8d4:	4413      	add	r3, r2
 800d8d6:	60bb      	str	r3, [r7, #8]
        if ((CO_GTWA_respErrorCode_t)ed->code == respErrorCode) { desc = ed->desc;}
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	887a      	ldrh	r2, [r7, #2]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d102      	bne.n	800d8ea <responseWithError+0x36>
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d3ea      	bcc.n	800d8ce <responseWithError+0x1a>

    }

    gtwa->respBufCount = (size_t)snprintf (	gtwa->respBuf,
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
    										CO_GTWA_RESP_BUF_SIZE,
											"[%" PRId32 "] ERROR:%d #%s\r\n",
                                          (int32_t)gtwa->sequence,
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	689b      	ldr	r3, [r3, #8]
    gtwa->respBufCount = (size_t)snprintf (	gtwa->respBuf,
 800d902:	4619      	mov	r1, r3
 800d904:	887b      	ldrh	r3, [r7, #2]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	9201      	str	r2, [sp, #4]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	460b      	mov	r3, r1
 800d90e:	4a0a      	ldr	r2, [pc, #40]	; (800d938 <responseWithError+0x84>)
 800d910:	21c8      	movs	r1, #200	; 0xc8
 800d912:	f011 fb61 	bl	801efd8 <sniprintf>
 800d916:	4603      	mov	r3, r0
 800d918:	461a      	mov	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
										  (int32_t)respErrorCode,
										  desc);
    (void)respBufTransfer(gtwa);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7ff ff6d 	bl	800d800 <respBufTransfer>
}
 800d926:	bf00      	nop
 800d928:	3718      	adds	r7, #24
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	080218f8 	.word	0x080218f8
 800d934:	08022f8c 	.word	0x08022f8c
 800d938:	080218fc 	.word	0x080218fc

0800d93c <responseWithErrorSDO>:
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
static void
responseWithErrorSDO (	CO_GTWA_t* gtwa,
						CO_SDO_abortCode_t abortCode,
						bool_t postponed)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b08a      	sub	sp, #40	; 0x28
 800d940:	af02      	add	r7, sp, #8
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t len = sizeof(errorDescsSDO) / sizeof(errorDescs_t);
 800d948:	2320      	movs	r3, #32
 800d94a:	617b      	str	r3, [r7, #20]
    const char* desc = "-";
 800d94c:	4b23      	ldr	r3, [pc, #140]	; (800d9dc <responseWithErrorSDO+0xa0>)
 800d94e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < len; i++)
 800d950:	2300      	movs	r3, #0
 800d952:	61fb      	str	r3, [r7, #28]
 800d954:	e00f      	b.n	800d976 <responseWithErrorSDO+0x3a>
    {
      const errorDescs_t* ed = &errorDescsSDO[i];
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	4a21      	ldr	r2, [pc, #132]	; (800d9e0 <responseWithErrorSDO+0xa4>)
 800d95c:	4413      	add	r3, r2
 800d95e:	613b      	str	r3, [r7, #16]
      if ((CO_SDO_abortCode_t)ed->code == abortCode) { desc = ed->desc; }
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	429a      	cmp	r2, r3
 800d968:	d102      	bne.n	800d970 <responseWithErrorSDO+0x34>
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++)
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	3301      	adds	r3, #1
 800d974:	61fb      	str	r3, [r7, #28]
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d3eb      	bcc.n	800d956 <responseWithErrorSDO+0x1a>
    }

    if (!postponed)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d114      	bne.n	800d9ae <responseWithErrorSDO+0x72>
    {
        gtwa->respBufCount = (size_t)snprintf( gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                               "[%" PRId32 "] ERROR:0x%08X #%s\r\n",
											   (int32_t)gtwa->sequence,
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	689b      	ldr	r3, [r3, #8]
        gtwa->respBufCount = (size_t)snprintf( gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 800d98e:	461a      	mov	r2, r3
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	4613      	mov	r3, r2
 800d99a:	4a12      	ldr	r2, [pc, #72]	; (800d9e4 <responseWithErrorSDO+0xa8>)
 800d99c:	21c8      	movs	r1, #200	; 0xc8
 800d99e:	f011 fb1b 	bl	801efd8 <sniprintf>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800d9ac:	e00e      	b.n	800d9cc <responseWithErrorSDO+0x90>
                                               (uint32_t)abortCode,
											   desc);
    } else {
            gtwa->respBufCount = (size_t)snprintf ( gtwa->respBuf,
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	4a0b      	ldr	r2, [pc, #44]	; (800d9e8 <responseWithErrorSDO+0xac>)
 800d9bc:	21c8      	movs	r1, #200	; 0xc8
 800d9be:	f011 fb0b 	bl	801efd8 <sniprintf>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
													"\n...ERROR:0x%08X #%s\r\n",
													(uint32_t)abortCode,
													desc);
    	   }

    (void)respBufTransfer(gtwa);
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff ff17 	bl	800d800 <respBufTransfer>
}
 800d9d2:	bf00      	nop
 800d9d4:	3720      	adds	r7, #32
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	080218f8 	.word	0x080218f8
 800d9e0:	08023064 	.word	0x08023064
 800d9e4:	08021914 	.word	0x08021914
 800d9e8:	08021930 	.word	0x08021930

0800d9ec <responseWithOK>:
}
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_ERROR_DESC */

static inline void
responseWithOK(CO_GTWA_t* gtwa) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "[%" PRId32 "] OK\r\n",
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                          (int32_t)gtwa->sequence);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	689b      	ldr	r3, [r3, #8]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "[%" PRId32 "] OK\r\n",
 800d9fe:	4a08      	ldr	r2, [pc, #32]	; (800da20 <responseWithOK+0x34>)
 800da00:	21c8      	movs	r1, #200	; 0xc8
 800da02:	f011 fae9 	bl	801efd8 <sniprintf>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    (void)respBufTransfer(gtwa);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff fef5 	bl	800d800 <respBufTransfer>
}
 800da16:	bf00      	nop
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	08021948 	.word	0x08021948

0800da24 <responseWithEmpty>:

static inline void
responseWithEmpty(CO_GTWA_t* gtwa) {
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "\r\n");
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	33fd      	adds	r3, #253	; 0xfd
 800da30:	4a08      	ldr	r2, [pc, #32]	; (800da54 <responseWithEmpty+0x30>)
 800da32:	21c8      	movs	r1, #200	; 0xc8
 800da34:	4618      	mov	r0, r3
 800da36:	f011 facf 	bl	801efd8 <sniprintf>
 800da3a:	4603      	mov	r3, r0
 800da3c:	461a      	mov	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    (void)respBufTransfer(gtwa);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff fedb 	bl	800d800 <respBufTransfer>
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	08021954 	.word	0x08021954

0800da58 <responseLSS>:

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
static void
responseLSS(CO_GTWA_t* gtwa, CO_LSSmaster_return_t lss_ret) {
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	70fb      	strb	r3, [r7, #3]
    if (lss_ret == CO_LSSmaster_OK) {
 800da64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d103      	bne.n	800da74 <responseLSS+0x1c>
        responseWithOK(gtwa);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ffbd 	bl	800d9ec <responseWithOK>
        } else {
            respErrorCode = CO_GTWA_respErrorInternalState;
        }
        responseWithError(gtwa, respErrorCode);
    }
}
 800da72:	e01c      	b.n	800daae <responseLSS+0x56>
        if ((lss_ret == CO_LSSmaster_TIMEOUT) || (lss_ret == CO_LSSmaster_SCAN_NOACK)) {
 800da74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7c:	d004      	beq.n	800da88 <responseLSS+0x30>
 800da7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da82:	f113 0f04 	cmn.w	r3, #4
 800da86:	d102      	bne.n	800da8e <responseLSS+0x36>
            respErrorCode = CO_GTWA_respErrorTimeOut;
 800da88:	2367      	movs	r3, #103	; 0x67
 800da8a:	81fb      	strh	r3, [r7, #14]
 800da8c:	e00a      	b.n	800daa4 <responseLSS+0x4c>
        } else if (lss_ret == CO_LSSmaster_OK_MANUFACTURER) {
 800da8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da92:	f113 0f66 	cmn.w	r3, #102	; 0x66
 800da96:	d103      	bne.n	800daa0 <responseLSS+0x48>
            respErrorCode = CO_GTWA_respErrorLSSmanufacturer;
 800da98:	f240 13f5 	movw	r3, #501	; 0x1f5
 800da9c:	81fb      	strh	r3, [r7, #14]
 800da9e:	e001      	b.n	800daa4 <responseLSS+0x4c>
            respErrorCode = CO_GTWA_respErrorInternalState;
 800daa0:	2366      	movs	r3, #102	; 0x66
 800daa2:	81fb      	strh	r3, [r7, #14]
        responseWithError(gtwa, respErrorCode);
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff ff03 	bl	800d8b4 <responseWithError>
}
 800daae:	bf00      	nop
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <convertToLower>:
#endif

static inline void
convertToLower(char* token, size_t maxCount) {
 800dab8:	b480      	push	{r7}
 800daba:	b087      	sub	sp, #28
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
    size_t i;
    char* c = &token[0];
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	613b      	str	r3, [r7, #16]

    for (i = 0; i < maxCount; i++) {
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	e01c      	b.n	800db06 <convertToLower+0x4e>
        if (*c == '\0') {
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01d      	beq.n	800db10 <convertToLower+0x58>
            break;
        } else {
            *c = (char)tolower((int32_t)*c);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	60fb      	str	r3, [r7, #12]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	4a10      	ldr	r2, [pc, #64]	; (800db20 <convertToLower+0x68>)
 800dae0:	4413      	add	r3, r2
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d102      	bne.n	800daf2 <convertToLower+0x3a>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3320      	adds	r3, #32
 800daf0:	e000      	b.n	800daf4 <convertToLower+0x3c>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	701a      	strb	r2, [r3, #0]
        }
        c++;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3301      	adds	r3, #1
 800dafe:	613b      	str	r3, [r7, #16]
    for (i = 0; i < maxCount; i++) {
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	3301      	adds	r3, #1
 800db04:	617b      	str	r3, [r7, #20]
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d3de      	bcc.n	800dacc <convertToLower+0x14>
    }
}
 800db0e:	e000      	b.n	800db12 <convertToLower+0x5a>
            break;
 800db10:	bf00      	nop
}
 800db12:	bf00      	nop
 800db14:	371c      	adds	r7, #28
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	08023c90 	.word	0x08023c90

0800db24 <CO_GTWA_process>:

/*******************************************************************************
 * PROCESS FUNCTION
 ******************************************************************************/
void
CO_GTWA_process(CO_GTWA_t* gtwa, bool_t enable, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800db24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db26:	b0f9      	sub	sp, #484	; 0x1e4
 800db28:	af06      	add	r7, sp, #24
 800db2a:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 800db2e:	f5a4 74de 	sub.w	r4, r4, #444	; 0x1bc
 800db32:	6020      	str	r0, [r4, #0]
 800db34:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 800db38:	f5a0 70e0 	sub.w	r0, r0, #448	; 0x1c0
 800db3c:	6001      	str	r1, [r0, #0]
 800db3e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 800db42:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 800db46:	600a      	str	r2, [r1, #0]
 800db48:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800db4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800db50:	6013      	str	r3, [r2, #0]
    (void)timerNext_us; /* may be unused */

    bool_t err = false; /* syntax or other error, true or false, I/O variable */
 800db52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800db5a:	2200      	movs	r2, #0
 800db5c:	601a      	str	r2, [r3, #0]
    uint8_t closed;     /* indication of command delimiter, I/O variable */
    CO_GTWA_respErrorCode_t respErrorCode = CO_GTWA_respErrorNone;
 800db5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800db66:	2200      	movs	r2, #0
 800db68:	801a      	strh	r2, [r3, #0]

    if (gtwa == NULL) {
 800db6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f003 84fb 	beq.w	8011570 <CO_GTWA_process+0x3a4c>
        return;
    }

    if (!enable) {
 800db7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db7e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d112      	bne.n	800dbae <CO_GTWA_process+0x8a>
        gtwa->state = CO_GTWA_ST_IDLE;
 800db88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
        CO_fifo_reset(&gtwa->commFifo);
 800db98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800db9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3318      	adds	r3, #24
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff fcdd 	bl	800d564 <CO_fifo_reset>
        return;
 800dbaa:	f003 bce4 	b.w	8011576 <CO_GTWA_process+0x3a52>
    }

    /* If there is some more output data for application, read them first. Hold on this state, if necessary. */
    if (gtwa->respHold) {
 800dbae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dbb2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f002 8181 	beq.w	800fec4 <CO_GTWA_process+0x23a0>
        timeDifference_us += gtwa->timeDifference_us_cumulative;
 800dbc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dbc6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800dbd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dbd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800dbd8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 800dbdc:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 800dbe0:	6809      	ldr	r1, [r1, #0]
 800dbe2:	440a      	add	r2, r1
 800dbe4:	601a      	str	r2, [r3, #0]

        (void)respBufTransfer(gtwa);
 800dbe6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dbea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	f7ff fe06 	bl	800d800 <respBufTransfer>
        if (gtwa->respHold) {
 800dbf4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dbf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00d      	beq.n	800dc22 <CO_GTWA_process+0xfe>
            gtwa->timeDifference_us_cumulative = timeDifference_us;
 800dc06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800dc14:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800dc18:	6812      	ldr	r2, [r2, #0]
 800dc1a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            return;
 800dc1e:	f003 bcaa 	b.w	8011576 <CO_GTWA_process+0x3a52>
        } else {
            gtwa->timeDifference_us_cumulative = 0;
 800dc22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    /***************************************************************************
     * COMMAND PARSER
     ***************************************************************************/
    /* if idle, search for new command, skip comments or empty lines */
    while (CO_fifo_CommSearch(&gtwa->commFifo, false) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 800dc32:	f002 b947 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        char tok[20];
        size_t n;
        uint32_t ui[3];
        int32_t i;
        int32_t net = gtwa->net_default;
 800dc36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc3a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        int16_t node = gtwa->node_default;
 800dc46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc4a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	8a1b      	ldrh	r3, [r3, #16]
 800dc52:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be

        /* parse mandatory token '"["<sequence>"]"' */
        closed = 0xFFU;
 800dc56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc5a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800dc5e:	22ff      	movs	r2, #255	; 0xff
 800dc60:	701a      	strb	r2, [r3, #0]
        n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800dc62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc66:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f103 0018 	add.w	r0, r3, #24
 800dc70:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800dc74:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800dc78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	2214      	movs	r2, #20
 800dc82:	f7fc f903 	bl	8009e8c <CO_fifo_readToken>
 800dc86:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
        /* Break if error in token or token was found, but closed with command delimiter. */
        if (err || ((n > 0U) && (closed != 0U))) {
 800dc8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dc8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10a      	bne.n	800dcae <CO_GTWA_process+0x18a>
 800dc98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00e      	beq.n	800dcbe <CO_GTWA_process+0x19a>
 800dca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dca4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <CO_GTWA_process+0x19a>
            err = true;
 800dcae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcb2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	601a      	str	r2, [r3, #0]
            break;
 800dcba:	f002 b95a 	b.w	800ff72 <CO_GTWA_process+0x244e>
        }
        /* If empty line or just comment, continue with next command */
        else if ((n == 0U) && (closed != 0U)) {
 800dcbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10f      	bne.n	800dce6 <CO_GTWA_process+0x1c2>
 800dcc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcca:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d008      	beq.n	800dce6 <CO_GTWA_process+0x1c2>
            responseWithEmpty(gtwa);
 800dcd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	f7ff fea1 	bl	800da24 <responseWithEmpty>
 800dce2:	f002 b8ef 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            continue;
        } else { /* MISRA C 2004 14.10 */
        }

        if (tok[0] != '[') {
 800dce6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b5b      	cmp	r3, #91	; 0x5b
 800dcf2:	d007      	beq.n	800dd04 <CO_GTWA_process+0x1e0>
            err = true;
 800dcf4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcf8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]
            break;
 800dd00:	f002 b937 	b.w	800ff72 <CO_GTWA_process+0x244e>
        }
        if (tok[strlen(tok) - 1U] != ']') {
 800dd04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f2 fac1 	bl	8000290 <strlen>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	3b01      	subs	r3, #1
 800dd12:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800dd16:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800dd1a:	5cd3      	ldrb	r3, [r2, r3]
 800dd1c:	2b5d      	cmp	r3, #93	; 0x5d
 800dd1e:	d007      	beq.n	800dd30 <CO_GTWA_process+0x20c>
            err = true;
 800dd20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dd24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dd28:	2201      	movs	r2, #1
 800dd2a:	601a      	str	r2, [r3, #0]
            break;
 800dd2c:	f002 b921 	b.w	800ff72 <CO_GTWA_process+0x244e>
        }
        tok[strlen(tok) - 1U] = '\0';
 800dd30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f2 faab 	bl	8000290 <strlen>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800dd42:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800dd46:	2100      	movs	r1, #0
 800dd48:	54d1      	strb	r1, [r2, r3]
        gtwa->sequence = getU32(tok + 1, 0, 0xFFFFFFFFU, &err);
 800dd4a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800dd4e:	3001      	adds	r0, #1
 800dd50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd54:	f04f 32ff 	mov.w	r2, #4294967295
 800dd58:	2100      	movs	r1, #0
 800dd5a:	f7ff fcaa 	bl	800d6b2 <getU32>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dd64:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	609a      	str	r2, [r3, #8]
        if (err) {
 800dd6c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dd70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f042 80bc 	bne.w	800fef4 <CO_GTWA_process+0x23d0>
            break;
        }

        /* parse optional tokens '[[<net>] <node>]', both numerical. Then
         * follows mandatory token <command>, which is not numerical. */
        for (i = 0; i < 3; i++) {
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800dd82:	e064      	b.n	800de4e <CO_GTWA_process+0x32a>
            closed = 0xFFU;
 800dd84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dd88:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800dd8c:	22ff      	movs	r2, #255	; 0xff
 800dd8e:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800dd90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dd94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f103 0018 	add.w	r0, r3, #24
 800dd9e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800dda2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800dda6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	4613      	mov	r3, r2
 800ddae:	2214      	movs	r2, #20
 800ddb0:	f7fc f86c 	bl	8009e8c <CO_fifo_readToken>
 800ddb4:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            if (err || (n == 0U)) {
 800ddb8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ddbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d103      	bne.n	800ddce <CO_GTWA_process+0x2aa>
 800ddc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <CO_GTWA_process+0x2b8>
                /* empty token, break on error */
                err = true;
 800ddce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ddd2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	601a      	str	r2, [r3, #0]
                break;
 800ddda:	e040      	b.n	800de5e <CO_GTWA_process+0x33a>
            } else if ((int32_t)isdigit((int)tok[0]) == 0) {
 800dddc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dde0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	4aa1      	ldr	r2, [pc, #644]	; (800e070 <CO_GTWA_process+0x54c>)
 800ddea:	4413      	add	r3, r2
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 0304 	and.w	r3, r3, #4
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d030      	beq.n	800de58 <CO_GTWA_process+0x334>
                /* <command> found */
                break;
            } else if (closed != 0U) {
 800ddf6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ddfa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d006      	beq.n	800de12 <CO_GTWA_process+0x2ee>
                /* numerical value must not be closed */
                err = true;
 800de04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800de0c:	2201      	movs	r2, #1
 800de0e:	601a      	str	r2, [r3, #0]
                break;
 800de10:	e025      	b.n	800de5e <CO_GTWA_process+0x33a>
            } else { /* MISRA C 2004 14.10 */
            }

            ui[i] = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800de12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800de16:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800de1a:	f04f 32ff 	mov.w	r2, #4294967295
 800de1e:	2100      	movs	r1, #0
 800de20:	f7ff fc47 	bl	800d6b2 <getU32>
 800de24:	4601      	mov	r1, r0
 800de26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de2a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800de2e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800de32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (err) {
 800de36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de3a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10b      	bne.n	800de5c <CO_GTWA_process+0x338>
        for (i = 0; i < 3; i++) {
 800de44:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de48:	3301      	adds	r3, #1
 800de4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800de4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de52:	2b02      	cmp	r3, #2
 800de54:	dd96      	ble.n	800dd84 <CO_GTWA_process+0x260>
 800de56:	e002      	b.n	800de5e <CO_GTWA_process+0x33a>
                break;
 800de58:	bf00      	nop
 800de5a:	e000      	b.n	800de5e <CO_GTWA_process+0x33a>
                break;
 800de5c:	bf00      	nop
            }
        }
        if (err) {
 800de5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f042 8045 	bne.w	800fef8 <CO_GTWA_process+0x23d4>
            break;
        }

        switch (i) {
 800de6e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de72:	2b03      	cmp	r3, #3
 800de74:	d865      	bhi.n	800df42 <CO_GTWA_process+0x41e>
 800de76:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <CO_GTWA_process+0x358>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800df43 	.word	0x0800df43
 800de80:	0800de8d 	.word	0x0800de8d
 800de84:	0800dec5 	.word	0x0800dec5
 800de88:	0800df35 	.word	0x0800df35
            case 0: /* only <command> (pointed by token) */ break;
            case 1: /* <node> and <command> tokens */
                if (ui[0] > 127U) {
 800de8c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b7f      	cmp	r3, #127	; 0x7f
 800de98:	d90c      	bls.n	800deb4 <CO_GTWA_process+0x390>
                    err = true;
 800de9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800de9e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dea2:	2201      	movs	r2, #1
 800dea4:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
 800dea6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800deaa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800deae:	226b      	movs	r2, #107	; 0x6b
 800deb0:	801a      	strh	r2, [r3, #0]
                } else {
                    node = (int16_t)ui[0];
                }
                break;
 800deb2:	e047      	b.n	800df44 <CO_GTWA_process+0x420>
                    node = (int16_t)ui[0];
 800deb4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800deb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
                break;
 800dec2:	e03f      	b.n	800df44 <CO_GTWA_process+0x420>
            case 2: /* <net>, <node> and <command> tokens */
                if (ui[0] > 0xFFFFU) {
 800dec4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dec8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ded2:	d30c      	bcc.n	800deee <CO_GTWA_process+0x3ca>
                    err = true;
 800ded4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ded8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dedc:	2201      	movs	r2, #1
 800dede:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNet;
 800dee0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dee4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dee8:	226a      	movs	r2, #106	; 0x6a
 800deea:	801a      	strh	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
                } else {
                    net = (int32_t)ui[0];
                    node = (int16_t)ui[1];
                }
                break;
 800deec:	e02a      	b.n	800df44 <CO_GTWA_process+0x420>
                } else if (ui[1] > 127U) {
 800deee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800def2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	2b7f      	cmp	r3, #127	; 0x7f
 800defa:	d90c      	bls.n	800df16 <CO_GTWA_process+0x3f2>
                    err = true;
 800defc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800df04:	2201      	movs	r2, #1
 800df06:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
 800df08:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800df10:	226b      	movs	r2, #107	; 0x6b
 800df12:	801a      	strh	r2, [r3, #0]
                break;
 800df14:	e016      	b.n	800df44 <CO_GTWA_process+0x420>
                    net = (int32_t)ui[0];
 800df16:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df1a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                    node = (int16_t)ui[1];
 800df24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
                break;
 800df32:	e007      	b.n	800df44 <CO_GTWA_process+0x420>
            case 3: /* <command> token contains digit */ err = true; break;
 800df34:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800df3c:	2201      	movs	r2, #1
 800df3e:	601a      	str	r2, [r3, #0]
 800df40:	e000      	b.n	800df44 <CO_GTWA_process+0x420>
            default:
                /* MISRA C 2004 15.3 */
                break;
 800df42:	bf00      	nop
        }
        if (err) {
 800df44:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f041 87d4 	bne.w	800fefc <CO_GTWA_process+0x23d8>
            break;
        }

        /* command is case insensitive */
        convertToLower(tok, sizeof(tok));
 800df54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df58:	2114      	movs	r1, #20
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fdac 	bl	800dab8 <convertToLower>

        bool_t tok_is_set = strcmp(tok, "set") == 0;
 800df60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df64:	4943      	ldr	r1, [pc, #268]	; (800e074 <CO_GTWA_process+0x550>)
 800df66:	4618      	mov	r0, r3
 800df68:	f7f2 f932 	bl	80001d0 <strcmp>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	bf0c      	ite	eq
 800df72:	2301      	moveq	r3, #1
 800df74:	2300      	movne	r3, #0
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        bool_t tok_is_read = strcmp(tok, "r") == 0;
 800df7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df80:	493d      	ldr	r1, [pc, #244]	; (800e078 <CO_GTWA_process+0x554>)
 800df82:	4618      	mov	r0, r3
 800df84:	f7f2 f924 	bl	80001d0 <strcmp>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	bf0c      	ite	eq
 800df8e:	2301      	moveq	r3, #1
 800df90:	2300      	movne	r3, #0
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        tok_is_read = (strcmp(tok, "read") == 0) || tok_is_read;
 800df98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df9c:	4937      	ldr	r1, [pc, #220]	; (800e07c <CO_GTWA_process+0x558>)
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7f2 f916 	bl	80001d0 <strcmp>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <CO_GTWA_process+0x48e>
 800dfaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <CO_GTWA_process+0x492>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e000      	b.n	800dfb8 <CO_GTWA_process+0x494>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        bool_t tok_is_write = strcmp(tok, "w") == 0;
 800dfbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dfc0:	492f      	ldr	r1, [pc, #188]	; (800e080 <CO_GTWA_process+0x55c>)
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f2 f904 	bl	80001d0 <strcmp>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	bf0c      	ite	eq
 800dfce:	2301      	moveq	r3, #1
 800dfd0:	2300      	movne	r3, #0
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
        tok_is_write = (strcmp(tok, "write") == 0) || tok_is_write;
 800dfd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dfdc:	4929      	ldr	r1, [pc, #164]	; (800e084 <CO_GTWA_process+0x560>)
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f2 f8f6 	bl	80001d0 <strcmp>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <CO_GTWA_process+0x4ce>
 800dfea:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <CO_GTWA_process+0x4d2>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e000      	b.n	800dff8 <CO_GTWA_process+0x4d4>
 800dff6:	2300      	movs	r3, #0
 800dff8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        bool_t tok_is_start = strcmp(tok, "start") == 0;
 800dffc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e000:	4921      	ldr	r1, [pc, #132]	; (800e088 <CO_GTWA_process+0x564>)
 800e002:	4618      	mov	r0, r3
 800e004:	f7f2 f8e4 	bl	80001d0 <strcmp>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bf0c      	ite	eq
 800e00e:	2301      	moveq	r3, #1
 800e010:	2300      	movne	r3, #0
 800e012:	b2db      	uxtb	r3, r3
 800e014:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
        bool_t tok_is_stop = strcmp(tok, "stop") == 0;
 800e018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e01c:	491b      	ldr	r1, [pc, #108]	; (800e08c <CO_GTWA_process+0x568>)
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f2 f8d6 	bl	80001d0 <strcmp>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	bf0c      	ite	eq
 800e02a:	2301      	moveq	r3, #1
 800e02c:	2300      	movne	r3, #0
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
        bool_t tok_is_preop = strcmp(tok, "preop") == 0;
 800e034:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e038:	4915      	ldr	r1, [pc, #84]	; (800e090 <CO_GTWA_process+0x56c>)
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7f2 f8c8 	bl	80001d0 <strcmp>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	bf0c      	ite	eq
 800e046:	2301      	moveq	r3, #1
 800e048:	2300      	movne	r3, #0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        tok_is_preop = (strcmp(tok, "preoperational") == 0) || tok_is_preop;
 800e050:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e054:	490f      	ldr	r1, [pc, #60]	; (800e094 <CO_GTWA_process+0x570>)
 800e056:	4618      	mov	r0, r3
 800e058:	f7f2 f8ba 	bl	80001d0 <strcmp>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <CO_GTWA_process+0x546>
 800e062:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e066:	2b00      	cmp	r3, #0
 800e068:	d016      	beq.n	800e098 <CO_GTWA_process+0x574>
 800e06a:	2301      	movs	r3, #1
 800e06c:	e015      	b.n	800e09a <CO_GTWA_process+0x576>
 800e06e:	bf00      	nop
 800e070:	08023c90 	.word	0x08023c90
 800e074:	08021958 	.word	0x08021958
 800e078:	0802195c 	.word	0x0802195c
 800e07c:	08021960 	.word	0x08021960
 800e080:	08021968 	.word	0x08021968
 800e084:	0802196c 	.word	0x0802196c
 800e088:	08021974 	.word	0x08021974
 800e08c:	0802197c 	.word	0x0802197c
 800e090:	08021984 	.word	0x08021984
 800e094:	0802198c 	.word	0x0802198c
 800e098:	2300      	movs	r3, #0
 800e09a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        bool_t tok_is_reset = strcmp(tok, "reset") == 0;
 800e09e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0a2:	49b9      	ldr	r1, [pc, #740]	; (800e388 <CO_GTWA_process+0x864>)
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f2 f893 	bl	80001d0 <strcmp>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	bf0c      	ite	eq
 800e0b0:	2301      	moveq	r3, #1
 800e0b2:	2300      	movne	r3, #0
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        bool_t tok_is_lss_switch_glob = strcmp(tok, "lss_switch_glob") == 0;
 800e0ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0be:	49b3      	ldr	r1, [pc, #716]	; (800e38c <CO_GTWA_process+0x868>)
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f2 f885 	bl	80001d0 <strcmp>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bf0c      	ite	eq
 800e0cc:	2301      	moveq	r3, #1
 800e0ce:	2300      	movne	r3, #0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        bool_t tok_is_lss_switch_sel = strcmp(tok, "lss_switch_sel") == 0;
 800e0d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0da:	49ad      	ldr	r1, [pc, #692]	; (800e390 <CO_GTWA_process+0x86c>)
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7f2 f877 	bl	80001d0 <strcmp>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	bf0c      	ite	eq
 800e0e8:	2301      	moveq	r3, #1
 800e0ea:	2300      	movne	r3, #0
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        bool_t tok_is_lss_set_node = strcmp(tok, "lss_set_node") == 0;
 800e0f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0f6:	49a7      	ldr	r1, [pc, #668]	; (800e394 <CO_GTWA_process+0x870>)
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f2 f869 	bl	80001d0 <strcmp>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	bf0c      	ite	eq
 800e104:	2301      	moveq	r3, #1
 800e106:	2300      	movne	r3, #0
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        bool_t tok_is_lss_conf_bitrate = strcmp(tok, "lss_conf_bitrate") == 0;
 800e10e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e112:	49a1      	ldr	r1, [pc, #644]	; (800e398 <CO_GTWA_process+0x874>)
 800e114:	4618      	mov	r0, r3
 800e116:	f7f2 f85b 	bl	80001d0 <strcmp>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	bf0c      	ite	eq
 800e120:	2301      	moveq	r3, #1
 800e122:	2300      	movne	r3, #0
 800e124:	b2db      	uxtb	r3, r3
 800e126:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        bool_t tok_is_lss_activate_bitrate = strcmp(tok, "lss_activate_bitrate") == 0;
 800e12a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e12e:	499b      	ldr	r1, [pc, #620]	; (800e39c <CO_GTWA_process+0x878>)
 800e130:	4618      	mov	r0, r3
 800e132:	f7f2 f84d 	bl	80001d0 <strcmp>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	bf0c      	ite	eq
 800e13c:	2301      	moveq	r3, #1
 800e13e:	2300      	movne	r3, #0
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        bool_t tok_is_lss_store = strcmp(tok, "lss_store") == 0;
 800e146:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e14a:	4995      	ldr	r1, [pc, #596]	; (800e3a0 <CO_GTWA_process+0x87c>)
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f2 f83f 	bl	80001d0 <strcmp>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	bf0c      	ite	eq
 800e158:	2301      	moveq	r3, #1
 800e15a:	2300      	movne	r3, #0
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        bool_t tok_is_lss_inquire_addr = strcmp(tok, "lss_inquire_addr") == 0;
 800e162:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e166:	498f      	ldr	r1, [pc, #572]	; (800e3a4 <CO_GTWA_process+0x880>)
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f2 f831 	bl	80001d0 <strcmp>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	bf0c      	ite	eq
 800e174:	2301      	moveq	r3, #1
 800e176:	2300      	movne	r3, #0
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        bool_t tok_is_lss_get_node = strcmp(tok, "lss_get_node") == 0;
 800e17e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e182:	4989      	ldr	r1, [pc, #548]	; (800e3a8 <CO_GTWA_process+0x884>)
 800e184:	4618      	mov	r0, r3
 800e186:	f7f2 f823 	bl	80001d0 <strcmp>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bf0c      	ite	eq
 800e190:	2301      	moveq	r3, #1
 800e192:	2300      	movne	r3, #0
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        bool_t tok_is__lss_fastscan = strcmp(tok, "_lss_fastscan") == 0;
 800e19a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e19e:	4983      	ldr	r1, [pc, #524]	; (800e3ac <CO_GTWA_process+0x888>)
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7f2 f815 	bl	80001d0 <strcmp>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bf0c      	ite	eq
 800e1ac:	2301      	moveq	r3, #1
 800e1ae:	2300      	movne	r3, #0
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        bool_t tok_is_lss_allnodes = strcmp(tok, "lss_allnodes") == 0;
 800e1b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e1ba:	497d      	ldr	r1, [pc, #500]	; (800e3b0 <CO_GTWA_process+0x88c>)
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f2 f807 	bl	80001d0 <strcmp>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	bf0c      	ite	eq
 800e1c8:	2301      	moveq	r3, #1
 800e1ca:	2300      	movne	r3, #0
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LOG) != 0
        bool_t tok_is_log = strcmp(tok, "log") == 0;
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
        bool_t tok_is_help = strcmp(tok, "help") == 0;
 800e1d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e1d6:	4977      	ldr	r1, [pc, #476]	; (800e3b4 <CO_GTWA_process+0x890>)
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f1 fff9 	bl	80001d0 <strcmp>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	bf0c      	ite	eq
 800e1e4:	2301      	moveq	r3, #1
 800e1e6:	2300      	movne	r3, #0
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        bool_t tok_is_led = strcmp(tok, "led") == 0;
 800e1ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e1f2:	4971      	ldr	r1, [pc, #452]	; (800e3b8 <CO_GTWA_process+0x894>)
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7f1 ffeb 	bl	80001d0 <strcmp>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bf0c      	ite	eq
 800e200:	2301      	moveq	r3, #1
 800e202:	2300      	movne	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
#endif
        /* set command - multiple sub commands */
        if (tok_is_set) {
 800e20a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f000 81f6 	beq.w	800e600 <CO_GTWA_process+0xadc>
            if (closed != 0U) {
 800e214:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e218:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d007      	beq.n	800e232 <CO_GTWA_process+0x70e>
                err = true;
 800e222:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e226:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e22a:	2201      	movs	r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
                break;
 800e22e:	f001 bea0 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* command 2 */
            closed = 0xFFU;
 800e232:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e236:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e23a:	22ff      	movs	r2, #255	; 0xff
 800e23c:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e23e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e242:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f103 0018 	add.w	r0, r3, #24
 800e24c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e250:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e254:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	4613      	mov	r3, r2
 800e25c:	2214      	movs	r2, #20
 800e25e:	f7fb fe15 	bl	8009e8c <CO_fifo_readToken>
            if (err) {
 800e262:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e266:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f041 8647 	bne.w	800ff00 <CO_GTWA_process+0x23dc>
                break;
            }

            convertToLower(tok, sizeof(tok));
 800e272:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e276:	2114      	movs	r1, #20
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff fc1d 	bl	800dab8 <convertToLower>
            /* 'set network <value>' */
            if (strcmp(tok, "network") == 0) {
 800e27e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e282:	494e      	ldr	r1, [pc, #312]	; (800e3bc <CO_GTWA_process+0x898>)
 800e284:	4618      	mov	r0, r3
 800e286:	f7f1 ffa3 	bl	80001d0 <strcmp>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d151      	bne.n	800e334 <CO_GTWA_process+0x810>
                uint16_t value;

                if (closed != 0U) {
 800e290:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e294:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d007      	beq.n	800e2ae <CO_GTWA_process+0x78a>
                    err = true;
 800e29e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	601a      	str	r2, [r3, #0]
                    break;
 800e2aa:	f001 be62 	b.w	800ff72 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e2ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2b2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e2ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f103 0018 	add.w	r0, r3, #24
 800e2c8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e2cc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e2d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	2214      	movs	r2, #20
 800e2da:	f7fb fdd7 	bl	8009e8c <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, CO_CONFIG_GTW_NET_MIN, CO_CONFIG_GTW_NET_MAX, &err);
 800e2de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e2e2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e2e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	f7ff f9e1 	bl	800d6b2 <getU32>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e2fa:	801a      	strh	r2, [r3, #0]
                if (err) {
 800e2fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e300:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f041 85fc 	bne.w	800ff04 <CO_GTWA_process+0x23e0>
                    break;
                }

                gtwa->net_default = (int32_t)value;
 800e30c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e310:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e314:	881a      	ldrh	r2, [r3, #0]
 800e316:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e31a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60da      	str	r2, [r3, #12]
                responseWithOK(gtwa);
 800e322:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e326:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e32a:	6818      	ldr	r0, [r3, #0]
 800e32c:	f7ff fb5e 	bl	800d9ec <responseWithOK>
 800e330:	f001 bdc8 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            }
            /* 'set node <value>' */
            else if (strcmp(tok, "node") == 0) {
 800e334:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e338:	4921      	ldr	r1, [pc, #132]	; (800e3c0 <CO_GTWA_process+0x89c>)
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f1 ff48 	bl	80001d0 <strcmp>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d17b      	bne.n	800e43e <CO_GTWA_process+0x91a>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e346:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e34a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e34e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e352:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	f7ff fa0e 	bl	800d778 <checkNet>
 800e35c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
                uint8_t value;

                if ((closed != 0U) || NodeErr) {
 800e360:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e364:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d103      	bne.n	800e376 <CO_GTWA_process+0x852>
 800e36e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e372:	2b00      	cmp	r3, #0
 800e374:	d026      	beq.n	800e3c4 <CO_GTWA_process+0x8a0>
                    err = true;
 800e376:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e37a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e37e:	2201      	movs	r2, #1
 800e380:	601a      	str	r2, [r3, #0]
                    break;
 800e382:	f001 bdf6 	b.w	800ff72 <CO_GTWA_process+0x244e>
 800e386:	bf00      	nop
 800e388:	0802199c 	.word	0x0802199c
 800e38c:	080219a4 	.word	0x080219a4
 800e390:	080219b4 	.word	0x080219b4
 800e394:	080219c4 	.word	0x080219c4
 800e398:	080219d4 	.word	0x080219d4
 800e39c:	080219e8 	.word	0x080219e8
 800e3a0:	08021a00 	.word	0x08021a00
 800e3a4:	08021a0c 	.word	0x08021a0c
 800e3a8:	08021a20 	.word	0x08021a20
 800e3ac:	08021a30 	.word	0x08021a30
 800e3b0:	08021a40 	.word	0x08021a40
 800e3b4:	08021a50 	.word	0x08021a50
 800e3b8:	08021a58 	.word	0x08021a58
 800e3bc:	08021a5c 	.word	0x08021a5c
 800e3c0:	08021a64 	.word	0x08021a64
                }

                /* value */
                closed = 1U;
 800e3c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e3c8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e3d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e3d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f103 0018 	add.w	r0, r3, #24
 800e3de:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e3e2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e3e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	2214      	movs	r2, #20
 800e3f0:	f7fb fd4c 	bl	8009e8c <CO_fifo_readToken>
                value = (uint8_t)getU32(tok, 1, 127, &err);
 800e3f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e3f8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e3fc:	227f      	movs	r2, #127	; 0x7f
 800e3fe:	2101      	movs	r1, #1
 800e400:	f7ff f957 	bl	800d6b2 <getU32>
 800e404:	4603      	mov	r3, r0
 800e406:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
                if (err) {
 800e40a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e40e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f041 8577 	bne.w	800ff08 <CO_GTWA_process+0x23e4>
                    break;
                }

                gtwa->node_default = (int16_t)value;
 800e41a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e41e:	b21a      	sxth	r2, r3
 800e420:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e424:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	821a      	strh	r2, [r3, #16]
                responseWithOK(gtwa);
 800e42c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e430:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f7ff fad9 	bl	800d9ec <responseWithOK>
 800e43a:	f001 bd43 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            }
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
            /* 'set sdo_timeout <value_ms>' */
            else if (strcmp(tok, "sdo_timeout") == 0) {
 800e43e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e442:	49d5      	ldr	r1, [pc, #852]	; (800e798 <CO_GTWA_process+0xc74>)
 800e444:	4618      	mov	r0, r3
 800e446:	f7f1 fec3 	bl	80001d0 <strcmp>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d15d      	bne.n	800e50c <CO_GTWA_process+0x9e8>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e450:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e454:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e458:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e45c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	f7ff f989 	bl	800d778 <checkNet>
 800e466:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
                uint16_t value;

                if ((closed != 0U) || NodeErr) {
 800e46a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e46e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d103      	bne.n	800e480 <CO_GTWA_process+0x95c>
 800e478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <CO_GTWA_process+0x96c>
                    err = true;
 800e480:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e488:	2201      	movs	r2, #1
 800e48a:	601a      	str	r2, [r3, #0]
                    break;
 800e48c:	f001 bd71 	b.w	800ff72 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e490:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e494:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e498:	2201      	movs	r2, #1
 800e49a:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e49c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e4a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f103 0018 	add.w	r0, r3, #24
 800e4aa:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e4ae:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e4b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	2214      	movs	r2, #20
 800e4bc:	f7fb fce6 	bl	8009e8c <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, 1, 0xFFFF, &err);
 800e4c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e4c4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e4c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	f7ff f8f0 	bl	800d6b2 <getU32>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                if (err) {
 800e4d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e4dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f041 8512 	bne.w	800ff0c <CO_GTWA_process+0x23e8>
                    break;
                }

                gtwa->SDOtimeoutTime = value;
 800e4e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e4ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800e4f6:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
                responseWithOK(gtwa);
 800e4fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e4fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e502:	6818      	ldr	r0, [r3, #0]
 800e504:	f7ff fa72 	bl	800d9ec <responseWithOK>
 800e508:	f001 bcdc 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            }
            /* 'set sdo_timeout <0|1>' */
            else if (strcmp(tok, "sdo_block") == 0) {
 800e50c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e510:	49a2      	ldr	r1, [pc, #648]	; (800e79c <CO_GTWA_process+0xc78>)
 800e512:	4618      	mov	r0, r3
 800e514:	f7f1 fe5c 	bl	80001d0 <strcmp>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d162      	bne.n	800e5e4 <CO_GTWA_process+0xac0>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e51e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e522:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e526:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e52a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	f7ff f922 	bl	800d778 <checkNet>
 800e534:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                uint16_t value;

                if ((closed != 0U) || NodeErr) {
 800e538:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e53c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d103      	bne.n	800e54e <CO_GTWA_process+0xa2a>
 800e546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d007      	beq.n	800e55e <CO_GTWA_process+0xa3a>
                    err = true;
 800e54e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e552:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e556:	2201      	movs	r2, #1
 800e558:	601a      	str	r2, [r3, #0]
                    break;
 800e55a:	f001 bd0a 	b.w	800ff72 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e55e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e562:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e566:	2201      	movs	r2, #1
 800e568:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e56a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e56e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f103 0018 	add.w	r0, r3, #24
 800e578:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e57c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e580:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e584:	9300      	str	r3, [sp, #0]
 800e586:	4613      	mov	r3, r2
 800e588:	2214      	movs	r2, #20
 800e58a:	f7fb fc7f 	bl	8009e8c <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, 0, 1, &err);
 800e58e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e592:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e596:	2201      	movs	r2, #1
 800e598:	2100      	movs	r1, #0
 800e59a:	f7ff f88a 	bl	800d6b2 <getU32>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
                if (err) {
 800e5a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f041 84ae 	bne.w	800ff10 <CO_GTWA_process+0x23ec>
                    break;
                }

                gtwa->SDOblockTransferEnable = (value == 1U) ? true : false;
 800e5b4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	bf0c      	ite	eq
 800e5bc:	2301      	moveq	r3, #1
 800e5be:	2300      	movne	r3, #0
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
                responseWithOK(gtwa);
 800e5d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e5da:	6818      	ldr	r0, [r3, #0]
 800e5dc:	f7ff fa06 	bl	800d9ec <responseWithOK>
 800e5e0:	f001 bc70 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
            else {
                respErrorCode = CO_GTWA_respErrorReqNotSupported;
 800e5e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e5ec:	2264      	movs	r2, #100	; 0x64
 800e5ee:	801a      	strh	r2, [r3, #0]
                err = true;
 800e5f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	601a      	str	r2, [r3, #0]
                break;
 800e5fc:	f001 bcb9 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
        }

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        else if (tok_is_read) {
 800e600:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e604:	2b00      	cmp	r3, #0
 800e606:	f000 8151 	beq.w	800e8ac <CO_GTWA_process+0xd88>
            uint16_t idx;
            uint8_t subidx;
            CO_SDO_return_t SDO_ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 1, &respErrorCode);
 800e60a:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800e60e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e612:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800e616:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	2301      	movs	r3, #1
 800e61e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e622:	6800      	ldr	r0, [r0, #0]
 800e624:	f7ff f86e 	bl	800d704 <checkNetNode>
 800e628:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

            if ((closed != 0U) || NodeErr) {
 800e62c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e630:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d103      	bne.n	800e642 <CO_GTWA_process+0xb1e>
 800e63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <CO_GTWA_process+0xb2e>
                err = true;
 800e642:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e646:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e64a:	2201      	movs	r2, #1
 800e64c:	601a      	str	r2, [r3, #0]
                break;
 800e64e:	f001 bc90 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* index */
            closed = 0U;
 800e652:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e656:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e65a:	2200      	movs	r2, #0
 800e65c:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e65e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e662:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f103 0018 	add.w	r0, r3, #24
 800e66c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e670:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e674:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	4613      	mov	r3, r2
 800e67c:	2214      	movs	r2, #20
 800e67e:	f7fb fc05 	bl	8009e8c <CO_fifo_readToken>
            idx = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800e682:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e686:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e68e:	2100      	movs	r1, #0
 800e690:	f7ff f80f 	bl	800d6b2 <getU32>
 800e694:	4603      	mov	r3, r0
 800e696:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            if (err) {
 800e69a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e69e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f041 8435 	bne.w	800ff14 <CO_GTWA_process+0x23f0>
                break;
            }

            /* subindex */
            closed = 0xFFU;
 800e6aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6ae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e6b2:	22ff      	movs	r2, #255	; 0xff
 800e6b4:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e6b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f103 0018 	add.w	r0, r3, #24
 800e6c4:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e6c8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e6cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	2214      	movs	r2, #20
 800e6d6:	f7fb fbd9 	bl	8009e8c <CO_fifo_readToken>
 800e6da:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            subidx = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800e6de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e6e2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e6e6:	22ff      	movs	r2, #255	; 0xff
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	f7fe ffe2 	bl	800d6b2 <getU32>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
            if (err || (n == 0U)) {
 800e6f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d103      	bne.n	800e70a <CO_GTWA_process+0xbe6>
 800e702:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e706:	2b00      	cmp	r3, #0
 800e708:	d107      	bne.n	800e71a <CO_GTWA_process+0xbf6>
                err = true;
 800e70a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e70e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e712:	2201      	movs	r2, #1
 800e714:	601a      	str	r2, [r3, #0]
                break;
 800e716:	f001 bc2c 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* optional data type */
            if (closed == 0U) {
 800e71a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e71e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d13b      	bne.n	800e7a0 <CO_GTWA_process+0xc7c>
                closed = 1U;
 800e728:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e72c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e730:	2201      	movs	r2, #1
 800e732:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e734:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e738:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f103 0018 	add.w	r0, r3, #24
 800e742:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e746:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e74a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4613      	mov	r3, r2
 800e752:	2214      	movs	r2, #20
 800e754:	f7fb fb9a 	bl	8009e8c <CO_fifo_readToken>
                convertToLower(tok, sizeof(tok));
 800e758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e75c:	2114      	movs	r1, #20
 800e75e:	4618      	mov	r0, r3
 800e760:	f7ff f9aa 	bl	800dab8 <convertToLower>
                gtwa->SDOdataType = CO_GTWA_getDataType(tok, &err);
 800e764:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800e768:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff f814 	bl	800d79c <CO_GTWA_getDataType>
 800e774:	4602      	mov	r2, r0
 800e776:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e77a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
                if (err) {
 800e784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00e      	beq.n	800e7b0 <CO_GTWA_process+0xc8c>
                    break;
 800e792:	f001 bbee 	b.w	800ff72 <CO_GTWA_process+0x244e>
 800e796:	bf00      	nop
 800e798:	08021a6c 	.word	0x08021a6c
 800e79c:	08021a78 	.word	0x08021a78
                }
            } else {
                gtwa->SDOdataType = &dataTypes[0]; /* use generic data type */
 800e7a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4ad3      	ldr	r2, [pc, #844]	; (800eaf8 <CO_GTWA_process+0xfd4>)
 800e7ac:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
            }

            /* setup client */
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800e7b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800e7be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
                                         (uint32_t)CO_CAN_ID_SDO_SRV + gtwa->node, gtwa->node);
 800e7ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	7d1b      	ldrb	r3, [r3, #20]
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800e7da:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800e7de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ea:	f7f6 f845 	bl	8004878 <CO_SDOclient_setup>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800e7f4:	f997 30e0 	ldrsb.w	r3, [r7, #224]	; 0xe0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00d      	beq.n	800e818 <CO_GTWA_process+0xcf4>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800e7fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e800:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e804:	2266      	movs	r2, #102	; 0x66
 800e806:	801a      	strh	r2, [r3, #0]
                err = true;
 800e808:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e80c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e810:	2201      	movs	r2, #1
 800e812:	601a      	str	r2, [r3, #0]
                break;
 800e814:	f001 bbad 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* initiate upload */
            SDO_ret = CO_SDOclientUploadInitiate(gtwa->SDO_C, idx, subidx, gtwa->SDOtimeoutTime,
 800e818:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e81c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800e826:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e82a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f8b3 41e4 	ldrh.w	r4, [r3, #484]	; 0x1e4
 800e834:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e838:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800e842:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
 800e846:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	4623      	mov	r3, r4
 800e84e:	f7f7 fc51 	bl	80060f4 <CO_SDOclientUploadInitiate>
 800e852:	4603      	mov	r3, r0
 800e854:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
                                                 gtwa->SDOblockTransferEnable);
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800e858:	f997 30e0 	ldrsb.w	r3, [r7, #224]	; 0xe0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00d      	beq.n	800e87c <CO_GTWA_process+0xd58>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800e860:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e864:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e868:	2266      	movs	r2, #102	; 0x66
 800e86a:	801a      	strh	r2, [r3, #0]
                err = true;
 800e86c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e870:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e874:	2201      	movs	r2, #1
 800e876:	601a      	str	r2, [r3, #0]
                break;
 800e878:	f001 bb7b 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* indicate that gateway response didn't start yet */
            gtwa->SDOdataCopyStatus = false;
 800e87c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e880:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2200      	movs	r2, #0
 800e888:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            /* continue with state machine */
            timeDifference_us = 0;
 800e88c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e890:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]
            gtwa->state = CO_GTWA_ST_READ;
 800e898:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e89c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2210      	movs	r2, #16
 800e8a4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800e8a8:	f001 bb0c 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        }

        /* Download SDO comm. - w[rite] <index> <subindex> <datatype> <value> */
        else if (tok_is_write) {
 800e8ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 81ca 	beq.w	800ec4a <CO_GTWA_process+0x1126>
            uint16_t idx;
            uint8_t subidx;
            uint8_t status;
            CO_SDO_return_t SDO_ret;
            size_t size;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 1, &respErrorCode);
 800e8b6:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800e8ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8be:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800e8c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e8ce:	6800      	ldr	r0, [r0, #0]
 800e8d0:	f7fe ff18 	bl	800d704 <checkNetNode>
 800e8d4:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

            if ((closed != 0U) || NodeErr) {
 800e8d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8dc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <CO_GTWA_process+0xdca>
 800e8e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <CO_GTWA_process+0xdda>
                err = true;
 800e8ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]
                break;
 800e8fa:	f001 bb3a 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* index */
            closed = 0U;
 800e8fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e902:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e906:	2200      	movs	r2, #0
 800e908:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e90a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e90e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f103 0018 	add.w	r0, r3, #24
 800e918:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e91c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	4613      	mov	r3, r2
 800e928:	2214      	movs	r2, #20
 800e92a:	f7fb faaf 	bl	8009e8c <CO_fifo_readToken>
            idx = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800e92e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e932:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e93a:	2100      	movs	r1, #0
 800e93c:	f7fe feb9 	bl	800d6b2 <getU32>
 800e940:	4603      	mov	r3, r0
 800e942:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
            if (err) {
 800e946:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e94a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	f040 8171 	bne.w	800ec38 <CO_GTWA_process+0x1114>
                break;
            }

            /* subindex */
            closed = 0U;
 800e956:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e95a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e95e:	2200      	movs	r2, #0
 800e960:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e962:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e966:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f103 0018 	add.w	r0, r3, #24
 800e970:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e974:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e978:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	4613      	mov	r3, r2
 800e980:	2214      	movs	r2, #20
 800e982:	f7fb fa83 	bl	8009e8c <CO_fifo_readToken>
 800e986:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            subidx = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800e98a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e98e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e992:	22ff      	movs	r2, #255	; 0xff
 800e994:	2100      	movs	r1, #0
 800e996:	f7fe fe8c 	bl	800d6b2 <getU32>
 800e99a:	4603      	mov	r3, r0
 800e99c:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
            if (err) {
 800e9a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f040 8147 	bne.w	800ec3e <CO_GTWA_process+0x111a>
                break;
            }

            /* data type */
            closed = 0U;
 800e9b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9b4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e9bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f103 0018 	add.w	r0, r3, #24
 800e9ca:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e9ce:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e9d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	2214      	movs	r2, #20
 800e9dc:	f7fb fa56 	bl	8009e8c <CO_fifo_readToken>
            convertToLower(tok, sizeof(tok));
 800e9e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e9e4:	2114      	movs	r1, #20
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff f866 	bl	800dab8 <convertToLower>
            gtwa->SDOdataType = CO_GTWA_getDataType(tok, &err);
 800e9ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800e9f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fed0 	bl	800d79c <CO_GTWA_getDataType>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
            if (err) {
 800ea0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 8114 	bne.w	800ec44 <CO_GTWA_process+0x1120>
                break;
            }

            /* setup client */
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ea1c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800ea2a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea2e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	7d1b      	ldrb	r3, [r3, #20]
 800ea36:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
                                         (uint32_t)CO_CAN_ID_SDO_SRV + gtwa->node, gtwa->node);
 800ea3a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea3e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	7d1b      	ldrb	r3, [r3, #20]
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ea46:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800ea4a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	7d1b      	ldrb	r3, [r3, #20]
 800ea56:	f7f5 ff0f 	bl	8004878 <CO_SDOclient_setup>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800ea60:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00c      	beq.n	800ea82 <CO_GTWA_process+0xf5e>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ea68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ea70:	2266      	movs	r2, #102	; 0x66
 800ea72:	801a      	strh	r2, [r3, #0]
                err = true;
 800ea74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	601a      	str	r2, [r3, #0]
                break;
 800ea80:	e0e1      	b.n	800ec46 <CO_GTWA_process+0x1122>
            }

            /* initiate download */
            SDO_ret = CO_SDOclientDownloadInitiate(gtwa->SDO_C, idx, subidx, gtwa->SDOdataType->length,
 800ea82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea86:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800ea90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800ea9e:	685d      	ldr	r5, [r3, #4]
 800eaa0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eaa4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
 800eaae:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800eab2:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800eab6:	6812      	ldr	r2, [r2, #0]
 800eab8:	f8d2 21e8 	ldr.w	r2, [r2, #488]	; 0x1e8
 800eabc:	f897 40ed 	ldrb.w	r4, [r7, #237]	; 0xed
 800eac0:	f8b7 10ee 	ldrh.w	r1, [r7, #238]	; 0xee
 800eac4:	9201      	str	r2, [sp, #4]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	462b      	mov	r3, r5
 800eaca:	4622      	mov	r2, r4
 800eacc:	f7f5 ff5c 	bl	8004988 <CO_SDOclientDownloadInitiate>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
                                                   gtwa->SDOtimeoutTime, gtwa->SDOblockTransferEnable);
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800ead6:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00e      	beq.n	800eafc <CO_GTWA_process+0xfd8>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800eade:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800eae6:	2266      	movs	r2, #102	; 0x66
 800eae8:	801a      	strh	r2, [r3, #0]
                err = true;
 800eaea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eaee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	601a      	str	r2, [r3, #0]
                break;
 800eaf6:	e0a6      	b.n	800ec46 <CO_GTWA_process+0x1122>
 800eaf8:	08022e4c 	.word	0x08022e4c
            }

            /* copy data from comm to the SDO buffer, according to data type */
            size = gtwa->SDOdataType->dataTypeScan(&gtwa->SDO_C->bufFifo, &gtwa->commFifo, &status);
 800eafc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800eb10:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800eb14:	6812      	ldr	r2, [r2, #0]
 800eb16:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 800eb1a:	f102 0078 	add.w	r0, r2, #120	; 0x78
 800eb1e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800eb22:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800eb26:	6812      	ldr	r2, [r2, #0]
 800eb28:	f102 0118 	add.w	r1, r2, #24
 800eb2c:	f107 027f 	add.w	r2, r7, #127	; 0x7f
 800eb30:	4798      	blx	r3
 800eb32:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            /* set to true, if command delimiter was found */
            closed = ((status & CO_fifo_st_closed) == 0U) ? 0U : 1U;
 800eb36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb3a:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	bf14      	ite	ne
 800eb48:	2301      	movne	r3, #1
 800eb4a:	2300      	moveq	r3, #0
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb54:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eb58:	701a      	strb	r2, [r3, #0]
            /* set to true, if data are copied only partially */
            gtwa->SDOdataCopyStatus = (status & CO_fifo_st_partial) != 0U;
 800eb5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb5e:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f003 0302 	and.w	r3, r3, #2
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	bf14      	ite	ne
 800eb6c:	2301      	movne	r3, #1
 800eb6e:	2300      	moveq	r3, #0
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	461a      	mov	r2, r3
 800eb74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

            /* is syntax error in command or size is zero or not the last token
             * in command */
            if (((status & CO_fifo_st_errMask) != 0U) || (size == 0U)
 800eb82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb86:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d113      	bne.n	800ebbc <CO_GTWA_process+0x1098>
 800eb94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00f      	beq.n	800ebbc <CO_GTWA_process+0x1098>
                || ((gtwa->SDOdataCopyStatus == false) && (closed != 1U))) {
 800eb9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eba0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10d      	bne.n	800ebca <CO_GTWA_process+0x10a6>
 800ebae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebb2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d006      	beq.n	800ebca <CO_GTWA_process+0x10a6>
                err = true;
 800ebbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	601a      	str	r2, [r3, #0]
                break;
 800ebc8:	e03d      	b.n	800ec46 <CO_GTWA_process+0x1122>
            }

            /* if data size was not known before and is known now, update SDO */
            if ((gtwa->SDOdataType->length == 0U) && !gtwa->SDOdataCopyStatus) {
 800ebca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d114      	bne.n	800ec08 <CO_GTWA_process+0x10e4>
 800ebde:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebe2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10b      	bne.n	800ec08 <CO_GTWA_process+0x10e4>
                CO_SDOclientDownloadInitSize(gtwa->SDO_C, size);
 800ebf0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebf4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ebfe:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f5 ff25 	bl	8004a52 <CO_SDOclientDownloadInitSize>
            }

            /* continue with state machine */
            gtwa->stateTimeoutTmr = 0;
 800ec08:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            timeDifference_us = 0;
 800ec18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ec20:	2200      	movs	r2, #0
 800ec22:	601a      	str	r2, [r3, #0]
            gtwa->state = CO_GTWA_ST_WRITE;
 800ec24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2211      	movs	r2, #17
 800ec30:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800ec34:	f001 b946 	b.w	800fec4 <CO_GTWA_process+0x23a0>
                break;
 800ec38:	bf00      	nop
 800ec3a:	f001 b99a 	b.w	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ec3e:	bf00      	nop
 800ec40:	f001 b997 	b.w	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ec44:	bf00      	nop
            break;
 800ec46:	f001 b994 	b.w	800ff72 <CO_GTWA_process+0x244e>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        /* NMT start node - 'start' */
        else if (tok_is_start) {
 800ec4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d056      	beq.n	800ed00 <CO_GTWA_process+0x11dc>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800ec52:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800ec56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec5a:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800ec5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	2300      	movs	r3, #0
 800ec66:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ec6a:	6800      	ldr	r0, [r0, #0]
 800ec6c:	f7fe fd4a 	bl	800d704 <checkNetNode>
 800ec70:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            CO_NMT_command_t command2 = CO_NMT_ENTER_OPERATIONAL;
 800ec74:	2301      	movs	r3, #1
 800ec76:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

            if ((closed != 1U) || NodeErr) {
 800ec7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec7e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d103      	bne.n	800ec90 <CO_GTWA_process+0x116c>
 800ec88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d007      	beq.n	800eca0 <CO_GTWA_process+0x117c>
                err = true;
 800ec90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ec98:	2201      	movs	r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]
                break;
 800ec9c:	f001 b969 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800eca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eca4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800ecae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ecb2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	7d1a      	ldrb	r2, [r3, #20]
 800ecba:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	f7f3 fb51 	bl	8002366 <CO_NMT_sendCommand>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

            if (ret == CO_ERROR_NO) {
 800ecca:	f997 30f6 	ldrsb.w	r3, [r7, #246]	; 0xf6
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d108      	bne.n	800ece4 <CO_GTWA_process+0x11c0>
                responseWithOK(gtwa);
 800ecd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ecd6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ecda:	6818      	ldr	r0, [r3, #0]
 800ecdc:	f7fe fe86 	bl	800d9ec <responseWithOK>
 800ece0:	f001 b8f0 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ece4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ece8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ecec:	2266      	movs	r2, #102	; 0x66
 800ecee:	801a      	strh	r2, [r3, #0]
                err = true;
 800ecf0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ecf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	601a      	str	r2, [r3, #0]
                break;
 800ecfc:	f001 b939 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT stop node - 'stop' */
        else if (tok_is_stop) {
 800ed00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d056      	beq.n	800edb6 <CO_GTWA_process+0x1292>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800ed08:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800ed0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed10:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800ed14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ed20:	6800      	ldr	r0, [r0, #0]
 800ed22:	f7fe fcef 	bl	800d704 <checkNetNode>
 800ed26:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
            CO_NMT_command_t command2 = CO_NMT_ENTER_STOPPED;
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

            if ((closed != 1U) || NodeErr) {
 800ed30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed34:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d103      	bne.n	800ed46 <CO_GTWA_process+0x1222>
 800ed3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d007      	beq.n	800ed56 <CO_GTWA_process+0x1232>
                err = true;
 800ed46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed4a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ed4e:	2201      	movs	r2, #1
 800ed50:	601a      	str	r2, [r3, #0]
                break;
 800ed52:	f001 b90e 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800ed56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800ed64:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	7d1a      	ldrb	r2, [r3, #20]
 800ed70:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800ed74:	4619      	mov	r1, r3
 800ed76:	f7f3 faf6 	bl	8002366 <CO_NMT_sendCommand>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

            if (ret == CO_ERROR_NO) {
 800ed80:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d108      	bne.n	800ed9a <CO_GTWA_process+0x1276>
                responseWithOK(gtwa);
 800ed88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed90:	6818      	ldr	r0, [r3, #0]
 800ed92:	f7fe fe2b 	bl	800d9ec <responseWithOK>
 800ed96:	f001 b895 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ed9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800eda2:	2266      	movs	r2, #102	; 0x66
 800eda4:	801a      	strh	r2, [r3, #0]
                err = true;
 800eda6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800edaa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800edae:	2201      	movs	r2, #1
 800edb0:	601a      	str	r2, [r3, #0]
                break;
 800edb2:	f001 b8de 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT Set node to pre-operational - 'preop[erational]' */
        else if (tok_is_preop) {
 800edb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d056      	beq.n	800ee6c <CO_GTWA_process+0x1348>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800edbe:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800edc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800edc6:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800edca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	2300      	movs	r3, #0
 800edd2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800edd6:	6800      	ldr	r0, [r0, #0]
 800edd8:	f7fe fc94 	bl	800d704 <checkNetNode>
 800eddc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
            CO_NMT_command_t command2 = CO_NMT_ENTER_PRE_OPERATIONAL;
 800ede0:	2380      	movs	r3, #128	; 0x80
 800ede2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

            if ((closed != 1U) || NodeErr) {
 800ede6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800edea:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d103      	bne.n	800edfc <CO_GTWA_process+0x12d8>
 800edf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d007      	beq.n	800ee0c <CO_GTWA_process+0x12e8>
                err = true;
 800edfc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ee04:	2201      	movs	r2, #1
 800ee06:	601a      	str	r2, [r3, #0]
                break;
 800ee08:	f001 b8b3 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800ee0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800ee1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee1e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	7d1a      	ldrb	r2, [r3, #20]
 800ee26:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	f7f3 fa9b 	bl	8002366 <CO_NMT_sendCommand>
 800ee30:	4603      	mov	r3, r0
 800ee32:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

            if (ret == CO_ERROR_NO) {
 800ee36:	f997 3106 	ldrsb.w	r3, [r7, #262]	; 0x106
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d108      	bne.n	800ee50 <CO_GTWA_process+0x132c>
                responseWithOK(gtwa);
 800ee3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee46:	6818      	ldr	r0, [r3, #0]
 800ee48:	f7fe fdd0 	bl	800d9ec <responseWithOK>
 800ee4c:	f001 b83a 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ee50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ee58:	2266      	movs	r2, #102	; 0x66
 800ee5a:	801a      	strh	r2, [r3, #0]
                err = true;
 800ee5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ee64:	2201      	movs	r2, #1
 800ee66:	601a      	str	r2, [r3, #0]
                break;
 800ee68:	f001 b883 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT reset (node or communication) - 'reset <node|comm[unication]>' */
        else if (tok_is_reset) {
 800ee6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 80a9 	beq.w	800efc8 <CO_GTWA_process+0x14a4>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800ee76:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800ee7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee7e:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800ee82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ee8e:	6800      	ldr	r0, [r0, #0]
 800ee90:	f7fe fc38 	bl	800d704 <checkNetNode>
 800ee94:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
            CO_NMT_command_t command2;

            if ((closed != 0U) || NodeErr) {
 800ee98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee9c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d103      	bne.n	800eeae <CO_GTWA_process+0x138a>
 800eea6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <CO_GTWA_process+0x139a>
                err = true;
 800eeae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eeb2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	601a      	str	r2, [r3, #0]
                break;
 800eeba:	f001 b85a 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* command 2 */
            closed = 1U;
 800eebe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eec2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eec6:	2201      	movs	r2, #1
 800eec8:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800eeca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eece:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f103 0018 	add.w	r0, r3, #24
 800eed8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800eedc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800eee0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	4613      	mov	r3, r2
 800eee8:	2214      	movs	r2, #20
 800eeea:	f7fa ffcf 	bl	8009e8c <CO_fifo_readToken>
            if (err) {
 800eeee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eef2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f041 800d 	bne.w	800ff18 <CO_GTWA_process+0x23f4>
                break;
            }

            convertToLower(tok, sizeof(tok));
 800eefe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef02:	2114      	movs	r1, #20
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fdd7 	bl	800dab8 <convertToLower>
            if (strcmp(tok, "node") == 0) {
 800ef0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef0e:	4988      	ldr	r1, [pc, #544]	; (800f130 <CO_GTWA_process+0x160c>)
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f1 f95d 	bl	80001d0 <strcmp>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d103      	bne.n	800ef24 <CO_GTWA_process+0x1400>
                command2 = CO_NMT_RESET_NODE;
 800ef1c:	2381      	movs	r3, #129	; 0x81
 800ef1e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800ef22:	e021      	b.n	800ef68 <CO_GTWA_process+0x1444>
            } else if (strcmp(tok, "comm") == 0) {
 800ef24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef28:	4982      	ldr	r1, [pc, #520]	; (800f134 <CO_GTWA_process+0x1610>)
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7f1 f950 	bl	80001d0 <strcmp>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <CO_GTWA_process+0x141a>
                command2 = CO_NMT_RESET_COMMUNICATION;
 800ef36:	2382      	movs	r3, #130	; 0x82
 800ef38:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800ef3c:	e014      	b.n	800ef68 <CO_GTWA_process+0x1444>
            } else if (strcmp(tok, "communication") == 0) {
 800ef3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef42:	497d      	ldr	r1, [pc, #500]	; (800f138 <CO_GTWA_process+0x1614>)
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f1 f943 	bl	80001d0 <strcmp>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d103      	bne.n	800ef58 <CO_GTWA_process+0x1434>
                command2 = CO_NMT_RESET_COMMUNICATION;
 800ef50:	2382      	movs	r3, #130	; 0x82
 800ef52:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800ef56:	e007      	b.n	800ef68 <CO_GTWA_process+0x1444>
            } else {
                err = true;
 800ef58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ef60:	2201      	movs	r2, #1
 800ef62:	601a      	str	r2, [r3, #0]
                break;
 800ef64:	f001 b805 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800ef68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800ef76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef7a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	7d1a      	ldrb	r2, [r3, #20]
 800ef82:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800ef86:	4619      	mov	r1, r3
 800ef88:	f7f3 f9ed 	bl	8002366 <CO_NMT_sendCommand>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            if (ret == CO_ERROR_NO) {
 800ef92:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d108      	bne.n	800efac <CO_GTWA_process+0x1488>
                responseWithOK(gtwa);
 800ef9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800efa2:	6818      	ldr	r0, [r3, #0]
 800efa4:	f7fe fd22 	bl	800d9ec <responseWithOK>
 800efa8:	f000 bf8c 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800efac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efb0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800efb4:	2266      	movs	r2, #102	; 0x66
 800efb6:	801a      	strh	r2, [r3, #0]
                err = true;
 800efb8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800efc0:	2201      	movs	r2, #1
 800efc2:	601a      	str	r2, [r3, #0]
                break;
 800efc4:	f000 bfd5 	b.w	800ff72 <CO_GTWA_process+0x244e>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_NMT */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        /* Switch state global command - 'lss_switch_glob <0|1>' */
        else if (tok_is_lss_switch_glob) {
 800efc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 8081 	beq.w	800f0d4 <CO_GTWA_process+0x15b0>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800efd2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800efd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800efde:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	f7fe fbc8 	bl	800d778 <checkNet>
 800efe8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
            uint8_t select;

            if ((closed != 0U) || NodeErr) {
 800efec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eff0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d103      	bne.n	800f002 <CO_GTWA_process+0x14de>
 800effa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800effe:	2b00      	cmp	r3, #0
 800f000:	d007      	beq.n	800f012 <CO_GTWA_process+0x14ee>
                err = true;
 800f002:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f006:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f00a:	2201      	movs	r2, #1
 800f00c:	601a      	str	r2, [r3, #0]
                break;
 800f00e:	f000 bfb0 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f012:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f016:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f01a:	2201      	movs	r2, #1
 800f01c:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f01e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f022:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f103 0018 	add.w	r0, r3, #24
 800f02c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f030:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	4613      	mov	r3, r2
 800f03c:	2214      	movs	r2, #20
 800f03e:	f7fa ff25 	bl	8009e8c <CO_fifo_readToken>
            select = (uint8_t)getU32(tok, 0, 1, &err);
 800f042:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f046:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f04a:	2201      	movs	r2, #1
 800f04c:	2100      	movs	r1, #0
 800f04e:	f7fe fb30 	bl	800d6b2 <getU32>
 800f052:	4603      	mov	r3, r0
 800f054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            if (err) {
 800f058:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f05c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f040 875a 	bne.w	800ff1c <CO_GTWA_process+0x23f8>
                break;
            }

            if (select == 0U) {
 800f068:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d127      	bne.n	800f0c0 <CO_GTWA_process+0x159c>
                /* send non-confirmed message */
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateDeselect(gtwa->LSSmaster);
 800f070:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f074:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fd f8b2 	bl	800c1e8 <CO_LSSmaster_swStateDeselect>
 800f084:	4603      	mov	r3, r0
 800f086:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
                if (ret == CO_LSSmaster_OK) {
 800f08a:	f997 3116 	ldrsb.w	r3, [r7, #278]	; 0x116
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d108      	bne.n	800f0a4 <CO_GTWA_process+0x1580>
                    responseWithOK(gtwa);
 800f092:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f096:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	f7fe fca6 	bl	800d9ec <responseWithOK>
 800f0a0:	f000 bf10 	b.w	800fec4 <CO_GTWA_process+0x23a0>
                } else {
                    respErrorCode = CO_GTWA_respErrorInternalState;
 800f0a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f0ac:	2266      	movs	r2, #102	; 0x66
 800f0ae:	801a      	strh	r2, [r3, #0]
                    err = true;
 800f0b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	601a      	str	r2, [r3, #0]
                    break;
 800f0bc:	f000 bf59 	b.w	800ff72 <CO_GTWA_process+0x244e>
                }
            } else {
                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_SWITCH_GLOB;
 800f0c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f0d0:	f000 bef8 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            }
        }
        /* Switch state selective command -
         * 'lss_switch_sel <vendorID> <product code> <revisionNo> <serialNo>' */
        else if (tok_is_lss_switch_sel) {
 800f0d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 80e1 	beq.w	800f2a0 <CO_GTWA_process+0x177c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f0de:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f0e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f0ea:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f0ee:	6818      	ldr	r0, [r3, #0]
 800f0f0:	f7fe fb42 	bl	800d778 <checkNet>
 800f0f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            CO_LSS_address_t* addr = &gtwa->lssAddress;
 800f0f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800f106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            if ((closed != 0U) || NodeErr) {
 800f10a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f10e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d103      	bne.n	800f120 <CO_GTWA_process+0x15fc>
 800f118:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00d      	beq.n	800f13c <CO_GTWA_process+0x1618>
                err = true;
 800f120:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f124:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f128:	2201      	movs	r2, #1
 800f12a:	601a      	str	r2, [r3, #0]
                break;
 800f12c:	f000 bf21 	b.w	800ff72 <CO_GTWA_process+0x244e>
 800f130:	08021a64 	.word	0x08021a64
 800f134:	08021a84 	.word	0x08021a84
 800f138:	08021a8c 	.word	0x08021a8c
            }

            /* get values */
            closed = 0U;
 800f13c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f140:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f144:	2200      	movs	r2, #0
 800f146:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f148:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f14c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f103 0018 	add.w	r0, r3, #24
 800f156:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f15a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f15e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	4613      	mov	r3, r2
 800f166:	2214      	movs	r2, #20
 800f168:	f7fa fe90 	bl	8009e8c <CO_fifo_readToken>
            addr->identity.vendorID = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f16c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f170:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f174:	f04f 32ff 	mov.w	r2, #4294967295
 800f178:	2100      	movs	r1, #0
 800f17a:	f7fe fa9a 	bl	800d6b2 <getU32>
 800f17e:	4602      	mov	r2, r0
 800f180:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f184:	601a      	str	r2, [r3, #0]
            if (err) {
 800f186:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f18a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	f040 86c5 	bne.w	800ff20 <CO_GTWA_process+0x23fc>
                break;
            }

            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f196:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f19a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f103 0018 	add.w	r0, r3, #24
 800f1a4:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f1a8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f1ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	2214      	movs	r2, #20
 800f1b6:	f7fa fe69 	bl	8009e8c <CO_fifo_readToken>
            addr->identity.productCode = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f1ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f1be:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	f7fe fa73 	bl	800d6b2 <getU32>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f1d2:	605a      	str	r2, [r3, #4]
            if (err) {
 800f1d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f040 86a0 	bne.w	800ff24 <CO_GTWA_process+0x2400>
                break;
            }

            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f1e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f103 0018 	add.w	r0, r3, #24
 800f1f2:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f1f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f1fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	4613      	mov	r3, r2
 800f202:	2214      	movs	r2, #20
 800f204:	f7fa fe42 	bl	8009e8c <CO_fifo_readToken>
            addr->identity.revisionNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f208:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f20c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f210:	f04f 32ff 	mov.w	r2, #4294967295
 800f214:	2100      	movs	r1, #0
 800f216:	f7fe fa4c 	bl	800d6b2 <getU32>
 800f21a:	4602      	mov	r2, r0
 800f21c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f220:	609a      	str	r2, [r3, #8]
            if (err) {
 800f222:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f226:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f040 867b 	bne.w	800ff28 <CO_GTWA_process+0x2404>
                break;
            }

            closed = 1U;
 800f232:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f236:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f23a:	2201      	movs	r2, #1
 800f23c:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f23e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f242:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f103 0018 	add.w	r0, r3, #24
 800f24c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f250:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f254:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	4613      	mov	r3, r2
 800f25c:	2214      	movs	r2, #20
 800f25e:	f7fa fe15 	bl	8009e8c <CO_fifo_readToken>
            addr->identity.serialNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f262:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f266:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f26a:	f04f 32ff 	mov.w	r2, #4294967295
 800f26e:	2100      	movs	r1, #0
 800f270:	f7fe fa1f 	bl	800d6b2 <getU32>
 800f274:	4602      	mov	r2, r0
 800f276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f27a:	60da      	str	r2, [r3, #12]
            if (err) {
 800f27c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f280:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	f040 8650 	bne.w	800ff2c <CO_GTWA_process+0x2408>
                break;
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_SWITCH_SEL;
 800f28c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f290:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2221      	movs	r2, #33	; 0x21
 800f298:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f29c:	f000 be12 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* LSS configure node-ID command - 'lss_set_node <node>' */
        else if (tok_is_lss_set_node) {
 800f2a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d073      	beq.n	800f390 <CO_GTWA_process+0x186c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f2a8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f2ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f2b4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f2b8:	6818      	ldr	r0, [r3, #0]
 800f2ba:	f7fe fa5d 	bl	800d778 <checkNet>
 800f2be:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

            if ((closed != 0U) || NodeErr) {
 800f2c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2c6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d103      	bne.n	800f2d8 <CO_GTWA_process+0x17b4>
 800f2d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d007      	beq.n	800f2e8 <CO_GTWA_process+0x17c4>
                err = true;
 800f2d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]
                break;
 800f2e4:	f000 be45 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f2e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2ec:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f2f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f103 0018 	add.w	r0, r3, #24
 800f302:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f306:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f30a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4613      	mov	r3, r2
 800f312:	2214      	movs	r2, #20
 800f314:	f7fa fdba 	bl	8009e8c <CO_fifo_readToken>
            gtwa->lssNID = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800f318:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f31c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f320:	22ff      	movs	r2, #255	; 0xff
 800f322:	2100      	movs	r1, #0
 800f324:	f7fe f9c5 	bl	800d6b2 <getU32>
 800f328:	4603      	mov	r3, r0
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f330:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
            if ((gtwa->lssNID > 0x7FU) && (gtwa->lssNID < 0xFFU)) {
 800f33a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f33e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800f348:	b25b      	sxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	da0e      	bge.n	800f36c <CO_GTWA_process+0x1848>
 800f34e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f352:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800f35c:	2bff      	cmp	r3, #255	; 0xff
 800f35e:	d005      	beq.n	800f36c <CO_GTWA_process+0x1848>
                err = true;
 800f360:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f364:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f368:	2201      	movs	r2, #1
 800f36a:	601a      	str	r2, [r3, #0]
            }
            if (err) {
 800f36c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f370:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f040 85da 	bne.w	800ff30 <CO_GTWA_process+0x240c>
                break;
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_SET_NODE;
 800f37c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f380:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2222      	movs	r2, #34	; 0x22
 800f388:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f38c:	f000 bd9a 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* LSS configure bit-rate command -
         * 'lss_conf_bitrate <table_selector=0> <table_index>'
         * table_index: 0=1000 kbit/s, 1=800 kbit/s, 2=500 kbit/s, 3=250 kbit/s,
         *   4=125 kbit/s, 6=50 kbit/s, 7=20 kbit/s, 8=10 kbit/s, 9=auto */
        else if (tok_is_lss_conf_bitrate) {
 800f390:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 808f 	beq.w	800f4b8 <CO_GTWA_process+0x1994>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f39a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f39e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f3a6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f3aa:	6818      	ldr	r0, [r3, #0]
 800f3ac:	f7fe f9e4 	bl	800d778 <checkNet>
 800f3b0:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            uint8_t tableIndex;
            uint32_t maxIndex = (sizeof(CO_LSS_bitTimingTableLookup) / sizeof(CO_LSS_bitTimingTableLookup[0])) - 1U;
 800f3b4:	2309      	movs	r3, #9
 800f3b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if ((closed != 0U) || NodeErr) {
 800f3ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3be:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d103      	bne.n	800f3d0 <CO_GTWA_process+0x18ac>
 800f3c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d007      	beq.n	800f3e0 <CO_GTWA_process+0x18bc>
                err = true;
 800f3d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f3d8:	2201      	movs	r2, #1
 800f3da:	601a      	str	r2, [r3, #0]
                break;
 800f3dc:	f000 bdc9 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* First parameter is table selector. We only support the CiA bit timing table from CiA301 ("0") */
            closed = 0U;
 800f3e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3e4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f3ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f103 0018 	add.w	r0, r3, #24
 800f3fa:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f3fe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f402:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	4613      	mov	r3, r2
 800f40a:	2214      	movs	r2, #20
 800f40c:	f7fa fd3e 	bl	8009e8c <CO_fifo_readToken>
            (void)getU32(tok, 0, 0, &err);
 800f410:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f414:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f418:	2200      	movs	r2, #0
 800f41a:	2100      	movs	r1, #0
 800f41c:	f7fe f949 	bl	800d6b2 <getU32>

            /* get value */
            closed = 1U;
 800f420:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f424:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f428:	2201      	movs	r2, #1
 800f42a:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f42c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f430:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f103 0018 	add.w	r0, r3, #24
 800f43a:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f43e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f442:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	4613      	mov	r3, r2
 800f44a:	2214      	movs	r2, #20
 800f44c:	f7fa fd1e 	bl	8009e8c <CO_fifo_readToken>
            tableIndex = (uint8_t)getU32(tok, 0, maxIndex, &err);
 800f450:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f454:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f458:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800f45c:	2100      	movs	r1, #0
 800f45e:	f7fe f928 	bl	800d6b2 <getU32>
 800f462:	4603      	mov	r3, r0
 800f464:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            if (tableIndex == 5U) {
 800f468:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f46c:	2b05      	cmp	r3, #5
 800f46e:	d105      	bne.n	800f47c <CO_GTWA_process+0x1958>
                err = true;
 800f470:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f474:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f478:	2201      	movs	r2, #1
 800f47a:	601a      	str	r2, [r3, #0]
            }
            if (err) {
 800f47c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f480:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f040 8554 	bne.w	800ff34 <CO_GTWA_process+0x2410>
                break;
            }
            gtwa->lssBitrate = CO_LSS_bitTimingTableLookup[tableIndex];
 800f48c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f490:	4ad0      	ldr	r2, [pc, #832]	; (800f7d4 <CO_GTWA_process+0x1cb0>)
 800f492:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f496:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f49a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_CONF_BITRATE;
 800f4a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2223      	movs	r2, #35	; 0x23
 800f4b0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f4b4:	f000 bd06 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* LSS activate new bit-rate command -
         * 'lss_activate_bitrate <switch_delay_ms>' */
        else if (tok_is_lss_activate_bitrate) {
 800f4b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d076      	beq.n	800f5ae <CO_GTWA_process+0x1a8a>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f4c0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f4c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f4cc:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f7fe f951 	bl	800d778 <checkNet>
 800f4d6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
            uint16_t switchDelay;
            CO_LSSmaster_return_t ret;

            if ((closed != 0U) || NodeErr) {
 800f4da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4de:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d103      	bne.n	800f4f0 <CO_GTWA_process+0x19cc>
 800f4e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d007      	beq.n	800f500 <CO_GTWA_process+0x19dc>
                err = true;
 800f4f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	601a      	str	r2, [r3, #0]
                break;
 800f4fc:	f000 bd39 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f500:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f504:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f508:	2201      	movs	r2, #1
 800f50a:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f50c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f510:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f103 0018 	add.w	r0, r3, #24
 800f51a:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f51e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f522:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	4613      	mov	r3, r2
 800f52a:	2214      	movs	r2, #20
 800f52c:	f7fa fcae 	bl	8009e8c <CO_fifo_readToken>
            switchDelay = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800f530:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f534:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f53c:	2100      	movs	r1, #0
 800f53e:	f7fe f8b8 	bl	800d6b2 <getU32>
 800f542:	4603      	mov	r3, r0
 800f544:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if (err) {
 800f548:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f54c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	f040 84f0 	bne.w	800ff38 <CO_GTWA_process+0x2414>
                break;
            }

            /* send non-confirmed message */
            ret = CO_LSSmaster_ActivateBit(gtwa->LSSmaster, switchDelay);
 800f558:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f55c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f566:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800f56a:	4611      	mov	r1, r2
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fd f816 	bl	800c59e <CO_LSSmaster_ActivateBit>
 800f572:	4603      	mov	r3, r0
 800f574:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
            if (ret == CO_LSSmaster_OK) {
 800f578:	f997 3135 	ldrsb.w	r3, [r7, #309]	; 0x135
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d108      	bne.n	800f592 <CO_GTWA_process+0x1a6e>
                responseWithOK(gtwa);
 800f580:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f584:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	f7fe fa2f 	bl	800d9ec <responseWithOK>
 800f58e:	f000 bc99 	b.w	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f592:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f596:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f59a:	2266      	movs	r2, #102	; 0x66
 800f59c:	801a      	strh	r2, [r3, #0]
                err = true;
 800f59e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	601a      	str	r2, [r3, #0]
                break;
 800f5aa:	f000 bce2 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }
        }
        /* LSS store configuration command - 'lss_store' */
        else if (tok_is_lss_store) {
 800f5ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d029      	beq.n	800f60a <CO_GTWA_process+0x1ae6>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f5b6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f5ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f5c2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	f7fe f8d6 	bl	800d778 <checkNet>
 800f5cc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

            if ((closed != 1U) || NodeErr) {
 800f5d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5d4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d103      	bne.n	800f5e6 <CO_GTWA_process+0x1ac2>
 800f5de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d007      	beq.n	800f5f6 <CO_GTWA_process+0x1ad2>
                err = true;
 800f5e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	601a      	str	r2, [r3, #0]
                break;
 800f5f2:	f000 bcbe 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_STORE;
 800f5f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2224      	movs	r2, #36	; 0x24
 800f602:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f606:	f000 bc5d 	b.w	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* Inquire LSS address command - 'lss_inquire_addr [<LSSSUB=0..3>]' */
        else if (tok_is_lss_inquire_addr) {
 800f60a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 808c 	beq.w	800f72c <CO_GTWA_process+0x1c08>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f614:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f618:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f61c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f620:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f624:	6818      	ldr	r0, [r3, #0]
 800f626:	f7fe f8a7 	bl	800d778 <checkNet>
 800f62a:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144

            if (NodeErr) {
 800f62e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f632:	2b00      	cmp	r3, #0
 800f634:	d007      	beq.n	800f646 <CO_GTWA_process+0x1b22>
                err = true;
 800f636:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f63a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f63e:	2201      	movs	r2, #1
 800f640:	601a      	str	r2, [r3, #0]
                break;
 800f642:	f000 bc96 	b.w	800ff72 <CO_GTWA_process+0x244e>
            }

            if (closed == 0U) {
 800f646:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f64a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d162      	bne.n	800f71a <CO_GTWA_process+0x1bf6>
                uint8_t lsssub;
                /* get value */
                closed = 1U;
 800f654:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f658:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f65c:	2201      	movs	r2, #1
 800f65e:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f660:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f664:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f103 0018 	add.w	r0, r3, #24
 800f66e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f672:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f676:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	4613      	mov	r3, r2
 800f67e:	2214      	movs	r2, #20
 800f680:	f7fa fc04 	bl	8009e8c <CO_fifo_readToken>
                lsssub = (uint8_t)getU32(tok, 0, 3, &err);
 800f684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f688:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f68c:	2203      	movs	r2, #3
 800f68e:	2100      	movs	r1, #0
 800f690:	f7fe f80f 	bl	800d6b2 <getU32>
 800f694:	4603      	mov	r3, r0
 800f696:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
                if (err) {
 800f69a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f69e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f040 8449 	bne.w	800ff3c <CO_GTWA_process+0x2418>
                    break;
                }
                switch (lsssub) {
 800f6aa:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d018      	beq.n	800f6e4 <CO_GTWA_process+0x1bc0>
 800f6b2:	2b02      	cmp	r3, #2
 800f6b4:	dc1f      	bgt.n	800f6f6 <CO_GTWA_process+0x1bd2>
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <CO_GTWA_process+0x1b9c>
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d009      	beq.n	800f6d2 <CO_GTWA_process+0x1bae>
 800f6be:	e01a      	b.n	800f6f6 <CO_GTWA_process+0x1bd2>
                    case 0: gtwa->lssInquireCs = CO_LSS_INQUIRE_VENDOR; break;
 800f6c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	225a      	movs	r2, #90	; 0x5a
 800f6cc:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800f6d0:	e01a      	b.n	800f708 <CO_GTWA_process+0x1be4>
                    case 1: gtwa->lssInquireCs = CO_LSS_INQUIRE_PRODUCT; break;
 800f6d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	225b      	movs	r2, #91	; 0x5b
 800f6de:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800f6e2:	e011      	b.n	800f708 <CO_GTWA_process+0x1be4>
                    case 2: gtwa->lssInquireCs = CO_LSS_INQUIRE_REV; break;
 800f6e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	225c      	movs	r2, #92	; 0x5c
 800f6f0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800f6f4:	e008      	b.n	800f708 <CO_GTWA_process+0x1be4>
                    default: gtwa->lssInquireCs = CO_LSS_INQUIRE_SERIAL; break;
 800f6f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	225d      	movs	r2, #93	; 0x5d
 800f702:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800f706:	bf00      	nop
                }

                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_INQUIRE;
 800f708:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f70c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2225      	movs	r2, #37	; 0x25
 800f714:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f718:	e3d4      	b.n	800fec4 <CO_GTWA_process+0x23a0>
            } else {
                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_INQUIRE_ADDR_ALL;
 800f71a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f71e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2226      	movs	r2, #38	; 0x26
 800f726:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f72a:	e3cb      	b.n	800fec4 <CO_GTWA_process+0x23a0>
            }
        }
        /* LSS inquire node-ID command - 'lss_get_node' */
        else if (tok_is_lss_get_node) {
 800f72c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f730:	2b00      	cmp	r3, #0
 800f732:	d02f      	beq.n	800f794 <CO_GTWA_process+0x1c70>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f734:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f738:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f73c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f740:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f744:	6818      	ldr	r0, [r3, #0]
 800f746:	f7fe f817 	bl	800d778 <checkNet>
 800f74a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148

            if ((closed != 1U) || NodeErr) {
 800f74e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f752:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d103      	bne.n	800f764 <CO_GTWA_process+0x1c40>
 800f75c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f760:	2b00      	cmp	r3, #0
 800f762:	d006      	beq.n	800f772 <CO_GTWA_process+0x1c4e>
                err = true;
 800f764:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f768:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f76c:	2201      	movs	r2, #1
 800f76e:	601a      	str	r2, [r3, #0]
                break;
 800f770:	e3ff      	b.n	800ff72 <CO_GTWA_process+0x244e>
            }

            /* continue with state machine */
            gtwa->lssInquireCs = CO_LSS_INQUIRE_NODE_ID;
 800f772:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f776:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	225e      	movs	r2, #94	; 0x5e
 800f77e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
            gtwa->state = CO_GTWA_ST_LSS_INQUIRE;
 800f782:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f786:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2225      	movs	r2, #37	; 0x25
 800f78e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f792:	e397      	b.n	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* LSS identify fastscan. This is a manufacturer specific command as
         * the one in DSP309 is quite useless - '_lss_fastscan [<timeout_ms>]' */
        else if (tok_is__lss_fastscan) {
 800f794:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d079      	beq.n	800f890 <CO_GTWA_process+0x1d6c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f79c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f7a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f7a8:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f7ac:	6818      	ldr	r0, [r3, #0]
 800f7ae:	f7fd ffe3 	bl	800d778 <checkNet>
 800f7b2:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            uint16_t timeout_ms = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba

            if (NodeErr) {
 800f7bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <CO_GTWA_process+0x1cb4>
                err = true;
 800f7c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	601a      	str	r2, [r3, #0]
                break;
 800f7d0:	e3cf      	b.n	800ff72 <CO_GTWA_process+0x244e>
 800f7d2:	bf00      	nop
 800f7d4:	080220e4 	.word	0x080220e4
            }

            if (closed == 0U) {
 800f7d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7dc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d12b      	bne.n	800f83e <CO_GTWA_process+0x1d1a>
                /* get value */
                closed = 1U;
 800f7e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7ea:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f7f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f103 0018 	add.w	r0, r3, #24
 800f800:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f804:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f808:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	4613      	mov	r3, r2
 800f810:	2214      	movs	r2, #20
 800f812:	f7fa fb3b 	bl	8009e8c <CO_fifo_readToken>
                timeout_ms = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800f816:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f81a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f822:	2100      	movs	r1, #0
 800f824:	f7fd ff45 	bl	800d6b2 <getU32>
 800f828:	4603      	mov	r3, r0
 800f82a:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
                if (err) {
 800f82e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f832:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f040 8381 	bne.w	800ff40 <CO_GTWA_process+0x241c>
                    break;
                }
            }

            /* If timeout not specified, use 100ms. Should work in most cases */
            if (timeout_ms == 0U) {
 800f83e:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 800f842:	2b00      	cmp	r3, #0
 800f844:	d102      	bne.n	800f84c <CO_GTWA_process+0x1d28>
                timeout_ms = 100;
 800f846:	2364      	movs	r3, #100	; 0x64
 800f848:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
            }
            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, timeout_ms);
 800f84c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f850:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f85a:	f8b7 21ba 	ldrh.w	r2, [r7, #442]	; 0x1ba
 800f85e:	4611      	mov	r1, r2
 800f860:	4618      	mov	r0, r3
 800f862:	f7fc fba7 	bl	800bfb4 <CO_LSSmaster_changeTimeout>

            /* prepare lssFastscan, all zero */
            (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800f866:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f86a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f874:	2224      	movs	r2, #36	; 0x24
 800f876:	2100      	movs	r1, #0
 800f878:	4618      	mov	r0, r3
 800f87a:	f00f fcf3 	bl	801f264 <memset>

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST__LSS_FASTSCAN;
 800f87e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f882:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2230      	movs	r2, #48	; 0x30
 800f88a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f88e:	e319      	b.n	800fec4 <CO_GTWA_process+0x23a0>
        }
        /* LSS complete node-ID configuration command - 'lss_allnodes
         * [<timeout_ms> [<nodeStart=1..127> <store=0|1>
         * <scanType0=0..2> <vendorId> <scanType1=0..2> <productCode>
         * <scanType2=0..2> <revisionNo> <scanType3=0..2> <serialNo>]]' */
        else if (tok_is_lss_allnodes) {
 800f890:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f894:	2b00      	cmp	r3, #0
 800f896:	f000 826f 	beq.w	800fd78 <CO_GTWA_process+0x2254>
             * If 127 is reached, the process is stopped, no matter if there are nodes remaining or not.
             * - No IDs are assigned because:
             *   - the given criteria do not match any node,
             *   - all nodes are already configured.
             * This function needs that no node is selected when starting the scan process. */
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f89a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f89e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f8a6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f8aa:	6818      	ldr	r0, [r3, #0]
 800f8ac:	f7fd ff64 	bl	800d778 <checkNet>
 800f8b0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
            uint16_t timeout_ms = 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8

            if (NodeErr) {
 800f8ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d006      	beq.n	800f8d0 <CO_GTWA_process+0x1dac>
                err = true;
 800f8c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	601a      	str	r2, [r3, #0]
                break;
 800f8ce:	e350      	b.n	800ff72 <CO_GTWA_process+0x244e>
            }

            if (closed == 0U) {
 800f8d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8d4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d12b      	bne.n	800f936 <CO_GTWA_process+0x1e12>
                /* get optional token timeout (non standard) */
                closed = 0xFFU;
 800f8de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f8e6:	22ff      	movs	r2, #255	; 0xff
 800f8e8:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f8ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f103 0018 	add.w	r0, r3, #24
 800f8f8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f8fc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4613      	mov	r3, r2
 800f908:	2214      	movs	r2, #20
 800f90a:	f7fa fabf 	bl	8009e8c <CO_fifo_readToken>
                timeout_ms = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800f90e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f912:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f91a:	2100      	movs	r1, #0
 800f91c:	f7fd fec9 	bl	800d6b2 <getU32>
 800f920:	4603      	mov	r3, r0
 800f922:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
                if (err) {
 800f926:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f92a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	f040 8307 	bne.w	800ff44 <CO_GTWA_process+0x2420>
                    break;
                }
            }
            /* If timeout not specified, use 100ms. Should work in most cases */
            gtwa->lssTimeout_ms = (timeout_ms == 0U) ? 100U : timeout_ms;
 800f936:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d002      	beq.n	800f944 <CO_GTWA_process+0x1e20>
 800f93e:	f8b7 21b8 	ldrh.w	r2, [r7, #440]	; 0x1b8
 800f942:	e000      	b.n	800f946 <CO_GTWA_process+0x1e22>
 800f944:	2264      	movs	r2, #100	; 0x64
 800f946:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f94a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, gtwa->lssTimeout_ms);
 800f954:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f958:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 800f962:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f966:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800f970:	4619      	mov	r1, r3
 800f972:	4610      	mov	r0, r2
 800f974:	f7fc fb1e 	bl	800bfb4 <CO_LSSmaster_changeTimeout>
            gtwa->lssNodeCount = 0;
 800f978:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f97c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            gtwa->lssSubState = 0;
 800f988:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f98c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238

            if (closed == 1U) {
 800f998:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f99c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d11b      	bne.n	800f9de <CO_GTWA_process+0x1eba>
                /* No other arguments, as by CiA specification for this command. Do full scan. */
                /* use start node ID 2. Should work in most cases */
                gtwa->lssNID = 2;
 800f9a6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9aa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                /* store node ID in node's NVM */
                gtwa->lssStore = true;
 800f9b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
                /* prepare lssFastscan, all zero */
                (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800f9c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f9d4:	2224      	movs	r2, #36	; 0x24
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f00f fc43 	bl	801f264 <memset>
            }
            if (closed == 0U) {
 800f9de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d16d      	bne.n	800fac8 <CO_GTWA_process+0x1fa4>
                /* more arguments follow */
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f9ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f103 0018 	add.w	r0, r3, #24
 800f9fa:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f9fe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fa02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	2214      	movs	r2, #20
 800fa0c:	f7fa fa3e 	bl	8009e8c <CO_fifo_readToken>
                gtwa->lssNID = (uint8_t)getU32(tok, 1, 127, &err);
 800fa10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa14:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fa18:	227f      	movs	r2, #127	; 0x7f
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	f7fd fe49 	bl	800d6b2 <getU32>
 800fa20:	4603      	mov	r3, r0
 800fa22:	b2da      	uxtb	r2, r3
 800fa24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                if (err) {
 800fa32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa36:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f040 8283 	bne.w	800ff48 <CO_GTWA_process+0x2424>
                    break;
                }

                closed = 0xFFU;
 800fa42:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa46:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fa4a:	22ff      	movs	r2, #255	; 0xff
 800fa4c:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fa4e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa52:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f103 0018 	add.w	r0, r3, #24
 800fa5c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fa60:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fa64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	2214      	movs	r2, #20
 800fa6e:	f7fa fa0d 	bl	8009e8c <CO_fifo_readToken>
                gtwa->lssStore = (bool_t)getU32(tok, 0, 1, &err);
 800fa72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa76:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	f7fd fe18 	bl	800d6b2 <getU32>
 800fa82:	4602      	mov	r2, r0
 800fa84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
                if (err) {
 800fa92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f040 8255 	bne.w	800ff4c <CO_GTWA_process+0x2428>
                    break;
                }

                if (closed == 1U) {
 800faa2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800faa6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d10b      	bne.n	800fac8 <CO_GTWA_process+0x1fa4>
                    /* No other arguments, prepare lssFastscan, all zero */
                    (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800fab0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fab4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fabe:	2224      	movs	r2, #36	; 0x24
 800fac0:	2100      	movs	r1, #0
 800fac2:	4618      	mov	r0, r3
 800fac4:	f00f fbce 	bl	801f264 <memset>
                }
            }
            if (closed == 0U) {
 800fac8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800facc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f040 8147 	bne.w	800fd66 <CO_GTWA_process+0x2242>
                /* more arguments follow */
                CO_LSSmaster_fastscan_t* fs = &gtwa->lssFastscan;
 800fad8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fadc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fae6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800faea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800faee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f103 0018 	add.w	r0, r3, #24
 800faf8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fafc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fb00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	4613      	mov	r3, r2
 800fb08:	2214      	movs	r2, #20
 800fb0a:	f7fa f9bf 	bl	8009e8c <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_VENDOR_ID] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800fb0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb12:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fb16:	2202      	movs	r2, #2
 800fb18:	2100      	movs	r1, #0
 800fb1a:	f7fd fdca 	bl	800d6b2 <getU32>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fb26:	701a      	strb	r2, [r3, #0]
                if (err) {
 800fb28:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f040 820c 	bne.w	800ff50 <CO_GTWA_process+0x242c>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fb38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb3c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f103 0018 	add.w	r0, r3, #24
 800fb46:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fb4a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fb4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	4613      	mov	r3, r2
 800fb56:	2214      	movs	r2, #20
 800fb58:	f7fa f998 	bl	8009e8c <CO_fifo_readToken>
                fs->match.identity.vendorID = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800fb5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb60:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fb64:	f04f 32ff 	mov.w	r2, #4294967295
 800fb68:	2100      	movs	r1, #0
 800fb6a:	f7fd fda2 	bl	800d6b2 <getU32>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fb74:	605a      	str	r2, [r3, #4]
                if (err) {
 800fb76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f040 81e7 	bne.w	800ff54 <CO_GTWA_process+0x2430>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fb86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f103 0018 	add.w	r0, r3, #24
 800fb94:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fb98:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fb9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	4613      	mov	r3, r2
 800fba4:	2214      	movs	r2, #20
 800fba6:	f7fa f971 	bl	8009e8c <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_PRODUCT] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800fbaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fbae:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	f7fd fd7c 	bl	800d6b2 <getU32>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	b2da      	uxtb	r2, r3
 800fbbe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fbc2:	705a      	strb	r2, [r3, #1]
                if (err) {
 800fbc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fbc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f040 81c2 	bne.w	800ff58 <CO_GTWA_process+0x2434>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fbd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fbd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f103 0018 	add.w	r0, r3, #24
 800fbe2:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fbe6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fbea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	2214      	movs	r2, #20
 800fbf4:	f7fa f94a 	bl	8009e8c <CO_fifo_readToken>
                fs->match.identity.productCode = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800fbf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fbfc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fc00:	f04f 32ff 	mov.w	r2, #4294967295
 800fc04:	2100      	movs	r1, #0
 800fc06:	f7fd fd54 	bl	800d6b2 <getU32>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fc10:	609a      	str	r2, [r3, #8]
                if (err) {
 800fc12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f040 819d 	bne.w	800ff5c <CO_GTWA_process+0x2438>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fc22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f103 0018 	add.w	r0, r3, #24
 800fc30:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fc34:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fc38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	2214      	movs	r2, #20
 800fc42:	f7fa f923 	bl	8009e8c <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_REV] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800fc46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc4a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fc4e:	2202      	movs	r2, #2
 800fc50:	2100      	movs	r1, #0
 800fc52:	f7fd fd2e 	bl	800d6b2 <getU32>
 800fc56:	4603      	mov	r3, r0
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fc5e:	709a      	strb	r2, [r3, #2]
                if (err) {
 800fc60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 8178 	bne.w	800ff60 <CO_GTWA_process+0x243c>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fc70:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f103 0018 	add.w	r0, r3, #24
 800fc7e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fc82:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fc86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	2214      	movs	r2, #20
 800fc90:	f7fa f8fc 	bl	8009e8c <CO_fifo_readToken>
                fs->match.identity.revisionNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800fc94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc98:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fca0:	2100      	movs	r1, #0
 800fca2:	f7fd fd06 	bl	800d6b2 <getU32>
 800fca6:	4602      	mov	r2, r0
 800fca8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fcac:	60da      	str	r2, [r3, #12]
                if (err) {
 800fcae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fcb2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f040 8153 	bne.w	800ff64 <CO_GTWA_process+0x2440>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fcbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fcc2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f103 0018 	add.w	r0, r3, #24
 800fccc:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fcd0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fcd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	2214      	movs	r2, #20
 800fcde:	f7fa f8d5 	bl	8009e8c <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_SERIAL] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800fce2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fce6:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fcea:	2202      	movs	r2, #2
 800fcec:	2100      	movs	r1, #0
 800fcee:	f7fd fce0 	bl	800d6b2 <getU32>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fcfa:	70da      	strb	r2, [r3, #3]
                if (err) {
 800fcfc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f040 812e 	bne.w	800ff68 <CO_GTWA_process+0x2444>
                    break;
                }

                closed = 1U;
 800fd0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd10:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fd14:	2201      	movs	r2, #1
 800fd16:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fd18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f103 0018 	add.w	r0, r3, #24
 800fd26:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fd2a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fd2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	4613      	mov	r3, r2
 800fd36:	2214      	movs	r2, #20
 800fd38:	f7fa f8a8 	bl	8009e8c <CO_fifo_readToken>
                fs->match.identity.serialNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800fd3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd40:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fd44:	f04f 32ff 	mov.w	r2, #4294967295
 800fd48:	2100      	movs	r1, #0
 800fd4a:	f7fd fcb2 	bl	800d6b2 <getU32>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fd54:	611a      	str	r2, [r3, #16]
                if (err) {
 800fd56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f040 8103 	bne.w	800ff6c <CO_GTWA_process+0x2448>
                    break;
                }
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_ALLNODES;
 800fd66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd6a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2231      	movs	r2, #49	; 0x31
 800fd72:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fd76:	e0a5      	b.n	800fec4 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
        /* Print help */
        else if (tok_is_help) {
 800fd78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d071      	beq.n	800fe64 <CO_GTWA_process+0x2340>
            if (closed == 1U) {
 800fd80:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd84:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d108      	bne.n	800fda0 <CO_GTWA_process+0x227c>
                gtwa->helpString = CO_GTWA_helpString;
 800fd8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a94      	ldr	r2, [pc, #592]	; (800ffec <CO_GTWA_process+0x24c8>)
 800fd9a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800fd9e:	e050      	b.n	800fe42 <CO_GTWA_process+0x231e>
            } else {
                /* get second token */
                closed = 1U;
 800fda0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fda4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fda8:	2201      	movs	r2, #1
 800fdaa:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fdac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f103 0018 	add.w	r0, r3, #24
 800fdba:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fdbe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fdc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	2214      	movs	r2, #20
 800fdcc:	f7fa f85e 	bl	8009e8c <CO_fifo_readToken>
                if (err) {
 800fdd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f040 80c8 	bne.w	800ff70 <CO_GTWA_process+0x244c>
                    break;
                }

                convertToLower(tok, sizeof(tok));
 800fde0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fde4:	2114      	movs	r1, #20
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fe66 	bl	800dab8 <convertToLower>
                if (strcmp(tok, "datatype") == 0) {
 800fdec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fdf0:	497f      	ldr	r1, [pc, #508]	; (800fff0 <CO_GTWA_process+0x24cc>)
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f0 f9ec 	bl	80001d0 <strcmp>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d108      	bne.n	800fe10 <CO_GTWA_process+0x22ec>
                    gtwa->helpString = CO_GTWA_helpStringDatatypes;
 800fdfe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a7a      	ldr	r2, [pc, #488]	; (800fff4 <CO_GTWA_process+0x24d0>)
 800fe0a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800fe0e:	e018      	b.n	800fe42 <CO_GTWA_process+0x231e>
                } else if (strcmp(tok, "lss") == 0) {
 800fe10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fe14:	4978      	ldr	r1, [pc, #480]	; (800fff8 <CO_GTWA_process+0x24d4>)
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7f0 f9da 	bl	80001d0 <strcmp>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d108      	bne.n	800fe34 <CO_GTWA_process+0x2310>
                    gtwa->helpString = CO_GTWA_helpStringLss;
 800fe22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a73      	ldr	r2, [pc, #460]	; (800fffc <CO_GTWA_process+0x24d8>)
 800fe2e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800fe32:	e006      	b.n	800fe42 <CO_GTWA_process+0x231e>
                } else {
                    err = true;
 800fe34:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	601a      	str	r2, [r3, #0]
                    break;
 800fe40:	e097      	b.n	800ff72 <CO_GTWA_process+0x244e>
                }
            }
            /* continue with state machine */
            gtwa->helpStringOffset = 0;
 800fe42:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe46:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
            gtwa->state = CO_GTWA_ST_HELP;
 800fe52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe56:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2281      	movs	r2, #129	; 0x81
 800fe5e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fe62:	e02f      	b.n	800fec4 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_HELP */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        /* Print status led diodes */
        else if (tok_is_led) {
 800fe64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d01e      	beq.n	800feaa <CO_GTWA_process+0x2386>
            if (closed == 0U) {
 800fe6c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe70:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <CO_GTWA_process+0x2364>
                err = true;
 800fe7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe7e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fe82:	2201      	movs	r2, #1
 800fe84:	601a      	str	r2, [r3, #0]
                break;
 800fe86:	e074      	b.n	800ff72 <CO_GTWA_process+0x244e>
            }
            gtwa->ledStringPreviousIndex = 0xFF;
 800fe88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	22ff      	movs	r2, #255	; 0xff
 800fe94:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
            gtwa->state = CO_GTWA_ST_LED;
 800fe98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2282      	movs	r2, #130	; 0x82
 800fea4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fea8:	e00c      	b.n	800fec4 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

        /* Unrecognized command */
        else {
            respErrorCode = CO_GTWA_respErrorReqNotSupported;
 800feaa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800feae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800feb2:	2264      	movs	r2, #100	; 0x64
 800feb4:	801a      	strh	r2, [r3, #0]
            err = true;
 800feb6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800feba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800febe:	2201      	movs	r2, #1
 800fec0:	601a      	str	r2, [r3, #0]
            break;
 800fec2:	e056      	b.n	800ff72 <CO_GTWA_process+0x244e>
    while (CO_fifo_CommSearch(&gtwa->commFifo, false) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 800fec4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fec8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3318      	adds	r3, #24
 800fed0:	2100      	movs	r1, #0
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f9 ff01 	bl	8009cda <CO_fifo_CommSearch>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d049      	beq.n	800ff72 <CO_GTWA_process+0x244e>
 800fede:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fee2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800feec:	2b00      	cmp	r3, #0
 800feee:	f43d aea2 	beq.w	800dc36 <CO_GTWA_process+0x112>
 800fef2:	e03e      	b.n	800ff72 <CO_GTWA_process+0x244e>
            break;
 800fef4:	bf00      	nop
 800fef6:	e03c      	b.n	800ff72 <CO_GTWA_process+0x244e>
            break;
 800fef8:	bf00      	nop
 800fefa:	e03a      	b.n	800ff72 <CO_GTWA_process+0x244e>
            break;
 800fefc:	bf00      	nop
 800fefe:	e038      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff00:	bf00      	nop
 800ff02:	e036      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff04:	bf00      	nop
 800ff06:	e034      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff08:	bf00      	nop
 800ff0a:	e032      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff0c:	bf00      	nop
 800ff0e:	e030      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff10:	bf00      	nop
 800ff12:	e02e      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff14:	bf00      	nop
 800ff16:	e02c      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff18:	bf00      	nop
 800ff1a:	e02a      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff1c:	bf00      	nop
 800ff1e:	e028      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff20:	bf00      	nop
 800ff22:	e026      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff24:	bf00      	nop
 800ff26:	e024      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff28:	bf00      	nop
 800ff2a:	e022      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff2c:	bf00      	nop
 800ff2e:	e020      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff30:	bf00      	nop
 800ff32:	e01e      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff34:	bf00      	nop
 800ff36:	e01c      	b.n	800ff72 <CO_GTWA_process+0x244e>
                break;
 800ff38:	bf00      	nop
 800ff3a:	e01a      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff3c:	bf00      	nop
 800ff3e:	e018      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff40:	bf00      	nop
 800ff42:	e016      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff44:	bf00      	nop
 800ff46:	e014      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff48:	bf00      	nop
 800ff4a:	e012      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff4c:	bf00      	nop
 800ff4e:	e010      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff50:	bf00      	nop
 800ff52:	e00e      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff54:	bf00      	nop
 800ff56:	e00c      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff58:	bf00      	nop
 800ff5a:	e00a      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff5c:	bf00      	nop
 800ff5e:	e008      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff60:	bf00      	nop
 800ff62:	e006      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff64:	bf00      	nop
 800ff66:	e004      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff68:	bf00      	nop
 800ff6a:	e002      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff6c:	bf00      	nop
 800ff6e:	e000      	b.n	800ff72 <CO_GTWA_process+0x244e>
                    break;
 800ff70:	bf00      	nop

    /***************************************************************************
     * STATE MACHINE
     ***************************************************************************/
    /* If error, generate error response */
    if (err) {
 800ff72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff76:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d03f      	beq.n	8010000 <CO_GTWA_process+0x24dc>
        if (respErrorCode == CO_GTWA_respErrorNone) {
 800ff80:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ff88:	881b      	ldrh	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d105      	bne.n	800ff9a <CO_GTWA_process+0x2476>
            respErrorCode = CO_GTWA_respErrorSyntax;
 800ff8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ff96:	2265      	movs	r2, #101	; 0x65
 800ff98:	801a      	strh	r2, [r3, #0]
        }
        responseWithError(gtwa, respErrorCode);
 800ff9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ffa2:	881a      	ldrh	r2, [r3, #0]
 800ffa4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffa8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ffac:	4611      	mov	r1, r2
 800ffae:	6818      	ldr	r0, [r3, #0]
 800ffb0:	f7fd fc80 	bl	800d8b4 <responseWithError>

        /* delete command, if it was only partially read */
        if (closed == 0U) {
 800ffb4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffb8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d109      	bne.n	800ffd6 <CO_GTWA_process+0x24b2>
            (void)CO_fifo_CommSearch(&gtwa->commFifo, true);
 800ffc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffc6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	3318      	adds	r3, #24
 800ffce:	2101      	movs	r1, #1
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7f9 fe82 	bl	8009cda <CO_fifo_CommSearch>
        }
        gtwa->state = CO_GTWA_ST_IDLE;
 800ffd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800ffe6:	f001 ba9e 	b.w	8011526 <CO_GTWA_process+0x3a02>
 800ffea:	bf00      	nop
 800ffec:	080220f8 	.word	0x080220f8
 800fff0:	08021a9c 	.word	0x08021a9c
 800fff4:	08022760 	.word	0x08022760
 800fff8:	08021aa8 	.word	0x08021aa8
 800fffc:	08022980 	.word	0x08022980
    }

    else {
        switch (gtwa->state) {
 8010000:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010004:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 801000e:	2b82      	cmp	r3, #130	; 0x82
 8010010:	f001 81dd 	beq.w	80113ce <CO_GTWA_process+0x38aa>
 8010014:	2b82      	cmp	r3, #130	; 0x82
 8010016:	f301 8251 	bgt.w	80114bc <CO_GTWA_process+0x3998>
 801001a:	2b31      	cmp	r3, #49	; 0x31
 801001c:	dc6c      	bgt.n	80100f8 <CO_GTWA_process+0x25d4>
 801001e:	2b00      	cmp	r3, #0
 8010020:	f2c1 824c 	blt.w	80114bc <CO_GTWA_process+0x3998>
 8010024:	2b31      	cmp	r3, #49	; 0x31
 8010026:	f201 8249 	bhi.w	80114bc <CO_GTWA_process+0x3998>
 801002a:	a201      	add	r2, pc, #4	; (adr r2, 8010030 <CO_GTWA_process+0x250c>)
 801002c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010030:	08011575 	.word	0x08011575
 8010034:	080114bd 	.word	0x080114bd
 8010038:	080114bd 	.word	0x080114bd
 801003c:	080114bd 	.word	0x080114bd
 8010040:	080114bd 	.word	0x080114bd
 8010044:	080114bd 	.word	0x080114bd
 8010048:	080114bd 	.word	0x080114bd
 801004c:	080114bd 	.word	0x080114bd
 8010050:	080114bd 	.word	0x080114bd
 8010054:	080114bd 	.word	0x080114bd
 8010058:	080114bd 	.word	0x080114bd
 801005c:	080114bd 	.word	0x080114bd
 8010060:	080114bd 	.word	0x080114bd
 8010064:	080114bd 	.word	0x080114bd
 8010068:	080114bd 	.word	0x080114bd
 801006c:	080114bd 	.word	0x080114bd
 8010070:	08010103 	.word	0x08010103
 8010074:	080103af 	.word	0x080103af
 8010078:	080103af 	.word	0x080103af
 801007c:	080114bd 	.word	0x080114bd
 8010080:	080114bd 	.word	0x080114bd
 8010084:	080114bd 	.word	0x080114bd
 8010088:	080114bd 	.word	0x080114bd
 801008c:	080114bd 	.word	0x080114bd
 8010090:	080114bd 	.word	0x080114bd
 8010094:	080114bd 	.word	0x080114bd
 8010098:	080114bd 	.word	0x080114bd
 801009c:	080114bd 	.word	0x080114bd
 80100a0:	080114bd 	.word	0x080114bd
 80100a4:	080114bd 	.word	0x080114bd
 80100a8:	080114bd 	.word	0x080114bd
 80100ac:	080114bd 	.word	0x080114bd
 80100b0:	080106b7 	.word	0x080106b7
 80100b4:	08010723 	.word	0x08010723
 80100b8:	0801079b 	.word	0x0801079b
 80100bc:	08010859 	.word	0x08010859
 80100c0:	0801090d 	.word	0x0801090d
 80100c4:	080109b5 	.word	0x080109b5
 80100c8:	08010aef 	.word	0x08010aef
 80100cc:	080114bd 	.word	0x080114bd
 80100d0:	080114bd 	.word	0x080114bd
 80100d4:	080114bd 	.word	0x080114bd
 80100d8:	080114bd 	.word	0x080114bd
 80100dc:	080114bd 	.word	0x080114bd
 80100e0:	080114bd 	.word	0x080114bd
 80100e4:	080114bd 	.word	0x080114bd
 80100e8:	080114bd 	.word	0x080114bd
 80100ec:	080114bd 	.word	0x080114bd
 80100f0:	08010c01 	.word	0x08010c01
 80100f4:	08010d45 	.word	0x08010d45
 80100f8:	2b81      	cmp	r3, #129	; 0x81
 80100fa:	f001 80c8 	beq.w	801128e <CO_GTWA_process+0x376a>
 80100fe:	f001 b9dd 	b.w	80114bc <CO_GTWA_process+0x3998>
            case CO_GTWA_ST_READ: {
                CO_SDO_abortCode_t abortCode;
                size_t sizeTransferred;
                CO_SDO_return_t ret;

                ret = CO_SDOclientUpload(gtwa->SDO_C, timeDifference_us, false, &abortCode, NULL, &sizeTransferred,
 8010102:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010106:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8010110:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010114:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8010118:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801011c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010120:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010124:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010128:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	9302      	str	r3, [sp, #8]
 8010130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	2300      	movs	r3, #0
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	4613      	mov	r3, r2
 801013c:	2200      	movs	r2, #0
 801013e:	6809      	ldr	r1, [r1, #0]
 8010140:	f7f6 f844 	bl	80061cc <CO_SDOclientUpload>
 8010144:	4603      	mov	r3, r0
 8010146:	7023      	strb	r3, [r4, #0]
                                         timerNext_us);

                if (ret < CO_SDO_RT_ok_communicationEnd) {
 8010148:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801014c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010150:	f993 3000 	ldrsb.w	r3, [r3]
 8010154:	2b00      	cmp	r3, #0
 8010156:	da1c      	bge.n	8010192 <CO_GTWA_process+0x266e>
                    responseWithErrorSDO(gtwa, abortCode, gtwa->SDOdataCopyStatus);
 8010158:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801015c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010160:	6819      	ldr	r1, [r3, #0]
 8010162:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010166:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8010170:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010174:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	f7fd fbdf 	bl	800d93c <responseWithErrorSDO>
                    gtwa->state = CO_GTWA_ST_IDLE;
 801017e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010182:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2200      	movs	r2, #0
 801018a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                            break;
                        }
                    } while ((gtwa->respHold == false) && (fifoRemain > 0U));
                } else { /* MISRA C 2004 14.10 */
                }
                break;
 801018e:	f001 b9b1 	b.w	80114f4 <CO_GTWA_process+0x39d0>
                else if ((ret == CO_SDO_RT_uploadDataBufferFull) || (ret == CO_SDO_RT_ok_communicationEnd)) {
 8010192:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010196:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801019a:	f993 3000 	ldrsb.w	r3, [r3]
 801019e:	2b05      	cmp	r3, #5
 80101a0:	d008      	beq.n	80101b4 <CO_GTWA_process+0x2690>
 80101a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80101aa:	f993 3000 	ldrsb.w	r3, [r3]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f041 81a0 	bne.w	80114f4 <CO_GTWA_process+0x39d0>
                    if (!gtwa->SDOdataCopyStatus) {
 80101b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d121      	bne.n	801020a <CO_GTWA_process+0x26e6>
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE - 2U,
 80101c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                              "[%" PRId32 "] ", (int32_t)gtwa->sequence);
 80101d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE - 2U,
 80101e0:	4ac9      	ldr	r2, [pc, #804]	; (8010508 <CO_GTWA_process+0x29e4>)
 80101e2:	21c6      	movs	r1, #198	; 0xc6
 80101e4:	f00e fef8 	bl	801efd8 <sniprintf>
 80101e8:	4603      	mov	r3, r0
 80101ea:	461a      	mov	r2, r3
 80101ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        gtwa->SDOdataCopyStatus = true;
 80101fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2201      	movs	r2, #1
 8010206:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801020a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801020e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8010218:	689c      	ldr	r4, [r3, #8]
                            &gtwa->SDO_C->bufFifo, &gtwa->respBuf[gtwa->respBufCount],
 801021a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801021e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 8010228:	f103 0078 	add.w	r0, r3, #120	; 0x78
                            &gtwa->SDO_C->bufFifo, &gtwa->respBuf[gtwa->respBufCount],
 801022c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010230:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801023a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801023e:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010242:	33f8      	adds	r3, #248	; 0xf8
 8010244:	6812      	ldr	r2, [r2, #0]
 8010246:	4413      	add	r3, r2
 8010248:	1d59      	adds	r1, r3, #5
                            (CO_GTWA_RESP_BUF_SIZE - 2U) - gtwa->respBufCount, ret == CO_SDO_RT_ok_communicationEnd);
 801024a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801024e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 8010258:	f1c3 02c6 	rsb	r2, r3, #198	; 0xc6
 801025c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010260:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010264:	f993 3000 	ldrsb.w	r3, [r3]
 8010268:	2b00      	cmp	r3, #0
 801026a:	bf0c      	ite	eq
 801026c:	2301      	moveq	r3, #1
 801026e:	2300      	movne	r3, #0
 8010270:	b2db      	uxtb	r3, r3
 8010272:	47a0      	blx	r4
 8010274:	4602      	mov	r2, r0
 8010276:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801027a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8010284:	441a      	add	r2, r3
 8010286:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801028a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        fifoRemain = CO_fifo_getOccupied(&gtwa->SDO_C->bufFifo);
 8010294:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010298:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80102a2:	3378      	adds	r3, #120	; 0x78
 80102a4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80102a8:	f5a2 7490 	sub.w	r4, r2, #288	; 0x120
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fd f98c 	bl	800d5ca <CO_fifo_getOccupied>
 80102b2:	6020      	str	r0, [r4, #0]
                        if ((ret == CO_SDO_RT_ok_communicationEnd) && (fifoRemain == 0U)) {
 80102b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80102bc:	f993 3000 	ldrsb.w	r3, [r3]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d132      	bne.n	801032a <CO_GTWA_process+0x2806>
 80102c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d12b      	bne.n	801032a <CO_GTWA_process+0x2806>
                            gtwa->respBufCount += (size_t)sprintf(&gtwa->respBuf[gtwa->respBufCount], "\r\n");
 80102d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80102e0:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80102e4:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80102e8:	33f8      	adds	r3, #248	; 0xf8
 80102ea:	6812      	ldr	r2, [r2, #0]
 80102ec:	4413      	add	r3, r2
 80102ee:	3305      	adds	r3, #5
 80102f0:	4986      	ldr	r1, [pc, #536]	; (801050c <CO_GTWA_process+0x29e8>)
 80102f2:	4618      	mov	r0, r3
 80102f4:	f00e fea4 	bl	801f040 <siprintf>
 80102f8:	4603      	mov	r3, r0
 80102fa:	461a      	mov	r2, r3
 80102fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010300:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801030a:	441a      	add	r2, r3
 801030c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010310:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->state = CO_GTWA_ST_IDLE;
 801031a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801031e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        if (respBufTransfer(gtwa) == false) {
 801032a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801032e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010332:	6818      	ldr	r0, [r3, #0]
 8010334:	f7fd fa64 	bl	800d800 <respBufTransfer>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d123      	bne.n	8010386 <CO_GTWA_process+0x2862>
                            abortCode = CO_SDO_AB_DATA_TRANSF;
 801033e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010342:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010346:	4a72      	ldr	r2, [pc, #456]	; (8010510 <CO_GTWA_process+0x29ec>)
 8010348:	601a      	str	r2, [r3, #0]
                            (void)CO_SDOclientUpload(gtwa->SDO_C, 0, true, &abortCode, NULL, NULL, NULL);
 801034a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801034e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8010358:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801035c:	2200      	movs	r2, #0
 801035e:	9202      	str	r2, [sp, #8]
 8010360:	2200      	movs	r2, #0
 8010362:	9201      	str	r2, [sp, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	9200      	str	r2, [sp, #0]
 8010368:	2201      	movs	r2, #1
 801036a:	2100      	movs	r1, #0
 801036c:	f7f5 ff2e 	bl	80061cc <CO_SDOclientUpload>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010370:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010374:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                            break;
 8010380:	bf00      	nop
                break;
 8010382:	f001 b8b7 	b.w	80114f4 <CO_GTWA_process+0x39d0>
                    } while ((gtwa->respHold == false) && (fifoRemain > 0U));
 8010386:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801038a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8010394:	2b00      	cmp	r3, #0
 8010396:	f041 80ad 	bne.w	80114f4 <CO_GTWA_process+0x39d0>
 801039a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801039e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f47f af30 	bne.w	801020a <CO_GTWA_process+0x26e6>
                break;
 80103aa:	f001 b8a3 	b.w	80114f4 <CO_GTWA_process+0x39d0>
            /* SDO download state */
            case CO_GTWA_ST_WRITE:
            case CO_GTWA_ST_WRITE_ABORTED: {
                CO_SDO_abortCode_t abortCode;
                size_t sizeTransferred;
                bool_t abort_comm = false;
 80103ae:	2300      	movs	r3, #0
 80103b0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                bool_t hold = false;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                CO_SDO_return_t ret;

                /* copy data to the SDO buffer if previous dataTypeScan was partial */
                if (gtwa->SDOdataCopyStatus) {
 80103ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 80a5 	beq.w	8010518 <CO_GTWA_process+0x29f4>
                    uint8_t status;
                    gtwa->SDOdataType->dataTypeScan(&gtwa->SDO_C->bufFifo, &gtwa->commFifo, &status);
 80103ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80103e2:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80103e6:	6812      	ldr	r2, [r2, #0]
 80103e8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80103ec:	f102 0078 	add.w	r0, r2, #120	; 0x78
 80103f0:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80103f4:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80103f8:	6812      	ldr	r2, [r2, #0]
 80103fa:	f102 0118 	add.w	r1, r2, #24
 80103fe:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 8010402:	4798      	blx	r3
                    /* set to true, if command delimiter was found */
                    closed = ((status & CO_fifo_st_closed) == 0U) ? 0U : 1U;
 8010404:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010408:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	f003 0301 	and.w	r3, r3, #1
 8010412:	2b00      	cmp	r3, #0
 8010414:	bf14      	ite	ne
 8010416:	2301      	movne	r3, #1
 8010418:	2300      	moveq	r3, #0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	461a      	mov	r2, r3
 801041e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010422:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8010426:	701a      	strb	r2, [r3, #0]
                    /* set to true, if data are copied only partially */
                    gtwa->SDOdataCopyStatus = (status & CO_fifo_st_partial) != 0U;
 8010428:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801042c:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 0302 	and.w	r3, r3, #2
 8010436:	2b00      	cmp	r3, #0
 8010438:	bf14      	ite	ne
 801043a:	2301      	movne	r3, #1
 801043c:	2300      	moveq	r3, #0
 801043e:	b2db      	uxtb	r3, r3
 8010440:	461a      	mov	r2, r3
 8010442:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010446:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

                    /* is syntax error in command or not the last token in command */
                    if (((status & CO_fifo_st_errMask) != 0U)
 8010450:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010454:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10f      	bne.n	8010482 <CO_GTWA_process+0x295e>
                        || ((gtwa->SDOdataCopyStatus == false) && (closed != 1U))) {
 8010462:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010466:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8010470:	2b00      	cmp	r3, #0
 8010472:	d120      	bne.n	80104b6 <CO_GTWA_process+0x2992>
 8010474:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010478:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d019      	beq.n	80104b6 <CO_GTWA_process+0x2992>
                        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8010482:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010486:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801048a:	4a22      	ldr	r2, [pc, #136]	; (8010514 <CO_GTWA_process+0x29f0>)
 801048c:	601a      	str	r2, [r3, #0]
                        abort_comm = true; /* abort SDO communication */
 801048e:	2301      	movs	r3, #1
 8010490:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                        /* clear the rest of the command, if necessary */
                        if (closed != 1U) {
 8010494:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010498:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d009      	beq.n	80104b6 <CO_GTWA_process+0x2992>
                            (void)CO_fifo_CommSearch(&gtwa->commFifo, true);
 80104a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80104a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3318      	adds	r3, #24
 80104ae:	2101      	movs	r1, #1
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f9 fc12 	bl	8009cda <CO_fifo_CommSearch>
                        }
                    }
                    if (gtwa->state == CO_GTWA_ST_WRITE_ABORTED) {
 80104b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80104ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80104c4:	2b12      	cmp	r3, #18
 80104c6:	d127      	bne.n	8010518 <CO_GTWA_process+0x29f4>
                        /* Stay in this state, until all data transferred via commFifo will be purged. */
                        if (!CO_fifo_purge(&gtwa->SDO_C->bufFifo) || (closed == 1U)) {
 80104c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80104cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80104d6:	3378      	adds	r3, #120	; 0x78
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fd f85a 	bl	800d592 <CO_fifo_purge>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d007      	beq.n	80104f4 <CO_GTWA_process+0x29d0>
 80104e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80104e8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	f041 8002 	bne.w	80114f8 <CO_GTWA_process+0x39d4>
                            gtwa->state = CO_GTWA_ST_IDLE;
 80104f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80104f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2200      	movs	r2, #0
 8010500:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8010504:	f001 b80f 	b.w	8011526 <CO_GTWA_process+0x3a02>
 8010508:	08021aac 	.word	0x08021aac
 801050c:	08021954 	.word	0x08021954
 8010510:	08000020 	.word	0x08000020
 8010514:	06040047 	.word	0x06040047
                        break;
                    }
                }
                /* If not all data were transferred, make sure, there is enough data in
                 * SDO buffer, to continue communication. Otherwise wait and check for timeout */
                if (gtwa->SDOdataCopyStatus) {
 8010518:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801051c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8010526:	2b00      	cmp	r3, #0
 8010528:	d038      	beq.n	801059c <CO_GTWA_process+0x2a78>
                    if (CO_fifo_getOccupied(&gtwa->SDO_C->bufFifo) < (CO_CONFIG_GTW_BLOCK_DL_LOOP * 7U)) {
 801052a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801052e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010538:	3378      	adds	r3, #120	; 0x78
 801053a:	4618      	mov	r0, r3
 801053c:	f7fd f845 	bl	800d5ca <CO_fifo_getOccupied>
 8010540:	4603      	mov	r3, r0
 8010542:	2b06      	cmp	r3, #6
 8010544:	d82a      	bhi.n	801059c <CO_GTWA_process+0x2a78>
                        if (gtwa->stateTimeoutTmr > CO_GTWA_STATE_TIMEOUT_TIME_US) {
 8010546:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801054a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010554:	4abe      	ldr	r2, [pc, #760]	; (8010850 <CO_GTWA_process+0x2d2c>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d909      	bls.n	801056e <CO_GTWA_process+0x2a4a>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 801055a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801055e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010562:	4abc      	ldr	r2, [pc, #752]	; (8010854 <CO_GTWA_process+0x2d30>)
 8010564:	601a      	str	r2, [r3, #0]
                            abort_comm = true;
 8010566:	2301      	movs	r3, #1
 8010568:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801056c:	e016      	b.n	801059c <CO_GTWA_process+0x2a78>
                        } else {
                            gtwa->stateTimeoutTmr += timeDifference_us;
 801056e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010572:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 801057c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010580:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	441a      	add	r2, r3
 8010588:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801058c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
                            hold = true;
 8010596:	2301      	movs	r3, #1
 8010598:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                        }
                    }
                }
                if (!hold || abort_comm) {
 801059c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d004      	beq.n	80105ae <CO_GTWA_process+0x2a8a>
 80105a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 87a7 	beq.w	80114fc <CO_GTWA_process+0x39d8>
                    /* if OS has CANtx queue, speedup block transfer */
                    uint32_t loop = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
                    do {
                        ret = CO_SDOclientDownload(gtwa->SDO_C, timeDifference_us, abort_comm, gtwa->SDOdataCopyStatus,
 80105b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80105c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80105d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105d4:	f2a3 141b 	subw	r4, r3, #283	; 0x11b
 80105d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105dc:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 80105e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105e4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	9302      	str	r3, [sp, #8]
 80105ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	4613      	mov	r3, r2
 80105fa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80105fe:	6809      	ldr	r1, [r1, #0]
 8010600:	f7f4 fa64 	bl	8004acc <CO_SDOclientDownload>
 8010604:	4603      	mov	r3, r0
 8010606:	7023      	strb	r3, [r4, #0]
                                                   &abortCode, &sizeTransferred, timerNext_us);
                        if (++loop >= CO_CONFIG_GTW_BLOCK_DL_LOOP) {
 8010608:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801060c:	3301      	adds	r3, #1
 801060e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010612:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010616:	2b00      	cmp	r3, #0
 8010618:	d108      	bne.n	801062c <CO_GTWA_process+0x2b08>
                            break;
                        }
                    } while (ret == CO_SDO_RT_blockDownldInProgress);
 801061a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801061e:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 8010622:	f993 3000 	ldrsb.w	r3, [r3]
 8010626:	2b03      	cmp	r3, #3
 8010628:	d0c4      	beq.n	80105b4 <CO_GTWA_process+0x2a90>
 801062a:	e000      	b.n	801062e <CO_GTWA_process+0x2b0a>
                            break;
 801062c:	bf00      	nop

                    /* send response in case of error or finish */
                    if (ret < CO_SDO_RT_ok_communicationEnd) {
 801062e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010632:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 8010636:	f993 3000 	ldrsb.w	r3, [r3]
 801063a:	2b00      	cmp	r3, #0
 801063c:	da21      	bge.n	8010682 <CO_GTWA_process+0x2b5e>
                        responseWithErrorSDO(gtwa, abortCode, false);
 801063e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010642:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010646:	6819      	ldr	r1, [r3, #0]
 8010648:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801064c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010650:	2200      	movs	r2, #0
 8010652:	6818      	ldr	r0, [r3, #0]
 8010654:	f7fd f972 	bl	800d93c <responseWithErrorSDO>
                        /* purge remaining data if necessary */
                        gtwa->state = gtwa->SDOdataCopyStatus ? CO_GTWA_ST_WRITE_ABORTED : CO_GTWA_ST_IDLE;
 8010658:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801065c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <CO_GTWA_process+0x2b4a>
 801066a:	2212      	movs	r2, #18
 801066c:	e000      	b.n	8010670 <CO_GTWA_process+0x2b4c>
 801066e:	2200      	movs	r2, #0
 8010670:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010674:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        responseWithOK(gtwa);
                        gtwa->state = CO_GTWA_ST_IDLE;
                    } else { /* MISRA C 2004 14.10 */
                    }
                }
                break;
 801067e:	f000 bf3d 	b.w	80114fc <CO_GTWA_process+0x39d8>
                    } else if (ret == CO_SDO_RT_ok_communicationEnd) {
 8010682:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010686:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 801068a:	f993 3000 	ldrsb.w	r3, [r3]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f040 8734 	bne.w	80114fc <CO_GTWA_process+0x39d8>
                        responseWithOK(gtwa);
 8010694:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010698:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801069c:	6818      	ldr	r0, [r3, #0]
 801069e:	f7fd f9a5 	bl	800d9ec <responseWithOK>
                        gtwa->state = CO_GTWA_ST_IDLE;
 80106a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                break;
 80106b2:	f000 bf23 	b.w	80114fc <CO_GTWA_process+0x39d8>
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
            case CO_GTWA_ST_LSS_SWITCH_GLOB: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateSelect(gtwa->LSSmaster, timeDifference_us, NULL);
 80106b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 80106c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106c8:	f5a3 748d 	sub.w	r4, r3, #282	; 0x11a
 80106cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106d0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80106d4:	2200      	movs	r2, #0
 80106d6:	6819      	ldr	r1, [r3, #0]
 80106d8:	f7fb fd43 	bl	800c162 <CO_LSSmaster_swStateSelect>
 80106dc:	4603      	mov	r3, r0
 80106de:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 80106e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106e4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80106e8:	f993 3000 	ldrsb.w	r3, [r3]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	f000 8707 	beq.w	8011500 <CO_GTWA_process+0x39dc>
                    responseLSS(gtwa, ret);
 80106f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106f6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80106fa:	f993 2000 	ldrsb.w	r2, [r3]
 80106fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010702:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010706:	4611      	mov	r1, r2
 8010708:	6818      	ldr	r0, [r3, #0]
 801070a:	f7fd f9a5 	bl	800da58 <responseLSS>
                    gtwa->state = CO_GTWA_ST_IDLE;
 801070e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010712:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2200      	movs	r2, #0
 801071a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 801071e:	f000 beef 	b.w	8011500 <CO_GTWA_process+0x39dc>
            }
            case CO_GTWA_ST_LSS_SWITCH_SEL: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateSelect(gtwa->LSSmaster, timeDifference_us, &gtwa->lssAddress);
 8010722:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010726:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010730:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010734:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 801073e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010742:	f2a3 1419 	subw	r4, r3, #281	; 0x119
 8010746:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801074a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801074e:	6819      	ldr	r1, [r3, #0]
 8010750:	f7fb fd07 	bl	800c162 <CO_LSSmaster_swStateSelect>
 8010754:	4603      	mov	r3, r0
 8010756:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010758:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801075c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8010760:	f993 3000 	ldrsb.w	r3, [r3]
 8010764:	2b01      	cmp	r3, #1
 8010766:	f000 86cd 	beq.w	8011504 <CO_GTWA_process+0x39e0>
                    responseLSS(gtwa, ret);
 801076a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801076e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8010772:	f993 2000 	ldrsb.w	r2, [r3]
 8010776:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801077a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801077e:	4611      	mov	r1, r2
 8010780:	6818      	ldr	r0, [r3, #0]
 8010782:	f7fd f969 	bl	800da58 <responseLSS>
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010786:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801078a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2200      	movs	r2, #0
 8010792:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010796:	f000 beb5 	b.w	8011504 <CO_GTWA_process+0x39e0>
            }
            case CO_GTWA_ST_LSS_SET_NODE: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_configureNodeId(gtwa->LSSmaster, timeDifference_us, gtwa->lssNID);
 801079a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801079e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 80107a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f893 220c 	ldrb.w	r2, [r3, #524]	; 0x20c
 80107b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107ba:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 80107be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80107c6:	6819      	ldr	r1, [r3, #0]
 80107c8:	f7fb fe2e 	bl	800c428 <CO_LSSmaster_configureNodeId>
 80107cc:	4603      	mov	r3, r0
 80107ce:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 80107d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80107d8:	f993 3000 	ldrsb.w	r3, [r3]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	f000 8693 	beq.w	8011508 <CO_GTWA_process+0x39e4>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 80107e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80107ea:	f993 3000 	ldrsb.w	r3, [r3]
 80107ee:	f113 0f65 	cmn.w	r3, #101	; 0x65
 80107f2:	d114      	bne.n	801081e <CO_GTWA_process+0x2cfa>
                        respErrorCode = CO_GTWA_respErrorLSSnodeIdNotSupported;
 80107f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80107fc:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8010800:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 8010802:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010806:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801080a:	881a      	ldrh	r2, [r3, #0]
 801080c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010810:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010814:	4611      	mov	r1, r2
 8010816:	6818      	ldr	r0, [r3, #0]
 8010818:	f7fd f84c 	bl	800d8b4 <responseWithError>
 801081c:	e00d      	b.n	801083a <CO_GTWA_process+0x2d16>
                    } else {
                        responseLSS(gtwa, ret);
 801081e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010826:	f993 2000 	ldrsb.w	r2, [r3]
 801082a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801082e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010832:	4611      	mov	r1, r2
 8010834:	6818      	ldr	r0, [r3, #0]
 8010836:	f7fd f90f 	bl	800da58 <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 801083a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801083e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2200      	movs	r2, #0
 8010846:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 801084a:	f000 be5d 	b.w	8011508 <CO_GTWA_process+0x39e4>
 801084e:	bf00      	nop
 8010850:	00124f80 	.word	0x00124f80
 8010854:	06040047 	.word	0x06040047
            }
            case CO_GTWA_ST_LSS_CONF_BITRATE: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_configureBitTiming(gtwa->LSSmaster, timeDifference_us, gtwa->lssBitrate);
 8010858:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801085c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010866:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801086a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8010874:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010878:	f2a3 1417 	subw	r4, r3, #279	; 0x117
 801087c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010880:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010884:	6819      	ldr	r1, [r3, #0]
 8010886:	f7fb fd2d 	bl	800c2e4 <CO_LSSmaster_configureBitTiming>
 801088a:	4603      	mov	r3, r0
 801088c:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 801088e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010892:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8010896:	f993 3000 	ldrsb.w	r3, [r3]
 801089a:	2b01      	cmp	r3, #1
 801089c:	f000 8636 	beq.w	801150c <CO_GTWA_process+0x39e8>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 80108a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108a4:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 80108a8:	f993 3000 	ldrsb.w	r3, [r3]
 80108ac:	f113 0f65 	cmn.w	r3, #101	; 0x65
 80108b0:	d114      	bne.n	80108dc <CO_GTWA_process+0x2db8>
                        respErrorCode = CO_GTWA_respErrorLSSbitRateNotSupported;
 80108b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80108ba:	f240 12f7 	movw	r2, #503	; 0x1f7
 80108be:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 80108c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80108c8:	881a      	ldrh	r2, [r3, #0]
 80108ca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108ce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80108d2:	4611      	mov	r1, r2
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	f7fc ffed 	bl	800d8b4 <responseWithError>
 80108da:	e00d      	b.n	80108f8 <CO_GTWA_process+0x2dd4>
                    } else {
                        responseLSS(gtwa, ret);
 80108dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108e0:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 80108e4:	f993 2000 	ldrsb.w	r2, [r3]
 80108e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80108f0:	4611      	mov	r1, r2
 80108f2:	6818      	ldr	r0, [r3, #0]
 80108f4:	f7fd f8b0 	bl	800da58 <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 80108f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2200      	movs	r2, #0
 8010904:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010908:	f000 be00 	b.w	801150c <CO_GTWA_process+0x39e8>
            }
            case CO_GTWA_ST_LSS_STORE: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_configureStore(gtwa->LSSmaster, timeDifference_us);
 801090c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010910:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 801091a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801091e:	f5a3 748b 	sub.w	r4, r3, #278	; 0x116
 8010922:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010926:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801092a:	6819      	ldr	r1, [r3, #0]
 801092c:	4610      	mov	r0, r2
 801092e:	f7fb fde4 	bl	800c4fa <CO_LSSmaster_configureStore>
 8010932:	4603      	mov	r3, r0
 8010934:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010936:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801093a:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801093e:	f993 3000 	ldrsb.w	r3, [r3]
 8010942:	2b01      	cmp	r3, #1
 8010944:	f000 85e4 	beq.w	8011510 <CO_GTWA_process+0x39ec>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8010948:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801094c:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8010950:	f993 3000 	ldrsb.w	r3, [r3]
 8010954:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8010958:	d114      	bne.n	8010984 <CO_GTWA_process+0x2e60>
                        respErrorCode = CO_GTWA_respErrorLSSparameterStoringFailed;
 801095a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801095e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010962:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010966:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 8010968:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801096c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010970:	881a      	ldrh	r2, [r3, #0]
 8010972:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010976:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801097a:	4611      	mov	r1, r2
 801097c:	6818      	ldr	r0, [r3, #0]
 801097e:	f7fc ff99 	bl	800d8b4 <responseWithError>
 8010982:	e00d      	b.n	80109a0 <CO_GTWA_process+0x2e7c>
                    } else {
                        responseLSS(gtwa, ret);
 8010984:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010988:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801098c:	f993 2000 	ldrsb.w	r2, [r3]
 8010990:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010994:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010998:	4611      	mov	r1, r2
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	f7fd f85c 	bl	800da58 <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 80109a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 80109b0:	f000 bdae 	b.w	8011510 <CO_GTWA_process+0x39ec>
            }
            case CO_GTWA_ST_LSS_INQUIRE: {
                CO_LSSmaster_return_t ret;
                uint32_t value;

                ret = CO_LSSmaster_Inquire(gtwa->LSSmaster, timeDifference_us, gtwa->lssInquireCs, &value);
 80109b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 80109c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 80109d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109d4:	f2a3 1415 	subw	r4, r3, #277	; 0x115
 80109d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80109dc:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80109e0:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 80109e4:	6809      	ldr	r1, [r1, #0]
 80109e6:	f7fb ff28 	bl	800c83a <CO_LSSmaster_Inquire>
 80109ea:	4603      	mov	r3, r0
 80109ec:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 80109ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109f2:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80109f6:	f993 3000 	ldrsb.w	r3, [r3]
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	f000 858a 	beq.w	8011514 <CO_GTWA_process+0x39f0>
                    if (ret == CO_LSSmaster_OK) {
 8010a00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a04:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010a08:	f993 3000 	ldrsb.w	r3, [r3]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d156      	bne.n	8010abe <CO_GTWA_process+0x2f9a>
                        if (gtwa->lssInquireCs == CO_LSS_INQUIRE_NODE_ID) {
 8010a10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8010a1e:	2b5e      	cmp	r3, #94	; 0x5e
 8010a20:	d123      	bne.n	8010a6a <CO_GTWA_process+0x2f46>
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010a22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "[%" PRId32 "] 0x%02" PRIX32 "\r\n",
                                                                  (int32_t)gtwa->sequence, value & 0xFFU);
 8010a30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a42:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	9300      	str	r3, [sp, #0]
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	4aba      	ldr	r2, [pc, #744]	; (8010d38 <CO_GTWA_process+0x3214>)
 8010a50:	21c8      	movs	r1, #200	; 0xc8
 8010a52:	f00e fac1 	bl	801efd8 <sniprintf>
 8010a56:	4603      	mov	r3, r0
 8010a58:	461a      	mov	r2, r3
 8010a5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a5e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8010a68:	e021      	b.n	8010aae <CO_GTWA_process+0x2f8a>
                        } else {
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010a6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "[%" PRId32 "] 0x%08" PRIX32 "\r\n",
                                                                  (int32_t)gtwa->sequence, value);
 8010a78:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010a84:	461a      	mov	r2, r3
 8010a86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a8a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	4613      	mov	r3, r2
 8010a94:	4aa9      	ldr	r2, [pc, #676]	; (8010d3c <CO_GTWA_process+0x3218>)
 8010a96:	21c8      	movs	r1, #200	; 0xc8
 8010a98:	f00e fa9e 	bl	801efd8 <sniprintf>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010aa4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        }
                        (void)respBufTransfer(gtwa);
 8010aae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ab2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ab6:	6818      	ldr	r0, [r3, #0]
 8010ab8:	f7fc fea2 	bl	800d800 <respBufTransfer>
 8010abc:	e00d      	b.n	8010ada <CO_GTWA_process+0x2fb6>
                    } else {
                        responseLSS(gtwa, ret);
 8010abe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ac2:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010ac6:	f993 2000 	ldrsb.w	r2, [r3]
 8010aca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ace:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	6818      	ldr	r0, [r3, #0]
 8010ad6:	f7fc ffbf 	bl	800da58 <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010ada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ade:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010aea:	f000 bd13 	b.w	8011514 <CO_GTWA_process+0x39f0>
            }
            case CO_GTWA_ST_LSS_INQUIRE_ADDR_ALL: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_InquireLssAddress(gtwa->LSSmaster, timeDifference_us, &gtwa->lssAddress);
 8010aee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010af2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010afc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8010b0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b0e:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8010b12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010b1a:	6819      	ldr	r1, [r3, #0]
 8010b1c:	f7fb fdd2 	bl	800c6c4 <CO_LSSmaster_InquireLssAddress>
 8010b20:	4603      	mov	r3, r0
 8010b22:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010b24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010b2c:	f993 3000 	ldrsb.w	r3, [r3]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	f000 84f1 	beq.w	8011518 <CO_GTWA_process+0x39f4>
                    if (ret == CO_LSSmaster_OK) {
 8010b36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d144      	bne.n	8010bd0 <CO_GTWA_process+0x30ac>
                        gtwa->respBufCount = (size_t)snprintf(
                            gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010b46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b4a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f103 04fd 	add.w	r4, r3, #253	; 0xfd
                            "[%" PRId32 "] 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 "\r\n",
                            (int32_t)gtwa->sequence, gtwa->lssAddress.identity.vendorID,
 8010b54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(
 8010b60:	461d      	mov	r5, r3
 8010b62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b66:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8010b70:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010b74:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010b78:	6812      	ldr	r2, [r2, #0]
 8010b7a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010b7e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8010b82:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8010b86:	6809      	ldr	r1, [r1, #0]
 8010b88:	f8d1 1204 	ldr.w	r1, [r1, #516]	; 0x204
 8010b8c:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8010b90:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 8010b94:	6800      	ldr	r0, [r0, #0]
 8010b96:	f8d0 0208 	ldr.w	r0, [r0, #520]	; 0x208
 8010b9a:	9003      	str	r0, [sp, #12]
 8010b9c:	9102      	str	r1, [sp, #8]
 8010b9e:	9201      	str	r2, [sp, #4]
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	462b      	mov	r3, r5
 8010ba4:	4a66      	ldr	r2, [pc, #408]	; (8010d40 <CO_GTWA_process+0x321c>)
 8010ba6:	21c8      	movs	r1, #200	; 0xc8
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f00e fa15 	bl	801efd8 <sniprintf>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bb6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->lssAddress.identity.productCode, gtwa->lssAddress.identity.revisionNumber,
                            gtwa->lssAddress.identity.serialNumber);
                        (void)respBufTransfer(gtwa);
 8010bc0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bc8:	6818      	ldr	r0, [r3, #0]
 8010bca:	f7fc fe19 	bl	800d800 <respBufTransfer>
 8010bce:	e00d      	b.n	8010bec <CO_GTWA_process+0x30c8>
                    } else {
                        responseLSS(gtwa, ret);
 8010bd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010bd8:	f993 2000 	ldrsb.w	r2, [r3]
 8010bdc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010be0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010be4:	4611      	mov	r1, r2
 8010be6:	6818      	ldr	r0, [r3, #0]
 8010be8:	f7fc ff36 	bl	800da58 <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010bec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bf0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010bfc:	f000 bc8c 	b.w	8011518 <CO_GTWA_process+0x39f4>
            }
            case CO_GTWA_ST__LSS_FASTSCAN: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_IdentifyFastscan(gtwa->LSSmaster, timeDifference_us, &gtwa->lssFastscan);
 8010c00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010c0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8010c1c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c20:	f2a3 1413 	subw	r4, r3, #275	; 0x113
 8010c24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c28:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010c2c:	6819      	ldr	r1, [r3, #0]
 8010c2e:	f7fb ffb0 	bl	800cb92 <CO_LSSmaster_IdentifyFastscan>
 8010c32:	4603      	mov	r3, r0
 8010c34:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010c36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c3a:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8010c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	f000 846a 	beq.w	801151c <CO_GTWA_process+0x39f8>
                    if ((ret == CO_LSSmaster_OK) || (ret == CO_LSSmaster_SCAN_FINISHED)) {
 8010c48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c4c:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8010c50:	f993 3000 	ldrsb.w	r3, [r3]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d007      	beq.n	8010c68 <CO_GTWA_process+0x3144>
 8010c58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c5c:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8010c60:	f993 3000 	ldrsb.w	r3, [r3]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d144      	bne.n	8010cf2 <CO_GTWA_process+0x31ce>
                        gtwa->respBufCount = (size_t)snprintf(
                            gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010c68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f103 04fd 	add.w	r4, r3, #253	; 0xfd
                            "[%" PRId32 "] 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 "\r\n",
                            (int32_t)gtwa->sequence, gtwa->lssFastscan.found.identity.vendorID,
 8010c76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c7a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(
 8010c82:	461d      	mov	r5, r3
 8010c84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010c92:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010c96:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010c9a:	6812      	ldr	r2, [r2, #0]
 8010c9c:	f8d2 222c 	ldr.w	r2, [r2, #556]	; 0x22c
 8010ca0:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8010ca4:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8010ca8:	6809      	ldr	r1, [r1, #0]
 8010caa:	f8d1 1230 	ldr.w	r1, [r1, #560]	; 0x230
 8010cae:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8010cb2:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 8010cb6:	6800      	ldr	r0, [r0, #0]
 8010cb8:	f8d0 0234 	ldr.w	r0, [r0, #564]	; 0x234
 8010cbc:	9003      	str	r0, [sp, #12]
 8010cbe:	9102      	str	r1, [sp, #8]
 8010cc0:	9201      	str	r2, [sp, #4]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	462b      	mov	r3, r5
 8010cc6:	4a1e      	ldr	r2, [pc, #120]	; (8010d40 <CO_GTWA_process+0x321c>)
 8010cc8:	21c8      	movs	r1, #200	; 0xc8
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f00e f984 	bl	801efd8 <sniprintf>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->lssFastscan.found.identity.productCode,
                            gtwa->lssFastscan.found.identity.revisionNumber,
                            gtwa->lssFastscan.found.identity.serialNumber);
                        (void)respBufTransfer(gtwa);
 8010ce2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ce6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	f7fc fd88 	bl	800d800 <respBufTransfer>
 8010cf0:	e00d      	b.n	8010d0e <CO_GTWA_process+0x31ea>
                    } else {
                        responseLSS(gtwa, ret);
 8010cf2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cf6:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8010cfa:	f993 2000 	ldrsb.w	r2, [r3]
 8010cfe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d06:	4611      	mov	r1, r2
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	f7fc fea5 	bl	800da58 <responseLSS>
                    }
                    CO_LSSmaster_changeTimeout(gtwa->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT);
 8010d0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8010d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fb f947 	bl	800bfb4 <CO_LSSmaster_changeTimeout>
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010d26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d2a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010d36:	e3f1      	b.n	801151c <CO_GTWA_process+0x39f8>
 8010d38:	08021ab4 	.word	0x08021ab4
 8010d3c:	08021ac4 	.word	0x08021ac4
 8010d40:	08021ad4 	.word	0x08021ad4
            }
            case CO_GTWA_ST_LSS_ALLNODES: {
                CO_LSSmaster_return_t ret;
                if (gtwa->lssSubState == 0U) { /* _lss_fastscan */
 8010d44:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f040 80a3 	bne.w	8010e9e <CO_GTWA_process+0x337a>
                    ret = CO_LSSmaster_IdentifyFastscan(gtwa->LSSmaster, timeDifference_us, &gtwa->lssFastscan);
 8010d58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010d66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d6a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8010d74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d78:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 8010d7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010d84:	6819      	ldr	r1, [r3, #0]
 8010d86:	f7fb ff04 	bl	800cb92 <CO_LSSmaster_IdentifyFastscan>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010d8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d92:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010d96:	f993 3000 	ldrsb.w	r3, [r3]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d07f      	beq.n	8010e9e <CO_GTWA_process+0x337a>
                        CO_LSSmaster_changeTimeout(gtwa->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT);
 8010d9e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010da2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8010dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fb f8ff 	bl	800bfb4 <CO_LSSmaster_changeTimeout>

                        if ((ret == CO_LSSmaster_OK) || (ret == CO_LSSmaster_SCAN_NOACK)) {
 8010db6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dba:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d008      	beq.n	8010dd8 <CO_GTWA_process+0x32b4>
 8010dc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dca:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010dce:	f993 3000 	ldrsb.w	r3, [r3]
 8010dd2:	f113 0f04 	cmn.w	r3, #4
 8010dd6:	d133      	bne.n	8010e40 <CO_GTWA_process+0x331c>
                            /* no (more) nodes found, send report sum and finish */
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010dd8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ddc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "# Found %d nodes, search finished.\n"
                                                                  "[%" PRId32 "] OK\r\n",
                                                                  gtwa->lssNodeCount, (int32_t)gtwa->sequence);
 8010de6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010df4:	461a      	mov	r2, r3
                                                                  gtwa->lssNodeCount, (int32_t)gtwa->sequence);
 8010df6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dfa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	4613      	mov	r3, r2
 8010e06:	4abe      	ldr	r2, [pc, #760]	; (8011100 <CO_GTWA_process+0x35dc>)
 8010e08:	21c8      	movs	r1, #200	; 0xc8
 8010e0a:	f00e f8e5 	bl	801efd8 <sniprintf>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	461a      	mov	r2, r3
 8010e12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e16:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            (void)respBufTransfer(gtwa);
 8010e20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e28:	6818      	ldr	r0, [r3, #0]
 8010e2a:	f7fc fce9 	bl	800d800 <respBufTransfer>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010e2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e32:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8010e3e:	e02e      	b.n	8010e9e <CO_GTWA_process+0x337a>
                        } else if (ret == CO_LSSmaster_SCAN_FINISHED) {
 8010e40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e44:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010e48:	f993 3000 	ldrsb.w	r3, [r3]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d110      	bne.n	8010e72 <CO_GTWA_process+0x334e>
                            /* next sub-step */
                            gtwa->lssSubState++;
 8010e50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8010e5e:	3301      	adds	r3, #1
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e66:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8010e70:	e015      	b.n	8010e9e <CO_GTWA_process+0x337a>
                        } else {
                            /* error occurred */
                            responseLSS(gtwa, ret);
 8010e72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e76:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010e7a:	f993 2000 	ldrsb.w	r2, [r3]
 8010e7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e86:	4611      	mov	r1, r2
 8010e88:	6818      	ldr	r0, [r3, #0]
 8010e8a:	f7fc fde5 	bl	800da58 <responseLSS>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010e8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState == 1U) { /* lss_set_node */
 8010e9e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ea2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d17b      	bne.n	8010fa8 <CO_GTWA_process+0x3484>
                    ret = CO_LSSmaster_configureNodeId(gtwa->LSSmaster, timeDifference_us, gtwa->lssNID);
 8010eb0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010eb4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010ebe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ec2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f893 220c 	ldrb.w	r2, [r3, #524]	; 0x20c
 8010ecc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ed0:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 8010ed4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ed8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010edc:	6819      	ldr	r1, [r3, #0]
 8010ede:	f7fb faa3 	bl	800c428 <CO_LSSmaster_configureNodeId>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010ee6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010eea:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010eee:	f993 3000 	ldrsb.w	r3, [r3]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d058      	beq.n	8010fa8 <CO_GTWA_process+0x3484>
                        if (ret == CO_LSSmaster_OK) {
 8010ef6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010efa:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010efe:	f993 3000 	ldrsb.w	r3, [r3]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d11c      	bne.n	8010f40 <CO_GTWA_process+0x341c>
                            /* next sub-step */
                            gtwa->lssSubState += gtwa->lssStore ? 1U : 2U;
 8010f06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8010f14:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010f18:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010f1c:	6812      	ldr	r2, [r2, #0]
 8010f1e:	f8d2 223c 	ldr.w	r2, [r2, #572]	; 0x23c
 8010f22:	2a00      	cmp	r2, #0
 8010f24:	d001      	beq.n	8010f2a <CO_GTWA_process+0x3406>
 8010f26:	2201      	movs	r2, #1
 8010f28:	e000      	b.n	8010f2c <CO_GTWA_process+0x3408>
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8010f3e:	e033      	b.n	8010fa8 <CO_GTWA_process+0x3484>
                        } else {
                            /* error occurred */
                            if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8010f40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f44:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010f48:	f993 3000 	ldrsb.w	r3, [r3]
 8010f4c:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8010f50:	d114      	bne.n	8010f7c <CO_GTWA_process+0x3458>
                                respErrorCode = CO_GTWA_respErrorLSSnodeIdNotSupported;
 8010f52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010f5a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8010f5e:	801a      	strh	r2, [r3, #0]
                                responseWithError(gtwa, respErrorCode);
 8010f60:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010f68:	881a      	ldrh	r2, [r3, #0]
 8010f6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f72:	4611      	mov	r1, r2
 8010f74:	6818      	ldr	r0, [r3, #0]
 8010f76:	f7fc fc9d 	bl	800d8b4 <responseWithError>
 8010f7a:	e00d      	b.n	8010f98 <CO_GTWA_process+0x3474>
                            } else {
                                responseLSS(gtwa, ret);
 8010f7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f80:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010f84:	f993 2000 	ldrsb.w	r2, [r3]
 8010f88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f90:	4611      	mov	r1, r2
 8010f92:	6818      	ldr	r0, [r3, #0]
 8010f94:	f7fc fd60 	bl	800da58 <responseLSS>
                            }
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010f98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState == 2U) { /* lss_store */
 8010fa8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	d169      	bne.n	801108e <CO_GTWA_process+0x356a>
                    ret = CO_LSSmaster_configureStore(gtwa->LSSmaster, timeDifference_us);
 8010fba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fbe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8010fc8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fcc:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 8010fd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010fd8:	6819      	ldr	r1, [r3, #0]
 8010fda:	4610      	mov	r0, r2
 8010fdc:	f7fb fa8d 	bl	800c4fa <CO_LSSmaster_configureStore>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010fe4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fe8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010fec:	f993 3000 	ldrsb.w	r3, [r3]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d04c      	beq.n	801108e <CO_GTWA_process+0x356a>
                        if (ret == CO_LSSmaster_OK) {
 8010ff4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ff8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8010ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d110      	bne.n	8011026 <CO_GTWA_process+0x3502>
                            /* next sub-step */
                            gtwa->lssSubState++;
 8011004:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011008:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8011012:	3301      	adds	r3, #1
 8011014:	b2da      	uxtb	r2, r3
 8011016:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801101a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8011024:	e033      	b.n	801108e <CO_GTWA_process+0x356a>
                        } else {
                            /* error occurred */
                            if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8011026:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801102a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801102e:	f993 3000 	ldrsb.w	r3, [r3]
 8011032:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8011036:	d114      	bne.n	8011062 <CO_GTWA_process+0x353e>
                                respErrorCode = CO_GTWA_respErrorLSSparameterStoringFailed;
 8011038:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801103c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011040:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011044:	801a      	strh	r2, [r3, #0]
                                responseWithError(gtwa, respErrorCode);
 8011046:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801104a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801104e:	881a      	ldrh	r2, [r3, #0]
 8011050:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011054:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011058:	4611      	mov	r1, r2
 801105a:	6818      	ldr	r0, [r3, #0]
 801105c:	f7fc fc2a 	bl	800d8b4 <responseWithError>
 8011060:	e00d      	b.n	801107e <CO_GTWA_process+0x355a>
                            } else {
                                responseLSS(gtwa, ret);
 8011062:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011066:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801106a:	f993 2000 	ldrsb.w	r2, [r3]
 801106e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011072:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011076:	4611      	mov	r1, r2
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f7fc fced 	bl	800da58 <responseLSS>
                            }
                            gtwa->state = CO_GTWA_ST_IDLE;
 801107e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011082:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2200      	movs	r2, #0
 801108a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState >= 3U) { /* lss_switch_glob 0 */
 801108e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011092:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 801109c:	2b02      	cmp	r3, #2
 801109e:	f240 823f 	bls.w	8011520 <CO_GTWA_process+0x39fc>
                    /* send non-confirmed message */
                    ret = CO_LSSmaster_swStateDeselect(gtwa->LSSmaster);
 80110a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80110b0:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80110b4:	f2a2 1411 	subw	r4, r2, #273	; 0x111
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fb f895 	bl	800c1e8 <CO_LSSmaster_swStateDeselect>
 80110be:	4603      	mov	r3, r0
 80110c0:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_OK) {
 80110c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110c6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80110ca:	f993 3000 	ldrsb.w	r3, [r3]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d018      	beq.n	8011104 <CO_GTWA_process+0x35e0>
                        /* error occurred */
                        responseLSS(gtwa, ret);
 80110d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110d6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80110da:	f993 2000 	ldrsb.w	r2, [r3]
 80110de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80110e6:	4611      	mov	r1, r2
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	f7fc fcb5 	bl	800da58 <responseLSS>
                        gtwa->state = CO_GTWA_ST_IDLE;
 80110ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                                                              gtwa->lssFastscan.found.identity.revisionNumber,
                                                              gtwa->lssFastscan.found.identity.serialNumber, msg2);
                        (void)respBufTransfer(gtwa);
                    }
                }
                break;
 80110fe:	e20f      	b.n	8011520 <CO_GTWA_process+0x39fc>
 8011100:	08021afc 	.word	0x08021afc
                        uint8_t lssNidAssigned = gtwa->lssNID;
 8011104:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011108:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 801110c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8011110:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8011114:	6812      	ldr	r2, [r2, #0]
 8011116:	f892 220c 	ldrb.w	r2, [r2, #524]	; 0x20c
 801111a:	701a      	strb	r2, [r3, #0]
                        const char msg2Fmt[] = "# Not all nodes scanned!\n"
 801111c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011124:	4ab6      	ldr	r2, [pc, #728]	; (8011400 <CO_GTWA_process+0x38dc>)
 8011126:	461c      	mov	r4, r3
 8011128:	4615      	mov	r5, r2
 801112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011132:	682b      	ldr	r3, [r5, #0]
 8011134:	6023      	str	r3, [r4, #0]
                        char msg2[sizeof(msg2Fmt) + 10U] = {0};
 8011136:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801113a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]
 8011142:	3304      	adds	r3, #4
 8011144:	222a      	movs	r2, #42	; 0x2a
 8011146:	2100      	movs	r1, #0
 8011148:	4618      	mov	r0, r3
 801114a:	f00e f88b 	bl	801f264 <memset>
                        gtwa->lssNodeCount++;
 801114e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011152:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 801115c:	3301      	adds	r3, #1
 801115e:	b2da      	uxtb	r2, r3
 8011160:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011164:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
                        if (gtwa->lssNID < 127U) {
 801116e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011172:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 801117c:	2b7e      	cmp	r3, #126	; 0x7e
 801117e:	d82a      	bhi.n	80111d6 <CO_GTWA_process+0x36b2>
                            gtwa->lssNID++;
 8011180:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011184:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 801118e:	3301      	adds	r3, #1
 8011190:	b2da      	uxtb	r2, r3
 8011192:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011196:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, gtwa->lssTimeout_ms);
 80111a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80111ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80111bc:	4619      	mov	r1, r3
 80111be:	4610      	mov	r0, r2
 80111c0:	f7fa fef8 	bl	800bfb4 <CO_LSSmaster_changeTimeout>
                            gtwa->lssSubState = 0;
 80111c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80111d4:	e015      	b.n	8011202 <CO_GTWA_process+0x36de>
                            sprintf(msg2, msg2Fmt, (int32_t)gtwa->sequence);
 80111d6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111da:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	689b      	ldr	r3, [r3, #8]
 80111e2:	461a      	mov	r2, r3
 80111e4:	f107 0110 	add.w	r1, r7, #16
 80111e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111ec:	4618      	mov	r0, r3
 80111ee:	f00d ff27 	bl	801f040 <siprintf>
                            gtwa->state = CO_GTWA_ST_IDLE;
 80111f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8011202:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011206:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f103 05fd 	add.w	r5, r3, #253	; 0xfd
 8011210:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011214:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8011218:	781e      	ldrb	r6, [r3, #0]
 801121a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801121e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011228:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801122c:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8011230:	6812      	ldr	r2, [r2, #0]
 8011232:	f8d2 222c 	ldr.w	r2, [r2, #556]	; 0x22c
 8011236:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 801123a:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 801123e:	6809      	ldr	r1, [r1, #0]
 8011240:	f8d1 1230 	ldr.w	r1, [r1, #560]	; 0x230
 8011244:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8011248:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 801124c:	6800      	ldr	r0, [r0, #0]
 801124e:	f8d0 0234 	ldr.w	r0, [r0, #564]	; 0x234
 8011252:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8011256:	9404      	str	r4, [sp, #16]
 8011258:	9003      	str	r0, [sp, #12]
 801125a:	9102      	str	r1, [sp, #8]
 801125c:	9201      	str	r2, [sp, #4]
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	4633      	mov	r3, r6
 8011262:	4a68      	ldr	r2, [pc, #416]	; (8011404 <CO_GTWA_process+0x38e0>)
 8011264:	21c8      	movs	r1, #200	; 0xc8
 8011266:	4628      	mov	r0, r5
 8011268:	f00d feb6 	bl	801efd8 <sniprintf>
 801126c:	4603      	mov	r3, r0
 801126e:	461a      	mov	r2, r3
 8011270:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011274:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        (void)respBufTransfer(gtwa);
 801127e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011282:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011286:	6818      	ldr	r0, [r3, #0]
 8011288:	f7fc faba 	bl	800d800 <respBufTransfer>
                break;
 801128c:	e148      	b.n	8011520 <CO_GTWA_process+0x39fc>
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
            /* Print help string (in multiple segments if necessary) */
            case CO_GTWA_ST_HELP: {
                size_t lenBuf = CO_GTWA_RESP_BUF_SIZE;
 801128e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011296:	22c8      	movs	r2, #200	; 0xc8
 8011298:	601a      	str	r2, [r3, #0]
                size_t lenHelp = strlen(gtwa->helpString);
 801129a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801129e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80112a8:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80112ac:	f5a2 7484 	sub.w	r4, r2, #264	; 0x108
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ee ffed 	bl	8000290 <strlen>
 80112b6:	6020      	str	r0, [r4, #0]

                do {
                    size_t lenHelpRemain = lenHelp - gtwa->helpStringOffset;
 80112b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 80112c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80112ce:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80112d2:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 80112d6:	6809      	ldr	r1, [r1, #0]
 80112d8:	1a8a      	subs	r2, r1, r2
 80112da:	601a      	str	r2, [r3, #0]
                    size_t lenCopied = (lenBuf < lenHelpRemain) ? lenBuf : lenHelpRemain;
 80112dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80112e4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80112e8:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 80112ec:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80112f0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80112f4:	6809      	ldr	r1, [r1, #0]
 80112f6:	6812      	ldr	r2, [r2, #0]
 80112f8:	428a      	cmp	r2, r1
 80112fa:	bf28      	it	cs
 80112fc:	460a      	movcs	r2, r1
 80112fe:	601a      	str	r2, [r3, #0]

                    (void)memcpy(gtwa->respBuf, &gtwa->helpString[gtwa->helpStringOffset], lenCopied);
 8011300:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011304:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 801130e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011312:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 801131c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011320:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 801132a:	18d1      	adds	r1, r2, r3
 801132c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011330:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	f00e f831 	bl	801f39c <memcpy>

                    gtwa->respBufCount = lenCopied;
 801133a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801133e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8011348:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801134c:	6812      	ldr	r2, [r2, #0]
 801134e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                    gtwa->helpStringOffset += lenCopied;
 8011352:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011356:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 8011360:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	441a      	add	r2, r3
 801136c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011370:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
                    (void)respBufTransfer(gtwa);
 801137a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801137e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011382:	6818      	ldr	r0, [r3, #0]
 8011384:	f7fc fa3c 	bl	800d800 <respBufTransfer>

                    if (gtwa->helpStringOffset == lenHelp) {
 8011388:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801138c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8011396:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801139a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 801139e:	6812      	ldr	r2, [r2, #0]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d109      	bne.n	80113b8 <CO_GTWA_process+0x3894>
                        gtwa->state = CO_GTWA_ST_IDLE;
 80113a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        break;
 80113b4:	bf00      	nop
                    }
                } while (gtwa->respHold == false);
                break;
 80113b6:	e0b6      	b.n	8011526 <CO_GTWA_process+0x3a02>
                } while (gtwa->respHold == false);
 80113b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f43f af76 	beq.w	80112b8 <CO_GTWA_process+0x3794>
                break;
 80113cc:	e0ab      	b.n	8011526 <CO_GTWA_process+0x3a02>
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
            /* print CANopen status LED diodes */
            case CO_GTWA_ST_LED: {
                uint8_t i;

                if (CO_fifo_CommSearch(&gtwa->commFifo, false)) {
 80113ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	3318      	adds	r3, #24
 80113da:	2100      	movs	r1, #0
 80113dc:	4618      	mov	r0, r3
 80113de:	f7f8 fc7c 	bl	8009cda <CO_fifo_CommSearch>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d00f      	beq.n	8011408 <CO_GTWA_process+0x38e4>
                    gtwa->state = CO_GTWA_ST_IDLE;
 80113e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                    i = 4;
 80113f8:	2304      	movs	r3, #4
 80113fa:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80113fe:	e021      	b.n	8011444 <CO_GTWA_process+0x3920>
 8011400:	08021b70 	.word	0x08021b70
 8011404:	08021b2c 	.word	0x08021b2c
                } else {
                    i = (CO_LED_RED(gtwa->LEDs, CO_LED_CANopen) * 2U) + CO_LED_GREEN(gtwa->LEDs, CO_LED_CANopen);
 8011408:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801140c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8011416:	7a5b      	ldrb	r3, [r3, #9]
 8011418:	b25b      	sxtb	r3, r3
 801141a:	11db      	asrs	r3, r3, #7
 801141c:	b25b      	sxtb	r3, r3
 801141e:	b2db      	uxtb	r3, r3
 8011420:	f003 0301 	and.w	r3, r3, #1
 8011424:	b2db      	uxtb	r3, r3
 8011426:	005b      	lsls	r3, r3, #1
 8011428:	b2da      	uxtb	r2, r3
 801142a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801142e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8011438:	7a9b      	ldrb	r3, [r3, #10]
 801143a:	09db      	lsrs	r3, r3, #7
 801143c:	b2db      	uxtb	r3, r3
 801143e:	4413      	add	r3, r2
 8011440:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
                }
                if (i > (CO_GTWA_LED_PRINTOUTS_SIZE - 1U)) {
 8011444:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8011448:	2b04      	cmp	r3, #4
 801144a:	d902      	bls.n	8011452 <CO_GTWA_process+0x392e>
                    i = CO_GTWA_LED_PRINTOUTS_SIZE - 1U;
 801144c:	2304      	movs	r3, #4
 801144e:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
                }

                if (i != gtwa->ledStringPreviousIndex) {
 8011452:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011456:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8011460:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8011464:	429a      	cmp	r2, r3
 8011466:	d05d      	beq.n	8011524 <CO_GTWA_process+0x3a00>
                    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "%s",
 8011468:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801146c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 8011476:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 801147a:	4a41      	ldr	r2, [pc, #260]	; (8011580 <CO_GTWA_process+0x3a5c>)
 801147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011480:	4a40      	ldr	r2, [pc, #256]	; (8011584 <CO_GTWA_process+0x3a60>)
 8011482:	21c8      	movs	r1, #200	; 0xc8
 8011484:	f00d fda8 	bl	801efd8 <sniprintf>
 8011488:	4603      	mov	r3, r0
 801148a:	461a      	mov	r2, r3
 801148c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011490:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                                                          CO_GTWA_LED_PRINTOUTS[i]);
                    (void)respBufTransfer(gtwa);
 801149a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801149e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114a2:	6818      	ldr	r0, [r3, #0]
 80114a4:	f7fc f9ac 	bl	800d800 <respBufTransfer>
                    gtwa->ledStringPreviousIndex = i;
 80114a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80114b6:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
                }
                break;
 80114ba:	e033      	b.n	8011524 <CO_GTWA_process+0x3a00>
            }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

            /* illegal state */
            default: {
                respErrorCode = CO_GTWA_respErrorInternalState;
 80114bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80114c4:	2266      	movs	r2, #102	; 0x66
 80114c6:	801a      	strh	r2, [r3, #0]
                responseWithError(gtwa, respErrorCode);
 80114c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80114d0:	881a      	ldrh	r2, [r3, #0]
 80114d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114da:	4611      	mov	r1, r2
 80114dc:	6818      	ldr	r0, [r3, #0]
 80114de:	f7fc f9e9 	bl	800d8b4 <responseWithError>
                gtwa->state = CO_GTWA_ST_IDLE;
 80114e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2200      	movs	r2, #0
 80114ee:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                break;
 80114f2:	e018      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 80114f4:	bf00      	nop
 80114f6:	e016      	b.n	8011526 <CO_GTWA_process+0x3a02>
                        break;
 80114f8:	bf00      	nop
 80114fa:	e014      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 80114fc:	bf00      	nop
 80114fe:	e012      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011500:	bf00      	nop
 8011502:	e010      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011504:	bf00      	nop
 8011506:	e00e      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011508:	bf00      	nop
 801150a:	e00c      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 801150c:	bf00      	nop
 801150e:	e00a      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011510:	bf00      	nop
 8011512:	e008      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011514:	bf00      	nop
 8011516:	e006      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011518:	bf00      	nop
 801151a:	e004      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 801151c:	bf00      	nop
 801151e:	e002      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011520:	bf00      	nop
 8011522:	e000      	b.n	8011526 <CO_GTWA_process+0x3a02>
                break;
 8011524:	bf00      	nop
            }
        } /* switch (gtwa->state) */
    }

    /* execute next CANopen processing immediately, if idle and more commands available */
    if ((timerNext_us != NULL) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 8011526:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801152a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d020      	beq.n	8011576 <CO_GTWA_process+0x3a52>
 8011534:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011538:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8011542:	2b00      	cmp	r3, #0
 8011544:	d117      	bne.n	8011576 <CO_GTWA_process+0x3a52>
        if (CO_fifo_CommSearch(&gtwa->commFifo, false)) {
 8011546:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801154a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	3318      	adds	r3, #24
 8011552:	2100      	movs	r1, #0
 8011554:	4618      	mov	r0, r3
 8011556:	f7f8 fbc0 	bl	8009cda <CO_fifo_CommSearch>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d00a      	beq.n	8011576 <CO_GTWA_process+0x3a52>
            *timerNext_us = 0;
 8011560:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011564:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2200      	movs	r2, #0
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	e002      	b.n	8011576 <CO_GTWA_process+0x3a52>
        return;
 8011570:	bf00      	nop
 8011572:	e000      	b.n	8011576 <CO_GTWA_process+0x3a52>
                return; /* skip timerNext_us calculation */
 8011574:	bf00      	nop
        }
    }
}
 8011576:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 801157a:	46bd      	mov	sp, r7
 801157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801157e:	bf00      	nop
 8011580:	20000000 	.word	0x20000000
 8011584:	08021b6c 	.word	0x08021b6c

08011588 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	460b      	mov	r3, r1
 8011592:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8011594:	78fb      	ldrb	r3, [r7, #3]
 8011596:	08db      	lsrs	r3, r3, #3
 8011598:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 801159a:	78fb      	ldrb	r3, [r7, #3]
 801159c:	f003 0307 	and.w	r3, r3, #7
 80115a0:	2201      	movs	r2, #1
 80115a2:	fa02 f303 	lsl.w	r3, r2, r3
 80115a6:	73bb      	strb	r3, [r7, #14]
               : false;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00a      	beq.n	80115c4 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
 80115b0:	2b09      	cmp	r3, #9
 80115b2:	d807      	bhi.n	80115c4 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	5cd2      	ldrb	r2, [r2, r3]
 80115ba:	7bbb      	ldrb	r3, [r7, #14]
 80115bc:	4013      	ands	r3, r2
 80115be:	b2db      	uxtb	r3, r3
               : false;
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d001      	beq.n	80115c8 <CO_isError+0x40>
 80115c4:	2301      	movs	r3, #1
 80115c6:	e000      	b.n	80115ca <CO_isError+0x42>
 80115c8:	2300      	movs	r3, #0
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3714      	adds	r7, #20
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80115d6:	b480      	push	{r7}
 80115d8:	b083      	sub	sp, #12
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d007      	beq.n	80115f4 <CO_getErrorRegister+0x1e>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d003      	beq.n	80115f4 <CO_getErrorRegister+0x1e>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	e000      	b.n	80115f6 <CO_getErrorRegister+0x20>
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8011602:	b480      	push	{r7}
 8011604:	b083      	sub	sp, #12
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d003      	beq.n	8011618 <CO_NMT_getInternalState+0x16>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f993 3000 	ldrsb.w	r3, [r3]
 8011616:	e000      	b.n	801161a <CO_NMT_getInternalState+0x18>
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr

08011626 <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8011626:	b480      	push	{r7}
 8011628:	b083      	sub	sp, #12
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <CO_LSSslave_getState+0x14>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	7c1b      	ldrb	r3, [r3, #16]
 8011638:	e000      	b.n	801163c <CO_LSSslave_getState+0x16>
 801163a:	2300      	movs	r3, #0
}
 801163c:	4618      	mov	r0, r3
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8011648:	b580      	push	{r7, lr}
 801164a:	b086      	sub	sp, #24
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8011656:	2300      	movs	r3, #0
 8011658:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 801165a:	2300      	movs	r3, #0
 801165c:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 801165e:	214c      	movs	r1, #76	; 0x4c
 8011660:	2001      	movs	r0, #1
 8011662:	f00c f947 	bl	801d8f4 <calloc>
 8011666:	4603      	mov	r3, r0
 8011668:	60fb      	str	r3, [r7, #12]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 8137 	beq.w	80118e0 <CO_new+0x298>
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	334c      	adds	r3, #76	; 0x4c
 8011676:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8011678:	2138      	movs	r1, #56	; 0x38
 801167a:	2001      	movs	r0, #1
 801167c:	f00c f93a 	bl	801d8f4 <calloc>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	611a      	str	r2, [r3, #16]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 8127 	beq.w	80118e0 <CO_new+0x298>
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	3338      	adds	r3, #56	; 0x38
 8011696:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8011698:	2308      	movs	r3, #8
 801169a:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 801169c:	2130      	movs	r1, #48	; 0x30
 801169e:	2001      	movs	r0, #1
 80116a0:	f00c f928 	bl	801d8f4 <calloc>
 80116a4:	4603      	mov	r3, r0
 80116a6:	461a      	mov	r2, r3
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	615a      	str	r2, [r3, #20]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	f000 8115 	beq.w	80118e0 <CO_new+0x298>
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	3330      	adds	r3, #48	; 0x30
 80116ba:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80116bc:	7afb      	ldrb	r3, [r7, #11]
 80116be:	2110      	movs	r1, #16
 80116c0:	4618      	mov	r0, r3
 80116c2:	f00c f917 	bl	801d8f4 <calloc>
 80116c6:	4603      	mov	r3, r0
 80116c8:	461a      	mov	r2, r3
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	619a      	str	r2, [r3, #24]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	699b      	ldr	r3, [r3, #24]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 8104 	beq.w	80118e0 <CO_new+0x298>
 80116d8:	7afb      	ldrb	r3, [r7, #11]
 80116da:	011b      	lsls	r3, r3, #4
 80116dc:	693a      	ldr	r2, [r7, #16]
 80116de:	4413      	add	r3, r2
 80116e0:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80116e2:	2150      	movs	r1, #80	; 0x50
 80116e4:	2001      	movs	r0, #1
 80116e6:	f00c f905 	bl	801d8f4 <calloc>
 80116ea:	4603      	mov	r3, r0
 80116ec:	461a      	mov	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	61da      	str	r2, [r3, #28]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	69db      	ldr	r3, [r3, #28]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 80f2 	beq.w	80118e0 <CO_new+0x298>
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	3350      	adds	r3, #80	; 0x50
 8011700:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8011702:	2311      	movs	r3, #17
 8011704:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8011706:	7abb      	ldrb	r3, [r7, #10]
 8011708:	2b01      	cmp	r3, #1
 801170a:	d912      	bls.n	8011732 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 801170c:	7abb      	ldrb	r3, [r7, #10]
 801170e:	2108      	movs	r1, #8
 8011710:	4618      	mov	r0, r3
 8011712:	f00c f8ef 	bl	801d8f4 <calloc>
 8011716:	4603      	mov	r3, r0
 8011718:	461a      	mov	r2, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	621a      	str	r2, [r3, #32]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	2b00      	cmp	r3, #0
 8011724:	f000 80dc 	beq.w	80118e0 <CO_new+0x298>
 8011728:	7abb      	ldrb	r3, [r7, #10]
 801172a:	00db      	lsls	r3, r3, #3
 801172c:	693a      	ldr	r2, [r7, #16]
 801172e:	4413      	add	r3, r2
 8011730:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8011732:	21ac      	movs	r1, #172	; 0xac
 8011734:	2001      	movs	r0, #1
 8011736:	f00c f8dd 	bl	801d8f4 <calloc>
 801173a:	4603      	mov	r3, r0
 801173c:	461a      	mov	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	625a      	str	r2, [r3, #36]	; 0x24
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 80ca 	beq.w	80118e0 <CO_new+0x298>
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	33ac      	adds	r3, #172	; 0xac
 8011750:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0U) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8011752:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8011756:	2001      	movs	r0, #1
 8011758:	f00c f8cc 	bl	801d8f4 <calloc>
 801175c:	4603      	mov	r3, r0
 801175e:	461a      	mov	r2, r3
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	629a      	str	r2, [r3, #40]	; 0x28
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011768:	2b00      	cmp	r3, #0
 801176a:	f000 80b9 	beq.w	80118e0 <CO_new+0x298>
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8011774:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8011776:	212c      	movs	r1, #44	; 0x2c
 8011778:	2001      	movs	r0, #1
 801177a:	f00c f8bb 	bl	801d8f4 <calloc>
 801177e:	4603      	mov	r3, r0
 8011780:	461a      	mov	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	62da      	str	r2, [r3, #44]	; 0x2c
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178a:	2b00      	cmp	r3, #0
 801178c:	f000 80a8 	beq.w	80118e0 <CO_new+0x298>
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	332c      	adds	r3, #44	; 0x2c
 8011794:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8011796:	215c      	movs	r1, #92	; 0x5c
 8011798:	2001      	movs	r0, #1
 801179a:	f00c f8ab 	bl	801d8f4 <calloc>
 801179e:	4603      	mov	r3, r0
 80117a0:	461a      	mov	r2, r3
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	631a      	str	r2, [r3, #48]	; 0x30
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f000 8098 	beq.w	80118e0 <CO_new+0x298>
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	335c      	adds	r3, #92	; 0x5c
 80117b4:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80117b6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80117ba:	2001      	movs	r0, #1
 80117bc:	f00c f89a 	bl	801d8f4 <calloc>
 80117c0:	4603      	mov	r3, r0
 80117c2:	461a      	mov	r2, r3
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	635a      	str	r2, [r3, #52]	; 0x34
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 8087 	beq.w	80118e0 <CO_new+0x298>
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80117d8:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80117da:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80117de:	200c      	movs	r0, #12
 80117e0:	f00c f888 	bl	801d8f4 <calloc>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	639a      	str	r2, [r3, #56]	; 0x38
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d075      	beq.n	80118e0 <CO_new+0x298>
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 80117fa:	3310      	adds	r3, #16
 80117fc:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80117fe:	210c      	movs	r1, #12
 8011800:	2001      	movs	r0, #1
 8011802:	f00c f877 	bl	801d8f4 <calloc>
 8011806:	4603      	mov	r3, r0
 8011808:	461a      	mov	r2, r3
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	63da      	str	r2, [r3, #60]	; 0x3c
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011812:	2b00      	cmp	r3, #0
 8011814:	d064      	beq.n	80118e0 <CO_new+0x298>
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	330c      	adds	r3, #12
 801181a:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 801181c:	2174      	movs	r1, #116	; 0x74
 801181e:	2001      	movs	r0, #1
 8011820:	f00c f868 	bl	801d8f4 <calloc>
 8011824:	4603      	mov	r3, r0
 8011826:	461a      	mov	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	641a      	str	r2, [r3, #64]	; 0x40
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011830:	2b00      	cmp	r3, #0
 8011832:	d055      	beq.n	80118e0 <CO_new+0x298>
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	3374      	adds	r3, #116	; 0x74
 8011838:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_MST = 0);
        if (CO_GET_CNT(LSS_MST) == 1U) {
            CO_alloc_break_on_fail(co->LSSmaster, CO_GET_CNT(LSS_MST), sizeof(*co->LSSmaster));
 801183a:	2128      	movs	r1, #40	; 0x28
 801183c:	2001      	movs	r0, #1
 801183e:	f00c f859 	bl	801d8f4 <calloc>
 8011842:	4603      	mov	r3, r0
 8011844:	461a      	mov	r2, r3
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	645a      	str	r2, [r3, #68]	; 0x44
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184e:	2b00      	cmp	r3, #0
 8011850:	d046      	beq.n	80118e0 <CO_new+0x298>
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	3328      	adds	r3, #40	; 0x28
 8011856:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
        if (CO_GET_CNT(GTWA) == 1U) {
            CO_alloc_break_on_fail(co->gtwa, CO_GET_CNT(GTWA), sizeof(*co->gtwa));
 8011858:	f44f 7115 	mov.w	r1, #596	; 0x254
 801185c:	2001      	movs	r0, #1
 801185e:	f00c f849 	bl	801d8f4 <calloc>
 8011862:	4603      	mov	r3, r0
 8011864:	461a      	mov	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	649a      	str	r2, [r3, #72]	; 0x48
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801186e:	2b00      	cmp	r3, #0
 8011870:	d036      	beq.n	80118e0 <CO_new+0x298>
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011878:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 801187a:	2138      	movs	r1, #56	; 0x38
 801187c:	2001      	movs	r0, #1
 801187e:	f00c f839 	bl	801d8f4 <calloc>
 8011882:	4603      	mov	r3, r0
 8011884:	461a      	mov	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	605a      	str	r2, [r3, #4]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d026      	beq.n	80118e0 <CO_new+0x298>
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	3338      	adds	r3, #56	; 0x38
 8011896:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8011898:	210c      	movs	r1, #12
 801189a:	2010      	movs	r0, #16
 801189c:	f00c f82a 	bl	801d8f4 <calloc>
 80118a0:	4603      	mov	r3, r0
 80118a2:	461a      	mov	r2, r3
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	609a      	str	r2, [r3, #8]
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d017      	beq.n	80118e0 <CO_new+0x298>
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	33c0      	adds	r3, #192	; 0xc0
 80118b4:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80118b6:	2118      	movs	r1, #24
 80118b8:	2014      	movs	r0, #20
 80118ba:	f00c f81b 	bl	801d8f4 <calloc>
 80118be:	4603      	mov	r3, r0
 80118c0:	461a      	mov	r2, r3
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	60da      	str	r2, [r3, #12]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d008      	beq.n	80118e0 <CO_new+0x298>
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80118d4:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2201      	movs	r2, #1
 80118da:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d102      	bne.n	80118ec <CO_new+0x2a4>
        CO_delete(co);
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f000 f80b 	bl	8011902 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d002      	beq.n	80118f8 <CO_new+0x2b0>
        *heapMemoryUsed = mem;
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	693a      	ldr	r2, [r7, #16]
 80118f6:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80118f8:	697b      	ldr	r3, [r7, #20]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <CO_delete>:

void
CO_delete(CO_t* co) {
 8011902:	b580      	push	{r7, lr}
 8011904:	b082      	sub	sp, #8
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d062      	beq.n	80119d6 <CO_delete+0xd4>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	4618      	mov	r0, r3
 8011916:	f000 ffe1 	bl	80128dc <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	4618      	mov	r0, r3
 8011920:	f00c f80e 	bl	801d940 <free>
    CO_free(co->CANrx);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	4618      	mov	r0, r3
 801192a:	f00c f809 	bl	801d940 <free>
    CO_free(co->CANmodule);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	4618      	mov	r0, r3
 8011934:	f00c f804 	bl	801d940 <free>
#if (CO_CONFIG_TRACE) & CO_CONFIG_TRACE_ENABLE
    CO_free(co->trace);
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    CO_free(co->gtwa);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801193c:	4618      	mov	r0, r3
 801193e:	f00b ffff 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011946:	4618      	mov	r0, r3
 8011948:	f00b fffa 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011950:	4618      	mov	r0, r3
 8011952:	f00b fff5 	bl	801d940 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801195a:	4618      	mov	r0, r3
 801195c:	f00b fff0 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011964:	4618      	mov	r0, r3
 8011966:	f00b ffeb 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196e:	4618      	mov	r0, r3
 8011970:	f00b ffe6 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011978:	4618      	mov	r0, r3
 801197a:	f00b ffe1 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011982:	4618      	mov	r0, r3
 8011984:	f00b ffdc 	bl	801d940 <free>
#endif

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	4618      	mov	r0, r3
 801198e:	f00b ffd7 	bl	801d940 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011996:	4618      	mov	r0, r3
 8011998:	f00b ffd2 	bl	801d940 <free>

    /* Emergency */
    CO_free(co->em);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	69db      	ldr	r3, [r3, #28]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f00b ffcd 	bl	801d940 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f00b ffc8 	bl	801d940 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	699b      	ldr	r3, [r3, #24]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f00b ffc3 	bl	801d940 <free>
    CO_free(co->HBcons);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	695b      	ldr	r3, [r3, #20]
 80119be:	4618      	mov	r0, r3
 80119c0:	f00b ffbe 	bl	801d940 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f00b ffb9 	bl	801d940 <free>

    /* CANopen object */
    CO_free(co);
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f00b ffb6 	bl	801d940 <free>
 80119d4:	e000      	b.n	80119d8 <CO_delete+0xd6>
        return;
 80119d6:	bf00      	nop
}
 80119d8:	3708      	adds	r7, #8
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 80119de:	b580      	push	{r7, lr}
 80119e0:	b08a      	sub	sp, #40	; 0x28
 80119e2:	af04      	add	r7, sp, #16
 80119e4:	60f8      	str	r0, [r7, #12]
 80119e6:	60b9      	str	r1, [r7, #8]
 80119e8:	4613      	mov	r3, r2
 80119ea:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d102      	bne.n	80119f8 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80119f2:	f04f 33ff 	mov.w	r3, #4294967295
 80119f6:	e01a      	b.n	8011a2e <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8011a00:	68b8      	ldr	r0, [r7, #8]
 8011a02:	f000 fe7b 	bl	80126fc <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6858      	ldr	r0, [r3, #4]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6899      	ldr	r1, [r3, #8]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	88fa      	ldrh	r2, [r7, #6]
 8011a14:	9202      	str	r2, [sp, #8]
 8011a16:	2214      	movs	r2, #20
 8011a18:	9201      	str	r2, [sp, #4]
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	2310      	movs	r3, #16
 8011a1e:	460a      	mov	r2, r1
 8011a20:	68b9      	ldr	r1, [r7, #8]
 8011a22:	f000 fe93 	bl	801274c <CO_CANmodule_init>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8011a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3718      	adds	r7, #24
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b08c      	sub	sp, #48	; 0x30
 8011a3a:	af06      	add	r7, sp, #24
 8011a3c:	60f8      	str	r0, [r7, #12]
 8011a3e:	60b9      	str	r1, [r7, #8]
 8011a40:	607a      	str	r2, [r7, #4]
 8011a42:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8011a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a4e:	e01a      	b.n	8011a86 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	6852      	ldr	r2, [r2, #4]
 8011a5c:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8011a60:	9105      	str	r1, [sp, #20]
 8011a62:	2112      	movs	r1, #18
 8011a64:	9104      	str	r1, [sp, #16]
 8011a66:	9203      	str	r2, [sp, #12]
 8011a68:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8011a6c:	9202      	str	r2, [sp, #8]
 8011a6e:	220e      	movs	r2, #14
 8011a70:	9201      	str	r2, [sp, #4]
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	683a      	ldr	r2, [r7, #0]
 8011a78:	68b9      	ldr	r1, [r7, #8]
 8011a7a:	f7fb fae7 	bl	800d04c <CO_LSSslave_init>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8011a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3718      	adds	r7, #24
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
	...

08011a90 <CO_CANopenInit>:
				uint16_t SDOserverTimeoutTime_ms,
				uint16_t SDOclientTimeoutTime_ms,
                bool_t SDOclientBlockTransfer,
				uint8_t nodeId,
				uint32_t* errInfo)
{
 8011a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a92:	b095      	sub	sp, #84	; 0x54
 8011a94:	af0c      	add	r7, sp, #48	; 0x30
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL)))
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d102      	bne.n	8011aaa <CO_CANopenInit+0x1a>
    {
     return CO_ERROR_ILLEGAL_ARGUMENT;
 8011aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa8:	e1b1      	b.n	8011e0e <CO_CANopenInit+0x37e>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {co->NMT = NMT; }


    if (em == NULL) { em = co->em; }
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d102      	bne.n	8011ab6 <CO_CANopenInit+0x26>
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	69db      	ldr	r3, [r3, #28]
 8011ab4:	607b      	str	r3, [r7, #4]



    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0

    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT))
 8011abc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8011ac0:	2bff      	cmp	r3, #255	; 0xff
 8011ac2:	d103      	bne.n	8011acc <CO_CANopenInit+0x3c>
    {
     co->nodeIdUnconfigured = true;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	e00a      	b.n	8011ae2 <CO_CANopenInit+0x52>

    } else

#endif
        if ((nodeId < 1U) || (nodeId > 127U))
 8011acc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d003      	beq.n	8011adc <CO_CANopenInit+0x4c>
 8011ad4:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	da02      	bge.n	8011ae2 <CO_CANopenInit+0x52>
        {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae0:	e195      	b.n	8011e0e <CO_CANopenInit+0x37e>

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

    if (CO_GET_CNT(LEDS) == 1U)
    {
      err = CO_LEDs_init(co->LEDs);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7f9 ffc8 	bl	800ba7c <CO_LEDs_init>
 8011aec:	4603      	mov	r3, r0
 8011aee:	747b      	strb	r3, [r7, #17]
      if (err != CO_ERROR_NO) { return err; }
 8011af0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <CO_CANopenInit+0x6e>
 8011af8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011afc:	e187      	b.n	8011e0e <CO_CANopenInit+0x37e>
    }

#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if ( co->nodeIdUnconfigured ) { return CO_ERROR_NODE_ID_UNCONFIGURED_LSS; }
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <CO_CANopenInit+0x7c>
 8011b06:	f06f 0312 	mvn.w	r3, #18
 8011b0a:	e180      	b.n	8011e0e <CO_CANopenInit+0x37e>


    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
    {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	69d8      	ldr	r0, [r3, #28]
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	685c      	ldr	r4, [r3, #4]
 8011b14:	4b9e      	ldr	r3, [pc, #632]	; (8011d90 <CO_CANopenInit+0x300>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	f103 050c 	add.w	r5, r3, #12
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8011b22:	4b9b      	ldr	r3, [pc, #620]	; (8011d90 <CO_CANopenInit+0x300>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011b28:	336c      	adds	r3, #108	; 0x6c

#endif

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0

      OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8011b2a:	4a99      	ldr	r2, [pc, #612]	; (8011d90 <CO_CANopenInit+0x300>)
 8011b2c:	6812      	ldr	r2, [r2, #0]
 8011b2e:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011b30:	3218      	adds	r2, #24
 8011b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b34:	9105      	str	r1, [sp, #20]
 8011b36:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 8011b3a:	9104      	str	r1, [sp, #16]
 8011b3c:	9203      	str	r2, [sp, #12]
 8011b3e:	2202      	movs	r2, #2
 8011b40:	9202      	str	r2, [sp, #8]
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	2311      	movs	r3, #17
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	4633      	mov	r3, r6
 8011b4a:	462a      	mov	r2, r5
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	f7ef fb75 	bl	800123c <CO_EM_init>
 8011b52:	4603      	mov	r3, r0
 8011b54:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
      co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
      nodeId, errInfo);

        if (err != CO_ERROR_NO) {  return err;  }
 8011b56:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d002      	beq.n	8011b64 <CO_CANopenInit+0xd4>
 8011b5e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011b62:	e154      	b.n	8011e0e <CO_CANopenInit+0x37e>


    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
    {
       err = CO_NMT_init (	co->NMT,
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	691d      	ldr	r5, [r3, #16]
    		   	   	   	   	OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8011b68:	4b89      	ldr	r3, [pc, #548]	; (8011d90 <CO_CANopenInit+0x300>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	685b      	ldr	r3, [r3, #4]
       err = CO_NMT_init (	co->NMT,
 8011b6e:	f103 0690 	add.w	r6, r3, #144	; 0x90
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	68fa      	ldr	r2, [r7, #12]
 8011b78:	6852      	ldr	r2, [r2, #4]
 8011b7a:	68f9      	ldr	r1, [r7, #12]
 8011b7c:	6849      	ldr	r1, [r1, #4]
 8011b7e:	f897 0050 	ldrb.w	r0, [r7, #80]	; 0x50
 8011b82:	b280      	uxth	r0, r0
 8011b84:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 8011b88:	b280      	uxth	r0, r0
 8011b8a:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 8011b8e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011b90:	940b      	str	r4, [sp, #44]	; 0x2c
 8011b92:	900a      	str	r0, [sp, #40]	; 0x28
 8011b94:	2011      	movs	r0, #17
 8011b96:	9009      	str	r0, [sp, #36]	; 0x24
 8011b98:	9108      	str	r1, [sp, #32]
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	9107      	str	r1, [sp, #28]
 8011b9e:	2100      	movs	r1, #0
 8011ba0:	9106      	str	r1, [sp, #24]
 8011ba2:	9205      	str	r2, [sp, #20]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	9204      	str	r2, [sp, #16]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	9203      	str	r2, [sp, #12]
 8011bac:	9302      	str	r3, [sp, #8]
 8011bae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011bb2:	9301      	str	r3, [sp, #4]
 8011bb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	4663      	mov	r3, ip
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f7f0 f9cc 	bl	8001f5c <CO_NMT_init>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
							co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
							co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);

        if (err != CO_ERROR_NO) { return err; }
 8011bc8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d002      	beq.n	8011bd6 <CO_CANopenInit+0x146>
 8011bd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011bd4:	e11b      	b.n	8011e0e <CO_CANopenInit+0x37e>

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0

    if (CO_GET_CNT(HB_CONS) == 1U)
    {
       err = CO_HBconsumer_init	( co->HBcons,
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6958      	ldr	r0, [r3, #20]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	699c      	ldr	r4, [r3, #24]
    		   	   	   	   	   	  em,
								  co->HBconsMonitoredNodes,
								  CO_GET_CNT(ARR_1016),
                                  OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8011bde:	4b6c      	ldr	r3, [pc, #432]	; (8011d90 <CO_CANopenInit+0x300>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685b      	ldr	r3, [r3, #4]
       err = CO_HBconsumer_init	( co->HBcons,
 8011be4:	3384      	adds	r3, #132	; 0x84
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	6852      	ldr	r2, [r2, #4]
 8011bea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011bec:	9103      	str	r1, [sp, #12]
 8011bee:	2106      	movs	r1, #6
 8011bf0:	9102      	str	r1, [sp, #8]
 8011bf2:	9201      	str	r2, [sp, #4]
 8011bf4:	9300      	str	r3, [sp, #0]
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	6879      	ldr	r1, [r7, #4]
 8011bfc:	f7ef feb4 	bl	8001968 <CO_HBconsumer_init>
 8011c00:	4603      	mov	r3, r0
 8011c02:	747b      	strb	r3, [r7, #17]
								  co->CANmodule,
								  CO_GET_CO(RX_IDX_HB_CONS),
								  errInfo
								 );

        if (err != CO_ERROR_NO) {  return err; }
 8011c04:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d002      	beq.n	8011c12 <CO_CANopenInit+0x182>
 8011c0c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011c10:	e0fd      	b.n	8011e0e <CO_CANopenInit+0x37e>
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U)
    			{
    				OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8011c12:	4b5f      	ldr	r3, [pc, #380]	; (8011d90 <CO_CANopenInit+0x300>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	33b4      	adds	r3, #180	; 0xb4
 8011c1a:	61fb      	str	r3, [r7, #28]

    				for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	837b      	strh	r3, [r7, #26]
 8011c20:	e030      	b.n	8011c84 <CO_CANopenInit+0x1f4>
    						{ err = CO_SDOserver_init ( &co->SDOserver[i],
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c26:	8b7b      	ldrh	r3, [r7, #26]
 8011c28:	21ac      	movs	r1, #172	; 0xac
 8011c2a:	fb01 f303 	mul.w	r3, r1, r3
 8011c2e:	18d5      	adds	r5, r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	8b7a      	ldrh	r2, [r7, #26]
 8011c36:	3204      	adds	r2, #4
 8011c38:	b292      	uxth	r2, r2
 8011c3a:	68f9      	ldr	r1, [r7, #12]
 8011c3c:	6849      	ldr	r1, [r1, #4]
 8011c3e:	8b78      	ldrh	r0, [r7, #26]
 8011c40:	300f      	adds	r0, #15
 8011c42:	b280      	uxth	r0, r0
 8011c44:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 8011c48:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011c4a:	9405      	str	r4, [sp, #20]
 8011c4c:	9004      	str	r0, [sp, #16]
 8011c4e:	9103      	str	r1, [sp, #12]
 8011c50:	9202      	str	r2, [sp, #8]
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c58:	9300      	str	r3, [sp, #0]
 8011c5a:	4633      	mov	r3, r6
 8011c5c:	69fa      	ldr	r2, [r7, #28]
 8011c5e:	6839      	ldr	r1, [r7, #0]
 8011c60:	4628      	mov	r0, r5
 8011c62:	f7f6 f83d 	bl	8007ce0 <CO_SDOserver_init>
 8011c66:	4603      	mov	r3, r0
 8011c68:	747b      	strb	r3, [r7, #17]
														co->CANmodule,
														CO_GET_CO(TX_IDX_SDO_SRV) + i,
														errInfo
													  );

    						if (err != CO_ERROR_NO) {  return err;  }
 8011c6a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d002      	beq.n	8011c78 <CO_CANopenInit+0x1e8>
 8011c72:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011c76:	e0ca      	b.n	8011e0e <CO_CANopenInit+0x37e>
    						SDOsrvPar++;
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	330c      	adds	r3, #12
 8011c7c:	61fb      	str	r3, [r7, #28]
    				for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 8011c7e:	8b7b      	ldrh	r3, [r7, #26]
 8011c80:	3301      	adds	r3, #1
 8011c82:	837b      	strh	r3, [r7, #26]
 8011c84:	8b7b      	ldrh	r3, [r7, #26]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d0cb      	beq.n	8011c22 <CO_CANopenInit+0x192>

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0

    if (CO_GET_CNT(SDO_CLI) > 0U)
    		{
        	OD_entry_t* SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8011c8a:	4b41      	ldr	r3, [pc, #260]	; (8011d90 <CO_CANopenInit+0x300>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	33c0      	adds	r3, #192	; 0xc0
 8011c92:	617b      	str	r3, [r7, #20]
        		for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++)
 8011c94:	2300      	movs	r3, #0
 8011c96:	827b      	strh	r3, [r7, #18]
 8011c98:	e02e      	b.n	8011cf8 <CO_CANopenInit+0x268>
        				{
        				err = CO_SDOclient_init(&co->SDOclient[i], od, SDOcliPar, nodeId, co->CANmodule,
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c9e:	8a7b      	ldrh	r3, [r7, #18]
 8011ca0:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8011ca4:	fb01 f303 	mul.w	r3, r1, r3
 8011ca8:	18d5      	adds	r5, r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	8a7a      	ldrh	r2, [r7, #18]
 8011cb0:	3205      	adds	r2, #5
 8011cb2:	b292      	uxth	r2, r2
 8011cb4:	68f9      	ldr	r1, [r7, #12]
 8011cb6:	6849      	ldr	r1, [r1, #4]
 8011cb8:	8a78      	ldrh	r0, [r7, #18]
 8011cba:	3010      	adds	r0, #16
 8011cbc:	b280      	uxth	r0, r0
 8011cbe:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 8011cc2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011cc4:	9404      	str	r4, [sp, #16]
 8011cc6:	9003      	str	r0, [sp, #12]
 8011cc8:	9102      	str	r1, [sp, #8]
 8011cca:	9201      	str	r2, [sp, #4]
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	4633      	mov	r3, r6
 8011cd0:	697a      	ldr	r2, [r7, #20]
 8011cd2:	6839      	ldr	r1, [r7, #0]
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f7f2 fcf1 	bl	80046bc <CO_SDOclient_init>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
        				SDOcliPar++;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	330c      	adds	r3, #12
 8011ce2:	617b      	str	r3, [r7, #20]
        				if (err != CO_ERROR_NO) { return err; }
 8011ce4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d002      	beq.n	8011cf2 <CO_CANopenInit+0x262>
 8011cec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011cf0:	e08d      	b.n	8011e0e <CO_CANopenInit+0x37e>
        		for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++)
 8011cf2:	8a7b      	ldrh	r3, [r7, #18]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	827b      	strh	r3, [r7, #18]
 8011cf8:	8a7b      	ldrh	r3, [r7, #18]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d0cd      	beq.n	8011c9a <CO_CANopenInit+0x20a>

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0

    if (CO_GET_CNT(TIME) == 1U)
    {
        err = CO_TIME_init ( co->TIME,
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        					 OD_GET(H1012, OD_H1012_COBID_TIME),
 8011d02:	4b23      	ldr	r3, [pc, #140]	; (8011d90 <CO_CANopenInit+0x300>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init ( co->TIME,
 8011d08:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	2302      	movs	r3, #2
 8011d16:	f7f7 fcaf 	bl	8009678 <CO_TIME_init>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	747b      	strb	r3, [r7, #17]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {  return err; }
 8011d1e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d002      	beq.n	8011d2c <CO_CANopenInit+0x29c>
 8011d26:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d2a:	e070      	b.n	8011e0e <CO_CANopenInit+0x37e>

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0

    if (CO_GET_CNT(SYNC) == 1U)
    {
        err = CO_SYNC_init ( co->SYNC,
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
        					 em,
							 OD_GET(H1005, OD_H1005_COBID_SYNC),
 8011d30:	4b17      	ldr	r3, [pc, #92]	; (8011d90 <CO_CANopenInit+0x300>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 8011d36:	f103 0624 	add.w	r6, r3, #36	; 0x24
							 OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8011d3a:	4b15      	ldr	r3, [pc, #84]	; (8011d90 <CO_CANopenInit+0x300>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 8011d40:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                             OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8011d44:	4b12      	ldr	r3, [pc, #72]	; (8011d90 <CO_CANopenInit+0x300>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 8011d4a:	333c      	adds	r3, #60	; 0x3c
							 OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8011d4c:	4a10      	ldr	r2, [pc, #64]	; (8011d90 <CO_CANopenInit+0x300>)
 8011d4e:	6812      	ldr	r2, [r2, #0]
 8011d50:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init ( co->SYNC,
 8011d52:	32a8      	adds	r2, #168	; 0xa8
 8011d54:	68f9      	ldr	r1, [r7, #12]
 8011d56:	6849      	ldr	r1, [r1, #4]
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	6840      	ldr	r0, [r0, #4]
 8011d5c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011d5e:	9406      	str	r4, [sp, #24]
 8011d60:	2401      	movs	r4, #1
 8011d62:	9405      	str	r4, [sp, #20]
 8011d64:	9004      	str	r0, [sp, #16]
 8011d66:	2001      	movs	r0, #1
 8011d68:	9003      	str	r0, [sp, #12]
 8011d6a:	9102      	str	r1, [sp, #8]
 8011d6c:	9201      	str	r2, [sp, #4]
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	4663      	mov	r3, ip
 8011d72:	4632      	mov	r2, r6
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	4628      	mov	r0, r5
 8011d78:	f7f7 f9b8 	bl	80090ec <CO_SYNC_init>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	747b      	strb	r3, [r7, #17]
							 co->CANmodule,
							 CO_GET_CO(TX_IDX_SYNC),
#endif
							 errInfo);

        if (err != CO_ERROR_NO) { return err; }
 8011d80:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d005      	beq.n	8011d94 <CO_CANopenInit+0x304>
 8011d88:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011d8c:	e03f      	b.n	8011e0e <CO_CANopenInit+0x37e>
 8011d8e:	bf00      	nop
 8011d90:	200005d8 	.word	0x200005d8
    }
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    if (CO_GET_CNT(LSS_MST) == 1U) {
        err = CO_LSSmaster_init(co->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT, co->CANmodule, CO_GET_CO(RX_IDX_LSS_MST),
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	f240 71e5 	movw	r1, #2021	; 0x7e5
 8011da4:	9103      	str	r1, [sp, #12]
 8011da6:	2113      	movs	r1, #19
 8011da8:	9102      	str	r1, [sp, #8]
 8011daa:	9301      	str	r3, [sp, #4]
 8011dac:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8011db0:	9300      	str	r3, [sp, #0]
 8011db2:	230f      	movs	r3, #15
 8011db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011db8:	f7fa f89c 	bl	800bef4 <CO_LSSmaster_init>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	747b      	strb	r3, [r7, #17]
                                CO_CAN_ID_LSS_SLV, co->CANmodule, CO_GET_CO(TX_IDX_LSS_MST), CO_CAN_ID_LSS_MST);
        if (err != CO_ERROR_NO) {
 8011dc0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d002      	beq.n	8011dce <CO_CANopenInit+0x33e>
            return err;
 8011dc8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011dcc:	e01f      	b.n	8011e0e <CO_CANopenInit+0x37e>
    }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    if (CO_GET_CNT(GTWA) == 1U) {
        err = CO_GTWA_init(co->gtwa,
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8011dde:	68f9      	ldr	r1, [r7, #12]
 8011de0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8011de2:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 8011de6:	2600      	movs	r6, #0
 8011de8:	9603      	str	r6, [sp, #12]
 8011dea:	9102      	str	r1, [sp, #8]
 8011dec:	9201      	str	r2, [sp, #4]
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df2:	462a      	mov	r2, r5
 8011df4:	4621      	mov	r1, r4
 8011df6:	f7fb fc03 	bl	800d600 <CO_GTWA_init>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
                           co->LEDs,
#endif
                           0);
        if (err != CO_ERROR_NO) {
 8011dfe:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <CO_CANopenInit+0x37c>
            return err;
 8011e06:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011e0a:	e000      	b.n	8011e0e <CO_CANopenInit+0x37e>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3724      	adds	r7, #36	; 0x24
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e16:	bf00      	nop

08011e18 <CO_CANopenInitPDO>:
CO_CANopenInitPDO (	CO_t* 		co,
					CO_EM_t* 	em,
					OD_t* 		od,
					uint8_t 	nodeId,
					uint32_t* 	errInfo )
{
 8011e18:	b590      	push	{r4, r7, lr}
 8011e1a:	b093      	sub	sp, #76	; 0x4c
 8011e1c:	af06      	add	r7, sp, #24
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
 8011e24:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d102      	bne.n	8011e32 <CO_CANopenInitPDO+0x1a>
 8011e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e30:	e0b3      	b.n	8011f9a <CO_CANopenInitPDO+0x182>


    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured)
 8011e32:	78fb      	ldrb	r3, [r7, #3]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d007      	beq.n	8011e48 <CO_CANopenInitPDO+0x30>
 8011e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	db03      	blt.n	8011e48 <CO_CANopenInitPDO+0x30>
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d009      	beq.n	8011e5c <CO_CANopenInitPDO+0x44>
    {
     return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <CO_CANopenInitPDO+0x3e>
 8011e50:	f06f 0312 	mvn.w	r3, #18
 8011e54:	e0a1      	b.n	8011f9a <CO_CANopenInitPDO+0x182>
 8011e56:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5a:	e09e      	b.n	8011f9a <CO_CANopenInitPDO+0x182>

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0

    if (CO_GET_CNT(RPDO) > 0U)
    {
     OD_entry_t* RPDOcomm 	= OD_GET(H1400, OD_H1400_RXPDO_1_PARAM  );
 8011e5c:	4b51      	ldr	r3, [pc, #324]	; (8011fa4 <CO_CANopenInitPDO+0x18c>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	33cc      	adds	r3, #204	; 0xcc
 8011e64:	62fb      	str	r3, [r7, #44]	; 0x2c
     OD_entry_t* RPDOmap 	= OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8011e66:	4b4f      	ldr	r3, [pc, #316]	; (8011fa4 <CO_CANopenInitPDO+0x18c>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	33d8      	adds	r3, #216	; 0xd8
 8011e6e:	62bb      	str	r3, [r7, #40]	; 0x28
     for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 8011e70:	2300      	movs	r3, #0
 8011e72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011e74:	e03d      	b.n	8011ef2 <CO_CANopenInitPDO+0xda>
     	 {
    	 CO_ReturnError_t err;
    	 uint16_t preDefinedCanId = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	84bb      	strh	r3, [r7, #36]	; 0x24
    	 if (i < CO_RPDO_DEFAULT_CANID_COUNT)
 8011e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e7c:	2b03      	cmp	r3, #3
 8011e7e:	d808      	bhi.n	8011e92 <CO_CANopenInitPDO+0x7a>
    	 	 {

#if CO_RPDO_DEFAULT_CANID_COUNT <= 4

    		 preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 8011e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e82:	3302      	adds	r3, #2
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	021b      	lsls	r3, r3, #8
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	78fb      	ldrb	r3, [r7, #3]
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	4413      	add	r3, r2
 8011e90:	84bb      	strh	r3, [r7, #36]	; 0x24
    		 uint16_t pdoOffset = i % 4;
    		 uint16_t nodeIdOffset = i / 4;
    		 preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init (&co->RPDO[i],
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e98:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8011e9c:	fb01 f303 	mul.w	r3, r1, r3
 8011ea0:	18d0      	adds	r0, r2, r3
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011eac:	3203      	adds	r2, #3
 8011eae:	b292      	uxth	r2, r2
 8011eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011eb2:	9105      	str	r1, [sp, #20]
 8011eb4:	9204      	str	r2, [sp, #16]
 8011eb6:	9303      	str	r3, [sp, #12]
 8011eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eba:	9302      	str	r3, [sp, #8]
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	9301      	str	r3, [sp, #4]
 8011ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	4623      	mov	r3, r4
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	6879      	ldr	r1, [r7, #4]
 8011eca:	f7f1 fa31 	bl	8003330 <CO_RPDO_init>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75bb      	strb	r3, [r7, #22]
								RPDOmap,
								co->CANmodule,
								CO_GET_CO(RX_IDX_RPDO) + i,
								errInfo
							  );
            if (err != CO_ERROR_NO) { return err; }
 8011ed2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d002      	beq.n	8011ee0 <CO_CANopenInitPDO+0xc8>
 8011eda:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011ede:	e05c      	b.n	8011f9a <CO_CANopenInitPDO+0x182>


            RPDOcomm++;
 8011ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee2:	330c      	adds	r3, #12
 8011ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
            RPDOmap++;
 8011ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee8:	330c      	adds	r3, #12
 8011eea:	62bb      	str	r3, [r7, #40]	; 0x28
     for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 8011eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011eee:	3301      	adds	r3, #1
 8011ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d0be      	beq.n	8011e76 <CO_CANopenInitPDO+0x5e>

#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8011ef8:	4b2a      	ldr	r3, [pc, #168]	; (8011fa4 <CO_CANopenInitPDO+0x18c>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	33e4      	adds	r3, #228	; 0xe4
 8011f00:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8011f02:	4b28      	ldr	r3, [pc, #160]	; (8011fa4 <CO_CANopenInitPDO+0x18c>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011f0c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8011f0e:	2300      	movs	r3, #0
 8011f10:	837b      	strh	r3, [r7, #26]
 8011f12:	e03e      	b.n	8011f92 <CO_CANopenInitPDO+0x17a>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8011f14:	2300      	movs	r3, #0
 8011f16:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8011f18:	8b7b      	ldrh	r3, [r7, #26]
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	d809      	bhi.n	8011f32 <CO_CANopenInitPDO+0x11a>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8011f1e:	8b7b      	ldrh	r3, [r7, #26]
 8011f20:	021b      	lsls	r3, r3, #8
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	78fb      	ldrb	r3, [r7, #3]
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	4413      	add	r3, r2
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8011f30:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f36:	8b7b      	ldrh	r3, [r7, #26]
 8011f38:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8011f3c:	fb01 f303 	mul.w	r3, r1, r3
 8011f40:	18d0      	adds	r0, r2, r3
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	8b7a      	ldrh	r2, [r7, #26]
 8011f4c:	3203      	adds	r2, #3
 8011f4e:	b292      	uxth	r2, r2
 8011f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f52:	9105      	str	r1, [sp, #20]
 8011f54:	9204      	str	r2, [sp, #16]
 8011f56:	9303      	str	r3, [sp, #12]
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	9302      	str	r3, [sp, #8]
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	9301      	str	r3, [sp, #4]
 8011f60:	8b3b      	ldrh	r3, [r7, #24]
 8011f62:	9300      	str	r3, [sp, #0]
 8011f64:	4623      	mov	r3, r4
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	f7f1 fdc1 	bl	8003af0 <CO_TPDO_init>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	75fb      	strb	r3, [r7, #23]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8011f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <CO_CANopenInitPDO+0x168>
                return err;
 8011f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f7e:	e00c      	b.n	8011f9a <CO_CANopenInitPDO+0x182>
            }
            TPDOcomm++;
 8011f80:	6a3b      	ldr	r3, [r7, #32]
 8011f82:	330c      	adds	r3, #12
 8011f84:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	330c      	adds	r3, #12
 8011f8a:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8011f8c:	8b7b      	ldrh	r3, [r7, #26]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	837b      	strh	r3, [r7, #26]
 8011f92:	8b7b      	ldrh	r3, [r7, #26]
 8011f94:	2b0b      	cmp	r3, #11
 8011f96:	d9bd      	bls.n	8011f14 <CO_CANopenInitPDO+0xfc>
        }
    }
#endif

    return CO_ERROR_NO;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3734      	adds	r7, #52	; 0x34
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd90      	pop	{r4, r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	200005d8 	.word	0x200005d8

08011fa8 <CO_process>:
CO_NMT_reset_cmd_t
CO_process(	CO_t* co,
			bool_t enableGateway,
			uint32_t timeDifference_us,
			uint32_t* timerNext_us )
{
 8011fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011faa:	b09b      	sub	sp, #108	; 0x6c
 8011fac:	af08      	add	r7, sp, #32
 8011fae:	61f8      	str	r0, [r7, #28]
 8011fb0:	61b9      	str	r1, [r7, #24]
 8011fb2:	617a      	str	r2, [r7, #20]
 8011fb4:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t 		reset 	= CO_RESET_NOT;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t 	NMTstate = CO_NMT_getInternalState(co->NMT);
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7ff fb1e 	bl	8011602 <CO_NMT_getInternalState>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t 					NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8011fcc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8011fd2:	d003      	beq.n	8011fdc <CO_process+0x34>
 8011fd4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011fd8:	2b05      	cmp	r3, #5
 8011fda:	d101      	bne.n	8011fe0 <CO_process+0x38>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e000      	b.n	8011fe2 <CO_process+0x3a>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f000 fe0e 	bl	8012c0a <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)

    if (CO_GET_CNT(LSS_SLV) == 1U)
    {
      if (CO_LSSslave_process(co->LSSslave)) { reset = CO_RESET_COMM; }
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fb f8a0 	bl	800d138 <CO_LSSslave_process>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d002      	beq.n	8012004 <CO_process+0x5c>
 8011ffe:	2301      	movs	r3, #1
 8012000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE)!= 0
    bool_t 		unc 			= co->nodeIdUnconfigured;
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t 	CANerrorStatus 	= co->CANmodule->CANerrorStatus;
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	8a5b      	ldrh	r3, [r3, #18]
 8012010:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t 		LSSslave_configuration = false;
 8012012:	2300      	movs	r3, #0
 8012014:	643b      	str	r3, [r7, #64]	; 0x40

	#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0

		if (CO_GET_CNT(LSS_SLV) == 1U)
		{
			if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION)
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fb03 	bl	8011626 <CO_LSSslave_getState>
 8012020:	4603      	mov	r3, r0
 8012022:	2b01      	cmp	r3, #1
 8012024:	d101      	bne.n	801202a <CO_process+0x82>
					{ LSSslave_configuration = true; }
 8012026:	2301      	movs	r3, #1
 8012028:	643b      	str	r3, [r7, #64]	; 0x40
		#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
		#endif

		if (CO_GET_CNT(LEDS) == 1U)
		{
			bool_t ErrSync 	     	= CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	69db      	ldr	r3, [r3, #28]
 801202e:	2118      	movs	r1, #24
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff faa9 	bl	8011588 <CO_isError>
 8012036:	62f8      	str	r0, [r7, #44]	; 0x2c
			bool_t ErrHbCons 		= CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	69db      	ldr	r3, [r3, #28]
 801203c:	211b      	movs	r1, #27
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff faa2 	bl	8011588 <CO_isError>
 8012044:	62b8      	str	r0, [r7, #40]	; 0x28
			bool_t ErrHbConsRemote 	= CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	69db      	ldr	r3, [r3, #28]
 801204a:	211c      	movs	r1, #28
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff fa9b 	bl	8011588 <CO_isError>
 8012052:	6278      	str	r0, [r7, #36]	; 0x24
			CO_LEDs_process(co->LEDs,
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205a:	2b00      	cmp	r3, #0
 801205c:	d102      	bne.n	8012064 <CO_process+0xbc>
 801205e:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 8012062:	e000      	b.n	8012066 <CO_process+0xbe>
 8012064:	2500      	movs	r5, #0
							timeDifference_us,
							unc ? CO_NMT_INITIALIZING : NMTstate,
							LSSslave_configuration,
							(CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) 	!= 0U,
 8012066:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012068:	f003 0304 	and.w	r3, r3, #4
			CO_LEDs_process(co->LEDs,
 801206c:	2b00      	cmp	r3, #0
 801206e:	bf14      	ite	ne
 8012070:	2301      	movne	r3, #1
 8012072:	2300      	moveq	r3, #0
 8012074:	b2db      	uxtb	r3, r3
 8012076:	60fb      	str	r3, [r7, #12]
							(CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) 	!= 0U,
 8012078:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801207a:	f240 3303 	movw	r3, #771	; 0x303
 801207e:	4013      	ands	r3, r2
			CO_LEDs_process(co->LEDs,
 8012080:	2b00      	cmp	r3, #0
 8012082:	bf14      	ite	ne
 8012084:	2301      	movne	r3, #1
 8012086:	2300      	moveq	r3, #0
 8012088:	b2db      	uxtb	r3, r3
 801208a:	60bb      	str	r3, [r7, #8]
 801208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <CO_process+0xee>
 8012092:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8012094:	e000      	b.n	8012098 <CO_process+0xf0>
 8012096:	2400      	movs	r4, #0
							false, /* RPDO event timer timeout */
							unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8012098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801209a:	2b00      	cmp	r3, #0
 801209c:	d107      	bne.n	80120ae <CO_process+0x106>
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d102      	bne.n	80120aa <CO_process+0x102>
 80120a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <CO_process+0x106>
 80120aa:	2301      	movs	r3, #1
 80120ac:	e000      	b.n	80120b0 <CO_process+0x108>
 80120ae:	2300      	movs	r3, #0
			CO_LEDs_process(co->LEDs,
 80120b0:	607b      	str	r3, [r7, #4]
							CO_getErrorRegister(co->em) != 0U,
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	69db      	ldr	r3, [r3, #28]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7ff fa8d 	bl	80115d6 <CO_getErrorRegister>
 80120bc:	4603      	mov	r3, r0
			CO_LEDs_process(co->LEDs,
 80120be:	2b00      	cmp	r3, #0
 80120c0:	bf14      	ite	ne
 80120c2:	2301      	movne	r3, #1
 80120c4:	2300      	moveq	r3, #0
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	461a      	mov	r2, r3
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	9307      	str	r3, [sp, #28]
 80120ce:	2300      	movs	r3, #0
 80120d0:	9306      	str	r3, [sp, #24]
 80120d2:	9205      	str	r2, [sp, #20]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	9304      	str	r3, [sp, #16]
 80120d8:	9403      	str	r4, [sp, #12]
 80120da:	2300      	movs	r3, #0
 80120dc:	9302      	str	r3, [sp, #8]
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	9301      	str	r3, [sp, #4]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120e8:	462a      	mov	r2, r5
 80120ea:	6979      	ldr	r1, [r7, #20]
 80120ec:	4630      	mov	r0, r6
 80120ee:	f7f9 fcdd 	bl	800baac <CO_LEDs_process>
		}

#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) { return reset;}
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <CO_process+0x158>
 80120fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80120fe:	e04e      	b.n	801219e <CO_process+0x1f6>


    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
    {
    	CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	69d8      	ldr	r0, [r3, #28]
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	697a      	ldr	r2, [r7, #20]
 8012108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801210a:	f7ef f977 	bl	80013fc <CO_EM_process>


    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
    {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	6918      	ldr	r0, [r3, #16]
 8012112:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	697a      	ldr	r2, [r7, #20]
 801211a:	f7ef fff9 	bl	8002110 <CO_NMT_process>
 801211e:	4603      	mov	r3, r0
 8012120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8012124:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012128:	2b7f      	cmp	r3, #127	; 0x7f
 801212a:	d003      	beq.n	8012134 <CO_process+0x18c>
 801212c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012130:	2b05      	cmp	r3, #5
 8012132:	d101      	bne.n	8012138 <CO_process+0x190>
 8012134:	2301      	movs	r3, #1
 8012136:	e000      	b.n	801213a <CO_process+0x192>
 8012138:	2300      	movs	r3, #0
 801213a:	63bb      	str	r3, [r7, #56]	; 0x38


    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 801213c:	2300      	movs	r3, #0
 801213e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012142:	e011      	b.n	8012168 <CO_process+0x1c0>
    {
        (void)CO_SDOserver_process (
        							&co->SDOserver[i],
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012148:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801214c:	21ac      	movs	r1, #172	; 0xac
 801214e:	fb01 f303 	mul.w	r3, r1, r3
        (void)CO_SDOserver_process (
 8012152:	18d0      	adds	r0, r2, r3
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	697a      	ldr	r2, [r7, #20]
 8012158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801215a:	f7f6 f8ab 	bl	80082b4 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 801215e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012162:	3301      	adds	r3, #1
 8012164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012168:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801216c:	2b00      	cmp	r3, #0
 801216e:	d0e9      	beq.n	8012144 <CO_process+0x19c>
								   );
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	6958      	ldr	r0, [r3, #20]
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	697a      	ldr	r2, [r7, #20]
 8012178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801217a:	f7ef fd37 	bl	8001bec <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012186:	4618      	mov	r0, r3
 8012188:	f7f7 faf6 	bl	8009778 <CO_TIME_process>
    }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	697a      	ldr	r2, [r7, #20]
 8012194:	69b9      	ldr	r1, [r7, #24]
 8012196:	f7fb fcc5 	bl	800db24 <CO_GTWA_process>
    }
#endif

    return reset;
 801219a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801219e:	4618      	mov	r0, r3
 80121a0:	374c      	adds	r7, #76	; 0x4c
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121a6 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b088      	sub	sp, #32
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	60f8      	str	r0, [r7, #12]
 80121ae:	60b9      	str	r1, [r7, #8]
 80121b0:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80121b2:	2300      	movs	r3, #0
 80121b4:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d131      	bne.n	8012222 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7ff fa1d 	bl	8011602 <CO_NMT_getInternalState>
 80121c8:	4603      	mov	r3, r0
 80121ca:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80121cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121d0:	2b7f      	cmp	r3, #127	; 0x7f
 80121d2:	d003      	beq.n	80121dc <CO_process_SYNC+0x36>
 80121d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121d8:	2b05      	cmp	r3, #5
 80121da:	d101      	bne.n	80121e0 <CO_process_SYNC+0x3a>
 80121dc:	2301      	movs	r3, #1
 80121de:	e000      	b.n	80121e2 <CO_process_SYNC+0x3c>
 80121e0:	2300      	movs	r3, #0
 80121e2:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	68ba      	ldr	r2, [r7, #8]
 80121ec:	6979      	ldr	r1, [r7, #20]
 80121ee:	f7f7 f8a3 	bl	8009338 <CO_SYNC_process>
 80121f2:	4603      	mov	r3, r0
 80121f4:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 80121f6:	7cfb      	ldrb	r3, [r7, #19]
 80121f8:	2b02      	cmp	r3, #2
 80121fa:	d009      	beq.n	8012210 <CO_process_SYNC+0x6a>
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	dc0d      	bgt.n	801221c <CO_process_SYNC+0x76>
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00d      	beq.n	8012220 <CO_process_SYNC+0x7a>
 8012204:	2b01      	cmp	r3, #1
 8012206:	d000      	beq.n	801220a <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8012208:	e008      	b.n	801221c <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 801220a:	2301      	movs	r3, #1
 801220c:	61fb      	str	r3, [r7, #28]
 801220e:	e008      	b.n	8012222 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	f000 fc92 	bl	8012b3e <CO_CANclearPendingSyncPDOs>
 801221a:	e002      	b.n	8012222 <CO_process_SYNC+0x7c>
                break;
 801221c:	bf00      	nop
 801221e:	e000      	b.n	8012222 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8012220:	bf00      	nop
        }
    }

    return syncWas;
 8012222:	69fb      	ldr	r3, [r7, #28]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3720      	adds	r7, #32
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <CO_process_RPDO>:
void
CO_process_RPDO (	CO_t* 		co,
					bool_t 		syncWas,
					uint32_t 	timeDifference_us,
					uint32_t* 	timerNext_us )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af02      	add	r7, sp, #8
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	607a      	str	r2, [r7, #4]
 8012238:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {  return; }
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d124      	bne.n	801228c <CO_process_RPDO+0x60>

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	691b      	ldr	r3, [r3, #16]
 8012246:	4618      	mov	r0, r3
 8012248:	f7ff f9db 	bl	8011602 <CO_NMT_getInternalState>
 801224c:	4603      	mov	r3, r0
 801224e:	2b05      	cmp	r3, #5
 8012250:	bf0c      	ite	eq
 8012252:	2301      	moveq	r3, #1
 8012254:	2300      	movne	r3, #0
 8012256:	b2db      	uxtb	r3, r3
 8012258:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 801225a:	2300      	movs	r3, #0
 801225c:	82fb      	strh	r3, [r7, #22]
 801225e:	e011      	b.n	8012284 <CO_process_RPDO+0x58>
    {
        CO_RPDO_process (	&co->RPDO[i],
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012264:	8afb      	ldrh	r3, [r7, #22]
 8012266:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801226a:	fb01 f303 	mul.w	r3, r1, r3
 801226e:	18d0      	adds	r0, r2, r3
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	9300      	str	r3, [sp, #0]
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	683a      	ldr	r2, [r7, #0]
 8012278:	6879      	ldr	r1, [r7, #4]
 801227a:	f7f1 f99b 	bl	80035b4 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 801227e:	8afb      	ldrh	r3, [r7, #22]
 8012280:	3301      	adds	r3, #1
 8012282:	82fb      	strh	r3, [r7, #22]
 8012284:	8afb      	ldrh	r3, [r7, #22]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d0ea      	beq.n	8012260 <CO_process_RPDO+0x34>
 801228a:	e000      	b.n	801228e <CO_process_RPDO+0x62>
    if (co->nodeIdUnconfigured) {  return; }
 801228c:	bf00      	nop
							timerNext_us,
#endif
							NMTisOperational,
							syncWas );
    }
}
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <CO_process_TPDO>:



#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af02      	add	r7, sp, #8
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
 80122a0:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d124      	bne.n	80122f4 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff f9a7 	bl	8011602 <CO_NMT_getInternalState>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b05      	cmp	r3, #5
 80122b8:	bf0c      	ite	eq
 80122ba:	2301      	moveq	r3, #1
 80122bc:	2300      	movne	r3, #0
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80122c2:	2300      	movs	r3, #0
 80122c4:	82fb      	strh	r3, [r7, #22]
 80122c6:	e011      	b.n	80122ec <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122cc:	8afb      	ldrh	r3, [r7, #22]
 80122ce:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80122d2:	fb01 f303 	mul.w	r3, r1, r3
 80122d6:	18d0      	adds	r0, r2, r3
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	6879      	ldr	r1, [r7, #4]
 80122e2:	f7f1 fe39 	bl	8003f58 <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80122e6:	8afb      	ldrh	r3, [r7, #22]
 80122e8:	3301      	adds	r3, #1
 80122ea:	82fb      	strh	r3, [r7, #22]
 80122ec:	8afb      	ldrh	r3, [r7, #22]
 80122ee:	2b0b      	cmp	r3, #11
 80122f0:	d9ea      	bls.n	80122c8 <CO_process_TPDO+0x34>
 80122f2:	e000      	b.n	80122f6 <CO_process_TPDO+0x62>
        return;
 80122f4:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80122f6:	3718      	adds	r7, #24
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8012304:	4a13      	ldr	r2, [pc, #76]	; (8012354 <canopen_app_init+0x58>)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 801230a:	2300      	movs	r3, #0
 801230c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 801230e:	f107 0308 	add.w	r3, r7, #8
 8012312:	4619      	mov	r1, r3
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f7ff f997 	bl	8011648 <CO_new>
 801231a:	4603      	mov	r3, r0
 801231c:	4a0e      	ldr	r2, [pc, #56]	; (8012358 <canopen_app_init+0x5c>)
 801231e:	6013      	str	r3, [r2, #0]
    if (CO == NULL)
 8012320:	4b0d      	ldr	r3, [pc, #52]	; (8012358 <canopen_app_init+0x5c>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d104      	bne.n	8012332 <canopen_app_init+0x36>
    {
     log_printf("Error: Can't allocate memory\n");
 8012328:	480c      	ldr	r0, [pc, #48]	; (801235c <canopen_app_init+0x60>)
 801232a:	f00c fe4d 	bl	801efc8 <puts>
     return 1;
 801232e:	2301      	movs	r3, #1
 8012330:	e00c      	b.n	801234c <canopen_app_init+0x50>

    } else { log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed); }
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	4619      	mov	r1, r3
 8012336:	480a      	ldr	r0, [pc, #40]	; (8012360 <canopen_app_init+0x64>)
 8012338:	f00c fde0 	bl	801eefc <iprintf>



    canopenNodeSTM32->canOpenStack = CO;
 801233c:	4b05      	ldr	r3, [pc, #20]	; (8012354 <canopen_app_init+0x58>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a05      	ldr	r2, [pc, #20]	; (8012358 <canopen_app_init+0x5c>)
 8012342:	6812      	ldr	r2, [r2, #0]
 8012344:	615a      	str	r2, [r3, #20]
     return 2;
    }

#endif

    canopen_app_resetCommunication();
 8012346:	f000 f80d 	bl	8012364 <canopen_app_resetCommunication>
    return 0;
 801234a:	2300      	movs	r3, #0
}
 801234c:	4618      	mov	r0, r3
 801234e:	3710      	adds	r7, #16
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	200008d0 	.word	0x200008d0
 8012358:	200008d4 	.word	0x200008d4
 801235c:	08021b94 	.word	0x08021b94
 8012360:	08021bb4 	.word	0x08021bb4

08012364 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication()
{
 8012364:	b590      	push	{r4, r7, lr}
 8012366:	b08f      	sub	sp, #60	; 0x3c
 8012368:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 801236a:	487d      	ldr	r0, [pc, #500]	; (8012560 <canopen_app_resetCommunication+0x1fc>)
 801236c:	f00c fe2c 	bl	801efc8 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8012370:	4b7c      	ldr	r3, [pc, #496]	; (8012564 <canopen_app_resetCommunication+0x200>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 801237a:	4b7b      	ldr	r3, [pc, #492]	; (8012568 <canopen_app_resetCommunication+0x204>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	4618      	mov	r0, r3
 8012380:	f000 f9bc 	bl	80126fc <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8012384:	4b77      	ldr	r3, [pc, #476]	; (8012564 <canopen_app_resetCommunication+0x200>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	4618      	mov	r0, r3
 801238c:	f000 faa6 	bl	80128dc <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8012390:	4b74      	ldr	r3, [pc, #464]	; (8012564 <canopen_app_resetCommunication+0x200>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a74      	ldr	r2, [pc, #464]	; (8012568 <canopen_app_resetCommunication+0x204>)
 8012396:	6811      	ldr	r1, [r2, #0]
 8012398:	2200      	movs	r2, #0
 801239a:	4618      	mov	r0, r3
 801239c:	f7ff fb1f 	bl	80119de <CO_CANinit>
 80123a0:	4603      	mov	r3, r0
 80123a2:	461a      	mov	r2, r3
 80123a4:	4b71      	ldr	r3, [pc, #452]	; (801256c <canopen_app_resetCommunication+0x208>)
 80123a6:	701a      	strb	r2, [r3, #0]

    if (err != CO_ERROR_NO)
 80123a8:	4b70      	ldr	r3, [pc, #448]	; (801256c <canopen_app_resetCommunication+0x208>)
 80123aa:	f993 3000 	ldrsb.w	r3, [r3]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d008      	beq.n	80123c4 <canopen_app_resetCommunication+0x60>
    {
     log_printf("Error: CAN initialization failed: %d\n", err);
 80123b2:	4b6e      	ldr	r3, [pc, #440]	; (801256c <canopen_app_resetCommunication+0x208>)
 80123b4:	f993 3000 	ldrsb.w	r3, [r3]
 80123b8:	4619      	mov	r1, r3
 80123ba:	486d      	ldr	r0, [pc, #436]	; (8012570 <canopen_app_resetCommunication+0x20c>)
 80123bc:	f00c fd9e 	bl	801eefc <iprintf>
     return 1;
 80123c0:	2301      	movs	r3, #1
 80123c2:	e0c8      	b.n	8012556 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80123c4:	4b6b      	ldr	r3, [pc, #428]	; (8012574 <canopen_app_resetCommunication+0x210>)
 80123c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123c8:	60bb      	str	r3, [r7, #8]
                                                 .productCode    = OD_PERSIST_COMM.x1018_identity.productCode,
 80123ca:	4b6a      	ldr	r3, [pc, #424]	; (8012574 <canopen_app_resetCommunication+0x210>)
 80123cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80123ce:	60fb      	str	r3, [r7, #12]
                                                 .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80123d0:	4b68      	ldr	r3, [pc, #416]	; (8012574 <canopen_app_resetCommunication+0x210>)
 80123d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80123d4:	613b      	str	r3, [r7, #16]
                                                 .serialNumber   = OD_PERSIST_COMM.x1018_identity.serialNumber   }
 80123d6:	4b67      	ldr	r3, [pc, #412]	; (8012574 <canopen_app_resetCommunication+0x210>)
 80123d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80123da:	617b      	str	r3, [r7, #20]
    							  };


    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 80123dc:	4b61      	ldr	r3, [pc, #388]	; (8012564 <canopen_app_resetCommunication+0x200>)
 80123de:	6818      	ldr	r0, [r3, #0]
 80123e0:	4b61      	ldr	r3, [pc, #388]	; (8012568 <canopen_app_resetCommunication+0x204>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	461a      	mov	r2, r3
 80123e6:	4b60      	ldr	r3, [pc, #384]	; (8012568 <canopen_app_resetCommunication+0x204>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	3302      	adds	r3, #2
 80123ec:	f107 0108 	add.w	r1, r7, #8
 80123f0:	f7ff fb21 	bl	8011a36 <CO_LSSinit>
 80123f4:	4603      	mov	r3, r0
 80123f6:	461a      	mov	r2, r3
 80123f8:	4b5c      	ldr	r3, [pc, #368]	; (801256c <canopen_app_resetCommunication+0x208>)
 80123fa:	701a      	strb	r2, [r3, #0]


    if (err != CO_ERROR_NO)
 80123fc:	4b5b      	ldr	r3, [pc, #364]	; (801256c <canopen_app_resetCommunication+0x208>)
 80123fe:	f993 3000 	ldrsb.w	r3, [r3]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d008      	beq.n	8012418 <canopen_app_resetCommunication+0xb4>
    {
     log_printf("Error: LSS slave initialization failed: %d\n", err);
 8012406:	4b59      	ldr	r3, [pc, #356]	; (801256c <canopen_app_resetCommunication+0x208>)
 8012408:	f993 3000 	ldrsb.w	r3, [r3]
 801240c:	4619      	mov	r1, r3
 801240e:	485a      	ldr	r0, [pc, #360]	; (8012578 <canopen_app_resetCommunication+0x214>)
 8012410:	f00c fd74 	bl	801eefc <iprintf>
     return 2;
 8012414:	2302      	movs	r3, #2
 8012416:	e09e      	b.n	8012556 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8012418:	4b53      	ldr	r3, [pc, #332]	; (8012568 <canopen_app_resetCommunication+0x204>)
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	4b52      	ldr	r3, [pc, #328]	; (8012568 <canopen_app_resetCommunication+0x204>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	7812      	ldrb	r2, [r2, #0]
 8012422:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object 			*/
 8012428:	4b4e      	ldr	r3, [pc, #312]	; (8012564 <canopen_app_resetCommunication+0x200>)
 801242a:	6818      	ldr	r0, [r3, #0]
 801242c:	4b53      	ldr	r3, [pc, #332]	; (801257c <canopen_app_resetCommunication+0x218>)
 801242e:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t 			*/
                         FIRST_HB_TIME,        /* firstHBTime_ms 			*/
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms 	*/
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms 	*/
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer 	*/
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8012430:	4b4d      	ldr	r3, [pc, #308]	; (8012568 <canopen_app_resetCommunication+0x204>)
 8012432:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object 			*/
 8012434:	785b      	ldrb	r3, [r3, #1]
 8012436:	1d3a      	adds	r2, r7, #4
 8012438:	9207      	str	r2, [sp, #28]
 801243a:	9306      	str	r3, [sp, #24]
 801243c:	2300      	movs	r3, #0
 801243e:	9305      	str	r3, [sp, #20]
 8012440:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012444:	9304      	str	r3, [sp, #16]
 8012446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801244a:	9303      	str	r3, [sp, #12]
 801244c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012450:	9302      	str	r3, [sp, #8]
 8012452:	f242 1311 	movw	r3, #8465	; 0x2111
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	2300      	movs	r3, #0
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	460b      	mov	r3, r1
 801245e:	2200      	movs	r2, #0
 8012460:	2100      	movs	r1, #0
 8012462:	f7ff fb15 	bl	8011a90 <CO_CANopenInit>
 8012466:	4603      	mov	r3, r0
 8012468:	461a      	mov	r2, r3
 801246a:	4b40      	ldr	r3, [pc, #256]	; (801256c <canopen_app_resetCommunication+0x208>)
 801246c:	701a      	strb	r2, [r3, #0]


    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS)
 801246e:	4b3f      	ldr	r3, [pc, #252]	; (801256c <canopen_app_resetCommunication+0x208>)
 8012470:	f993 3000 	ldrsb.w	r3, [r3]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d01a      	beq.n	80124ae <canopen_app_resetCommunication+0x14a>
 8012478:	4b3c      	ldr	r3, [pc, #240]	; (801256c <canopen_app_resetCommunication+0x208>)
 801247a:	f993 3000 	ldrsb.w	r3, [r3]
 801247e:	f113 0f13 	cmn.w	r3, #19
 8012482:	d014      	beq.n	80124ae <canopen_app_resetCommunication+0x14a>
    {
      if (err == CO_ERROR_OD_PARAMETERS)
 8012484:	4b39      	ldr	r3, [pc, #228]	; (801256c <canopen_app_resetCommunication+0x208>)
 8012486:	f993 3000 	ldrsb.w	r3, [r3]
 801248a:	f113 0f0c 	cmn.w	r3, #12
 801248e:	d105      	bne.n	801249c <canopen_app_resetCommunication+0x138>
            {
       		        log_printf ( "Error: Object Dictionary entry 0x%X\n"     , errInfo );
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4619      	mov	r1, r3
 8012494:	483a      	ldr	r0, [pc, #232]	; (8012580 <canopen_app_resetCommunication+0x21c>)
 8012496:	f00c fd31 	bl	801eefc <iprintf>
 801249a:	e006      	b.n	80124aa <canopen_app_resetCommunication+0x146>
            } else {log_printf ( "Error: CANopen initialization failed: %d\n", err     ); }
 801249c:	4b33      	ldr	r3, [pc, #204]	; (801256c <canopen_app_resetCommunication+0x208>)
 801249e:	f993 3000 	ldrsb.w	r3, [r3]
 80124a2:	4619      	mov	r1, r3
 80124a4:	4837      	ldr	r0, [pc, #220]	; (8012584 <canopen_app_resetCommunication+0x220>)
 80124a6:	f00c fd29 	bl	801eefc <iprintf>
     return 3;
 80124aa:	2303      	movs	r3, #3
 80124ac:	e053      	b.n	8012556 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO,
 80124ae:	4b2d      	ldr	r3, [pc, #180]	; (8012564 <canopen_app_resetCommunication+0x200>)
 80124b0:	6818      	ldr	r0, [r3, #0]
    						CO->em,
 80124b2:	4b2c      	ldr	r3, [pc, #176]	; (8012564 <canopen_app_resetCommunication+0x200>)
 80124b4:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInitPDO(CO,
 80124b6:	69d9      	ldr	r1, [r3, #28]
 80124b8:	4b30      	ldr	r3, [pc, #192]	; (801257c <canopen_app_resetCommunication+0x218>)
 80124ba:	681a      	ldr	r2, [r3, #0]
							OD,
							canopenNodeSTM32->activeNodeID,
 80124bc:	4b2a      	ldr	r3, [pc, #168]	; (8012568 <canopen_app_resetCommunication+0x204>)
 80124be:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInitPDO(CO,
 80124c0:	785c      	ldrb	r4, [r3, #1]
 80124c2:	1d3b      	adds	r3, r7, #4
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	4623      	mov	r3, r4
 80124c8:	f7ff fca6 	bl	8011e18 <CO_CANopenInitPDO>
 80124cc:	4603      	mov	r3, r0
 80124ce:	461a      	mov	r2, r3
 80124d0:	4b26      	ldr	r3, [pc, #152]	; (801256c <canopen_app_resetCommunication+0x208>)
 80124d2:	701a      	strb	r2, [r3, #0]
							&errInfo);

    if (err != CO_ERROR_NO)
 80124d4:	4b25      	ldr	r3, [pc, #148]	; (801256c <canopen_app_resetCommunication+0x208>)
 80124d6:	f993 3000 	ldrsb.w	r3, [r3]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d014      	beq.n	8012508 <canopen_app_resetCommunication+0x1a4>
		{
		if (err == CO_ERROR_OD_PARAMETERS)
 80124de:	4b23      	ldr	r3, [pc, #140]	; (801256c <canopen_app_resetCommunication+0x208>)
 80124e0:	f993 3000 	ldrsb.w	r3, [r3]
 80124e4:	f113 0f0c 	cmn.w	r3, #12
 80124e8:	d105      	bne.n	80124f6 <canopen_app_resetCommunication+0x192>
				{log_printf (     "Error: Object Dictionary entry 0x%X\n",errInfo);}
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4619      	mov	r1, r3
 80124ee:	4824      	ldr	r0, [pc, #144]	; (8012580 <canopen_app_resetCommunication+0x21c>)
 80124f0:	f00c fd04 	bl	801eefc <iprintf>
 80124f4:	e006      	b.n	8012504 <canopen_app_resetCommunication+0x1a0>
				 else {log_printf("Error: PDO initialization failed: %d\n", err   );}
 80124f6:	4b1d      	ldr	r3, [pc, #116]	; (801256c <canopen_app_resetCommunication+0x208>)
 80124f8:	f993 3000 	ldrsb.w	r3, [r3]
 80124fc:	4619      	mov	r1, r3
 80124fe:	4822      	ldr	r0, [pc, #136]	; (8012588 <canopen_app_resetCommunication+0x224>)
 8012500:	f00c fcfc 	bl	801eefc <iprintf>
		return 4;
 8012504:	2304      	movs	r3, #4
 8012506:	e026      	b.n	8012556 <canopen_app_resetCommunication+0x1f2>
		}

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8012508:	4b17      	ldr	r3, [pc, #92]	; (8012568 <canopen_app_resetCommunication+0x204>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	4618      	mov	r0, r3
 8012510:	f005 fb38 	bl	8017b84 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured)
 8012514:	4b13      	ldr	r3, [pc, #76]	; (8012564 <canopen_app_resetCommunication+0x200>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d002      	beq.n	8012524 <canopen_app_resetCommunication+0x1c0>
													CO_EMC_HARDWARE,
													storageInitError);
        						   }
#endif

    } else {log_printf("CANopenNode - Node-id not initialized\n"); }
 801251e:	481b      	ldr	r0, [pc, #108]	; (801258c <canopen_app_resetCommunication+0x228>)
 8012520:	f00c fd52 	bl	801efc8 <puts>



    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8012524:	4b0f      	ldr	r3, [pc, #60]	; (8012564 <canopen_app_resetCommunication+0x200>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	4618      	mov	r0, r3
 801252c:	f000 f8f6 	bl	801271c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8012530:	4817      	ldr	r0, [pc, #92]	; (8012590 <canopen_app_resetCommunication+0x22c>)
 8012532:	f00c fd49 	bl	801efc8 <puts>
    fflush(stdout);
 8012536:	4b17      	ldr	r3, [pc, #92]	; (8012594 <canopen_app_resetCommunication+0x230>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	4618      	mov	r0, r3
 801253e:	f00c fc19 	bl	801ed74 <fflush>
    time_old = time_current = HAL_GetTick();
 8012542:	f001 fd71 	bl	8014028 <HAL_GetTick>
 8012546:	4603      	mov	r3, r0
 8012548:	4a13      	ldr	r2, [pc, #76]	; (8012598 <canopen_app_resetCommunication+0x234>)
 801254a:	6013      	str	r3, [r2, #0]
 801254c:	4b12      	ldr	r3, [pc, #72]	; (8012598 <canopen_app_resetCommunication+0x234>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a12      	ldr	r2, [pc, #72]	; (801259c <canopen_app_resetCommunication+0x238>)
 8012552:	6013      	str	r3, [r2, #0]
    return 0;
 8012554:	2300      	movs	r3, #0
}
 8012556:	4618      	mov	r0, r3
 8012558:	371c      	adds	r7, #28
 801255a:	46bd      	mov	sp, r7
 801255c:	bd90      	pop	{r4, r7, pc}
 801255e:	bf00      	nop
 8012560:	08021bdc 	.word	0x08021bdc
 8012564:	200008d4 	.word	0x200008d4
 8012568:	200008d0 	.word	0x200008d0
 801256c:	200008e0 	.word	0x200008e0
 8012570:	08021c04 	.word	0x08021c04
 8012574:	20000018 	.word	0x20000018
 8012578:	08021c2c 	.word	0x08021c2c
 801257c:	200005d8 	.word	0x200005d8
 8012580:	08021c58 	.word	0x08021c58
 8012584:	08021c80 	.word	0x08021c80
 8012588:	08021cac 	.word	0x08021cac
 801258c:	08021cd4 	.word	0x08021cd4
 8012590:	08021cfc 	.word	0x08021cfc
 8012594:	200008b0 	.word	0x200008b0
 8012598:	200008dc 	.word	0x200008dc
 801259c:	200008d8 	.word	0x200008d8

080125a0 <canopen_app_process>:

void
canopen_app_process() {
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80125a6:	f001 fd3f 	bl	8014028 <HAL_GetTick>
 80125aa:	4603      	mov	r3, r0
 80125ac:	4a2c      	ldr	r2, [pc, #176]	; (8012660 <canopen_app_process+0xc0>)
 80125ae:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80125b0:	4b2b      	ldr	r3, [pc, #172]	; (8012660 <canopen_app_process+0xc0>)
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	4b2b      	ldr	r3, [pc, #172]	; (8012664 <canopen_app_process+0xc4>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d04c      	beq.n	8012656 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80125bc:	4b28      	ldr	r3, [pc, #160]	; (8012660 <canopen_app_process+0xc0>)
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	4b28      	ldr	r3, [pc, #160]	; (8012664 <canopen_app_process+0xc4>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80125ca:	fb02 f303 	mul.w	r3, r2, r3
 80125ce:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 80125d0:	4b23      	ldr	r3, [pc, #140]	; (8012660 <canopen_app_process+0xc0>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	4a23      	ldr	r2, [pc, #140]	; (8012664 <canopen_app_process+0xc4>)
 80125d6:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 80125d8:	4b23      	ldr	r3, [pc, #140]	; (8012668 <canopen_app_process+0xc8>)
 80125da:	6818      	ldr	r0, [r3, #0]
 80125dc:	2300      	movs	r3, #0
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	2100      	movs	r1, #0
 80125e2:	f7ff fce1 	bl	8011fa8 <CO_process>
 80125e6:	4603      	mov	r3, r0
 80125e8:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80125ea:	4b1f      	ldr	r3, [pc, #124]	; (8012668 <canopen_app_process+0xc8>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125f0:	7a5a      	ldrb	r2, [r3, #9]
 80125f2:	4b1e      	ldr	r3, [pc, #120]	; (801266c <canopen_app_process+0xcc>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	09d2      	lsrs	r2, r2, #7
 80125f8:	b2d2      	uxtb	r2, r2
 80125fa:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80125fc:	4b1a      	ldr	r3, [pc, #104]	; (8012668 <canopen_app_process+0xc8>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012602:	7a9a      	ldrb	r2, [r3, #10]
 8012604:	4b19      	ldr	r3, [pc, #100]	; (801266c <canopen_app_process+0xcc>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	09d2      	lsrs	r2, r2, #7
 801260a:	b2d2      	uxtb	r2, r2
 801260c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 801260e:	78fb      	ldrb	r3, [r7, #3]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d118      	bne.n	8012646 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8012614:	4b15      	ldr	r3, [pc, #84]	; (801266c <canopen_app_process+0xcc>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	4618      	mov	r0, r3
 801261c:	f005 fb22 	bl	8017c64 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8012620:	4b12      	ldr	r3, [pc, #72]	; (801266c <canopen_app_process+0xcc>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4618      	mov	r0, r3
 8012626:	f000 f869 	bl	80126fc <CO_CANsetConfigurationMode>
            CO_delete(CO);
 801262a:	4b0f      	ldr	r3, [pc, #60]	; (8012668 <canopen_app_process+0xc8>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	4618      	mov	r0, r3
 8012630:	f7ff f967 	bl	8011902 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8012634:	480e      	ldr	r0, [pc, #56]	; (8012670 <canopen_app_process+0xd0>)
 8012636:	f00c fcc7 	bl	801efc8 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 801263a:	4b0c      	ldr	r3, [pc, #48]	; (801266c <canopen_app_process+0xcc>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4618      	mov	r0, r3
 8012640:	f7ff fe5c 	bl	80122fc <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8012644:	e007      	b.n	8012656 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8012646:	78fb      	ldrb	r3, [r7, #3]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d104      	bne.n	8012656 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 801264c:	4809      	ldr	r0, [pc, #36]	; (8012674 <canopen_app_process+0xd4>)
 801264e:	f00c fcbb 	bl	801efc8 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8012652:	f002 fd44 	bl	80150de <HAL_NVIC_SystemReset>
}
 8012656:	bf00      	nop
 8012658:	3708      	adds	r7, #8
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	200008dc 	.word	0x200008dc
 8012664:	200008d8 	.word	0x200008d8
 8012668:	200008d4 	.word	0x200008d4
 801266c:	200008d0 	.word	0x200008d0
 8012670:	08021d18 	.word	0x08021d18
 8012674:	08021d40 	.word	0x08021d40

08012678 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 801267e:	4b1e      	ldr	r3, [pc, #120]	; (80126f8 <canopen_app_interrupt+0x80>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012684:	f3ef 8210 	mrs	r2, PRIMASK
 8012688:	607a      	str	r2, [r7, #4]
  return(result);
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 801268e:	b672      	cpsid	i
}
 8012690:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8012692:	4b19      	ldr	r3, [pc, #100]	; (80126f8 <canopen_app_interrupt+0x80>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d120      	bne.n	80126de <canopen_app_interrupt+0x66>
 801269c:	4b16      	ldr	r3, [pc, #88]	; (80126f8 <canopen_app_interrupt+0x80>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	695b      	ldr	r3, [r3, #20]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d01a      	beq.n	80126de <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80126a8:	2300      	movs	r3, #0
 80126aa:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80126ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80126b0:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80126b2:	4b11      	ldr	r3, [pc, #68]	; (80126f8 <canopen_app_interrupt+0x80>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2200      	movs	r2, #0
 80126b8:	68b9      	ldr	r1, [r7, #8]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7ff fd73 	bl	80121a6 <CO_process_SYNC>
 80126c0:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 80126c2:	4b0d      	ldr	r3, [pc, #52]	; (80126f8 <canopen_app_interrupt+0x80>)
 80126c4:	6818      	ldr	r0, [r3, #0]
 80126c6:	2300      	movs	r3, #0
 80126c8:	68ba      	ldr	r2, [r7, #8]
 80126ca:	68f9      	ldr	r1, [r7, #12]
 80126cc:	f7ff fdae 	bl	801222c <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 80126d0:	4b09      	ldr	r3, [pc, #36]	; (80126f8 <canopen_app_interrupt+0x80>)
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	2300      	movs	r3, #0
 80126d6:	68ba      	ldr	r2, [r7, #8]
 80126d8:	68f9      	ldr	r1, [r7, #12]
 80126da:	f7ff fddb 	bl	8012294 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 80126de:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <canopen_app_interrupt+0x80>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	f383 8810 	msr	PRIMASK, r3
}
 80126ee:	bf00      	nop
}
 80126f0:	bf00      	nop
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	200008d4 	.word	0x200008d4

080126fc <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d004      	beq.n	8012714 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	4618      	mov	r0, r3
 8012710:	f001 ff24 	bl	801455c <HAL_CAN_Stop>
#endif
    }
}
 8012714:	bf00      	nop
 8012716:	3708      	adds	r7, #8
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00b      	beq.n	8012744 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	689b      	ldr	r3, [r3, #8]
 8012732:	4618      	mov	r0, r3
 8012734:	f001 fece 	bl	80144d4 <HAL_CAN_Start>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d102      	bne.n	8012744 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	615a      	str	r2, [r3, #20]
        }
    }
}
 8012744:	bf00      	nop
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 801274c:	b580      	push	{r7, lr}
 801274e:	b090      	sub	sp, #64	; 0x40
 8012750:	af00      	add	r7, sp, #0
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	607a      	str	r2, [r7, #4]
 8012758:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d005      	beq.n	801276c <CO_CANmodule_init+0x20>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d002      	beq.n	801276c <CO_CANmodule_init+0x20>
 8012766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012768:	2b00      	cmp	r3, #0
 801276a:	d102      	bne.n	8012772 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 801276c:	f04f 33ff 	mov.w	r3, #4294967295
 8012770:	e0ab      	b.n	80128ca <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8012778:	4a56      	ldr	r2, [pc, #344]	; (80128d4 <CO_CANmodule_init+0x188>)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	887a      	ldrh	r2, [r7, #2]
 8012788:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801278e:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8012796:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2200      	movs	r2, #0
 801279c:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2200      	movs	r2, #0
 80127a2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2200      	movs	r2, #0
 80127a8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2200      	movs	r2, #0
 80127ae:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2201      	movs	r2, #1
 80127b4:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2200      	movs	r2, #0
 80127ba:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2200      	movs	r2, #0
 80127c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80127c2:	2300      	movs	r3, #0
 80127c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80127c6:	e02b      	b.n	8012820 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80127c8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127ca:	4613      	mov	r3, r2
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	4413      	add	r3, r2
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	461a      	mov	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	4413      	add	r3, r2
 80127d8:	2200      	movs	r2, #0
 80127da:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80127dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127de:	4613      	mov	r3, r2
 80127e0:	005b      	lsls	r3, r3, #1
 80127e2:	4413      	add	r3, r2
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	461a      	mov	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	4413      	add	r3, r2
 80127ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127f0:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80127f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127f4:	4613      	mov	r3, r2
 80127f6:	005b      	lsls	r3, r3, #1
 80127f8:	4413      	add	r3, r2
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	461a      	mov	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4413      	add	r3, r2
 8012802:	2200      	movs	r2, #0
 8012804:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8012806:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012808:	4613      	mov	r3, r2
 801280a:	005b      	lsls	r3, r3, #1
 801280c:	4413      	add	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	461a      	mov	r2, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4413      	add	r3, r2
 8012816:	2200      	movs	r2, #0
 8012818:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 801281a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801281c:	3301      	adds	r3, #1
 801281e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012820:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012822:	887b      	ldrh	r3, [r7, #2]
 8012824:	429a      	cmp	r2, r3
 8012826:	d3cf      	bcc.n	80127c8 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8012828:	2300      	movs	r3, #0
 801282a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801282c:	e00c      	b.n	8012848 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 801282e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012830:	4613      	mov	r3, r2
 8012832:	005b      	lsls	r3, r3, #1
 8012834:	4413      	add	r3, r2
 8012836:	00db      	lsls	r3, r3, #3
 8012838:	461a      	mov	r2, r3
 801283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801283c:	4413      	add	r3, r2
 801283e:	2200      	movs	r2, #0
 8012840:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8012842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012844:	3301      	adds	r3, #1
 8012846:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012848:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801284e:	429a      	cmp	r2, r3
 8012850:	d3ed      	bcc.n	801282e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a1d      	ldr	r2, [pc, #116]	; (80128d8 <CO_CANmodule_init+0x18c>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d102      	bne.n	801286c <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8012866:	2300      	movs	r3, #0
 8012868:	62bb      	str	r3, [r7, #40]	; 0x28
 801286a:	e001      	b.n	8012870 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 801286c:	230e      	movs	r3, #14
 801286e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8012870:	2300      	movs	r3, #0
 8012872:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8012874:	2301      	movs	r3, #1
 8012876:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8012878:	2300      	movs	r3, #0
 801287a:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 801287c:	2300      	movs	r3, #0
 801287e:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8012880:	2300      	movs	r3, #0
 8012882:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8012884:	2300      	movs	r3, #0
 8012886:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8012888:	2300      	movs	r3, #0
 801288a:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 801288c:	2301      	movs	r3, #1
 801288e:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8012890:	230e      	movs	r3, #14
 8012892:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	f107 0214 	add.w	r2, r7, #20
 801289c:	4611      	mov	r1, r2
 801289e:	4618      	mov	r0, r3
 80128a0:	f001 fd38 	bl	8014314 <HAL_CAN_ConfigFilter>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d002      	beq.n	80128b0 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80128aa:	f04f 33ff 	mov.w	r3, #4294967295
 80128ae:	e00c      	b.n	80128ca <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	2113      	movs	r1, #19
 80128b6:	4618      	mov	r0, r3
 80128b8:	f002 f8bb 	bl	8014a32 <HAL_CAN_ActivateNotification>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d002      	beq.n	80128c8 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80128c2:	f04f 33ff 	mov.w	r3, #4294967295
 80128c6:	e000      	b.n	80128ca <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3740      	adds	r7, #64	; 0x40
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	200008e4 	.word	0x200008e4
 80128d8:	40006400 	.word	0x40006400

080128dc <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d009      	beq.n	80128fe <CO_CANmodule_disable+0x22>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d005      	beq.n	80128fe <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f001 fe2f 	bl	801455c <HAL_CAN_Stop>
#endif
    }
}
 80128fe:	bf00      	nop
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
	...

08012908 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8012908:	b480      	push	{r7}
 801290a:	b087      	sub	sp, #28
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	4608      	mov	r0, r1
 8012912:	4611      	mov	r1, r2
 8012914:	461a      	mov	r2, r3
 8012916:	4603      	mov	r3, r0
 8012918:	817b      	strh	r3, [r7, #10]
 801291a:	460b      	mov	r3, r1
 801291c:	813b      	strh	r3, [r7, #8]
 801291e:	4613      	mov	r3, r2
 8012920:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8012922:	2300      	movs	r3, #0
 8012924:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d03c      	beq.n	80129a6 <CO_CANrxBufferInit+0x9e>
 801292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292e:	2b00      	cmp	r3, #0
 8012930:	d039      	beq.n	80129a6 <CO_CANrxBufferInit+0x9e>
 8012932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012934:	2b00      	cmp	r3, #0
 8012936:	d036      	beq.n	80129a6 <CO_CANrxBufferInit+0x9e>
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	891b      	ldrh	r3, [r3, #8]
 801293c:	897a      	ldrh	r2, [r7, #10]
 801293e:	429a      	cmp	r2, r3
 8012940:	d231      	bcs.n	80129a6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6859      	ldr	r1, [r3, #4]
 8012946:	897a      	ldrh	r2, [r7, #10]
 8012948:	4613      	mov	r3, r2
 801294a:	005b      	lsls	r3, r3, #1
 801294c:	4413      	add	r3, r2
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	440b      	add	r3, r1
 8012952:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012958:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801295e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8012960:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012968:	b21b      	sxth	r3, r3
 801296a:	6a3a      	ldr	r2, [r7, #32]
 801296c:	2a00      	cmp	r2, #0
 801296e:	d001      	beq.n	8012974 <CO_CANrxBufferInit+0x6c>
 8012970:	4a13      	ldr	r2, [pc, #76]	; (80129c0 <CO_CANrxBufferInit+0xb8>)
 8012972:	e000      	b.n	8012976 <CO_CANrxBufferInit+0x6e>
 8012974:	2200      	movs	r2, #0
 8012976:	4313      	orrs	r3, r2
 8012978:	b21b      	sxth	r3, r3
 801297a:	b29a      	uxth	r2, r3
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8012980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012988:	b21b      	sxth	r3, r3
 801298a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801298e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012992:	b21b      	sxth	r3, r3
 8012994:	b29a      	uxth	r2, r3
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	699b      	ldr	r3, [r3, #24]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d004      	beq.n	80129ac <CO_CANrxBufferInit+0xa4>
            __NOP();
 80129a2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80129a4:	e002      	b.n	80129ac <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80129a6:	23ff      	movs	r3, #255	; 0xff
 80129a8:	75fb      	strb	r3, [r7, #23]
 80129aa:	e000      	b.n	80129ae <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80129ac:	bf00      	nop
    }

    return ret;
 80129ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	371c      	adds	r7, #28
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	ffff8000 	.word	0xffff8000

080129c4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80129c4:	b480      	push	{r7}
 80129c6:	b087      	sub	sp, #28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	607b      	str	r3, [r7, #4]
 80129ce:	460b      	mov	r3, r1
 80129d0:	817b      	strh	r3, [r7, #10]
 80129d2:	4613      	mov	r3, r2
 80129d4:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80129d6:	2300      	movs	r3, #0
 80129d8:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d024      	beq.n	8012a2a <CO_CANtxBufferInit+0x66>
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	8a1b      	ldrh	r3, [r3, #16]
 80129e4:	897a      	ldrh	r2, [r7, #10]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d21f      	bcs.n	8012a2a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	68d9      	ldr	r1, [r3, #12]
 80129ee:	897a      	ldrh	r2, [r7, #10]
 80129f0:	4613      	mov	r3, r2
 80129f2:	005b      	lsls	r3, r3, #1
 80129f4:	4413      	add	r3, r2
 80129f6:	00db      	lsls	r3, r3, #3
 80129f8:	440b      	add	r3, r1
 80129fa:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80129fc:	893b      	ldrh	r3, [r7, #8]
 80129fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	2a00      	cmp	r2, #0
 8012a06:	d002      	beq.n	8012a0e <CO_CANtxBufferInit+0x4a>
 8012a08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012a0c:	e000      	b.n	8012a10 <CO_CANtxBufferInit+0x4c>
 8012a0e:	2200      	movs	r2, #0
 8012a10:	431a      	orrs	r2, r3
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012a1c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	2200      	movs	r2, #0
 8012a22:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a28:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8012a2a:	697b      	ldr	r3, [r7, #20]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	371c      	adds	r7, #28
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f001 fea9 	bl	80147a4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d028      	beq.n	8012aaa <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8012a58:	4b16      	ldr	r3, [pc, #88]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8012a5e:	4b15      	ldr	r3, [pc, #84]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a60:	2200      	movs	r2, #0
 8012a62:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	791b      	ldrb	r3, [r3, #4]
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4b12      	ldr	r3, [pc, #72]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a6c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012a76:	4a0f      	ldr	r2, [pc, #60]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a78:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	0b9b      	lsrs	r3, r3, #14
 8012a80:	f003 0302 	and.w	r3, r3, #2
 8012a84:	4a0b      	ldr	r2, [pc, #44]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a86:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	6898      	ldr	r0, [r3, #8]
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	1d5a      	adds	r2, r3, #5
 8012a92:	f107 0308 	add.w	r3, r7, #8
 8012a96:	4907      	ldr	r1, [pc, #28]	; (8012ab4 <prv_send_can_message+0x7c>)
 8012a98:	f001 fda9 	bl	80145ee <HAL_CAN_AddTxMessage>
 8012a9c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	bf0c      	ite	eq
 8012aa2:	2301      	moveq	r3, #1
 8012aa4:	2300      	movne	r3, #0
 8012aa6:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8012aa8:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8012aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	200008e8 	.word	0x200008e8

08012ab8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00c      	beq.n	8012ae8 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6a1b      	ldr	r3, [r3, #32]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	8a5b      	ldrh	r3, [r3, #18]
 8012ada:	f043 0308 	orr.w	r3, r3, #8
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8012ae4:	23f7      	movs	r3, #247	; 0xf7
 8012ae6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8012aec:	613b      	str	r3, [r7, #16]
  return(result);
 8012aee:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8012af4:	b672      	cpsid	i
}
 8012af6:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7ff ff9c 	bl	8012a38 <prv_send_can_message>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d004      	beq.n	8012b10 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	695a      	ldr	r2, [r3, #20]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	61da      	str	r2, [r3, #28]
 8012b0e:	e009      	b.n	8012b24 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	2201      	movs	r2, #1
 8012b14:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	b29a      	uxth	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f383 8810 	msr	PRIMASK, r3
}
 8012b30:	bf00      	nop

    return err;
 8012b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3718      	adds	r7, #24
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8012b3e:	b480      	push	{r7}
 8012b40:	b087      	sub	sp, #28
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8012b46:	2300      	movs	r3, #0
 8012b48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8012b4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b50:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8012b56:	b672      	cpsid	i
}
 8012b58:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	69db      	ldr	r3, [r3, #28]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d004      	beq.n	8012b6c <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d032      	beq.n	8012bdc <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	8a1b      	ldrh	r3, [r3, #16]
 8012b7a:	827b      	strh	r3, [r7, #18]
 8012b7c:	e02b      	b.n	8012bd6 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	68d9      	ldr	r1, [r3, #12]
 8012b82:	8a7a      	ldrh	r2, [r7, #18]
 8012b84:	4613      	mov	r3, r2
 8012b86:	005b      	lsls	r3, r3, #1
 8012b88:	4413      	add	r3, r2
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	440b      	add	r3, r1
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d01d      	beq.n	8012bd0 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	68d9      	ldr	r1, [r3, #12]
 8012b98:	8a7a      	ldrh	r2, [r7, #18]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	440b      	add	r3, r1
 8012ba4:	695b      	ldr	r3, [r3, #20]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d012      	beq.n	8012bd0 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68d9      	ldr	r1, [r3, #12]
 8012bae:	8a7a      	ldrh	r2, [r7, #18]
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	4413      	add	r3, r2
 8012bb6:	00db      	lsls	r3, r3, #3
 8012bb8:	440b      	add	r3, r1
 8012bba:	2200      	movs	r2, #0
 8012bbc:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8012bcc:	2302      	movs	r3, #2
 8012bce:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8012bd0:	8a7b      	ldrh	r3, [r7, #18]
 8012bd2:	3b01      	subs	r3, #1
 8012bd4:	827b      	strh	r3, [r7, #18]
 8012bd6:	8a7b      	ldrh	r3, [r7, #18]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1d0      	bne.n	8012b7e <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	f383 8810 	msr	PRIMASK, r3
}
 8012be8:	bf00      	nop
    if (tpdoDeleted) {
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d006      	beq.n	8012bfe <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	8a5b      	ldrh	r3, [r3, #18]
 8012bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	825a      	strh	r2, [r3, #18]
    }
}
 8012bfe:	bf00      	nop
 8012c00:	371c      	adds	r7, #28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c08:	4770      	bx	lr

08012c0a <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8012c0a:	b480      	push	{r7}
 8012c0c:	b085      	sub	sp, #20
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	699b      	ldr	r3, [r3, #24]
 8012c20:	f003 0307 	and.w	r3, r3, #7
 8012c24:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c2a:	68ba      	ldr	r2, [r7, #8]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d02e      	beq.n	8012c8e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	8a5b      	ldrh	r3, [r3, #18]
 8012c34:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	68ba      	ldr	r2, [r7, #8]
 8012c3a:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	f003 0304 	and.w	r3, r3, #4
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d004      	beq.n	8012c50 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8012c46:	89fb      	ldrh	r3, [r7, #14]
 8012c48:	f043 0304 	orr.w	r3, r3, #4
 8012c4c:	81fb      	strh	r3, [r7, #14]
 8012c4e:	e01b      	b.n	8012c88 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8012c56:	f023 0303 	bic.w	r3, r3, #3
 8012c5a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d005      	beq.n	8012c72 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8012c66:	89fb      	ldrh	r3, [r7, #14]
 8012c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012c6c:	f043 0301 	orr.w	r3, r3, #1
 8012c70:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	f003 0302 	and.w	r3, r3, #2
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d005      	beq.n	8012c88 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8012c7c:	89fb      	ldrh	r3, [r7, #14]
 8012c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012c82:	f043 0302 	orr.w	r3, r3, #2
 8012c86:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	89fa      	ldrh	r2, [r7, #14]
 8012c8c:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8012c8e:	bf00      	nop
 8012c90:	3714      	adds	r7, #20
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr
	...

08012c9c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b08c      	sub	sp, #48	; 0x30
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8012ca8:	2300      	movs	r3, #0
 8012caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8012cac:	2300      	movs	r3, #0
 8012cae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8012cb2:	f107 0314 	add.w	r3, r7, #20
 8012cb6:	3305      	adds	r3, #5
 8012cb8:	4a2c      	ldr	r2, [pc, #176]	; (8012d6c <prv_read_can_received_msg+0xd0>)
 8012cba:	68b9      	ldr	r1, [r7, #8]
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f001 fda6 	bl	801480e <HAL_CAN_GetRxMessage>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d14c      	bne.n	8012d62 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8012cc8:	4b28      	ldr	r3, [pc, #160]	; (8012d6c <prv_read_can_received_msg+0xd0>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	4a27      	ldr	r2, [pc, #156]	; (8012d6c <prv_read_can_received_msg+0xd0>)
 8012cce:	68d2      	ldr	r2, [r2, #12]
 8012cd0:	2a02      	cmp	r2, #2
 8012cd2:	d102      	bne.n	8012cda <prv_read_can_received_msg+0x3e>
 8012cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012cd8:	e000      	b.n	8012cdc <prv_read_can_received_msg+0x40>
 8012cda:	2200      	movs	r2, #0
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8012ce0:	4b22      	ldr	r3, [pc, #136]	; (8012d6c <prv_read_can_received_msg+0xd0>)
 8012ce2:	691b      	ldr	r3, [r3, #16]
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8012cec:	4b20      	ldr	r3, [pc, #128]	; (8012d70 <prv_read_can_received_msg+0xd4>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	699b      	ldr	r3, [r3, #24]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8012cf6:	be00      	bkpt	0x0000
 8012cf8:	e01f      	b.n	8012d3a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8012cfa:	4b1d      	ldr	r3, [pc, #116]	; (8012d70 <prv_read_can_received_msg+0xd4>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8012d02:	4b1b      	ldr	r3, [pc, #108]	; (8012d70 <prv_read_can_received_msg+0xd4>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	891b      	ldrh	r3, [r3, #8]
 8012d08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012d0a:	e013      	b.n	8012d34 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8012d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	461a      	mov	r2, r3
 8012d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d14:	4053      	eors	r3, r2
 8012d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d18:	8852      	ldrh	r2, [r2, #2]
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d103      	bne.n	8012d28 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8012d20:	2301      	movs	r3, #1
 8012d22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8012d26:	e008      	b.n	8012d3a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8012d28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d30:	330c      	adds	r3, #12
 8012d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d1e8      	bne.n	8012d0c <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8012d3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d010      	beq.n	8012d64 <prv_read_can_received_msg+0xc8>
 8012d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00d      	beq.n	8012d64 <prv_read_can_received_msg+0xc8>
 8012d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d009      	beq.n	8012d64 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8012d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d56:	6852      	ldr	r2, [r2, #4]
 8012d58:	f107 0114 	add.w	r1, r7, #20
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	4798      	blx	r3
 8012d60:	e000      	b.n	8012d64 <prv_read_can_received_msg+0xc8>
        return;
 8012d62:	bf00      	nop
    }
}
 8012d64:	3730      	adds	r7, #48	; 0x30
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20000900 	.word	0x20000900
 8012d70:	200008e4 	.word	0x200008e4

08012d74 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	2100      	movs	r1, #0
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff ff8b 	bl	8012c9c <prv_read_can_received_msg>
}
 8012d86:	bf00      	nop
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b082      	sub	sp, #8
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8012d96:	2200      	movs	r2, #0
 8012d98:	2101      	movs	r1, #1
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7ff ff7e 	bl	8012c9c <prv_read_can_received_msg>
}
 8012da0:	bf00      	nop
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b086      	sub	sp, #24
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d03d      	beq.n	8012e44 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dce:	f3ef 8310 	mrs	r3, PRIMASK
 8012dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012dd4:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8012dda:	b672      	cpsid	i
}
 8012ddc:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	8a1b      	ldrh	r3, [r3, #16]
 8012de2:	827b      	strh	r3, [r7, #18]
 8012de4:	e01e      	b.n	8012e24 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	691b      	ldr	r3, [r3, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d014      	beq.n	8012e18 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8012dee:	6979      	ldr	r1, [r7, #20]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7ff fe21 	bl	8012a38 <prv_send_can_message>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d00d      	beq.n	8012e18 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	b29a      	uxth	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	695a      	ldr	r2, [r3, #20]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8012e18:	8a7b      	ldrh	r3, [r7, #18]
 8012e1a:	3b01      	subs	r3, #1
 8012e1c:	827b      	strh	r3, [r7, #18]
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	3318      	adds	r3, #24
 8012e22:	617b      	str	r3, [r7, #20]
 8012e24:	8a7b      	ldrh	r3, [r7, #18]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1dd      	bne.n	8012de6 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8012e2a:	8a7b      	ldrh	r3, [r7, #18]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2200      	movs	r2, #0
 8012e34:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	f383 8810 	msr	PRIMASK, r3
}
 8012e42:	bf00      	nop
    }
}
 8012e44:	bf00      	nop
 8012e46:	3718      	adds	r7, #24
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8012e54:	4b04      	ldr	r3, [pc, #16]	; (8012e68 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2101      	movs	r1, #1
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff ffa4 	bl	8012da8 <CO_CANinterrupt_TX>
}
 8012e60:	bf00      	nop
 8012e62:	3708      	adds	r7, #8
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	200008e4 	.word	0x200008e4

08012e6c <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8012e74:	4b04      	ldr	r3, [pc, #16]	; (8012e88 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2101      	movs	r1, #1
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff ff94 	bl	8012da8 <CO_CANinterrupt_TX>
}
 8012e80:	bf00      	nop
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	200008e4 	.word	0x200008e4

08012e8c <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8012e94:	4b04      	ldr	r3, [pc, #16]	; (8012ea8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2101      	movs	r1, #1
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff ff84 	bl	8012da8 <CO_CANinterrupt_TX>
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	200008e4 	.word	0x200008e4

08012eac <CO_TPDOsendRequest>:
 *
 * @param TPDO TPDO object.
 */
static inline void
CO_TPDOsendRequest(CO_TPDO_t* TPDO)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
    if (TPDO != NULL) {TPDO->sendRequest = true; }
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d003      	beq.n	8012ec2 <CO_TPDOsendRequest+0x16>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
}
 8012ec2:	bf00      	nop
 8012ec4:	370c      	adds	r7, #12
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
	...

08012ed0 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 8012ed8:	4b05      	ldr	r3, [pc, #20]	; (8012ef0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d101      	bne.n	8012ee8 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 8012ee4:	f7ff fbc8 	bl	8012678 <canopen_app_interrupt>

    }
}
 8012ee8:	bf00      	nop
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	200008d0 	.word	0x200008d0

08012ef4 <read_SDO>:
		  uint8_t subIndex,
		  uint8_t* buf,
		  size_t bufSize,
		  size_t* readSize
		  )
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b08a      	sub	sp, #40	; 0x28
 8012ef8:	af04      	add	r7, sp, #16
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	4608      	mov	r0, r1
 8012efe:	4611      	mov	r1, r2
 8012f00:	461a      	mov	r2, r3
 8012f02:	4603      	mov	r3, r0
 8012f04:	70fb      	strb	r3, [r7, #3]
 8012f06:	460b      	mov	r3, r1
 8012f08:	803b      	strh	r3, [r7, #0]
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;

    // setup client (this can be skipped, if remote device don't change)
    SDO_ret = CO_SDOclient_setup (
 8012f0e:	78fb      	ldrb	r3, [r7, #3]
    								SDO_C, CO_CAN_ID_SDO_CLI + nodeId,
 8012f10:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup (
 8012f14:	78fb      	ldrb	r3, [r7, #3]
									CO_CAN_ID_SDO_SRV + nodeId,
 8012f16:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup (
 8012f1a:	78fb      	ldrb	r3, [r7, #3]
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7f1 fcab 	bl	8004878 <CO_SDOclient_setup>
 8012f22:	4603      	mov	r3, r0
 8012f24:	75fb      	strb	r3, [r7, #23]
									nodeId);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return CO_SDO_AB_GENERAL; }
 8012f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d002      	beq.n	8012f34 <read_SDO+0x40>
 8012f2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f32:	e040      	b.n	8012fb6 <read_SDO+0xc2>



    // initiate upload
    SDO_ret = CO_SDOclientUploadInitiate ( SDO_C,
 8012f34:	78ba      	ldrb	r2, [r7, #2]
 8012f36:	8839      	ldrh	r1, [r7, #0]
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7f3 f8d7 	bl	80060f4 <CO_SDOclientUploadInitiate>
 8012f46:	4603      	mov	r3, r0
 8012f48:	75fb      	strb	r3, [r7, #23]
    										index,
											subIndex,
											1000,
											false);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return CO_SDO_AB_GENERAL; }
 8012f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <read_SDO+0x64>
 8012f52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f56:	e02e      	b.n	8012fb6 <read_SDO+0xc2>



    // upload data
    do 	{
        uint32_t timeDifference_us = 10000;
 8012f58:	f242 7310 	movw	r3, #10000	; 0x2710
 8012f5c:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientUpload(SDO_C, timeDifference_us, false, &abortCode, NULL, NULL, NULL);
 8012f62:	f107 030c 	add.w	r3, r7, #12
 8012f66:	2200      	movs	r2, #0
 8012f68:	9202      	str	r2, [sp, #8]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	9201      	str	r2, [sp, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	9200      	str	r2, [sp, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	6939      	ldr	r1, [r7, #16]
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7f3 f928 	bl	80061cc <CO_SDOclientUpload>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	75fb      	strb	r3, [r7, #23]

        if (SDO_ret < 0) {  return abortCode;  }
 8012f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	da01      	bge.n	8012f8c <read_SDO+0x98>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	e014      	b.n	8012fb6 <read_SDO+0xc2>

        HAL_Delay(timeDifference_us/1000);// sleep_us(timeDifference_us);
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	4a0c      	ldr	r2, [pc, #48]	; (8012fc0 <read_SDO+0xcc>)
 8012f90:	fba2 2303 	umull	r2, r3, r2, r3
 8012f94:	099b      	lsrs	r3, r3, #6
 8012f96:	4618      	mov	r0, r3
 8012f98:	f001 f852 	bl	8014040 <HAL_Delay>

    	} while (SDO_ret > 0);
 8012f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	dcd9      	bgt.n	8012f58 <read_SDO+0x64>


    // copy data to the user buffer (for long data function must be called several times inside the loop)
    *readSize = CO_SDOclientUploadBufRead(SDO_C, buf, bufSize);
 8012fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fa6:	6a39      	ldr	r1, [r7, #32]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f7f4 fc55 	bl	8007858 <CO_SDOclientUploadBufRead>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb2:	601a      	str	r2, [r3, #0]

    return CO_SDO_AB_NONE;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	10624dd3 	.word	0x10624dd3

08012fc4 <write_SDO>:
			uint16_t index,
			uint8_t subIndex,
			uint8_t* data,
			size_t dataSize
			)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b08c      	sub	sp, #48	; 0x30
 8012fc8:	af04      	add	r7, sp, #16
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	4608      	mov	r0, r1
 8012fce:	4611      	mov	r1, r2
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	70fb      	strb	r3, [r7, #3]
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	803b      	strh	r3, [r7, #0]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;
    bool_t bufferPartial = false;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61fb      	str	r3, [r7, #28]

    // setup client (this can be skipped, if remote device is the same)
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 8012fe2:	78fb      	ldrb	r3, [r7, #3]
    								CO_CAN_ID_SDO_CLI + nodeId,
 8012fe4:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 8012fe8:	78fb      	ldrb	r3, [r7, #3]
									CO_CAN_ID_SDO_SRV + nodeId,
 8012fea:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 8012fee:	78fb      	ldrb	r3, [r7, #3]
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7f1 fc41 	bl	8004878 <CO_SDOclient_setup>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	76fb      	strb	r3, [r7, #27]
									nodeId);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return -1; }
 8012ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <write_SDO+0x44>
 8013002:	f04f 33ff 	mov.w	r3, #4294967295
 8013006:	e046      	b.n	8013096 <write_SDO+0xd2>



    // initiate download
    SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex, dataSize, 1000, false);
 8013008:	78ba      	ldrb	r2, [r7, #2]
 801300a:	8839      	ldrh	r1, [r7, #0]
 801300c:	2300      	movs	r3, #0
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7f1 fcb5 	bl	8004988 <CO_SDOclientDownloadInitiate>
 801301e:	4603      	mov	r3, r0
 8013020:	76fb      	strb	r3, [r7, #27]

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) /**< Success, end of communication. SDO client: uploaded data must be read. */
 8013022:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d002      	beq.n	8013030 <write_SDO+0x6c>
    	{ return -1; }
 801302a:	f04f 33ff 	mov.w	r3, #4294967295
 801302e:	e032      	b.n	8013096 <write_SDO+0xd2>



    // fill data
    size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data, dataSize);
 8013030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f7f1 fd2d 	bl	8004a94 <CO_SDOclientDownloadBufWrite>
 801303a:	6178      	str	r0, [r7, #20]

    if (nWritten < dataSize) { bufferPartial = true; } // If SDO Fifo buffer is too small, data can be refilled in the loop.
 801303c:	697a      	ldr	r2, [r7, #20]
 801303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013040:	429a      	cmp	r2, r3
 8013042:	d201      	bcs.n	8013048 <write_SDO+0x84>
 8013044:	2301      	movs	r3, #1
 8013046:	61fb      	str	r3, [r7, #28]



    // download data
    do {
        uint32_t timeDifference_us = 10000;
 8013048:	f242 7310 	movw	r3, #10000	; 0x2710
 801304c:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 801304e:	2300      	movs	r3, #0
 8013050:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientDownload (	SDO_C,
 8013052:	2300      	movs	r3, #0
 8013054:	9302      	str	r3, [sp, #8]
 8013056:	2300      	movs	r3, #0
 8013058:	9301      	str	r3, [sp, #4]
 801305a:	f107 030c 	add.w	r3, r7, #12
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	2200      	movs	r2, #0
 8013064:	6939      	ldr	r1, [r7, #16]
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7f1 fd30 	bl	8004acc <CO_SDOclientDownload>
 801306c:	4603      	mov	r3, r0
 801306e:	76fb      	strb	r3, [r7, #27]
											&abortCode,
											NULL,
											NULL
										);

        if (SDO_ret < 0) {  return abortCode;}
 8013070:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013074:	2b00      	cmp	r3, #0
 8013076:	da01      	bge.n	801307c <write_SDO+0xb8>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	e00c      	b.n	8013096 <write_SDO+0xd2>

        HAL_Delay(timeDifference_us/1000); //sleep_us(timeDifference_us);
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	4a08      	ldr	r2, [pc, #32]	; (80130a0 <write_SDO+0xdc>)
 8013080:	fba2 2303 	umull	r2, r3, r2, r3
 8013084:	099b      	lsrs	r3, r3, #6
 8013086:	4618      	mov	r0, r3
 8013088:	f000 ffda 	bl	8014040 <HAL_Delay>

       } while (SDO_ret > 0);
 801308c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dcd9      	bgt.n	8013048 <write_SDO+0x84>

    return CO_SDO_AB_NONE;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	3720      	adds	r7, #32
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	10624dd3 	.word	0x10624dd3

080130a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b08c      	sub	sp, #48	; 0x30
 80130a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80130aa:	f000 ff57 	bl	8013f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80130ae:	f000 f8ff 	bl	80132b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80130b2:	f000 faa9 	bl	8013608 <MX_GPIO_Init>
  MX_DMA_Init();
 80130b6:	f000 fa61 	bl	801357c <MX_DMA_Init>
  MX_TIM14_Init();
 80130ba:	f000 f9e7 	bl	801348c <MX_TIM14_Init>
  MX_CAN1_Init();
 80130be:	f000 f961 	bl	8013384 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80130c2:	f000 fa07 	bl	80134d4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80130c6:	f009 ff21 	bl	801cf0c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80130ca:	f000 fa2d 	bl	8013528 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80130ce:	f000 f98f 	bl	80133f0 <MX_TIM4_Init>
		   HAL_Delay(46);
		  }
	  }
#endif

  for(uint8_t cnt=0;cnt<25;cnt++)
 80130d2:	2300      	movs	r3, #0
 80130d4:	77fb      	strb	r3, [r7, #31]
 80130d6:	e009      	b.n	80130ec <main+0x48>
  {
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7 );//LED2_Pin___//LED2_GPIO_Port//yellow
 80130d8:	2180      	movs	r1, #128	; 0x80
 80130da:	4869      	ldr	r0, [pc, #420]	; (8013280 <main+0x1dc>)
 80130dc:	f002 fdc7 	bl	8015c6e <HAL_GPIO_TogglePin>
	  	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6 );//LED1_Pin___//LED1_GPIO_Port//green
  HAL_Delay(33);
 80130e0:	2021      	movs	r0, #33	; 0x21
 80130e2:	f000 ffad 	bl	8014040 <HAL_Delay>
  for(uint8_t cnt=0;cnt<25;cnt++)
 80130e6:	7ffb      	ldrb	r3, [r7, #31]
 80130e8:	3301      	adds	r3, #1
 80130ea:	77fb      	strb	r3, [r7, #31]
 80130ec:	7ffb      	ldrb	r3, [r7, #31]
 80130ee:	2b18      	cmp	r3, #24
 80130f0:	d9f2      	bls.n	80130d8 <main+0x34>
  }

   HAL_TIM_Base_Start_IT(&htim4);
 80130f2:	4864      	ldr	r0, [pc, #400]	; (8013284 <main+0x1e0>)
 80130f4:	f004 fd46 	bl	8017b84 <HAL_TIM_Base_Start_IT>

   CANopenNodeSTM32 canOpenNodeSTM32;
   canOpenNodeSTM32.CANHandle = &hcan1;
 80130f8:	4b63      	ldr	r3, [pc, #396]	; (8013288 <main+0x1e4>)
 80130fa:	60fb      	str	r3, [r7, #12]
   canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 80130fc:	4b63      	ldr	r3, [pc, #396]	; (801328c <main+0x1e8>)
 80130fe:	613b      	str	r3, [r7, #16]
   canOpenNodeSTM32.timerHandle = &htim4;
 8013100:	4b60      	ldr	r3, [pc, #384]	; (8013284 <main+0x1e0>)
 8013102:	60bb      	str	r3, [r7, #8]
   canOpenNodeSTM32.desiredNodeID = 0x48;			//072
 8013104:	2348      	movs	r3, #72	; 0x48
 8013106:	713b      	strb	r3, [r7, #4]
   canOpenNodeSTM32.baudrate = 125*4;
 8013108:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801310c:	80fb      	strh	r3, [r7, #6]
   canopen_app_init(&canOpenNodeSTM32);
 801310e:	1d3b      	adds	r3, r7, #4
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff f8f3 	bl	80122fc <canopen_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  read_SDO (
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 8013116:	69bb      	ldr	r3, [r7, #24]
	  read_SDO (
 8013118:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801311a:	4b5d      	ldr	r3, [pc, #372]	; (8013290 <main+0x1ec>)
 801311c:	9302      	str	r3, [sp, #8]
 801311e:	2304      	movs	r3, #4
 8013120:	9301      	str	r3, [sp, #4]
 8013122:	4b5c      	ldr	r3, [pc, #368]	; (8013294 <main+0x1f0>)
 8013124:	9300      	str	r3, [sp, #0]
 8013126:	2300      	movs	r3, #0
 8013128:	f246 0247 	movw	r2, #24647	; 0x6047
 801312c:	2167      	movs	r1, #103	; 0x67
 801312e:	f7ff fee1 	bl	8012ef4 <read_SDO>
				0,											//Sub_Index_of_OD_variable
				Rx_Array,									//Saved_Received_Data
				4,											//Number_of_Byte_to_read
				(size_t*)&Length_of_Ext_Var );

	  HAL_Delay(100);
 8013132:	2064      	movs	r0, #100	; 0x64
 8013134:	f000 ff84 	bl	8014040 <HAL_Delay>

	  	TerminalInterface.gState = HAL_UART_STATE_READY;
 8013138:	4b57      	ldr	r3, [pc, #348]	; (8013298 <main+0x1f4>)
 801313a:	2220      	movs	r2, #32
 801313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Rx_Array, 8);
 8013140:	2208      	movs	r2, #8
 8013142:	4954      	ldr	r1, [pc, #336]	; (8013294 <main+0x1f0>)
 8013144:	4854      	ldr	r0, [pc, #336]	; (8013298 <main+0x1f4>)
 8013146:	f005 fa8b 	bl	8018660 <HAL_UART_Transmit_DMA>

	  write_SDO(
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 801314a:	69bb      	ldr	r3, [r7, #24]
	  write_SDO(
 801314c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801314e:	2304      	movs	r3, #4
 8013150:	9301      	str	r3, [sp, #4]
 8013152:	4b52      	ldr	r3, [pc, #328]	; (801329c <main+0x1f8>)
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	2300      	movs	r3, #0
 8013158:	f246 0247 	movw	r2, #24647	; 0x6047
 801315c:	2167      	movs	r1, #103	; 0x67
 801315e:	f7ff ff31 	bl	8012fc4 <write_SDO>
				0x6047,										//Index_of_OD_variable_at_remote_NodeID
				0,											//Sub_Index_of_OD_variable
				Array_8u,									//
				4);

	  HAL_Delay(100);
 8013162:	2064      	movs	r0, #100	; 0x64
 8013164:	f000 ff6c 	bl	8014040 <HAL_Delay>

	  read_SDO (
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 8013168:	69bb      	ldr	r3, [r7, #24]
	  read_SDO (
 801316a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801316c:	4b48      	ldr	r3, [pc, #288]	; (8013290 <main+0x1ec>)
 801316e:	9302      	str	r3, [sp, #8]
 8013170:	2304      	movs	r3, #4
 8013172:	9301      	str	r3, [sp, #4]
 8013174:	4b47      	ldr	r3, [pc, #284]	; (8013294 <main+0x1f0>)
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	2300      	movs	r3, #0
 801317a:	f246 0247 	movw	r2, #24647	; 0x6047
 801317e:	2167      	movs	r1, #103	; 0x67
 8013180:	f7ff feb8 	bl	8012ef4 <read_SDO>
				0,											//Sub_Index_of_OD_variable
				Rx_Array,									//Saved_Received_Data
				4,											//Number_of_Byte_to_read
				(size_t*)&Length_of_Ext_Var );

	  HAL_Delay(100);
 8013184:	2064      	movs	r0, #100	; 0x64
 8013186:	f000 ff5b 	bl	8014040 <HAL_Delay>

	  TerminalInterface.gState = HAL_UART_STATE_READY;
 801318a:	4b43      	ldr	r3, [pc, #268]	; (8013298 <main+0x1f4>)
 801318c:	2220      	movs	r2, #32
 801318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	  HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Rx_Array, 8);
 8013192:	2208      	movs	r2, #8
 8013194:	493f      	ldr	r1, [pc, #252]	; (8013294 <main+0x1f0>)
 8013196:	4840      	ldr	r0, [pc, #256]	; (8013298 <main+0x1f4>)
 8013198:	f005 fa62 	bl	8018660 <HAL_UART_Transmit_DMA>
      HAL_Delay(100);
 801319c:	2064      	movs	r0, #100	; 0x64
 801319e:	f000 ff4f 	bl	8014040 <HAL_Delay>

		Local_Count=0;
 80131a2:	4b3f      	ldr	r3, [pc, #252]	; (80132a0 <main+0x1fc>)
 80131a4:	2200      	movs	r2, #0
 80131a6:	701a      	strb	r2, [r3, #0]
		  OD_PERSIST_COMM.x6000_nucleo_VAR32_6000=0;
 80131a8:	4b3e      	ldr	r3, [pc, #248]	; (80132a4 <main+0x200>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

		  while (1)
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, !canOpenNodeSTM32.outStatusLEDGreen);
 80131b0:	7d3b      	ldrb	r3, [r7, #20]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	bf0c      	ite	eq
 80131b6:	2301      	moveq	r3, #1
 80131b8:	2300      	movne	r3, #0
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	461a      	mov	r2, r3
 80131be:	2140      	movs	r1, #64	; 0x40
 80131c0:	482f      	ldr	r0, [pc, #188]	; (8013280 <main+0x1dc>)
 80131c2:	f002 fd3b 	bl	8015c3c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, !canOpenNodeSTM32.outStatusLEDRed  );//yellow
 80131c6:	7d7b      	ldrb	r3, [r7, #21]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	bf0c      	ite	eq
 80131cc:	2301      	moveq	r3, #1
 80131ce:	2300      	movne	r3, #0
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	461a      	mov	r2, r3
 80131d4:	2180      	movs	r1, #128	; 0x80
 80131d6:	482a      	ldr	r0, [pc, #168]	; (8013280 <main+0x1dc>)
 80131d8:	f002 fd30 	bl	8015c3c <HAL_GPIO_WritePin>
//		         HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6 );//LED1_Pin___//LED1_GPIO_Port//green

			canopen_app_process();
 80131dc:	f7ff f9e0 	bl	80125a0 <canopen_app_process>
//				TerminalInterface.gState = HAL_UART_STATE_READY;
//				HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)(&tmp32u_1), 4);
//				}


			  if(HAL_GetTick() - Ticks>749)
 80131e0:	f000 ff22 	bl	8014028 <HAL_GetTick>
 80131e4:	4602      	mov	r2, r0
 80131e6:	4b30      	ldr	r3, [pc, #192]	; (80132a8 <main+0x204>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	1ad3      	subs	r3, r2, r3
 80131ec:	f240 22ed 	movw	r2, #749	; 0x2ed
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d9dd      	bls.n	80131b0 <main+0x10c>
			  {
				Ticks = HAL_GetTick();
 80131f4:	f000 ff18 	bl	8014028 <HAL_GetTick>
 80131f8:	4603      	mov	r3, r0
 80131fa:	4a2b      	ldr	r2, [pc, #172]	; (80132a8 <main+0x204>)
 80131fc:	6013      	str	r3, [r2, #0]

				OD_PERSIST_COMM.x6000_nucleo_VAR32_6000++;
 80131fe:	4b29      	ldr	r3, [pc, #164]	; (80132a4 <main+0x200>)
 8013200:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8013204:	3301      	adds	r3, #1
 8013206:	4a27      	ldr	r2, [pc, #156]	; (80132a4 <main+0x200>)
 8013208:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

				tmp32u_0 = OD_PERSIST_COMM.x6000_nucleo_VAR32_6000++;
 801320c:	4b25      	ldr	r3, [pc, #148]	; (80132a4 <main+0x200>)
 801320e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8013212:	1c5a      	adds	r2, r3, #1
 8013214:	4923      	ldr	r1, [pc, #140]	; (80132a4 <main+0x200>)
 8013216:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
 801321a:	4a24      	ldr	r2, [pc, #144]	; (80132ac <main+0x208>)
 801321c:	6013      	str	r3, [r2, #0]

				//CO_TPDOsendRequest(&canOpenNodeSTM32.canOpenStack->TPDO[0] );

				TerminalInterface.gState = HAL_UART_STATE_READY;
 801321e:	4b1e      	ldr	r3, [pc, #120]	; (8013298 <main+0x1f4>)
 8013220:	2220      	movs	r2, #32
 8013222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)( &tmp32u_0 ), 4);
 8013226:	2204      	movs	r2, #4
 8013228:	4920      	ldr	r1, [pc, #128]	; (80132ac <main+0x208>)
 801322a:	481b      	ldr	r0, [pc, #108]	; (8013298 <main+0x1f4>)
 801322c:	f005 fa18 	bl	8018660 <HAL_UART_Transmit_DMA>

				Local_Count++;
 8013230:	4b1b      	ldr	r3, [pc, #108]	; (80132a0 <main+0x1fc>)
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	3301      	adds	r3, #1
 8013236:	b2da      	uxtb	r2, r3
 8013238:	4b19      	ldr	r3, [pc, #100]	; (80132a0 <main+0x1fc>)
 801323a:	701a      	strb	r2, [r3, #0]
				Local_Count = Local_Count%4;
 801323c:	4b18      	ldr	r3, [pc, #96]	; (80132a0 <main+0x1fc>)
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	f003 0303 	and.w	r3, r3, #3
 8013244:	b2da      	uxtb	r2, r3
 8013246:	4b16      	ldr	r3, [pc, #88]	; (80132a0 <main+0x1fc>)
 8013248:	701a      	strb	r2, [r3, #0]

				if(Local_Count==0){
 801324a:	4b15      	ldr	r3, [pc, #84]	; (80132a0 <main+0x1fc>)
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d107      	bne.n	8013262 <main+0x1be>
									OD_PERSIST_COMM.x6038_nucleo_Array[0]++;
 8013252:	4b14      	ldr	r3, [pc, #80]	; (80132a4 <main+0x200>)
 8013254:	f8b3 331e 	ldrh.w	r3, [r3, #798]	; 0x31e
 8013258:	3301      	adds	r3, #1
 801325a:	b29a      	uxth	r2, r3
 801325c:	4b11      	ldr	r3, [pc, #68]	; (80132a4 <main+0x200>)
 801325e:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
								  }

				CO_TPDOsendRequest(&canOpenNodeSTM32.canOpenStack->TPDO[Local_Count] );
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013266:	4b0e      	ldr	r3, [pc, #56]	; (80132a0 <main+0x1fc>)
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	4619      	mov	r1, r3
 801326c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8013270:	fb01 f303 	mul.w	r3, r1, r3
 8013274:	4413      	add	r3, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fe18 	bl	8012eac <CO_TPDOsendRequest>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, !canOpenNodeSTM32.outStatusLEDGreen);
 801327c:	e798      	b.n	80131b0 <main+0x10c>
 801327e:	bf00      	nop
 8013280:	40020000 	.word	0x40020000
 8013284:	20000980 	.word	0x20000980
 8013288:	2000091c 	.word	0x2000091c
 801328c:	08013385 	.word	0x08013385
 8013290:	20000d60 	.word	0x20000d60
 8013294:	20000d50 	.word	0x20000d50
 8013298:	20000ae8 	.word	0x20000ae8
 801329c:	200005dc 	.word	0x200005dc
 80132a0:	20000d61 	.word	0x20000d61
 80132a4:	20000018 	.word	0x20000018
 80132a8:	20000d64 	.word	0x20000d64
 80132ac:	200005ec 	.word	0x200005ec

080132b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b094      	sub	sp, #80	; 0x50
 80132b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80132b6:	f107 0320 	add.w	r3, r7, #32
 80132ba:	2230      	movs	r2, #48	; 0x30
 80132bc:	2100      	movs	r1, #0
 80132be:	4618      	mov	r0, r3
 80132c0:	f00b ffd0 	bl	801f264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80132c4:	f107 030c 	add.w	r3, r7, #12
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
 80132cc:	605a      	str	r2, [r3, #4]
 80132ce:	609a      	str	r2, [r3, #8]
 80132d0:	60da      	str	r2, [r3, #12]
 80132d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80132d4:	2300      	movs	r3, #0
 80132d6:	60bb      	str	r3, [r7, #8]
 80132d8:	4b28      	ldr	r3, [pc, #160]	; (801337c <SystemClock_Config+0xcc>)
 80132da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132dc:	4a27      	ldr	r2, [pc, #156]	; (801337c <SystemClock_Config+0xcc>)
 80132de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132e2:	6413      	str	r3, [r2, #64]	; 0x40
 80132e4:	4b25      	ldr	r3, [pc, #148]	; (801337c <SystemClock_Config+0xcc>)
 80132e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132ec:	60bb      	str	r3, [r7, #8]
 80132ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80132f0:	2300      	movs	r3, #0
 80132f2:	607b      	str	r3, [r7, #4]
 80132f4:	4b22      	ldr	r3, [pc, #136]	; (8013380 <SystemClock_Config+0xd0>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4a21      	ldr	r2, [pc, #132]	; (8013380 <SystemClock_Config+0xd0>)
 80132fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	4b1f      	ldr	r3, [pc, #124]	; (8013380 <SystemClock_Config+0xd0>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801330c:	2301      	movs	r3, #1
 801330e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013314:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013316:	2302      	movs	r3, #2
 8013318:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801331a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801331e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8013320:	2304      	movs	r3, #4
 8013322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013324:	23a8      	movs	r3, #168	; 0xa8
 8013326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013328:	2302      	movs	r3, #2
 801332a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801332c:	2307      	movs	r3, #7
 801332e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013330:	f107 0320 	add.w	r3, r7, #32
 8013334:	4618      	mov	r0, r3
 8013336:	f003 ff31 	bl	801719c <HAL_RCC_OscConfig>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013340:	f000 fa2c 	bl	801379c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013344:	230f      	movs	r3, #15
 8013346:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013348:	2302      	movs	r3, #2
 801334a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801334c:	2300      	movs	r3, #0
 801334e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013350:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801335a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801335c:	f107 030c 	add.w	r3, r7, #12
 8013360:	2105      	movs	r1, #5
 8013362:	4618      	mov	r0, r3
 8013364:	f004 f992 	bl	801768c <HAL_RCC_ClockConfig>
 8013368:	4603      	mov	r3, r0
 801336a:	2b00      	cmp	r3, #0
 801336c:	d001      	beq.n	8013372 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801336e:	f000 fa15 	bl	801379c <Error_Handler>
  }
}
 8013372:	bf00      	nop
 8013374:	3750      	adds	r7, #80	; 0x50
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	40023800 	.word	0x40023800
 8013380:	40007000 	.word	0x40007000

08013384 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8013388:	4b17      	ldr	r3, [pc, #92]	; (80133e8 <MX_CAN1_Init+0x64>)
 801338a:	4a18      	ldr	r2, [pc, #96]	; (80133ec <MX_CAN1_Init+0x68>)
 801338c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 801338e:	4b16      	ldr	r3, [pc, #88]	; (80133e8 <MX_CAN1_Init+0x64>)
 8013390:	2206      	movs	r2, #6
 8013392:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8013394:	4b14      	ldr	r3, [pc, #80]	; (80133e8 <MX_CAN1_Init+0x64>)
 8013396:	2200      	movs	r2, #0
 8013398:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801339a:	4b13      	ldr	r3, [pc, #76]	; (80133e8 <MX_CAN1_Init+0x64>)
 801339c:	2200      	movs	r2, #0
 801339e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80133a0:	4b11      	ldr	r3, [pc, #68]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80133a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80133a8:	4b0f      	ldr	r3, [pc, #60]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80133ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80133b0:	4b0d      	ldr	r3, [pc, #52]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133b2:	2200      	movs	r2, #0
 80133b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80133b6:	4b0c      	ldr	r3, [pc, #48]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133b8:	2200      	movs	r2, #0
 80133ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80133bc:	4b0a      	ldr	r3, [pc, #40]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133be:	2200      	movs	r2, #0
 80133c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80133c2:	4b09      	ldr	r3, [pc, #36]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133c4:	2200      	movs	r2, #0
 80133c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80133c8:	4b07      	ldr	r3, [pc, #28]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80133ce:	4b06      	ldr	r3, [pc, #24]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133d0:	2200      	movs	r2, #0
 80133d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80133d4:	4804      	ldr	r0, [pc, #16]	; (80133e8 <MX_CAN1_Init+0x64>)
 80133d6:	f000 fe57 	bl	8014088 <HAL_CAN_Init>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80133e0:	f000 f9dc 	bl	801379c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80133e4:	bf00      	nop
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	2000091c 	.word	0x2000091c
 80133ec:	40006400 	.word	0x40006400

080133f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80133f6:	f107 0308 	add.w	r3, r7, #8
 80133fa:	2200      	movs	r2, #0
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	605a      	str	r2, [r3, #4]
 8013400:	609a      	str	r2, [r3, #8]
 8013402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013404:	463b      	mov	r3, r7
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 801340c:	4b1d      	ldr	r3, [pc, #116]	; (8013484 <MX_TIM4_Init+0x94>)
 801340e:	4a1e      	ldr	r2, [pc, #120]	; (8013488 <MX_TIM4_Init+0x98>)
 8013410:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8013412:	4b1c      	ldr	r3, [pc, #112]	; (8013484 <MX_TIM4_Init+0x94>)
 8013414:	22a7      	movs	r2, #167	; 0xa7
 8013416:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013418:	4b1a      	ldr	r3, [pc, #104]	; (8013484 <MX_TIM4_Init+0x94>)
 801341a:	2200      	movs	r2, #0
 801341c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 801341e:	4b19      	ldr	r3, [pc, #100]	; (8013484 <MX_TIM4_Init+0x94>)
 8013420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013424:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013426:	4b17      	ldr	r3, [pc, #92]	; (8013484 <MX_TIM4_Init+0x94>)
 8013428:	2200      	movs	r2, #0
 801342a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801342c:	4b15      	ldr	r3, [pc, #84]	; (8013484 <MX_TIM4_Init+0x94>)
 801342e:	2200      	movs	r2, #0
 8013430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8013432:	4814      	ldr	r0, [pc, #80]	; (8013484 <MX_TIM4_Init+0x94>)
 8013434:	f004 fb4a 	bl	8017acc <HAL_TIM_Base_Init>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 801343e:	f000 f9ad 	bl	801379c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8013448:	f107 0308 	add.w	r3, r7, #8
 801344c:	4619      	mov	r1, r3
 801344e:	480d      	ldr	r0, [pc, #52]	; (8013484 <MX_TIM4_Init+0x94>)
 8013450:	f004 fd5f 	bl	8017f12 <HAL_TIM_ConfigClockSource>
 8013454:	4603      	mov	r3, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d001      	beq.n	801345e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 801345a:	f000 f99f 	bl	801379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801345e:	2320      	movs	r3, #32
 8013460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013462:	2300      	movs	r3, #0
 8013464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8013466:	463b      	mov	r3, r7
 8013468:	4619      	mov	r1, r3
 801346a:	4806      	ldr	r0, [pc, #24]	; (8013484 <MX_TIM4_Init+0x94>)
 801346c:	f005 f804 	bl	8018478 <HAL_TIMEx_MasterConfigSynchronization>
 8013470:	4603      	mov	r3, r0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8013476:	f000 f991 	bl	801379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 801347a:	bf00      	nop
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	20000980 	.word	0x20000980
 8013488:	40000800 	.word	0x40000800

0801348c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8013490:	4b0e      	ldr	r3, [pc, #56]	; (80134cc <MX_TIM14_Init+0x40>)
 8013492:	4a0f      	ldr	r2, [pc, #60]	; (80134d0 <MX_TIM14_Init+0x44>)
 8013494:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 167;
 8013496:	4b0d      	ldr	r3, [pc, #52]	; (80134cc <MX_TIM14_Init+0x40>)
 8013498:	22a7      	movs	r2, #167	; 0xa7
 801349a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 801349c:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <MX_TIM14_Init+0x40>)
 801349e:	2200      	movs	r2, #0
 80134a0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 80134a2:	4b0a      	ldr	r3, [pc, #40]	; (80134cc <MX_TIM14_Init+0x40>)
 80134a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80134a8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80134aa:	4b08      	ldr	r3, [pc, #32]	; (80134cc <MX_TIM14_Init+0x40>)
 80134ac:	2200      	movs	r2, #0
 80134ae:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80134b0:	4b06      	ldr	r3, [pc, #24]	; (80134cc <MX_TIM14_Init+0x40>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80134b6:	4805      	ldr	r0, [pc, #20]	; (80134cc <MX_TIM14_Init+0x40>)
 80134b8:	f004 fb08 	bl	8017acc <HAL_TIM_Base_Init>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80134c2:	f000 f96b 	bl	801379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80134c6:	bf00      	nop
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	20000a34 	.word	0x20000a34
 80134d0:	40002000 	.word	0x40002000

080134d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80134d8:	4b11      	ldr	r3, [pc, #68]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134da:	4a12      	ldr	r2, [pc, #72]	; (8013524 <MX_USART1_UART_Init+0x50>)
 80134dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80134de:	4b10      	ldr	r3, [pc, #64]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134e0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80134e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80134e6:	4b0e      	ldr	r3, [pc, #56]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134e8:	2200      	movs	r2, #0
 80134ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80134ec:	4b0c      	ldr	r3, [pc, #48]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80134f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80134f4:	4b0a      	ldr	r3, [pc, #40]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134f6:	2200      	movs	r2, #0
 80134f8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80134fa:	4b09      	ldr	r3, [pc, #36]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 80134fc:	220c      	movs	r2, #12
 80134fe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013500:	4b07      	ldr	r3, [pc, #28]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 8013502:	2200      	movs	r2, #0
 8013504:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013506:	4b06      	ldr	r3, [pc, #24]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 8013508:	2200      	movs	r2, #0
 801350a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801350c:	4804      	ldr	r0, [pc, #16]	; (8013520 <MX_USART1_UART_Init+0x4c>)
 801350e:	f005 f84d 	bl	80185ac <HAL_UART_Init>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8013518:	f000 f940 	bl	801379c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801351c:	bf00      	nop
 801351e:	bd80      	pop	{r7, pc}
 8013520:	20000ae8 	.word	0x20000ae8
 8013524:	40011000 	.word	0x40011000

08013528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801352c:	4b11      	ldr	r3, [pc, #68]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 801352e:	4a12      	ldr	r2, [pc, #72]	; (8013578 <MX_USART2_UART_Init+0x50>)
 8013530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8013532:	4b10      	ldr	r3, [pc, #64]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 8013534:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8013538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801353a:	4b0e      	ldr	r3, [pc, #56]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 801353c:	2200      	movs	r2, #0
 801353e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8013540:	4b0c      	ldr	r3, [pc, #48]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 8013542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013546:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8013548:	4b0a      	ldr	r3, [pc, #40]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 801354a:	2200      	movs	r2, #0
 801354c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801354e:	4b09      	ldr	r3, [pc, #36]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 8013550:	220c      	movs	r2, #12
 8013552:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013554:	4b07      	ldr	r3, [pc, #28]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 8013556:	2200      	movs	r2, #0
 8013558:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801355a:	4b06      	ldr	r3, [pc, #24]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 801355c:	2200      	movs	r2, #0
 801355e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013560:	4804      	ldr	r0, [pc, #16]	; (8013574 <MX_USART2_UART_Init+0x4c>)
 8013562:	f005 f823 	bl	80185ac <HAL_UART_Init>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 801356c:	f000 f916 	bl	801379c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8013570:	bf00      	nop
 8013572:	bd80      	pop	{r7, pc}
 8013574:	20000b5c 	.word	0x20000b5c
 8013578:	40004400 	.word	0x40004400

0801357c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013582:	2300      	movs	r3, #0
 8013584:	607b      	str	r3, [r7, #4]
 8013586:	4b1f      	ldr	r3, [pc, #124]	; (8013604 <MX_DMA_Init+0x88>)
 8013588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801358a:	4a1e      	ldr	r2, [pc, #120]	; (8013604 <MX_DMA_Init+0x88>)
 801358c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013590:	6313      	str	r3, [r2, #48]	; 0x30
 8013592:	4b1c      	ldr	r3, [pc, #112]	; (8013604 <MX_DMA_Init+0x88>)
 8013594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801359a:	607b      	str	r3, [r7, #4]
 801359c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801359e:	2300      	movs	r3, #0
 80135a0:	603b      	str	r3, [r7, #0]
 80135a2:	4b18      	ldr	r3, [pc, #96]	; (8013604 <MX_DMA_Init+0x88>)
 80135a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a6:	4a17      	ldr	r2, [pc, #92]	; (8013604 <MX_DMA_Init+0x88>)
 80135a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80135ac:	6313      	str	r3, [r2, #48]	; 0x30
 80135ae:	4b15      	ldr	r3, [pc, #84]	; (8013604 <MX_DMA_Init+0x88>)
 80135b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80135b6:	603b      	str	r3, [r7, #0]
 80135b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80135ba:	2200      	movs	r2, #0
 80135bc:	2100      	movs	r1, #0
 80135be:	2010      	movs	r0, #16
 80135c0:	f001 fd63 	bl	801508a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80135c4:	2010      	movs	r0, #16
 80135c6:	f001 fd7c 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80135ca:	2200      	movs	r2, #0
 80135cc:	2100      	movs	r1, #0
 80135ce:	2011      	movs	r0, #17
 80135d0:	f001 fd5b 	bl	801508a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80135d4:	2011      	movs	r0, #17
 80135d6:	f001 fd74 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80135da:	2200      	movs	r2, #0
 80135dc:	2100      	movs	r1, #0
 80135de:	203a      	movs	r0, #58	; 0x3a
 80135e0:	f001 fd53 	bl	801508a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80135e4:	203a      	movs	r0, #58	; 0x3a
 80135e6:	f001 fd6c 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80135ea:	2200      	movs	r2, #0
 80135ec:	2100      	movs	r1, #0
 80135ee:	2046      	movs	r0, #70	; 0x46
 80135f0:	f001 fd4b 	bl	801508a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80135f4:	2046      	movs	r0, #70	; 0x46
 80135f6:	f001 fd64 	bl	80150c2 <HAL_NVIC_EnableIRQ>

}
 80135fa:	bf00      	nop
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	40023800 	.word	0x40023800

08013608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b08c      	sub	sp, #48	; 0x30
 801360c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801360e:	f107 031c 	add.w	r3, r7, #28
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	605a      	str	r2, [r3, #4]
 8013618:	609a      	str	r2, [r3, #8]
 801361a:	60da      	str	r2, [r3, #12]
 801361c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801361e:	2300      	movs	r3, #0
 8013620:	61bb      	str	r3, [r7, #24]
 8013622:	4b59      	ldr	r3, [pc, #356]	; (8013788 <MX_GPIO_Init+0x180>)
 8013624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013626:	4a58      	ldr	r2, [pc, #352]	; (8013788 <MX_GPIO_Init+0x180>)
 8013628:	f043 0310 	orr.w	r3, r3, #16
 801362c:	6313      	str	r3, [r2, #48]	; 0x30
 801362e:	4b56      	ldr	r3, [pc, #344]	; (8013788 <MX_GPIO_Init+0x180>)
 8013630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013632:	f003 0310 	and.w	r3, r3, #16
 8013636:	61bb      	str	r3, [r7, #24]
 8013638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801363a:	2300      	movs	r3, #0
 801363c:	617b      	str	r3, [r7, #20]
 801363e:	4b52      	ldr	r3, [pc, #328]	; (8013788 <MX_GPIO_Init+0x180>)
 8013640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013642:	4a51      	ldr	r2, [pc, #324]	; (8013788 <MX_GPIO_Init+0x180>)
 8013644:	f043 0304 	orr.w	r3, r3, #4
 8013648:	6313      	str	r3, [r2, #48]	; 0x30
 801364a:	4b4f      	ldr	r3, [pc, #316]	; (8013788 <MX_GPIO_Init+0x180>)
 801364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801364e:	f003 0304 	and.w	r3, r3, #4
 8013652:	617b      	str	r3, [r7, #20]
 8013654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013656:	2300      	movs	r3, #0
 8013658:	613b      	str	r3, [r7, #16]
 801365a:	4b4b      	ldr	r3, [pc, #300]	; (8013788 <MX_GPIO_Init+0x180>)
 801365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801365e:	4a4a      	ldr	r2, [pc, #296]	; (8013788 <MX_GPIO_Init+0x180>)
 8013660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013664:	6313      	str	r3, [r2, #48]	; 0x30
 8013666:	4b48      	ldr	r3, [pc, #288]	; (8013788 <MX_GPIO_Init+0x180>)
 8013668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801366e:	613b      	str	r3, [r7, #16]
 8013670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013672:	2300      	movs	r3, #0
 8013674:	60fb      	str	r3, [r7, #12]
 8013676:	4b44      	ldr	r3, [pc, #272]	; (8013788 <MX_GPIO_Init+0x180>)
 8013678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801367a:	4a43      	ldr	r2, [pc, #268]	; (8013788 <MX_GPIO_Init+0x180>)
 801367c:	f043 0301 	orr.w	r3, r3, #1
 8013680:	6313      	str	r3, [r2, #48]	; 0x30
 8013682:	4b41      	ldr	r3, [pc, #260]	; (8013788 <MX_GPIO_Init+0x180>)
 8013684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013686:	f003 0301 	and.w	r3, r3, #1
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801368e:	2300      	movs	r3, #0
 8013690:	60bb      	str	r3, [r7, #8]
 8013692:	4b3d      	ldr	r3, [pc, #244]	; (8013788 <MX_GPIO_Init+0x180>)
 8013694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013696:	4a3c      	ldr	r2, [pc, #240]	; (8013788 <MX_GPIO_Init+0x180>)
 8013698:	f043 0302 	orr.w	r3, r3, #2
 801369c:	6313      	str	r3, [r2, #48]	; 0x30
 801369e:	4b3a      	ldr	r3, [pc, #232]	; (8013788 <MX_GPIO_Init+0x180>)
 80136a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a2:	f003 0302 	and.w	r3, r3, #2
 80136a6:	60bb      	str	r3, [r7, #8]
 80136a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80136aa:	2300      	movs	r3, #0
 80136ac:	607b      	str	r3, [r7, #4]
 80136ae:	4b36      	ldr	r3, [pc, #216]	; (8013788 <MX_GPIO_Init+0x180>)
 80136b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136b2:	4a35      	ldr	r2, [pc, #212]	; (8013788 <MX_GPIO_Init+0x180>)
 80136b4:	f043 0308 	orr.w	r3, r3, #8
 80136b8:	6313      	str	r3, [r2, #48]	; 0x30
 80136ba:	4b33      	ldr	r3, [pc, #204]	; (8013788 <MX_GPIO_Init+0x180>)
 80136bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136be:	f003 0308 	and.w	r3, r3, #8
 80136c2:	607b      	str	r3, [r7, #4]
 80136c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80136c6:	2201      	movs	r2, #1
 80136c8:	21c0      	movs	r1, #192	; 0xc0
 80136ca:	4830      	ldr	r0, [pc, #192]	; (801378c <MX_GPIO_Init+0x184>)
 80136cc:	f002 fab6 	bl	8015c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80136d0:	2200      	movs	r2, #0
 80136d2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80136d6:	482e      	ldr	r0, [pc, #184]	; (8013790 <MX_GPIO_Init+0x188>)
 80136d8:	f002 fab0 	bl	8015c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80136dc:	2318      	movs	r3, #24
 80136de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80136e0:	2300      	movs	r3, #0
 80136e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136e4:	2300      	movs	r3, #0
 80136e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80136e8:	f107 031c 	add.w	r3, r7, #28
 80136ec:	4619      	mov	r1, r3
 80136ee:	4829      	ldr	r0, [pc, #164]	; (8013794 <MX_GPIO_Init+0x18c>)
 80136f0:	f002 f908 	bl	8015904 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80136f4:	2301      	movs	r3, #1
 80136f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80136f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80136fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136fe:	2300      	movs	r3, #0
 8013700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8013702:	f107 031c 	add.w	r3, r7, #28
 8013706:	4619      	mov	r1, r3
 8013708:	4820      	ldr	r0, [pc, #128]	; (801378c <MX_GPIO_Init+0x184>)
 801370a:	f002 f8fb 	bl	8015904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 801370e:	23c0      	movs	r3, #192	; 0xc0
 8013710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013712:	2301      	movs	r3, #1
 8013714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013716:	2300      	movs	r3, #0
 8013718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801371a:	2300      	movs	r3, #0
 801371c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801371e:	f107 031c 	add.w	r3, r7, #28
 8013722:	4619      	mov	r1, r3
 8013724:	4819      	ldr	r0, [pc, #100]	; (801378c <MX_GPIO_Init+0x184>)
 8013726:	f002 f8ed 	bl	8015904 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 801372a:	2304      	movs	r3, #4
 801372c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801372e:	2300      	movs	r3, #0
 8013730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013732:	2300      	movs	r3, #0
 8013734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8013736:	f107 031c 	add.w	r3, r7, #28
 801373a:	4619      	mov	r1, r3
 801373c:	4816      	ldr	r0, [pc, #88]	; (8013798 <MX_GPIO_Init+0x190>)
 801373e:	f002 f8e1 	bl	8015904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8013742:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013748:	2301      	movs	r3, #1
 801374a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801374c:	2300      	movs	r3, #0
 801374e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013750:	2300      	movs	r3, #0
 8013752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013754:	f107 031c 	add.w	r3, r7, #28
 8013758:	4619      	mov	r1, r3
 801375a:	480d      	ldr	r0, [pc, #52]	; (8013790 <MX_GPIO_Init+0x188>)
 801375c:	f002 f8d2 	bl	8015904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8013760:	2320      	movs	r3, #32
 8013762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013764:	2302      	movs	r3, #2
 8013766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013768:	2300      	movs	r3, #0
 801376a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801376c:	2303      	movs	r3, #3
 801376e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8013770:	2309      	movs	r3, #9
 8013772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013774:	f107 031c 	add.w	r3, r7, #28
 8013778:	4619      	mov	r1, r3
 801377a:	4807      	ldr	r0, [pc, #28]	; (8013798 <MX_GPIO_Init+0x190>)
 801377c:	f002 f8c2 	bl	8015904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8013780:	bf00      	nop
 8013782:	3730      	adds	r7, #48	; 0x30
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	40023800 	.word	0x40023800
 801378c:	40020000 	.word	0x40020000
 8013790:	40020c00 	.word	0x40020c00
 8013794:	40021000 	.word	0x40021000
 8013798:	40020400 	.word	0x40020400

0801379c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801379c:	b480      	push	{r7}
 801379e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80137a0:	b672      	cpsid	i
}
 80137a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80137a4:	e7fe      	b.n	80137a4 <Error_Handler+0x8>
	...

080137a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80137ae:	2300      	movs	r3, #0
 80137b0:	607b      	str	r3, [r7, #4]
 80137b2:	4b10      	ldr	r3, [pc, #64]	; (80137f4 <HAL_MspInit+0x4c>)
 80137b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137b6:	4a0f      	ldr	r2, [pc, #60]	; (80137f4 <HAL_MspInit+0x4c>)
 80137b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80137bc:	6453      	str	r3, [r2, #68]	; 0x44
 80137be:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <HAL_MspInit+0x4c>)
 80137c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137c6:	607b      	str	r3, [r7, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80137ca:	2300      	movs	r3, #0
 80137cc:	603b      	str	r3, [r7, #0]
 80137ce:	4b09      	ldr	r3, [pc, #36]	; (80137f4 <HAL_MspInit+0x4c>)
 80137d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137d2:	4a08      	ldr	r2, [pc, #32]	; (80137f4 <HAL_MspInit+0x4c>)
 80137d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137d8:	6413      	str	r3, [r2, #64]	; 0x40
 80137da:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <HAL_MspInit+0x4c>)
 80137dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137e2:	603b      	str	r3, [r7, #0]
 80137e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80137e6:	2007      	movs	r0, #7
 80137e8:	f001 fc44 	bl	8015074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	40023800 	.word	0x40023800

080137f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b08a      	sub	sp, #40	; 0x28
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013800:	f107 0314 	add.w	r3, r7, #20
 8013804:	2200      	movs	r2, #0
 8013806:	601a      	str	r2, [r3, #0]
 8013808:	605a      	str	r2, [r3, #4]
 801380a:	609a      	str	r2, [r3, #8]
 801380c:	60da      	str	r2, [r3, #12]
 801380e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	4a29      	ldr	r2, [pc, #164]	; (80138bc <HAL_CAN_MspInit+0xc4>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d14b      	bne.n	80138b2 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 801381a:	2300      	movs	r3, #0
 801381c:	613b      	str	r3, [r7, #16]
 801381e:	4b28      	ldr	r3, [pc, #160]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 8013820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013822:	4a27      	ldr	r2, [pc, #156]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 8013824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013828:	6413      	str	r3, [r2, #64]	; 0x40
 801382a:	4b25      	ldr	r3, [pc, #148]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 801382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013832:	613b      	str	r3, [r7, #16]
 8013834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013836:	2300      	movs	r3, #0
 8013838:	60fb      	str	r3, [r7, #12]
 801383a:	4b21      	ldr	r3, [pc, #132]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 801383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801383e:	4a20      	ldr	r2, [pc, #128]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 8013840:	f043 0308 	orr.w	r3, r3, #8
 8013844:	6313      	str	r3, [r2, #48]	; 0x30
 8013846:	4b1e      	ldr	r3, [pc, #120]	; (80138c0 <HAL_CAN_MspInit+0xc8>)
 8013848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801384a:	f003 0308 	and.w	r3, r3, #8
 801384e:	60fb      	str	r3, [r7, #12]
 8013850:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013852:	2303      	movs	r3, #3
 8013854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013856:	2302      	movs	r3, #2
 8013858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801385a:	2300      	movs	r3, #0
 801385c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801385e:	2303      	movs	r3, #3
 8013860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8013862:	2309      	movs	r3, #9
 8013864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013866:	f107 0314 	add.w	r3, r7, #20
 801386a:	4619      	mov	r1, r3
 801386c:	4815      	ldr	r0, [pc, #84]	; (80138c4 <HAL_CAN_MspInit+0xcc>)
 801386e:	f002 f849 	bl	8015904 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8013872:	2200      	movs	r2, #0
 8013874:	2100      	movs	r1, #0
 8013876:	2013      	movs	r0, #19
 8013878:	f001 fc07 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 801387c:	2013      	movs	r0, #19
 801387e:	f001 fc20 	bl	80150c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8013882:	2200      	movs	r2, #0
 8013884:	2100      	movs	r1, #0
 8013886:	2014      	movs	r0, #20
 8013888:	f001 fbff 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 801388c:	2014      	movs	r0, #20
 801388e:	f001 fc18 	bl	80150c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8013892:	2200      	movs	r2, #0
 8013894:	2100      	movs	r1, #0
 8013896:	2015      	movs	r0, #21
 8013898:	f001 fbf7 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 801389c:	2015      	movs	r0, #21
 801389e:	f001 fc10 	bl	80150c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80138a2:	2200      	movs	r2, #0
 80138a4:	2100      	movs	r1, #0
 80138a6:	2016      	movs	r0, #22
 80138a8:	f001 fbef 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80138ac:	2016      	movs	r0, #22
 80138ae:	f001 fc08 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80138b2:	bf00      	nop
 80138b4:	3728      	adds	r7, #40	; 0x28
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	40006400 	.word	0x40006400
 80138c0:	40023800 	.word	0x40023800
 80138c4:	40020c00 	.word	0x40020c00

080138c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4a1c      	ldr	r2, [pc, #112]	; (8013948 <HAL_TIM_Base_MspInit+0x80>)
 80138d6:	4293      	cmp	r3, r2
 80138d8:	d116      	bne.n	8013908 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80138da:	2300      	movs	r3, #0
 80138dc:	60fb      	str	r3, [r7, #12]
 80138de:	4b1b      	ldr	r3, [pc, #108]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 80138e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e2:	4a1a      	ldr	r2, [pc, #104]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 80138e4:	f043 0304 	orr.w	r3, r3, #4
 80138e8:	6413      	str	r3, [r2, #64]	; 0x40
 80138ea:	4b18      	ldr	r3, [pc, #96]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 80138ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ee:	f003 0304 	and.w	r3, r3, #4
 80138f2:	60fb      	str	r3, [r7, #12]
 80138f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80138f6:	2200      	movs	r2, #0
 80138f8:	2100      	movs	r1, #0
 80138fa:	201e      	movs	r0, #30
 80138fc:	f001 fbc5 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8013900:	201e      	movs	r0, #30
 8013902:	f001 fbde 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8013906:	e01a      	b.n	801393e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	4a10      	ldr	r2, [pc, #64]	; (8013950 <HAL_TIM_Base_MspInit+0x88>)
 801390e:	4293      	cmp	r3, r2
 8013910:	d115      	bne.n	801393e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8013912:	2300      	movs	r3, #0
 8013914:	60bb      	str	r3, [r7, #8]
 8013916:	4b0d      	ldr	r3, [pc, #52]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 8013918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801391a:	4a0c      	ldr	r2, [pc, #48]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 801391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013920:	6413      	str	r3, [r2, #64]	; 0x40
 8013922:	4b0a      	ldr	r3, [pc, #40]	; (801394c <HAL_TIM_Base_MspInit+0x84>)
 8013924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801392a:	60bb      	str	r3, [r7, #8]
 801392c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 801392e:	2200      	movs	r2, #0
 8013930:	2100      	movs	r1, #0
 8013932:	202d      	movs	r0, #45	; 0x2d
 8013934:	f001 fba9 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8013938:	202d      	movs	r0, #45	; 0x2d
 801393a:	f001 fbc2 	bl	80150c2 <HAL_NVIC_EnableIRQ>
}
 801393e:	bf00      	nop
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	40000800 	.word	0x40000800
 801394c:	40023800 	.word	0x40023800
 8013950:	40002000 	.word	0x40002000

08013954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b08c      	sub	sp, #48	; 0x30
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801395c:	f107 031c 	add.w	r3, r7, #28
 8013960:	2200      	movs	r2, #0
 8013962:	601a      	str	r2, [r3, #0]
 8013964:	605a      	str	r2, [r3, #4]
 8013966:	609a      	str	r2, [r3, #8]
 8013968:	60da      	str	r2, [r3, #12]
 801396a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4a97      	ldr	r2, [pc, #604]	; (8013bd0 <HAL_UART_MspInit+0x27c>)
 8013972:	4293      	cmp	r3, r2
 8013974:	f040 8092 	bne.w	8013a9c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8013978:	2300      	movs	r3, #0
 801397a:	61bb      	str	r3, [r7, #24]
 801397c:	4b95      	ldr	r3, [pc, #596]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 801397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013980:	4a94      	ldr	r2, [pc, #592]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013982:	f043 0310 	orr.w	r3, r3, #16
 8013986:	6453      	str	r3, [r2, #68]	; 0x44
 8013988:	4b92      	ldr	r3, [pc, #584]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 801398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801398c:	f003 0310 	and.w	r3, r3, #16
 8013990:	61bb      	str	r3, [r7, #24]
 8013992:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013994:	2300      	movs	r3, #0
 8013996:	617b      	str	r3, [r7, #20]
 8013998:	4b8e      	ldr	r3, [pc, #568]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 801399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399c:	4a8d      	ldr	r2, [pc, #564]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 801399e:	f043 0301 	orr.w	r3, r3, #1
 80139a2:	6313      	str	r3, [r2, #48]	; 0x30
 80139a4:	4b8b      	ldr	r3, [pc, #556]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 80139a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a8:	f003 0301 	and.w	r3, r3, #1
 80139ac:	617b      	str	r3, [r7, #20]
 80139ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80139b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80139b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139b6:	2302      	movs	r3, #2
 80139b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139ba:	2300      	movs	r3, #0
 80139bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80139be:	2303      	movs	r3, #3
 80139c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80139c2:	2307      	movs	r3, #7
 80139c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139c6:	f107 031c 	add.w	r3, r7, #28
 80139ca:	4619      	mov	r1, r3
 80139cc:	4882      	ldr	r0, [pc, #520]	; (8013bd8 <HAL_UART_MspInit+0x284>)
 80139ce:	f001 ff99 	bl	8015904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80139d2:	4b82      	ldr	r3, [pc, #520]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139d4:	4a82      	ldr	r2, [pc, #520]	; (8013be0 <HAL_UART_MspInit+0x28c>)
 80139d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80139d8:	4b80      	ldr	r3, [pc, #512]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80139de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80139e0:	4b7e      	ldr	r3, [pc, #504]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139e2:	2200      	movs	r2, #0
 80139e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80139e6:	4b7d      	ldr	r3, [pc, #500]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80139ec:	4b7b      	ldr	r3, [pc, #492]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80139f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80139f4:	4b79      	ldr	r3, [pc, #484]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139f6:	2200      	movs	r2, #0
 80139f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80139fa:	4b78      	ldr	r3, [pc, #480]	; (8013bdc <HAL_UART_MspInit+0x288>)
 80139fc:	2200      	movs	r2, #0
 80139fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8013a00:	4b76      	ldr	r3, [pc, #472]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a02:	2200      	movs	r2, #0
 8013a04:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013a06:	4b75      	ldr	r3, [pc, #468]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a08:	2200      	movs	r2, #0
 8013a0a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013a0c:	4b73      	ldr	r3, [pc, #460]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a0e:	2200      	movs	r2, #0
 8013a10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8013a12:	4872      	ldr	r0, [pc, #456]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a14:	f001 fb74 	bl	8015100 <HAL_DMA_Init>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d001      	beq.n	8013a22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8013a1e:	f7ff febd 	bl	801379c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4a6d      	ldr	r2, [pc, #436]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a26:	639a      	str	r2, [r3, #56]	; 0x38
 8013a28:	4a6c      	ldr	r2, [pc, #432]	; (8013bdc <HAL_UART_MspInit+0x288>)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8013a2e:	4b6d      	ldr	r3, [pc, #436]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a30:	4a6d      	ldr	r2, [pc, #436]	; (8013be8 <HAL_UART_MspInit+0x294>)
 8013a32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8013a34:	4b6b      	ldr	r3, [pc, #428]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013a3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013a3c:	4b69      	ldr	r3, [pc, #420]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a3e:	2240      	movs	r2, #64	; 0x40
 8013a40:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013a42:	4b68      	ldr	r3, [pc, #416]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a44:	2200      	movs	r2, #0
 8013a46:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013a48:	4b66      	ldr	r3, [pc, #408]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013a4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013a50:	4b64      	ldr	r3, [pc, #400]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013a56:	4b63      	ldr	r3, [pc, #396]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a58:	2200      	movs	r2, #0
 8013a5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8013a5c:	4b61      	ldr	r3, [pc, #388]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a5e:	2200      	movs	r2, #0
 8013a60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013a62:	4b60      	ldr	r3, [pc, #384]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a64:	2200      	movs	r2, #0
 8013a66:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013a68:	4b5e      	ldr	r3, [pc, #376]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8013a6e:	485d      	ldr	r0, [pc, #372]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a70:	f001 fb46 	bl	8015100 <HAL_DMA_Init>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d001      	beq.n	8013a7e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8013a7a:	f7ff fe8f 	bl	801379c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4a58      	ldr	r2, [pc, #352]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a82:	635a      	str	r2, [r3, #52]	; 0x34
 8013a84:	4a57      	ldr	r2, [pc, #348]	; (8013be4 <HAL_UART_MspInit+0x290>)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	2025      	movs	r0, #37	; 0x25
 8013a90:	f001 fafb 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013a94:	2025      	movs	r0, #37	; 0x25
 8013a96:	f001 fb14 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8013a9a:	e095      	b.n	8013bc8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a52      	ldr	r2, [pc, #328]	; (8013bec <HAL_UART_MspInit+0x298>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	f040 8090 	bne.w	8013bc8 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	613b      	str	r3, [r7, #16]
 8013aac:	4b49      	ldr	r3, [pc, #292]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab0:	4a48      	ldr	r2, [pc, #288]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8013ab8:	4b46      	ldr	r3, [pc, #280]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ac0:	613b      	str	r3, [r7, #16]
 8013ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	4b42      	ldr	r3, [pc, #264]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013acc:	4a41      	ldr	r2, [pc, #260]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013ace:	f043 0301 	orr.w	r3, r3, #1
 8013ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8013ad4:	4b3f      	ldr	r3, [pc, #252]	; (8013bd4 <HAL_UART_MspInit+0x280>)
 8013ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	60fb      	str	r3, [r7, #12]
 8013ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8013ae0:	230c      	movs	r3, #12
 8013ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ae4:	2302      	movs	r3, #2
 8013ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013aec:	2303      	movs	r3, #3
 8013aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8013af0:	2307      	movs	r3, #7
 8013af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013af4:	f107 031c 	add.w	r3, r7, #28
 8013af8:	4619      	mov	r1, r3
 8013afa:	4837      	ldr	r0, [pc, #220]	; (8013bd8 <HAL_UART_MspInit+0x284>)
 8013afc:	f001 ff02 	bl	8015904 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8013b00:	4b3b      	ldr	r3, [pc, #236]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b02:	4a3c      	ldr	r2, [pc, #240]	; (8013bf4 <HAL_UART_MspInit+0x2a0>)
 8013b04:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8013b06:	4b3a      	ldr	r3, [pc, #232]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013b0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013b0e:	4b38      	ldr	r3, [pc, #224]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b10:	2240      	movs	r2, #64	; 0x40
 8013b12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013b14:	4b36      	ldr	r3, [pc, #216]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b16:	2200      	movs	r2, #0
 8013b18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013b1a:	4b35      	ldr	r3, [pc, #212]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013b22:	4b33      	ldr	r3, [pc, #204]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b24:	2200      	movs	r2, #0
 8013b26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013b28:	4b31      	ldr	r3, [pc, #196]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8013b2e:	4b30      	ldr	r3, [pc, #192]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b30:	2200      	movs	r2, #0
 8013b32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013b34:	4b2e      	ldr	r3, [pc, #184]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b36:	2200      	movs	r2, #0
 8013b38:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013b3a:	4b2d      	ldr	r3, [pc, #180]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8013b40:	482b      	ldr	r0, [pc, #172]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b42:	f001 fadd 	bl	8015100 <HAL_DMA_Init>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8013b4c:	f7ff fe26 	bl	801379c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	4a27      	ldr	r2, [pc, #156]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b54:	635a      	str	r2, [r3, #52]	; 0x34
 8013b56:	4a26      	ldr	r2, [pc, #152]	; (8013bf0 <HAL_UART_MspInit+0x29c>)
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8013b5c:	4b26      	ldr	r3, [pc, #152]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b5e:	4a27      	ldr	r2, [pc, #156]	; (8013bfc <HAL_UART_MspInit+0x2a8>)
 8013b60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8013b62:	4b25      	ldr	r3, [pc, #148]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013b68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013b6a:	4b23      	ldr	r3, [pc, #140]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013b70:	4b21      	ldr	r3, [pc, #132]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013b76:	4b20      	ldr	r3, [pc, #128]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013b7e:	4b1e      	ldr	r3, [pc, #120]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013b84:	4b1c      	ldr	r3, [pc, #112]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8013b8a:	4b1b      	ldr	r3, [pc, #108]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013b90:	4b19      	ldr	r3, [pc, #100]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b92:	2200      	movs	r2, #0
 8013b94:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013b96:	4b18      	ldr	r3, [pc, #96]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b98:	2200      	movs	r2, #0
 8013b9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8013b9c:	4816      	ldr	r0, [pc, #88]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013b9e:	f001 faaf 	bl	8015100 <HAL_DMA_Init>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d001      	beq.n	8013bac <HAL_UART_MspInit+0x258>
      Error_Handler();
 8013ba8:	f7ff fdf8 	bl	801379c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	4a12      	ldr	r2, [pc, #72]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013bb0:	639a      	str	r2, [r3, #56]	; 0x38
 8013bb2:	4a11      	ldr	r2, [pc, #68]	; (8013bf8 <HAL_UART_MspInit+0x2a4>)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2100      	movs	r1, #0
 8013bbc:	2026      	movs	r0, #38	; 0x26
 8013bbe:	f001 fa64 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8013bc2:	2026      	movs	r0, #38	; 0x26
 8013bc4:	f001 fa7d 	bl	80150c2 <HAL_NVIC_EnableIRQ>
}
 8013bc8:	bf00      	nop
 8013bca:	3730      	adds	r7, #48	; 0x30
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	40011000 	.word	0x40011000
 8013bd4:	40023800 	.word	0x40023800
 8013bd8:	40020000 	.word	0x40020000
 8013bdc:	20000bd0 	.word	0x20000bd0
 8013be0:	40026440 	.word	0x40026440
 8013be4:	20000c30 	.word	0x20000c30
 8013be8:	400264b8 	.word	0x400264b8
 8013bec:	40004400 	.word	0x40004400
 8013bf0:	20000c90 	.word	0x20000c90
 8013bf4:	400260a0 	.word	0x400260a0
 8013bf8:	20000cf0 	.word	0x20000cf0
 8013bfc:	40026088 	.word	0x40026088

08013c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013c00:	b480      	push	{r7}
 8013c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013c04:	e7fe      	b.n	8013c04 <NMI_Handler+0x4>

08013c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013c06:	b480      	push	{r7}
 8013c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013c0a:	e7fe      	b.n	8013c0a <HardFault_Handler+0x4>

08013c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013c10:	e7fe      	b.n	8013c10 <MemManage_Handler+0x4>

08013c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013c12:	b480      	push	{r7}
 8013c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013c16:	e7fe      	b.n	8013c16 <BusFault_Handler+0x4>

08013c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013c1c:	e7fe      	b.n	8013c1c <UsageFault_Handler+0x4>

08013c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013c1e:	b480      	push	{r7}
 8013c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013c22:	bf00      	nop
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013c30:	bf00      	nop
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr

08013c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013c3a:	b480      	push	{r7}
 8013c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013c3e:	bf00      	nop
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013c4c:	f000 f9d8 	bl	8014000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013c50:	bf00      	nop
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8013c58:	4802      	ldr	r0, [pc, #8]	; (8013c64 <DMA1_Stream5_IRQHandler+0x10>)
 8013c5a:	f001 fbe9 	bl	8015430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8013c5e:	bf00      	nop
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	20000cf0 	.word	0x20000cf0

08013c68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8013c6c:	4802      	ldr	r0, [pc, #8]	; (8013c78 <DMA1_Stream6_IRQHandler+0x10>)
 8013c6e:	f001 fbdf 	bl	8015430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8013c72:	bf00      	nop
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	20000c90 	.word	0x20000c90

08013c7c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8013c80:	4802      	ldr	r0, [pc, #8]	; (8013c8c <CAN1_TX_IRQHandler+0x10>)
 8013c82:	f000 fefc 	bl	8014a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8013c86:	bf00      	nop
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	2000091c 	.word	0x2000091c

08013c90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8013c94:	4802      	ldr	r0, [pc, #8]	; (8013ca0 <CAN1_RX0_IRQHandler+0x10>)
 8013c96:	f000 fef2 	bl	8014a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8013c9a:	bf00      	nop
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	2000091c 	.word	0x2000091c

08013ca4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8013ca8:	4802      	ldr	r0, [pc, #8]	; (8013cb4 <CAN1_RX1_IRQHandler+0x10>)
 8013caa:	f000 fee8 	bl	8014a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8013cae:	bf00      	nop
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	2000091c 	.word	0x2000091c

08013cb8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8013cbc:	4802      	ldr	r0, [pc, #8]	; (8013cc8 <CAN1_SCE_IRQHandler+0x10>)
 8013cbe:	f000 fede 	bl	8014a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8013cc2:	bf00      	nop
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	2000091c 	.word	0x2000091c

08013ccc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8013cd0:	4802      	ldr	r0, [pc, #8]	; (8013cdc <TIM4_IRQHandler+0x10>)
 8013cd2:	f003 fff6 	bl	8017cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8013cd6:	bf00      	nop
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20000980 	.word	0x20000980

08013ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013ce4:	4802      	ldr	r0, [pc, #8]	; (8013cf0 <USART1_IRQHandler+0x10>)
 8013ce6:	f004 fd39 	bl	801875c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013cea:	bf00      	nop
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	20000ae8 	.word	0x20000ae8

08013cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8013cf8:	4802      	ldr	r0, [pc, #8]	; (8013d04 <USART2_IRQHandler+0x10>)
 8013cfa:	f004 fd2f 	bl	801875c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8013cfe:	bf00      	nop
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	20000b5c 	.word	0x20000b5c

08013d08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8013d0c:	4802      	ldr	r0, [pc, #8]	; (8013d18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8013d0e:	f003 ffd8 	bl	8017cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8013d12:	bf00      	nop
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	20000a34 	.word	0x20000a34

08013d1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8013d20:	4802      	ldr	r0, [pc, #8]	; (8013d2c <DMA2_Stream2_IRQHandler+0x10>)
 8013d22:	f001 fb85 	bl	8015430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8013d26:	bf00      	nop
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	20000bd0 	.word	0x20000bd0

08013d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8013d34:	4802      	ldr	r0, [pc, #8]	; (8013d40 <OTG_FS_IRQHandler+0x10>)
 8013d36:	f002 f904 	bl	8015f42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8013d3a:	bf00      	nop
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	20002250 	.word	0x20002250

08013d44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8013d48:	4802      	ldr	r0, [pc, #8]	; (8013d54 <DMA2_Stream7_IRQHandler+0x10>)
 8013d4a:	f001 fb71 	bl	8015430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8013d4e:	bf00      	nop
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	20000c30 	.word	0x20000c30

08013d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	af00      	add	r7, sp, #0
  return 1;
 8013d5c:	2301      	movs	r3, #1
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <_kill>:

int _kill(int pid, int sig)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013d72:	f00b fae7 	bl	801f344 <__errno>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2216      	movs	r2, #22
 8013d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8013d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <_exit>:

void _exit (int status)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013d90:	f04f 31ff 	mov.w	r1, #4294967295
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f7ff ffe7 	bl	8013d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8013d9a:	e7fe      	b.n	8013d9a <_exit+0x12>

08013d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013da8:	2300      	movs	r3, #0
 8013daa:	617b      	str	r3, [r7, #20]
 8013dac:	e00a      	b.n	8013dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013dae:	f3af 8000 	nop.w
 8013db2:	4601      	mov	r1, r0
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	60ba      	str	r2, [r7, #8]
 8013dba:	b2ca      	uxtb	r2, r1
 8013dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	617b      	str	r3, [r7, #20]
 8013dc4:	697a      	ldr	r2, [r7, #20]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	dbf0      	blt.n	8013dae <_read+0x12>
  }

  return len;
 8013dcc:	687b      	ldr	r3, [r7, #4]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3718      	adds	r7, #24
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b086      	sub	sp, #24
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013de2:	2300      	movs	r3, #0
 8013de4:	617b      	str	r3, [r7, #20]
 8013de6:	e009      	b.n	8013dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	1c5a      	adds	r2, r3, #1
 8013dec:	60ba      	str	r2, [r7, #8]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	4618      	mov	r0, r3
 8013df2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	617b      	str	r3, [r7, #20]
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	dbf1      	blt.n	8013de8 <_write+0x12>
  }
  return len;
 8013e04:	687b      	ldr	r3, [r7, #4]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3718      	adds	r7, #24
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <_close>:

int _close(int file)
{
 8013e0e:	b480      	push	{r7}
 8013e10:	b083      	sub	sp, #12
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	370c      	adds	r7, #12
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr

08013e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013e26:	b480      	push	{r7}
 8013e28:	b083      	sub	sp, #12
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]
 8013e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013e36:	605a      	str	r2, [r3, #4]
  return 0;
 8013e38:	2300      	movs	r3, #0
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	370c      	adds	r7, #12
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <_isatty>:

int _isatty(int file)
{
 8013e46:	b480      	push	{r7}
 8013e48:	b083      	sub	sp, #12
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013e4e:	2301      	movs	r3, #1
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	370c      	adds	r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr

08013e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3714      	adds	r7, #20
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr
	...

08013e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013e80:	4a14      	ldr	r2, [pc, #80]	; (8013ed4 <_sbrk+0x5c>)
 8013e82:	4b15      	ldr	r3, [pc, #84]	; (8013ed8 <_sbrk+0x60>)
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013e8c:	4b13      	ldr	r3, [pc, #76]	; (8013edc <_sbrk+0x64>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d102      	bne.n	8013e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013e94:	4b11      	ldr	r3, [pc, #68]	; (8013edc <_sbrk+0x64>)
 8013e96:	4a12      	ldr	r2, [pc, #72]	; (8013ee0 <_sbrk+0x68>)
 8013e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013e9a:	4b10      	ldr	r3, [pc, #64]	; (8013edc <_sbrk+0x64>)
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	693a      	ldr	r2, [r7, #16]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d207      	bcs.n	8013eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013ea8:	f00b fa4c 	bl	801f344 <__errno>
 8013eac:	4603      	mov	r3, r0
 8013eae:	220c      	movs	r2, #12
 8013eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013eb6:	e009      	b.n	8013ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013eb8:	4b08      	ldr	r3, [pc, #32]	; (8013edc <_sbrk+0x64>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013ebe:	4b07      	ldr	r3, [pc, #28]	; (8013edc <_sbrk+0x64>)
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	4a05      	ldr	r2, [pc, #20]	; (8013edc <_sbrk+0x64>)
 8013ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013eca:	68fb      	ldr	r3, [r7, #12]
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	20020000 	.word	0x20020000
 8013ed8:	00000800 	.word	0x00000800
 8013edc:	20000d68 	.word	0x20000d68
 8013ee0:	20002ac8 	.word	0x20002ac8

08013ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013ee8:	4b06      	ldr	r3, [pc, #24]	; (8013f04 <SystemInit+0x20>)
 8013eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013eee:	4a05      	ldr	r2, [pc, #20]	; (8013f04 <SystemInit+0x20>)
 8013ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013ef8:	bf00      	nop
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop
 8013f04:	e000ed00 	.word	0xe000ed00

08013f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013f0c:	480d      	ldr	r0, [pc, #52]	; (8013f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013f0e:	490e      	ldr	r1, [pc, #56]	; (8013f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013f10:	4a0e      	ldr	r2, [pc, #56]	; (8013f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013f14:	e002      	b.n	8013f1c <LoopCopyDataInit>

08013f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013f1a:	3304      	adds	r3, #4

08013f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013f20:	d3f9      	bcc.n	8013f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013f22:	4a0b      	ldr	r2, [pc, #44]	; (8013f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013f24:	4c0b      	ldr	r4, [pc, #44]	; (8013f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8013f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013f28:	e001      	b.n	8013f2e <LoopFillZerobss>

08013f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013f2c:	3204      	adds	r2, #4

08013f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013f30:	d3fb      	bcc.n	8013f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8013f32:	f7ff ffd7 	bl	8013ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013f36:	f00b fa0b 	bl	801f350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013f3a:	f7ff f8b3 	bl	80130a4 <main>
  bx  lr    
 8013f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8013f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013f48:	200008b4 	.word	0x200008b4
  ldr r2, =_sidata
 8013f4c:	08023ffc 	.word	0x08023ffc
  ldr r2, =_sbss
 8013f50:	200008b4 	.word	0x200008b4
  ldr r4, =_ebss
 8013f54:	20002ac8 	.word	0x20002ac8

08013f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013f58:	e7fe      	b.n	8013f58 <ADC_IRQHandler>
	...

08013f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013f60:	4b0e      	ldr	r3, [pc, #56]	; (8013f9c <HAL_Init+0x40>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4a0d      	ldr	r2, [pc, #52]	; (8013f9c <HAL_Init+0x40>)
 8013f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013f6c:	4b0b      	ldr	r3, [pc, #44]	; (8013f9c <HAL_Init+0x40>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a0a      	ldr	r2, [pc, #40]	; (8013f9c <HAL_Init+0x40>)
 8013f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013f78:	4b08      	ldr	r3, [pc, #32]	; (8013f9c <HAL_Init+0x40>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4a07      	ldr	r2, [pc, #28]	; (8013f9c <HAL_Init+0x40>)
 8013f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013f84:	2003      	movs	r0, #3
 8013f86:	f001 f875 	bl	8015074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	f000 f808 	bl	8013fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8013f90:	f7ff fc0a 	bl	80137a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013f94:	2300      	movs	r3, #0
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	40023c00 	.word	0x40023c00

08013fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013fa8:	4b12      	ldr	r3, [pc, #72]	; (8013ff4 <HAL_InitTick+0x54>)
 8013faa:	681a      	ldr	r2, [r3, #0]
 8013fac:	4b12      	ldr	r3, [pc, #72]	; (8013ff8 <HAL_InitTick+0x58>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f001 f891 	bl	80150e6 <HAL_SYSTICK_Config>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e00e      	b.n	8013fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2b0f      	cmp	r3, #15
 8013fd2:	d80a      	bhi.n	8013fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	6879      	ldr	r1, [r7, #4]
 8013fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fdc:	f001 f855 	bl	801508a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013fe0:	4a06      	ldr	r2, [pc, #24]	; (8013ffc <HAL_InitTick+0x5c>)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	e000      	b.n	8013fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8013fea:	2301      	movs	r3, #1
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	200005f0 	.word	0x200005f0
 8013ff8:	200005f8 	.word	0x200005f8
 8013ffc:	200005f4 	.word	0x200005f4

08014000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014000:	b480      	push	{r7}
 8014002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014004:	4b06      	ldr	r3, [pc, #24]	; (8014020 <HAL_IncTick+0x20>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	461a      	mov	r2, r3
 801400a:	4b06      	ldr	r3, [pc, #24]	; (8014024 <HAL_IncTick+0x24>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	4413      	add	r3, r2
 8014010:	4a04      	ldr	r2, [pc, #16]	; (8014024 <HAL_IncTick+0x24>)
 8014012:	6013      	str	r3, [r2, #0]
}
 8014014:	bf00      	nop
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	200005f8 	.word	0x200005f8
 8014024:	20000d6c 	.word	0x20000d6c

08014028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014028:	b480      	push	{r7}
 801402a:	af00      	add	r7, sp, #0
  return uwTick;
 801402c:	4b03      	ldr	r3, [pc, #12]	; (801403c <HAL_GetTick+0x14>)
 801402e:	681b      	ldr	r3, [r3, #0]
}
 8014030:	4618      	mov	r0, r3
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr
 801403a:	bf00      	nop
 801403c:	20000d6c 	.word	0x20000d6c

08014040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014048:	f7ff ffee 	bl	8014028 <HAL_GetTick>
 801404c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014058:	d005      	beq.n	8014066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801405a:	4b0a      	ldr	r3, [pc, #40]	; (8014084 <HAL_Delay+0x44>)
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	461a      	mov	r2, r3
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	4413      	add	r3, r2
 8014064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014066:	bf00      	nop
 8014068:	f7ff ffde 	bl	8014028 <HAL_GetTick>
 801406c:	4602      	mov	r2, r0
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	1ad3      	subs	r3, r2, r3
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	429a      	cmp	r2, r3
 8014076:	d8f7      	bhi.n	8014068 <HAL_Delay+0x28>
  {
  }
}
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	3710      	adds	r7, #16
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	200005f8 	.word	0x200005f8

08014088 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d101      	bne.n	801409a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8014096:	2301      	movs	r3, #1
 8014098:	e11c      	b.n	80142d4 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d131      	bne.n	801410a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4a8c      	ldr	r2, [pc, #560]	; (80142dc <HAL_CAN_Init+0x254>)
 80140aa:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4a8c      	ldr	r2, [pc, #560]	; (80142e0 <HAL_CAN_Init+0x258>)
 80140b0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4a8b      	ldr	r2, [pc, #556]	; (80142e4 <HAL_CAN_Init+0x25c>)
 80140b6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	4a8b      	ldr	r2, [pc, #556]	; (80142e8 <HAL_CAN_Init+0x260>)
 80140bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	4a8a      	ldr	r2, [pc, #552]	; (80142ec <HAL_CAN_Init+0x264>)
 80140c2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	4a8a      	ldr	r2, [pc, #552]	; (80142f0 <HAL_CAN_Init+0x268>)
 80140c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	4a89      	ldr	r2, [pc, #548]	; (80142f4 <HAL_CAN_Init+0x26c>)
 80140ce:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	4a89      	ldr	r2, [pc, #548]	; (80142f8 <HAL_CAN_Init+0x270>)
 80140d4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4a88      	ldr	r2, [pc, #544]	; (80142fc <HAL_CAN_Init+0x274>)
 80140da:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	4a88      	ldr	r2, [pc, #544]	; (8014300 <HAL_CAN_Init+0x278>)
 80140e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4a87      	ldr	r2, [pc, #540]	; (8014304 <HAL_CAN_Init+0x27c>)
 80140e6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	4a87      	ldr	r2, [pc, #540]	; (8014308 <HAL_CAN_Init+0x280>)
 80140ec:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4a86      	ldr	r2, [pc, #536]	; (801430c <HAL_CAN_Init+0x284>)
 80140f2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d102      	bne.n	8014102 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4a84      	ldr	r2, [pc, #528]	; (8014310 <HAL_CAN_Init+0x288>)
 8014100:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f042 0201 	orr.w	r2, r2, #1
 8014118:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801411a:	f7ff ff85 	bl	8014028 <HAL_GetTick>
 801411e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014120:	e012      	b.n	8014148 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014122:	f7ff ff81 	bl	8014028 <HAL_GetTick>
 8014126:	4602      	mov	r2, r0
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	2b0a      	cmp	r3, #10
 801412e:	d90b      	bls.n	8014148 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014134:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2205      	movs	r2, #5
 8014140:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8014144:	2301      	movs	r3, #1
 8014146:	e0c5      	b.n	80142d4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0e5      	beq.n	8014122 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f022 0202 	bic.w	r2, r2, #2
 8014164:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014166:	f7ff ff5f 	bl	8014028 <HAL_GetTick>
 801416a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801416c:	e012      	b.n	8014194 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801416e:	f7ff ff5b 	bl	8014028 <HAL_GetTick>
 8014172:	4602      	mov	r2, r0
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	1ad3      	subs	r3, r2, r3
 8014178:	2b0a      	cmp	r3, #10
 801417a:	d90b      	bls.n	8014194 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014180:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2205      	movs	r2, #5
 801418c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8014190:	2301      	movs	r3, #1
 8014192:	e09f      	b.n	80142d4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	f003 0302 	and.w	r3, r3, #2
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d1e5      	bne.n	801416e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	7e1b      	ldrb	r3, [r3, #24]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d108      	bne.n	80141bc <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	e007      	b.n	80141cc <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80141ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7e5b      	ldrb	r3, [r3, #25]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d108      	bne.n	80141e6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80141e2:	601a      	str	r2, [r3, #0]
 80141e4:	e007      	b.n	80141f6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80141f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	7e9b      	ldrb	r3, [r3, #26]
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d108      	bne.n	8014210 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	f042 0220 	orr.w	r2, r2, #32
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	e007      	b.n	8014220 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f022 0220 	bic.w	r2, r2, #32
 801421e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	7edb      	ldrb	r3, [r3, #27]
 8014224:	2b01      	cmp	r3, #1
 8014226:	d108      	bne.n	801423a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f022 0210 	bic.w	r2, r2, #16
 8014236:	601a      	str	r2, [r3, #0]
 8014238:	e007      	b.n	801424a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f042 0210 	orr.w	r2, r2, #16
 8014248:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	7f1b      	ldrb	r3, [r3, #28]
 801424e:	2b01      	cmp	r3, #1
 8014250:	d108      	bne.n	8014264 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	f042 0208 	orr.w	r2, r2, #8
 8014260:	601a      	str	r2, [r3, #0]
 8014262:	e007      	b.n	8014274 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	f022 0208 	bic.w	r2, r2, #8
 8014272:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7f5b      	ldrb	r3, [r3, #29]
 8014278:	2b01      	cmp	r3, #1
 801427a:	d108      	bne.n	801428e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f042 0204 	orr.w	r2, r2, #4
 801428a:	601a      	str	r2, [r3, #0]
 801428c:	e007      	b.n	801429e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f022 0204 	bic.w	r2, r2, #4
 801429c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	689a      	ldr	r2, [r3, #8]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	68db      	ldr	r3, [r3, #12]
 80142a6:	431a      	orrs	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	691b      	ldr	r3, [r3, #16]
 80142ac:	431a      	orrs	r2, r3
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	695b      	ldr	r3, [r3, #20]
 80142b2:	ea42 0103 	orr.w	r1, r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	1e5a      	subs	r2, r3, #1
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	430a      	orrs	r2, r1
 80142c2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2200      	movs	r2, #0
 80142c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2201      	movs	r2, #1
 80142ce:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80142d2:	2300      	movs	r3, #0
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3710      	adds	r7, #16
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	08012d75 	.word	0x08012d75
 80142e0:	08014e45 	.word	0x08014e45
 80142e4:	08012d8f 	.word	0x08012d8f
 80142e8:	08014e59 	.word	0x08014e59
 80142ec:	08012e4d 	.word	0x08012e4d
 80142f0:	08012e6d 	.word	0x08012e6d
 80142f4:	08012e8d 	.word	0x08012e8d
 80142f8:	08014e09 	.word	0x08014e09
 80142fc:	08014e1d 	.word	0x08014e1d
 8014300:	08014e31 	.word	0x08014e31
 8014304:	08014e6d 	.word	0x08014e6d
 8014308:	08014e81 	.word	0x08014e81
 801430c:	08014e95 	.word	0x08014e95
 8014310:	080137f9 	.word	0x080137f9

08014314 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8014314:	b480      	push	{r7}
 8014316:	b087      	sub	sp, #28
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f893 3020 	ldrb.w	r3, [r3, #32]
 801432a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 801432c:	7cfb      	ldrb	r3, [r7, #19]
 801432e:	2b01      	cmp	r3, #1
 8014330:	d003      	beq.n	801433a <HAL_CAN_ConfigFilter+0x26>
 8014332:	7cfb      	ldrb	r3, [r7, #19]
 8014334:	2b02      	cmp	r3, #2
 8014336:	f040 80be 	bne.w	80144b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 801433a:	4b65      	ldr	r3, [pc, #404]	; (80144d0 <HAL_CAN_ConfigFilter+0x1bc>)
 801433c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014344:	f043 0201 	orr.w	r2, r3, #1
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014354:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014368:	021b      	lsls	r3, r3, #8
 801436a:	431a      	orrs	r2, r3
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	695b      	ldr	r3, [r3, #20]
 8014376:	f003 031f 	and.w	r3, r3, #31
 801437a:	2201      	movs	r2, #1
 801437c:	fa02 f303 	lsl.w	r3, r2, r3
 8014380:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	43db      	mvns	r3, r3
 801438c:	401a      	ands	r2, r3
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d123      	bne.n	80143e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	43db      	mvns	r3, r3
 80143a6:	401a      	ands	r2, r3
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80143be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	3248      	adds	r2, #72	; 0x48
 80143c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	689b      	ldr	r3, [r3, #8]
 80143cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80143d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80143da:	6979      	ldr	r1, [r7, #20]
 80143dc:	3348      	adds	r3, #72	; 0x48
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	440b      	add	r3, r1
 80143e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	69db      	ldr	r3, [r3, #28]
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d122      	bne.n	8014432 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	431a      	orrs	r2, r3
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8014408:	683a      	ldr	r2, [r7, #0]
 801440a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801440c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	3248      	adds	r2, #72	; 0x48
 8014412:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	689b      	ldr	r3, [r3, #8]
 801441a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8014426:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8014428:	6979      	ldr	r1, [r7, #20]
 801442a:	3348      	adds	r3, #72	; 0x48
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	440b      	add	r3, r1
 8014430:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	699b      	ldr	r3, [r3, #24]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d109      	bne.n	801444e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	43db      	mvns	r3, r3
 8014444:	401a      	ands	r2, r3
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801444c:	e007      	b.n	801445e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	431a      	orrs	r2, r3
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	691b      	ldr	r3, [r3, #16]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d109      	bne.n	801447a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	43db      	mvns	r3, r3
 8014470:	401a      	ands	r2, r3
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8014478:	e007      	b.n	801448a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	431a      	orrs	r2, r3
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	6a1b      	ldr	r3, [r3, #32]
 801448e:	2b01      	cmp	r3, #1
 8014490:	d107      	bne.n	80144a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	431a      	orrs	r2, r3
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80144a8:	f023 0201 	bic.w	r2, r3, #1
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80144b2:	2300      	movs	r3, #0
 80144b4:	e006      	b.n	80144c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80144c2:	2301      	movs	r3, #1
  }
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	371c      	adds	r7, #28
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr
 80144d0:	40006400 	.word	0x40006400

080144d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d12e      	bne.n	8014546 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2202      	movs	r2, #2
 80144ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f022 0201 	bic.w	r2, r2, #1
 80144fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014500:	f7ff fd92 	bl	8014028 <HAL_GetTick>
 8014504:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8014506:	e012      	b.n	801452e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014508:	f7ff fd8e 	bl	8014028 <HAL_GetTick>
 801450c:	4602      	mov	r2, r0
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	1ad3      	subs	r3, r2, r3
 8014512:	2b0a      	cmp	r3, #10
 8014514:	d90b      	bls.n	801452e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801451a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2205      	movs	r2, #5
 8014526:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801452a:	2301      	movs	r3, #1
 801452c:	e012      	b.n	8014554 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	f003 0301 	and.w	r3, r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	d1e5      	bne.n	8014508 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8014542:	2300      	movs	r3, #0
 8014544:	e006      	b.n	8014554 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801454a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014552:	2301      	movs	r3, #1
  }
}
 8014554:	4618      	mov	r0, r3
 8014556:	3710      	adds	r7, #16
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f893 3020 	ldrb.w	r3, [r3, #32]
 801456a:	b2db      	uxtb	r3, r3
 801456c:	2b02      	cmp	r3, #2
 801456e:	d133      	bne.n	80145d8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f042 0201 	orr.w	r2, r2, #1
 801457e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014580:	f7ff fd52 	bl	8014028 <HAL_GetTick>
 8014584:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014586:	e012      	b.n	80145ae <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014588:	f7ff fd4e 	bl	8014028 <HAL_GetTick>
 801458c:	4602      	mov	r2, r0
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	2b0a      	cmp	r3, #10
 8014594:	d90b      	bls.n	80145ae <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801459a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2205      	movs	r2, #5
 80145a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80145aa:	2301      	movs	r3, #1
 80145ac:	e01b      	b.n	80145e6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	f003 0301 	and.w	r3, r3, #1
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d0e5      	beq.n	8014588 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	681a      	ldr	r2, [r3, #0]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f022 0202 	bic.w	r2, r2, #2
 80145ca:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2201      	movs	r2, #1
 80145d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e006      	b.n	80145e6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80145e4:	2301      	movs	r3, #1
  }
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80145ee:	b480      	push	{r7}
 80145f0:	b089      	sub	sp, #36	; 0x24
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	60f8      	str	r0, [r7, #12]
 80145f6:	60b9      	str	r1, [r7, #8]
 80145f8:	607a      	str	r2, [r7, #4]
 80145fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014602:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 801460c:	7ffb      	ldrb	r3, [r7, #31]
 801460e:	2b01      	cmp	r3, #1
 8014610:	d003      	beq.n	801461a <HAL_CAN_AddTxMessage+0x2c>
 8014612:	7ffb      	ldrb	r3, [r7, #31]
 8014614:	2b02      	cmp	r3, #2
 8014616:	f040 80b8 	bne.w	801478a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10a      	bne.n	801463a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801462a:	2b00      	cmp	r3, #0
 801462c:	d105      	bne.n	801463a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014634:	2b00      	cmp	r3, #0
 8014636:	f000 80a0 	beq.w	801477a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	0e1b      	lsrs	r3, r3, #24
 801463e:	f003 0303 	and.w	r3, r3, #3
 8014642:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	2b02      	cmp	r3, #2
 8014648:	d907      	bls.n	801465a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014656:	2301      	movs	r3, #1
 8014658:	e09e      	b.n	8014798 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801465a:	2201      	movs	r2, #1
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	409a      	lsls	r2, r3
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d10d      	bne.n	8014688 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8014676:	68f9      	ldr	r1, [r7, #12]
 8014678:	6809      	ldr	r1, [r1, #0]
 801467a:	431a      	orrs	r2, r3
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	3318      	adds	r3, #24
 8014680:	011b      	lsls	r3, r3, #4
 8014682:	440b      	add	r3, r1
 8014684:	601a      	str	r2, [r3, #0]
 8014686:	e00f      	b.n	80146a8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	685b      	ldr	r3, [r3, #4]
 801468c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014692:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014698:	68f9      	ldr	r1, [r7, #12]
 801469a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801469c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	3318      	adds	r3, #24
 80146a2:	011b      	lsls	r3, r3, #4
 80146a4:	440b      	add	r3, r1
 80146a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	6819      	ldr	r1, [r3, #0]
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	691a      	ldr	r2, [r3, #16]
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	3318      	adds	r3, #24
 80146b4:	011b      	lsls	r3, r3, #4
 80146b6:	440b      	add	r3, r1
 80146b8:	3304      	adds	r3, #4
 80146ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	7d1b      	ldrb	r3, [r3, #20]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d111      	bne.n	80146e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	3318      	adds	r3, #24
 80146cc:	011b      	lsls	r3, r3, #4
 80146ce:	4413      	add	r3, r2
 80146d0:	3304      	adds	r3, #4
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	6811      	ldr	r1, [r2, #0]
 80146d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	3318      	adds	r3, #24
 80146e0:	011b      	lsls	r3, r3, #4
 80146e2:	440b      	add	r3, r1
 80146e4:	3304      	adds	r3, #4
 80146e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3307      	adds	r3, #7
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	061a      	lsls	r2, r3, #24
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	3306      	adds	r3, #6
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	041b      	lsls	r3, r3, #16
 80146f8:	431a      	orrs	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	3305      	adds	r3, #5
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	021b      	lsls	r3, r3, #8
 8014702:	4313      	orrs	r3, r2
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	3204      	adds	r2, #4
 8014708:	7812      	ldrb	r2, [r2, #0]
 801470a:	4610      	mov	r0, r2
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	6811      	ldr	r1, [r2, #0]
 8014710:	ea43 0200 	orr.w	r2, r3, r0
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	011b      	lsls	r3, r3, #4
 8014718:	440b      	add	r3, r1
 801471a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801471e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	3303      	adds	r3, #3
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	061a      	lsls	r2, r3, #24
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	3302      	adds	r3, #2
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	041b      	lsls	r3, r3, #16
 8014730:	431a      	orrs	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	3301      	adds	r3, #1
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	021b      	lsls	r3, r3, #8
 801473a:	4313      	orrs	r3, r2
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	7812      	ldrb	r2, [r2, #0]
 8014740:	4610      	mov	r0, r2
 8014742:	68fa      	ldr	r2, [r7, #12]
 8014744:	6811      	ldr	r1, [r2, #0]
 8014746:	ea43 0200 	orr.w	r2, r3, r0
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	011b      	lsls	r3, r3, #4
 801474e:	440b      	add	r3, r1
 8014750:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8014754:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	3318      	adds	r3, #24
 801475e:	011b      	lsls	r3, r3, #4
 8014760:	4413      	add	r3, r2
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	6811      	ldr	r1, [r2, #0]
 8014768:	f043 0201 	orr.w	r2, r3, #1
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	3318      	adds	r3, #24
 8014770:	011b      	lsls	r3, r3, #4
 8014772:	440b      	add	r3, r1
 8014774:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8014776:	2300      	movs	r3, #0
 8014778:	e00e      	b.n	8014798 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801477e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8014786:	2301      	movs	r3, #1
 8014788:	e006      	b.n	8014798 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801478e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014796:	2301      	movs	r3, #1
  }
}
 8014798:	4618      	mov	r0, r3
 801479a:	3724      	adds	r7, #36	; 0x24
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr

080147a4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b085      	sub	sp, #20
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80147ac:	2300      	movs	r3, #0
 80147ae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80147b6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80147b8:	7afb      	ldrb	r3, [r7, #11]
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d002      	beq.n	80147c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	d11d      	bne.n	8014800 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	689b      	ldr	r3, [r3, #8]
 80147ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d002      	beq.n	80147d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	3301      	adds	r3, #1
 80147d6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	689b      	ldr	r3, [r3, #8]
 80147de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d002      	beq.n	80147ec <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	3301      	adds	r3, #1
 80147ea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	689b      	ldr	r3, [r3, #8]
 80147f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d002      	beq.n	8014800 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	3301      	adds	r3, #1
 80147fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8014800:	68fb      	ldr	r3, [r7, #12]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3714      	adds	r7, #20
 8014806:	46bd      	mov	sp, r7
 8014808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480c:	4770      	bx	lr

0801480e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801480e:	b480      	push	{r7}
 8014810:	b087      	sub	sp, #28
 8014812:	af00      	add	r7, sp, #0
 8014814:	60f8      	str	r0, [r7, #12]
 8014816:	60b9      	str	r1, [r7, #8]
 8014818:	607a      	str	r2, [r7, #4]
 801481a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014822:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8014824:	7dfb      	ldrb	r3, [r7, #23]
 8014826:	2b01      	cmp	r3, #1
 8014828:	d003      	beq.n	8014832 <HAL_CAN_GetRxMessage+0x24>
 801482a:	7dfb      	ldrb	r3, [r7, #23]
 801482c:	2b02      	cmp	r3, #2
 801482e:	f040 80f3 	bne.w	8014a18 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d10e      	bne.n	8014856 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	f003 0303 	and.w	r3, r3, #3
 8014842:	2b00      	cmp	r3, #0
 8014844:	d116      	bne.n	8014874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014852:	2301      	movs	r3, #1
 8014854:	e0e7      	b.n	8014a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	691b      	ldr	r3, [r3, #16]
 801485c:	f003 0303 	and.w	r3, r3, #3
 8014860:	2b00      	cmp	r3, #0
 8014862:	d107      	bne.n	8014874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014870:	2301      	movs	r3, #1
 8014872:	e0d8      	b.n	8014a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	331b      	adds	r3, #27
 801487c:	011b      	lsls	r3, r3, #4
 801487e:	4413      	add	r3, r2
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f003 0204 	and.w	r2, r3, #4
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d10c      	bne.n	80148ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	331b      	adds	r3, #27
 801489a:	011b      	lsls	r3, r3, #4
 801489c:	4413      	add	r3, r2
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	0d5b      	lsrs	r3, r3, #21
 80148a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	e00b      	b.n	80148c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	331b      	adds	r3, #27
 80148b4:	011b      	lsls	r3, r3, #4
 80148b6:	4413      	add	r3, r2
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	08db      	lsrs	r3, r3, #3
 80148bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	331b      	adds	r3, #27
 80148cc:	011b      	lsls	r3, r3, #4
 80148ce:	4413      	add	r3, r2
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	f003 0202 	and.w	r2, r3, #2
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	331b      	adds	r3, #27
 80148e2:	011b      	lsls	r3, r3, #4
 80148e4:	4413      	add	r3, r2
 80148e6:	3304      	adds	r3, #4
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f003 020f 	and.w	r2, r3, #15
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	331b      	adds	r3, #27
 80148fa:	011b      	lsls	r3, r3, #4
 80148fc:	4413      	add	r3, r2
 80148fe:	3304      	adds	r3, #4
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	0a1b      	lsrs	r3, r3, #8
 8014904:	b2da      	uxtb	r2, r3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	681a      	ldr	r2, [r3, #0]
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	331b      	adds	r3, #27
 8014912:	011b      	lsls	r3, r3, #4
 8014914:	4413      	add	r3, r2
 8014916:	3304      	adds	r3, #4
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	0c1b      	lsrs	r3, r3, #16
 801491c:	b29a      	uxth	r2, r3
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	011b      	lsls	r3, r3, #4
 801492a:	4413      	add	r3, r2
 801492c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	b2da      	uxtb	r2, r3
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681a      	ldr	r2, [r3, #0]
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	011b      	lsls	r3, r3, #4
 8014940:	4413      	add	r3, r2
 8014942:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	0a1a      	lsrs	r2, r3, #8
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	3301      	adds	r3, #1
 801494e:	b2d2      	uxtb	r2, r2
 8014950:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	011b      	lsls	r3, r3, #4
 801495a:	4413      	add	r3, r2
 801495c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	0c1a      	lsrs	r2, r3, #16
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	3302      	adds	r3, #2
 8014968:	b2d2      	uxtb	r2, r2
 801496a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	011b      	lsls	r3, r3, #4
 8014974:	4413      	add	r3, r2
 8014976:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	0e1a      	lsrs	r2, r3, #24
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	3303      	adds	r3, #3
 8014982:	b2d2      	uxtb	r2, r2
 8014984:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	011b      	lsls	r3, r3, #4
 801498e:	4413      	add	r3, r2
 8014990:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	3304      	adds	r3, #4
 801499a:	b2d2      	uxtb	r2, r2
 801499c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	011b      	lsls	r3, r3, #4
 80149a6:	4413      	add	r3, r2
 80149a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	0a1a      	lsrs	r2, r3, #8
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	3305      	adds	r3, #5
 80149b4:	b2d2      	uxtb	r2, r2
 80149b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	011b      	lsls	r3, r3, #4
 80149c0:	4413      	add	r3, r2
 80149c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	0c1a      	lsrs	r2, r3, #16
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	3306      	adds	r3, #6
 80149ce:	b2d2      	uxtb	r2, r2
 80149d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	011b      	lsls	r3, r3, #4
 80149da:	4413      	add	r3, r2
 80149dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	0e1a      	lsrs	r2, r3, #24
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	3307      	adds	r3, #7
 80149e8:	b2d2      	uxtb	r2, r2
 80149ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d108      	bne.n	8014a04 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	68da      	ldr	r2, [r3, #12]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f042 0220 	orr.w	r2, r2, #32
 8014a00:	60da      	str	r2, [r3, #12]
 8014a02:	e007      	b.n	8014a14 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	691a      	ldr	r2, [r3, #16]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	f042 0220 	orr.w	r2, r2, #32
 8014a12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	e006      	b.n	8014a26 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014a24:	2301      	movs	r3, #1
  }
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	371c      	adds	r7, #28
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr

08014a32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8014a32:	b480      	push	{r7}
 8014a34:	b085      	sub	sp, #20
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
 8014a3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d002      	beq.n	8014a50 <HAL_CAN_ActivateNotification+0x1e>
 8014a4a:	7bfb      	ldrb	r3, [r7, #15]
 8014a4c:	2b02      	cmp	r3, #2
 8014a4e:	d109      	bne.n	8014a64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	6959      	ldr	r1, [r3, #20]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	430a      	orrs	r2, r1
 8014a5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	e006      	b.n	8014a72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014a70:	2301      	movs	r3, #1
  }
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3714      	adds	r7, #20
 8014a76:	46bd      	mov	sp, r7
 8014a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7c:	4770      	bx	lr

08014a7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b08a      	sub	sp, #40	; 0x28
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8014a86:	2300      	movs	r3, #0
 8014a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	695b      	ldr	r3, [r3, #20]
 8014a90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);   /* CAN transmit status register,  Address offset: 0x08 */
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	691b      	ldr	r3, [r3, #16]
 8014ab0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	699b      	ldr	r3, [r3, #24]
 8014ab8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f000 8083 	beq.w	8014bcc <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)  /*CAN transmit status register  | Request Completed Mailbox0 */
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	f003 0301 	and.w	r3, r3, #1
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d025      	beq.n	8014b1c <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)   /*CAN transmit status register  |  Transmission OK of Mailbox0 */ 
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	f003 0302 	and.w	r3, r3, #2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d004      	beq.n	8014aec <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	4798      	blx	r3
 8014aea:	e017      	b.n	8014b1c <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)       /*CAN transmit status register  |   Arbitration Lost for Mailbox0 */
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	f003 0304 	and.w	r3, r3, #4
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d004      	beq.n	8014b00 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8014af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014afc:	627b      	str	r3, [r7, #36]	; 0x24
 8014afe:	e00d      	b.n	8014b1c <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)   /*CAN transmit status register  |  Transmission Error of Mailbox0 */
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	f003 0308 	and.w	r3, r3, #8
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d004      	beq.n	8014b14 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014b10:	627b      	str	r3, [r7, #36]	; 0x24
 8014b12:	e003      	b.n	8014b1c <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d026      	beq.n	8014b74 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d004      	beq.n	8014b44 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	4798      	blx	r3
 8014b42:	e017      	b.n	8014b74 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d004      	beq.n	8014b58 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8014b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014b54:	627b      	str	r3, [r7, #36]	; 0x24
 8014b56:	e00d      	b.n	8014b74 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d004      	beq.n	8014b6c <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8014b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014b68:	627b      	str	r3, [r7, #36]	; 0x24
 8014b6a:	e003      	b.n	8014b74 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8014b74:	69bb      	ldr	r3, [r7, #24]
 8014b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d026      	beq.n	8014bcc <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d004      	beq.n	8014b9c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	4798      	blx	r3
 8014b9a:	e017      	b.n	8014bcc <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d004      	beq.n	8014bb0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8014ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014bac:	627b      	str	r3, [r7, #36]	; 0x24
 8014bae:	e00d      	b.n	8014bcc <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d004      	beq.n	8014bc4 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8014bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8014bc2:	e003      	b.n	8014bcc <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8014bcc:	6a3b      	ldr	r3, [r7, #32]
 8014bce:	f003 0308 	and.w	r3, r3, #8
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d00c      	beq.n	8014bf0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	f003 0310 	and.w	r3, r3, #16
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d007      	beq.n	8014bf0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8014be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014be6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2210      	movs	r2, #16
 8014bee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8014bf0:	6a3b      	ldr	r3, [r7, #32]
 8014bf2:	f003 0304 	and.w	r3, r3, #4
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d00c      	beq.n	8014c14 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	f003 0308 	and.w	r3, r3, #8
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d007      	beq.n	8014c14 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2208      	movs	r2, #8
 8014c0a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8014c14:	6a3b      	ldr	r3, [r7, #32]
 8014c16:	f003 0302 	and.w	r3, r3, #2
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00a      	beq.n	8014c34 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	f003 0303 	and.w	r3, r3, #3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d003      	beq.n	8014c34 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d00c      	beq.n	8014c58 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	f003 0310 	and.w	r3, r3, #16
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d007      	beq.n	8014c58 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8014c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2210      	movs	r2, #16
 8014c56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8014c58:	6a3b      	ldr	r3, [r7, #32]
 8014c5a:	f003 0320 	and.w	r3, r3, #32
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d00c      	beq.n	8014c7c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	f003 0308 	and.w	r3, r3, #8
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d007      	beq.n	8014c7c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	2208      	movs	r2, #8
 8014c72:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	f003 0310 	and.w	r3, r3, #16
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00a      	beq.n	8014c9c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	691b      	ldr	r3, [r3, #16]
 8014c8c:	f003 0303 	and.w	r3, r3, #3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d003      	beq.n	8014c9c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8014c9c:	6a3b      	ldr	r3, [r7, #32]
 8014c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00c      	beq.n	8014cc0 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	f003 0310 	and.w	r3, r3, #16
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d007      	beq.n	8014cc0 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2210      	movs	r2, #16
 8014cb6:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8014cc0:	6a3b      	ldr	r3, [r7, #32]
 8014cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d00c      	beq.n	8014ce4 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	f003 0308 	and.w	r3, r3, #8
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d007      	beq.n	8014ce4 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2208      	movs	r2, #8
 8014cda:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8014ce4:	6a3b      	ldr	r3, [r7, #32]
 8014ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d07b      	beq.n	8014de6 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	f003 0304 	and.w	r3, r3, #4
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d072      	beq.n	8014dde <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8014cf8:	6a3b      	ldr	r3, [r7, #32]
 8014cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d008      	beq.n	8014d14 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d003      	beq.n	8014d14 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0e:	f043 0301 	orr.w	r3, r3, #1
 8014d12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8014d14:	6a3b      	ldr	r3, [r7, #32]
 8014d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d008      	beq.n	8014d30 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d003      	beq.n	8014d30 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8014d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d2a:	f043 0302 	orr.w	r3, r3, #2
 8014d2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8014d30:	6a3b      	ldr	r3, [r7, #32]
 8014d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d008      	beq.n	8014d4c <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d003      	beq.n	8014d4c <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8014d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d46:	f043 0304 	orr.w	r3, r3, #4
 8014d4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8014d4c:	6a3b      	ldr	r3, [r7, #32]
 8014d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d043      	beq.n	8014dde <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d03e      	beq.n	8014dde <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014d66:	2b60      	cmp	r3, #96	; 0x60
 8014d68:	d02b      	beq.n	8014dc2 <HAL_CAN_IRQHandler+0x344>
 8014d6a:	2b60      	cmp	r3, #96	; 0x60
 8014d6c:	d82e      	bhi.n	8014dcc <HAL_CAN_IRQHandler+0x34e>
 8014d6e:	2b50      	cmp	r3, #80	; 0x50
 8014d70:	d022      	beq.n	8014db8 <HAL_CAN_IRQHandler+0x33a>
 8014d72:	2b50      	cmp	r3, #80	; 0x50
 8014d74:	d82a      	bhi.n	8014dcc <HAL_CAN_IRQHandler+0x34e>
 8014d76:	2b40      	cmp	r3, #64	; 0x40
 8014d78:	d019      	beq.n	8014dae <HAL_CAN_IRQHandler+0x330>
 8014d7a:	2b40      	cmp	r3, #64	; 0x40
 8014d7c:	d826      	bhi.n	8014dcc <HAL_CAN_IRQHandler+0x34e>
 8014d7e:	2b30      	cmp	r3, #48	; 0x30
 8014d80:	d010      	beq.n	8014da4 <HAL_CAN_IRQHandler+0x326>
 8014d82:	2b30      	cmp	r3, #48	; 0x30
 8014d84:	d822      	bhi.n	8014dcc <HAL_CAN_IRQHandler+0x34e>
 8014d86:	2b10      	cmp	r3, #16
 8014d88:	d002      	beq.n	8014d90 <HAL_CAN_IRQHandler+0x312>
 8014d8a:	2b20      	cmp	r3, #32
 8014d8c:	d005      	beq.n	8014d9a <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8014d8e:	e01d      	b.n	8014dcc <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8014d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d92:	f043 0308 	orr.w	r3, r3, #8
 8014d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014d98:	e019      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8014d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9c:	f043 0310 	orr.w	r3, r3, #16
 8014da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014da2:	e014      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8014da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da6:	f043 0320 	orr.w	r3, r3, #32
 8014daa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014dac:	e00f      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014db6:	e00a      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8014db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014dc0:	e005      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8014dca:	e000      	b.n	8014dce <HAL_CAN_IRQHandler+0x350>
            break;
 8014dcc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	699a      	ldr	r2, [r3, #24]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014ddc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2204      	movs	r2, #4
 8014de4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8014de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d009      	beq.n	8014e00 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df2:	431a      	orrs	r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8014e00:	bf00      	nop
 8014e02:	3728      	adds	r7, #40	; 0x28
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8014e10:	bf00      	nop
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr

08014e1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b083      	sub	sp, #12
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8014e24:	bf00      	nop
 8014e26:	370c      	adds	r7, #12
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr

08014e30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8014e38:	bf00      	nop
 8014e3a:	370c      	adds	r7, #12
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e42:	4770      	bx	lr

08014e44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b083      	sub	sp, #12
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8014e4c:	bf00      	nop
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b083      	sub	sp, #12
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8014e74:	bf00      	nop
 8014e76:	370c      	adds	r7, #12
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr

08014e80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8014e88:	bf00      	nop
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr

08014e94 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8014e9c:	bf00      	nop
 8014e9e:	370c      	adds	r7, #12
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr

08014ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b085      	sub	sp, #20
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f003 0307 	and.w	r3, r3, #7
 8014eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014eb8:	4b0c      	ldr	r3, [pc, #48]	; (8014eec <__NVIC_SetPriorityGrouping+0x44>)
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014ebe:	68ba      	ldr	r2, [r7, #8]
 8014ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014ec4:	4013      	ands	r3, r2
 8014ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014eda:	4a04      	ldr	r2, [pc, #16]	; (8014eec <__NVIC_SetPriorityGrouping+0x44>)
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	60d3      	str	r3, [r2, #12]
}
 8014ee0:	bf00      	nop
 8014ee2:	3714      	adds	r7, #20
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eea:	4770      	bx	lr
 8014eec:	e000ed00 	.word	0xe000ed00

08014ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014ef4:	4b04      	ldr	r3, [pc, #16]	; (8014f08 <__NVIC_GetPriorityGrouping+0x18>)
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	0a1b      	lsrs	r3, r3, #8
 8014efa:	f003 0307 	and.w	r3, r3, #7
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr
 8014f08:	e000ed00 	.word	0xe000ed00

08014f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	4603      	mov	r3, r0
 8014f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	db0b      	blt.n	8014f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014f1e:	79fb      	ldrb	r3, [r7, #7]
 8014f20:	f003 021f 	and.w	r2, r3, #31
 8014f24:	4907      	ldr	r1, [pc, #28]	; (8014f44 <__NVIC_EnableIRQ+0x38>)
 8014f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f2a:	095b      	lsrs	r3, r3, #5
 8014f2c:	2001      	movs	r0, #1
 8014f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8014f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8014f36:	bf00      	nop
 8014f38:	370c      	adds	r7, #12
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr
 8014f42:	bf00      	nop
 8014f44:	e000e100 	.word	0xe000e100

08014f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	4603      	mov	r3, r0
 8014f50:	6039      	str	r1, [r7, #0]
 8014f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	db0a      	blt.n	8014f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	b2da      	uxtb	r2, r3
 8014f60:	490c      	ldr	r1, [pc, #48]	; (8014f94 <__NVIC_SetPriority+0x4c>)
 8014f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f66:	0112      	lsls	r2, r2, #4
 8014f68:	b2d2      	uxtb	r2, r2
 8014f6a:	440b      	add	r3, r1
 8014f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014f70:	e00a      	b.n	8014f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	4908      	ldr	r1, [pc, #32]	; (8014f98 <__NVIC_SetPriority+0x50>)
 8014f78:	79fb      	ldrb	r3, [r7, #7]
 8014f7a:	f003 030f 	and.w	r3, r3, #15
 8014f7e:	3b04      	subs	r3, #4
 8014f80:	0112      	lsls	r2, r2, #4
 8014f82:	b2d2      	uxtb	r2, r2
 8014f84:	440b      	add	r3, r1
 8014f86:	761a      	strb	r2, [r3, #24]
}
 8014f88:	bf00      	nop
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr
 8014f94:	e000e100 	.word	0xe000e100
 8014f98:	e000ed00 	.word	0xe000ed00

08014f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b089      	sub	sp, #36	; 0x24
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f003 0307 	and.w	r3, r3, #7
 8014fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	f1c3 0307 	rsb	r3, r3, #7
 8014fb6:	2b04      	cmp	r3, #4
 8014fb8:	bf28      	it	cs
 8014fba:	2304      	movcs	r3, #4
 8014fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	3304      	adds	r3, #4
 8014fc2:	2b06      	cmp	r3, #6
 8014fc4:	d902      	bls.n	8014fcc <NVIC_EncodePriority+0x30>
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	3b03      	subs	r3, #3
 8014fca:	e000      	b.n	8014fce <NVIC_EncodePriority+0x32>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8014fda:	43da      	mvns	r2, r3
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	401a      	ands	r2, r3
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	fa01 f303 	lsl.w	r3, r1, r3
 8014fee:	43d9      	mvns	r1, r3
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014ff4:	4313      	orrs	r3, r2
         );
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3724      	adds	r7, #36	; 0x24
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015000:	4770      	bx	lr
	...

08015004 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015004:	b480      	push	{r7}
 8015006:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015008:	f3bf 8f4f 	dsb	sy
}
 801500c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801500e:	4b06      	ldr	r3, [pc, #24]	; (8015028 <__NVIC_SystemReset+0x24>)
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015016:	4904      	ldr	r1, [pc, #16]	; (8015028 <__NVIC_SystemReset+0x24>)
 8015018:	4b04      	ldr	r3, [pc, #16]	; (801502c <__NVIC_SystemReset+0x28>)
 801501a:	4313      	orrs	r3, r2
 801501c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801501e:	f3bf 8f4f 	dsb	sy
}
 8015022:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015024:	bf00      	nop
 8015026:	e7fd      	b.n	8015024 <__NVIC_SystemReset+0x20>
 8015028:	e000ed00 	.word	0xe000ed00
 801502c:	05fa0004 	.word	0x05fa0004

08015030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3b01      	subs	r3, #1
 801503c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015040:	d301      	bcc.n	8015046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015042:	2301      	movs	r3, #1
 8015044:	e00f      	b.n	8015066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015046:	4a0a      	ldr	r2, [pc, #40]	; (8015070 <SysTick_Config+0x40>)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3b01      	subs	r3, #1
 801504c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801504e:	210f      	movs	r1, #15
 8015050:	f04f 30ff 	mov.w	r0, #4294967295
 8015054:	f7ff ff78 	bl	8014f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015058:	4b05      	ldr	r3, [pc, #20]	; (8015070 <SysTick_Config+0x40>)
 801505a:	2200      	movs	r2, #0
 801505c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801505e:	4b04      	ldr	r3, [pc, #16]	; (8015070 <SysTick_Config+0x40>)
 8015060:	2207      	movs	r2, #7
 8015062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015064:	2300      	movs	r3, #0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	e000e010 	.word	0xe000e010

08015074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7ff ff13 	bl	8014ea8 <__NVIC_SetPriorityGrouping>
}
 8015082:	bf00      	nop
 8015084:	3708      	adds	r7, #8
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}

0801508a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801508a:	b580      	push	{r7, lr}
 801508c:	b086      	sub	sp, #24
 801508e:	af00      	add	r7, sp, #0
 8015090:	4603      	mov	r3, r0
 8015092:	60b9      	str	r1, [r7, #8]
 8015094:	607a      	str	r2, [r7, #4]
 8015096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015098:	2300      	movs	r3, #0
 801509a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801509c:	f7ff ff28 	bl	8014ef0 <__NVIC_GetPriorityGrouping>
 80150a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	68b9      	ldr	r1, [r7, #8]
 80150a6:	6978      	ldr	r0, [r7, #20]
 80150a8:	f7ff ff78 	bl	8014f9c <NVIC_EncodePriority>
 80150ac:	4602      	mov	r2, r0
 80150ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150b2:	4611      	mov	r1, r2
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff ff47 	bl	8014f48 <__NVIC_SetPriority>
}
 80150ba:	bf00      	nop
 80150bc:	3718      	adds	r7, #24
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}

080150c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b082      	sub	sp, #8
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	4603      	mov	r3, r0
 80150ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80150cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7ff ff1b 	bl	8014f0c <__NVIC_EnableIRQ>
}
 80150d6:	bf00      	nop
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80150e2:	f7ff ff8f 	bl	8015004 <__NVIC_SystemReset>

080150e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff ff9e 	bl	8015030 <SysTick_Config>
 80150f4:	4603      	mov	r3, r0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b086      	sub	sp, #24
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015108:	2300      	movs	r3, #0
 801510a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801510c:	f7fe ff8c 	bl	8014028 <HAL_GetTick>
 8015110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d101      	bne.n	801511c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015118:	2301      	movs	r3, #1
 801511a:	e099      	b.n	8015250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2202      	movs	r2, #2
 8015120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2200      	movs	r2, #0
 8015128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	f022 0201 	bic.w	r2, r2, #1
 801513a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801513c:	e00f      	b.n	801515e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801513e:	f7fe ff73 	bl	8014028 <HAL_GetTick>
 8015142:	4602      	mov	r2, r0
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	1ad3      	subs	r3, r2, r3
 8015148:	2b05      	cmp	r3, #5
 801514a:	d908      	bls.n	801515e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2220      	movs	r2, #32
 8015150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2203      	movs	r2, #3
 8015156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801515a:	2303      	movs	r3, #3
 801515c:	e078      	b.n	8015250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f003 0301 	and.w	r3, r3, #1
 8015168:	2b00      	cmp	r3, #0
 801516a:	d1e8      	bne.n	801513e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015174:	697a      	ldr	r2, [r7, #20]
 8015176:	4b38      	ldr	r3, [pc, #224]	; (8015258 <HAL_DMA_Init+0x158>)
 8015178:	4013      	ands	r3, r2
 801517a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	685a      	ldr	r2, [r3, #4]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801518a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	691b      	ldr	r3, [r3, #16]
 8015190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	699b      	ldr	r3, [r3, #24]
 801519c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80151a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	6a1b      	ldr	r3, [r3, #32]
 80151a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80151aa:	697a      	ldr	r2, [r7, #20]
 80151ac:	4313      	orrs	r3, r2
 80151ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b4:	2b04      	cmp	r3, #4
 80151b6:	d107      	bne.n	80151c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151c0:	4313      	orrs	r3, r2
 80151c2:	697a      	ldr	r2, [r7, #20]
 80151c4:	4313      	orrs	r3, r2
 80151c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	697a      	ldr	r2, [r7, #20]
 80151ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	695b      	ldr	r3, [r3, #20]
 80151d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	f023 0307 	bic.w	r3, r3, #7
 80151de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e4:	697a      	ldr	r2, [r7, #20]
 80151e6:	4313      	orrs	r3, r2
 80151e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ee:	2b04      	cmp	r3, #4
 80151f0:	d117      	bne.n	8015222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151f6:	697a      	ldr	r2, [r7, #20]
 80151f8:	4313      	orrs	r3, r2
 80151fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015200:	2b00      	cmp	r3, #0
 8015202:	d00e      	beq.n	8015222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f000 fb01 	bl	801580c <DMA_CheckFifoParam>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	d008      	beq.n	8015222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2240      	movs	r2, #64	; 0x40
 8015214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2201      	movs	r2, #1
 801521a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801521e:	2301      	movs	r3, #1
 8015220:	e016      	b.n	8015250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	697a      	ldr	r2, [r7, #20]
 8015228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 fab8 	bl	80157a0 <DMA_CalcBaseAndBitshift>
 8015230:	4603      	mov	r3, r0
 8015232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015238:	223f      	movs	r2, #63	; 0x3f
 801523a:	409a      	lsls	r2, r3
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2201      	movs	r2, #1
 801524a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801524e:	2300      	movs	r3, #0
}
 8015250:	4618      	mov	r0, r3
 8015252:	3718      	adds	r7, #24
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}
 8015258:	f010803f 	.word	0xf010803f

0801525c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b086      	sub	sp, #24
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801526a:	2300      	movs	r3, #0
 801526c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801527a:	2b01      	cmp	r3, #1
 801527c:	d101      	bne.n	8015282 <HAL_DMA_Start_IT+0x26>
 801527e:	2302      	movs	r3, #2
 8015280:	e040      	b.n	8015304 <HAL_DMA_Start_IT+0xa8>
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2201      	movs	r2, #1
 8015286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015290:	b2db      	uxtb	r3, r3
 8015292:	2b01      	cmp	r3, #1
 8015294:	d12f      	bne.n	80152f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2202      	movs	r2, #2
 801529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2200      	movs	r2, #0
 80152a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	68b9      	ldr	r1, [r7, #8]
 80152aa:	68f8      	ldr	r0, [r7, #12]
 80152ac:	f000 fa4a 	bl	8015744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152b4:	223f      	movs	r2, #63	; 0x3f
 80152b6:	409a      	lsls	r2, r3
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f042 0216 	orr.w	r2, r2, #22
 80152ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d007      	beq.n	80152e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f042 0208 	orr.w	r2, r2, #8
 80152e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f042 0201 	orr.w	r2, r2, #1
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	e005      	b.n	8015302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80152fe:	2302      	movs	r3, #2
 8015300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8015302:	7dfb      	ldrb	r3, [r7, #23]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3718      	adds	r7, #24
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015318:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801531a:	f7fe fe85 	bl	8014028 <HAL_GetTick>
 801531e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015326:	b2db      	uxtb	r3, r3
 8015328:	2b02      	cmp	r3, #2
 801532a:	d008      	beq.n	801533e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2280      	movs	r2, #128	; 0x80
 8015330:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2200      	movs	r2, #0
 8015336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801533a:	2301      	movs	r3, #1
 801533c:	e052      	b.n	80153e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f022 0216 	bic.w	r2, r2, #22
 801534c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	695a      	ldr	r2, [r3, #20]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801535c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015362:	2b00      	cmp	r3, #0
 8015364:	d103      	bne.n	801536e <HAL_DMA_Abort+0x62>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801536a:	2b00      	cmp	r3, #0
 801536c:	d007      	beq.n	801537e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f022 0208 	bic.w	r2, r2, #8
 801537c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	f022 0201 	bic.w	r2, r2, #1
 801538c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801538e:	e013      	b.n	80153b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015390:	f7fe fe4a 	bl	8014028 <HAL_GetTick>
 8015394:	4602      	mov	r2, r0
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	2b05      	cmp	r3, #5
 801539c:	d90c      	bls.n	80153b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2220      	movs	r2, #32
 80153a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2203      	movs	r2, #3
 80153a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2200      	movs	r2, #0
 80153b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80153b4:	2303      	movs	r3, #3
 80153b6:	e015      	b.n	80153e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	f003 0301 	and.w	r3, r3, #1
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d1e4      	bne.n	8015390 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153ca:	223f      	movs	r2, #63	; 0x3f
 80153cc:	409a      	lsls	r2, r3
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2201      	movs	r2, #1
 80153d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2200      	movs	r2, #0
 80153de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80153e2:	2300      	movs	r3, #0
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3710      	adds	r7, #16
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	2b02      	cmp	r3, #2
 80153fe:	d004      	beq.n	801540a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2280      	movs	r2, #128	; 0x80
 8015404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015406:	2301      	movs	r3, #1
 8015408:	e00c      	b.n	8015424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2205      	movs	r2, #5
 801540e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	f022 0201 	bic.w	r2, r2, #1
 8015420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015422:	2300      	movs	r3, #0
}
 8015424:	4618      	mov	r0, r3
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8015438:	2300      	movs	r3, #0
 801543a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801543c:	4b8e      	ldr	r3, [pc, #568]	; (8015678 <HAL_DMA_IRQHandler+0x248>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a8e      	ldr	r2, [pc, #568]	; (801567c <HAL_DMA_IRQHandler+0x24c>)
 8015442:	fba2 2303 	umull	r2, r3, r2, r3
 8015446:	0a9b      	lsrs	r3, r3, #10
 8015448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801544e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801545a:	2208      	movs	r2, #8
 801545c:	409a      	lsls	r2, r3
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	4013      	ands	r3, r2
 8015462:	2b00      	cmp	r3, #0
 8015464:	d01a      	beq.n	801549c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	f003 0304 	and.w	r3, r3, #4
 8015470:	2b00      	cmp	r3, #0
 8015472:	d013      	beq.n	801549c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f022 0204 	bic.w	r2, r2, #4
 8015482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015488:	2208      	movs	r2, #8
 801548a:	409a      	lsls	r2, r3
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015494:	f043 0201 	orr.w	r2, r3, #1
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154a0:	2201      	movs	r2, #1
 80154a2:	409a      	lsls	r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	4013      	ands	r3, r2
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d012      	beq.n	80154d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	695b      	ldr	r3, [r3, #20]
 80154b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00b      	beq.n	80154d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154be:	2201      	movs	r2, #1
 80154c0:	409a      	lsls	r2, r3
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154ca:	f043 0202 	orr.w	r2, r3, #2
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154d6:	2204      	movs	r2, #4
 80154d8:	409a      	lsls	r2, r3
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	4013      	ands	r3, r2
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d012      	beq.n	8015508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	f003 0302 	and.w	r3, r3, #2
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00b      	beq.n	8015508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154f4:	2204      	movs	r2, #4
 80154f6:	409a      	lsls	r2, r3
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015500:	f043 0204 	orr.w	r2, r3, #4
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801550c:	2210      	movs	r2, #16
 801550e:	409a      	lsls	r2, r3
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	4013      	ands	r3, r2
 8015514:	2b00      	cmp	r3, #0
 8015516:	d043      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f003 0308 	and.w	r3, r3, #8
 8015522:	2b00      	cmp	r3, #0
 8015524:	d03c      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801552a:	2210      	movs	r2, #16
 801552c:	409a      	lsls	r2, r3
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801553c:	2b00      	cmp	r3, #0
 801553e:	d018      	beq.n	8015572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801554a:	2b00      	cmp	r3, #0
 801554c:	d108      	bne.n	8015560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015552:	2b00      	cmp	r3, #0
 8015554:	d024      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	4798      	blx	r3
 801555e:	e01f      	b.n	80155a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015564:	2b00      	cmp	r3, #0
 8015566:	d01b      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	4798      	blx	r3
 8015570:	e016      	b.n	80155a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801557c:	2b00      	cmp	r3, #0
 801557e:	d107      	bne.n	8015590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	f022 0208 	bic.w	r2, r2, #8
 801558e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015594:	2b00      	cmp	r3, #0
 8015596:	d003      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155a4:	2220      	movs	r2, #32
 80155a6:	409a      	lsls	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	4013      	ands	r3, r2
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	f000 808f 	beq.w	80156d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f003 0310 	and.w	r3, r3, #16
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f000 8087 	beq.w	80156d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155c6:	2220      	movs	r2, #32
 80155c8:	409a      	lsls	r2, r3
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	2b05      	cmp	r3, #5
 80155d8:	d136      	bne.n	8015648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f022 0216 	bic.w	r2, r2, #22
 80155e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	695a      	ldr	r2, [r3, #20]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80155f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d103      	bne.n	801560a <HAL_DMA_IRQHandler+0x1da>
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015606:	2b00      	cmp	r3, #0
 8015608:	d007      	beq.n	801561a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	f022 0208 	bic.w	r2, r2, #8
 8015618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801561e:	223f      	movs	r2, #63	; 0x3f
 8015620:	409a      	lsls	r2, r3
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2201      	movs	r2, #1
 801562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2200      	movs	r2, #0
 8015632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801563a:	2b00      	cmp	r3, #0
 801563c:	d07e      	beq.n	801573c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	4798      	blx	r3
        }
        return;
 8015646:	e079      	b.n	801573c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015652:	2b00      	cmp	r3, #0
 8015654:	d01d      	beq.n	8015692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015660:	2b00      	cmp	r3, #0
 8015662:	d10d      	bne.n	8015680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015668:	2b00      	cmp	r3, #0
 801566a:	d031      	beq.n	80156d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	4798      	blx	r3
 8015674:	e02c      	b.n	80156d0 <HAL_DMA_IRQHandler+0x2a0>
 8015676:	bf00      	nop
 8015678:	200005f0 	.word	0x200005f0
 801567c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015684:	2b00      	cmp	r3, #0
 8015686:	d023      	beq.n	80156d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	4798      	blx	r3
 8015690:	e01e      	b.n	80156d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801569c:	2b00      	cmp	r3, #0
 801569e:	d10f      	bne.n	80156c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f022 0210 	bic.w	r2, r2, #16
 80156ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2201      	movs	r2, #1
 80156b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2200      	movs	r2, #0
 80156bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d003      	beq.n	80156d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d032      	beq.n	801573e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156dc:	f003 0301 	and.w	r3, r3, #1
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d022      	beq.n	801572a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2205      	movs	r2, #5
 80156e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f022 0201 	bic.w	r2, r2, #1
 80156fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	3301      	adds	r3, #1
 8015700:	60bb      	str	r3, [r7, #8]
 8015702:	697a      	ldr	r2, [r7, #20]
 8015704:	429a      	cmp	r2, r3
 8015706:	d307      	bcc.n	8015718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f003 0301 	and.w	r3, r3, #1
 8015712:	2b00      	cmp	r3, #0
 8015714:	d1f2      	bne.n	80156fc <HAL_DMA_IRQHandler+0x2cc>
 8015716:	e000      	b.n	801571a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8015718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2201      	movs	r2, #1
 801571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801572e:	2b00      	cmp	r3, #0
 8015730:	d005      	beq.n	801573e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	4798      	blx	r3
 801573a:	e000      	b.n	801573e <HAL_DMA_IRQHandler+0x30e>
        return;
 801573c:	bf00      	nop
    }
  }
}
 801573e:	3718      	adds	r7, #24
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015744:	b480      	push	{r7}
 8015746:	b085      	sub	sp, #20
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	681a      	ldr	r2, [r3, #0]
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	689b      	ldr	r3, [r3, #8]
 801576e:	2b40      	cmp	r3, #64	; 0x40
 8015770:	d108      	bne.n	8015784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	68ba      	ldr	r2, [r7, #8]
 8015780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8015782:	e007      	b.n	8015794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	68ba      	ldr	r2, [r7, #8]
 801578a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	60da      	str	r2, [r3, #12]
}
 8015794:	bf00      	nop
 8015796:	3714      	adds	r7, #20
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b085      	sub	sp, #20
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	b2db      	uxtb	r3, r3
 80157ae:	3b10      	subs	r3, #16
 80157b0:	4a14      	ldr	r2, [pc, #80]	; (8015804 <DMA_CalcBaseAndBitshift+0x64>)
 80157b2:	fba2 2303 	umull	r2, r3, r2, r3
 80157b6:	091b      	lsrs	r3, r3, #4
 80157b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80157ba:	4a13      	ldr	r2, [pc, #76]	; (8015808 <DMA_CalcBaseAndBitshift+0x68>)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	4413      	add	r3, r2
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	461a      	mov	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2b03      	cmp	r3, #3
 80157cc:	d909      	bls.n	80157e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80157d6:	f023 0303 	bic.w	r3, r3, #3
 80157da:	1d1a      	adds	r2, r3, #4
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	659a      	str	r2, [r3, #88]	; 0x58
 80157e0:	e007      	b.n	80157f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80157ea:	f023 0303 	bic.w	r3, r3, #3
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	3714      	adds	r7, #20
 80157fa:	46bd      	mov	sp, r7
 80157fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015800:	4770      	bx	lr
 8015802:	bf00      	nop
 8015804:	aaaaaaab 	.word	0xaaaaaaab
 8015808:	08023c24 	.word	0x08023c24

0801580c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801580c:	b480      	push	{r7}
 801580e:	b085      	sub	sp, #20
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015814:	2300      	movs	r3, #0
 8015816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801581c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	699b      	ldr	r3, [r3, #24]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d11f      	bne.n	8015866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	2b03      	cmp	r3, #3
 801582a:	d856      	bhi.n	80158da <DMA_CheckFifoParam+0xce>
 801582c:	a201      	add	r2, pc, #4	; (adr r2, 8015834 <DMA_CheckFifoParam+0x28>)
 801582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015832:	bf00      	nop
 8015834:	08015845 	.word	0x08015845
 8015838:	08015857 	.word	0x08015857
 801583c:	08015845 	.word	0x08015845
 8015840:	080158db 	.word	0x080158db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801584c:	2b00      	cmp	r3, #0
 801584e:	d046      	beq.n	80158de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8015850:	2301      	movs	r3, #1
 8015852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015854:	e043      	b.n	80158de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801585a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801585e:	d140      	bne.n	80158e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8015860:	2301      	movs	r3, #1
 8015862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015864:	e03d      	b.n	80158e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	699b      	ldr	r3, [r3, #24]
 801586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801586e:	d121      	bne.n	80158b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	2b03      	cmp	r3, #3
 8015874:	d837      	bhi.n	80158e6 <DMA_CheckFifoParam+0xda>
 8015876:	a201      	add	r2, pc, #4	; (adr r2, 801587c <DMA_CheckFifoParam+0x70>)
 8015878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587c:	0801588d 	.word	0x0801588d
 8015880:	08015893 	.word	0x08015893
 8015884:	0801588d 	.word	0x0801588d
 8015888:	080158a5 	.word	0x080158a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801588c:	2301      	movs	r3, #1
 801588e:	73fb      	strb	r3, [r7, #15]
      break;
 8015890:	e030      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801589a:	2b00      	cmp	r3, #0
 801589c:	d025      	beq.n	80158ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801589e:	2301      	movs	r3, #1
 80158a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80158a2:	e022      	b.n	80158ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80158ac:	d11f      	bne.n	80158ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80158ae:	2301      	movs	r3, #1
 80158b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80158b2:	e01c      	b.n	80158ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	2b02      	cmp	r3, #2
 80158b8:	d903      	bls.n	80158c2 <DMA_CheckFifoParam+0xb6>
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	2b03      	cmp	r3, #3
 80158be:	d003      	beq.n	80158c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80158c0:	e018      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80158c2:	2301      	movs	r3, #1
 80158c4:	73fb      	strb	r3, [r7, #15]
      break;
 80158c6:	e015      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00e      	beq.n	80158f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80158d4:	2301      	movs	r3, #1
 80158d6:	73fb      	strb	r3, [r7, #15]
      break;
 80158d8:	e00b      	b.n	80158f2 <DMA_CheckFifoParam+0xe6>
      break;
 80158da:	bf00      	nop
 80158dc:	e00a      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;
 80158de:	bf00      	nop
 80158e0:	e008      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;
 80158e2:	bf00      	nop
 80158e4:	e006      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;
 80158e6:	bf00      	nop
 80158e8:	e004      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;
 80158ea:	bf00      	nop
 80158ec:	e002      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80158ee:	bf00      	nop
 80158f0:	e000      	b.n	80158f4 <DMA_CheckFifoParam+0xe8>
      break;
 80158f2:	bf00      	nop
    }
  } 
  
  return status; 
 80158f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3714      	adds	r7, #20
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr
 8015902:	bf00      	nop

08015904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015904:	b480      	push	{r7}
 8015906:	b089      	sub	sp, #36	; 0x24
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801590e:	2300      	movs	r3, #0
 8015910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015912:	2300      	movs	r3, #0
 8015914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015916:	2300      	movs	r3, #0
 8015918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801591a:	2300      	movs	r3, #0
 801591c:	61fb      	str	r3, [r7, #28]
 801591e:	e16b      	b.n	8015bf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015920:	2201      	movs	r2, #1
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	fa02 f303 	lsl.w	r3, r2, r3
 8015928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	697a      	ldr	r2, [r7, #20]
 8015930:	4013      	ands	r3, r2
 8015932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015934:	693a      	ldr	r2, [r7, #16]
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	429a      	cmp	r2, r3
 801593a:	f040 815a 	bne.w	8015bf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	f003 0303 	and.w	r3, r3, #3
 8015946:	2b01      	cmp	r3, #1
 8015948:	d005      	beq.n	8015956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015952:	2b02      	cmp	r3, #2
 8015954:	d130      	bne.n	80159b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	689b      	ldr	r3, [r3, #8]
 801595a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	005b      	lsls	r3, r3, #1
 8015960:	2203      	movs	r2, #3
 8015962:	fa02 f303 	lsl.w	r3, r2, r3
 8015966:	43db      	mvns	r3, r3
 8015968:	69ba      	ldr	r2, [r7, #24]
 801596a:	4013      	ands	r3, r2
 801596c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	68da      	ldr	r2, [r3, #12]
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	fa02 f303 	lsl.w	r3, r2, r3
 801597a:	69ba      	ldr	r2, [r7, #24]
 801597c:	4313      	orrs	r3, r2
 801597e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	69ba      	ldr	r2, [r7, #24]
 8015984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801598c:	2201      	movs	r2, #1
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	fa02 f303 	lsl.w	r3, r2, r3
 8015994:	43db      	mvns	r3, r3
 8015996:	69ba      	ldr	r2, [r7, #24]
 8015998:	4013      	ands	r3, r2
 801599a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	685b      	ldr	r3, [r3, #4]
 80159a0:	091b      	lsrs	r3, r3, #4
 80159a2:	f003 0201 	and.w	r2, r3, #1
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	fa02 f303 	lsl.w	r3, r2, r3
 80159ac:	69ba      	ldr	r2, [r7, #24]
 80159ae:	4313      	orrs	r3, r2
 80159b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	69ba      	ldr	r2, [r7, #24]
 80159b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	f003 0303 	and.w	r3, r3, #3
 80159c0:	2b03      	cmp	r3, #3
 80159c2:	d017      	beq.n	80159f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80159ca:	69fb      	ldr	r3, [r7, #28]
 80159cc:	005b      	lsls	r3, r3, #1
 80159ce:	2203      	movs	r2, #3
 80159d0:	fa02 f303 	lsl.w	r3, r2, r3
 80159d4:	43db      	mvns	r3, r3
 80159d6:	69ba      	ldr	r2, [r7, #24]
 80159d8:	4013      	ands	r3, r2
 80159da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	689a      	ldr	r2, [r3, #8]
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	fa02 f303 	lsl.w	r3, r2, r3
 80159e8:	69ba      	ldr	r2, [r7, #24]
 80159ea:	4313      	orrs	r3, r2
 80159ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	69ba      	ldr	r2, [r7, #24]
 80159f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	f003 0303 	and.w	r3, r3, #3
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d123      	bne.n	8015a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	08da      	lsrs	r2, r3, #3
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	3208      	adds	r2, #8
 8015a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015a0e:	69fb      	ldr	r3, [r7, #28]
 8015a10:	f003 0307 	and.w	r3, r3, #7
 8015a14:	009b      	lsls	r3, r3, #2
 8015a16:	220f      	movs	r2, #15
 8015a18:	fa02 f303 	lsl.w	r3, r2, r3
 8015a1c:	43db      	mvns	r3, r3
 8015a1e:	69ba      	ldr	r2, [r7, #24]
 8015a20:	4013      	ands	r3, r2
 8015a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	691a      	ldr	r2, [r3, #16]
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	f003 0307 	and.w	r3, r3, #7
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	fa02 f303 	lsl.w	r3, r2, r3
 8015a34:	69ba      	ldr	r2, [r7, #24]
 8015a36:	4313      	orrs	r3, r2
 8015a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	08da      	lsrs	r2, r3, #3
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	3208      	adds	r2, #8
 8015a42:	69b9      	ldr	r1, [r7, #24]
 8015a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	2203      	movs	r2, #3
 8015a54:	fa02 f303 	lsl.w	r3, r2, r3
 8015a58:	43db      	mvns	r3, r3
 8015a5a:	69ba      	ldr	r2, [r7, #24]
 8015a5c:	4013      	ands	r3, r2
 8015a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	f003 0203 	and.w	r2, r3, #3
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a70:	69ba      	ldr	r2, [r7, #24]
 8015a72:	4313      	orrs	r3, r2
 8015a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	69ba      	ldr	r2, [r7, #24]
 8015a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	f000 80b4 	beq.w	8015bf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	4b60      	ldr	r3, [pc, #384]	; (8015c10 <HAL_GPIO_Init+0x30c>)
 8015a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a92:	4a5f      	ldr	r2, [pc, #380]	; (8015c10 <HAL_GPIO_Init+0x30c>)
 8015a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015a98:	6453      	str	r3, [r2, #68]	; 0x44
 8015a9a:	4b5d      	ldr	r3, [pc, #372]	; (8015c10 <HAL_GPIO_Init+0x30c>)
 8015a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015aa2:	60fb      	str	r3, [r7, #12]
 8015aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015aa6:	4a5b      	ldr	r2, [pc, #364]	; (8015c14 <HAL_GPIO_Init+0x310>)
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	089b      	lsrs	r3, r3, #2
 8015aac:	3302      	adds	r3, #2
 8015aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	f003 0303 	and.w	r3, r3, #3
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	220f      	movs	r2, #15
 8015abe:	fa02 f303 	lsl.w	r3, r2, r3
 8015ac2:	43db      	mvns	r3, r3
 8015ac4:	69ba      	ldr	r2, [r7, #24]
 8015ac6:	4013      	ands	r3, r2
 8015ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	4a52      	ldr	r2, [pc, #328]	; (8015c18 <HAL_GPIO_Init+0x314>)
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d02b      	beq.n	8015b2a <HAL_GPIO_Init+0x226>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	4a51      	ldr	r2, [pc, #324]	; (8015c1c <HAL_GPIO_Init+0x318>)
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	d025      	beq.n	8015b26 <HAL_GPIO_Init+0x222>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4a50      	ldr	r2, [pc, #320]	; (8015c20 <HAL_GPIO_Init+0x31c>)
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	d01f      	beq.n	8015b22 <HAL_GPIO_Init+0x21e>
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	4a4f      	ldr	r2, [pc, #316]	; (8015c24 <HAL_GPIO_Init+0x320>)
 8015ae6:	4293      	cmp	r3, r2
 8015ae8:	d019      	beq.n	8015b1e <HAL_GPIO_Init+0x21a>
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	4a4e      	ldr	r2, [pc, #312]	; (8015c28 <HAL_GPIO_Init+0x324>)
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d013      	beq.n	8015b1a <HAL_GPIO_Init+0x216>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	4a4d      	ldr	r2, [pc, #308]	; (8015c2c <HAL_GPIO_Init+0x328>)
 8015af6:	4293      	cmp	r3, r2
 8015af8:	d00d      	beq.n	8015b16 <HAL_GPIO_Init+0x212>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	4a4c      	ldr	r2, [pc, #304]	; (8015c30 <HAL_GPIO_Init+0x32c>)
 8015afe:	4293      	cmp	r3, r2
 8015b00:	d007      	beq.n	8015b12 <HAL_GPIO_Init+0x20e>
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	4a4b      	ldr	r2, [pc, #300]	; (8015c34 <HAL_GPIO_Init+0x330>)
 8015b06:	4293      	cmp	r3, r2
 8015b08:	d101      	bne.n	8015b0e <HAL_GPIO_Init+0x20a>
 8015b0a:	2307      	movs	r3, #7
 8015b0c:	e00e      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b0e:	2308      	movs	r3, #8
 8015b10:	e00c      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b12:	2306      	movs	r3, #6
 8015b14:	e00a      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b16:	2305      	movs	r3, #5
 8015b18:	e008      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b1a:	2304      	movs	r3, #4
 8015b1c:	e006      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b1e:	2303      	movs	r3, #3
 8015b20:	e004      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b22:	2302      	movs	r3, #2
 8015b24:	e002      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b26:	2301      	movs	r3, #1
 8015b28:	e000      	b.n	8015b2c <HAL_GPIO_Init+0x228>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	69fa      	ldr	r2, [r7, #28]
 8015b2e:	f002 0203 	and.w	r2, r2, #3
 8015b32:	0092      	lsls	r2, r2, #2
 8015b34:	4093      	lsls	r3, r2
 8015b36:	69ba      	ldr	r2, [r7, #24]
 8015b38:	4313      	orrs	r3, r2
 8015b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015b3c:	4935      	ldr	r1, [pc, #212]	; (8015c14 <HAL_GPIO_Init+0x310>)
 8015b3e:	69fb      	ldr	r3, [r7, #28]
 8015b40:	089b      	lsrs	r3, r3, #2
 8015b42:	3302      	adds	r3, #2
 8015b44:	69ba      	ldr	r2, [r7, #24]
 8015b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015b4a:	4b3b      	ldr	r3, [pc, #236]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015b4c:	689b      	ldr	r3, [r3, #8]
 8015b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	43db      	mvns	r3, r3
 8015b54:	69ba      	ldr	r2, [r7, #24]
 8015b56:	4013      	ands	r3, r2
 8015b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d003      	beq.n	8015b6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8015b66:	69ba      	ldr	r2, [r7, #24]
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	4313      	orrs	r3, r2
 8015b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015b6e:	4a32      	ldr	r2, [pc, #200]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015b74:	4b30      	ldr	r3, [pc, #192]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015b76:	68db      	ldr	r3, [r3, #12]
 8015b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	43db      	mvns	r3, r3
 8015b7e:	69ba      	ldr	r2, [r7, #24]
 8015b80:	4013      	ands	r3, r2
 8015b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d003      	beq.n	8015b98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8015b90:	69ba      	ldr	r2, [r7, #24]
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	4313      	orrs	r3, r2
 8015b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015b98:	4a27      	ldr	r2, [pc, #156]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015b9a:	69bb      	ldr	r3, [r7, #24]
 8015b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015b9e:	4b26      	ldr	r3, [pc, #152]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	43db      	mvns	r3, r3
 8015ba8:	69ba      	ldr	r2, [r7, #24]
 8015baa:	4013      	ands	r3, r2
 8015bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d003      	beq.n	8015bc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8015bba:	69ba      	ldr	r2, [r7, #24]
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	4313      	orrs	r3, r2
 8015bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015bc2:	4a1d      	ldr	r2, [pc, #116]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015bc4:	69bb      	ldr	r3, [r7, #24]
 8015bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015bc8:	4b1b      	ldr	r3, [pc, #108]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	43db      	mvns	r3, r3
 8015bd2:	69ba      	ldr	r2, [r7, #24]
 8015bd4:	4013      	ands	r3, r2
 8015bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	685b      	ldr	r3, [r3, #4]
 8015bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d003      	beq.n	8015bec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8015be4:	69ba      	ldr	r2, [r7, #24]
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	4313      	orrs	r3, r2
 8015bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015bec:	4a12      	ldr	r2, [pc, #72]	; (8015c38 <HAL_GPIO_Init+0x334>)
 8015bee:	69bb      	ldr	r3, [r7, #24]
 8015bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	61fb      	str	r3, [r7, #28]
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	2b0f      	cmp	r3, #15
 8015bfc:	f67f ae90 	bls.w	8015920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015c00:	bf00      	nop
 8015c02:	bf00      	nop
 8015c04:	3724      	adds	r7, #36	; 0x24
 8015c06:	46bd      	mov	sp, r7
 8015c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop
 8015c10:	40023800 	.word	0x40023800
 8015c14:	40013800 	.word	0x40013800
 8015c18:	40020000 	.word	0x40020000
 8015c1c:	40020400 	.word	0x40020400
 8015c20:	40020800 	.word	0x40020800
 8015c24:	40020c00 	.word	0x40020c00
 8015c28:	40021000 	.word	0x40021000
 8015c2c:	40021400 	.word	0x40021400
 8015c30:	40021800 	.word	0x40021800
 8015c34:	40021c00 	.word	0x40021c00
 8015c38:	40013c00 	.word	0x40013c00

08015c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	460b      	mov	r3, r1
 8015c46:	807b      	strh	r3, [r7, #2]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015c4c:	787b      	ldrb	r3, [r7, #1]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d003      	beq.n	8015c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015c52:	887a      	ldrh	r2, [r7, #2]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015c58:	e003      	b.n	8015c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015c5a:	887b      	ldrh	r3, [r7, #2]
 8015c5c:	041a      	lsls	r2, r3, #16
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	619a      	str	r2, [r3, #24]
}
 8015c62:	bf00      	nop
 8015c64:	370c      	adds	r7, #12
 8015c66:	46bd      	mov	sp, r7
 8015c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6c:	4770      	bx	lr

08015c6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8015c6e:	b480      	push	{r7}
 8015c70:	b085      	sub	sp, #20
 8015c72:	af00      	add	r7, sp, #0
 8015c74:	6078      	str	r0, [r7, #4]
 8015c76:	460b      	mov	r3, r1
 8015c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	695b      	ldr	r3, [r3, #20]
 8015c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8015c80:	887a      	ldrh	r2, [r7, #2]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	4013      	ands	r3, r2
 8015c86:	041a      	lsls	r2, r3, #16
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	43d9      	mvns	r1, r3
 8015c8c:	887b      	ldrh	r3, [r7, #2]
 8015c8e:	400b      	ands	r3, r1
 8015c90:	431a      	orrs	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	619a      	str	r2, [r3, #24]
}
 8015c96:	bf00      	nop
 8015c98:	3714      	adds	r7, #20
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr

08015ca2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8015ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ca4:	b08f      	sub	sp, #60	; 0x3c
 8015ca6:	af0a      	add	r7, sp, #40	; 0x28
 8015ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d101      	bne.n	8015cb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	e10f      	b.n	8015ed4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d106      	bne.n	8015cd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8015cce:	6878      	ldr	r0, [r7, #4]
 8015cd0:	f007 fafc 	bl	801d2cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2203      	movs	r2, #3
 8015cd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d102      	bne.n	8015cee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2200      	movs	r2, #0
 8015cec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f003 fe4f 	bl	8019996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	603b      	str	r3, [r7, #0]
 8015cfe:	687e      	ldr	r6, [r7, #4]
 8015d00:	466d      	mov	r5, sp
 8015d02:	f106 0410 	add.w	r4, r6, #16
 8015d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8015d16:	1d33      	adds	r3, r6, #4
 8015d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d1a:	6838      	ldr	r0, [r7, #0]
 8015d1c:	f003 fd26 	bl	801976c <USB_CoreInit>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d005      	beq.n	8015d32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2202      	movs	r2, #2
 8015d2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e0d0      	b.n	8015ed4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2100      	movs	r1, #0
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f003 fe3d 	bl	80199b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015d3e:	2300      	movs	r3, #0
 8015d40:	73fb      	strb	r3, [r7, #15]
 8015d42:	e04a      	b.n	8015dda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8015d44:	7bfa      	ldrb	r2, [r7, #15]
 8015d46:	6879      	ldr	r1, [r7, #4]
 8015d48:	4613      	mov	r3, r2
 8015d4a:	00db      	lsls	r3, r3, #3
 8015d4c:	4413      	add	r3, r2
 8015d4e:	009b      	lsls	r3, r3, #2
 8015d50:	440b      	add	r3, r1
 8015d52:	333d      	adds	r3, #61	; 0x3d
 8015d54:	2201      	movs	r2, #1
 8015d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015d58:	7bfa      	ldrb	r2, [r7, #15]
 8015d5a:	6879      	ldr	r1, [r7, #4]
 8015d5c:	4613      	mov	r3, r2
 8015d5e:	00db      	lsls	r3, r3, #3
 8015d60:	4413      	add	r3, r2
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	440b      	add	r3, r1
 8015d66:	333c      	adds	r3, #60	; 0x3c
 8015d68:	7bfa      	ldrb	r2, [r7, #15]
 8015d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8015d6c:	7bfa      	ldrb	r2, [r7, #15]
 8015d6e:	7bfb      	ldrb	r3, [r7, #15]
 8015d70:	b298      	uxth	r0, r3
 8015d72:	6879      	ldr	r1, [r7, #4]
 8015d74:	4613      	mov	r3, r2
 8015d76:	00db      	lsls	r3, r3, #3
 8015d78:	4413      	add	r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	440b      	add	r3, r1
 8015d7e:	3344      	adds	r3, #68	; 0x44
 8015d80:	4602      	mov	r2, r0
 8015d82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015d84:	7bfa      	ldrb	r2, [r7, #15]
 8015d86:	6879      	ldr	r1, [r7, #4]
 8015d88:	4613      	mov	r3, r2
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	4413      	add	r3, r2
 8015d8e:	009b      	lsls	r3, r3, #2
 8015d90:	440b      	add	r3, r1
 8015d92:	3340      	adds	r3, #64	; 0x40
 8015d94:	2200      	movs	r2, #0
 8015d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015d98:	7bfa      	ldrb	r2, [r7, #15]
 8015d9a:	6879      	ldr	r1, [r7, #4]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	00db      	lsls	r3, r3, #3
 8015da0:	4413      	add	r3, r2
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	440b      	add	r3, r1
 8015da6:	3348      	adds	r3, #72	; 0x48
 8015da8:	2200      	movs	r2, #0
 8015daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8015dac:	7bfa      	ldrb	r2, [r7, #15]
 8015dae:	6879      	ldr	r1, [r7, #4]
 8015db0:	4613      	mov	r3, r2
 8015db2:	00db      	lsls	r3, r3, #3
 8015db4:	4413      	add	r3, r2
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	440b      	add	r3, r1
 8015dba:	334c      	adds	r3, #76	; 0x4c
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015dc0:	7bfa      	ldrb	r2, [r7, #15]
 8015dc2:	6879      	ldr	r1, [r7, #4]
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	00db      	lsls	r3, r3, #3
 8015dc8:	4413      	add	r3, r2
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	440b      	add	r3, r1
 8015dce:	3354      	adds	r3, #84	; 0x54
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	73fb      	strb	r3, [r7, #15]
 8015dda:	7bfa      	ldrb	r2, [r7, #15]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d3af      	bcc.n	8015d44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015de4:	2300      	movs	r3, #0
 8015de6:	73fb      	strb	r3, [r7, #15]
 8015de8:	e044      	b.n	8015e74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015dea:	7bfa      	ldrb	r2, [r7, #15]
 8015dec:	6879      	ldr	r1, [r7, #4]
 8015dee:	4613      	mov	r3, r2
 8015df0:	00db      	lsls	r3, r3, #3
 8015df2:	4413      	add	r3, r2
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	440b      	add	r3, r1
 8015df8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015e00:	7bfa      	ldrb	r2, [r7, #15]
 8015e02:	6879      	ldr	r1, [r7, #4]
 8015e04:	4613      	mov	r3, r2
 8015e06:	00db      	lsls	r3, r3, #3
 8015e08:	4413      	add	r3, r2
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	440b      	add	r3, r1
 8015e0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8015e12:	7bfa      	ldrb	r2, [r7, #15]
 8015e14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015e16:	7bfa      	ldrb	r2, [r7, #15]
 8015e18:	6879      	ldr	r1, [r7, #4]
 8015e1a:	4613      	mov	r3, r2
 8015e1c:	00db      	lsls	r3, r3, #3
 8015e1e:	4413      	add	r3, r2
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	440b      	add	r3, r1
 8015e24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8015e28:	2200      	movs	r2, #0
 8015e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015e2c:	7bfa      	ldrb	r2, [r7, #15]
 8015e2e:	6879      	ldr	r1, [r7, #4]
 8015e30:	4613      	mov	r3, r2
 8015e32:	00db      	lsls	r3, r3, #3
 8015e34:	4413      	add	r3, r2
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	440b      	add	r3, r1
 8015e3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015e3e:	2200      	movs	r2, #0
 8015e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015e42:	7bfa      	ldrb	r2, [r7, #15]
 8015e44:	6879      	ldr	r1, [r7, #4]
 8015e46:	4613      	mov	r3, r2
 8015e48:	00db      	lsls	r3, r3, #3
 8015e4a:	4413      	add	r3, r2
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	440b      	add	r3, r1
 8015e50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015e54:	2200      	movs	r2, #0
 8015e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015e58:	7bfa      	ldrb	r2, [r7, #15]
 8015e5a:	6879      	ldr	r1, [r7, #4]
 8015e5c:	4613      	mov	r3, r2
 8015e5e:	00db      	lsls	r3, r3, #3
 8015e60:	4413      	add	r3, r2
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	440b      	add	r3, r1
 8015e66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015e6e:	7bfb      	ldrb	r3, [r7, #15]
 8015e70:	3301      	adds	r3, #1
 8015e72:	73fb      	strb	r3, [r7, #15]
 8015e74:	7bfa      	ldrb	r2, [r7, #15]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d3b5      	bcc.n	8015dea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	603b      	str	r3, [r7, #0]
 8015e84:	687e      	ldr	r6, [r7, #4]
 8015e86:	466d      	mov	r5, sp
 8015e88:	f106 0410 	add.w	r4, r6, #16
 8015e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8015e9c:	1d33      	adds	r3, r6, #4
 8015e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015ea0:	6838      	ldr	r0, [r7, #0]
 8015ea2:	f003 fdd5 	bl	8019a50 <USB_DevInit>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d005      	beq.n	8015eb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2202      	movs	r2, #2
 8015eb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e00d      	b.n	8015ed4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f004 ff24 	bl	801ad1a <USB_DevDisconnect>

  return HAL_OK;
 8015ed2:	2300      	movs	r3, #0
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3714      	adds	r7, #20
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015edc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8015ef0:	2b01      	cmp	r3, #1
 8015ef2:	d101      	bne.n	8015ef8 <HAL_PCD_Start+0x1c>
 8015ef4:	2302      	movs	r3, #2
 8015ef6:	e020      	b.n	8015f3a <HAL_PCD_Start+0x5e>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2201      	movs	r2, #1
 8015efc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d109      	bne.n	8015f1c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8015f0c:	2b01      	cmp	r3, #1
 8015f0e:	d005      	beq.n	8015f1c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f003 fd27 	bl	8019974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f004 fed4 	bl	801acd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2200      	movs	r2, #0
 8015f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8015f42:	b590      	push	{r4, r7, lr}
 8015f44:	b08d      	sub	sp, #52	; 0x34
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f004 ff92 	bl	801ae82 <USB_GetMode>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	f040 848a 	bne.w	801687a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f004 fef6 	bl	801ad5c <USB_ReadInterrupts>
 8015f70:	4603      	mov	r3, r0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	f000 8480 	beq.w	8016878 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f7e:	689b      	ldr	r3, [r3, #8]
 8015f80:	0a1b      	lsrs	r3, r3, #8
 8015f82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f004 fee3 	bl	801ad5c <USB_ReadInterrupts>
 8015f96:	4603      	mov	r3, r0
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	2b02      	cmp	r3, #2
 8015f9e:	d107      	bne.n	8015fb0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	695a      	ldr	r2, [r3, #20]
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f002 0202 	and.w	r2, r2, #2
 8015fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f004 fed1 	bl	801ad5c <USB_ReadInterrupts>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	f003 0310 	and.w	r3, r3, #16
 8015fc0:	2b10      	cmp	r3, #16
 8015fc2:	d161      	bne.n	8016088 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	699a      	ldr	r2, [r3, #24]
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f022 0210 	bic.w	r2, r2, #16
 8015fd2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8015fd4:	6a3b      	ldr	r3, [r7, #32]
 8015fd6:	6a1b      	ldr	r3, [r3, #32]
 8015fd8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	f003 020f 	and.w	r2, r3, #15
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	4413      	add	r3, r2
 8015fe6:	009b      	lsls	r3, r3, #2
 8015fe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	4413      	add	r3, r2
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	0c5b      	lsrs	r3, r3, #17
 8015ff8:	f003 030f 	and.w	r3, r3, #15
 8015ffc:	2b02      	cmp	r3, #2
 8015ffe:	d124      	bne.n	801604a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8016000:	69ba      	ldr	r2, [r7, #24]
 8016002:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8016006:	4013      	ands	r3, r2
 8016008:	2b00      	cmp	r3, #0
 801600a:	d035      	beq.n	8016078 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8016010:	69bb      	ldr	r3, [r7, #24]
 8016012:	091b      	lsrs	r3, r3, #4
 8016014:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8016016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801601a:	b29b      	uxth	r3, r3
 801601c:	461a      	mov	r2, r3
 801601e:	6a38      	ldr	r0, [r7, #32]
 8016020:	f004 fd08 	bl	801aa34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	691a      	ldr	r2, [r3, #16]
 8016028:	69bb      	ldr	r3, [r7, #24]
 801602a:	091b      	lsrs	r3, r3, #4
 801602c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016030:	441a      	add	r2, r3
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	6a1a      	ldr	r2, [r3, #32]
 801603a:	69bb      	ldr	r3, [r7, #24]
 801603c:	091b      	lsrs	r3, r3, #4
 801603e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016042:	441a      	add	r2, r3
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	621a      	str	r2, [r3, #32]
 8016048:	e016      	b.n	8016078 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	0c5b      	lsrs	r3, r3, #17
 801604e:	f003 030f 	and.w	r3, r3, #15
 8016052:	2b06      	cmp	r3, #6
 8016054:	d110      	bne.n	8016078 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801605c:	2208      	movs	r2, #8
 801605e:	4619      	mov	r1, r3
 8016060:	6a38      	ldr	r0, [r7, #32]
 8016062:	f004 fce7 	bl	801aa34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	6a1a      	ldr	r2, [r3, #32]
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	091b      	lsrs	r3, r3, #4
 801606e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016072:	441a      	add	r2, r3
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	699a      	ldr	r2, [r3, #24]
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	f042 0210 	orr.w	r2, r2, #16
 8016086:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	4618      	mov	r0, r3
 801608e:	f004 fe65 	bl	801ad5c <USB_ReadInterrupts>
 8016092:	4603      	mov	r3, r0
 8016094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016098:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801609c:	f040 80a7 	bne.w	80161ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80160a0:	2300      	movs	r3, #0
 80160a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4618      	mov	r0, r3
 80160aa:	f004 fe6a 	bl	801ad82 <USB_ReadDevAllOutEpInterrupt>
 80160ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80160b0:	e099      	b.n	80161e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80160b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b4:	f003 0301 	and.w	r3, r3, #1
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f000 808e 	beq.w	80161da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160c4:	b2d2      	uxtb	r2, r2
 80160c6:	4611      	mov	r1, r2
 80160c8:	4618      	mov	r0, r3
 80160ca:	f004 fe8e 	bl	801adea <USB_ReadDevOutEPInterrupt>
 80160ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d00c      	beq.n	80160f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80160da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160dc:	015a      	lsls	r2, r3, #5
 80160de:	69fb      	ldr	r3, [r7, #28]
 80160e0:	4413      	add	r3, r2
 80160e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160e6:	461a      	mov	r2, r3
 80160e8:	2301      	movs	r3, #1
 80160ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80160ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f000 fec2 	bl	8016e78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	f003 0308 	and.w	r3, r3, #8
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00c      	beq.n	8016118 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	015a      	lsls	r2, r3, #5
 8016102:	69fb      	ldr	r3, [r7, #28]
 8016104:	4413      	add	r3, r2
 8016106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801610a:	461a      	mov	r2, r3
 801610c:	2308      	movs	r3, #8
 801610e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8016110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 ff98 	bl	8017048 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	f003 0310 	and.w	r3, r3, #16
 801611e:	2b00      	cmp	r3, #0
 8016120:	d008      	beq.n	8016134 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8016122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016124:	015a      	lsls	r2, r3, #5
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	4413      	add	r3, r2
 801612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801612e:	461a      	mov	r2, r3
 8016130:	2310      	movs	r3, #16
 8016132:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	f003 0302 	and.w	r3, r3, #2
 801613a:	2b00      	cmp	r3, #0
 801613c:	d030      	beq.n	80161a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	695b      	ldr	r3, [r3, #20]
 8016142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016146:	2b80      	cmp	r3, #128	; 0x80
 8016148:	d109      	bne.n	801615e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801614a:	69fb      	ldr	r3, [r7, #28]
 801614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	69fa      	ldr	r2, [r7, #28]
 8016154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801615c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 801615e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016160:	4613      	mov	r3, r2
 8016162:	00db      	lsls	r3, r3, #3
 8016164:	4413      	add	r3, r2
 8016166:	009b      	lsls	r3, r3, #2
 8016168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	4413      	add	r3, r2
 8016170:	3304      	adds	r3, #4
 8016172:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	78db      	ldrb	r3, [r3, #3]
 8016178:	2b01      	cmp	r3, #1
 801617a:	d108      	bne.n	801618e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	2200      	movs	r2, #0
 8016180:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8016182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016184:	b2db      	uxtb	r3, r3
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f007 f9a5 	bl	801d4d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 801618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016190:	015a      	lsls	r2, r3, #5
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	4413      	add	r3, r2
 8016196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801619a:	461a      	mov	r2, r3
 801619c:	2302      	movs	r3, #2
 801619e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	f003 0320 	and.w	r3, r3, #32
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d008      	beq.n	80161bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80161aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ac:	015a      	lsls	r2, r3, #5
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	4413      	add	r3, r2
 80161b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161b6:	461a      	mov	r2, r3
 80161b8:	2320      	movs	r3, #32
 80161ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d009      	beq.n	80161da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80161c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c8:	015a      	lsls	r2, r3, #5
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	4413      	add	r3, r2
 80161ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161d2:	461a      	mov	r2, r3
 80161d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80161d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80161da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161dc:	3301      	adds	r3, #1
 80161de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80161e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e2:	085b      	lsrs	r3, r3, #1
 80161e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80161e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f47f af62 	bne.w	80160b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	4618      	mov	r0, r3
 80161f4:	f004 fdb2 	bl	801ad5c <USB_ReadInterrupts>
 80161f8:	4603      	mov	r3, r0
 80161fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80161fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016202:	f040 80db 	bne.w	80163bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4618      	mov	r0, r3
 801620c:	f004 fdd3 	bl	801adb6 <USB_ReadDevAllInEpInterrupt>
 8016210:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8016212:	2300      	movs	r3, #0
 8016214:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8016216:	e0cd      	b.n	80163b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8016218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621a:	f003 0301 	and.w	r3, r3, #1
 801621e:	2b00      	cmp	r3, #0
 8016220:	f000 80c2 	beq.w	80163a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801622a:	b2d2      	uxtb	r2, r2
 801622c:	4611      	mov	r1, r2
 801622e:	4618      	mov	r0, r3
 8016230:	f004 fdf9 	bl	801ae26 <USB_ReadDevInEPInterrupt>
 8016234:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	f003 0301 	and.w	r3, r3, #1
 801623c:	2b00      	cmp	r3, #0
 801623e:	d057      	beq.n	80162f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	f003 030f 	and.w	r3, r3, #15
 8016246:	2201      	movs	r2, #1
 8016248:	fa02 f303 	lsl.w	r3, r2, r3
 801624c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	43db      	mvns	r3, r3
 801625a:	69f9      	ldr	r1, [r7, #28]
 801625c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016260:	4013      	ands	r3, r2
 8016262:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8016264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016266:	015a      	lsls	r2, r3, #5
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	4413      	add	r3, r2
 801626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016270:	461a      	mov	r2, r3
 8016272:	2301      	movs	r3, #1
 8016274:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	691b      	ldr	r3, [r3, #16]
 801627a:	2b01      	cmp	r3, #1
 801627c:	d132      	bne.n	80162e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801627e:	6879      	ldr	r1, [r7, #4]
 8016280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016282:	4613      	mov	r3, r2
 8016284:	00db      	lsls	r3, r3, #3
 8016286:	4413      	add	r3, r2
 8016288:	009b      	lsls	r3, r3, #2
 801628a:	440b      	add	r3, r1
 801628c:	334c      	adds	r3, #76	; 0x4c
 801628e:	6819      	ldr	r1, [r3, #0]
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016294:	4613      	mov	r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	4413      	add	r3, r2
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	4403      	add	r3, r0
 801629e:	3348      	adds	r3, #72	; 0x48
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	4419      	add	r1, r3
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162a8:	4613      	mov	r3, r2
 80162aa:	00db      	lsls	r3, r3, #3
 80162ac:	4413      	add	r3, r2
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	4403      	add	r3, r0
 80162b2:	334c      	adds	r3, #76	; 0x4c
 80162b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80162b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d113      	bne.n	80162e4 <HAL_PCD_IRQHandler+0x3a2>
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162c0:	4613      	mov	r3, r2
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	4413      	add	r3, r2
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	440b      	add	r3, r1
 80162ca:	3354      	adds	r3, #84	; 0x54
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d108      	bne.n	80162e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	6818      	ldr	r0, [r3, #0]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80162dc:	461a      	mov	r2, r3
 80162de:	2101      	movs	r1, #1
 80162e0:	f004 fe00 	bl	801aee4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80162e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	4619      	mov	r1, r3
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f007 f86f 	bl	801d3ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	f003 0308 	and.w	r3, r3, #8
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d008      	beq.n	801630c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80162fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fc:	015a      	lsls	r2, r3, #5
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	4413      	add	r3, r2
 8016302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016306:	461a      	mov	r2, r3
 8016308:	2308      	movs	r3, #8
 801630a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	f003 0310 	and.w	r3, r3, #16
 8016312:	2b00      	cmp	r3, #0
 8016314:	d008      	beq.n	8016328 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8016316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016318:	015a      	lsls	r2, r3, #5
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	4413      	add	r3, r2
 801631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016322:	461a      	mov	r2, r3
 8016324:	2310      	movs	r3, #16
 8016326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801632e:	2b00      	cmp	r3, #0
 8016330:	d008      	beq.n	8016344 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8016332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016334:	015a      	lsls	r2, r3, #5
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	4413      	add	r3, r2
 801633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801633e:	461a      	mov	r2, r3
 8016340:	2340      	movs	r3, #64	; 0x40
 8016342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	f003 0302 	and.w	r3, r3, #2
 801634a:	2b00      	cmp	r3, #0
 801634c:	d023      	beq.n	8016396 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 801634e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016350:	6a38      	ldr	r0, [r7, #32]
 8016352:	f003 fce1 	bl	8019d18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8016356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016358:	4613      	mov	r3, r2
 801635a:	00db      	lsls	r3, r3, #3
 801635c:	4413      	add	r3, r2
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	3338      	adds	r3, #56	; 0x38
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	4413      	add	r3, r2
 8016366:	3304      	adds	r3, #4
 8016368:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	78db      	ldrb	r3, [r3, #3]
 801636e:	2b01      	cmp	r3, #1
 8016370:	d108      	bne.n	8016384 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	2200      	movs	r2, #0
 8016376:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8016378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637a:	b2db      	uxtb	r3, r3
 801637c:	4619      	mov	r1, r3
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f007 f8bc 	bl	801d4fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8016384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016386:	015a      	lsls	r2, r3, #5
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	4413      	add	r3, r2
 801638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016390:	461a      	mov	r2, r3
 8016392:	2302      	movs	r3, #2
 8016394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8016396:	693b      	ldr	r3, [r7, #16]
 8016398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801639c:	2b00      	cmp	r3, #0
 801639e:	d003      	beq.n	80163a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80163a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 fcdb 	bl	8016d5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	3301      	adds	r3, #1
 80163ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80163ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b0:	085b      	lsrs	r3, r3, #1
 80163b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80163b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	f47f af2e 	bne.w	8016218 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4618      	mov	r0, r3
 80163c2:	f004 fccb 	bl	801ad5c <USB_ReadInterrupts>
 80163c6:	4603      	mov	r3, r0
 80163c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80163cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80163d0:	d122      	bne.n	8016418 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	69fa      	ldr	r2, [r7, #28]
 80163dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80163e0:	f023 0301 	bic.w	r3, r3, #1
 80163e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d108      	bne.n	8016402 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2200      	movs	r2, #0
 80163f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80163f8:	2100      	movs	r1, #0
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 fec2 	bl	8017184 <HAL_PCDEx_LPM_Callback>
 8016400:	e002      	b.n	8016408 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f007 f85a 	bl	801d4bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	695a      	ldr	r2, [r3, #20]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8016416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4618      	mov	r0, r3
 801641e:	f004 fc9d 	bl	801ad5c <USB_ReadInterrupts>
 8016422:	4603      	mov	r3, r0
 8016424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801642c:	d112      	bne.n	8016454 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016434:	689b      	ldr	r3, [r3, #8]
 8016436:	f003 0301 	and.w	r3, r3, #1
 801643a:	2b01      	cmp	r3, #1
 801643c:	d102      	bne.n	8016444 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f007 f816 	bl	801d470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	695a      	ldr	r2, [r3, #20]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8016452:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	4618      	mov	r0, r3
 801645a:	f004 fc7f 	bl	801ad5c <USB_ReadInterrupts>
 801645e:	4603      	mov	r3, r0
 8016460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016468:	f040 80b7 	bne.w	80165da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801646c:	69fb      	ldr	r3, [r7, #28]
 801646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	69fa      	ldr	r2, [r7, #28]
 8016476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801647a:	f023 0301 	bic.w	r3, r3, #1
 801647e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	2110      	movs	r1, #16
 8016486:	4618      	mov	r0, r3
 8016488:	f003 fc46 	bl	8019d18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801648c:	2300      	movs	r3, #0
 801648e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016490:	e046      	b.n	8016520 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	015a      	lsls	r2, r3, #5
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	4413      	add	r3, r2
 801649a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801649e:	461a      	mov	r2, r3
 80164a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80164a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80164a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a8:	015a      	lsls	r2, r3, #5
 80164aa:	69fb      	ldr	r3, [r7, #28]
 80164ac:	4413      	add	r3, r2
 80164ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164b6:	0151      	lsls	r1, r2, #5
 80164b8:	69fa      	ldr	r2, [r7, #28]
 80164ba:	440a      	add	r2, r1
 80164bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80164c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80164c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	015a      	lsls	r2, r3, #5
 80164ca:	69fb      	ldr	r3, [r7, #28]
 80164cc:	4413      	add	r3, r2
 80164ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164d2:	461a      	mov	r2, r3
 80164d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80164d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80164da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164dc:	015a      	lsls	r2, r3, #5
 80164de:	69fb      	ldr	r3, [r7, #28]
 80164e0:	4413      	add	r3, r2
 80164e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164ea:	0151      	lsls	r1, r2, #5
 80164ec:	69fa      	ldr	r2, [r7, #28]
 80164ee:	440a      	add	r2, r1
 80164f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80164f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	015a      	lsls	r2, r3, #5
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	4413      	add	r3, r2
 8016502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801650a:	0151      	lsls	r1, r2, #5
 801650c:	69fa      	ldr	r2, [r7, #28]
 801650e:	440a      	add	r2, r1
 8016510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016518:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651c:	3301      	adds	r3, #1
 801651e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016526:	429a      	cmp	r2, r3
 8016528:	d3b3      	bcc.n	8016492 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801652a:	69fb      	ldr	r3, [r7, #28]
 801652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016530:	69db      	ldr	r3, [r3, #28]
 8016532:	69fa      	ldr	r2, [r7, #28]
 8016534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016538:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801653c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016542:	2b00      	cmp	r3, #0
 8016544:	d016      	beq.n	8016574 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801654c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016550:	69fa      	ldr	r2, [r7, #28]
 8016552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016556:	f043 030b 	orr.w	r3, r3, #11
 801655a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016566:	69fa      	ldr	r2, [r7, #28]
 8016568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801656c:	f043 030b 	orr.w	r3, r3, #11
 8016570:	6453      	str	r3, [r2, #68]	; 0x44
 8016572:	e015      	b.n	80165a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801657a:	695b      	ldr	r3, [r3, #20]
 801657c:	69fa      	ldr	r2, [r7, #28]
 801657e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016582:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016586:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801658a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801658c:	69fb      	ldr	r3, [r7, #28]
 801658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016592:	691b      	ldr	r3, [r3, #16]
 8016594:	69fa      	ldr	r2, [r7, #28]
 8016596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801659a:	f043 030b 	orr.w	r3, r3, #11
 801659e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80165a0:	69fb      	ldr	r3, [r7, #28]
 80165a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	69fa      	ldr	r2, [r7, #28]
 80165aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80165ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80165b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6818      	ldr	r0, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	691b      	ldr	r3, [r3, #16]
 80165bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80165c4:	461a      	mov	r2, r3
 80165c6:	f004 fc8d 	bl	801aee4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	695a      	ldr	r2, [r3, #20]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80165d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4618      	mov	r0, r3
 80165e0:	f004 fbbc 	bl	801ad5c <USB_ReadInterrupts>
 80165e4:	4603      	mov	r3, r0
 80165e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80165ee:	d124      	bne.n	801663a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f004 fc52 	bl	801ae9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	4618      	mov	r0, r3
 8016600:	f003 fc07 	bl	8019e12 <USB_GetDevSpeed>
 8016604:	4603      	mov	r3, r0
 8016606:	461a      	mov	r2, r3
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681c      	ldr	r4, [r3, #0]
 8016610:	f001 fa28 	bl	8017a64 <HAL_RCC_GetHCLKFreq>
 8016614:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801661a:	b2db      	uxtb	r3, r3
 801661c:	461a      	mov	r2, r3
 801661e:	4620      	mov	r0, r4
 8016620:	f003 f906 	bl	8019830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f006 fefa 	bl	801d41e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	695a      	ldr	r2, [r3, #20]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8016638:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4618      	mov	r0, r3
 8016640:	f004 fb8c 	bl	801ad5c <USB_ReadInterrupts>
 8016644:	4603      	mov	r3, r0
 8016646:	f003 0308 	and.w	r3, r3, #8
 801664a:	2b08      	cmp	r3, #8
 801664c:	d10a      	bne.n	8016664 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f006 fed7 	bl	801d402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	695a      	ldr	r2, [r3, #20]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	f002 0208 	and.w	r2, r2, #8
 8016662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	4618      	mov	r0, r3
 801666a:	f004 fb77 	bl	801ad5c <USB_ReadInterrupts>
 801666e:	4603      	mov	r3, r0
 8016670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016674:	2b80      	cmp	r3, #128	; 0x80
 8016676:	d122      	bne.n	80166be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8016678:	6a3b      	ldr	r3, [r7, #32]
 801667a:	699b      	ldr	r3, [r3, #24]
 801667c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016680:	6a3b      	ldr	r3, [r7, #32]
 8016682:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016684:	2301      	movs	r3, #1
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
 8016688:	e014      	b.n	80166b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801668a:	6879      	ldr	r1, [r7, #4]
 801668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801668e:	4613      	mov	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	4413      	add	r3, r2
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	440b      	add	r3, r1
 8016698:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	2b01      	cmp	r3, #1
 80166a0:	d105      	bne.n	80166ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80166a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	4619      	mov	r1, r3
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f000 fb27 	bl	8016cfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80166ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b0:	3301      	adds	r3, #1
 80166b2:	627b      	str	r3, [r7, #36]	; 0x24
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d3e5      	bcc.n	801668a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	4618      	mov	r0, r3
 80166c4:	f004 fb4a 	bl	801ad5c <USB_ReadInterrupts>
 80166c8:	4603      	mov	r3, r0
 80166ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80166ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80166d2:	d13b      	bne.n	801674c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80166d4:	2301      	movs	r3, #1
 80166d6:	627b      	str	r3, [r7, #36]	; 0x24
 80166d8:	e02b      	b.n	8016732 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166dc:	015a      	lsls	r2, r3, #5
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	4413      	add	r3, r2
 80166e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80166ea:	6879      	ldr	r1, [r7, #4]
 80166ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166ee:	4613      	mov	r3, r2
 80166f0:	00db      	lsls	r3, r3, #3
 80166f2:	4413      	add	r3, r2
 80166f4:	009b      	lsls	r3, r3, #2
 80166f6:	440b      	add	r3, r1
 80166f8:	3340      	adds	r3, #64	; 0x40
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	d115      	bne.n	801672c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8016700:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8016702:	2b00      	cmp	r3, #0
 8016704:	da12      	bge.n	801672c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8016706:	6879      	ldr	r1, [r7, #4]
 8016708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801670a:	4613      	mov	r3, r2
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	4413      	add	r3, r2
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	440b      	add	r3, r1
 8016714:	333f      	adds	r3, #63	; 0x3f
 8016716:	2201      	movs	r2, #1
 8016718:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671c:	b2db      	uxtb	r3, r3
 801671e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016722:	b2db      	uxtb	r3, r3
 8016724:	4619      	mov	r1, r3
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f000 fae8 	bl	8016cfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801672e:	3301      	adds	r3, #1
 8016730:	627b      	str	r3, [r7, #36]	; 0x24
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016738:	429a      	cmp	r2, r3
 801673a:	d3ce      	bcc.n	80166da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	695a      	ldr	r2, [r3, #20]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801674a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	4618      	mov	r0, r3
 8016752:	f004 fb03 	bl	801ad5c <USB_ReadInterrupts>
 8016756:	4603      	mov	r3, r0
 8016758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801675c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016760:	d155      	bne.n	801680e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016762:	2301      	movs	r3, #1
 8016764:	627b      	str	r3, [r7, #36]	; 0x24
 8016766:	e045      	b.n	80167f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8016768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676a:	015a      	lsls	r2, r3, #5
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	4413      	add	r3, r2
 8016770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8016778:	6879      	ldr	r1, [r7, #4]
 801677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801677c:	4613      	mov	r3, r2
 801677e:	00db      	lsls	r3, r3, #3
 8016780:	4413      	add	r3, r2
 8016782:	009b      	lsls	r3, r3, #2
 8016784:	440b      	add	r3, r1
 8016786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	2b01      	cmp	r3, #1
 801678e:	d12e      	bne.n	80167ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8016790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8016792:	2b00      	cmp	r3, #0
 8016794:	da2b      	bge.n	80167ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8016796:	69bb      	ldr	r3, [r7, #24]
 8016798:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80167a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d121      	bne.n	80167ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167ae:	4613      	mov	r3, r2
 80167b0:	00db      	lsls	r3, r3, #3
 80167b2:	4413      	add	r3, r2
 80167b4:	009b      	lsls	r3, r3, #2
 80167b6:	440b      	add	r3, r1
 80167b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80167bc:	2201      	movs	r2, #1
 80167be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80167c0:	6a3b      	ldr	r3, [r7, #32]
 80167c2:	699b      	ldr	r3, [r3, #24]
 80167c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80167c8:	6a3b      	ldr	r3, [r7, #32]
 80167ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80167cc:	6a3b      	ldr	r3, [r7, #32]
 80167ce:	695b      	ldr	r3, [r3, #20]
 80167d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d10a      	bne.n	80167ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80167d8:	69fb      	ldr	r3, [r7, #28]
 80167da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167de:	685b      	ldr	r3, [r3, #4]
 80167e0:	69fa      	ldr	r2, [r7, #28]
 80167e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80167e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80167ea:	6053      	str	r3, [r2, #4]
            break;
 80167ec:	e007      	b.n	80167fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80167ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f0:	3301      	adds	r3, #1
 80167f2:	627b      	str	r3, [r7, #36]	; 0x24
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d3b4      	bcc.n	8016768 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	695a      	ldr	r2, [r3, #20]
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801680c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	4618      	mov	r0, r3
 8016814:	f004 faa2 	bl	801ad5c <USB_ReadInterrupts>
 8016818:	4603      	mov	r3, r0
 801681a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801681e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016822:	d10a      	bne.n	801683a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	f006 fe7b 	bl	801d520 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	695a      	ldr	r2, [r3, #20]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8016838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4618      	mov	r0, r3
 8016840:	f004 fa8c 	bl	801ad5c <USB_ReadInterrupts>
 8016844:	4603      	mov	r3, r0
 8016846:	f003 0304 	and.w	r3, r3, #4
 801684a:	2b04      	cmp	r3, #4
 801684c:	d115      	bne.n	801687a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8016856:	69bb      	ldr	r3, [r7, #24]
 8016858:	f003 0304 	and.w	r3, r3, #4
 801685c:	2b00      	cmp	r3, #0
 801685e:	d002      	beq.n	8016866 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f006 fe6b 	bl	801d53c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	6859      	ldr	r1, [r3, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	69ba      	ldr	r2, [r7, #24]
 8016872:	430a      	orrs	r2, r1
 8016874:	605a      	str	r2, [r3, #4]
 8016876:	e000      	b.n	801687a <HAL_PCD_IRQHandler+0x938>
      return;
 8016878:	bf00      	nop
    }
  }
}
 801687a:	3734      	adds	r7, #52	; 0x34
 801687c:	46bd      	mov	sp, r7
 801687e:	bd90      	pop	{r4, r7, pc}

08016880 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	460b      	mov	r3, r1
 801688a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016892:	2b01      	cmp	r3, #1
 8016894:	d101      	bne.n	801689a <HAL_PCD_SetAddress+0x1a>
 8016896:	2302      	movs	r3, #2
 8016898:	e013      	b.n	80168c2 <HAL_PCD_SetAddress+0x42>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2201      	movs	r2, #1
 801689e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	78fa      	ldrb	r2, [r7, #3]
 80168a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	78fa      	ldrb	r2, [r7, #3]
 80168b0:	4611      	mov	r1, r2
 80168b2:	4618      	mov	r0, r3
 80168b4:	f004 f9ea 	bl	801ac8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2200      	movs	r2, #0
 80168bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3708      	adds	r7, #8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}

080168ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80168ca:	b580      	push	{r7, lr}
 80168cc:	b084      	sub	sp, #16
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	6078      	str	r0, [r7, #4]
 80168d2:	4608      	mov	r0, r1
 80168d4:	4611      	mov	r1, r2
 80168d6:	461a      	mov	r2, r3
 80168d8:	4603      	mov	r3, r0
 80168da:	70fb      	strb	r3, [r7, #3]
 80168dc:	460b      	mov	r3, r1
 80168de:	803b      	strh	r3, [r7, #0]
 80168e0:	4613      	mov	r3, r2
 80168e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80168e4:	2300      	movs	r3, #0
 80168e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80168e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	da0f      	bge.n	8016910 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80168f0:	78fb      	ldrb	r3, [r7, #3]
 80168f2:	f003 020f 	and.w	r2, r3, #15
 80168f6:	4613      	mov	r3, r2
 80168f8:	00db      	lsls	r3, r3, #3
 80168fa:	4413      	add	r3, r2
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	3338      	adds	r3, #56	; 0x38
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	4413      	add	r3, r2
 8016904:	3304      	adds	r3, #4
 8016906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	2201      	movs	r2, #1
 801690c:	705a      	strb	r2, [r3, #1]
 801690e:	e00f      	b.n	8016930 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016910:	78fb      	ldrb	r3, [r7, #3]
 8016912:	f003 020f 	and.w	r2, r3, #15
 8016916:	4613      	mov	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	4413      	add	r3, r2
 801691c:	009b      	lsls	r3, r3, #2
 801691e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	4413      	add	r3, r2
 8016926:	3304      	adds	r3, #4
 8016928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	2200      	movs	r2, #0
 801692e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016930:	78fb      	ldrb	r3, [r7, #3]
 8016932:	f003 030f 	and.w	r3, r3, #15
 8016936:	b2da      	uxtb	r2, r3
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801693c:	883a      	ldrh	r2, [r7, #0]
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	78ba      	ldrb	r2, [r7, #2]
 8016946:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	785b      	ldrb	r3, [r3, #1]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d004      	beq.n	801695a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	b29a      	uxth	r2, r3
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801695a:	78bb      	ldrb	r3, [r7, #2]
 801695c:	2b02      	cmp	r3, #2
 801695e:	d102      	bne.n	8016966 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	2200      	movs	r2, #0
 8016964:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801696c:	2b01      	cmp	r3, #1
 801696e:	d101      	bne.n	8016974 <HAL_PCD_EP_Open+0xaa>
 8016970:	2302      	movs	r3, #2
 8016972:	e00e      	b.n	8016992 <HAL_PCD_EP_Open+0xc8>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2201      	movs	r2, #1
 8016978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	68f9      	ldr	r1, [r7, #12]
 8016982:	4618      	mov	r0, r3
 8016984:	f003 fa6a 	bl	8019e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2200      	movs	r2, #0
 801698c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8016990:	7afb      	ldrb	r3, [r7, #11]
}
 8016992:	4618      	mov	r0, r3
 8016994:	3710      	adds	r7, #16
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}

0801699a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801699a:	b580      	push	{r7, lr}
 801699c:	b084      	sub	sp, #16
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
 80169a2:	460b      	mov	r3, r1
 80169a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80169a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	da0f      	bge.n	80169ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80169ae:	78fb      	ldrb	r3, [r7, #3]
 80169b0:	f003 020f 	and.w	r2, r3, #15
 80169b4:	4613      	mov	r3, r2
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	4413      	add	r3, r2
 80169ba:	009b      	lsls	r3, r3, #2
 80169bc:	3338      	adds	r3, #56	; 0x38
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	4413      	add	r3, r2
 80169c2:	3304      	adds	r3, #4
 80169c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2201      	movs	r2, #1
 80169ca:	705a      	strb	r2, [r3, #1]
 80169cc:	e00f      	b.n	80169ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80169ce:	78fb      	ldrb	r3, [r7, #3]
 80169d0:	f003 020f 	and.w	r2, r3, #15
 80169d4:	4613      	mov	r3, r2
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80169e0:	687a      	ldr	r2, [r7, #4]
 80169e2:	4413      	add	r3, r2
 80169e4:	3304      	adds	r3, #4
 80169e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2200      	movs	r2, #0
 80169ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80169ee:	78fb      	ldrb	r3, [r7, #3]
 80169f0:	f003 030f 	and.w	r3, r3, #15
 80169f4:	b2da      	uxtb	r2, r3
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d101      	bne.n	8016a08 <HAL_PCD_EP_Close+0x6e>
 8016a04:	2302      	movs	r3, #2
 8016a06:	e00e      	b.n	8016a26 <HAL_PCD_EP_Close+0x8c>
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	68f9      	ldr	r1, [r7, #12]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f003 faa8 	bl	8019f6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3710      	adds	r7, #16
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}

08016a2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016a2e:	b580      	push	{r7, lr}
 8016a30:	b086      	sub	sp, #24
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	60f8      	str	r0, [r7, #12]
 8016a36:	607a      	str	r2, [r7, #4]
 8016a38:	603b      	str	r3, [r7, #0]
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016a3e:	7afb      	ldrb	r3, [r7, #11]
 8016a40:	f003 020f 	and.w	r2, r3, #15
 8016a44:	4613      	mov	r3, r2
 8016a46:	00db      	lsls	r3, r3, #3
 8016a48:	4413      	add	r3, r2
 8016a4a:	009b      	lsls	r3, r3, #2
 8016a4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	4413      	add	r3, r2
 8016a54:	3304      	adds	r3, #4
 8016a56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	687a      	ldr	r2, [r7, #4]
 8016a5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	683a      	ldr	r2, [r7, #0]
 8016a62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	2200      	movs	r2, #0
 8016a68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016a70:	7afb      	ldrb	r3, [r7, #11]
 8016a72:	f003 030f 	and.w	r3, r3, #15
 8016a76:	b2da      	uxtb	r2, r3
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	691b      	ldr	r3, [r3, #16]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d102      	bne.n	8016a8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016a8a:	7afb      	ldrb	r3, [r7, #11]
 8016a8c:	f003 030f 	and.w	r3, r3, #15
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d109      	bne.n	8016aa8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6818      	ldr	r0, [r3, #0]
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	691b      	ldr	r3, [r3, #16]
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	6979      	ldr	r1, [r7, #20]
 8016aa2:	f003 fd87 	bl	801a5b4 <USB_EP0StartXfer>
 8016aa6:	e008      	b.n	8016aba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	6818      	ldr	r0, [r3, #0]
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	691b      	ldr	r3, [r3, #16]
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	461a      	mov	r2, r3
 8016ab4:	6979      	ldr	r1, [r7, #20]
 8016ab6:	f003 fb35 	bl	801a124 <USB_EPStartXfer>
  }

  return HAL_OK;
 8016aba:	2300      	movs	r3, #0
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3718      	adds	r7, #24
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}

08016ac4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	460b      	mov	r3, r1
 8016ace:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8016ad0:	78fb      	ldrb	r3, [r7, #3]
 8016ad2:	f003 020f 	and.w	r2, r3, #15
 8016ad6:	6879      	ldr	r1, [r7, #4]
 8016ad8:	4613      	mov	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	4413      	add	r3, r2
 8016ade:	009b      	lsls	r3, r3, #2
 8016ae0:	440b      	add	r3, r1
 8016ae2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016ae6:	681b      	ldr	r3, [r3, #0]
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	370c      	adds	r7, #12
 8016aec:	46bd      	mov	sp, r7
 8016aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af2:	4770      	bx	lr

08016af4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	607a      	str	r2, [r7, #4]
 8016afe:	603b      	str	r3, [r7, #0]
 8016b00:	460b      	mov	r3, r1
 8016b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016b04:	7afb      	ldrb	r3, [r7, #11]
 8016b06:	f003 020f 	and.w	r2, r3, #15
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	4413      	add	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	3338      	adds	r3, #56	; 0x38
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	4413      	add	r3, r2
 8016b18:	3304      	adds	r3, #4
 8016b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	683a      	ldr	r2, [r7, #0]
 8016b26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	2201      	movs	r2, #1
 8016b32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016b34:	7afb      	ldrb	r3, [r7, #11]
 8016b36:	f003 030f 	and.w	r3, r3, #15
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	691b      	ldr	r3, [r3, #16]
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d102      	bne.n	8016b4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016b4e:	7afb      	ldrb	r3, [r7, #11]
 8016b50:	f003 030f 	and.w	r3, r3, #15
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d109      	bne.n	8016b6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	6818      	ldr	r0, [r3, #0]
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	691b      	ldr	r3, [r3, #16]
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	461a      	mov	r2, r3
 8016b64:	6979      	ldr	r1, [r7, #20]
 8016b66:	f003 fd25 	bl	801a5b4 <USB_EP0StartXfer>
 8016b6a:	e008      	b.n	8016b7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	6818      	ldr	r0, [r3, #0]
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	691b      	ldr	r3, [r3, #16]
 8016b74:	b2db      	uxtb	r3, r3
 8016b76:	461a      	mov	r2, r3
 8016b78:	6979      	ldr	r1, [r7, #20]
 8016b7a:	f003 fad3 	bl	801a124 <USB_EPStartXfer>
  }

  return HAL_OK;
 8016b7e:	2300      	movs	r3, #0
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3718      	adds	r7, #24
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	460b      	mov	r3, r1
 8016b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8016b94:	78fb      	ldrb	r3, [r7, #3]
 8016b96:	f003 020f 	and.w	r2, r3, #15
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d901      	bls.n	8016ba6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	e050      	b.n	8016c48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	da0f      	bge.n	8016bce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016bae:	78fb      	ldrb	r3, [r7, #3]
 8016bb0:	f003 020f 	and.w	r2, r3, #15
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	00db      	lsls	r3, r3, #3
 8016bb8:	4413      	add	r3, r2
 8016bba:	009b      	lsls	r3, r3, #2
 8016bbc:	3338      	adds	r3, #56	; 0x38
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	3304      	adds	r3, #4
 8016bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	2201      	movs	r2, #1
 8016bca:	705a      	strb	r2, [r3, #1]
 8016bcc:	e00d      	b.n	8016bea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8016bce:	78fa      	ldrb	r2, [r7, #3]
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	00db      	lsls	r3, r3, #3
 8016bd4:	4413      	add	r3, r2
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016bdc:	687a      	ldr	r2, [r7, #4]
 8016bde:	4413      	add	r3, r2
 8016be0:	3304      	adds	r3, #4
 8016be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	2200      	movs	r2, #0
 8016be8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	2201      	movs	r2, #1
 8016bee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016bf0:	78fb      	ldrb	r3, [r7, #3]
 8016bf2:	f003 030f 	and.w	r3, r3, #15
 8016bf6:	b2da      	uxtb	r2, r3
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016c02:	2b01      	cmp	r3, #1
 8016c04:	d101      	bne.n	8016c0a <HAL_PCD_EP_SetStall+0x82>
 8016c06:	2302      	movs	r3, #2
 8016c08:	e01e      	b.n	8016c48 <HAL_PCD_EP_SetStall+0xc0>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	68f9      	ldr	r1, [r7, #12]
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f003 ff63 	bl	801aae4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016c1e:	78fb      	ldrb	r3, [r7, #3]
 8016c20:	f003 030f 	and.w	r3, r3, #15
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d10a      	bne.n	8016c3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6818      	ldr	r0, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	691b      	ldr	r3, [r3, #16]
 8016c30:	b2d9      	uxtb	r1, r3
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016c38:	461a      	mov	r2, r3
 8016c3a:	f004 f953 	bl	801aee4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8016c46:	2300      	movs	r3, #0
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3710      	adds	r7, #16
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8016c5c:	78fb      	ldrb	r3, [r7, #3]
 8016c5e:	f003 020f 	and.w	r2, r3, #15
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d901      	bls.n	8016c6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	e042      	b.n	8016cf4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	da0f      	bge.n	8016c96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016c76:	78fb      	ldrb	r3, [r7, #3]
 8016c78:	f003 020f 	and.w	r2, r3, #15
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	4413      	add	r3, r2
 8016c82:	009b      	lsls	r3, r3, #2
 8016c84:	3338      	adds	r3, #56	; 0x38
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	4413      	add	r3, r2
 8016c8a:	3304      	adds	r3, #4
 8016c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2201      	movs	r2, #1
 8016c92:	705a      	strb	r2, [r3, #1]
 8016c94:	e00f      	b.n	8016cb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016c96:	78fb      	ldrb	r3, [r7, #3]
 8016c98:	f003 020f 	and.w	r2, r3, #15
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	4413      	add	r3, r2
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	4413      	add	r3, r2
 8016cac:	3304      	adds	r3, #4
 8016cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016cbc:	78fb      	ldrb	r3, [r7, #3]
 8016cbe:	f003 030f 	and.w	r3, r3, #15
 8016cc2:	b2da      	uxtb	r2, r3
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d101      	bne.n	8016cd6 <HAL_PCD_EP_ClrStall+0x86>
 8016cd2:	2302      	movs	r3, #2
 8016cd4:	e00e      	b.n	8016cf4 <HAL_PCD_EP_ClrStall+0xa4>
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2201      	movs	r2, #1
 8016cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	68f9      	ldr	r1, [r7, #12]
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f003 ff6b 	bl	801abc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2200      	movs	r2, #0
 8016cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8016cf2:	2300      	movs	r3, #0
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3710      	adds	r7, #16
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	460b      	mov	r3, r1
 8016d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8016d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	da0c      	bge.n	8016d2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016d10:	78fb      	ldrb	r3, [r7, #3]
 8016d12:	f003 020f 	and.w	r2, r3, #15
 8016d16:	4613      	mov	r3, r2
 8016d18:	00db      	lsls	r3, r3, #3
 8016d1a:	4413      	add	r3, r2
 8016d1c:	009b      	lsls	r3, r3, #2
 8016d1e:	3338      	adds	r3, #56	; 0x38
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	4413      	add	r3, r2
 8016d24:	3304      	adds	r3, #4
 8016d26:	60fb      	str	r3, [r7, #12]
 8016d28:	e00c      	b.n	8016d44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016d2a:	78fb      	ldrb	r3, [r7, #3]
 8016d2c:	f003 020f 	and.w	r2, r3, #15
 8016d30:	4613      	mov	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	4413      	add	r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	4413      	add	r3, r2
 8016d40:	3304      	adds	r3, #4
 8016d42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	68f9      	ldr	r1, [r7, #12]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f003 fd8a 	bl	801a864 <USB_EPStopXfer>
 8016d50:	4603      	mov	r3, r0
 8016d52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8016d54:	7afb      	ldrb	r3, [r7, #11]
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}

08016d5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8016d5e:	b580      	push	{r7, lr}
 8016d60:	b08a      	sub	sp, #40	; 0x28
 8016d62:	af02      	add	r7, sp, #8
 8016d64:	6078      	str	r0, [r7, #4]
 8016d66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8016d72:	683a      	ldr	r2, [r7, #0]
 8016d74:	4613      	mov	r3, r2
 8016d76:	00db      	lsls	r3, r3, #3
 8016d78:	4413      	add	r3, r2
 8016d7a:	009b      	lsls	r3, r3, #2
 8016d7c:	3338      	adds	r3, #56	; 0x38
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	4413      	add	r3, r2
 8016d82:	3304      	adds	r3, #4
 8016d84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	6a1a      	ldr	r2, [r3, #32]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	699b      	ldr	r3, [r3, #24]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d901      	bls.n	8016d96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8016d92:	2301      	movs	r3, #1
 8016d94:	e06c      	b.n	8016e70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	699a      	ldr	r2, [r3, #24]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	1ad3      	subs	r3, r2, r3
 8016da0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	69fa      	ldr	r2, [r7, #28]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d902      	bls.n	8016db2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	3303      	adds	r3, #3
 8016db6:	089b      	lsrs	r3, r3, #2
 8016db8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8016dba:	e02b      	b.n	8016e14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	699a      	ldr	r2, [r3, #24]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	6a1b      	ldr	r3, [r3, #32]
 8016dc4:	1ad3      	subs	r3, r2, r3
 8016dc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	68db      	ldr	r3, [r3, #12]
 8016dcc:	69fa      	ldr	r2, [r7, #28]
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d902      	bls.n	8016dd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	3303      	adds	r3, #3
 8016ddc:	089b      	lsrs	r3, r3, #2
 8016dde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	6919      	ldr	r1, [r3, #16]
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	b2da      	uxtb	r2, r3
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8016df0:	b2db      	uxtb	r3, r3
 8016df2:	9300      	str	r3, [sp, #0]
 8016df4:	4603      	mov	r3, r0
 8016df6:	6978      	ldr	r0, [r7, #20]
 8016df8:	f003 fdde 	bl	801a9b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	691a      	ldr	r2, [r3, #16]
 8016e00:	69fb      	ldr	r3, [r7, #28]
 8016e02:	441a      	add	r2, r3
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	6a1a      	ldr	r2, [r3, #32]
 8016e0c:	69fb      	ldr	r3, [r7, #28]
 8016e0e:	441a      	add	r2, r3
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	015a      	lsls	r2, r3, #5
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e20:	699b      	ldr	r3, [r3, #24]
 8016e22:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8016e24:	69ba      	ldr	r2, [r7, #24]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d809      	bhi.n	8016e3e <PCD_WriteEmptyTxFifo+0xe0>
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	6a1a      	ldr	r2, [r3, #32]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d203      	bcs.n	8016e3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	699b      	ldr	r3, [r3, #24]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1be      	bne.n	8016dbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	699a      	ldr	r2, [r3, #24]
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	6a1b      	ldr	r3, [r3, #32]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d811      	bhi.n	8016e6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	f003 030f 	and.w	r3, r3, #15
 8016e50:	2201      	movs	r2, #1
 8016e52:	fa02 f303 	lsl.w	r3, r2, r3
 8016e56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	43db      	mvns	r3, r3
 8016e64:	6939      	ldr	r1, [r7, #16]
 8016e66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016e6a:	4013      	ands	r3, r2
 8016e6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8016e6e:	2300      	movs	r3, #0
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3720      	adds	r7, #32
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b088      	sub	sp, #32
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	333c      	adds	r3, #60	; 0x3c
 8016e90:	3304      	adds	r3, #4
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	015a      	lsls	r2, r3, #5
 8016e9a:	69bb      	ldr	r3, [r7, #24]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ea2:	689b      	ldr	r3, [r3, #8]
 8016ea4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	691b      	ldr	r3, [r3, #16]
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	d17b      	bne.n	8016fa6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	f003 0308 	and.w	r3, r3, #8
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d015      	beq.n	8016ee4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	4a61      	ldr	r2, [pc, #388]	; (8017040 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	f240 80b9 	bls.w	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f000 80b3 	beq.w	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	015a      	lsls	r2, r3, #5
 8016ed2:	69bb      	ldr	r3, [r7, #24]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016eda:	461a      	mov	r2, r3
 8016edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016ee0:	6093      	str	r3, [r2, #8]
 8016ee2:	e0a7      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	f003 0320 	and.w	r3, r3, #32
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d009      	beq.n	8016f02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	015a      	lsls	r2, r3, #5
 8016ef2:	69bb      	ldr	r3, [r7, #24]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016efa:	461a      	mov	r2, r3
 8016efc:	2320      	movs	r3, #32
 8016efe:	6093      	str	r3, [r2, #8]
 8016f00:	e098      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	f040 8093 	bne.w	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8016f0e:	697b      	ldr	r3, [r7, #20]
 8016f10:	4a4b      	ldr	r2, [pc, #300]	; (8017040 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8016f12:	4293      	cmp	r3, r2
 8016f14:	d90f      	bls.n	8016f36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d00a      	beq.n	8016f36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	015a      	lsls	r2, r3, #5
 8016f24:	69bb      	ldr	r3, [r7, #24]
 8016f26:	4413      	add	r3, r2
 8016f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016f32:	6093      	str	r3, [r2, #8]
 8016f34:	e07e      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8016f36:	683a      	ldr	r2, [r7, #0]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	00db      	lsls	r3, r3, #3
 8016f3c:	4413      	add	r3, r2
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	4413      	add	r3, r2
 8016f48:	3304      	adds	r3, #4
 8016f4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	69da      	ldr	r2, [r3, #28]
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	0159      	lsls	r1, r3, #5
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	440b      	add	r3, r1
 8016f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016f5c:	691b      	ldr	r3, [r3, #16]
 8016f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f62:	1ad2      	subs	r2, r2, r3
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d114      	bne.n	8016f98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	699b      	ldr	r3, [r3, #24]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d109      	bne.n	8016f8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	6818      	ldr	r0, [r3, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016f80:	461a      	mov	r2, r3
 8016f82:	2101      	movs	r1, #1
 8016f84:	f003 ffae 	bl	801aee4 <USB_EP0_OutStart>
 8016f88:	e006      	b.n	8016f98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	691a      	ldr	r2, [r3, #16]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	6a1b      	ldr	r3, [r3, #32]
 8016f92:	441a      	add	r2, r3
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f006 f9fa 	bl	801d398 <HAL_PCD_DataOutStageCallback>
 8016fa4:	e046      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	4a26      	ldr	r2, [pc, #152]	; (8017044 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d124      	bne.n	8016ff8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8016fae:	693b      	ldr	r3, [r7, #16]
 8016fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d00a      	beq.n	8016fce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	015a      	lsls	r2, r3, #5
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	4413      	add	r3, r2
 8016fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016fca:	6093      	str	r3, [r2, #8]
 8016fcc:	e032      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	f003 0320 	and.w	r3, r3, #32
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d008      	beq.n	8016fea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	015a      	lsls	r2, r3, #5
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	4413      	add	r3, r2
 8016fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	2320      	movs	r3, #32
 8016fe8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	4619      	mov	r1, r3
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f006 f9d1 	bl	801d398 <HAL_PCD_DataOutStageCallback>
 8016ff6:	e01d      	b.n	8017034 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d114      	bne.n	8017028 <PCD_EP_OutXfrComplete_int+0x1b0>
 8016ffe:	6879      	ldr	r1, [r7, #4]
 8017000:	683a      	ldr	r2, [r7, #0]
 8017002:	4613      	mov	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	4413      	add	r3, r2
 8017008:	009b      	lsls	r3, r3, #2
 801700a:	440b      	add	r3, r1
 801700c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d108      	bne.n	8017028 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	6818      	ldr	r0, [r3, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017020:	461a      	mov	r2, r3
 8017022:	2100      	movs	r1, #0
 8017024:	f003 ff5e 	bl	801aee4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	b2db      	uxtb	r3, r3
 801702c:	4619      	mov	r1, r3
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f006 f9b2 	bl	801d398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8017034:	2300      	movs	r3, #0
}
 8017036:	4618      	mov	r0, r3
 8017038:	3720      	adds	r7, #32
 801703a:	46bd      	mov	sp, r7
 801703c:	bd80      	pop	{r7, pc}
 801703e:	bf00      	nop
 8017040:	4f54300a 	.word	0x4f54300a
 8017044:	4f54310a 	.word	0x4f54310a

08017048 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b086      	sub	sp, #24
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
 8017050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	333c      	adds	r3, #60	; 0x3c
 8017060:	3304      	adds	r3, #4
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	015a      	lsls	r2, r3, #5
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	4413      	add	r3, r2
 801706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017072:	689b      	ldr	r3, [r3, #8]
 8017074:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	4a15      	ldr	r2, [pc, #84]	; (80170d0 <PCD_EP_OutSetupPacket_int+0x88>)
 801707a:	4293      	cmp	r3, r2
 801707c:	d90e      	bls.n	801709c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017084:	2b00      	cmp	r3, #0
 8017086:	d009      	beq.n	801709c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	015a      	lsls	r2, r3, #5
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	4413      	add	r3, r2
 8017090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017094:	461a      	mov	r2, r3
 8017096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801709a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f006 f969 	bl	801d374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	4a0a      	ldr	r2, [pc, #40]	; (80170d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80170a6:	4293      	cmp	r3, r2
 80170a8:	d90c      	bls.n	80170c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	691b      	ldr	r3, [r3, #16]
 80170ae:	2b01      	cmp	r3, #1
 80170b0:	d108      	bne.n	80170c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6818      	ldr	r0, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80170bc:	461a      	mov	r2, r3
 80170be:	2101      	movs	r1, #1
 80170c0:	f003 ff10 	bl	801aee4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80170c4:	2300      	movs	r3, #0
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3718      	adds	r7, #24
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	4f54300a 	.word	0x4f54300a

080170d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80170d4:	b480      	push	{r7}
 80170d6:	b085      	sub	sp, #20
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
 80170dc:	460b      	mov	r3, r1
 80170de:	70fb      	strb	r3, [r7, #3]
 80170e0:	4613      	mov	r3, r2
 80170e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80170ec:	78fb      	ldrb	r3, [r7, #3]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d107      	bne.n	8017102 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80170f2:	883b      	ldrh	r3, [r7, #0]
 80170f4:	0419      	lsls	r1, r3, #16
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	68ba      	ldr	r2, [r7, #8]
 80170fc:	430a      	orrs	r2, r1
 80170fe:	629a      	str	r2, [r3, #40]	; 0x28
 8017100:	e028      	b.n	8017154 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017108:	0c1b      	lsrs	r3, r3, #16
 801710a:	68ba      	ldr	r2, [r7, #8]
 801710c:	4413      	add	r3, r2
 801710e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8017110:	2300      	movs	r3, #0
 8017112:	73fb      	strb	r3, [r7, #15]
 8017114:	e00d      	b.n	8017132 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	7bfb      	ldrb	r3, [r7, #15]
 801711c:	3340      	adds	r3, #64	; 0x40
 801711e:	009b      	lsls	r3, r3, #2
 8017120:	4413      	add	r3, r2
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	0c1b      	lsrs	r3, r3, #16
 8017126:	68ba      	ldr	r2, [r7, #8]
 8017128:	4413      	add	r3, r2
 801712a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801712c:	7bfb      	ldrb	r3, [r7, #15]
 801712e:	3301      	adds	r3, #1
 8017130:	73fb      	strb	r3, [r7, #15]
 8017132:	7bfa      	ldrb	r2, [r7, #15]
 8017134:	78fb      	ldrb	r3, [r7, #3]
 8017136:	3b01      	subs	r3, #1
 8017138:	429a      	cmp	r2, r3
 801713a:	d3ec      	bcc.n	8017116 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801713c:	883b      	ldrh	r3, [r7, #0]
 801713e:	0418      	lsls	r0, r3, #16
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	6819      	ldr	r1, [r3, #0]
 8017144:	78fb      	ldrb	r3, [r7, #3]
 8017146:	3b01      	subs	r3, #1
 8017148:	68ba      	ldr	r2, [r7, #8]
 801714a:	4302      	orrs	r2, r0
 801714c:	3340      	adds	r3, #64	; 0x40
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	440b      	add	r3, r1
 8017152:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8017154:	2300      	movs	r3, #0
}
 8017156:	4618      	mov	r0, r3
 8017158:	3714      	adds	r7, #20
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr

08017162 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8017162:	b480      	push	{r7}
 8017164:	b083      	sub	sp, #12
 8017166:	af00      	add	r7, sp, #0
 8017168:	6078      	str	r0, [r7, #4]
 801716a:	460b      	mov	r3, r1
 801716c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	887a      	ldrh	r2, [r7, #2]
 8017174:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8017176:	2300      	movs	r3, #0
}
 8017178:	4618      	mov	r0, r3
 801717a:	370c      	adds	r7, #12
 801717c:	46bd      	mov	sp, r7
 801717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017182:	4770      	bx	lr

08017184 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	460b      	mov	r3, r1
 801718e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8017190:	bf00      	nop
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d101      	bne.n	80171ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80171aa:	2301      	movs	r3, #1
 80171ac:	e267      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	f003 0301 	and.w	r3, r3, #1
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d075      	beq.n	80172a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80171ba:	4b88      	ldr	r3, [pc, #544]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	f003 030c 	and.w	r3, r3, #12
 80171c2:	2b04      	cmp	r3, #4
 80171c4:	d00c      	beq.n	80171e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80171c6:	4b85      	ldr	r3, [pc, #532]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80171c8:	689b      	ldr	r3, [r3, #8]
 80171ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80171ce:	2b08      	cmp	r3, #8
 80171d0:	d112      	bne.n	80171f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80171d2:	4b82      	ldr	r3, [pc, #520]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80171d4:	685b      	ldr	r3, [r3, #4]
 80171d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80171da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80171de:	d10b      	bne.n	80171f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80171e0:	4b7e      	ldr	r3, [pc, #504]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d05b      	beq.n	80172a4 <HAL_RCC_OscConfig+0x108>
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d157      	bne.n	80172a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80171f4:	2301      	movs	r3, #1
 80171f6:	e242      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	685b      	ldr	r3, [r3, #4]
 80171fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017200:	d106      	bne.n	8017210 <HAL_RCC_OscConfig+0x74>
 8017202:	4b76      	ldr	r3, [pc, #472]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	4a75      	ldr	r2, [pc, #468]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801720c:	6013      	str	r3, [r2, #0]
 801720e:	e01d      	b.n	801724c <HAL_RCC_OscConfig+0xb0>
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017218:	d10c      	bne.n	8017234 <HAL_RCC_OscConfig+0x98>
 801721a:	4b70      	ldr	r3, [pc, #448]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	4a6f      	ldr	r2, [pc, #444]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017224:	6013      	str	r3, [r2, #0]
 8017226:	4b6d      	ldr	r3, [pc, #436]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	4a6c      	ldr	r2, [pc, #432]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 801722c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017230:	6013      	str	r3, [r2, #0]
 8017232:	e00b      	b.n	801724c <HAL_RCC_OscConfig+0xb0>
 8017234:	4b69      	ldr	r3, [pc, #420]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	4a68      	ldr	r2, [pc, #416]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 801723a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801723e:	6013      	str	r3, [r2, #0]
 8017240:	4b66      	ldr	r3, [pc, #408]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	4a65      	ldr	r2, [pc, #404]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801724a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d013      	beq.n	801727c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017254:	f7fc fee8 	bl	8014028 <HAL_GetTick>
 8017258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801725a:	e008      	b.n	801726e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801725c:	f7fc fee4 	bl	8014028 <HAL_GetTick>
 8017260:	4602      	mov	r2, r0
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	1ad3      	subs	r3, r2, r3
 8017266:	2b64      	cmp	r3, #100	; 0x64
 8017268:	d901      	bls.n	801726e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801726a:	2303      	movs	r3, #3
 801726c:	e207      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801726e:	4b5b      	ldr	r3, [pc, #364]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017276:	2b00      	cmp	r3, #0
 8017278:	d0f0      	beq.n	801725c <HAL_RCC_OscConfig+0xc0>
 801727a:	e014      	b.n	80172a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801727c:	f7fc fed4 	bl	8014028 <HAL_GetTick>
 8017280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017282:	e008      	b.n	8017296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017284:	f7fc fed0 	bl	8014028 <HAL_GetTick>
 8017288:	4602      	mov	r2, r0
 801728a:	693b      	ldr	r3, [r7, #16]
 801728c:	1ad3      	subs	r3, r2, r3
 801728e:	2b64      	cmp	r3, #100	; 0x64
 8017290:	d901      	bls.n	8017296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017292:	2303      	movs	r3, #3
 8017294:	e1f3      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017296:	4b51      	ldr	r3, [pc, #324]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1f0      	bne.n	8017284 <HAL_RCC_OscConfig+0xe8>
 80172a2:	e000      	b.n	80172a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80172a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	f003 0302 	and.w	r3, r3, #2
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d063      	beq.n	801737a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80172b2:	4b4a      	ldr	r3, [pc, #296]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172b4:	689b      	ldr	r3, [r3, #8]
 80172b6:	f003 030c 	and.w	r3, r3, #12
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00b      	beq.n	80172d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80172be:	4b47      	ldr	r3, [pc, #284]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172c0:	689b      	ldr	r3, [r3, #8]
 80172c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80172c6:	2b08      	cmp	r3, #8
 80172c8:	d11c      	bne.n	8017304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80172ca:	4b44      	ldr	r3, [pc, #272]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172cc:	685b      	ldr	r3, [r3, #4]
 80172ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d116      	bne.n	8017304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80172d6:	4b41      	ldr	r3, [pc, #260]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	f003 0302 	and.w	r3, r3, #2
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d005      	beq.n	80172ee <HAL_RCC_OscConfig+0x152>
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	68db      	ldr	r3, [r3, #12]
 80172e6:	2b01      	cmp	r3, #1
 80172e8:	d001      	beq.n	80172ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80172ea:	2301      	movs	r3, #1
 80172ec:	e1c7      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172ee:	4b3b      	ldr	r3, [pc, #236]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	691b      	ldr	r3, [r3, #16]
 80172fa:	00db      	lsls	r3, r3, #3
 80172fc:	4937      	ldr	r1, [pc, #220]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80172fe:	4313      	orrs	r3, r2
 8017300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017302:	e03a      	b.n	801737a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	68db      	ldr	r3, [r3, #12]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d020      	beq.n	801734e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801730c:	4b34      	ldr	r3, [pc, #208]	; (80173e0 <HAL_RCC_OscConfig+0x244>)
 801730e:	2201      	movs	r2, #1
 8017310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017312:	f7fc fe89 	bl	8014028 <HAL_GetTick>
 8017316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017318:	e008      	b.n	801732c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801731a:	f7fc fe85 	bl	8014028 <HAL_GetTick>
 801731e:	4602      	mov	r2, r0
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	1ad3      	subs	r3, r2, r3
 8017324:	2b02      	cmp	r3, #2
 8017326:	d901      	bls.n	801732c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8017328:	2303      	movs	r3, #3
 801732a:	e1a8      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801732c:	4b2b      	ldr	r3, [pc, #172]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	f003 0302 	and.w	r3, r3, #2
 8017334:	2b00      	cmp	r3, #0
 8017336:	d0f0      	beq.n	801731a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017338:	4b28      	ldr	r3, [pc, #160]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	691b      	ldr	r3, [r3, #16]
 8017344:	00db      	lsls	r3, r3, #3
 8017346:	4925      	ldr	r1, [pc, #148]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017348:	4313      	orrs	r3, r2
 801734a:	600b      	str	r3, [r1, #0]
 801734c:	e015      	b.n	801737a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801734e:	4b24      	ldr	r3, [pc, #144]	; (80173e0 <HAL_RCC_OscConfig+0x244>)
 8017350:	2200      	movs	r2, #0
 8017352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017354:	f7fc fe68 	bl	8014028 <HAL_GetTick>
 8017358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801735a:	e008      	b.n	801736e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801735c:	f7fc fe64 	bl	8014028 <HAL_GetTick>
 8017360:	4602      	mov	r2, r0
 8017362:	693b      	ldr	r3, [r7, #16]
 8017364:	1ad3      	subs	r3, r2, r3
 8017366:	2b02      	cmp	r3, #2
 8017368:	d901      	bls.n	801736e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801736a:	2303      	movs	r3, #3
 801736c:	e187      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801736e:	4b1b      	ldr	r3, [pc, #108]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	f003 0302 	and.w	r3, r3, #2
 8017376:	2b00      	cmp	r3, #0
 8017378:	d1f0      	bne.n	801735c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	f003 0308 	and.w	r3, r3, #8
 8017382:	2b00      	cmp	r3, #0
 8017384:	d036      	beq.n	80173f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	695b      	ldr	r3, [r3, #20]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d016      	beq.n	80173bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801738e:	4b15      	ldr	r3, [pc, #84]	; (80173e4 <HAL_RCC_OscConfig+0x248>)
 8017390:	2201      	movs	r2, #1
 8017392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017394:	f7fc fe48 	bl	8014028 <HAL_GetTick>
 8017398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801739a:	e008      	b.n	80173ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801739c:	f7fc fe44 	bl	8014028 <HAL_GetTick>
 80173a0:	4602      	mov	r2, r0
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	2b02      	cmp	r3, #2
 80173a8:	d901      	bls.n	80173ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80173aa:	2303      	movs	r3, #3
 80173ac:	e167      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80173ae:	4b0b      	ldr	r3, [pc, #44]	; (80173dc <HAL_RCC_OscConfig+0x240>)
 80173b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80173b2:	f003 0302 	and.w	r3, r3, #2
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d0f0      	beq.n	801739c <HAL_RCC_OscConfig+0x200>
 80173ba:	e01b      	b.n	80173f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80173bc:	4b09      	ldr	r3, [pc, #36]	; (80173e4 <HAL_RCC_OscConfig+0x248>)
 80173be:	2200      	movs	r2, #0
 80173c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80173c2:	f7fc fe31 	bl	8014028 <HAL_GetTick>
 80173c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80173c8:	e00e      	b.n	80173e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80173ca:	f7fc fe2d 	bl	8014028 <HAL_GetTick>
 80173ce:	4602      	mov	r2, r0
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	1ad3      	subs	r3, r2, r3
 80173d4:	2b02      	cmp	r3, #2
 80173d6:	d907      	bls.n	80173e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80173d8:	2303      	movs	r3, #3
 80173da:	e150      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
 80173dc:	40023800 	.word	0x40023800
 80173e0:	42470000 	.word	0x42470000
 80173e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80173e8:	4b88      	ldr	r3, [pc, #544]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80173ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80173ec:	f003 0302 	and.w	r3, r3, #2
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d1ea      	bne.n	80173ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f003 0304 	and.w	r3, r3, #4
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	f000 8097 	beq.w	8017530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017402:	2300      	movs	r3, #0
 8017404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017406:	4b81      	ldr	r3, [pc, #516]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801740a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801740e:	2b00      	cmp	r3, #0
 8017410:	d10f      	bne.n	8017432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017412:	2300      	movs	r3, #0
 8017414:	60bb      	str	r3, [r7, #8]
 8017416:	4b7d      	ldr	r3, [pc, #500]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801741a:	4a7c      	ldr	r2, [pc, #496]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801741c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017420:	6413      	str	r3, [r2, #64]	; 0x40
 8017422:	4b7a      	ldr	r3, [pc, #488]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801742a:	60bb      	str	r3, [r7, #8]
 801742c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801742e:	2301      	movs	r3, #1
 8017430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017432:	4b77      	ldr	r3, [pc, #476]	; (8017610 <HAL_RCC_OscConfig+0x474>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801743a:	2b00      	cmp	r3, #0
 801743c:	d118      	bne.n	8017470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801743e:	4b74      	ldr	r3, [pc, #464]	; (8017610 <HAL_RCC_OscConfig+0x474>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	4a73      	ldr	r2, [pc, #460]	; (8017610 <HAL_RCC_OscConfig+0x474>)
 8017444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801744a:	f7fc fded 	bl	8014028 <HAL_GetTick>
 801744e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017450:	e008      	b.n	8017464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017452:	f7fc fde9 	bl	8014028 <HAL_GetTick>
 8017456:	4602      	mov	r2, r0
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	2b02      	cmp	r3, #2
 801745e:	d901      	bls.n	8017464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8017460:	2303      	movs	r3, #3
 8017462:	e10c      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017464:	4b6a      	ldr	r3, [pc, #424]	; (8017610 <HAL_RCC_OscConfig+0x474>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801746c:	2b00      	cmp	r3, #0
 801746e:	d0f0      	beq.n	8017452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	689b      	ldr	r3, [r3, #8]
 8017474:	2b01      	cmp	r3, #1
 8017476:	d106      	bne.n	8017486 <HAL_RCC_OscConfig+0x2ea>
 8017478:	4b64      	ldr	r3, [pc, #400]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801747c:	4a63      	ldr	r2, [pc, #396]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801747e:	f043 0301 	orr.w	r3, r3, #1
 8017482:	6713      	str	r3, [r2, #112]	; 0x70
 8017484:	e01c      	b.n	80174c0 <HAL_RCC_OscConfig+0x324>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	689b      	ldr	r3, [r3, #8]
 801748a:	2b05      	cmp	r3, #5
 801748c:	d10c      	bne.n	80174a8 <HAL_RCC_OscConfig+0x30c>
 801748e:	4b5f      	ldr	r3, [pc, #380]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017492:	4a5e      	ldr	r2, [pc, #376]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017494:	f043 0304 	orr.w	r3, r3, #4
 8017498:	6713      	str	r3, [r2, #112]	; 0x70
 801749a:	4b5c      	ldr	r3, [pc, #368]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801749e:	4a5b      	ldr	r2, [pc, #364]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174a0:	f043 0301 	orr.w	r3, r3, #1
 80174a4:	6713      	str	r3, [r2, #112]	; 0x70
 80174a6:	e00b      	b.n	80174c0 <HAL_RCC_OscConfig+0x324>
 80174a8:	4b58      	ldr	r3, [pc, #352]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174ac:	4a57      	ldr	r2, [pc, #348]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174ae:	f023 0301 	bic.w	r3, r3, #1
 80174b2:	6713      	str	r3, [r2, #112]	; 0x70
 80174b4:	4b55      	ldr	r3, [pc, #340]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174b8:	4a54      	ldr	r2, [pc, #336]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174ba:	f023 0304 	bic.w	r3, r3, #4
 80174be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	689b      	ldr	r3, [r3, #8]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d015      	beq.n	80174f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80174c8:	f7fc fdae 	bl	8014028 <HAL_GetTick>
 80174cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80174ce:	e00a      	b.n	80174e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80174d0:	f7fc fdaa 	bl	8014028 <HAL_GetTick>
 80174d4:	4602      	mov	r2, r0
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	1ad3      	subs	r3, r2, r3
 80174da:	f241 3288 	movw	r2, #5000	; 0x1388
 80174de:	4293      	cmp	r3, r2
 80174e0:	d901      	bls.n	80174e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80174e2:	2303      	movs	r3, #3
 80174e4:	e0cb      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80174e6:	4b49      	ldr	r3, [pc, #292]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80174e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174ea:	f003 0302 	and.w	r3, r3, #2
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d0ee      	beq.n	80174d0 <HAL_RCC_OscConfig+0x334>
 80174f2:	e014      	b.n	801751e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80174f4:	f7fc fd98 	bl	8014028 <HAL_GetTick>
 80174f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80174fa:	e00a      	b.n	8017512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80174fc:	f7fc fd94 	bl	8014028 <HAL_GetTick>
 8017500:	4602      	mov	r2, r0
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	1ad3      	subs	r3, r2, r3
 8017506:	f241 3288 	movw	r2, #5000	; 0x1388
 801750a:	4293      	cmp	r3, r2
 801750c:	d901      	bls.n	8017512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801750e:	2303      	movs	r3, #3
 8017510:	e0b5      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017512:	4b3e      	ldr	r3, [pc, #248]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017516:	f003 0302 	and.w	r3, r3, #2
 801751a:	2b00      	cmp	r3, #0
 801751c:	d1ee      	bne.n	80174fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801751e:	7dfb      	ldrb	r3, [r7, #23]
 8017520:	2b01      	cmp	r3, #1
 8017522:	d105      	bne.n	8017530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017524:	4b39      	ldr	r3, [pc, #228]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017528:	4a38      	ldr	r2, [pc, #224]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801752a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801752e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	699b      	ldr	r3, [r3, #24]
 8017534:	2b00      	cmp	r3, #0
 8017536:	f000 80a1 	beq.w	801767c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801753a:	4b34      	ldr	r3, [pc, #208]	; (801760c <HAL_RCC_OscConfig+0x470>)
 801753c:	689b      	ldr	r3, [r3, #8]
 801753e:	f003 030c 	and.w	r3, r3, #12
 8017542:	2b08      	cmp	r3, #8
 8017544:	d05c      	beq.n	8017600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	699b      	ldr	r3, [r3, #24]
 801754a:	2b02      	cmp	r3, #2
 801754c:	d141      	bne.n	80175d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801754e:	4b31      	ldr	r3, [pc, #196]	; (8017614 <HAL_RCC_OscConfig+0x478>)
 8017550:	2200      	movs	r2, #0
 8017552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017554:	f7fc fd68 	bl	8014028 <HAL_GetTick>
 8017558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801755a:	e008      	b.n	801756e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801755c:	f7fc fd64 	bl	8014028 <HAL_GetTick>
 8017560:	4602      	mov	r2, r0
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	2b02      	cmp	r3, #2
 8017568:	d901      	bls.n	801756e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801756a:	2303      	movs	r3, #3
 801756c:	e087      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801756e:	4b27      	ldr	r3, [pc, #156]	; (801760c <HAL_RCC_OscConfig+0x470>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017576:	2b00      	cmp	r3, #0
 8017578:	d1f0      	bne.n	801755c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	69da      	ldr	r2, [r3, #28]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	6a1b      	ldr	r3, [r3, #32]
 8017582:	431a      	orrs	r2, r3
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017588:	019b      	lsls	r3, r3, #6
 801758a:	431a      	orrs	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017590:	085b      	lsrs	r3, r3, #1
 8017592:	3b01      	subs	r3, #1
 8017594:	041b      	lsls	r3, r3, #16
 8017596:	431a      	orrs	r2, r3
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801759c:	061b      	lsls	r3, r3, #24
 801759e:	491b      	ldr	r1, [pc, #108]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80175a0:	4313      	orrs	r3, r2
 80175a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80175a4:	4b1b      	ldr	r3, [pc, #108]	; (8017614 <HAL_RCC_OscConfig+0x478>)
 80175a6:	2201      	movs	r2, #1
 80175a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80175aa:	f7fc fd3d 	bl	8014028 <HAL_GetTick>
 80175ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80175b0:	e008      	b.n	80175c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80175b2:	f7fc fd39 	bl	8014028 <HAL_GetTick>
 80175b6:	4602      	mov	r2, r0
 80175b8:	693b      	ldr	r3, [r7, #16]
 80175ba:	1ad3      	subs	r3, r2, r3
 80175bc:	2b02      	cmp	r3, #2
 80175be:	d901      	bls.n	80175c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80175c0:	2303      	movs	r3, #3
 80175c2:	e05c      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80175c4:	4b11      	ldr	r3, [pc, #68]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d0f0      	beq.n	80175b2 <HAL_RCC_OscConfig+0x416>
 80175d0:	e054      	b.n	801767c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80175d2:	4b10      	ldr	r3, [pc, #64]	; (8017614 <HAL_RCC_OscConfig+0x478>)
 80175d4:	2200      	movs	r2, #0
 80175d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80175d8:	f7fc fd26 	bl	8014028 <HAL_GetTick>
 80175dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80175de:	e008      	b.n	80175f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80175e0:	f7fc fd22 	bl	8014028 <HAL_GetTick>
 80175e4:	4602      	mov	r2, r0
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	1ad3      	subs	r3, r2, r3
 80175ea:	2b02      	cmp	r3, #2
 80175ec:	d901      	bls.n	80175f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80175ee:	2303      	movs	r3, #3
 80175f0:	e045      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80175f2:	4b06      	ldr	r3, [pc, #24]	; (801760c <HAL_RCC_OscConfig+0x470>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1f0      	bne.n	80175e0 <HAL_RCC_OscConfig+0x444>
 80175fe:	e03d      	b.n	801767c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	699b      	ldr	r3, [r3, #24]
 8017604:	2b01      	cmp	r3, #1
 8017606:	d107      	bne.n	8017618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8017608:	2301      	movs	r3, #1
 801760a:	e038      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
 801760c:	40023800 	.word	0x40023800
 8017610:	40007000 	.word	0x40007000
 8017614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8017618:	4b1b      	ldr	r3, [pc, #108]	; (8017688 <HAL_RCC_OscConfig+0x4ec>)
 801761a:	685b      	ldr	r3, [r3, #4]
 801761c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	699b      	ldr	r3, [r3, #24]
 8017622:	2b01      	cmp	r3, #1
 8017624:	d028      	beq.n	8017678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017630:	429a      	cmp	r2, r3
 8017632:	d121      	bne.n	8017678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801763e:	429a      	cmp	r2, r3
 8017640:	d11a      	bne.n	8017678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017642:	68fa      	ldr	r2, [r7, #12]
 8017644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017648:	4013      	ands	r3, r2
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801764e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017650:	4293      	cmp	r3, r2
 8017652:	d111      	bne.n	8017678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801765e:	085b      	lsrs	r3, r3, #1
 8017660:	3b01      	subs	r3, #1
 8017662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017664:	429a      	cmp	r2, r3
 8017666:	d107      	bne.n	8017678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017674:	429a      	cmp	r2, r3
 8017676:	d001      	beq.n	801767c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8017678:	2301      	movs	r3, #1
 801767a:	e000      	b.n	801767e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801767c:	2300      	movs	r3, #0
}
 801767e:	4618      	mov	r0, r3
 8017680:	3718      	adds	r7, #24
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
 8017686:	bf00      	nop
 8017688:	40023800 	.word	0x40023800

0801768c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
 8017694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d101      	bne.n	80176a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801769c:	2301      	movs	r3, #1
 801769e:	e0cc      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80176a0:	4b68      	ldr	r3, [pc, #416]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f003 0307 	and.w	r3, r3, #7
 80176a8:	683a      	ldr	r2, [r7, #0]
 80176aa:	429a      	cmp	r2, r3
 80176ac:	d90c      	bls.n	80176c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80176ae:	4b65      	ldr	r3, [pc, #404]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80176b0:	683a      	ldr	r2, [r7, #0]
 80176b2:	b2d2      	uxtb	r2, r2
 80176b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80176b6:	4b63      	ldr	r3, [pc, #396]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	f003 0307 	and.w	r3, r3, #7
 80176be:	683a      	ldr	r2, [r7, #0]
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d001      	beq.n	80176c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80176c4:	2301      	movs	r3, #1
 80176c6:	e0b8      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	f003 0302 	and.w	r3, r3, #2
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d020      	beq.n	8017716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f003 0304 	and.w	r3, r3, #4
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d005      	beq.n	80176ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80176e0:	4b59      	ldr	r3, [pc, #356]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80176e2:	689b      	ldr	r3, [r3, #8]
 80176e4:	4a58      	ldr	r2, [pc, #352]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80176e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80176ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f003 0308 	and.w	r3, r3, #8
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d005      	beq.n	8017704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80176f8:	4b53      	ldr	r3, [pc, #332]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80176fa:	689b      	ldr	r3, [r3, #8]
 80176fc:	4a52      	ldr	r2, [pc, #328]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80176fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8017702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017704:	4b50      	ldr	r3, [pc, #320]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 8017706:	689b      	ldr	r3, [r3, #8]
 8017708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	689b      	ldr	r3, [r3, #8]
 8017710:	494d      	ldr	r1, [pc, #308]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 8017712:	4313      	orrs	r3, r2
 8017714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	f003 0301 	and.w	r3, r3, #1
 801771e:	2b00      	cmp	r3, #0
 8017720:	d044      	beq.n	80177ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	685b      	ldr	r3, [r3, #4]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d107      	bne.n	801773a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801772a:	4b47      	ldr	r3, [pc, #284]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017732:	2b00      	cmp	r3, #0
 8017734:	d119      	bne.n	801776a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017736:	2301      	movs	r3, #1
 8017738:	e07f      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	2b02      	cmp	r3, #2
 8017740:	d003      	beq.n	801774a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017746:	2b03      	cmp	r3, #3
 8017748:	d107      	bne.n	801775a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801774a:	4b3f      	ldr	r3, [pc, #252]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017752:	2b00      	cmp	r3, #0
 8017754:	d109      	bne.n	801776a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017756:	2301      	movs	r3, #1
 8017758:	e06f      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801775a:	4b3b      	ldr	r3, [pc, #236]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f003 0302 	and.w	r3, r3, #2
 8017762:	2b00      	cmp	r3, #0
 8017764:	d101      	bne.n	801776a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017766:	2301      	movs	r3, #1
 8017768:	e067      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801776a:	4b37      	ldr	r3, [pc, #220]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801776c:	689b      	ldr	r3, [r3, #8]
 801776e:	f023 0203 	bic.w	r2, r3, #3
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	685b      	ldr	r3, [r3, #4]
 8017776:	4934      	ldr	r1, [pc, #208]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 8017778:	4313      	orrs	r3, r2
 801777a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801777c:	f7fc fc54 	bl	8014028 <HAL_GetTick>
 8017780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017782:	e00a      	b.n	801779a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017784:	f7fc fc50 	bl	8014028 <HAL_GetTick>
 8017788:	4602      	mov	r2, r0
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	1ad3      	subs	r3, r2, r3
 801778e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017792:	4293      	cmp	r3, r2
 8017794:	d901      	bls.n	801779a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8017796:	2303      	movs	r3, #3
 8017798:	e04f      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801779a:	4b2b      	ldr	r3, [pc, #172]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801779c:	689b      	ldr	r3, [r3, #8]
 801779e:	f003 020c 	and.w	r2, r3, #12
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	009b      	lsls	r3, r3, #2
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d1eb      	bne.n	8017784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80177ac:	4b25      	ldr	r3, [pc, #148]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f003 0307 	and.w	r3, r3, #7
 80177b4:	683a      	ldr	r2, [r7, #0]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d20c      	bcs.n	80177d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80177ba:	4b22      	ldr	r3, [pc, #136]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80177bc:	683a      	ldr	r2, [r7, #0]
 80177be:	b2d2      	uxtb	r2, r2
 80177c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80177c2:	4b20      	ldr	r3, [pc, #128]	; (8017844 <HAL_RCC_ClockConfig+0x1b8>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f003 0307 	and.w	r3, r3, #7
 80177ca:	683a      	ldr	r2, [r7, #0]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d001      	beq.n	80177d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80177d0:	2301      	movs	r3, #1
 80177d2:	e032      	b.n	801783a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f003 0304 	and.w	r3, r3, #4
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d008      	beq.n	80177f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80177e0:	4b19      	ldr	r3, [pc, #100]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80177e2:	689b      	ldr	r3, [r3, #8]
 80177e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	4916      	ldr	r1, [pc, #88]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 80177ee:	4313      	orrs	r3, r2
 80177f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	f003 0308 	and.w	r3, r3, #8
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d009      	beq.n	8017812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80177fe:	4b12      	ldr	r3, [pc, #72]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 8017800:	689b      	ldr	r3, [r3, #8]
 8017802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	691b      	ldr	r3, [r3, #16]
 801780a:	00db      	lsls	r3, r3, #3
 801780c:	490e      	ldr	r1, [pc, #56]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801780e:	4313      	orrs	r3, r2
 8017810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017812:	f000 f821 	bl	8017858 <HAL_RCC_GetSysClockFreq>
 8017816:	4602      	mov	r2, r0
 8017818:	4b0b      	ldr	r3, [pc, #44]	; (8017848 <HAL_RCC_ClockConfig+0x1bc>)
 801781a:	689b      	ldr	r3, [r3, #8]
 801781c:	091b      	lsrs	r3, r3, #4
 801781e:	f003 030f 	and.w	r3, r3, #15
 8017822:	490a      	ldr	r1, [pc, #40]	; (801784c <HAL_RCC_ClockConfig+0x1c0>)
 8017824:	5ccb      	ldrb	r3, [r1, r3]
 8017826:	fa22 f303 	lsr.w	r3, r2, r3
 801782a:	4a09      	ldr	r2, [pc, #36]	; (8017850 <HAL_RCC_ClockConfig+0x1c4>)
 801782c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801782e:	4b09      	ldr	r3, [pc, #36]	; (8017854 <HAL_RCC_ClockConfig+0x1c8>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	4618      	mov	r0, r3
 8017834:	f7fc fbb4 	bl	8013fa0 <HAL_InitTick>

  return HAL_OK;
 8017838:	2300      	movs	r3, #0
}
 801783a:	4618      	mov	r0, r3
 801783c:	3710      	adds	r7, #16
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}
 8017842:	bf00      	nop
 8017844:	40023c00 	.word	0x40023c00
 8017848:	40023800 	.word	0x40023800
 801784c:	08023c0c 	.word	0x08023c0c
 8017850:	200005f0 	.word	0x200005f0
 8017854:	200005f4 	.word	0x200005f4

08017858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801785c:	b094      	sub	sp, #80	; 0x50
 801785e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8017860:	2300      	movs	r3, #0
 8017862:	647b      	str	r3, [r7, #68]	; 0x44
 8017864:	2300      	movs	r3, #0
 8017866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017868:	2300      	movs	r3, #0
 801786a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801786c:	2300      	movs	r3, #0
 801786e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017870:	4b79      	ldr	r3, [pc, #484]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8017872:	689b      	ldr	r3, [r3, #8]
 8017874:	f003 030c 	and.w	r3, r3, #12
 8017878:	2b08      	cmp	r3, #8
 801787a:	d00d      	beq.n	8017898 <HAL_RCC_GetSysClockFreq+0x40>
 801787c:	2b08      	cmp	r3, #8
 801787e:	f200 80e1 	bhi.w	8017a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8017882:	2b00      	cmp	r3, #0
 8017884:	d002      	beq.n	801788c <HAL_RCC_GetSysClockFreq+0x34>
 8017886:	2b04      	cmp	r3, #4
 8017888:	d003      	beq.n	8017892 <HAL_RCC_GetSysClockFreq+0x3a>
 801788a:	e0db      	b.n	8017a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801788c:	4b73      	ldr	r3, [pc, #460]	; (8017a5c <HAL_RCC_GetSysClockFreq+0x204>)
 801788e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8017890:	e0db      	b.n	8017a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017892:	4b73      	ldr	r3, [pc, #460]	; (8017a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8017894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017896:	e0d8      	b.n	8017a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017898:	4b6f      	ldr	r3, [pc, #444]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80178a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80178a2:	4b6d      	ldr	r3, [pc, #436]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d063      	beq.n	8017976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80178ae:	4b6a      	ldr	r3, [pc, #424]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	099b      	lsrs	r3, r3, #6
 80178b4:	2200      	movs	r2, #0
 80178b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80178b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80178ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178c0:	633b      	str	r3, [r7, #48]	; 0x30
 80178c2:	2300      	movs	r3, #0
 80178c4:	637b      	str	r3, [r7, #52]	; 0x34
 80178c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80178ca:	4622      	mov	r2, r4
 80178cc:	462b      	mov	r3, r5
 80178ce:	f04f 0000 	mov.w	r0, #0
 80178d2:	f04f 0100 	mov.w	r1, #0
 80178d6:	0159      	lsls	r1, r3, #5
 80178d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80178dc:	0150      	lsls	r0, r2, #5
 80178de:	4602      	mov	r2, r0
 80178e0:	460b      	mov	r3, r1
 80178e2:	4621      	mov	r1, r4
 80178e4:	1a51      	subs	r1, r2, r1
 80178e6:	6139      	str	r1, [r7, #16]
 80178e8:	4629      	mov	r1, r5
 80178ea:	eb63 0301 	sbc.w	r3, r3, r1
 80178ee:	617b      	str	r3, [r7, #20]
 80178f0:	f04f 0200 	mov.w	r2, #0
 80178f4:	f04f 0300 	mov.w	r3, #0
 80178f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80178fc:	4659      	mov	r1, fp
 80178fe:	018b      	lsls	r3, r1, #6
 8017900:	4651      	mov	r1, sl
 8017902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8017906:	4651      	mov	r1, sl
 8017908:	018a      	lsls	r2, r1, #6
 801790a:	4651      	mov	r1, sl
 801790c:	ebb2 0801 	subs.w	r8, r2, r1
 8017910:	4659      	mov	r1, fp
 8017912:	eb63 0901 	sbc.w	r9, r3, r1
 8017916:	f04f 0200 	mov.w	r2, #0
 801791a:	f04f 0300 	mov.w	r3, #0
 801791e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801792a:	4690      	mov	r8, r2
 801792c:	4699      	mov	r9, r3
 801792e:	4623      	mov	r3, r4
 8017930:	eb18 0303 	adds.w	r3, r8, r3
 8017934:	60bb      	str	r3, [r7, #8]
 8017936:	462b      	mov	r3, r5
 8017938:	eb49 0303 	adc.w	r3, r9, r3
 801793c:	60fb      	str	r3, [r7, #12]
 801793e:	f04f 0200 	mov.w	r2, #0
 8017942:	f04f 0300 	mov.w	r3, #0
 8017946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801794a:	4629      	mov	r1, r5
 801794c:	024b      	lsls	r3, r1, #9
 801794e:	4621      	mov	r1, r4
 8017950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8017954:	4621      	mov	r1, r4
 8017956:	024a      	lsls	r2, r1, #9
 8017958:	4610      	mov	r0, r2
 801795a:	4619      	mov	r1, r3
 801795c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801795e:	2200      	movs	r2, #0
 8017960:	62bb      	str	r3, [r7, #40]	; 0x28
 8017962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017968:	f7e9 f976 	bl	8000c58 <__aeabi_uldivmod>
 801796c:	4602      	mov	r2, r0
 801796e:	460b      	mov	r3, r1
 8017970:	4613      	mov	r3, r2
 8017972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017974:	e058      	b.n	8017a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017976:	4b38      	ldr	r3, [pc, #224]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	099b      	lsrs	r3, r3, #6
 801797c:	2200      	movs	r2, #0
 801797e:	4618      	mov	r0, r3
 8017980:	4611      	mov	r1, r2
 8017982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8017986:	623b      	str	r3, [r7, #32]
 8017988:	2300      	movs	r3, #0
 801798a:	627b      	str	r3, [r7, #36]	; 0x24
 801798c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017990:	4642      	mov	r2, r8
 8017992:	464b      	mov	r3, r9
 8017994:	f04f 0000 	mov.w	r0, #0
 8017998:	f04f 0100 	mov.w	r1, #0
 801799c:	0159      	lsls	r1, r3, #5
 801799e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80179a2:	0150      	lsls	r0, r2, #5
 80179a4:	4602      	mov	r2, r0
 80179a6:	460b      	mov	r3, r1
 80179a8:	4641      	mov	r1, r8
 80179aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80179ae:	4649      	mov	r1, r9
 80179b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80179b4:	f04f 0200 	mov.w	r2, #0
 80179b8:	f04f 0300 	mov.w	r3, #0
 80179bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80179c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80179c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80179c8:	ebb2 040a 	subs.w	r4, r2, sl
 80179cc:	eb63 050b 	sbc.w	r5, r3, fp
 80179d0:	f04f 0200 	mov.w	r2, #0
 80179d4:	f04f 0300 	mov.w	r3, #0
 80179d8:	00eb      	lsls	r3, r5, #3
 80179da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80179de:	00e2      	lsls	r2, r4, #3
 80179e0:	4614      	mov	r4, r2
 80179e2:	461d      	mov	r5, r3
 80179e4:	4643      	mov	r3, r8
 80179e6:	18e3      	adds	r3, r4, r3
 80179e8:	603b      	str	r3, [r7, #0]
 80179ea:	464b      	mov	r3, r9
 80179ec:	eb45 0303 	adc.w	r3, r5, r3
 80179f0:	607b      	str	r3, [r7, #4]
 80179f2:	f04f 0200 	mov.w	r2, #0
 80179f6:	f04f 0300 	mov.w	r3, #0
 80179fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80179fe:	4629      	mov	r1, r5
 8017a00:	028b      	lsls	r3, r1, #10
 8017a02:	4621      	mov	r1, r4
 8017a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8017a08:	4621      	mov	r1, r4
 8017a0a:	028a      	lsls	r2, r1, #10
 8017a0c:	4610      	mov	r0, r2
 8017a0e:	4619      	mov	r1, r3
 8017a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a12:	2200      	movs	r2, #0
 8017a14:	61bb      	str	r3, [r7, #24]
 8017a16:	61fa      	str	r2, [r7, #28]
 8017a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017a1c:	f7e9 f91c 	bl	8000c58 <__aeabi_uldivmod>
 8017a20:	4602      	mov	r2, r0
 8017a22:	460b      	mov	r3, r1
 8017a24:	4613      	mov	r3, r2
 8017a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8017a28:	4b0b      	ldr	r3, [pc, #44]	; (8017a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8017a2a:	685b      	ldr	r3, [r3, #4]
 8017a2c:	0c1b      	lsrs	r3, r3, #16
 8017a2e:	f003 0303 	and.w	r3, r3, #3
 8017a32:	3301      	adds	r3, #1
 8017a34:	005b      	lsls	r3, r3, #1
 8017a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8017a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017a42:	e002      	b.n	8017a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017a44:	4b05      	ldr	r3, [pc, #20]	; (8017a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8017a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8017a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3750      	adds	r7, #80	; 0x50
 8017a50:	46bd      	mov	sp, r7
 8017a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017a56:	bf00      	nop
 8017a58:	40023800 	.word	0x40023800
 8017a5c:	00f42400 	.word	0x00f42400
 8017a60:	007a1200 	.word	0x007a1200

08017a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017a64:	b480      	push	{r7}
 8017a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017a68:	4b03      	ldr	r3, [pc, #12]	; (8017a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a74:	4770      	bx	lr
 8017a76:	bf00      	nop
 8017a78:	200005f0 	.word	0x200005f0

08017a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8017a80:	f7ff fff0 	bl	8017a64 <HAL_RCC_GetHCLKFreq>
 8017a84:	4602      	mov	r2, r0
 8017a86:	4b05      	ldr	r3, [pc, #20]	; (8017a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8017a88:	689b      	ldr	r3, [r3, #8]
 8017a8a:	0a9b      	lsrs	r3, r3, #10
 8017a8c:	f003 0307 	and.w	r3, r3, #7
 8017a90:	4903      	ldr	r1, [pc, #12]	; (8017aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017a92:	5ccb      	ldrb	r3, [r1, r3]
 8017a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	40023800 	.word	0x40023800
 8017aa0:	08023c1c 	.word	0x08023c1c

08017aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8017aa8:	f7ff ffdc 	bl	8017a64 <HAL_RCC_GetHCLKFreq>
 8017aac:	4602      	mov	r2, r0
 8017aae:	4b05      	ldr	r3, [pc, #20]	; (8017ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8017ab0:	689b      	ldr	r3, [r3, #8]
 8017ab2:	0b5b      	lsrs	r3, r3, #13
 8017ab4:	f003 0307 	and.w	r3, r3, #7
 8017ab8:	4903      	ldr	r1, [pc, #12]	; (8017ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017aba:	5ccb      	ldrb	r3, [r1, r3]
 8017abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	40023800 	.word	0x40023800
 8017ac8:	08023c1c 	.word	0x08023c1c

08017acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d101      	bne.n	8017ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017ada:	2301      	movs	r3, #1
 8017adc:	e04c      	b.n	8017b78 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ae4:	b2db      	uxtb	r3, r3
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d111      	bne.n	8017b0e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2200      	movs	r2, #0
 8017aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f000 fc68 	bl	80183c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d102      	bne.n	8017b06 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	4a1f      	ldr	r2, [pc, #124]	; (8017b80 <HAL_TIM_Base_Init+0xb4>)
 8017b04:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b0a:	6878      	ldr	r0, [r7, #4]
 8017b0c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2202      	movs	r2, #2
 8017b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	3304      	adds	r3, #4
 8017b1e:	4619      	mov	r1, r3
 8017b20:	4610      	mov	r0, r2
 8017b22:	f000 fb17 	bl	8018154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2201      	movs	r2, #1
 8017b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2201      	movs	r2, #1
 8017b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2201      	movs	r2, #1
 8017b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	2201      	movs	r2, #1
 8017b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	2201      	movs	r2, #1
 8017b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2201      	movs	r2, #1
 8017b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2201      	movs	r2, #1
 8017b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2201      	movs	r2, #1
 8017b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2201      	movs	r2, #1
 8017b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2201      	movs	r2, #1
 8017b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017b76:	2300      	movs	r3, #0
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	080138c9 	.word	0x080138c9

08017b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017b84:	b480      	push	{r7}
 8017b86:	b085      	sub	sp, #20
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	d001      	beq.n	8017b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e04e      	b.n	8017c3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2202      	movs	r2, #2
 8017ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	68da      	ldr	r2, [r3, #12]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	f042 0201 	orr.w	r2, r2, #1
 8017bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	4a23      	ldr	r2, [pc, #140]	; (8017c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	d022      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017bc6:	d01d      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	4a1f      	ldr	r2, [pc, #124]	; (8017c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8017bce:	4293      	cmp	r3, r2
 8017bd0:	d018      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	4a1e      	ldr	r2, [pc, #120]	; (8017c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	d013      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4a1c      	ldr	r2, [pc, #112]	; (8017c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8017be2:	4293      	cmp	r3, r2
 8017be4:	d00e      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4a1b      	ldr	r2, [pc, #108]	; (8017c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d009      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	4a19      	ldr	r2, [pc, #100]	; (8017c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	d004      	beq.n	8017c04 <HAL_TIM_Base_Start_IT+0x80>
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	4a18      	ldr	r2, [pc, #96]	; (8017c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8017c00:	4293      	cmp	r3, r2
 8017c02:	d111      	bne.n	8017c28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	689b      	ldr	r3, [r3, #8]
 8017c0a:	f003 0307 	and.w	r3, r3, #7
 8017c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2b06      	cmp	r3, #6
 8017c14:	d010      	beq.n	8017c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	681a      	ldr	r2, [r3, #0]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	f042 0201 	orr.w	r2, r2, #1
 8017c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017c26:	e007      	b.n	8017c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	f042 0201 	orr.w	r2, r2, #1
 8017c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3714      	adds	r7, #20
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr
 8017c46:	bf00      	nop
 8017c48:	40010000 	.word	0x40010000
 8017c4c:	40000400 	.word	0x40000400
 8017c50:	40000800 	.word	0x40000800
 8017c54:	40000c00 	.word	0x40000c00
 8017c58:	40010400 	.word	0x40010400
 8017c5c:	40014000 	.word	0x40014000
 8017c60:	40001800 	.word	0x40001800

08017c64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8017c64:	b480      	push	{r7}
 8017c66:	b083      	sub	sp, #12
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	68da      	ldr	r2, [r3, #12]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	f022 0201 	bic.w	r2, r2, #1
 8017c7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	6a1a      	ldr	r2, [r3, #32]
 8017c82:	f241 1311 	movw	r3, #4369	; 0x1111
 8017c86:	4013      	ands	r3, r2
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d10f      	bne.n	8017cac <HAL_TIM_Base_Stop_IT+0x48>
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	6a1a      	ldr	r2, [r3, #32]
 8017c92:	f240 4344 	movw	r3, #1092	; 0x444
 8017c96:	4013      	ands	r3, r2
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d107      	bne.n	8017cac <HAL_TIM_Base_Stop_IT+0x48>
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f022 0201 	bic.w	r2, r2, #1
 8017caa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	2201      	movs	r2, #1
 8017cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8017cb4:	2300      	movs	r3, #0
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	370c      	adds	r7, #12
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc0:	4770      	bx	lr

08017cc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017cc2:	b580      	push	{r7, lr}
 8017cc4:	b082      	sub	sp, #8
 8017cc6:	af00      	add	r7, sp, #0
 8017cc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	691b      	ldr	r3, [r3, #16]
 8017cd0:	f003 0302 	and.w	r3, r3, #2
 8017cd4:	2b02      	cmp	r3, #2
 8017cd6:	d128      	bne.n	8017d2a <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	f003 0302 	and.w	r3, r3, #2
 8017ce2:	2b02      	cmp	r3, #2
 8017ce4:	d121      	bne.n	8017d2a <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	f06f 0202 	mvn.w	r2, #2
 8017cee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2201      	movs	r2, #1
 8017cf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	699b      	ldr	r3, [r3, #24]
 8017cfc:	f003 0303 	and.w	r3, r3, #3
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d005      	beq.n	8017d10 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	4798      	blx	r3
 8017d0e:	e009      	b.n	8017d24 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017d20:	6878      	ldr	r0, [r7, #4]
 8017d22:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2200      	movs	r2, #0
 8017d28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	691b      	ldr	r3, [r3, #16]
 8017d30:	f003 0304 	and.w	r3, r3, #4
 8017d34:	2b04      	cmp	r3, #4
 8017d36:	d128      	bne.n	8017d8a <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	68db      	ldr	r3, [r3, #12]
 8017d3e:	f003 0304 	and.w	r3, r3, #4
 8017d42:	2b04      	cmp	r3, #4
 8017d44:	d121      	bne.n	8017d8a <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	f06f 0204 	mvn.w	r2, #4
 8017d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2202      	movs	r2, #2
 8017d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	699b      	ldr	r3, [r3, #24]
 8017d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d005      	beq.n	8017d70 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	4798      	blx	r3
 8017d6e:	e009      	b.n	8017d84 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017d80:	6878      	ldr	r0, [r7, #4]
 8017d82:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2200      	movs	r2, #0
 8017d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	691b      	ldr	r3, [r3, #16]
 8017d90:	f003 0308 	and.w	r3, r3, #8
 8017d94:	2b08      	cmp	r3, #8
 8017d96:	d128      	bne.n	8017dea <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	68db      	ldr	r3, [r3, #12]
 8017d9e:	f003 0308 	and.w	r3, r3, #8
 8017da2:	2b08      	cmp	r3, #8
 8017da4:	d121      	bne.n	8017dea <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	f06f 0208 	mvn.w	r2, #8
 8017dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2204      	movs	r2, #4
 8017db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	69db      	ldr	r3, [r3, #28]
 8017dbc:	f003 0303 	and.w	r3, r3, #3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d005      	beq.n	8017dd0 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	4798      	blx	r3
 8017dce:	e009      	b.n	8017de4 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2200      	movs	r2, #0
 8017de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	691b      	ldr	r3, [r3, #16]
 8017df0:	f003 0310 	and.w	r3, r3, #16
 8017df4:	2b10      	cmp	r3, #16
 8017df6:	d128      	bne.n	8017e4a <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	68db      	ldr	r3, [r3, #12]
 8017dfe:	f003 0310 	and.w	r3, r3, #16
 8017e02:	2b10      	cmp	r3, #16
 8017e04:	d121      	bne.n	8017e4a <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f06f 0210 	mvn.w	r2, #16
 8017e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2208      	movs	r2, #8
 8017e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	69db      	ldr	r3, [r3, #28]
 8017e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d005      	beq.n	8017e30 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	4798      	blx	r3
 8017e2e:	e009      	b.n	8017e44 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e40:	6878      	ldr	r0, [r7, #4]
 8017e42:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2200      	movs	r2, #0
 8017e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	691b      	ldr	r3, [r3, #16]
 8017e50:	f003 0301 	and.w	r3, r3, #1
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	d110      	bne.n	8017e7a <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	68db      	ldr	r3, [r3, #12]
 8017e5e:	f003 0301 	and.w	r3, r3, #1
 8017e62:	2b01      	cmp	r3, #1
 8017e64:	d109      	bne.n	8017e7a <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	f06f 0201 	mvn.w	r2, #1
 8017e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	691b      	ldr	r3, [r3, #16]
 8017e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e84:	2b80      	cmp	r3, #128	; 0x80
 8017e86:	d110      	bne.n	8017eaa <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	68db      	ldr	r3, [r3, #12]
 8017e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e92:	2b80      	cmp	r3, #128	; 0x80
 8017e94:	d109      	bne.n	8017eaa <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8017e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	691b      	ldr	r3, [r3, #16]
 8017eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017eb4:	2b40      	cmp	r3, #64	; 0x40
 8017eb6:	d110      	bne.n	8017eda <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	68db      	ldr	r3, [r3, #12]
 8017ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ec2:	2b40      	cmp	r3, #64	; 0x40
 8017ec4:	d109      	bne.n	8017eda <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ed6:	6878      	ldr	r0, [r7, #4]
 8017ed8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	691b      	ldr	r3, [r3, #16]
 8017ee0:	f003 0320 	and.w	r3, r3, #32
 8017ee4:	2b20      	cmp	r3, #32
 8017ee6:	d110      	bne.n	8017f0a <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	f003 0320 	and.w	r3, r3, #32
 8017ef2:	2b20      	cmp	r3, #32
 8017ef4:	d109      	bne.n	8017f0a <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f06f 0220 	mvn.w	r2, #32
 8017efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017f0a:	bf00      	nop
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b084      	sub	sp, #16
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	6078      	str	r0, [r7, #4]
 8017f1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017f26:	2b01      	cmp	r3, #1
 8017f28:	d101      	bne.n	8017f2e <HAL_TIM_ConfigClockSource+0x1c>
 8017f2a:	2302      	movs	r3, #2
 8017f2c:	e0b4      	b.n	8018098 <HAL_TIM_ConfigClockSource+0x186>
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2201      	movs	r2, #1
 8017f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2202      	movs	r2, #2
 8017f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	689b      	ldr	r3, [r3, #8]
 8017f44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8017f4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017f54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	68ba      	ldr	r2, [r7, #8]
 8017f5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017f66:	d03e      	beq.n	8017fe6 <HAL_TIM_ConfigClockSource+0xd4>
 8017f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017f6c:	f200 8087 	bhi.w	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f74:	f000 8086 	beq.w	8018084 <HAL_TIM_ConfigClockSource+0x172>
 8017f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f7c:	d87f      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f7e:	2b70      	cmp	r3, #112	; 0x70
 8017f80:	d01a      	beq.n	8017fb8 <HAL_TIM_ConfigClockSource+0xa6>
 8017f82:	2b70      	cmp	r3, #112	; 0x70
 8017f84:	d87b      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f86:	2b60      	cmp	r3, #96	; 0x60
 8017f88:	d050      	beq.n	801802c <HAL_TIM_ConfigClockSource+0x11a>
 8017f8a:	2b60      	cmp	r3, #96	; 0x60
 8017f8c:	d877      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f8e:	2b50      	cmp	r3, #80	; 0x50
 8017f90:	d03c      	beq.n	801800c <HAL_TIM_ConfigClockSource+0xfa>
 8017f92:	2b50      	cmp	r3, #80	; 0x50
 8017f94:	d873      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f96:	2b40      	cmp	r3, #64	; 0x40
 8017f98:	d058      	beq.n	801804c <HAL_TIM_ConfigClockSource+0x13a>
 8017f9a:	2b40      	cmp	r3, #64	; 0x40
 8017f9c:	d86f      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017f9e:	2b30      	cmp	r3, #48	; 0x30
 8017fa0:	d064      	beq.n	801806c <HAL_TIM_ConfigClockSource+0x15a>
 8017fa2:	2b30      	cmp	r3, #48	; 0x30
 8017fa4:	d86b      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017fa6:	2b20      	cmp	r3, #32
 8017fa8:	d060      	beq.n	801806c <HAL_TIM_ConfigClockSource+0x15a>
 8017faa:	2b20      	cmp	r3, #32
 8017fac:	d867      	bhi.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d05c      	beq.n	801806c <HAL_TIM_ConfigClockSource+0x15a>
 8017fb2:	2b10      	cmp	r3, #16
 8017fb4:	d05a      	beq.n	801806c <HAL_TIM_ConfigClockSource+0x15a>
 8017fb6:	e062      	b.n	801807e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6818      	ldr	r0, [r3, #0]
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	6899      	ldr	r1, [r3, #8]
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	685a      	ldr	r2, [r3, #4]
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	f000 f9de 	bl	8018388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	689b      	ldr	r3, [r3, #8]
 8017fd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8017fda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	68ba      	ldr	r2, [r7, #8]
 8017fe2:	609a      	str	r2, [r3, #8]
      break;
 8017fe4:	e04f      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6818      	ldr	r0, [r3, #0]
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	6899      	ldr	r1, [r3, #8]
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	685a      	ldr	r2, [r3, #4]
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	f000 f9c7 	bl	8018388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	689a      	ldr	r2, [r3, #8]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018008:	609a      	str	r2, [r3, #8]
      break;
 801800a:	e03c      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6818      	ldr	r0, [r3, #0]
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	6859      	ldr	r1, [r3, #4]
 8018014:	683b      	ldr	r3, [r7, #0]
 8018016:	68db      	ldr	r3, [r3, #12]
 8018018:	461a      	mov	r2, r3
 801801a:	f000 f93b 	bl	8018294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2150      	movs	r1, #80	; 0x50
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f994 	bl	8018352 <TIM_ITRx_SetConfig>
      break;
 801802a:	e02c      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6818      	ldr	r0, [r3, #0]
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	6859      	ldr	r1, [r3, #4]
 8018034:	683b      	ldr	r3, [r7, #0]
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	461a      	mov	r2, r3
 801803a:	f000 f95a 	bl	80182f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	2160      	movs	r1, #96	; 0x60
 8018044:	4618      	mov	r0, r3
 8018046:	f000 f984 	bl	8018352 <TIM_ITRx_SetConfig>
      break;
 801804a:	e01c      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6818      	ldr	r0, [r3, #0]
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	6859      	ldr	r1, [r3, #4]
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	461a      	mov	r2, r3
 801805a:	f000 f91b 	bl	8018294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	2140      	movs	r1, #64	; 0x40
 8018064:	4618      	mov	r0, r3
 8018066:	f000 f974 	bl	8018352 <TIM_ITRx_SetConfig>
      break;
 801806a:	e00c      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681a      	ldr	r2, [r3, #0]
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	4619      	mov	r1, r3
 8018076:	4610      	mov	r0, r2
 8018078:	f000 f96b 	bl	8018352 <TIM_ITRx_SetConfig>
      break;
 801807c:	e003      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801807e:	2301      	movs	r3, #1
 8018080:	73fb      	strb	r3, [r7, #15]
      break;
 8018082:	e000      	b.n	8018086 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8018084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	2201      	movs	r2, #1
 801808a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2200      	movs	r2, #0
 8018092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8018096:	7bfb      	ldrb	r3, [r7, #15]
}
 8018098:	4618      	mov	r0, r3
 801809a:	3710      	adds	r7, #16
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}

080180a0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80180a0:	b480      	push	{r7}
 80180a2:	b083      	sub	sp, #12
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80180a8:	bf00      	nop
 80180aa:	370c      	adds	r7, #12
 80180ac:	46bd      	mov	sp, r7
 80180ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b2:	4770      	bx	lr

080180b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80180b4:	b480      	push	{r7}
 80180b6:	b083      	sub	sp, #12
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80180bc:	bf00      	nop
 80180be:	370c      	adds	r7, #12
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr

080180c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80180c8:	b480      	push	{r7}
 80180ca:	b083      	sub	sp, #12
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80180d0:	bf00      	nop
 80180d2:	370c      	adds	r7, #12
 80180d4:	46bd      	mov	sp, r7
 80180d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180da:	4770      	bx	lr

080180dc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80180dc:	b480      	push	{r7}
 80180de:	b083      	sub	sp, #12
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80180e4:	bf00      	nop
 80180e6:	370c      	adds	r7, #12
 80180e8:	46bd      	mov	sp, r7
 80180ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ee:	4770      	bx	lr

080180f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80180f0:	b480      	push	{r7}
 80180f2:	b083      	sub	sp, #12
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80180f8:	bf00      	nop
 80180fa:	370c      	adds	r7, #12
 80180fc:	46bd      	mov	sp, r7
 80180fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018102:	4770      	bx	lr

08018104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8018104:	b480      	push	{r7}
 8018106:	b083      	sub	sp, #12
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801810c:	bf00      	nop
 801810e:	370c      	adds	r7, #12
 8018110:	46bd      	mov	sp, r7
 8018112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018116:	4770      	bx	lr

08018118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018118:	b480      	push	{r7}
 801811a:	b083      	sub	sp, #12
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018120:	bf00      	nop
 8018122:	370c      	adds	r7, #12
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr

0801812c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801812c:	b480      	push	{r7}
 801812e:	b083      	sub	sp, #12
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8018134:	bf00      	nop
 8018136:	370c      	adds	r7, #12
 8018138:	46bd      	mov	sp, r7
 801813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813e:	4770      	bx	lr

08018140 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8018140:	b480      	push	{r7}
 8018142:	b083      	sub	sp, #12
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8018148:	bf00      	nop
 801814a:	370c      	adds	r7, #12
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr

08018154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8018154:	b480      	push	{r7}
 8018156:	b085      	sub	sp, #20
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	4a40      	ldr	r2, [pc, #256]	; (8018268 <TIM_Base_SetConfig+0x114>)
 8018168:	4293      	cmp	r3, r2
 801816a:	d013      	beq.n	8018194 <TIM_Base_SetConfig+0x40>
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018172:	d00f      	beq.n	8018194 <TIM_Base_SetConfig+0x40>
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	4a3d      	ldr	r2, [pc, #244]	; (801826c <TIM_Base_SetConfig+0x118>)
 8018178:	4293      	cmp	r3, r2
 801817a:	d00b      	beq.n	8018194 <TIM_Base_SetConfig+0x40>
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	4a3c      	ldr	r2, [pc, #240]	; (8018270 <TIM_Base_SetConfig+0x11c>)
 8018180:	4293      	cmp	r3, r2
 8018182:	d007      	beq.n	8018194 <TIM_Base_SetConfig+0x40>
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	4a3b      	ldr	r2, [pc, #236]	; (8018274 <TIM_Base_SetConfig+0x120>)
 8018188:	4293      	cmp	r3, r2
 801818a:	d003      	beq.n	8018194 <TIM_Base_SetConfig+0x40>
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	4a3a      	ldr	r2, [pc, #232]	; (8018278 <TIM_Base_SetConfig+0x124>)
 8018190:	4293      	cmp	r3, r2
 8018192:	d108      	bne.n	80181a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801819a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	685b      	ldr	r3, [r3, #4]
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	4313      	orrs	r3, r2
 80181a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	4a2f      	ldr	r2, [pc, #188]	; (8018268 <TIM_Base_SetConfig+0x114>)
 80181aa:	4293      	cmp	r3, r2
 80181ac:	d02b      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80181b4:	d027      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	4a2c      	ldr	r2, [pc, #176]	; (801826c <TIM_Base_SetConfig+0x118>)
 80181ba:	4293      	cmp	r3, r2
 80181bc:	d023      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	4a2b      	ldr	r2, [pc, #172]	; (8018270 <TIM_Base_SetConfig+0x11c>)
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d01f      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	4a2a      	ldr	r2, [pc, #168]	; (8018274 <TIM_Base_SetConfig+0x120>)
 80181ca:	4293      	cmp	r3, r2
 80181cc:	d01b      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	4a29      	ldr	r2, [pc, #164]	; (8018278 <TIM_Base_SetConfig+0x124>)
 80181d2:	4293      	cmp	r3, r2
 80181d4:	d017      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	4a28      	ldr	r2, [pc, #160]	; (801827c <TIM_Base_SetConfig+0x128>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	d013      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	4a27      	ldr	r2, [pc, #156]	; (8018280 <TIM_Base_SetConfig+0x12c>)
 80181e2:	4293      	cmp	r3, r2
 80181e4:	d00f      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	4a26      	ldr	r2, [pc, #152]	; (8018284 <TIM_Base_SetConfig+0x130>)
 80181ea:	4293      	cmp	r3, r2
 80181ec:	d00b      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	4a25      	ldr	r2, [pc, #148]	; (8018288 <TIM_Base_SetConfig+0x134>)
 80181f2:	4293      	cmp	r3, r2
 80181f4:	d007      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	4a24      	ldr	r2, [pc, #144]	; (801828c <TIM_Base_SetConfig+0x138>)
 80181fa:	4293      	cmp	r3, r2
 80181fc:	d003      	beq.n	8018206 <TIM_Base_SetConfig+0xb2>
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	4a23      	ldr	r2, [pc, #140]	; (8018290 <TIM_Base_SetConfig+0x13c>)
 8018202:	4293      	cmp	r3, r2
 8018204:	d108      	bne.n	8018218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	68db      	ldr	r3, [r3, #12]
 8018212:	68fa      	ldr	r2, [r7, #12]
 8018214:	4313      	orrs	r3, r2
 8018216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	695b      	ldr	r3, [r3, #20]
 8018222:	4313      	orrs	r3, r2
 8018224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	68fa      	ldr	r2, [r7, #12]
 801822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	689a      	ldr	r2, [r3, #8]
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	681a      	ldr	r2, [r3, #0]
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	4a0a      	ldr	r2, [pc, #40]	; (8018268 <TIM_Base_SetConfig+0x114>)
 8018240:	4293      	cmp	r3, r2
 8018242:	d003      	beq.n	801824c <TIM_Base_SetConfig+0xf8>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	4a0c      	ldr	r2, [pc, #48]	; (8018278 <TIM_Base_SetConfig+0x124>)
 8018248:	4293      	cmp	r3, r2
 801824a:	d103      	bne.n	8018254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	691a      	ldr	r2, [r3, #16]
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2201      	movs	r2, #1
 8018258:	615a      	str	r2, [r3, #20]
}
 801825a:	bf00      	nop
 801825c:	3714      	adds	r7, #20
 801825e:	46bd      	mov	sp, r7
 8018260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	40010000 	.word	0x40010000
 801826c:	40000400 	.word	0x40000400
 8018270:	40000800 	.word	0x40000800
 8018274:	40000c00 	.word	0x40000c00
 8018278:	40010400 	.word	0x40010400
 801827c:	40014000 	.word	0x40014000
 8018280:	40014400 	.word	0x40014400
 8018284:	40014800 	.word	0x40014800
 8018288:	40001800 	.word	0x40001800
 801828c:	40001c00 	.word	0x40001c00
 8018290:	40002000 	.word	0x40002000

08018294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018294:	b480      	push	{r7}
 8018296:	b087      	sub	sp, #28
 8018298:	af00      	add	r7, sp, #0
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	6a1b      	ldr	r3, [r3, #32]
 80182a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	6a1b      	ldr	r3, [r3, #32]
 80182aa:	f023 0201 	bic.w	r2, r3, #1
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	699b      	ldr	r3, [r3, #24]
 80182b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80182be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	011b      	lsls	r3, r3, #4
 80182c4:	693a      	ldr	r2, [r7, #16]
 80182c6:	4313      	orrs	r3, r2
 80182c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80182ca:	697b      	ldr	r3, [r7, #20]
 80182cc:	f023 030a 	bic.w	r3, r3, #10
 80182d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	4313      	orrs	r3, r2
 80182d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	693a      	ldr	r2, [r7, #16]
 80182de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	697a      	ldr	r2, [r7, #20]
 80182e4:	621a      	str	r2, [r3, #32]
}
 80182e6:	bf00      	nop
 80182e8:	371c      	adds	r7, #28
 80182ea:	46bd      	mov	sp, r7
 80182ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f0:	4770      	bx	lr

080182f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80182f2:	b480      	push	{r7}
 80182f4:	b087      	sub	sp, #28
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	60f8      	str	r0, [r7, #12]
 80182fa:	60b9      	str	r1, [r7, #8]
 80182fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	6a1b      	ldr	r3, [r3, #32]
 8018302:	f023 0210 	bic.w	r2, r3, #16
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	699b      	ldr	r3, [r3, #24]
 801830e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	6a1b      	ldr	r3, [r3, #32]
 8018314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8018316:	697b      	ldr	r3, [r7, #20]
 8018318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801831c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	031b      	lsls	r3, r3, #12
 8018322:	697a      	ldr	r2, [r7, #20]
 8018324:	4313      	orrs	r3, r2
 8018326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018328:	693b      	ldr	r3, [r7, #16]
 801832a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801832e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	011b      	lsls	r3, r3, #4
 8018334:	693a      	ldr	r2, [r7, #16]
 8018336:	4313      	orrs	r3, r2
 8018338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	697a      	ldr	r2, [r7, #20]
 801833e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	693a      	ldr	r2, [r7, #16]
 8018344:	621a      	str	r2, [r3, #32]
}
 8018346:	bf00      	nop
 8018348:	371c      	adds	r7, #28
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr

08018352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8018352:	b480      	push	{r7}
 8018354:	b085      	sub	sp, #20
 8018356:	af00      	add	r7, sp, #0
 8018358:	6078      	str	r0, [r7, #4]
 801835a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	689b      	ldr	r3, [r3, #8]
 8018360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801836a:	683a      	ldr	r2, [r7, #0]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	4313      	orrs	r3, r2
 8018370:	f043 0307 	orr.w	r3, r3, #7
 8018374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	609a      	str	r2, [r3, #8]
}
 801837c:	bf00      	nop
 801837e:	3714      	adds	r7, #20
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr

08018388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018388:	b480      	push	{r7}
 801838a:	b087      	sub	sp, #28
 801838c:	af00      	add	r7, sp, #0
 801838e:	60f8      	str	r0, [r7, #12]
 8018390:	60b9      	str	r1, [r7, #8]
 8018392:	607a      	str	r2, [r7, #4]
 8018394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	689b      	ldr	r3, [r3, #8]
 801839a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80183a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	021a      	lsls	r2, r3, #8
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	431a      	orrs	r2, r3
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	4313      	orrs	r3, r2
 80183b0:	697a      	ldr	r2, [r7, #20]
 80183b2:	4313      	orrs	r3, r2
 80183b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	697a      	ldr	r2, [r7, #20]
 80183ba:	609a      	str	r2, [r3, #8]
}
 80183bc:	bf00      	nop
 80183be:	371c      	adds	r7, #28
 80183c0:	46bd      	mov	sp, r7
 80183c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c6:	4770      	bx	lr

080183c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80183c8:	b480      	push	{r7}
 80183ca:	b083      	sub	sp, #12
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	4a1c      	ldr	r2, [pc, #112]	; (8018444 <TIM_ResetCallback+0x7c>)
 80183d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	4a1b      	ldr	r2, [pc, #108]	; (8018448 <TIM_ResetCallback+0x80>)
 80183dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	4a1a      	ldr	r2, [pc, #104]	; (801844c <TIM_ResetCallback+0x84>)
 80183e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	4a19      	ldr	r2, [pc, #100]	; (8018450 <TIM_ResetCallback+0x88>)
 80183ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	4a18      	ldr	r2, [pc, #96]	; (8018454 <TIM_ResetCallback+0x8c>)
 80183f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	4a17      	ldr	r2, [pc, #92]	; (8018458 <TIM_ResetCallback+0x90>)
 80183fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	4a16      	ldr	r2, [pc, #88]	; (801845c <TIM_ResetCallback+0x94>)
 8018404:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	4a15      	ldr	r2, [pc, #84]	; (8018460 <TIM_ResetCallback+0x98>)
 801840c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	4a14      	ldr	r2, [pc, #80]	; (8018464 <TIM_ResetCallback+0x9c>)
 8018414:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	4a13      	ldr	r2, [pc, #76]	; (8018468 <TIM_ResetCallback+0xa0>)
 801841c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	4a12      	ldr	r2, [pc, #72]	; (801846c <TIM_ResetCallback+0xa4>)
 8018424:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	4a11      	ldr	r2, [pc, #68]	; (8018470 <TIM_ResetCallback+0xa8>)
 801842c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	4a10      	ldr	r2, [pc, #64]	; (8018474 <TIM_ResetCallback+0xac>)
 8018434:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018438:	bf00      	nop
 801843a:	370c      	adds	r7, #12
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr
 8018444:	08012ed1 	.word	0x08012ed1
 8018448:	080180a1 	.word	0x080180a1
 801844c:	08018119 	.word	0x08018119
 8018450:	0801812d 	.word	0x0801812d
 8018454:	080180c9 	.word	0x080180c9
 8018458:	080180dd 	.word	0x080180dd
 801845c:	080180b5 	.word	0x080180b5
 8018460:	080180f1 	.word	0x080180f1
 8018464:	08018105 	.word	0x08018105
 8018468:	08018141 	.word	0x08018141
 801846c:	08018571 	.word	0x08018571
 8018470:	08018585 	.word	0x08018585
 8018474:	08018599 	.word	0x08018599

08018478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018478:	b480      	push	{r7}
 801847a:	b085      	sub	sp, #20
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018488:	2b01      	cmp	r3, #1
 801848a:	d101      	bne.n	8018490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801848c:	2302      	movs	r3, #2
 801848e:	e05a      	b.n	8018546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2201      	movs	r2, #1
 8018494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2202      	movs	r2, #2
 801849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	685b      	ldr	r3, [r3, #4]
 80184a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	689b      	ldr	r3, [r3, #8]
 80184ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80184b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	68fa      	ldr	r2, [r7, #12]
 80184be:	4313      	orrs	r3, r2
 80184c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	68fa      	ldr	r2, [r7, #12]
 80184c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4a21      	ldr	r2, [pc, #132]	; (8018554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80184d0:	4293      	cmp	r3, r2
 80184d2:	d022      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80184dc:	d01d      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	4a1d      	ldr	r2, [pc, #116]	; (8018558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80184e4:	4293      	cmp	r3, r2
 80184e6:	d018      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	4a1b      	ldr	r2, [pc, #108]	; (801855c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80184ee:	4293      	cmp	r3, r2
 80184f0:	d013      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	4a1a      	ldr	r2, [pc, #104]	; (8018560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80184f8:	4293      	cmp	r3, r2
 80184fa:	d00e      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	4a18      	ldr	r2, [pc, #96]	; (8018564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8018502:	4293      	cmp	r3, r2
 8018504:	d009      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	4a17      	ldr	r2, [pc, #92]	; (8018568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801850c:	4293      	cmp	r3, r2
 801850e:	d004      	beq.n	801851a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	4a15      	ldr	r2, [pc, #84]	; (801856c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8018516:	4293      	cmp	r3, r2
 8018518:	d10c      	bne.n	8018534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801851a:	68bb      	ldr	r3, [r7, #8]
 801851c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	68ba      	ldr	r2, [r7, #8]
 8018528:	4313      	orrs	r3, r2
 801852a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	68ba      	ldr	r2, [r7, #8]
 8018532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2201      	movs	r2, #1
 8018538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	2200      	movs	r2, #0
 8018540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018544:	2300      	movs	r3, #0
}
 8018546:	4618      	mov	r0, r3
 8018548:	3714      	adds	r7, #20
 801854a:	46bd      	mov	sp, r7
 801854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018550:	4770      	bx	lr
 8018552:	bf00      	nop
 8018554:	40010000 	.word	0x40010000
 8018558:	40000400 	.word	0x40000400
 801855c:	40000800 	.word	0x40000800
 8018560:	40000c00 	.word	0x40000c00
 8018564:	40010400 	.word	0x40010400
 8018568:	40014000 	.word	0x40014000
 801856c:	40001800 	.word	0x40001800

08018570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018570:	b480      	push	{r7}
 8018572:	b083      	sub	sp, #12
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018578:	bf00      	nop
 801857a:	370c      	adds	r7, #12
 801857c:	46bd      	mov	sp, r7
 801857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018582:	4770      	bx	lr

08018584 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8018584:	b480      	push	{r7}
 8018586:	b083      	sub	sp, #12
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 801858c:	bf00      	nop
 801858e:	370c      	adds	r7, #12
 8018590:	46bd      	mov	sp, r7
 8018592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018596:	4770      	bx	lr

08018598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018598:	b480      	push	{r7}
 801859a:	b083      	sub	sp, #12
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80185a0:	bf00      	nop
 80185a2:	370c      	adds	r7, #12
 80185a4:	46bd      	mov	sp, r7
 80185a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185aa:	4770      	bx	lr

080185ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b082      	sub	sp, #8
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d101      	bne.n	80185be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80185ba:	2301      	movs	r3, #1
 80185bc:	e04a      	b.n	8018654 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d111      	bne.n	80185ee <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2200      	movs	r2, #0
 80185ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80185d2:	6878      	ldr	r0, [r7, #4]
 80185d4:	f000 fbb0 	bl	8018d38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d102      	bne.n	80185e6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	4a1e      	ldr	r2, [pc, #120]	; (801865c <HAL_UART_Init+0xb0>)
 80185e4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2224      	movs	r2, #36	; 0x24
 80185f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	68da      	ldr	r2, [r3, #12]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8018604:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f000 fe3c 	bl	8019284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	691a      	ldr	r2, [r3, #16]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801861a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	695a      	ldr	r2, [r3, #20]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801862a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	68da      	ldr	r2, [r3, #12]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801863a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2200      	movs	r2, #0
 8018640:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2220      	movs	r2, #32
 8018646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	2220      	movs	r2, #32
 801864e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8018652:	2300      	movs	r3, #0
}
 8018654:	4618      	mov	r0, r3
 8018656:	3708      	adds	r7, #8
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}
 801865c:	08013955 	.word	0x08013955

08018660 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08c      	sub	sp, #48	; 0x30
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	4613      	mov	r3, r2
 801866c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018674:	b2db      	uxtb	r3, r3
 8018676:	2b20      	cmp	r3, #32
 8018678:	d165      	bne.n	8018746 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d002      	beq.n	8018686 <HAL_UART_Transmit_DMA+0x26>
 8018680:	88fb      	ldrh	r3, [r7, #6]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d101      	bne.n	801868a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8018686:	2301      	movs	r3, #1
 8018688:	e05e      	b.n	8018748 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018690:	2b01      	cmp	r3, #1
 8018692:	d101      	bne.n	8018698 <HAL_UART_Transmit_DMA+0x38>
 8018694:	2302      	movs	r3, #2
 8018696:	e057      	b.n	8018748 <HAL_UART_Transmit_DMA+0xe8>
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2201      	movs	r2, #1
 801869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80186a0:	68ba      	ldr	r2, [r7, #8]
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	88fa      	ldrh	r2, [r7, #6]
 80186aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	88fa      	ldrh	r2, [r7, #6]
 80186b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2200      	movs	r2, #0
 80186b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2221      	movs	r2, #33	; 0x21
 80186bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186c4:	4a22      	ldr	r2, [pc, #136]	; (8018750 <HAL_UART_Transmit_DMA+0xf0>)
 80186c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186cc:	4a21      	ldr	r2, [pc, #132]	; (8018754 <HAL_UART_Transmit_DMA+0xf4>)
 80186ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186d4:	4a20      	ldr	r2, [pc, #128]	; (8018758 <HAL_UART_Transmit_DMA+0xf8>)
 80186d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186dc:	2200      	movs	r2, #0
 80186de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80186e0:	f107 0308 	add.w	r3, r7, #8
 80186e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80186ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ec:	6819      	ldr	r1, [r3, #0]
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	3304      	adds	r3, #4
 80186f4:	461a      	mov	r2, r3
 80186f6:	88fb      	ldrh	r3, [r7, #6]
 80186f8:	f7fc fdb0 	bl	801525c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018704:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	2200      	movs	r2, #0
 801870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	3314      	adds	r3, #20
 8018714:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018716:	69bb      	ldr	r3, [r7, #24]
 8018718:	e853 3f00 	ldrex	r3, [r3]
 801871c:	617b      	str	r3, [r7, #20]
   return(result);
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018724:	62bb      	str	r3, [r7, #40]	; 0x28
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	3314      	adds	r3, #20
 801872c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801872e:	627a      	str	r2, [r7, #36]	; 0x24
 8018730:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018732:	6a39      	ldr	r1, [r7, #32]
 8018734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018736:	e841 2300 	strex	r3, r2, [r1]
 801873a:	61fb      	str	r3, [r7, #28]
   return(result);
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d1e5      	bne.n	801870e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8018742:	2300      	movs	r3, #0
 8018744:	e000      	b.n	8018748 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8018746:	2302      	movs	r3, #2
  }
}
 8018748:	4618      	mov	r0, r3
 801874a:	3730      	adds	r7, #48	; 0x30
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}
 8018750:	08018da9 	.word	0x08018da9
 8018754:	08018e45 	.word	0x08018e45
 8018758:	08018e63 	.word	0x08018e63

0801875c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b0ba      	sub	sp, #232	; 0xe8
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	695b      	ldr	r3, [r3, #20]
 801877e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8018782:	2300      	movs	r3, #0
 8018784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8018788:	2300      	movs	r3, #0
 801878a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018792:	f003 030f 	and.w	r3, r3, #15
 8018796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801879a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d10f      	bne.n	80187c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80187a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80187a6:	f003 0320 	and.w	r3, r3, #32
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d009      	beq.n	80187c2 <HAL_UART_IRQHandler+0x66>
 80187ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80187b2:	f003 0320 	and.w	r3, r3, #32
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d003      	beq.n	80187c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f000 fca5 	bl	801910a <UART_Receive_IT>
      return;
 80187c0:	e25b      	b.n	8018c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80187c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	f000 80e1 	beq.w	801898e <HAL_UART_IRQHandler+0x232>
 80187cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80187d0:	f003 0301 	and.w	r3, r3, #1
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d106      	bne.n	80187e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80187d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80187dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	f000 80d4 	beq.w	801898e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80187e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80187ea:	f003 0301 	and.w	r3, r3, #1
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d00b      	beq.n	801880a <HAL_UART_IRQHandler+0xae>
 80187f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80187f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d005      	beq.n	801880a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018802:	f043 0201 	orr.w	r2, r3, #1
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801880e:	f003 0304 	and.w	r3, r3, #4
 8018812:	2b00      	cmp	r3, #0
 8018814:	d00b      	beq.n	801882e <HAL_UART_IRQHandler+0xd2>
 8018816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801881a:	f003 0301 	and.w	r3, r3, #1
 801881e:	2b00      	cmp	r3, #0
 8018820:	d005      	beq.n	801882e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018826:	f043 0202 	orr.w	r2, r3, #2
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018832:	f003 0302 	and.w	r3, r3, #2
 8018836:	2b00      	cmp	r3, #0
 8018838:	d00b      	beq.n	8018852 <HAL_UART_IRQHandler+0xf6>
 801883a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801883e:	f003 0301 	and.w	r3, r3, #1
 8018842:	2b00      	cmp	r3, #0
 8018844:	d005      	beq.n	8018852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801884a:	f043 0204 	orr.w	r2, r3, #4
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8018852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018856:	f003 0308 	and.w	r3, r3, #8
 801885a:	2b00      	cmp	r3, #0
 801885c:	d011      	beq.n	8018882 <HAL_UART_IRQHandler+0x126>
 801885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018862:	f003 0320 	and.w	r3, r3, #32
 8018866:	2b00      	cmp	r3, #0
 8018868:	d105      	bne.n	8018876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801886a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801886e:	f003 0301 	and.w	r3, r3, #1
 8018872:	2b00      	cmp	r3, #0
 8018874:	d005      	beq.n	8018882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801887a:	f043 0208 	orr.w	r2, r3, #8
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018886:	2b00      	cmp	r3, #0
 8018888:	f000 81f2 	beq.w	8018c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018890:	f003 0320 	and.w	r3, r3, #32
 8018894:	2b00      	cmp	r3, #0
 8018896:	d008      	beq.n	80188aa <HAL_UART_IRQHandler+0x14e>
 8018898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801889c:	f003 0320 	and.w	r3, r3, #32
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d002      	beq.n	80188aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f000 fc30 	bl	801910a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	695b      	ldr	r3, [r3, #20]
 80188b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188b4:	2b40      	cmp	r3, #64	; 0x40
 80188b6:	bf0c      	ite	eq
 80188b8:	2301      	moveq	r3, #1
 80188ba:	2300      	movne	r3, #0
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188c6:	f003 0308 	and.w	r3, r3, #8
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d103      	bne.n	80188d6 <HAL_UART_IRQHandler+0x17a>
 80188ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d051      	beq.n	801897a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f000 fb36 	bl	8018f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	695b      	ldr	r3, [r3, #20]
 80188e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188e6:	2b40      	cmp	r3, #64	; 0x40
 80188e8:	d142      	bne.n	8018970 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	3314      	adds	r3, #20
 80188f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80188f8:	e853 3f00 	ldrex	r3, [r3]
 80188fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8018900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	3314      	adds	r3, #20
 8018912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801891a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801891e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8018922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018926:	e841 2300 	strex	r3, r2, [r1]
 801892a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801892e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018932:	2b00      	cmp	r3, #0
 8018934:	d1d9      	bne.n	80188ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801893a:	2b00      	cmp	r3, #0
 801893c:	d013      	beq.n	8018966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018942:	4a7f      	ldr	r2, [pc, #508]	; (8018b40 <HAL_UART_IRQHandler+0x3e4>)
 8018944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801894a:	4618      	mov	r0, r3
 801894c:	f7fc fd4e 	bl	80153ec <HAL_DMA_Abort_IT>
 8018950:	4603      	mov	r3, r0
 8018952:	2b00      	cmp	r3, #0
 8018954:	d019      	beq.n	801898a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801895a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801895c:	687a      	ldr	r2, [r7, #4]
 801895e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018960:	4610      	mov	r0, r2
 8018962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018964:	e011      	b.n	801898a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801896e:	e00c      	b.n	801898a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018978:	e007      	b.n	801898a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	2200      	movs	r2, #0
 8018986:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8018988:	e172      	b.n	8018c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801898a:	bf00      	nop
    return;
 801898c:	e170      	b.n	8018c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018992:	2b01      	cmp	r3, #1
 8018994:	f040 814c 	bne.w	8018c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8018998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801899c:	f003 0310 	and.w	r3, r3, #16
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	f000 8145 	beq.w	8018c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80189a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80189aa:	f003 0310 	and.w	r3, r3, #16
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f000 813e 	beq.w	8018c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80189b4:	2300      	movs	r3, #0
 80189b6:	60bb      	str	r3, [r7, #8]
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	60bb      	str	r3, [r7, #8]
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	60bb      	str	r3, [r7, #8]
 80189c8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	695b      	ldr	r3, [r3, #20]
 80189d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189d4:	2b40      	cmp	r3, #64	; 0x40
 80189d6:	f040 80b5 	bne.w	8018b44 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80189e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 8142 	beq.w	8018c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80189f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80189f8:	429a      	cmp	r2, r3
 80189fa:	f080 813b 	bcs.w	8018c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8018a04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a0a:	69db      	ldr	r3, [r3, #28]
 8018a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a10:	f000 8088 	beq.w	8018b24 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	330c      	adds	r3, #12
 8018a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018a22:	e853 3f00 	ldrex	r3, [r3]
 8018a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8018a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	330c      	adds	r3, #12
 8018a3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018a40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8018a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018a50:	e841 2300 	strex	r3, r2, [r1]
 8018a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8018a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d1d9      	bne.n	8018a14 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	3314      	adds	r3, #20
 8018a66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018a6a:	e853 3f00 	ldrex	r3, [r3]
 8018a6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018a72:	f023 0301 	bic.w	r3, r3, #1
 8018a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	3314      	adds	r3, #20
 8018a80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018a84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8018a88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018a90:	e841 2300 	strex	r3, r2, [r1]
 8018a94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d1e1      	bne.n	8018a60 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	3314      	adds	r3, #20
 8018aa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018aa6:	e853 3f00 	ldrex	r3, [r3]
 8018aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	3314      	adds	r3, #20
 8018abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018ac0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018ac8:	e841 2300 	strex	r3, r2, [r1]
 8018acc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d1e3      	bne.n	8018a9c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	2220      	movs	r2, #32
 8018ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	330c      	adds	r3, #12
 8018ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018aec:	e853 3f00 	ldrex	r3, [r3]
 8018af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018af4:	f023 0310 	bic.w	r3, r3, #16
 8018af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	330c      	adds	r3, #12
 8018b02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8018b08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018b0e:	e841 2300 	strex	r3, r2, [r1]
 8018b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d1e3      	bne.n	8018ae2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7fc fbf4 	bl	801530c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018b28:	687a      	ldr	r2, [r7, #4]
 8018b2a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8018b2c:	687a      	ldr	r2, [r7, #4]
 8018b2e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8018b30:	b292      	uxth	r2, r2
 8018b32:	1a8a      	subs	r2, r1, r2
 8018b34:	b292      	uxth	r2, r2
 8018b36:	4611      	mov	r1, r2
 8018b38:	6878      	ldr	r0, [r7, #4]
 8018b3a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8018b3c:	e09a      	b.n	8018c74 <HAL_UART_IRQHandler+0x518>
 8018b3e:	bf00      	nop
 8018b40:	0801900f 	.word	0x0801900f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	1ad3      	subs	r3, r2, r3
 8018b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	f000 808c 	beq.w	8018c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8018b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	f000 8087 	beq.w	8018c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	330c      	adds	r3, #12
 8018b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b74:	e853 3f00 	ldrex	r3, [r3]
 8018b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	330c      	adds	r3, #12
 8018b8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8018b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8018b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018b96:	e841 2300 	strex	r3, r2, [r1]
 8018b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d1e3      	bne.n	8018b6a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	3314      	adds	r3, #20
 8018ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bac:	e853 3f00 	ldrex	r3, [r3]
 8018bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	f023 0301 	bic.w	r3, r3, #1
 8018bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	3314      	adds	r3, #20
 8018bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8018bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bce:	e841 2300 	strex	r3, r2, [r1]
 8018bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d1e3      	bne.n	8018ba2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2220      	movs	r2, #32
 8018bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2200      	movs	r2, #0
 8018be6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	330c      	adds	r3, #12
 8018bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018bf0:	693b      	ldr	r3, [r7, #16]
 8018bf2:	e853 3f00 	ldrex	r3, [r3]
 8018bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	f023 0310 	bic.w	r3, r3, #16
 8018bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	330c      	adds	r3, #12
 8018c08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018c0c:	61fa      	str	r2, [r7, #28]
 8018c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018c10:	69b9      	ldr	r1, [r7, #24]
 8018c12:	69fa      	ldr	r2, [r7, #28]
 8018c14:	e841 2300 	strex	r3, r2, [r1]
 8018c18:	617b      	str	r3, [r7, #20]
   return(result);
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d1e3      	bne.n	8018be8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c24:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8018c28:	4611      	mov	r1, r2
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8018c2e:	e023      	b.n	8018c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8018c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d009      	beq.n	8018c50 <HAL_UART_IRQHandler+0x4f4>
 8018c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d003      	beq.n	8018c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f000 f9f5 	bl	8019038 <UART_Transmit_IT>
    return;
 8018c4e:	e014      	b.n	8018c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8018c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d00e      	beq.n	8018c7a <HAL_UART_IRQHandler+0x51e>
 8018c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d008      	beq.n	8018c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f000 fa35 	bl	80190d8 <UART_EndTransmit_IT>
    return;
 8018c6e:	e004      	b.n	8018c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8018c70:	bf00      	nop
 8018c72:	e002      	b.n	8018c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8018c74:	bf00      	nop
 8018c76:	e000      	b.n	8018c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8018c78:	bf00      	nop
  }
}
 8018c7a:	37e8      	adds	r7, #232	; 0xe8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018c80:	b480      	push	{r7}
 8018c82:	b083      	sub	sp, #12
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8018c88:	bf00      	nop
 8018c8a:	370c      	adds	r7, #12
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c92:	4770      	bx	lr

08018c94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018c94:	b480      	push	{r7}
 8018c96:	b083      	sub	sp, #12
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8018c9c:	bf00      	nop
 8018c9e:	370c      	adds	r7, #12
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca6:	4770      	bx	lr

08018ca8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b083      	sub	sp, #12
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8018cb0:	bf00      	nop
 8018cb2:	370c      	adds	r7, #12
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cba:	4770      	bx	lr

08018cbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018cbc:	b480      	push	{r7}
 8018cbe:	b083      	sub	sp, #12
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8018cc4:	bf00      	nop
 8018cc6:	370c      	adds	r7, #12
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr

08018cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8018cd8:	bf00      	nop
 8018cda:	370c      	adds	r7, #12
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce2:	4770      	bx	lr

08018ce4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8018cec:	bf00      	nop
 8018cee:	370c      	adds	r7, #12
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr

08018cf8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b083      	sub	sp, #12
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8018d00:	bf00      	nop
 8018d02:	370c      	adds	r7, #12
 8018d04:	46bd      	mov	sp, r7
 8018d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0a:	4770      	bx	lr

08018d0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8018d0c:	b480      	push	{r7}
 8018d0e:	b083      	sub	sp, #12
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8018d14:	bf00      	nop
 8018d16:	370c      	adds	r7, #12
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr

08018d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	460b      	mov	r3, r1
 8018d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018d2c:	bf00      	nop
 8018d2e:	370c      	adds	r7, #12
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr

08018d38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b083      	sub	sp, #12
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	4a10      	ldr	r2, [pc, #64]	; (8018d84 <UART_InitCallbacksToDefault+0x4c>)
 8018d44:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	4a0f      	ldr	r2, [pc, #60]	; (8018d88 <UART_InitCallbacksToDefault+0x50>)
 8018d4a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	4a0f      	ldr	r2, [pc, #60]	; (8018d8c <UART_InitCallbacksToDefault+0x54>)
 8018d50:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	4a0e      	ldr	r2, [pc, #56]	; (8018d90 <UART_InitCallbacksToDefault+0x58>)
 8018d56:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	4a0e      	ldr	r2, [pc, #56]	; (8018d94 <UART_InitCallbacksToDefault+0x5c>)
 8018d5c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	4a0d      	ldr	r2, [pc, #52]	; (8018d98 <UART_InitCallbacksToDefault+0x60>)
 8018d62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	4a0d      	ldr	r2, [pc, #52]	; (8018d9c <UART_InitCallbacksToDefault+0x64>)
 8018d68:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4a0c      	ldr	r2, [pc, #48]	; (8018da0 <UART_InitCallbacksToDefault+0x68>)
 8018d6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	4a0c      	ldr	r2, [pc, #48]	; (8018da4 <UART_InitCallbacksToDefault+0x6c>)
 8018d74:	669a      	str	r2, [r3, #104]	; 0x68

}
 8018d76:	bf00      	nop
 8018d78:	370c      	adds	r7, #12
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop
 8018d84:	08018c95 	.word	0x08018c95
 8018d88:	08018c81 	.word	0x08018c81
 8018d8c:	08018cbd 	.word	0x08018cbd
 8018d90:	08018ca9 	.word	0x08018ca9
 8018d94:	08018cd1 	.word	0x08018cd1
 8018d98:	08018ce5 	.word	0x08018ce5
 8018d9c:	08018cf9 	.word	0x08018cf9
 8018da0:	08018d0d 	.word	0x08018d0d
 8018da4:	08018d21 	.word	0x08018d21

08018da8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b090      	sub	sp, #64	; 0x40
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d137      	bne.n	8018e34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8018dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	3314      	adds	r3, #20
 8018dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd4:	e853 3f00 	ldrex	r3, [r3]
 8018dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8018dda:	6a3b      	ldr	r3, [r7, #32]
 8018ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8018de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	3314      	adds	r3, #20
 8018de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018dea:	633a      	str	r2, [r7, #48]	; 0x30
 8018dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018df2:	e841 2300 	strex	r3, r2, [r1]
 8018df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d1e5      	bne.n	8018dca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	330c      	adds	r3, #12
 8018e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	e853 3f00 	ldrex	r3, [r3]
 8018e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e14:	637b      	str	r3, [r7, #52]	; 0x34
 8018e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	330c      	adds	r3, #12
 8018e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e1e:	61fa      	str	r2, [r7, #28]
 8018e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e22:	69b9      	ldr	r1, [r7, #24]
 8018e24:	69fa      	ldr	r2, [r7, #28]
 8018e26:	e841 2300 	strex	r3, r2, [r1]
 8018e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d1e5      	bne.n	8018dfe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018e32:	e003      	b.n	8018e3c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8018e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018e3a:	4798      	blx	r3
}
 8018e3c:	bf00      	nop
 8018e3e:	3740      	adds	r7, #64	; 0x40
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e56:	68f8      	ldr	r0, [r7, #12]
 8018e58:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018e5a:	bf00      	nop
 8018e5c:	3710      	adds	r7, #16
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}

08018e62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018e62:	b580      	push	{r7, lr}
 8018e64:	b084      	sub	sp, #16
 8018e66:	af00      	add	r7, sp, #0
 8018e68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	695b      	ldr	r3, [r3, #20]
 8018e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e7e:	2b80      	cmp	r3, #128	; 0x80
 8018e80:	bf0c      	ite	eq
 8018e82:	2301      	moveq	r3, #1
 8018e84:	2300      	movne	r3, #0
 8018e86:	b2db      	uxtb	r3, r3
 8018e88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e90:	b2db      	uxtb	r3, r3
 8018e92:	2b21      	cmp	r3, #33	; 0x21
 8018e94:	d108      	bne.n	8018ea8 <UART_DMAError+0x46>
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d005      	beq.n	8018ea8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8018ea2:	68b8      	ldr	r0, [r7, #8]
 8018ea4:	f000 f828 	bl	8018ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	695b      	ldr	r3, [r3, #20]
 8018eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018eb2:	2b40      	cmp	r3, #64	; 0x40
 8018eb4:	bf0c      	ite	eq
 8018eb6:	2301      	moveq	r3, #1
 8018eb8:	2300      	movne	r3, #0
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018ec4:	b2db      	uxtb	r3, r3
 8018ec6:	2b22      	cmp	r3, #34	; 0x22
 8018ec8:	d108      	bne.n	8018edc <UART_DMAError+0x7a>
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d005      	beq.n	8018edc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8018ed6:	68b8      	ldr	r0, [r7, #8]
 8018ed8:	f000 f836 	bl	8018f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ee0:	f043 0210 	orr.w	r2, r3, #16
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018ee8:	68bb      	ldr	r3, [r7, #8]
 8018eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018eec:	68b8      	ldr	r0, [r7, #8]
 8018eee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018ef0:	bf00      	nop
 8018ef2:	3710      	adds	r7, #16
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}

08018ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018ef8:	b480      	push	{r7}
 8018efa:	b089      	sub	sp, #36	; 0x24
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	330c      	adds	r3, #12
 8018f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	e853 3f00 	ldrex	r3, [r3]
 8018f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8018f16:	61fb      	str	r3, [r7, #28]
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	330c      	adds	r3, #12
 8018f1e:	69fa      	ldr	r2, [r7, #28]
 8018f20:	61ba      	str	r2, [r7, #24]
 8018f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f24:	6979      	ldr	r1, [r7, #20]
 8018f26:	69ba      	ldr	r2, [r7, #24]
 8018f28:	e841 2300 	strex	r3, r2, [r1]
 8018f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8018f2e:	693b      	ldr	r3, [r7, #16]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d1e5      	bne.n	8018f00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2220      	movs	r2, #32
 8018f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8018f3c:	bf00      	nop
 8018f3e:	3724      	adds	r7, #36	; 0x24
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr

08018f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018f48:	b480      	push	{r7}
 8018f4a:	b095      	sub	sp, #84	; 0x54
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	330c      	adds	r3, #12
 8018f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f5a:	e853 3f00 	ldrex	r3, [r3]
 8018f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	330c      	adds	r3, #12
 8018f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018f70:	643a      	str	r2, [r7, #64]	; 0x40
 8018f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018f78:	e841 2300 	strex	r3, r2, [r1]
 8018f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1e5      	bne.n	8018f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	3314      	adds	r3, #20
 8018f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f8c:	6a3b      	ldr	r3, [r7, #32]
 8018f8e:	e853 3f00 	ldrex	r3, [r3]
 8018f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8018f94:	69fb      	ldr	r3, [r7, #28]
 8018f96:	f023 0301 	bic.w	r3, r3, #1
 8018f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	3314      	adds	r3, #20
 8018fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018fac:	e841 2300 	strex	r3, r2, [r1]
 8018fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d1e5      	bne.n	8018f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fbc:	2b01      	cmp	r3, #1
 8018fbe:	d119      	bne.n	8018ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	330c      	adds	r3, #12
 8018fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	e853 3f00 	ldrex	r3, [r3]
 8018fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	f023 0310 	bic.w	r3, r3, #16
 8018fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	330c      	adds	r3, #12
 8018fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018fe0:	61ba      	str	r2, [r7, #24]
 8018fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fe4:	6979      	ldr	r1, [r7, #20]
 8018fe6:	69ba      	ldr	r2, [r7, #24]
 8018fe8:	e841 2300 	strex	r3, r2, [r1]
 8018fec:	613b      	str	r3, [r7, #16]
   return(result);
 8018fee:	693b      	ldr	r3, [r7, #16]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d1e5      	bne.n	8018fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2220      	movs	r2, #32
 8018ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	2200      	movs	r2, #0
 8019000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8019002:	bf00      	nop
 8019004:	3754      	adds	r7, #84	; 0x54
 8019006:	46bd      	mov	sp, r7
 8019008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900c:	4770      	bx	lr

0801900e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801900e:	b580      	push	{r7, lr}
 8019010:	b084      	sub	sp, #16
 8019012:	af00      	add	r7, sp, #0
 8019014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801901a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	2200      	movs	r2, #0
 8019020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2200      	movs	r2, #0
 8019026:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019030:	bf00      	nop
 8019032:	3710      	adds	r7, #16
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}

08019038 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8019038:	b480      	push	{r7}
 801903a:	b085      	sub	sp, #20
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019046:	b2db      	uxtb	r3, r3
 8019048:	2b21      	cmp	r3, #33	; 0x21
 801904a:	d13e      	bne.n	80190ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	689b      	ldr	r3, [r3, #8]
 8019050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019054:	d114      	bne.n	8019080 <UART_Transmit_IT+0x48>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	691b      	ldr	r3, [r3, #16]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d110      	bne.n	8019080 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	6a1b      	ldr	r3, [r3, #32]
 8019062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	881b      	ldrh	r3, [r3, #0]
 8019068:	461a      	mov	r2, r3
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a1b      	ldr	r3, [r3, #32]
 8019078:	1c9a      	adds	r2, r3, #2
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	621a      	str	r2, [r3, #32]
 801907e:	e008      	b.n	8019092 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6a1b      	ldr	r3, [r3, #32]
 8019084:	1c59      	adds	r1, r3, #1
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	6211      	str	r1, [r2, #32]
 801908a:	781a      	ldrb	r2, [r3, #0]
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019096:	b29b      	uxth	r3, r3
 8019098:	3b01      	subs	r3, #1
 801909a:	b29b      	uxth	r3, r3
 801909c:	687a      	ldr	r2, [r7, #4]
 801909e:	4619      	mov	r1, r3
 80190a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d10f      	bne.n	80190c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	68da      	ldr	r2, [r3, #12]
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80190b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	68da      	ldr	r2, [r3, #12]
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80190c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80190c6:	2300      	movs	r3, #0
 80190c8:	e000      	b.n	80190cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80190ca:	2302      	movs	r3, #2
  }
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3714      	adds	r7, #20
 80190d0:	46bd      	mov	sp, r7
 80190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d6:	4770      	bx	lr

080190d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	68da      	ldr	r2, [r3, #12]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80190ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2220      	movs	r2, #32
 80190f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8019100:	2300      	movs	r3, #0
}
 8019102:	4618      	mov	r0, r3
 8019104:	3708      	adds	r7, #8
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}

0801910a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801910a:	b580      	push	{r7, lr}
 801910c:	b08c      	sub	sp, #48	; 0x30
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019118:	b2db      	uxtb	r3, r3
 801911a:	2b22      	cmp	r3, #34	; 0x22
 801911c:	f040 80ad 	bne.w	801927a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	689b      	ldr	r3, [r3, #8]
 8019124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019128:	d117      	bne.n	801915a <UART_Receive_IT+0x50>
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	691b      	ldr	r3, [r3, #16]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d113      	bne.n	801915a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8019132:	2300      	movs	r3, #0
 8019134:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801913a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	b29b      	uxth	r3, r3
 8019144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019148:	b29a      	uxth	r2, r3
 801914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019152:	1c9a      	adds	r2, r3, #2
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	629a      	str	r2, [r3, #40]	; 0x28
 8019158:	e026      	b.n	80191a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801915e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8019160:	2300      	movs	r3, #0
 8019162:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	689b      	ldr	r3, [r3, #8]
 8019168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801916c:	d007      	beq.n	801917e <UART_Receive_IT+0x74>
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	689b      	ldr	r3, [r3, #8]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d10a      	bne.n	801918c <UART_Receive_IT+0x82>
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	691b      	ldr	r3, [r3, #16]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d106      	bne.n	801918c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	b2da      	uxtb	r2, r3
 8019186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019188:	701a      	strb	r2, [r3, #0]
 801918a:	e008      	b.n	801919e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	685b      	ldr	r3, [r3, #4]
 8019192:	b2db      	uxtb	r3, r3
 8019194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019198:	b2da      	uxtb	r2, r3
 801919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801919c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191a2:	1c5a      	adds	r2, r3, #1
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	3b01      	subs	r3, #1
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	687a      	ldr	r2, [r7, #4]
 80191b4:	4619      	mov	r1, r3
 80191b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d15c      	bne.n	8019276 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	68da      	ldr	r2, [r3, #12]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	f022 0220 	bic.w	r2, r2, #32
 80191ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	68da      	ldr	r2, [r3, #12]
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80191da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	695a      	ldr	r2, [r3, #20]
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	f022 0201 	bic.w	r2, r2, #1
 80191ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2220      	movs	r2, #32
 80191f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d136      	bne.n	801926a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2200      	movs	r2, #0
 8019200:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	330c      	adds	r3, #12
 8019208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801920a:	697b      	ldr	r3, [r7, #20]
 801920c:	e853 3f00 	ldrex	r3, [r3]
 8019210:	613b      	str	r3, [r7, #16]
   return(result);
 8019212:	693b      	ldr	r3, [r7, #16]
 8019214:	f023 0310 	bic.w	r3, r3, #16
 8019218:	627b      	str	r3, [r7, #36]	; 0x24
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	330c      	adds	r3, #12
 8019220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019222:	623a      	str	r2, [r7, #32]
 8019224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019226:	69f9      	ldr	r1, [r7, #28]
 8019228:	6a3a      	ldr	r2, [r7, #32]
 801922a:	e841 2300 	strex	r3, r2, [r1]
 801922e:	61bb      	str	r3, [r7, #24]
   return(result);
 8019230:	69bb      	ldr	r3, [r7, #24]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d1e5      	bne.n	8019202 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f003 0310 	and.w	r3, r3, #16
 8019240:	2b10      	cmp	r3, #16
 8019242:	d10a      	bne.n	801925a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8019244:	2300      	movs	r3, #0
 8019246:	60fb      	str	r3, [r7, #12]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	60fb      	str	r3, [r7, #12]
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	60fb      	str	r3, [r7, #12]
 8019258:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8019262:	4611      	mov	r1, r2
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	4798      	blx	r3
 8019268:	e003      	b.n	8019272 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801926e:	6878      	ldr	r0, [r7, #4]
 8019270:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8019272:	2300      	movs	r3, #0
 8019274:	e002      	b.n	801927c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8019276:	2300      	movs	r3, #0
 8019278:	e000      	b.n	801927c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 801927a:	2302      	movs	r3, #2
  }
}
 801927c:	4618      	mov	r0, r3
 801927e:	3730      	adds	r7, #48	; 0x30
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}

08019284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019288:	b0c0      	sub	sp, #256	; 0x100
 801928a:	af00      	add	r7, sp, #0
 801928c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	691b      	ldr	r3, [r3, #16]
 8019298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192a0:	68d9      	ldr	r1, [r3, #12]
 80192a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192a6:	681a      	ldr	r2, [r3, #0]
 80192a8:	ea40 0301 	orr.w	r3, r0, r1
 80192ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80192ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192b2:	689a      	ldr	r2, [r3, #8]
 80192b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192b8:	691b      	ldr	r3, [r3, #16]
 80192ba:	431a      	orrs	r2, r3
 80192bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192c0:	695b      	ldr	r3, [r3, #20]
 80192c2:	431a      	orrs	r2, r3
 80192c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192c8:	69db      	ldr	r3, [r3, #28]
 80192ca:	4313      	orrs	r3, r2
 80192cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80192d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	68db      	ldr	r3, [r3, #12]
 80192d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80192dc:	f021 010c 	bic.w	r1, r1, #12
 80192e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192e4:	681a      	ldr	r2, [r3, #0]
 80192e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80192ea:	430b      	orrs	r3, r1
 80192ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80192ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	695b      	ldr	r3, [r3, #20]
 80192f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80192fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80192fe:	6999      	ldr	r1, [r3, #24]
 8019300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019304:	681a      	ldr	r2, [r3, #0]
 8019306:	ea40 0301 	orr.w	r3, r0, r1
 801930a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019310:	681a      	ldr	r2, [r3, #0]
 8019312:	4b8f      	ldr	r3, [pc, #572]	; (8019550 <UART_SetConfig+0x2cc>)
 8019314:	429a      	cmp	r2, r3
 8019316:	d005      	beq.n	8019324 <UART_SetConfig+0xa0>
 8019318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801931c:	681a      	ldr	r2, [r3, #0]
 801931e:	4b8d      	ldr	r3, [pc, #564]	; (8019554 <UART_SetConfig+0x2d0>)
 8019320:	429a      	cmp	r2, r3
 8019322:	d104      	bne.n	801932e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8019324:	f7fe fbbe 	bl	8017aa4 <HAL_RCC_GetPCLK2Freq>
 8019328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801932c:	e003      	b.n	8019336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801932e:	f7fe fba5 	bl	8017a7c <HAL_RCC_GetPCLK1Freq>
 8019332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801933a:	69db      	ldr	r3, [r3, #28]
 801933c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019340:	f040 810c 	bne.w	801955c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8019344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019348:	2200      	movs	r2, #0
 801934a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801934e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8019352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8019356:	4622      	mov	r2, r4
 8019358:	462b      	mov	r3, r5
 801935a:	1891      	adds	r1, r2, r2
 801935c:	65b9      	str	r1, [r7, #88]	; 0x58
 801935e:	415b      	adcs	r3, r3
 8019360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019366:	4621      	mov	r1, r4
 8019368:	eb12 0801 	adds.w	r8, r2, r1
 801936c:	4629      	mov	r1, r5
 801936e:	eb43 0901 	adc.w	r9, r3, r1
 8019372:	f04f 0200 	mov.w	r2, #0
 8019376:	f04f 0300 	mov.w	r3, #0
 801937a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801937e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8019382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8019386:	4690      	mov	r8, r2
 8019388:	4699      	mov	r9, r3
 801938a:	4623      	mov	r3, r4
 801938c:	eb18 0303 	adds.w	r3, r8, r3
 8019390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8019394:	462b      	mov	r3, r5
 8019396:	eb49 0303 	adc.w	r3, r9, r3
 801939a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	2200      	movs	r2, #0
 80193a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80193aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80193ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80193b2:	460b      	mov	r3, r1
 80193b4:	18db      	adds	r3, r3, r3
 80193b6:	653b      	str	r3, [r7, #80]	; 0x50
 80193b8:	4613      	mov	r3, r2
 80193ba:	eb42 0303 	adc.w	r3, r2, r3
 80193be:	657b      	str	r3, [r7, #84]	; 0x54
 80193c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80193c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80193c8:	f7e7 fc46 	bl	8000c58 <__aeabi_uldivmod>
 80193cc:	4602      	mov	r2, r0
 80193ce:	460b      	mov	r3, r1
 80193d0:	4b61      	ldr	r3, [pc, #388]	; (8019558 <UART_SetConfig+0x2d4>)
 80193d2:	fba3 2302 	umull	r2, r3, r3, r2
 80193d6:	095b      	lsrs	r3, r3, #5
 80193d8:	011c      	lsls	r4, r3, #4
 80193da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80193de:	2200      	movs	r2, #0
 80193e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80193e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80193e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80193ec:	4642      	mov	r2, r8
 80193ee:	464b      	mov	r3, r9
 80193f0:	1891      	adds	r1, r2, r2
 80193f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80193f4:	415b      	adcs	r3, r3
 80193f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80193f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80193fc:	4641      	mov	r1, r8
 80193fe:	eb12 0a01 	adds.w	sl, r2, r1
 8019402:	4649      	mov	r1, r9
 8019404:	eb43 0b01 	adc.w	fp, r3, r1
 8019408:	f04f 0200 	mov.w	r2, #0
 801940c:	f04f 0300 	mov.w	r3, #0
 8019410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8019418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801941c:	4692      	mov	sl, r2
 801941e:	469b      	mov	fp, r3
 8019420:	4643      	mov	r3, r8
 8019422:	eb1a 0303 	adds.w	r3, sl, r3
 8019426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801942a:	464b      	mov	r3, r9
 801942c:	eb4b 0303 	adc.w	r3, fp, r3
 8019430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8019434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	2200      	movs	r2, #0
 801943c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8019444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8019448:	460b      	mov	r3, r1
 801944a:	18db      	adds	r3, r3, r3
 801944c:	643b      	str	r3, [r7, #64]	; 0x40
 801944e:	4613      	mov	r3, r2
 8019450:	eb42 0303 	adc.w	r3, r2, r3
 8019454:	647b      	str	r3, [r7, #68]	; 0x44
 8019456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801945a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801945e:	f7e7 fbfb 	bl	8000c58 <__aeabi_uldivmod>
 8019462:	4602      	mov	r2, r0
 8019464:	460b      	mov	r3, r1
 8019466:	4611      	mov	r1, r2
 8019468:	4b3b      	ldr	r3, [pc, #236]	; (8019558 <UART_SetConfig+0x2d4>)
 801946a:	fba3 2301 	umull	r2, r3, r3, r1
 801946e:	095b      	lsrs	r3, r3, #5
 8019470:	2264      	movs	r2, #100	; 0x64
 8019472:	fb02 f303 	mul.w	r3, r2, r3
 8019476:	1acb      	subs	r3, r1, r3
 8019478:	00db      	lsls	r3, r3, #3
 801947a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801947e:	4b36      	ldr	r3, [pc, #216]	; (8019558 <UART_SetConfig+0x2d4>)
 8019480:	fba3 2302 	umull	r2, r3, r3, r2
 8019484:	095b      	lsrs	r3, r3, #5
 8019486:	005b      	lsls	r3, r3, #1
 8019488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801948c:	441c      	add	r4, r3
 801948e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019492:	2200      	movs	r2, #0
 8019494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801949c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80194a0:	4642      	mov	r2, r8
 80194a2:	464b      	mov	r3, r9
 80194a4:	1891      	adds	r1, r2, r2
 80194a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80194a8:	415b      	adcs	r3, r3
 80194aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80194ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80194b0:	4641      	mov	r1, r8
 80194b2:	1851      	adds	r1, r2, r1
 80194b4:	6339      	str	r1, [r7, #48]	; 0x30
 80194b6:	4649      	mov	r1, r9
 80194b8:	414b      	adcs	r3, r1
 80194ba:	637b      	str	r3, [r7, #52]	; 0x34
 80194bc:	f04f 0200 	mov.w	r2, #0
 80194c0:	f04f 0300 	mov.w	r3, #0
 80194c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80194c8:	4659      	mov	r1, fp
 80194ca:	00cb      	lsls	r3, r1, #3
 80194cc:	4651      	mov	r1, sl
 80194ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80194d2:	4651      	mov	r1, sl
 80194d4:	00ca      	lsls	r2, r1, #3
 80194d6:	4610      	mov	r0, r2
 80194d8:	4619      	mov	r1, r3
 80194da:	4603      	mov	r3, r0
 80194dc:	4642      	mov	r2, r8
 80194de:	189b      	adds	r3, r3, r2
 80194e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80194e4:	464b      	mov	r3, r9
 80194e6:	460a      	mov	r2, r1
 80194e8:	eb42 0303 	adc.w	r3, r2, r3
 80194ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80194f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80194f4:	685b      	ldr	r3, [r3, #4]
 80194f6:	2200      	movs	r2, #0
 80194f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80194fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8019500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8019504:	460b      	mov	r3, r1
 8019506:	18db      	adds	r3, r3, r3
 8019508:	62bb      	str	r3, [r7, #40]	; 0x28
 801950a:	4613      	mov	r3, r2
 801950c:	eb42 0303 	adc.w	r3, r2, r3
 8019510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8019516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801951a:	f7e7 fb9d 	bl	8000c58 <__aeabi_uldivmod>
 801951e:	4602      	mov	r2, r0
 8019520:	460b      	mov	r3, r1
 8019522:	4b0d      	ldr	r3, [pc, #52]	; (8019558 <UART_SetConfig+0x2d4>)
 8019524:	fba3 1302 	umull	r1, r3, r3, r2
 8019528:	095b      	lsrs	r3, r3, #5
 801952a:	2164      	movs	r1, #100	; 0x64
 801952c:	fb01 f303 	mul.w	r3, r1, r3
 8019530:	1ad3      	subs	r3, r2, r3
 8019532:	00db      	lsls	r3, r3, #3
 8019534:	3332      	adds	r3, #50	; 0x32
 8019536:	4a08      	ldr	r2, [pc, #32]	; (8019558 <UART_SetConfig+0x2d4>)
 8019538:	fba2 2303 	umull	r2, r3, r2, r3
 801953c:	095b      	lsrs	r3, r3, #5
 801953e:	f003 0207 	and.w	r2, r3, #7
 8019542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	4422      	add	r2, r4
 801954a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801954c:	e106      	b.n	801975c <UART_SetConfig+0x4d8>
 801954e:	bf00      	nop
 8019550:	40011000 	.word	0x40011000
 8019554:	40011400 	.word	0x40011400
 8019558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801955c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019560:	2200      	movs	r2, #0
 8019562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801956a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801956e:	4642      	mov	r2, r8
 8019570:	464b      	mov	r3, r9
 8019572:	1891      	adds	r1, r2, r2
 8019574:	6239      	str	r1, [r7, #32]
 8019576:	415b      	adcs	r3, r3
 8019578:	627b      	str	r3, [r7, #36]	; 0x24
 801957a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801957e:	4641      	mov	r1, r8
 8019580:	1854      	adds	r4, r2, r1
 8019582:	4649      	mov	r1, r9
 8019584:	eb43 0501 	adc.w	r5, r3, r1
 8019588:	f04f 0200 	mov.w	r2, #0
 801958c:	f04f 0300 	mov.w	r3, #0
 8019590:	00eb      	lsls	r3, r5, #3
 8019592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019596:	00e2      	lsls	r2, r4, #3
 8019598:	4614      	mov	r4, r2
 801959a:	461d      	mov	r5, r3
 801959c:	4643      	mov	r3, r8
 801959e:	18e3      	adds	r3, r4, r3
 80195a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80195a4:	464b      	mov	r3, r9
 80195a6:	eb45 0303 	adc.w	r3, r5, r3
 80195aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80195ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	2200      	movs	r2, #0
 80195b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80195ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80195be:	f04f 0200 	mov.w	r2, #0
 80195c2:	f04f 0300 	mov.w	r3, #0
 80195c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80195ca:	4629      	mov	r1, r5
 80195cc:	008b      	lsls	r3, r1, #2
 80195ce:	4621      	mov	r1, r4
 80195d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80195d4:	4621      	mov	r1, r4
 80195d6:	008a      	lsls	r2, r1, #2
 80195d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80195dc:	f7e7 fb3c 	bl	8000c58 <__aeabi_uldivmod>
 80195e0:	4602      	mov	r2, r0
 80195e2:	460b      	mov	r3, r1
 80195e4:	4b60      	ldr	r3, [pc, #384]	; (8019768 <UART_SetConfig+0x4e4>)
 80195e6:	fba3 2302 	umull	r2, r3, r3, r2
 80195ea:	095b      	lsrs	r3, r3, #5
 80195ec:	011c      	lsls	r4, r3, #4
 80195ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80195f2:	2200      	movs	r2, #0
 80195f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80195f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80195fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8019600:	4642      	mov	r2, r8
 8019602:	464b      	mov	r3, r9
 8019604:	1891      	adds	r1, r2, r2
 8019606:	61b9      	str	r1, [r7, #24]
 8019608:	415b      	adcs	r3, r3
 801960a:	61fb      	str	r3, [r7, #28]
 801960c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019610:	4641      	mov	r1, r8
 8019612:	1851      	adds	r1, r2, r1
 8019614:	6139      	str	r1, [r7, #16]
 8019616:	4649      	mov	r1, r9
 8019618:	414b      	adcs	r3, r1
 801961a:	617b      	str	r3, [r7, #20]
 801961c:	f04f 0200 	mov.w	r2, #0
 8019620:	f04f 0300 	mov.w	r3, #0
 8019624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8019628:	4659      	mov	r1, fp
 801962a:	00cb      	lsls	r3, r1, #3
 801962c:	4651      	mov	r1, sl
 801962e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8019632:	4651      	mov	r1, sl
 8019634:	00ca      	lsls	r2, r1, #3
 8019636:	4610      	mov	r0, r2
 8019638:	4619      	mov	r1, r3
 801963a:	4603      	mov	r3, r0
 801963c:	4642      	mov	r2, r8
 801963e:	189b      	adds	r3, r3, r2
 8019640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019644:	464b      	mov	r3, r9
 8019646:	460a      	mov	r2, r1
 8019648:	eb42 0303 	adc.w	r3, r2, r3
 801964c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	2200      	movs	r2, #0
 8019658:	67bb      	str	r3, [r7, #120]	; 0x78
 801965a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801965c:	f04f 0200 	mov.w	r2, #0
 8019660:	f04f 0300 	mov.w	r3, #0
 8019664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8019668:	4649      	mov	r1, r9
 801966a:	008b      	lsls	r3, r1, #2
 801966c:	4641      	mov	r1, r8
 801966e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8019672:	4641      	mov	r1, r8
 8019674:	008a      	lsls	r2, r1, #2
 8019676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801967a:	f7e7 faed 	bl	8000c58 <__aeabi_uldivmod>
 801967e:	4602      	mov	r2, r0
 8019680:	460b      	mov	r3, r1
 8019682:	4611      	mov	r1, r2
 8019684:	4b38      	ldr	r3, [pc, #224]	; (8019768 <UART_SetConfig+0x4e4>)
 8019686:	fba3 2301 	umull	r2, r3, r3, r1
 801968a:	095b      	lsrs	r3, r3, #5
 801968c:	2264      	movs	r2, #100	; 0x64
 801968e:	fb02 f303 	mul.w	r3, r2, r3
 8019692:	1acb      	subs	r3, r1, r3
 8019694:	011b      	lsls	r3, r3, #4
 8019696:	3332      	adds	r3, #50	; 0x32
 8019698:	4a33      	ldr	r2, [pc, #204]	; (8019768 <UART_SetConfig+0x4e4>)
 801969a:	fba2 2303 	umull	r2, r3, r2, r3
 801969e:	095b      	lsrs	r3, r3, #5
 80196a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196a4:	441c      	add	r4, r3
 80196a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80196aa:	2200      	movs	r2, #0
 80196ac:	673b      	str	r3, [r7, #112]	; 0x70
 80196ae:	677a      	str	r2, [r7, #116]	; 0x74
 80196b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80196b4:	4642      	mov	r2, r8
 80196b6:	464b      	mov	r3, r9
 80196b8:	1891      	adds	r1, r2, r2
 80196ba:	60b9      	str	r1, [r7, #8]
 80196bc:	415b      	adcs	r3, r3
 80196be:	60fb      	str	r3, [r7, #12]
 80196c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80196c4:	4641      	mov	r1, r8
 80196c6:	1851      	adds	r1, r2, r1
 80196c8:	6039      	str	r1, [r7, #0]
 80196ca:	4649      	mov	r1, r9
 80196cc:	414b      	adcs	r3, r1
 80196ce:	607b      	str	r3, [r7, #4]
 80196d0:	f04f 0200 	mov.w	r2, #0
 80196d4:	f04f 0300 	mov.w	r3, #0
 80196d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80196dc:	4659      	mov	r1, fp
 80196de:	00cb      	lsls	r3, r1, #3
 80196e0:	4651      	mov	r1, sl
 80196e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80196e6:	4651      	mov	r1, sl
 80196e8:	00ca      	lsls	r2, r1, #3
 80196ea:	4610      	mov	r0, r2
 80196ec:	4619      	mov	r1, r3
 80196ee:	4603      	mov	r3, r0
 80196f0:	4642      	mov	r2, r8
 80196f2:	189b      	adds	r3, r3, r2
 80196f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80196f6:	464b      	mov	r3, r9
 80196f8:	460a      	mov	r2, r1
 80196fa:	eb42 0303 	adc.w	r3, r2, r3
 80196fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	2200      	movs	r2, #0
 8019708:	663b      	str	r3, [r7, #96]	; 0x60
 801970a:	667a      	str	r2, [r7, #100]	; 0x64
 801970c:	f04f 0200 	mov.w	r2, #0
 8019710:	f04f 0300 	mov.w	r3, #0
 8019714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8019718:	4649      	mov	r1, r9
 801971a:	008b      	lsls	r3, r1, #2
 801971c:	4641      	mov	r1, r8
 801971e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8019722:	4641      	mov	r1, r8
 8019724:	008a      	lsls	r2, r1, #2
 8019726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801972a:	f7e7 fa95 	bl	8000c58 <__aeabi_uldivmod>
 801972e:	4602      	mov	r2, r0
 8019730:	460b      	mov	r3, r1
 8019732:	4b0d      	ldr	r3, [pc, #52]	; (8019768 <UART_SetConfig+0x4e4>)
 8019734:	fba3 1302 	umull	r1, r3, r3, r2
 8019738:	095b      	lsrs	r3, r3, #5
 801973a:	2164      	movs	r1, #100	; 0x64
 801973c:	fb01 f303 	mul.w	r3, r1, r3
 8019740:	1ad3      	subs	r3, r2, r3
 8019742:	011b      	lsls	r3, r3, #4
 8019744:	3332      	adds	r3, #50	; 0x32
 8019746:	4a08      	ldr	r2, [pc, #32]	; (8019768 <UART_SetConfig+0x4e4>)
 8019748:	fba2 2303 	umull	r2, r3, r2, r3
 801974c:	095b      	lsrs	r3, r3, #5
 801974e:	f003 020f 	and.w	r2, r3, #15
 8019752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4422      	add	r2, r4
 801975a:	609a      	str	r2, [r3, #8]
}
 801975c:	bf00      	nop
 801975e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8019762:	46bd      	mov	sp, r7
 8019764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019768:	51eb851f 	.word	0x51eb851f

0801976c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801976c:	b084      	sub	sp, #16
 801976e:	b580      	push	{r7, lr}
 8019770:	b084      	sub	sp, #16
 8019772:	af00      	add	r7, sp, #0
 8019774:	6078      	str	r0, [r7, #4]
 8019776:	f107 001c 	add.w	r0, r7, #28
 801977a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019780:	2b01      	cmp	r3, #1
 8019782:	d122      	bne.n	80197ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	68db      	ldr	r3, [r3, #12]
 8019794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8019798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	68db      	ldr	r3, [r3, #12]
 80197a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80197ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80197ae:	2b01      	cmp	r3, #1
 80197b0:	d105      	bne.n	80197be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	68db      	ldr	r3, [r3, #12]
 80197b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	f001 fbee 	bl	801afa0 <USB_CoreReset>
 80197c4:	4603      	mov	r3, r0
 80197c6:	73fb      	strb	r3, [r7, #15]
 80197c8:	e01a      	b.n	8019800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	68db      	ldr	r3, [r3, #12]
 80197ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f001 fbe2 	bl	801afa0 <USB_CoreReset>
 80197dc:	4603      	mov	r3, r0
 80197de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80197e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d106      	bne.n	80197f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	639a      	str	r2, [r3, #56]	; 0x38
 80197f2:	e005      	b.n	8019800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8019800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019802:	2b01      	cmp	r3, #1
 8019804:	d10b      	bne.n	801981e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	689b      	ldr	r3, [r3, #8]
 801980a:	f043 0206 	orr.w	r2, r3, #6
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	689b      	ldr	r3, [r3, #8]
 8019816:	f043 0220 	orr.w	r2, r3, #32
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019820:	4618      	mov	r0, r3
 8019822:	3710      	adds	r7, #16
 8019824:	46bd      	mov	sp, r7
 8019826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801982a:	b004      	add	sp, #16
 801982c:	4770      	bx	lr
	...

08019830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8019830:	b480      	push	{r7}
 8019832:	b087      	sub	sp, #28
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	4613      	mov	r3, r2
 801983c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801983e:	79fb      	ldrb	r3, [r7, #7]
 8019840:	2b02      	cmp	r3, #2
 8019842:	d165      	bne.n	8019910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	4a41      	ldr	r2, [pc, #260]	; (801994c <USB_SetTurnaroundTime+0x11c>)
 8019848:	4293      	cmp	r3, r2
 801984a:	d906      	bls.n	801985a <USB_SetTurnaroundTime+0x2a>
 801984c:	68bb      	ldr	r3, [r7, #8]
 801984e:	4a40      	ldr	r2, [pc, #256]	; (8019950 <USB_SetTurnaroundTime+0x120>)
 8019850:	4293      	cmp	r3, r2
 8019852:	d202      	bcs.n	801985a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8019854:	230f      	movs	r3, #15
 8019856:	617b      	str	r3, [r7, #20]
 8019858:	e062      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	4a3c      	ldr	r2, [pc, #240]	; (8019950 <USB_SetTurnaroundTime+0x120>)
 801985e:	4293      	cmp	r3, r2
 8019860:	d306      	bcc.n	8019870 <USB_SetTurnaroundTime+0x40>
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	4a3b      	ldr	r2, [pc, #236]	; (8019954 <USB_SetTurnaroundTime+0x124>)
 8019866:	4293      	cmp	r3, r2
 8019868:	d202      	bcs.n	8019870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801986a:	230e      	movs	r3, #14
 801986c:	617b      	str	r3, [r7, #20]
 801986e:	e057      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	4a38      	ldr	r2, [pc, #224]	; (8019954 <USB_SetTurnaroundTime+0x124>)
 8019874:	4293      	cmp	r3, r2
 8019876:	d306      	bcc.n	8019886 <USB_SetTurnaroundTime+0x56>
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	4a37      	ldr	r2, [pc, #220]	; (8019958 <USB_SetTurnaroundTime+0x128>)
 801987c:	4293      	cmp	r3, r2
 801987e:	d202      	bcs.n	8019886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8019880:	230d      	movs	r3, #13
 8019882:	617b      	str	r3, [r7, #20]
 8019884:	e04c      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	4a33      	ldr	r2, [pc, #204]	; (8019958 <USB_SetTurnaroundTime+0x128>)
 801988a:	4293      	cmp	r3, r2
 801988c:	d306      	bcc.n	801989c <USB_SetTurnaroundTime+0x6c>
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	4a32      	ldr	r2, [pc, #200]	; (801995c <USB_SetTurnaroundTime+0x12c>)
 8019892:	4293      	cmp	r3, r2
 8019894:	d802      	bhi.n	801989c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8019896:	230c      	movs	r3, #12
 8019898:	617b      	str	r3, [r7, #20]
 801989a:	e041      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801989c:	68bb      	ldr	r3, [r7, #8]
 801989e:	4a2f      	ldr	r2, [pc, #188]	; (801995c <USB_SetTurnaroundTime+0x12c>)
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d906      	bls.n	80198b2 <USB_SetTurnaroundTime+0x82>
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	4a2e      	ldr	r2, [pc, #184]	; (8019960 <USB_SetTurnaroundTime+0x130>)
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d802      	bhi.n	80198b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80198ac:	230b      	movs	r3, #11
 80198ae:	617b      	str	r3, [r7, #20]
 80198b0:	e036      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	4a2a      	ldr	r2, [pc, #168]	; (8019960 <USB_SetTurnaroundTime+0x130>)
 80198b6:	4293      	cmp	r3, r2
 80198b8:	d906      	bls.n	80198c8 <USB_SetTurnaroundTime+0x98>
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	4a29      	ldr	r2, [pc, #164]	; (8019964 <USB_SetTurnaroundTime+0x134>)
 80198be:	4293      	cmp	r3, r2
 80198c0:	d802      	bhi.n	80198c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80198c2:	230a      	movs	r3, #10
 80198c4:	617b      	str	r3, [r7, #20]
 80198c6:	e02b      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	4a26      	ldr	r2, [pc, #152]	; (8019964 <USB_SetTurnaroundTime+0x134>)
 80198cc:	4293      	cmp	r3, r2
 80198ce:	d906      	bls.n	80198de <USB_SetTurnaroundTime+0xae>
 80198d0:	68bb      	ldr	r3, [r7, #8]
 80198d2:	4a25      	ldr	r2, [pc, #148]	; (8019968 <USB_SetTurnaroundTime+0x138>)
 80198d4:	4293      	cmp	r3, r2
 80198d6:	d202      	bcs.n	80198de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80198d8:	2309      	movs	r3, #9
 80198da:	617b      	str	r3, [r7, #20]
 80198dc:	e020      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	4a21      	ldr	r2, [pc, #132]	; (8019968 <USB_SetTurnaroundTime+0x138>)
 80198e2:	4293      	cmp	r3, r2
 80198e4:	d306      	bcc.n	80198f4 <USB_SetTurnaroundTime+0xc4>
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	4a20      	ldr	r2, [pc, #128]	; (801996c <USB_SetTurnaroundTime+0x13c>)
 80198ea:	4293      	cmp	r3, r2
 80198ec:	d802      	bhi.n	80198f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80198ee:	2308      	movs	r3, #8
 80198f0:	617b      	str	r3, [r7, #20]
 80198f2:	e015      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	4a1d      	ldr	r2, [pc, #116]	; (801996c <USB_SetTurnaroundTime+0x13c>)
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d906      	bls.n	801990a <USB_SetTurnaroundTime+0xda>
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	4a1c      	ldr	r2, [pc, #112]	; (8019970 <USB_SetTurnaroundTime+0x140>)
 8019900:	4293      	cmp	r3, r2
 8019902:	d202      	bcs.n	801990a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8019904:	2307      	movs	r3, #7
 8019906:	617b      	str	r3, [r7, #20]
 8019908:	e00a      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801990a:	2306      	movs	r3, #6
 801990c:	617b      	str	r3, [r7, #20]
 801990e:	e007      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8019910:	79fb      	ldrb	r3, [r7, #7]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d102      	bne.n	801991c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8019916:	2309      	movs	r3, #9
 8019918:	617b      	str	r3, [r7, #20]
 801991a:	e001      	b.n	8019920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801991c:	2309      	movs	r3, #9
 801991e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	68db      	ldr	r3, [r3, #12]
 8019924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	68da      	ldr	r2, [r3, #12]
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	029b      	lsls	r3, r3, #10
 8019934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8019938:	431a      	orrs	r2, r3
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801993e:	2300      	movs	r3, #0
}
 8019940:	4618      	mov	r0, r3
 8019942:	371c      	adds	r7, #28
 8019944:	46bd      	mov	sp, r7
 8019946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994a:	4770      	bx	lr
 801994c:	00d8acbf 	.word	0x00d8acbf
 8019950:	00e4e1c0 	.word	0x00e4e1c0
 8019954:	00f42400 	.word	0x00f42400
 8019958:	01067380 	.word	0x01067380
 801995c:	011a499f 	.word	0x011a499f
 8019960:	01312cff 	.word	0x01312cff
 8019964:	014ca43f 	.word	0x014ca43f
 8019968:	016e3600 	.word	0x016e3600
 801996c:	01a6ab1f 	.word	0x01a6ab1f
 8019970:	01e84800 	.word	0x01e84800

08019974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019974:	b480      	push	{r7}
 8019976:	b083      	sub	sp, #12
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	689b      	ldr	r3, [r3, #8]
 8019980:	f043 0201 	orr.w	r2, r3, #1
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019988:	2300      	movs	r3, #0
}
 801998a:	4618      	mov	r0, r3
 801998c:	370c      	adds	r7, #12
 801998e:	46bd      	mov	sp, r7
 8019990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019994:	4770      	bx	lr

08019996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019996:	b480      	push	{r7}
 8019998:	b083      	sub	sp, #12
 801999a:	af00      	add	r7, sp, #0
 801999c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	689b      	ldr	r3, [r3, #8]
 80199a2:	f023 0201 	bic.w	r2, r3, #1
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80199aa:	2300      	movs	r3, #0
}
 80199ac:	4618      	mov	r0, r3
 80199ae:	370c      	adds	r7, #12
 80199b0:	46bd      	mov	sp, r7
 80199b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b6:	4770      	bx	lr

080199b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b084      	sub	sp, #16
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	460b      	mov	r3, r1
 80199c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80199c4:	2300      	movs	r3, #0
 80199c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80199d4:	78fb      	ldrb	r3, [r7, #3]
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	d115      	bne.n	8019a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	68db      	ldr	r3, [r3, #12]
 80199de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80199e6:	2001      	movs	r0, #1
 80199e8:	f7fa fb2a 	bl	8014040 <HAL_Delay>
      ms++;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	3301      	adds	r3, #1
 80199f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80199f2:	6878      	ldr	r0, [r7, #4]
 80199f4:	f001 fa45 	bl	801ae82 <USB_GetMode>
 80199f8:	4603      	mov	r3, r0
 80199fa:	2b01      	cmp	r3, #1
 80199fc:	d01e      	beq.n	8019a3c <USB_SetCurrentMode+0x84>
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2b31      	cmp	r3, #49	; 0x31
 8019a02:	d9f0      	bls.n	80199e6 <USB_SetCurrentMode+0x2e>
 8019a04:	e01a      	b.n	8019a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8019a06:	78fb      	ldrb	r3, [r7, #3]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d115      	bne.n	8019a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	68db      	ldr	r3, [r3, #12]
 8019a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8019a18:	2001      	movs	r0, #1
 8019a1a:	f7fa fb11 	bl	8014040 <HAL_Delay>
      ms++;
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	3301      	adds	r3, #1
 8019a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f001 fa2c 	bl	801ae82 <USB_GetMode>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d005      	beq.n	8019a3c <USB_SetCurrentMode+0x84>
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	2b31      	cmp	r3, #49	; 0x31
 8019a34:	d9f0      	bls.n	8019a18 <USB_SetCurrentMode+0x60>
 8019a36:	e001      	b.n	8019a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8019a38:	2301      	movs	r3, #1
 8019a3a:	e005      	b.n	8019a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	2b32      	cmp	r3, #50	; 0x32
 8019a40:	d101      	bne.n	8019a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8019a42:	2301      	movs	r3, #1
 8019a44:	e000      	b.n	8019a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8019a46:	2300      	movs	r3, #0
}
 8019a48:	4618      	mov	r0, r3
 8019a4a:	3710      	adds	r7, #16
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019a50:	b084      	sub	sp, #16
 8019a52:	b580      	push	{r7, lr}
 8019a54:	b086      	sub	sp, #24
 8019a56:	af00      	add	r7, sp, #0
 8019a58:	6078      	str	r0, [r7, #4]
 8019a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8019a62:	2300      	movs	r3, #0
 8019a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	613b      	str	r3, [r7, #16]
 8019a6e:	e009      	b.n	8019a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8019a70:	687a      	ldr	r2, [r7, #4]
 8019a72:	693b      	ldr	r3, [r7, #16]
 8019a74:	3340      	adds	r3, #64	; 0x40
 8019a76:	009b      	lsls	r3, r3, #2
 8019a78:	4413      	add	r3, r2
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8019a7e:	693b      	ldr	r3, [r7, #16]
 8019a80:	3301      	adds	r3, #1
 8019a82:	613b      	str	r3, [r7, #16]
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	2b0e      	cmp	r3, #14
 8019a88:	d9f2      	bls.n	8019a70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8019a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d11c      	bne.n	8019aca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019a96:	685b      	ldr	r3, [r3, #4]
 8019a98:	68fa      	ldr	r2, [r7, #12]
 8019a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019a9e:	f043 0302 	orr.w	r3, r3, #2
 8019aa2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ab4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ac0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	639a      	str	r2, [r3, #56]	; 0x38
 8019ac8:	e00b      	b.n	8019ae2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ace:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ada:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ae8:	461a      	mov	r2, r3
 8019aea:	2300      	movs	r3, #0
 8019aec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019af4:	4619      	mov	r1, r3
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019afc:	461a      	mov	r2, r3
 8019afe:	680b      	ldr	r3, [r1, #0]
 8019b00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8019b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b04:	2b01      	cmp	r3, #1
 8019b06:	d10c      	bne.n	8019b22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8019b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d104      	bne.n	8019b18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8019b0e:	2100      	movs	r1, #0
 8019b10:	6878      	ldr	r0, [r7, #4]
 8019b12:	f000 f965 	bl	8019de0 <USB_SetDevSpeed>
 8019b16:	e008      	b.n	8019b2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8019b18:	2101      	movs	r1, #1
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f000 f960 	bl	8019de0 <USB_SetDevSpeed>
 8019b20:	e003      	b.n	8019b2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8019b22:	2103      	movs	r1, #3
 8019b24:	6878      	ldr	r0, [r7, #4]
 8019b26:	f000 f95b 	bl	8019de0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8019b2a:	2110      	movs	r1, #16
 8019b2c:	6878      	ldr	r0, [r7, #4]
 8019b2e:	f000 f8f3 	bl	8019d18 <USB_FlushTxFifo>
 8019b32:	4603      	mov	r3, r0
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d001      	beq.n	8019b3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8019b38:	2301      	movs	r3, #1
 8019b3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f000 f91f 	bl	8019d80 <USB_FlushRxFifo>
 8019b42:	4603      	mov	r3, r0
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d001      	beq.n	8019b4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019b52:	461a      	mov	r2, r3
 8019b54:	2300      	movs	r3, #0
 8019b56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019b5e:	461a      	mov	r2, r3
 8019b60:	2300      	movs	r3, #0
 8019b62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019b6a:	461a      	mov	r2, r3
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019b70:	2300      	movs	r3, #0
 8019b72:	613b      	str	r3, [r7, #16]
 8019b74:	e043      	b.n	8019bfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019b76:	693b      	ldr	r3, [r7, #16]
 8019b78:	015a      	lsls	r2, r3, #5
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	4413      	add	r3, r2
 8019b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019b8c:	d118      	bne.n	8019bc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d10a      	bne.n	8019baa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	015a      	lsls	r2, r3, #5
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	4413      	add	r3, r2
 8019b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019ba6:	6013      	str	r3, [r2, #0]
 8019ba8:	e013      	b.n	8019bd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8019baa:	693b      	ldr	r3, [r7, #16]
 8019bac:	015a      	lsls	r2, r3, #5
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	4413      	add	r3, r2
 8019bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8019bbc:	6013      	str	r3, [r2, #0]
 8019bbe:	e008      	b.n	8019bd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8019bc0:	693b      	ldr	r3, [r7, #16]
 8019bc2:	015a      	lsls	r2, r3, #5
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	4413      	add	r3, r2
 8019bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019bcc:	461a      	mov	r2, r3
 8019bce:	2300      	movs	r3, #0
 8019bd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8019bd2:	693b      	ldr	r3, [r7, #16]
 8019bd4:	015a      	lsls	r2, r3, #5
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	4413      	add	r3, r2
 8019bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019bde:	461a      	mov	r2, r3
 8019be0:	2300      	movs	r3, #0
 8019be2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8019be4:	693b      	ldr	r3, [r7, #16]
 8019be6:	015a      	lsls	r2, r3, #5
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	4413      	add	r3, r2
 8019bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019bf0:	461a      	mov	r2, r3
 8019bf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8019bf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019bf8:	693b      	ldr	r3, [r7, #16]
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	613b      	str	r3, [r7, #16]
 8019bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c00:	693a      	ldr	r2, [r7, #16]
 8019c02:	429a      	cmp	r2, r3
 8019c04:	d3b7      	bcc.n	8019b76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019c06:	2300      	movs	r3, #0
 8019c08:	613b      	str	r3, [r7, #16]
 8019c0a:	e043      	b.n	8019c94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019c0c:	693b      	ldr	r3, [r7, #16]
 8019c0e:	015a      	lsls	r2, r3, #5
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	4413      	add	r3, r2
 8019c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c22:	d118      	bne.n	8019c56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8019c24:	693b      	ldr	r3, [r7, #16]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d10a      	bne.n	8019c40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8019c2a:	693b      	ldr	r3, [r7, #16]
 8019c2c:	015a      	lsls	r2, r3, #5
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	4413      	add	r3, r2
 8019c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c36:	461a      	mov	r2, r3
 8019c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019c3c:	6013      	str	r3, [r2, #0]
 8019c3e:	e013      	b.n	8019c68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	015a      	lsls	r2, r3, #5
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	4413      	add	r3, r2
 8019c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8019c52:	6013      	str	r3, [r2, #0]
 8019c54:	e008      	b.n	8019c68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8019c56:	693b      	ldr	r3, [r7, #16]
 8019c58:	015a      	lsls	r2, r3, #5
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	4413      	add	r3, r2
 8019c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c62:	461a      	mov	r2, r3
 8019c64:	2300      	movs	r3, #0
 8019c66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	015a      	lsls	r2, r3, #5
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	4413      	add	r3, r2
 8019c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c74:	461a      	mov	r2, r3
 8019c76:	2300      	movs	r3, #0
 8019c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8019c7a:	693b      	ldr	r3, [r7, #16]
 8019c7c:	015a      	lsls	r2, r3, #5
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	4413      	add	r3, r2
 8019c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c86:	461a      	mov	r2, r3
 8019c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8019c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	3301      	adds	r3, #1
 8019c92:	613b      	str	r3, [r7, #16]
 8019c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c96:	693a      	ldr	r2, [r7, #16]
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	d3b7      	bcc.n	8019c0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ca2:	691b      	ldr	r3, [r3, #16]
 8019ca4:	68fa      	ldr	r2, [r7, #12]
 8019ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019cae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8019cbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8019cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d105      	bne.n	8019cd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	699b      	ldr	r3, [r3, #24]
 8019cc8:	f043 0210 	orr.w	r2, r3, #16
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	699a      	ldr	r2, [r3, #24]
 8019cd4:	4b0f      	ldr	r3, [pc, #60]	; (8019d14 <USB_DevInit+0x2c4>)
 8019cd6:	4313      	orrs	r3, r2
 8019cd8:	687a      	ldr	r2, [r7, #4]
 8019cda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8019cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d005      	beq.n	8019cee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	699b      	ldr	r3, [r3, #24]
 8019ce6:	f043 0208 	orr.w	r2, r3, #8
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8019cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	d107      	bne.n	8019d04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	699b      	ldr	r3, [r3, #24]
 8019cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019cfc:	f043 0304 	orr.w	r3, r3, #4
 8019d00:	687a      	ldr	r2, [r7, #4]
 8019d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8019d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d06:	4618      	mov	r0, r3
 8019d08:	3718      	adds	r7, #24
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019d10:	b004      	add	sp, #16
 8019d12:	4770      	bx	lr
 8019d14:	803c3800 	.word	0x803c3800

08019d18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8019d18:	b480      	push	{r7}
 8019d1a:	b085      	sub	sp, #20
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019d22:	2300      	movs	r3, #0
 8019d24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	3301      	adds	r3, #1
 8019d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	4a13      	ldr	r2, [pc, #76]	; (8019d7c <USB_FlushTxFifo+0x64>)
 8019d30:	4293      	cmp	r3, r2
 8019d32:	d901      	bls.n	8019d38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8019d34:	2303      	movs	r3, #3
 8019d36:	e01b      	b.n	8019d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	691b      	ldr	r3, [r3, #16]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	daf2      	bge.n	8019d26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8019d40:	2300      	movs	r3, #0
 8019d42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8019d44:	683b      	ldr	r3, [r7, #0]
 8019d46:	019b      	lsls	r3, r3, #6
 8019d48:	f043 0220 	orr.w	r2, r3, #32
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	3301      	adds	r3, #1
 8019d54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	4a08      	ldr	r2, [pc, #32]	; (8019d7c <USB_FlushTxFifo+0x64>)
 8019d5a:	4293      	cmp	r3, r2
 8019d5c:	d901      	bls.n	8019d62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8019d5e:	2303      	movs	r3, #3
 8019d60:	e006      	b.n	8019d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	691b      	ldr	r3, [r3, #16]
 8019d66:	f003 0320 	and.w	r3, r3, #32
 8019d6a:	2b20      	cmp	r3, #32
 8019d6c:	d0f0      	beq.n	8019d50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8019d6e:	2300      	movs	r3, #0
}
 8019d70:	4618      	mov	r0, r3
 8019d72:	3714      	adds	r7, #20
 8019d74:	46bd      	mov	sp, r7
 8019d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7a:	4770      	bx	lr
 8019d7c:	00030d40 	.word	0x00030d40

08019d80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8019d80:	b480      	push	{r7}
 8019d82:	b085      	sub	sp, #20
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019d88:	2300      	movs	r3, #0
 8019d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	3301      	adds	r3, #1
 8019d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	4a11      	ldr	r2, [pc, #68]	; (8019ddc <USB_FlushRxFifo+0x5c>)
 8019d96:	4293      	cmp	r3, r2
 8019d98:	d901      	bls.n	8019d9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8019d9a:	2303      	movs	r3, #3
 8019d9c:	e018      	b.n	8019dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	691b      	ldr	r3, [r3, #16]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	daf2      	bge.n	8019d8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8019da6:	2300      	movs	r3, #0
 8019da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	2210      	movs	r2, #16
 8019dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	3301      	adds	r3, #1
 8019db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	4a08      	ldr	r2, [pc, #32]	; (8019ddc <USB_FlushRxFifo+0x5c>)
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	d901      	bls.n	8019dc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8019dbe:	2303      	movs	r3, #3
 8019dc0:	e006      	b.n	8019dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	691b      	ldr	r3, [r3, #16]
 8019dc6:	f003 0310 	and.w	r3, r3, #16
 8019dca:	2b10      	cmp	r3, #16
 8019dcc:	d0f0      	beq.n	8019db0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8019dce:	2300      	movs	r3, #0
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3714      	adds	r7, #20
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dda:	4770      	bx	lr
 8019ddc:	00030d40 	.word	0x00030d40

08019de0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019de0:	b480      	push	{r7}
 8019de2:	b085      	sub	sp, #20
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	460b      	mov	r3, r1
 8019dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	78fb      	ldrb	r3, [r7, #3]
 8019dfa:	68f9      	ldr	r1, [r7, #12]
 8019dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019e00:	4313      	orrs	r3, r2
 8019e02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8019e04:	2300      	movs	r3, #0
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	3714      	adds	r7, #20
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e10:	4770      	bx	lr

08019e12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8019e12:	b480      	push	{r7}
 8019e14:	b087      	sub	sp, #28
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8019e1e:	693b      	ldr	r3, [r7, #16]
 8019e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019e24:	689b      	ldr	r3, [r3, #8]
 8019e26:	f003 0306 	and.w	r3, r3, #6
 8019e2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d102      	bne.n	8019e38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8019e32:	2300      	movs	r3, #0
 8019e34:	75fb      	strb	r3, [r7, #23]
 8019e36:	e00a      	b.n	8019e4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	2b02      	cmp	r3, #2
 8019e3c:	d002      	beq.n	8019e44 <USB_GetDevSpeed+0x32>
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	2b06      	cmp	r3, #6
 8019e42:	d102      	bne.n	8019e4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8019e44:	2302      	movs	r3, #2
 8019e46:	75fb      	strb	r3, [r7, #23]
 8019e48:	e001      	b.n	8019e4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8019e4a:	230f      	movs	r3, #15
 8019e4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8019e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e50:	4618      	mov	r0, r3
 8019e52:	371c      	adds	r7, #28
 8019e54:	46bd      	mov	sp, r7
 8019e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5a:	4770      	bx	lr

08019e5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019e5c:	b480      	push	{r7}
 8019e5e:	b085      	sub	sp, #20
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
 8019e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019e70:	683b      	ldr	r3, [r7, #0]
 8019e72:	785b      	ldrb	r3, [r3, #1]
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d13a      	bne.n	8019eee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019e7e:	69da      	ldr	r2, [r3, #28]
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	f003 030f 	and.w	r3, r3, #15
 8019e88:	2101      	movs	r1, #1
 8019e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8019e8e:	b29b      	uxth	r3, r3
 8019e90:	68f9      	ldr	r1, [r7, #12]
 8019e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019e96:	4313      	orrs	r3, r2
 8019e98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	015a      	lsls	r2, r3, #5
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	4413      	add	r3, r2
 8019ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d155      	bne.n	8019f5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	015a      	lsls	r2, r3, #5
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	4413      	add	r3, r2
 8019eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ebc:	681a      	ldr	r2, [r3, #0]
 8019ebe:	683b      	ldr	r3, [r7, #0]
 8019ec0:	68db      	ldr	r3, [r3, #12]
 8019ec2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	791b      	ldrb	r3, [r3, #4]
 8019eca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019ecc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	059b      	lsls	r3, r3, #22
 8019ed2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019ed4:	4313      	orrs	r3, r2
 8019ed6:	68ba      	ldr	r2, [r7, #8]
 8019ed8:	0151      	lsls	r1, r2, #5
 8019eda:	68fa      	ldr	r2, [r7, #12]
 8019edc:	440a      	add	r2, r1
 8019ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019eea:	6013      	str	r3, [r2, #0]
 8019eec:	e036      	b.n	8019f5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ef4:	69da      	ldr	r2, [r3, #28]
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	781b      	ldrb	r3, [r3, #0]
 8019efa:	f003 030f 	and.w	r3, r3, #15
 8019efe:	2101      	movs	r1, #1
 8019f00:	fa01 f303 	lsl.w	r3, r1, r3
 8019f04:	041b      	lsls	r3, r3, #16
 8019f06:	68f9      	ldr	r1, [r7, #12]
 8019f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019f0c:	4313      	orrs	r3, r2
 8019f0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	015a      	lsls	r2, r3, #5
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	4413      	add	r3, r2
 8019f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d11a      	bne.n	8019f5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019f26:	68bb      	ldr	r3, [r7, #8]
 8019f28:	015a      	lsls	r2, r3, #5
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	4413      	add	r3, r2
 8019f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f32:	681a      	ldr	r2, [r3, #0]
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	68db      	ldr	r3, [r3, #12]
 8019f38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	791b      	ldrb	r3, [r3, #4]
 8019f40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019f42:	430b      	orrs	r3, r1
 8019f44:	4313      	orrs	r3, r2
 8019f46:	68ba      	ldr	r2, [r7, #8]
 8019f48:	0151      	lsls	r1, r2, #5
 8019f4a:	68fa      	ldr	r2, [r7, #12]
 8019f4c:	440a      	add	r2, r1
 8019f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019f5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8019f5c:	2300      	movs	r3, #0
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3714      	adds	r7, #20
 8019f62:	46bd      	mov	sp, r7
 8019f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f68:	4770      	bx	lr
	...

08019f6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019f6c:	b480      	push	{r7}
 8019f6e:	b085      	sub	sp, #20
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	781b      	ldrb	r3, [r3, #0]
 8019f7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	785b      	ldrb	r3, [r3, #1]
 8019f84:	2b01      	cmp	r3, #1
 8019f86:	d161      	bne.n	801a04c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	015a      	lsls	r2, r3, #5
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	4413      	add	r3, r2
 8019f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019f9e:	d11f      	bne.n	8019fe0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	015a      	lsls	r2, r3, #5
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	4413      	add	r3, r2
 8019fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	68ba      	ldr	r2, [r7, #8]
 8019fb0:	0151      	lsls	r1, r2, #5
 8019fb2:	68fa      	ldr	r2, [r7, #12]
 8019fb4:	440a      	add	r2, r1
 8019fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019fbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	015a      	lsls	r2, r3, #5
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	4413      	add	r3, r2
 8019fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	68ba      	ldr	r2, [r7, #8]
 8019fd0:	0151      	lsls	r1, r2, #5
 8019fd2:	68fa      	ldr	r2, [r7, #12]
 8019fd4:	440a      	add	r2, r1
 8019fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	781b      	ldrb	r3, [r3, #0]
 8019fec:	f003 030f 	and.w	r3, r3, #15
 8019ff0:	2101      	movs	r1, #1
 8019ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	43db      	mvns	r3, r3
 8019ffa:	68f9      	ldr	r1, [r7, #12]
 8019ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a000:	4013      	ands	r3, r2
 801a002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a00a:	69da      	ldr	r2, [r3, #28]
 801a00c:	683b      	ldr	r3, [r7, #0]
 801a00e:	781b      	ldrb	r3, [r3, #0]
 801a010:	f003 030f 	and.w	r3, r3, #15
 801a014:	2101      	movs	r1, #1
 801a016:	fa01 f303 	lsl.w	r3, r1, r3
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	43db      	mvns	r3, r3
 801a01e:	68f9      	ldr	r1, [r7, #12]
 801a020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a024:	4013      	ands	r3, r2
 801a026:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	015a      	lsls	r2, r3, #5
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	4413      	add	r3, r2
 801a030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a034:	681a      	ldr	r2, [r3, #0]
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	0159      	lsls	r1, r3, #5
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	440b      	add	r3, r1
 801a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a042:	4619      	mov	r1, r3
 801a044:	4b35      	ldr	r3, [pc, #212]	; (801a11c <USB_DeactivateEndpoint+0x1b0>)
 801a046:	4013      	ands	r3, r2
 801a048:	600b      	str	r3, [r1, #0]
 801a04a:	e060      	b.n	801a10e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	015a      	lsls	r2, r3, #5
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	4413      	add	r3, r2
 801a054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a05e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a062:	d11f      	bne.n	801a0a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	015a      	lsls	r2, r3, #5
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	4413      	add	r3, r2
 801a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	68ba      	ldr	r2, [r7, #8]
 801a074:	0151      	lsls	r1, r2, #5
 801a076:	68fa      	ldr	r2, [r7, #12]
 801a078:	440a      	add	r2, r1
 801a07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a07e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a082:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	015a      	lsls	r2, r3, #5
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	4413      	add	r3, r2
 801a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	68ba      	ldr	r2, [r7, #8]
 801a094:	0151      	lsls	r1, r2, #5
 801a096:	68fa      	ldr	r2, [r7, #12]
 801a098:	440a      	add	r2, r1
 801a09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a09e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a0a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	f003 030f 	and.w	r3, r3, #15
 801a0b4:	2101      	movs	r1, #1
 801a0b6:	fa01 f303 	lsl.w	r3, r1, r3
 801a0ba:	041b      	lsls	r3, r3, #16
 801a0bc:	43db      	mvns	r3, r3
 801a0be:	68f9      	ldr	r1, [r7, #12]
 801a0c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a0c4:	4013      	ands	r3, r2
 801a0c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0ce:	69da      	ldr	r2, [r3, #28]
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	781b      	ldrb	r3, [r3, #0]
 801a0d4:	f003 030f 	and.w	r3, r3, #15
 801a0d8:	2101      	movs	r1, #1
 801a0da:	fa01 f303 	lsl.w	r3, r1, r3
 801a0de:	041b      	lsls	r3, r3, #16
 801a0e0:	43db      	mvns	r3, r3
 801a0e2:	68f9      	ldr	r1, [r7, #12]
 801a0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801a0ec:	68bb      	ldr	r3, [r7, #8]
 801a0ee:	015a      	lsls	r2, r3, #5
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	4413      	add	r3, r2
 801a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	68bb      	ldr	r3, [r7, #8]
 801a0fc:	0159      	lsls	r1, r3, #5
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	440b      	add	r3, r1
 801a102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a106:	4619      	mov	r1, r3
 801a108:	4b05      	ldr	r3, [pc, #20]	; (801a120 <USB_DeactivateEndpoint+0x1b4>)
 801a10a:	4013      	ands	r3, r2
 801a10c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801a10e:	2300      	movs	r3, #0
}
 801a110:	4618      	mov	r0, r3
 801a112:	3714      	adds	r7, #20
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr
 801a11c:	ec337800 	.word	0xec337800
 801a120:	eff37800 	.word	0xeff37800

0801a124 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b08a      	sub	sp, #40	; 0x28
 801a128:	af02      	add	r7, sp, #8
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	60b9      	str	r1, [r7, #8]
 801a12e:	4613      	mov	r3, r2
 801a130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	781b      	ldrb	r3, [r3, #0]
 801a13a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	785b      	ldrb	r3, [r3, #1]
 801a140:	2b01      	cmp	r3, #1
 801a142:	f040 815c 	bne.w	801a3fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	699b      	ldr	r3, [r3, #24]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d132      	bne.n	801a1b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a14e:	69bb      	ldr	r3, [r7, #24]
 801a150:	015a      	lsls	r2, r3, #5
 801a152:	69fb      	ldr	r3, [r7, #28]
 801a154:	4413      	add	r3, r2
 801a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a15a:	691b      	ldr	r3, [r3, #16]
 801a15c:	69ba      	ldr	r2, [r7, #24]
 801a15e:	0151      	lsls	r1, r2, #5
 801a160:	69fa      	ldr	r2, [r7, #28]
 801a162:	440a      	add	r2, r1
 801a164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a16c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801a172:	69bb      	ldr	r3, [r7, #24]
 801a174:	015a      	lsls	r2, r3, #5
 801a176:	69fb      	ldr	r3, [r7, #28]
 801a178:	4413      	add	r3, r2
 801a17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a17e:	691b      	ldr	r3, [r3, #16]
 801a180:	69ba      	ldr	r2, [r7, #24]
 801a182:	0151      	lsls	r1, r2, #5
 801a184:	69fa      	ldr	r2, [r7, #28]
 801a186:	440a      	add	r2, r1
 801a188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a18c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	015a      	lsls	r2, r3, #5
 801a196:	69fb      	ldr	r3, [r7, #28]
 801a198:	4413      	add	r3, r2
 801a19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a19e:	691b      	ldr	r3, [r3, #16]
 801a1a0:	69ba      	ldr	r2, [r7, #24]
 801a1a2:	0151      	lsls	r1, r2, #5
 801a1a4:	69fa      	ldr	r2, [r7, #28]
 801a1a6:	440a      	add	r2, r1
 801a1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1ac:	0cdb      	lsrs	r3, r3, #19
 801a1ae:	04db      	lsls	r3, r3, #19
 801a1b0:	6113      	str	r3, [r2, #16]
 801a1b2:	e074      	b.n	801a29e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a1b4:	69bb      	ldr	r3, [r7, #24]
 801a1b6:	015a      	lsls	r2, r3, #5
 801a1b8:	69fb      	ldr	r3, [r7, #28]
 801a1ba:	4413      	add	r3, r2
 801a1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1c0:	691b      	ldr	r3, [r3, #16]
 801a1c2:	69ba      	ldr	r2, [r7, #24]
 801a1c4:	0151      	lsls	r1, r2, #5
 801a1c6:	69fa      	ldr	r2, [r7, #28]
 801a1c8:	440a      	add	r2, r1
 801a1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1ce:	0cdb      	lsrs	r3, r3, #19
 801a1d0:	04db      	lsls	r3, r3, #19
 801a1d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a1d4:	69bb      	ldr	r3, [r7, #24]
 801a1d6:	015a      	lsls	r2, r3, #5
 801a1d8:	69fb      	ldr	r3, [r7, #28]
 801a1da:	4413      	add	r3, r2
 801a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1e0:	691b      	ldr	r3, [r3, #16]
 801a1e2:	69ba      	ldr	r2, [r7, #24]
 801a1e4:	0151      	lsls	r1, r2, #5
 801a1e6:	69fa      	ldr	r2, [r7, #28]
 801a1e8:	440a      	add	r2, r1
 801a1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a1f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a1f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801a1f8:	69bb      	ldr	r3, [r7, #24]
 801a1fa:	015a      	lsls	r2, r3, #5
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	4413      	add	r3, r2
 801a200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a204:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	6999      	ldr	r1, [r3, #24]
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	68db      	ldr	r3, [r3, #12]
 801a20e:	440b      	add	r3, r1
 801a210:	1e59      	subs	r1, r3, #1
 801a212:	68bb      	ldr	r3, [r7, #8]
 801a214:	68db      	ldr	r3, [r3, #12]
 801a216:	fbb1 f3f3 	udiv	r3, r1, r3
 801a21a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801a21c:	4b9d      	ldr	r3, [pc, #628]	; (801a494 <USB_EPStartXfer+0x370>)
 801a21e:	400b      	ands	r3, r1
 801a220:	69b9      	ldr	r1, [r7, #24]
 801a222:	0148      	lsls	r0, r1, #5
 801a224:	69f9      	ldr	r1, [r7, #28]
 801a226:	4401      	add	r1, r0
 801a228:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801a22c:	4313      	orrs	r3, r2
 801a22e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801a230:	69bb      	ldr	r3, [r7, #24]
 801a232:	015a      	lsls	r2, r3, #5
 801a234:	69fb      	ldr	r3, [r7, #28]
 801a236:	4413      	add	r3, r2
 801a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a23c:	691a      	ldr	r2, [r3, #16]
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	699b      	ldr	r3, [r3, #24]
 801a242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a246:	69b9      	ldr	r1, [r7, #24]
 801a248:	0148      	lsls	r0, r1, #5
 801a24a:	69f9      	ldr	r1, [r7, #28]
 801a24c:	4401      	add	r1, r0
 801a24e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801a252:	4313      	orrs	r3, r2
 801a254:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	791b      	ldrb	r3, [r3, #4]
 801a25a:	2b01      	cmp	r3, #1
 801a25c:	d11f      	bne.n	801a29e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801a25e:	69bb      	ldr	r3, [r7, #24]
 801a260:	015a      	lsls	r2, r3, #5
 801a262:	69fb      	ldr	r3, [r7, #28]
 801a264:	4413      	add	r3, r2
 801a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a26a:	691b      	ldr	r3, [r3, #16]
 801a26c:	69ba      	ldr	r2, [r7, #24]
 801a26e:	0151      	lsls	r1, r2, #5
 801a270:	69fa      	ldr	r2, [r7, #28]
 801a272:	440a      	add	r2, r1
 801a274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a278:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801a27c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801a27e:	69bb      	ldr	r3, [r7, #24]
 801a280:	015a      	lsls	r2, r3, #5
 801a282:	69fb      	ldr	r3, [r7, #28]
 801a284:	4413      	add	r3, r2
 801a286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a28a:	691b      	ldr	r3, [r3, #16]
 801a28c:	69ba      	ldr	r2, [r7, #24]
 801a28e:	0151      	lsls	r1, r2, #5
 801a290:	69fa      	ldr	r2, [r7, #28]
 801a292:	440a      	add	r2, r1
 801a294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a29c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801a29e:	79fb      	ldrb	r3, [r7, #7]
 801a2a0:	2b01      	cmp	r3, #1
 801a2a2:	d14b      	bne.n	801a33c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801a2a4:	68bb      	ldr	r3, [r7, #8]
 801a2a6:	695b      	ldr	r3, [r3, #20]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d009      	beq.n	801a2c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801a2ac:	69bb      	ldr	r3, [r7, #24]
 801a2ae:	015a      	lsls	r2, r3, #5
 801a2b0:	69fb      	ldr	r3, [r7, #28]
 801a2b2:	4413      	add	r3, r2
 801a2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2b8:	461a      	mov	r2, r3
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	695b      	ldr	r3, [r3, #20]
 801a2be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801a2c0:	68bb      	ldr	r3, [r7, #8]
 801a2c2:	791b      	ldrb	r3, [r3, #4]
 801a2c4:	2b01      	cmp	r3, #1
 801a2c6:	d128      	bne.n	801a31a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a2c8:	69fb      	ldr	r3, [r7, #28]
 801a2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2ce:	689b      	ldr	r3, [r3, #8]
 801a2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d110      	bne.n	801a2fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801a2d8:	69bb      	ldr	r3, [r7, #24]
 801a2da:	015a      	lsls	r2, r3, #5
 801a2dc:	69fb      	ldr	r3, [r7, #28]
 801a2de:	4413      	add	r3, r2
 801a2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	69ba      	ldr	r2, [r7, #24]
 801a2e8:	0151      	lsls	r1, r2, #5
 801a2ea:	69fa      	ldr	r2, [r7, #28]
 801a2ec:	440a      	add	r2, r1
 801a2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a2f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a2f6:	6013      	str	r3, [r2, #0]
 801a2f8:	e00f      	b.n	801a31a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801a2fa:	69bb      	ldr	r3, [r7, #24]
 801a2fc:	015a      	lsls	r2, r3, #5
 801a2fe:	69fb      	ldr	r3, [r7, #28]
 801a300:	4413      	add	r3, r2
 801a302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	69ba      	ldr	r2, [r7, #24]
 801a30a:	0151      	lsls	r1, r2, #5
 801a30c:	69fa      	ldr	r2, [r7, #28]
 801a30e:	440a      	add	r2, r1
 801a310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a318:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a31a:	69bb      	ldr	r3, [r7, #24]
 801a31c:	015a      	lsls	r2, r3, #5
 801a31e:	69fb      	ldr	r3, [r7, #28]
 801a320:	4413      	add	r3, r2
 801a322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	69ba      	ldr	r2, [r7, #24]
 801a32a:	0151      	lsls	r1, r2, #5
 801a32c:	69fa      	ldr	r2, [r7, #28]
 801a32e:	440a      	add	r2, r1
 801a330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a338:	6013      	str	r3, [r2, #0]
 801a33a:	e133      	b.n	801a5a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a33c:	69bb      	ldr	r3, [r7, #24]
 801a33e:	015a      	lsls	r2, r3, #5
 801a340:	69fb      	ldr	r3, [r7, #28]
 801a342:	4413      	add	r3, r2
 801a344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	69ba      	ldr	r2, [r7, #24]
 801a34c:	0151      	lsls	r1, r2, #5
 801a34e:	69fa      	ldr	r2, [r7, #28]
 801a350:	440a      	add	r2, r1
 801a352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a35a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	791b      	ldrb	r3, [r3, #4]
 801a360:	2b01      	cmp	r3, #1
 801a362:	d015      	beq.n	801a390 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	699b      	ldr	r3, [r3, #24]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	f000 811b 	beq.w	801a5a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a376:	68bb      	ldr	r3, [r7, #8]
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	f003 030f 	and.w	r3, r3, #15
 801a37e:	2101      	movs	r1, #1
 801a380:	fa01 f303 	lsl.w	r3, r1, r3
 801a384:	69f9      	ldr	r1, [r7, #28]
 801a386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a38a:	4313      	orrs	r3, r2
 801a38c:	634b      	str	r3, [r1, #52]	; 0x34
 801a38e:	e109      	b.n	801a5a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a390:	69fb      	ldr	r3, [r7, #28]
 801a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a396:	689b      	ldr	r3, [r3, #8]
 801a398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d110      	bne.n	801a3c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	015a      	lsls	r2, r3, #5
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	4413      	add	r3, r2
 801a3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	69ba      	ldr	r2, [r7, #24]
 801a3b0:	0151      	lsls	r1, r2, #5
 801a3b2:	69fa      	ldr	r2, [r7, #28]
 801a3b4:	440a      	add	r2, r1
 801a3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a3be:	6013      	str	r3, [r2, #0]
 801a3c0:	e00f      	b.n	801a3e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801a3c2:	69bb      	ldr	r3, [r7, #24]
 801a3c4:	015a      	lsls	r2, r3, #5
 801a3c6:	69fb      	ldr	r3, [r7, #28]
 801a3c8:	4413      	add	r3, r2
 801a3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	69ba      	ldr	r2, [r7, #24]
 801a3d2:	0151      	lsls	r1, r2, #5
 801a3d4:	69fa      	ldr	r2, [r7, #28]
 801a3d6:	440a      	add	r2, r1
 801a3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a3e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801a3e2:	68bb      	ldr	r3, [r7, #8]
 801a3e4:	6919      	ldr	r1, [r3, #16]
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	781a      	ldrb	r2, [r3, #0]
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	699b      	ldr	r3, [r3, #24]
 801a3ee:	b298      	uxth	r0, r3
 801a3f0:	79fb      	ldrb	r3, [r7, #7]
 801a3f2:	9300      	str	r3, [sp, #0]
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f000 fade 	bl	801a9b8 <USB_WritePacket>
 801a3fc:	e0d2      	b.n	801a5a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801a3fe:	69bb      	ldr	r3, [r7, #24]
 801a400:	015a      	lsls	r2, r3, #5
 801a402:	69fb      	ldr	r3, [r7, #28]
 801a404:	4413      	add	r3, r2
 801a406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a40a:	691b      	ldr	r3, [r3, #16]
 801a40c:	69ba      	ldr	r2, [r7, #24]
 801a40e:	0151      	lsls	r1, r2, #5
 801a410:	69fa      	ldr	r2, [r7, #28]
 801a412:	440a      	add	r2, r1
 801a414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a418:	0cdb      	lsrs	r3, r3, #19
 801a41a:	04db      	lsls	r3, r3, #19
 801a41c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	015a      	lsls	r2, r3, #5
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	4413      	add	r3, r2
 801a426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a42a:	691b      	ldr	r3, [r3, #16]
 801a42c:	69ba      	ldr	r2, [r7, #24]
 801a42e:	0151      	lsls	r1, r2, #5
 801a430:	69fa      	ldr	r2, [r7, #28]
 801a432:	440a      	add	r2, r1
 801a434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a43c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a440:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	699b      	ldr	r3, [r3, #24]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d126      	bne.n	801a498 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801a44a:	69bb      	ldr	r3, [r7, #24]
 801a44c:	015a      	lsls	r2, r3, #5
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	4413      	add	r3, r2
 801a452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a456:	691a      	ldr	r2, [r3, #16]
 801a458:	68bb      	ldr	r3, [r7, #8]
 801a45a:	68db      	ldr	r3, [r3, #12]
 801a45c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a460:	69b9      	ldr	r1, [r7, #24]
 801a462:	0148      	lsls	r0, r1, #5
 801a464:	69f9      	ldr	r1, [r7, #28]
 801a466:	4401      	add	r1, r0
 801a468:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a46c:	4313      	orrs	r3, r2
 801a46e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a470:	69bb      	ldr	r3, [r7, #24]
 801a472:	015a      	lsls	r2, r3, #5
 801a474:	69fb      	ldr	r3, [r7, #28]
 801a476:	4413      	add	r3, r2
 801a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a47c:	691b      	ldr	r3, [r3, #16]
 801a47e:	69ba      	ldr	r2, [r7, #24]
 801a480:	0151      	lsls	r1, r2, #5
 801a482:	69fa      	ldr	r2, [r7, #28]
 801a484:	440a      	add	r2, r1
 801a486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a48e:	6113      	str	r3, [r2, #16]
 801a490:	e03a      	b.n	801a508 <USB_EPStartXfer+0x3e4>
 801a492:	bf00      	nop
 801a494:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	699a      	ldr	r2, [r3, #24]
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	68db      	ldr	r3, [r3, #12]
 801a4a0:	4413      	add	r3, r2
 801a4a2:	1e5a      	subs	r2, r3, #1
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	68db      	ldr	r3, [r3, #12]
 801a4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	68db      	ldr	r3, [r3, #12]
 801a4b2:	8afa      	ldrh	r2, [r7, #22]
 801a4b4:	fb03 f202 	mul.w	r2, r3, r2
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801a4bc:	69bb      	ldr	r3, [r7, #24]
 801a4be:	015a      	lsls	r2, r3, #5
 801a4c0:	69fb      	ldr	r3, [r7, #28]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4c8:	691a      	ldr	r2, [r3, #16]
 801a4ca:	8afb      	ldrh	r3, [r7, #22]
 801a4cc:	04d9      	lsls	r1, r3, #19
 801a4ce:	4b38      	ldr	r3, [pc, #224]	; (801a5b0 <USB_EPStartXfer+0x48c>)
 801a4d0:	400b      	ands	r3, r1
 801a4d2:	69b9      	ldr	r1, [r7, #24]
 801a4d4:	0148      	lsls	r0, r1, #5
 801a4d6:	69f9      	ldr	r1, [r7, #28]
 801a4d8:	4401      	add	r1, r0
 801a4da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a4de:	4313      	orrs	r3, r2
 801a4e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801a4e2:	69bb      	ldr	r3, [r7, #24]
 801a4e4:	015a      	lsls	r2, r3, #5
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	4413      	add	r3, r2
 801a4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4ee:	691a      	ldr	r2, [r3, #16]
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	69db      	ldr	r3, [r3, #28]
 801a4f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4f8:	69b9      	ldr	r1, [r7, #24]
 801a4fa:	0148      	lsls	r0, r1, #5
 801a4fc:	69f9      	ldr	r1, [r7, #28]
 801a4fe:	4401      	add	r1, r0
 801a500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a504:	4313      	orrs	r3, r2
 801a506:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801a508:	79fb      	ldrb	r3, [r7, #7]
 801a50a:	2b01      	cmp	r3, #1
 801a50c:	d10d      	bne.n	801a52a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801a50e:	68bb      	ldr	r3, [r7, #8]
 801a510:	691b      	ldr	r3, [r3, #16]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d009      	beq.n	801a52a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	6919      	ldr	r1, [r3, #16]
 801a51a:	69bb      	ldr	r3, [r7, #24]
 801a51c:	015a      	lsls	r2, r3, #5
 801a51e:	69fb      	ldr	r3, [r7, #28]
 801a520:	4413      	add	r3, r2
 801a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a526:	460a      	mov	r2, r1
 801a528:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801a52a:	68bb      	ldr	r3, [r7, #8]
 801a52c:	791b      	ldrb	r3, [r3, #4]
 801a52e:	2b01      	cmp	r3, #1
 801a530:	d128      	bne.n	801a584 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a532:	69fb      	ldr	r3, [r7, #28]
 801a534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a538:	689b      	ldr	r3, [r3, #8]
 801a53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d110      	bne.n	801a564 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801a542:	69bb      	ldr	r3, [r7, #24]
 801a544:	015a      	lsls	r2, r3, #5
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	4413      	add	r3, r2
 801a54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	69ba      	ldr	r2, [r7, #24]
 801a552:	0151      	lsls	r1, r2, #5
 801a554:	69fa      	ldr	r2, [r7, #28]
 801a556:	440a      	add	r2, r1
 801a558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a55c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a560:	6013      	str	r3, [r2, #0]
 801a562:	e00f      	b.n	801a584 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801a564:	69bb      	ldr	r3, [r7, #24]
 801a566:	015a      	lsls	r2, r3, #5
 801a568:	69fb      	ldr	r3, [r7, #28]
 801a56a:	4413      	add	r3, r2
 801a56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	69ba      	ldr	r2, [r7, #24]
 801a574:	0151      	lsls	r1, r2, #5
 801a576:	69fa      	ldr	r2, [r7, #28]
 801a578:	440a      	add	r2, r1
 801a57a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a57e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a582:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801a584:	69bb      	ldr	r3, [r7, #24]
 801a586:	015a      	lsls	r2, r3, #5
 801a588:	69fb      	ldr	r3, [r7, #28]
 801a58a:	4413      	add	r3, r2
 801a58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	69ba      	ldr	r2, [r7, #24]
 801a594:	0151      	lsls	r1, r2, #5
 801a596:	69fa      	ldr	r2, [r7, #28]
 801a598:	440a      	add	r2, r1
 801a59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a59e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a5a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a5a4:	2300      	movs	r3, #0
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	3720      	adds	r7, #32
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	bd80      	pop	{r7, pc}
 801a5ae:	bf00      	nop
 801a5b0:	1ff80000 	.word	0x1ff80000

0801a5b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801a5b4:	b480      	push	{r7}
 801a5b6:	b087      	sub	sp, #28
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	60f8      	str	r0, [r7, #12]
 801a5bc:	60b9      	str	r1, [r7, #8]
 801a5be:	4613      	mov	r3, r2
 801a5c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	785b      	ldrb	r3, [r3, #1]
 801a5d0:	2b01      	cmp	r3, #1
 801a5d2:	f040 80ce 	bne.w	801a772 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801a5d6:	68bb      	ldr	r3, [r7, #8]
 801a5d8:	699b      	ldr	r3, [r3, #24]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d132      	bne.n	801a644 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a5de:	693b      	ldr	r3, [r7, #16]
 801a5e0:	015a      	lsls	r2, r3, #5
 801a5e2:	697b      	ldr	r3, [r7, #20]
 801a5e4:	4413      	add	r3, r2
 801a5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5ea:	691b      	ldr	r3, [r3, #16]
 801a5ec:	693a      	ldr	r2, [r7, #16]
 801a5ee:	0151      	lsls	r1, r2, #5
 801a5f0:	697a      	ldr	r2, [r7, #20]
 801a5f2:	440a      	add	r2, r1
 801a5f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a5f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a5fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	015a      	lsls	r2, r3, #5
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	4413      	add	r3, r2
 801a60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a60e:	691b      	ldr	r3, [r3, #16]
 801a610:	693a      	ldr	r2, [r7, #16]
 801a612:	0151      	lsls	r1, r2, #5
 801a614:	697a      	ldr	r2, [r7, #20]
 801a616:	440a      	add	r2, r1
 801a618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a61c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a622:	693b      	ldr	r3, [r7, #16]
 801a624:	015a      	lsls	r2, r3, #5
 801a626:	697b      	ldr	r3, [r7, #20]
 801a628:	4413      	add	r3, r2
 801a62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a62e:	691b      	ldr	r3, [r3, #16]
 801a630:	693a      	ldr	r2, [r7, #16]
 801a632:	0151      	lsls	r1, r2, #5
 801a634:	697a      	ldr	r2, [r7, #20]
 801a636:	440a      	add	r2, r1
 801a638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a63c:	0cdb      	lsrs	r3, r3, #19
 801a63e:	04db      	lsls	r3, r3, #19
 801a640:	6113      	str	r3, [r2, #16]
 801a642:	e04e      	b.n	801a6e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a644:	693b      	ldr	r3, [r7, #16]
 801a646:	015a      	lsls	r2, r3, #5
 801a648:	697b      	ldr	r3, [r7, #20]
 801a64a:	4413      	add	r3, r2
 801a64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a650:	691b      	ldr	r3, [r3, #16]
 801a652:	693a      	ldr	r2, [r7, #16]
 801a654:	0151      	lsls	r1, r2, #5
 801a656:	697a      	ldr	r2, [r7, #20]
 801a658:	440a      	add	r2, r1
 801a65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a65e:	0cdb      	lsrs	r3, r3, #19
 801a660:	04db      	lsls	r3, r3, #19
 801a662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a664:	693b      	ldr	r3, [r7, #16]
 801a666:	015a      	lsls	r2, r3, #5
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	4413      	add	r3, r2
 801a66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a670:	691b      	ldr	r3, [r3, #16]
 801a672:	693a      	ldr	r2, [r7, #16]
 801a674:	0151      	lsls	r1, r2, #5
 801a676:	697a      	ldr	r2, [r7, #20]
 801a678:	440a      	add	r2, r1
 801a67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a67e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a682:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a686:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	699a      	ldr	r2, [r3, #24]
 801a68c:	68bb      	ldr	r3, [r7, #8]
 801a68e:	68db      	ldr	r3, [r3, #12]
 801a690:	429a      	cmp	r2, r3
 801a692:	d903      	bls.n	801a69c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	68da      	ldr	r2, [r3, #12]
 801a698:	68bb      	ldr	r3, [r7, #8]
 801a69a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801a69c:	693b      	ldr	r3, [r7, #16]
 801a69e:	015a      	lsls	r2, r3, #5
 801a6a0:	697b      	ldr	r3, [r7, #20]
 801a6a2:	4413      	add	r3, r2
 801a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6a8:	691b      	ldr	r3, [r3, #16]
 801a6aa:	693a      	ldr	r2, [r7, #16]
 801a6ac:	0151      	lsls	r1, r2, #5
 801a6ae:	697a      	ldr	r2, [r7, #20]
 801a6b0:	440a      	add	r2, r1
 801a6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a6b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a6ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801a6bc:	693b      	ldr	r3, [r7, #16]
 801a6be:	015a      	lsls	r2, r3, #5
 801a6c0:	697b      	ldr	r3, [r7, #20]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6c8:	691a      	ldr	r2, [r3, #16]
 801a6ca:	68bb      	ldr	r3, [r7, #8]
 801a6cc:	699b      	ldr	r3, [r3, #24]
 801a6ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a6d2:	6939      	ldr	r1, [r7, #16]
 801a6d4:	0148      	lsls	r0, r1, #5
 801a6d6:	6979      	ldr	r1, [r7, #20]
 801a6d8:	4401      	add	r1, r0
 801a6da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801a6e2:	79fb      	ldrb	r3, [r7, #7]
 801a6e4:	2b01      	cmp	r3, #1
 801a6e6:	d11e      	bne.n	801a726 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	695b      	ldr	r3, [r3, #20]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d009      	beq.n	801a704 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801a6f0:	693b      	ldr	r3, [r7, #16]
 801a6f2:	015a      	lsls	r2, r3, #5
 801a6f4:	697b      	ldr	r3, [r7, #20]
 801a6f6:	4413      	add	r3, r2
 801a6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6fc:	461a      	mov	r2, r3
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	695b      	ldr	r3, [r3, #20]
 801a702:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a704:	693b      	ldr	r3, [r7, #16]
 801a706:	015a      	lsls	r2, r3, #5
 801a708:	697b      	ldr	r3, [r7, #20]
 801a70a:	4413      	add	r3, r2
 801a70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	693a      	ldr	r2, [r7, #16]
 801a714:	0151      	lsls	r1, r2, #5
 801a716:	697a      	ldr	r2, [r7, #20]
 801a718:	440a      	add	r2, r1
 801a71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a71e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a722:	6013      	str	r3, [r2, #0]
 801a724:	e097      	b.n	801a856 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a726:	693b      	ldr	r3, [r7, #16]
 801a728:	015a      	lsls	r2, r3, #5
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	4413      	add	r3, r2
 801a72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	693a      	ldr	r2, [r7, #16]
 801a736:	0151      	lsls	r1, r2, #5
 801a738:	697a      	ldr	r2, [r7, #20]
 801a73a:	440a      	add	r2, r1
 801a73c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a740:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a744:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	699b      	ldr	r3, [r3, #24]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	f000 8083 	beq.w	801a856 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	f003 030f 	and.w	r3, r3, #15
 801a760:	2101      	movs	r1, #1
 801a762:	fa01 f303 	lsl.w	r3, r1, r3
 801a766:	6979      	ldr	r1, [r7, #20]
 801a768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a76c:	4313      	orrs	r3, r2
 801a76e:	634b      	str	r3, [r1, #52]	; 0x34
 801a770:	e071      	b.n	801a856 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	015a      	lsls	r2, r3, #5
 801a776:	697b      	ldr	r3, [r7, #20]
 801a778:	4413      	add	r3, r2
 801a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a77e:	691b      	ldr	r3, [r3, #16]
 801a780:	693a      	ldr	r2, [r7, #16]
 801a782:	0151      	lsls	r1, r2, #5
 801a784:	697a      	ldr	r2, [r7, #20]
 801a786:	440a      	add	r2, r1
 801a788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a78c:	0cdb      	lsrs	r3, r3, #19
 801a78e:	04db      	lsls	r3, r3, #19
 801a790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	015a      	lsls	r2, r3, #5
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	4413      	add	r3, r2
 801a79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a79e:	691b      	ldr	r3, [r3, #16]
 801a7a0:	693a      	ldr	r2, [r7, #16]
 801a7a2:	0151      	lsls	r1, r2, #5
 801a7a4:	697a      	ldr	r2, [r7, #20]
 801a7a6:	440a      	add	r2, r1
 801a7a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a7ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a7b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a7b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	699b      	ldr	r3, [r3, #24]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d003      	beq.n	801a7c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	68da      	ldr	r2, [r3, #12]
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801a7c6:	68bb      	ldr	r3, [r7, #8]
 801a7c8:	68da      	ldr	r2, [r3, #12]
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	015a      	lsls	r2, r3, #5
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	4413      	add	r3, r2
 801a7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7da:	691b      	ldr	r3, [r3, #16]
 801a7dc:	693a      	ldr	r2, [r7, #16]
 801a7de:	0151      	lsls	r1, r2, #5
 801a7e0:	697a      	ldr	r2, [r7, #20]
 801a7e2:	440a      	add	r2, r1
 801a7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a7e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a7ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801a7ee:	693b      	ldr	r3, [r7, #16]
 801a7f0:	015a      	lsls	r2, r3, #5
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	4413      	add	r3, r2
 801a7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7fa:	691a      	ldr	r2, [r3, #16]
 801a7fc:	68bb      	ldr	r3, [r7, #8]
 801a7fe:	69db      	ldr	r3, [r3, #28]
 801a800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a804:	6939      	ldr	r1, [r7, #16]
 801a806:	0148      	lsls	r0, r1, #5
 801a808:	6979      	ldr	r1, [r7, #20]
 801a80a:	4401      	add	r1, r0
 801a80c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a810:	4313      	orrs	r3, r2
 801a812:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801a814:	79fb      	ldrb	r3, [r7, #7]
 801a816:	2b01      	cmp	r3, #1
 801a818:	d10d      	bne.n	801a836 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	691b      	ldr	r3, [r3, #16]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d009      	beq.n	801a836 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801a822:	68bb      	ldr	r3, [r7, #8]
 801a824:	6919      	ldr	r1, [r3, #16]
 801a826:	693b      	ldr	r3, [r7, #16]
 801a828:	015a      	lsls	r2, r3, #5
 801a82a:	697b      	ldr	r3, [r7, #20]
 801a82c:	4413      	add	r3, r2
 801a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a832:	460a      	mov	r2, r1
 801a834:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801a836:	693b      	ldr	r3, [r7, #16]
 801a838:	015a      	lsls	r2, r3, #5
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	4413      	add	r3, r2
 801a83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	693a      	ldr	r2, [r7, #16]
 801a846:	0151      	lsls	r1, r2, #5
 801a848:	697a      	ldr	r2, [r7, #20]
 801a84a:	440a      	add	r2, r1
 801a84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a850:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a854:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a856:	2300      	movs	r3, #0
}
 801a858:	4618      	mov	r0, r3
 801a85a:	371c      	adds	r7, #28
 801a85c:	46bd      	mov	sp, r7
 801a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a862:	4770      	bx	lr

0801a864 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a864:	b480      	push	{r7}
 801a866:	b087      	sub	sp, #28
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
 801a86c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801a86e:	2300      	movs	r3, #0
 801a870:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801a872:	2300      	movs	r3, #0
 801a874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	785b      	ldrb	r3, [r3, #1]
 801a87e:	2b01      	cmp	r3, #1
 801a880:	d14a      	bne.n	801a918 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	781b      	ldrb	r3, [r3, #0]
 801a886:	015a      	lsls	r2, r3, #5
 801a888:	693b      	ldr	r3, [r7, #16]
 801a88a:	4413      	add	r3, r2
 801a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a89a:	f040 8086 	bne.w	801a9aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	781b      	ldrb	r3, [r3, #0]
 801a8a2:	015a      	lsls	r2, r3, #5
 801a8a4:	693b      	ldr	r3, [r7, #16]
 801a8a6:	4413      	add	r3, r2
 801a8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	683a      	ldr	r2, [r7, #0]
 801a8b0:	7812      	ldrb	r2, [r2, #0]
 801a8b2:	0151      	lsls	r1, r2, #5
 801a8b4:	693a      	ldr	r2, [r7, #16]
 801a8b6:	440a      	add	r2, r1
 801a8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a8bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a8c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801a8c2:	683b      	ldr	r3, [r7, #0]
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	015a      	lsls	r2, r3, #5
 801a8c8:	693b      	ldr	r3, [r7, #16]
 801a8ca:	4413      	add	r3, r2
 801a8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	683a      	ldr	r2, [r7, #0]
 801a8d4:	7812      	ldrb	r2, [r2, #0]
 801a8d6:	0151      	lsls	r1, r2, #5
 801a8d8:	693a      	ldr	r2, [r7, #16]
 801a8da:	440a      	add	r2, r1
 801a8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a8e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a8e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	3301      	adds	r3, #1
 801a8ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	f242 7210 	movw	r2, #10000	; 0x2710
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d902      	bls.n	801a8fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801a8f6:	2301      	movs	r3, #1
 801a8f8:	75fb      	strb	r3, [r7, #23]
          break;
 801a8fa:	e056      	b.n	801a9aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	781b      	ldrb	r3, [r3, #0]
 801a900:	015a      	lsls	r2, r3, #5
 801a902:	693b      	ldr	r3, [r7, #16]
 801a904:	4413      	add	r3, r2
 801a906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a914:	d0e7      	beq.n	801a8e6 <USB_EPStopXfer+0x82>
 801a916:	e048      	b.n	801a9aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	781b      	ldrb	r3, [r3, #0]
 801a91c:	015a      	lsls	r2, r3, #5
 801a91e:	693b      	ldr	r3, [r7, #16]
 801a920:	4413      	add	r3, r2
 801a922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a92c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a930:	d13b      	bne.n	801a9aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	781b      	ldrb	r3, [r3, #0]
 801a936:	015a      	lsls	r2, r3, #5
 801a938:	693b      	ldr	r3, [r7, #16]
 801a93a:	4413      	add	r3, r2
 801a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	683a      	ldr	r2, [r7, #0]
 801a944:	7812      	ldrb	r2, [r2, #0]
 801a946:	0151      	lsls	r1, r2, #5
 801a948:	693a      	ldr	r2, [r7, #16]
 801a94a:	440a      	add	r2, r1
 801a94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a954:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	781b      	ldrb	r3, [r3, #0]
 801a95a:	015a      	lsls	r2, r3, #5
 801a95c:	693b      	ldr	r3, [r7, #16]
 801a95e:	4413      	add	r3, r2
 801a960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	683a      	ldr	r2, [r7, #0]
 801a968:	7812      	ldrb	r2, [r2, #0]
 801a96a:	0151      	lsls	r1, r2, #5
 801a96c:	693a      	ldr	r2, [r7, #16]
 801a96e:	440a      	add	r2, r1
 801a970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a978:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	3301      	adds	r3, #1
 801a97e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	f242 7210 	movw	r2, #10000	; 0x2710
 801a986:	4293      	cmp	r3, r2
 801a988:	d902      	bls.n	801a990 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801a98a:	2301      	movs	r3, #1
 801a98c:	75fb      	strb	r3, [r7, #23]
          break;
 801a98e:	e00c      	b.n	801a9aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801a990:	683b      	ldr	r3, [r7, #0]
 801a992:	781b      	ldrb	r3, [r3, #0]
 801a994:	015a      	lsls	r2, r3, #5
 801a996:	693b      	ldr	r3, [r7, #16]
 801a998:	4413      	add	r3, r2
 801a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a9a8:	d0e7      	beq.n	801a97a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801a9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	371c      	adds	r7, #28
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b6:	4770      	bx	lr

0801a9b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801a9b8:	b480      	push	{r7}
 801a9ba:	b089      	sub	sp, #36	; 0x24
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	60f8      	str	r0, [r7, #12]
 801a9c0:	60b9      	str	r1, [r7, #8]
 801a9c2:	4611      	mov	r1, r2
 801a9c4:	461a      	mov	r2, r3
 801a9c6:	460b      	mov	r3, r1
 801a9c8:	71fb      	strb	r3, [r7, #7]
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801a9d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d123      	bne.n	801aa26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801a9de:	88bb      	ldrh	r3, [r7, #4]
 801a9e0:	3303      	adds	r3, #3
 801a9e2:	089b      	lsrs	r3, r3, #2
 801a9e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	61bb      	str	r3, [r7, #24]
 801a9ea:	e018      	b.n	801aa1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801a9ec:	79fb      	ldrb	r3, [r7, #7]
 801a9ee:	031a      	lsls	r2, r3, #12
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	4413      	add	r3, r2
 801a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	69fb      	ldr	r3, [r7, #28]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 801aa00:	69fb      	ldr	r3, [r7, #28]
 801aa02:	3301      	adds	r3, #1
 801aa04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801aa06:	69fb      	ldr	r3, [r7, #28]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801aa0c:	69fb      	ldr	r3, [r7, #28]
 801aa0e:	3301      	adds	r3, #1
 801aa10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	3301      	adds	r3, #1
 801aa16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801aa18:	69bb      	ldr	r3, [r7, #24]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	61bb      	str	r3, [r7, #24]
 801aa1e:	69ba      	ldr	r2, [r7, #24]
 801aa20:	693b      	ldr	r3, [r7, #16]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d3e2      	bcc.n	801a9ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801aa26:	2300      	movs	r3, #0
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3724      	adds	r7, #36	; 0x24
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa32:	4770      	bx	lr

0801aa34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801aa34:	b480      	push	{r7}
 801aa36:	b08b      	sub	sp, #44	; 0x2c
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	60f8      	str	r0, [r7, #12]
 801aa3c:	60b9      	str	r1, [r7, #8]
 801aa3e:	4613      	mov	r3, r2
 801aa40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801aa46:	68bb      	ldr	r3, [r7, #8]
 801aa48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801aa4a:	88fb      	ldrh	r3, [r7, #6]
 801aa4c:	089b      	lsrs	r3, r3, #2
 801aa4e:	b29b      	uxth	r3, r3
 801aa50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801aa52:	88fb      	ldrh	r3, [r7, #6]
 801aa54:	f003 0303 	and.w	r3, r3, #3
 801aa58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	623b      	str	r3, [r7, #32]
 801aa5e:	e014      	b.n	801aa8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801aa60:	69bb      	ldr	r3, [r7, #24]
 801aa62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa66:	681a      	ldr	r2, [r3, #0]
 801aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6a:	601a      	str	r2, [r3, #0]
    pDest++;
 801aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6e:	3301      	adds	r3, #1
 801aa70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa74:	3301      	adds	r3, #1
 801aa76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa7a:	3301      	adds	r3, #1
 801aa7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa80:	3301      	adds	r3, #1
 801aa82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801aa84:	6a3b      	ldr	r3, [r7, #32]
 801aa86:	3301      	adds	r3, #1
 801aa88:	623b      	str	r3, [r7, #32]
 801aa8a:	6a3a      	ldr	r2, [r7, #32]
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	d3e6      	bcc.n	801aa60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801aa92:	8bfb      	ldrh	r3, [r7, #30]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d01e      	beq.n	801aad6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801aa9c:	69bb      	ldr	r3, [r7, #24]
 801aa9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	f107 0310 	add.w	r3, r7, #16
 801aaa8:	6812      	ldr	r2, [r2, #0]
 801aaaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801aaac:	693a      	ldr	r2, [r7, #16]
 801aaae:	6a3b      	ldr	r3, [r7, #32]
 801aab0:	b2db      	uxtb	r3, r3
 801aab2:	00db      	lsls	r3, r3, #3
 801aab4:	fa22 f303 	lsr.w	r3, r2, r3
 801aab8:	b2da      	uxtb	r2, r3
 801aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aabc:	701a      	strb	r2, [r3, #0]
      i++;
 801aabe:	6a3b      	ldr	r3, [r7, #32]
 801aac0:	3301      	adds	r3, #1
 801aac2:	623b      	str	r3, [r7, #32]
      pDest++;
 801aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac6:	3301      	adds	r3, #1
 801aac8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801aaca:	8bfb      	ldrh	r3, [r7, #30]
 801aacc:	3b01      	subs	r3, #1
 801aace:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801aad0:	8bfb      	ldrh	r3, [r7, #30]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d1ea      	bne.n	801aaac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aad8:	4618      	mov	r0, r3
 801aada:	372c      	adds	r7, #44	; 0x2c
 801aadc:	46bd      	mov	sp, r7
 801aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae2:	4770      	bx	lr

0801aae4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801aae4:	b480      	push	{r7}
 801aae6:	b085      	sub	sp, #20
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
 801aaec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	785b      	ldrb	r3, [r3, #1]
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d12c      	bne.n	801ab5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	015a      	lsls	r2, r3, #5
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	4413      	add	r3, r2
 801ab08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	db12      	blt.n	801ab38 <USB_EPSetStall+0x54>
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d00f      	beq.n	801ab38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	015a      	lsls	r2, r3, #5
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	4413      	add	r3, r2
 801ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	68ba      	ldr	r2, [r7, #8]
 801ab28:	0151      	lsls	r1, r2, #5
 801ab2a:	68fa      	ldr	r2, [r7, #12]
 801ab2c:	440a      	add	r2, r1
 801ab2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ab32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ab36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	015a      	lsls	r2, r3, #5
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	4413      	add	r3, r2
 801ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	68ba      	ldr	r2, [r7, #8]
 801ab48:	0151      	lsls	r1, r2, #5
 801ab4a:	68fa      	ldr	r2, [r7, #12]
 801ab4c:	440a      	add	r2, r1
 801ab4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ab52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ab56:	6013      	str	r3, [r2, #0]
 801ab58:	e02b      	b.n	801abb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	015a      	lsls	r2, r3, #5
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	4413      	add	r3, r2
 801ab62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	db12      	blt.n	801ab92 <USB_EPSetStall+0xae>
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d00f      	beq.n	801ab92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ab72:	68bb      	ldr	r3, [r7, #8]
 801ab74:	015a      	lsls	r2, r3, #5
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	4413      	add	r3, r2
 801ab7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	68ba      	ldr	r2, [r7, #8]
 801ab82:	0151      	lsls	r1, r2, #5
 801ab84:	68fa      	ldr	r2, [r7, #12]
 801ab86:	440a      	add	r2, r1
 801ab88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ab8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ab90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	015a      	lsls	r2, r3, #5
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	4413      	add	r3, r2
 801ab9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	68ba      	ldr	r2, [r7, #8]
 801aba2:	0151      	lsls	r1, r2, #5
 801aba4:	68fa      	ldr	r2, [r7, #12]
 801aba6:	440a      	add	r2, r1
 801aba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801abac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801abb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801abb2:	2300      	movs	r3, #0
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	3714      	adds	r7, #20
 801abb8:	46bd      	mov	sp, r7
 801abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abbe:	4770      	bx	lr

0801abc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b085      	sub	sp, #20
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
 801abc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	785b      	ldrb	r3, [r3, #1]
 801abd8:	2b01      	cmp	r3, #1
 801abda:	d128      	bne.n	801ac2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	015a      	lsls	r2, r3, #5
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	4413      	add	r3, r2
 801abe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	68ba      	ldr	r2, [r7, #8]
 801abec:	0151      	lsls	r1, r2, #5
 801abee:	68fa      	ldr	r2, [r7, #12]
 801abf0:	440a      	add	r2, r1
 801abf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801abf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801abfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	791b      	ldrb	r3, [r3, #4]
 801ac00:	2b03      	cmp	r3, #3
 801ac02:	d003      	beq.n	801ac0c <USB_EPClearStall+0x4c>
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	791b      	ldrb	r3, [r3, #4]
 801ac08:	2b02      	cmp	r3, #2
 801ac0a:	d138      	bne.n	801ac7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	015a      	lsls	r2, r3, #5
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	4413      	add	r3, r2
 801ac14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	68ba      	ldr	r2, [r7, #8]
 801ac1c:	0151      	lsls	r1, r2, #5
 801ac1e:	68fa      	ldr	r2, [r7, #12]
 801ac20:	440a      	add	r2, r1
 801ac22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ac26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ac2a:	6013      	str	r3, [r2, #0]
 801ac2c:	e027      	b.n	801ac7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	015a      	lsls	r2, r3, #5
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	4413      	add	r3, r2
 801ac36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	68ba      	ldr	r2, [r7, #8]
 801ac3e:	0151      	lsls	r1, r2, #5
 801ac40:	68fa      	ldr	r2, [r7, #12]
 801ac42:	440a      	add	r2, r1
 801ac44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ac48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ac4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ac4e:	683b      	ldr	r3, [r7, #0]
 801ac50:	791b      	ldrb	r3, [r3, #4]
 801ac52:	2b03      	cmp	r3, #3
 801ac54:	d003      	beq.n	801ac5e <USB_EPClearStall+0x9e>
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	791b      	ldrb	r3, [r3, #4]
 801ac5a:	2b02      	cmp	r3, #2
 801ac5c:	d10f      	bne.n	801ac7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	015a      	lsls	r2, r3, #5
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	4413      	add	r3, r2
 801ac66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	68ba      	ldr	r2, [r7, #8]
 801ac6e:	0151      	lsls	r1, r2, #5
 801ac70:	68fa      	ldr	r2, [r7, #12]
 801ac72:	440a      	add	r2, r1
 801ac74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ac78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ac7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801ac7e:	2300      	movs	r3, #0
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3714      	adds	r7, #20
 801ac84:	46bd      	mov	sp, r7
 801ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8a:	4770      	bx	lr

0801ac8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801ac8c:	b480      	push	{r7}
 801ac8e:	b085      	sub	sp, #20
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	6078      	str	r0, [r7, #4]
 801ac94:	460b      	mov	r3, r1
 801ac96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	68fa      	ldr	r2, [r7, #12]
 801aca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801acaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801acae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801acb6:	681a      	ldr	r2, [r3, #0]
 801acb8:	78fb      	ldrb	r3, [r7, #3]
 801acba:	011b      	lsls	r3, r3, #4
 801acbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801acc0:	68f9      	ldr	r1, [r7, #12]
 801acc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801acc6:	4313      	orrs	r3, r2
 801acc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801acca:	2300      	movs	r3, #0
}
 801accc:	4618      	mov	r0, r3
 801acce:	3714      	adds	r7, #20
 801acd0:	46bd      	mov	sp, r7
 801acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd6:	4770      	bx	lr

0801acd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801acd8:	b480      	push	{r7}
 801acda:	b085      	sub	sp, #20
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	68fa      	ldr	r2, [r7, #12]
 801acee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801acf2:	f023 0303 	bic.w	r3, r3, #3
 801acf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ad06:	f023 0302 	bic.w	r3, r3, #2
 801ad0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ad0c:	2300      	movs	r3, #0
}
 801ad0e:	4618      	mov	r0, r3
 801ad10:	3714      	adds	r7, #20
 801ad12:	46bd      	mov	sp, r7
 801ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad18:	4770      	bx	lr

0801ad1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ad1a:	b480      	push	{r7}
 801ad1c:	b085      	sub	sp, #20
 801ad1e:	af00      	add	r7, sp, #0
 801ad20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	68fa      	ldr	r2, [r7, #12]
 801ad30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ad34:	f023 0303 	bic.w	r3, r3, #3
 801ad38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad40:	685b      	ldr	r3, [r3, #4]
 801ad42:	68fa      	ldr	r2, [r7, #12]
 801ad44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ad48:	f043 0302 	orr.w	r3, r3, #2
 801ad4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ad4e:	2300      	movs	r3, #0
}
 801ad50:	4618      	mov	r0, r3
 801ad52:	3714      	adds	r7, #20
 801ad54:	46bd      	mov	sp, r7
 801ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5a:	4770      	bx	lr

0801ad5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801ad5c:	b480      	push	{r7}
 801ad5e:	b085      	sub	sp, #20
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	695b      	ldr	r3, [r3, #20]
 801ad68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	699b      	ldr	r3, [r3, #24]
 801ad6e:	68fa      	ldr	r2, [r7, #12]
 801ad70:	4013      	ands	r3, r2
 801ad72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801ad74:	68fb      	ldr	r3, [r7, #12]
}
 801ad76:	4618      	mov	r0, r3
 801ad78:	3714      	adds	r7, #20
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad80:	4770      	bx	lr

0801ad82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ad82:	b480      	push	{r7}
 801ad84:	b085      	sub	sp, #20
 801ad86:	af00      	add	r7, sp, #0
 801ad88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad94:	699b      	ldr	r3, [r3, #24]
 801ad96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad9e:	69db      	ldr	r3, [r3, #28]
 801ada0:	68ba      	ldr	r2, [r7, #8]
 801ada2:	4013      	ands	r3, r2
 801ada4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801ada6:	68bb      	ldr	r3, [r7, #8]
 801ada8:	0c1b      	lsrs	r3, r3, #16
}
 801adaa:	4618      	mov	r0, r3
 801adac:	3714      	adds	r7, #20
 801adae:	46bd      	mov	sp, r7
 801adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb4:	4770      	bx	lr

0801adb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801adb6:	b480      	push	{r7}
 801adb8:	b085      	sub	sp, #20
 801adba:	af00      	add	r7, sp, #0
 801adbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801adc8:	699b      	ldr	r3, [r3, #24]
 801adca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801add2:	69db      	ldr	r3, [r3, #28]
 801add4:	68ba      	ldr	r2, [r7, #8]
 801add6:	4013      	ands	r3, r2
 801add8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801adda:	68bb      	ldr	r3, [r7, #8]
 801addc:	b29b      	uxth	r3, r3
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3714      	adds	r7, #20
 801ade2:	46bd      	mov	sp, r7
 801ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade8:	4770      	bx	lr

0801adea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801adea:	b480      	push	{r7}
 801adec:	b085      	sub	sp, #20
 801adee:	af00      	add	r7, sp, #0
 801adf0:	6078      	str	r0, [r7, #4]
 801adf2:	460b      	mov	r3, r1
 801adf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801adfa:	78fb      	ldrb	r3, [r7, #3]
 801adfc:	015a      	lsls	r2, r3, #5
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	4413      	add	r3, r2
 801ae02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae06:	689b      	ldr	r3, [r3, #8]
 801ae08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae10:	695b      	ldr	r3, [r3, #20]
 801ae12:	68ba      	ldr	r2, [r7, #8]
 801ae14:	4013      	ands	r3, r2
 801ae16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ae18:	68bb      	ldr	r3, [r7, #8]
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3714      	adds	r7, #20
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae24:	4770      	bx	lr

0801ae26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801ae26:	b480      	push	{r7}
 801ae28:	b087      	sub	sp, #28
 801ae2a:	af00      	add	r7, sp, #0
 801ae2c:	6078      	str	r0, [r7, #4]
 801ae2e:	460b      	mov	r3, r1
 801ae30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801ae36:	697b      	ldr	r3, [r7, #20]
 801ae38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae3c:	691b      	ldr	r3, [r3, #16]
 801ae3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801ae4a:	78fb      	ldrb	r3, [r7, #3]
 801ae4c:	f003 030f 	and.w	r3, r3, #15
 801ae50:	68fa      	ldr	r2, [r7, #12]
 801ae52:	fa22 f303 	lsr.w	r3, r2, r3
 801ae56:	01db      	lsls	r3, r3, #7
 801ae58:	b2db      	uxtb	r3, r3
 801ae5a:	693a      	ldr	r2, [r7, #16]
 801ae5c:	4313      	orrs	r3, r2
 801ae5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801ae60:	78fb      	ldrb	r3, [r7, #3]
 801ae62:	015a      	lsls	r2, r3, #5
 801ae64:	697b      	ldr	r3, [r7, #20]
 801ae66:	4413      	add	r3, r2
 801ae68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae6c:	689b      	ldr	r3, [r3, #8]
 801ae6e:	693a      	ldr	r2, [r7, #16]
 801ae70:	4013      	ands	r3, r2
 801ae72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ae74:	68bb      	ldr	r3, [r7, #8]
}
 801ae76:	4618      	mov	r0, r3
 801ae78:	371c      	adds	r7, #28
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae80:	4770      	bx	lr

0801ae82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801ae82:	b480      	push	{r7}
 801ae84:	b083      	sub	sp, #12
 801ae86:	af00      	add	r7, sp, #0
 801ae88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	695b      	ldr	r3, [r3, #20]
 801ae8e:	f003 0301 	and.w	r3, r3, #1
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	370c      	adds	r7, #12
 801ae96:	46bd      	mov	sp, r7
 801ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae9c:	4770      	bx	lr

0801ae9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801ae9e:	b480      	push	{r7}
 801aea0:	b085      	sub	sp, #20
 801aea2:	af00      	add	r7, sp, #0
 801aea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	68fa      	ldr	r2, [r7, #12]
 801aeb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aeb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801aebc:	f023 0307 	bic.w	r3, r3, #7
 801aec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	68fa      	ldr	r2, [r7, #12]
 801aecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801aed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801aed6:	2300      	movs	r3, #0
}
 801aed8:	4618      	mov	r0, r3
 801aeda:	3714      	adds	r7, #20
 801aedc:	46bd      	mov	sp, r7
 801aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee2:	4770      	bx	lr

0801aee4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801aee4:	b480      	push	{r7}
 801aee6:	b087      	sub	sp, #28
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	460b      	mov	r3, r1
 801aeee:	607a      	str	r2, [r7, #4]
 801aef0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	333c      	adds	r3, #60	; 0x3c
 801aefa:	3304      	adds	r3, #4
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	4a26      	ldr	r2, [pc, #152]	; (801af9c <USB_EP0_OutStart+0xb8>)
 801af04:	4293      	cmp	r3, r2
 801af06:	d90a      	bls.n	801af1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801af08:	697b      	ldr	r3, [r7, #20]
 801af0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801af18:	d101      	bne.n	801af1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801af1a:	2300      	movs	r3, #0
 801af1c:	e037      	b.n	801af8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af24:	461a      	mov	r2, r3
 801af26:	2300      	movs	r3, #0
 801af28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af30:	691b      	ldr	r3, [r3, #16]
 801af32:	697a      	ldr	r2, [r7, #20]
 801af34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801af3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801af3e:	697b      	ldr	r3, [r7, #20]
 801af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af44:	691b      	ldr	r3, [r3, #16]
 801af46:	697a      	ldr	r2, [r7, #20]
 801af48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af4c:	f043 0318 	orr.w	r3, r3, #24
 801af50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801af52:	697b      	ldr	r3, [r7, #20]
 801af54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af58:	691b      	ldr	r3, [r3, #16]
 801af5a:	697a      	ldr	r2, [r7, #20]
 801af5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801af64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801af66:	7afb      	ldrb	r3, [r7, #11]
 801af68:	2b01      	cmp	r3, #1
 801af6a:	d10f      	bne.n	801af8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801af6c:	697b      	ldr	r3, [r7, #20]
 801af6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af72:	461a      	mov	r2, r3
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801af78:	697b      	ldr	r3, [r7, #20]
 801af7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	697a      	ldr	r2, [r7, #20]
 801af82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801af8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801af8c:	2300      	movs	r3, #0
}
 801af8e:	4618      	mov	r0, r3
 801af90:	371c      	adds	r7, #28
 801af92:	46bd      	mov	sp, r7
 801af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af98:	4770      	bx	lr
 801af9a:	bf00      	nop
 801af9c:	4f54300a 	.word	0x4f54300a

0801afa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801afa0:	b480      	push	{r7}
 801afa2:	b085      	sub	sp, #20
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801afa8:	2300      	movs	r3, #0
 801afaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	3301      	adds	r3, #1
 801afb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	4a13      	ldr	r2, [pc, #76]	; (801b004 <USB_CoreReset+0x64>)
 801afb6:	4293      	cmp	r3, r2
 801afb8:	d901      	bls.n	801afbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801afba:	2303      	movs	r3, #3
 801afbc:	e01b      	b.n	801aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	691b      	ldr	r3, [r3, #16]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	daf2      	bge.n	801afac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801afc6:	2300      	movs	r3, #0
 801afc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	691b      	ldr	r3, [r3, #16]
 801afce:	f043 0201 	orr.w	r2, r3, #1
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	3301      	adds	r3, #1
 801afda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	4a09      	ldr	r2, [pc, #36]	; (801b004 <USB_CoreReset+0x64>)
 801afe0:	4293      	cmp	r3, r2
 801afe2:	d901      	bls.n	801afe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801afe4:	2303      	movs	r3, #3
 801afe6:	e006      	b.n	801aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	691b      	ldr	r3, [r3, #16]
 801afec:	f003 0301 	and.w	r3, r3, #1
 801aff0:	2b01      	cmp	r3, #1
 801aff2:	d0f0      	beq.n	801afd6 <USB_CoreReset+0x36>

  return HAL_OK;
 801aff4:	2300      	movs	r3, #0
}
 801aff6:	4618      	mov	r0, r3
 801aff8:	3714      	adds	r7, #20
 801affa:	46bd      	mov	sp, r7
 801affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b000:	4770      	bx	lr
 801b002:	bf00      	nop
 801b004:	00030d40 	.word	0x00030d40

0801b008 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b084      	sub	sp, #16
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
 801b010:	460b      	mov	r3, r1
 801b012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b014:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801b018:	f002 fc28 	bl	801d86c <USBD_static_malloc>
 801b01c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d109      	bne.n	801b038 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	32b0      	adds	r2, #176	; 0xb0
 801b02e:	2100      	movs	r1, #0
 801b030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801b034:	2302      	movs	r3, #2
 801b036:	e0d4      	b.n	801b1e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801b038:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801b03c:	2100      	movs	r1, #0
 801b03e:	68f8      	ldr	r0, [r7, #12]
 801b040:	f004 f910 	bl	801f264 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	32b0      	adds	r2, #176	; 0xb0
 801b04e:	68f9      	ldr	r1, [r7, #12]
 801b050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	32b0      	adds	r2, #176	; 0xb0
 801b05e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	7c1b      	ldrb	r3, [r3, #16]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d138      	bne.n	801b0e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801b070:	4b5e      	ldr	r3, [pc, #376]	; (801b1ec <USBD_CDC_Init+0x1e4>)
 801b072:	7819      	ldrb	r1, [r3, #0]
 801b074:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b078:	2202      	movs	r2, #2
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	f002 fad3 	bl	801d626 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801b080:	4b5a      	ldr	r3, [pc, #360]	; (801b1ec <USBD_CDC_Init+0x1e4>)
 801b082:	781b      	ldrb	r3, [r3, #0]
 801b084:	f003 020f 	and.w	r2, r3, #15
 801b088:	6879      	ldr	r1, [r7, #4]
 801b08a:	4613      	mov	r3, r2
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	4413      	add	r3, r2
 801b090:	009b      	lsls	r3, r3, #2
 801b092:	440b      	add	r3, r1
 801b094:	3324      	adds	r3, #36	; 0x24
 801b096:	2201      	movs	r2, #1
 801b098:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801b09a:	4b55      	ldr	r3, [pc, #340]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b09c:	7819      	ldrb	r1, [r3, #0]
 801b09e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b0a2:	2202      	movs	r2, #2
 801b0a4:	6878      	ldr	r0, [r7, #4]
 801b0a6:	f002 fabe 	bl	801d626 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801b0aa:	4b51      	ldr	r3, [pc, #324]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b0ac:	781b      	ldrb	r3, [r3, #0]
 801b0ae:	f003 020f 	and.w	r2, r3, #15
 801b0b2:	6879      	ldr	r1, [r7, #4]
 801b0b4:	4613      	mov	r3, r2
 801b0b6:	009b      	lsls	r3, r3, #2
 801b0b8:	4413      	add	r3, r2
 801b0ba:	009b      	lsls	r3, r3, #2
 801b0bc:	440b      	add	r3, r1
 801b0be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b0c2:	2201      	movs	r2, #1
 801b0c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801b0c6:	4b4b      	ldr	r3, [pc, #300]	; (801b1f4 <USBD_CDC_Init+0x1ec>)
 801b0c8:	781b      	ldrb	r3, [r3, #0]
 801b0ca:	f003 020f 	and.w	r2, r3, #15
 801b0ce:	6879      	ldr	r1, [r7, #4]
 801b0d0:	4613      	mov	r3, r2
 801b0d2:	009b      	lsls	r3, r3, #2
 801b0d4:	4413      	add	r3, r2
 801b0d6:	009b      	lsls	r3, r3, #2
 801b0d8:	440b      	add	r3, r1
 801b0da:	3326      	adds	r3, #38	; 0x26
 801b0dc:	2210      	movs	r2, #16
 801b0de:	801a      	strh	r2, [r3, #0]
 801b0e0:	e035      	b.n	801b14e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801b0e2:	4b42      	ldr	r3, [pc, #264]	; (801b1ec <USBD_CDC_Init+0x1e4>)
 801b0e4:	7819      	ldrb	r1, [r3, #0]
 801b0e6:	2340      	movs	r3, #64	; 0x40
 801b0e8:	2202      	movs	r2, #2
 801b0ea:	6878      	ldr	r0, [r7, #4]
 801b0ec:	f002 fa9b 	bl	801d626 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801b0f0:	4b3e      	ldr	r3, [pc, #248]	; (801b1ec <USBD_CDC_Init+0x1e4>)
 801b0f2:	781b      	ldrb	r3, [r3, #0]
 801b0f4:	f003 020f 	and.w	r2, r3, #15
 801b0f8:	6879      	ldr	r1, [r7, #4]
 801b0fa:	4613      	mov	r3, r2
 801b0fc:	009b      	lsls	r3, r3, #2
 801b0fe:	4413      	add	r3, r2
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	440b      	add	r3, r1
 801b104:	3324      	adds	r3, #36	; 0x24
 801b106:	2201      	movs	r2, #1
 801b108:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801b10a:	4b39      	ldr	r3, [pc, #228]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b10c:	7819      	ldrb	r1, [r3, #0]
 801b10e:	2340      	movs	r3, #64	; 0x40
 801b110:	2202      	movs	r2, #2
 801b112:	6878      	ldr	r0, [r7, #4]
 801b114:	f002 fa87 	bl	801d626 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801b118:	4b35      	ldr	r3, [pc, #212]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b11a:	781b      	ldrb	r3, [r3, #0]
 801b11c:	f003 020f 	and.w	r2, r3, #15
 801b120:	6879      	ldr	r1, [r7, #4]
 801b122:	4613      	mov	r3, r2
 801b124:	009b      	lsls	r3, r3, #2
 801b126:	4413      	add	r3, r2
 801b128:	009b      	lsls	r3, r3, #2
 801b12a:	440b      	add	r3, r1
 801b12c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b130:	2201      	movs	r2, #1
 801b132:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801b134:	4b2f      	ldr	r3, [pc, #188]	; (801b1f4 <USBD_CDC_Init+0x1ec>)
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	f003 020f 	and.w	r2, r3, #15
 801b13c:	6879      	ldr	r1, [r7, #4]
 801b13e:	4613      	mov	r3, r2
 801b140:	009b      	lsls	r3, r3, #2
 801b142:	4413      	add	r3, r2
 801b144:	009b      	lsls	r3, r3, #2
 801b146:	440b      	add	r3, r1
 801b148:	3326      	adds	r3, #38	; 0x26
 801b14a:	2210      	movs	r2, #16
 801b14c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b14e:	4b29      	ldr	r3, [pc, #164]	; (801b1f4 <USBD_CDC_Init+0x1ec>)
 801b150:	7819      	ldrb	r1, [r3, #0]
 801b152:	2308      	movs	r3, #8
 801b154:	2203      	movs	r2, #3
 801b156:	6878      	ldr	r0, [r7, #4]
 801b158:	f002 fa65 	bl	801d626 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801b15c:	4b25      	ldr	r3, [pc, #148]	; (801b1f4 <USBD_CDC_Init+0x1ec>)
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	f003 020f 	and.w	r2, r3, #15
 801b164:	6879      	ldr	r1, [r7, #4]
 801b166:	4613      	mov	r3, r2
 801b168:	009b      	lsls	r3, r3, #2
 801b16a:	4413      	add	r3, r2
 801b16c:	009b      	lsls	r3, r3, #2
 801b16e:	440b      	add	r3, r1
 801b170:	3324      	adds	r3, #36	; 0x24
 801b172:	2201      	movs	r2, #1
 801b174:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	2200      	movs	r2, #0
 801b17a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b184:	687a      	ldr	r2, [r7, #4]
 801b186:	33b0      	adds	r3, #176	; 0xb0
 801b188:	009b      	lsls	r3, r3, #2
 801b18a:	4413      	add	r3, r2
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	2200      	movs	r2, #0
 801b196:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	2200      	movs	r2, #0
 801b19e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d101      	bne.n	801b1b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801b1ac:	2302      	movs	r3, #2
 801b1ae:	e018      	b.n	801b1e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	7c1b      	ldrb	r3, [r3, #16]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d10a      	bne.n	801b1ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b1b8:	4b0d      	ldr	r3, [pc, #52]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b1ba:	7819      	ldrb	r1, [r3, #0]
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b1c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	f002 fb1c 	bl	801d804 <USBD_LL_PrepareReceive>
 801b1cc:	e008      	b.n	801b1e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b1ce:	4b08      	ldr	r3, [pc, #32]	; (801b1f0 <USBD_CDC_Init+0x1e8>)
 801b1d0:	7819      	ldrb	r1, [r3, #0]
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b1d8:	2340      	movs	r3, #64	; 0x40
 801b1da:	6878      	ldr	r0, [r7, #4]
 801b1dc:	f002 fb12 	bl	801d804 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801b1e0:	2300      	movs	r3, #0
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3710      	adds	r7, #16
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}
 801b1ea:	bf00      	nop
 801b1ec:	20000683 	.word	0x20000683
 801b1f0:	20000684 	.word	0x20000684
 801b1f4:	20000685 	.word	0x20000685

0801b1f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b082      	sub	sp, #8
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
 801b200:	460b      	mov	r3, r1
 801b202:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801b204:	4b3a      	ldr	r3, [pc, #232]	; (801b2f0 <USBD_CDC_DeInit+0xf8>)
 801b206:	781b      	ldrb	r3, [r3, #0]
 801b208:	4619      	mov	r1, r3
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f002 fa31 	bl	801d672 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801b210:	4b37      	ldr	r3, [pc, #220]	; (801b2f0 <USBD_CDC_DeInit+0xf8>)
 801b212:	781b      	ldrb	r3, [r3, #0]
 801b214:	f003 020f 	and.w	r2, r3, #15
 801b218:	6879      	ldr	r1, [r7, #4]
 801b21a:	4613      	mov	r3, r2
 801b21c:	009b      	lsls	r3, r3, #2
 801b21e:	4413      	add	r3, r2
 801b220:	009b      	lsls	r3, r3, #2
 801b222:	440b      	add	r3, r1
 801b224:	3324      	adds	r3, #36	; 0x24
 801b226:	2200      	movs	r2, #0
 801b228:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801b22a:	4b32      	ldr	r3, [pc, #200]	; (801b2f4 <USBD_CDC_DeInit+0xfc>)
 801b22c:	781b      	ldrb	r3, [r3, #0]
 801b22e:	4619      	mov	r1, r3
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	f002 fa1e 	bl	801d672 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801b236:	4b2f      	ldr	r3, [pc, #188]	; (801b2f4 <USBD_CDC_DeInit+0xfc>)
 801b238:	781b      	ldrb	r3, [r3, #0]
 801b23a:	f003 020f 	and.w	r2, r3, #15
 801b23e:	6879      	ldr	r1, [r7, #4]
 801b240:	4613      	mov	r3, r2
 801b242:	009b      	lsls	r3, r3, #2
 801b244:	4413      	add	r3, r2
 801b246:	009b      	lsls	r3, r3, #2
 801b248:	440b      	add	r3, r1
 801b24a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b24e:	2200      	movs	r2, #0
 801b250:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801b252:	4b29      	ldr	r3, [pc, #164]	; (801b2f8 <USBD_CDC_DeInit+0x100>)
 801b254:	781b      	ldrb	r3, [r3, #0]
 801b256:	4619      	mov	r1, r3
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	f002 fa0a 	bl	801d672 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801b25e:	4b26      	ldr	r3, [pc, #152]	; (801b2f8 <USBD_CDC_DeInit+0x100>)
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	f003 020f 	and.w	r2, r3, #15
 801b266:	6879      	ldr	r1, [r7, #4]
 801b268:	4613      	mov	r3, r2
 801b26a:	009b      	lsls	r3, r3, #2
 801b26c:	4413      	add	r3, r2
 801b26e:	009b      	lsls	r3, r3, #2
 801b270:	440b      	add	r3, r1
 801b272:	3324      	adds	r3, #36	; 0x24
 801b274:	2200      	movs	r2, #0
 801b276:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801b278:	4b1f      	ldr	r3, [pc, #124]	; (801b2f8 <USBD_CDC_DeInit+0x100>)
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	f003 020f 	and.w	r2, r3, #15
 801b280:	6879      	ldr	r1, [r7, #4]
 801b282:	4613      	mov	r3, r2
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	4413      	add	r3, r2
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	440b      	add	r3, r1
 801b28c:	3326      	adds	r3, #38	; 0x26
 801b28e:	2200      	movs	r2, #0
 801b290:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	32b0      	adds	r2, #176	; 0xb0
 801b29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d01f      	beq.n	801b2e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b2aa:	687a      	ldr	r2, [r7, #4]
 801b2ac:	33b0      	adds	r3, #176	; 0xb0
 801b2ae:	009b      	lsls	r3, r3, #2
 801b2b0:	4413      	add	r3, r2
 801b2b2:	685b      	ldr	r3, [r3, #4]
 801b2b4:	685b      	ldr	r3, [r3, #4]
 801b2b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	32b0      	adds	r2, #176	; 0xb0
 801b2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f002 fade 	bl	801d888 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	32b0      	adds	r2, #176	; 0xb0
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	2200      	movs	r2, #0
 801b2e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b2e4:	2300      	movs	r3, #0
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3708      	adds	r7, #8
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}
 801b2ee:	bf00      	nop
 801b2f0:	20000683 	.word	0x20000683
 801b2f4:	20000684 	.word	0x20000684
 801b2f8:	20000685 	.word	0x20000685

0801b2fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b086      	sub	sp, #24
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	32b0      	adds	r2, #176	; 0xb0
 801b310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b314:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801b316:	2300      	movs	r3, #0
 801b318:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801b31a:	2300      	movs	r3, #0
 801b31c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801b31e:	2300      	movs	r3, #0
 801b320:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d101      	bne.n	801b32c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801b328:	2303      	movs	r3, #3
 801b32a:	e0bf      	b.n	801b4ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b32c:	683b      	ldr	r3, [r7, #0]
 801b32e:	781b      	ldrb	r3, [r3, #0]
 801b330:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b334:	2b00      	cmp	r3, #0
 801b336:	d050      	beq.n	801b3da <USBD_CDC_Setup+0xde>
 801b338:	2b20      	cmp	r3, #32
 801b33a:	f040 80af 	bne.w	801b49c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	88db      	ldrh	r3, [r3, #6]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d03a      	beq.n	801b3bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	781b      	ldrb	r3, [r3, #0]
 801b34a:	b25b      	sxtb	r3, r3
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	da1b      	bge.n	801b388 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	33b0      	adds	r3, #176	; 0xb0
 801b35a:	009b      	lsls	r3, r3, #2
 801b35c:	4413      	add	r3, r2
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	689b      	ldr	r3, [r3, #8]
 801b362:	683a      	ldr	r2, [r7, #0]
 801b364:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801b366:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b368:	683a      	ldr	r2, [r7, #0]
 801b36a:	88d2      	ldrh	r2, [r2, #6]
 801b36c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	88db      	ldrh	r3, [r3, #6]
 801b372:	2b07      	cmp	r3, #7
 801b374:	bf28      	it	cs
 801b376:	2307      	movcs	r3, #7
 801b378:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801b37a:	693b      	ldr	r3, [r7, #16]
 801b37c:	89fa      	ldrh	r2, [r7, #14]
 801b37e:	4619      	mov	r1, r3
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	f001 fd43 	bl	801ce0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801b386:	e090      	b.n	801b4aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	785a      	ldrb	r2, [r3, #1]
 801b38c:	693b      	ldr	r3, [r7, #16]
 801b38e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	88db      	ldrh	r3, [r3, #6]
 801b396:	2b3f      	cmp	r3, #63	; 0x3f
 801b398:	d803      	bhi.n	801b3a2 <USBD_CDC_Setup+0xa6>
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	88db      	ldrh	r3, [r3, #6]
 801b39e:	b2da      	uxtb	r2, r3
 801b3a0:	e000      	b.n	801b3a4 <USBD_CDC_Setup+0xa8>
 801b3a2:	2240      	movs	r2, #64	; 0x40
 801b3a4:	693b      	ldr	r3, [r7, #16]
 801b3a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801b3aa:	6939      	ldr	r1, [r7, #16]
 801b3ac:	693b      	ldr	r3, [r7, #16]
 801b3ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	6878      	ldr	r0, [r7, #4]
 801b3b6:	f001 fd55 	bl	801ce64 <USBD_CtlPrepareRx>
      break;
 801b3ba:	e076      	b.n	801b4aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b3c2:	687a      	ldr	r2, [r7, #4]
 801b3c4:	33b0      	adds	r3, #176	; 0xb0
 801b3c6:	009b      	lsls	r3, r3, #2
 801b3c8:	4413      	add	r3, r2
 801b3ca:	685b      	ldr	r3, [r3, #4]
 801b3cc:	689b      	ldr	r3, [r3, #8]
 801b3ce:	683a      	ldr	r2, [r7, #0]
 801b3d0:	7850      	ldrb	r0, [r2, #1]
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	6839      	ldr	r1, [r7, #0]
 801b3d6:	4798      	blx	r3
      break;
 801b3d8:	e067      	b.n	801b4aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b3da:	683b      	ldr	r3, [r7, #0]
 801b3dc:	785b      	ldrb	r3, [r3, #1]
 801b3de:	2b0b      	cmp	r3, #11
 801b3e0:	d851      	bhi.n	801b486 <USBD_CDC_Setup+0x18a>
 801b3e2:	a201      	add	r2, pc, #4	; (adr r2, 801b3e8 <USBD_CDC_Setup+0xec>)
 801b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3e8:	0801b419 	.word	0x0801b419
 801b3ec:	0801b495 	.word	0x0801b495
 801b3f0:	0801b487 	.word	0x0801b487
 801b3f4:	0801b487 	.word	0x0801b487
 801b3f8:	0801b487 	.word	0x0801b487
 801b3fc:	0801b487 	.word	0x0801b487
 801b400:	0801b487 	.word	0x0801b487
 801b404:	0801b487 	.word	0x0801b487
 801b408:	0801b487 	.word	0x0801b487
 801b40c:	0801b487 	.word	0x0801b487
 801b410:	0801b443 	.word	0x0801b443
 801b414:	0801b46d 	.word	0x0801b46d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b41e:	b2db      	uxtb	r3, r3
 801b420:	2b03      	cmp	r3, #3
 801b422:	d107      	bne.n	801b434 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b424:	f107 030a 	add.w	r3, r7, #10
 801b428:	2202      	movs	r2, #2
 801b42a:	4619      	mov	r1, r3
 801b42c:	6878      	ldr	r0, [r7, #4]
 801b42e:	f001 fced 	bl	801ce0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b432:	e032      	b.n	801b49a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801b434:	6839      	ldr	r1, [r7, #0]
 801b436:	6878      	ldr	r0, [r7, #4]
 801b438:	f001 fc77 	bl	801cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 801b43c:	2303      	movs	r3, #3
 801b43e:	75fb      	strb	r3, [r7, #23]
          break;
 801b440:	e02b      	b.n	801b49a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b448:	b2db      	uxtb	r3, r3
 801b44a:	2b03      	cmp	r3, #3
 801b44c:	d107      	bne.n	801b45e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801b44e:	f107 030d 	add.w	r3, r7, #13
 801b452:	2201      	movs	r2, #1
 801b454:	4619      	mov	r1, r3
 801b456:	6878      	ldr	r0, [r7, #4]
 801b458:	f001 fcd8 	bl	801ce0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b45c:	e01d      	b.n	801b49a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801b45e:	6839      	ldr	r1, [r7, #0]
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	f001 fc62 	bl	801cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 801b466:	2303      	movs	r3, #3
 801b468:	75fb      	strb	r3, [r7, #23]
          break;
 801b46a:	e016      	b.n	801b49a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b472:	b2db      	uxtb	r3, r3
 801b474:	2b03      	cmp	r3, #3
 801b476:	d00f      	beq.n	801b498 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801b478:	6839      	ldr	r1, [r7, #0]
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	f001 fc55 	bl	801cd2a <USBD_CtlError>
            ret = USBD_FAIL;
 801b480:	2303      	movs	r3, #3
 801b482:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801b484:	e008      	b.n	801b498 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801b486:	6839      	ldr	r1, [r7, #0]
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	f001 fc4e 	bl	801cd2a <USBD_CtlError>
          ret = USBD_FAIL;
 801b48e:	2303      	movs	r3, #3
 801b490:	75fb      	strb	r3, [r7, #23]
          break;
 801b492:	e002      	b.n	801b49a <USBD_CDC_Setup+0x19e>
          break;
 801b494:	bf00      	nop
 801b496:	e008      	b.n	801b4aa <USBD_CDC_Setup+0x1ae>
          break;
 801b498:	bf00      	nop
      }
      break;
 801b49a:	e006      	b.n	801b4aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801b49c:	6839      	ldr	r1, [r7, #0]
 801b49e:	6878      	ldr	r0, [r7, #4]
 801b4a0:	f001 fc43 	bl	801cd2a <USBD_CtlError>
      ret = USBD_FAIL;
 801b4a4:	2303      	movs	r3, #3
 801b4a6:	75fb      	strb	r3, [r7, #23]
      break;
 801b4a8:	bf00      	nop
  }

  return (uint8_t)ret;
 801b4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3718      	adds	r7, #24
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}

0801b4b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b084      	sub	sp, #16
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	6078      	str	r0, [r7, #4]
 801b4bc:	460b      	mov	r3, r1
 801b4be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b4c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	32b0      	adds	r2, #176	; 0xb0
 801b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d101      	bne.n	801b4de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801b4da:	2303      	movs	r3, #3
 801b4dc:	e065      	b.n	801b5aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	32b0      	adds	r2, #176	; 0xb0
 801b4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801b4ee:	78fb      	ldrb	r3, [r7, #3]
 801b4f0:	f003 020f 	and.w	r2, r3, #15
 801b4f4:	6879      	ldr	r1, [r7, #4]
 801b4f6:	4613      	mov	r3, r2
 801b4f8:	009b      	lsls	r3, r3, #2
 801b4fa:	4413      	add	r3, r2
 801b4fc:	009b      	lsls	r3, r3, #2
 801b4fe:	440b      	add	r3, r1
 801b500:	3318      	adds	r3, #24
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d02f      	beq.n	801b568 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801b508:	78fb      	ldrb	r3, [r7, #3]
 801b50a:	f003 020f 	and.w	r2, r3, #15
 801b50e:	6879      	ldr	r1, [r7, #4]
 801b510:	4613      	mov	r3, r2
 801b512:	009b      	lsls	r3, r3, #2
 801b514:	4413      	add	r3, r2
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	440b      	add	r3, r1
 801b51a:	3318      	adds	r3, #24
 801b51c:	681a      	ldr	r2, [r3, #0]
 801b51e:	78fb      	ldrb	r3, [r7, #3]
 801b520:	f003 010f 	and.w	r1, r3, #15
 801b524:	68f8      	ldr	r0, [r7, #12]
 801b526:	460b      	mov	r3, r1
 801b528:	00db      	lsls	r3, r3, #3
 801b52a:	440b      	add	r3, r1
 801b52c:	009b      	lsls	r3, r3, #2
 801b52e:	4403      	add	r3, r0
 801b530:	3348      	adds	r3, #72	; 0x48
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	fbb2 f1f3 	udiv	r1, r2, r3
 801b538:	fb01 f303 	mul.w	r3, r1, r3
 801b53c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d112      	bne.n	801b568 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801b542:	78fb      	ldrb	r3, [r7, #3]
 801b544:	f003 020f 	and.w	r2, r3, #15
 801b548:	6879      	ldr	r1, [r7, #4]
 801b54a:	4613      	mov	r3, r2
 801b54c:	009b      	lsls	r3, r3, #2
 801b54e:	4413      	add	r3, r2
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	440b      	add	r3, r1
 801b554:	3318      	adds	r3, #24
 801b556:	2200      	movs	r2, #0
 801b558:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b55a:	78f9      	ldrb	r1, [r7, #3]
 801b55c:	2300      	movs	r3, #0
 801b55e:	2200      	movs	r2, #0
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f002 f92e 	bl	801d7c2 <USBD_LL_Transmit>
 801b566:	e01f      	b.n	801b5a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	2200      	movs	r2, #0
 801b56c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b576:	687a      	ldr	r2, [r7, #4]
 801b578:	33b0      	adds	r3, #176	; 0xb0
 801b57a:	009b      	lsls	r3, r3, #2
 801b57c:	4413      	add	r3, r2
 801b57e:	685b      	ldr	r3, [r3, #4]
 801b580:	691b      	ldr	r3, [r3, #16]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d010      	beq.n	801b5a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b58c:	687a      	ldr	r2, [r7, #4]
 801b58e:	33b0      	adds	r3, #176	; 0xb0
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	4413      	add	r3, r2
 801b594:	685b      	ldr	r3, [r3, #4]
 801b596:	691b      	ldr	r3, [r3, #16]
 801b598:	68ba      	ldr	r2, [r7, #8]
 801b59a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801b59e:	68ba      	ldr	r2, [r7, #8]
 801b5a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801b5a4:	78fa      	ldrb	r2, [r7, #3]
 801b5a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801b5a8:	2300      	movs	r3, #0
}
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	3710      	adds	r7, #16
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bd80      	pop	{r7, pc}

0801b5b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b5b2:	b580      	push	{r7, lr}
 801b5b4:	b084      	sub	sp, #16
 801b5b6:	af00      	add	r7, sp, #0
 801b5b8:	6078      	str	r0, [r7, #4]
 801b5ba:	460b      	mov	r3, r1
 801b5bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	32b0      	adds	r2, #176	; 0xb0
 801b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b5cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	32b0      	adds	r2, #176	; 0xb0
 801b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d101      	bne.n	801b5e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801b5e0:	2303      	movs	r3, #3
 801b5e2:	e01a      	b.n	801b61a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b5e4:	78fb      	ldrb	r3, [r7, #3]
 801b5e6:	4619      	mov	r1, r3
 801b5e8:	6878      	ldr	r0, [r7, #4]
 801b5ea:	f002 f92c 	bl	801d846 <USBD_LL_GetRxDataSize>
 801b5ee:	4602      	mov	r2, r0
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b5fc:	687a      	ldr	r2, [r7, #4]
 801b5fe:	33b0      	adds	r3, #176	; 0xb0
 801b600:	009b      	lsls	r3, r3, #2
 801b602:	4413      	add	r3, r2
 801b604:	685b      	ldr	r3, [r3, #4]
 801b606:	68db      	ldr	r3, [r3, #12]
 801b608:	68fa      	ldr	r2, [r7, #12]
 801b60a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801b60e:	68fa      	ldr	r2, [r7, #12]
 801b610:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801b614:	4611      	mov	r1, r2
 801b616:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801b618:	2300      	movs	r3, #0
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3710      	adds	r7, #16
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}

0801b622 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b622:	b580      	push	{r7, lr}
 801b624:	b084      	sub	sp, #16
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	32b0      	adds	r2, #176	; 0xb0
 801b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b638:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d101      	bne.n	801b644 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801b640:	2303      	movs	r3, #3
 801b642:	e025      	b.n	801b690 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	33b0      	adds	r3, #176	; 0xb0
 801b64e:	009b      	lsls	r3, r3, #2
 801b650:	4413      	add	r3, r2
 801b652:	685b      	ldr	r3, [r3, #4]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d01a      	beq.n	801b68e <USBD_CDC_EP0_RxReady+0x6c>
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801b65e:	2bff      	cmp	r3, #255	; 0xff
 801b660:	d015      	beq.n	801b68e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b668:	687a      	ldr	r2, [r7, #4]
 801b66a:	33b0      	adds	r3, #176	; 0xb0
 801b66c:	009b      	lsls	r3, r3, #2
 801b66e:	4413      	add	r3, r2
 801b670:	685b      	ldr	r3, [r3, #4]
 801b672:	689b      	ldr	r3, [r3, #8]
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801b67a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801b67c:	68fa      	ldr	r2, [r7, #12]
 801b67e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801b682:	b292      	uxth	r2, r2
 801b684:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	22ff      	movs	r2, #255	; 0xff
 801b68a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801b68e:	2300      	movs	r3, #0
}
 801b690:	4618      	mov	r0, r3
 801b692:	3710      	adds	r7, #16
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b086      	sub	sp, #24
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801b6a0:	2182      	movs	r1, #130	; 0x82
 801b6a2:	4818      	ldr	r0, [pc, #96]	; (801b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801b6a4:	f000 fd09 	bl	801c0ba <USBD_GetEpDesc>
 801b6a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801b6aa:	2101      	movs	r1, #1
 801b6ac:	4815      	ldr	r0, [pc, #84]	; (801b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801b6ae:	f000 fd04 	bl	801c0ba <USBD_GetEpDesc>
 801b6b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801b6b4:	2181      	movs	r1, #129	; 0x81
 801b6b6:	4813      	ldr	r0, [pc, #76]	; (801b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801b6b8:	f000 fcff 	bl	801c0ba <USBD_GetEpDesc>
 801b6bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d002      	beq.n	801b6ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	2210      	movs	r2, #16
 801b6c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801b6ca:	693b      	ldr	r3, [r7, #16]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d006      	beq.n	801b6de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801b6d0:	693b      	ldr	r3, [r7, #16]
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b6d8:	711a      	strb	r2, [r3, #4]
 801b6da:	2200      	movs	r2, #0
 801b6dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d006      	beq.n	801b6f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b6ec:	711a      	strb	r2, [r3, #4]
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	2243      	movs	r2, #67	; 0x43
 801b6f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801b6f8:	4b02      	ldr	r3, [pc, #8]	; (801b704 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	3718      	adds	r7, #24
 801b6fe:	46bd      	mov	sp, r7
 801b700:	bd80      	pop	{r7, pc}
 801b702:	bf00      	nop
 801b704:	20000640 	.word	0x20000640

0801b708 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b708:	b580      	push	{r7, lr}
 801b70a:	b086      	sub	sp, #24
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801b710:	2182      	movs	r1, #130	; 0x82
 801b712:	4818      	ldr	r0, [pc, #96]	; (801b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801b714:	f000 fcd1 	bl	801c0ba <USBD_GetEpDesc>
 801b718:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801b71a:	2101      	movs	r1, #1
 801b71c:	4815      	ldr	r0, [pc, #84]	; (801b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801b71e:	f000 fccc 	bl	801c0ba <USBD_GetEpDesc>
 801b722:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801b724:	2181      	movs	r1, #129	; 0x81
 801b726:	4813      	ldr	r0, [pc, #76]	; (801b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801b728:	f000 fcc7 	bl	801c0ba <USBD_GetEpDesc>
 801b72c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801b72e:	697b      	ldr	r3, [r7, #20]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d002      	beq.n	801b73a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	2210      	movs	r2, #16
 801b738:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d006      	beq.n	801b74e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801b740:	693b      	ldr	r3, [r7, #16]
 801b742:	2200      	movs	r2, #0
 801b744:	711a      	strb	r2, [r3, #4]
 801b746:	2200      	movs	r2, #0
 801b748:	f042 0202 	orr.w	r2, r2, #2
 801b74c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d006      	beq.n	801b762 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	2200      	movs	r2, #0
 801b758:	711a      	strb	r2, [r3, #4]
 801b75a:	2200      	movs	r2, #0
 801b75c:	f042 0202 	orr.w	r2, r2, #2
 801b760:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	2243      	movs	r2, #67	; 0x43
 801b766:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801b768:	4b02      	ldr	r3, [pc, #8]	; (801b774 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801b76a:	4618      	mov	r0, r3
 801b76c:	3718      	adds	r7, #24
 801b76e:	46bd      	mov	sp, r7
 801b770:	bd80      	pop	{r7, pc}
 801b772:	bf00      	nop
 801b774:	20000640 	.word	0x20000640

0801b778 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b086      	sub	sp, #24
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801b780:	2182      	movs	r1, #130	; 0x82
 801b782:	4818      	ldr	r0, [pc, #96]	; (801b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801b784:	f000 fc99 	bl	801c0ba <USBD_GetEpDesc>
 801b788:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801b78a:	2101      	movs	r1, #1
 801b78c:	4815      	ldr	r0, [pc, #84]	; (801b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801b78e:	f000 fc94 	bl	801c0ba <USBD_GetEpDesc>
 801b792:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801b794:	2181      	movs	r1, #129	; 0x81
 801b796:	4813      	ldr	r0, [pc, #76]	; (801b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801b798:	f000 fc8f 	bl	801c0ba <USBD_GetEpDesc>
 801b79c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801b79e:	697b      	ldr	r3, [r7, #20]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d002      	beq.n	801b7aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801b7a4:	697b      	ldr	r3, [r7, #20]
 801b7a6:	2210      	movs	r2, #16
 801b7a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801b7aa:	693b      	ldr	r3, [r7, #16]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d006      	beq.n	801b7be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801b7b0:	693b      	ldr	r3, [r7, #16]
 801b7b2:	2200      	movs	r2, #0
 801b7b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b7b8:	711a      	strb	r2, [r3, #4]
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d006      	beq.n	801b7d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b7cc:	711a      	strb	r2, [r3, #4]
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	2243      	movs	r2, #67	; 0x43
 801b7d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801b7d8:	4b02      	ldr	r3, [pc, #8]	; (801b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801b7da:	4618      	mov	r0, r3
 801b7dc:	3718      	adds	r7, #24
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bd80      	pop	{r7, pc}
 801b7e2:	bf00      	nop
 801b7e4:	20000640 	.word	0x20000640

0801b7e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b083      	sub	sp, #12
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	220a      	movs	r2, #10
 801b7f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801b7f6:	4b03      	ldr	r3, [pc, #12]	; (801b804 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	370c      	adds	r7, #12
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b802:	4770      	bx	lr
 801b804:	200005fc 	.word	0x200005fc

0801b808 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801b808:	b480      	push	{r7}
 801b80a:	b083      	sub	sp, #12
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
 801b810:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b812:	683b      	ldr	r3, [r7, #0]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d101      	bne.n	801b81c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b818:	2303      	movs	r3, #3
 801b81a:	e009      	b.n	801b830 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	33b0      	adds	r3, #176	; 0xb0
 801b826:	009b      	lsls	r3, r3, #2
 801b828:	4413      	add	r3, r2
 801b82a:	683a      	ldr	r2, [r7, #0]
 801b82c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801b82e:	2300      	movs	r3, #0
}
 801b830:	4618      	mov	r0, r3
 801b832:	370c      	adds	r7, #12
 801b834:	46bd      	mov	sp, r7
 801b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b83a:	4770      	bx	lr

0801b83c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801b83c:	b480      	push	{r7}
 801b83e:	b087      	sub	sp, #28
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	60b9      	str	r1, [r7, #8]
 801b846:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	32b0      	adds	r2, #176	; 0xb0
 801b852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b856:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d101      	bne.n	801b862 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801b85e:	2303      	movs	r3, #3
 801b860:	e008      	b.n	801b874 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	68ba      	ldr	r2, [r7, #8]
 801b866:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	687a      	ldr	r2, [r7, #4]
 801b86e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801b872:	2300      	movs	r3, #0
}
 801b874:	4618      	mov	r0, r3
 801b876:	371c      	adds	r7, #28
 801b878:	46bd      	mov	sp, r7
 801b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b87e:	4770      	bx	lr

0801b880 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801b880:	b480      	push	{r7}
 801b882:	b085      	sub	sp, #20
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
 801b888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	32b0      	adds	r2, #176	; 0xb0
 801b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b898:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d101      	bne.n	801b8a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b8a0:	2303      	movs	r3, #3
 801b8a2:	e004      	b.n	801b8ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	683a      	ldr	r2, [r7, #0]
 801b8a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801b8ac:	2300      	movs	r3, #0
}
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	3714      	adds	r7, #20
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b8:	4770      	bx	lr
	...

0801b8bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b084      	sub	sp, #16
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	32b0      	adds	r2, #176	; 0xb0
 801b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	32b0      	adds	r2, #176	; 0xb0
 801b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d101      	bne.n	801b8ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801b8e6:	2303      	movs	r3, #3
 801b8e8:	e018      	b.n	801b91c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	7c1b      	ldrb	r3, [r3, #16]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d10a      	bne.n	801b908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b8f2:	4b0c      	ldr	r3, [pc, #48]	; (801b924 <USBD_CDC_ReceivePacket+0x68>)
 801b8f4:	7819      	ldrb	r1, [r3, #0]
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f001 ff7f 	bl	801d804 <USBD_LL_PrepareReceive>
 801b906:	e008      	b.n	801b91a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b908:	4b06      	ldr	r3, [pc, #24]	; (801b924 <USBD_CDC_ReceivePacket+0x68>)
 801b90a:	7819      	ldrb	r1, [r3, #0]
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b912:	2340      	movs	r3, #64	; 0x40
 801b914:	6878      	ldr	r0, [r7, #4]
 801b916:	f001 ff75 	bl	801d804 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801b91a:	2300      	movs	r3, #0
}
 801b91c:	4618      	mov	r0, r3
 801b91e:	3710      	adds	r7, #16
 801b920:	46bd      	mov	sp, r7
 801b922:	bd80      	pop	{r7, pc}
 801b924:	20000684 	.word	0x20000684

0801b928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b086      	sub	sp, #24
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	60f8      	str	r0, [r7, #12]
 801b930:	60b9      	str	r1, [r7, #8]
 801b932:	4613      	mov	r3, r2
 801b934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d101      	bne.n	801b940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801b93c:	2303      	movs	r3, #3
 801b93e:	e01f      	b.n	801b980 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	2200      	movs	r2, #0
 801b944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	2200      	movs	r2, #0
 801b94c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	2200      	movs	r2, #0
 801b954:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d003      	beq.n	801b966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	68ba      	ldr	r2, [r7, #8]
 801b962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	2201      	movs	r2, #1
 801b96a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	79fa      	ldrb	r2, [r7, #7]
 801b972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801b974:	68f8      	ldr	r0, [r7, #12]
 801b976:	f001 fdef 	bl	801d558 <USBD_LL_Init>
 801b97a:	4603      	mov	r3, r0
 801b97c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801b97e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b980:	4618      	mov	r0, r3
 801b982:	3718      	adds	r7, #24
 801b984:	46bd      	mov	sp, r7
 801b986:	bd80      	pop	{r7, pc}

0801b988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b084      	sub	sp, #16
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b992:	2300      	movs	r3, #0
 801b994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801b996:	683b      	ldr	r3, [r7, #0]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d101      	bne.n	801b9a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801b99c:	2303      	movs	r3, #3
 801b99e:	e025      	b.n	801b9ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	683a      	ldr	r2, [r7, #0]
 801b9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	32ae      	adds	r2, #174	; 0xae
 801b9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d00f      	beq.n	801b9dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	32ae      	adds	r2, #174	; 0xae
 801b9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9cc:	f107 020e 	add.w	r2, r7, #14
 801b9d0:	4610      	mov	r0, r2
 801b9d2:	4798      	blx	r3
 801b9d4:	4602      	mov	r2, r0
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801b9e2:	1c5a      	adds	r2, r3, #1
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801b9ea:	2300      	movs	r3, #0
}
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	3710      	adds	r7, #16
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	bd80      	pop	{r7, pc}

0801b9f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b082      	sub	sp, #8
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	f001 fdf7 	bl	801d5f0 <USBD_LL_Start>
 801ba02:	4603      	mov	r3, r0
}
 801ba04:	4618      	mov	r0, r3
 801ba06:	3708      	adds	r7, #8
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	bd80      	pop	{r7, pc}

0801ba0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801ba0c:	b480      	push	{r7}
 801ba0e:	b083      	sub	sp, #12
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ba14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801ba16:	4618      	mov	r0, r3
 801ba18:	370c      	adds	r7, #12
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba20:	4770      	bx	lr

0801ba22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ba22:	b580      	push	{r7, lr}
 801ba24:	b084      	sub	sp, #16
 801ba26:	af00      	add	r7, sp, #0
 801ba28:	6078      	str	r0, [r7, #4]
 801ba2a:	460b      	mov	r3, r1
 801ba2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801ba2e:	2300      	movs	r3, #0
 801ba30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d009      	beq.n	801ba50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	78fa      	ldrb	r2, [r7, #3]
 801ba46:	4611      	mov	r1, r2
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	4798      	blx	r3
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801ba50:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba52:	4618      	mov	r0, r3
 801ba54:	3710      	adds	r7, #16
 801ba56:	46bd      	mov	sp, r7
 801ba58:	bd80      	pop	{r7, pc}

0801ba5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ba5a:	b580      	push	{r7, lr}
 801ba5c:	b084      	sub	sp, #16
 801ba5e:	af00      	add	r7, sp, #0
 801ba60:	6078      	str	r0, [r7, #4]
 801ba62:	460b      	mov	r3, r1
 801ba64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801ba66:	2300      	movs	r3, #0
 801ba68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	78fa      	ldrb	r2, [r7, #3]
 801ba74:	4611      	mov	r1, r2
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	4798      	blx	r3
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d001      	beq.n	801ba84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801ba80:	2303      	movs	r3, #3
 801ba82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3710      	adds	r7, #16
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}

0801ba8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ba8e:	b580      	push	{r7, lr}
 801ba90:	b084      	sub	sp, #16
 801ba92:	af00      	add	r7, sp, #0
 801ba94:	6078      	str	r0, [r7, #4]
 801ba96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ba9e:	6839      	ldr	r1, [r7, #0]
 801baa0:	4618      	mov	r0, r3
 801baa2:	f001 f908 	bl	801ccb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	2201      	movs	r2, #1
 801baaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801bab4:	461a      	mov	r2, r3
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801bac2:	f003 031f 	and.w	r3, r3, #31
 801bac6:	2b02      	cmp	r3, #2
 801bac8:	d01a      	beq.n	801bb00 <USBD_LL_SetupStage+0x72>
 801baca:	2b02      	cmp	r3, #2
 801bacc:	d822      	bhi.n	801bb14 <USBD_LL_SetupStage+0x86>
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d002      	beq.n	801bad8 <USBD_LL_SetupStage+0x4a>
 801bad2:	2b01      	cmp	r3, #1
 801bad4:	d00a      	beq.n	801baec <USBD_LL_SetupStage+0x5e>
 801bad6:	e01d      	b.n	801bb14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801bade:	4619      	mov	r1, r3
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f000 fb5f 	bl	801c1a4 <USBD_StdDevReq>
 801bae6:	4603      	mov	r3, r0
 801bae8:	73fb      	strb	r3, [r7, #15]
      break;
 801baea:	e020      	b.n	801bb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801baf2:	4619      	mov	r1, r3
 801baf4:	6878      	ldr	r0, [r7, #4]
 801baf6:	f000 fbc7 	bl	801c288 <USBD_StdItfReq>
 801bafa:	4603      	mov	r3, r0
 801bafc:	73fb      	strb	r3, [r7, #15]
      break;
 801bafe:	e016      	b.n	801bb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801bb06:	4619      	mov	r1, r3
 801bb08:	6878      	ldr	r0, [r7, #4]
 801bb0a:	f000 fc29 	bl	801c360 <USBD_StdEPReq>
 801bb0e:	4603      	mov	r3, r0
 801bb10:	73fb      	strb	r3, [r7, #15]
      break;
 801bb12:	e00c      	b.n	801bb2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801bb1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801bb1e:	b2db      	uxtb	r3, r3
 801bb20:	4619      	mov	r1, r3
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f001 fdc4 	bl	801d6b0 <USBD_LL_StallEP>
 801bb28:	4603      	mov	r3, r0
 801bb2a:	73fb      	strb	r3, [r7, #15]
      break;
 801bb2c:	bf00      	nop
  }

  return ret;
 801bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb30:	4618      	mov	r0, r3
 801bb32:	3710      	adds	r7, #16
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bd80      	pop	{r7, pc}

0801bb38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b086      	sub	sp, #24
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	60f8      	str	r0, [r7, #12]
 801bb40:	460b      	mov	r3, r1
 801bb42:	607a      	str	r2, [r7, #4]
 801bb44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801bb46:	2300      	movs	r3, #0
 801bb48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801bb4a:	7afb      	ldrb	r3, [r7, #11]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d16e      	bne.n	801bc2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801bb56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801bb5e:	2b03      	cmp	r3, #3
 801bb60:	f040 8098 	bne.w	801bc94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801bb64:	693b      	ldr	r3, [r7, #16]
 801bb66:	689a      	ldr	r2, [r3, #8]
 801bb68:	693b      	ldr	r3, [r7, #16]
 801bb6a:	68db      	ldr	r3, [r3, #12]
 801bb6c:	429a      	cmp	r2, r3
 801bb6e:	d913      	bls.n	801bb98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801bb70:	693b      	ldr	r3, [r7, #16]
 801bb72:	689a      	ldr	r2, [r3, #8]
 801bb74:	693b      	ldr	r3, [r7, #16]
 801bb76:	68db      	ldr	r3, [r3, #12]
 801bb78:	1ad2      	subs	r2, r2, r3
 801bb7a:	693b      	ldr	r3, [r7, #16]
 801bb7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801bb7e:	693b      	ldr	r3, [r7, #16]
 801bb80:	68da      	ldr	r2, [r3, #12]
 801bb82:	693b      	ldr	r3, [r7, #16]
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	4293      	cmp	r3, r2
 801bb88:	bf28      	it	cs
 801bb8a:	4613      	movcs	r3, r2
 801bb8c:	461a      	mov	r2, r3
 801bb8e:	6879      	ldr	r1, [r7, #4]
 801bb90:	68f8      	ldr	r0, [r7, #12]
 801bb92:	f001 f984 	bl	801ce9e <USBD_CtlContinueRx>
 801bb96:	e07d      	b.n	801bc94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801bb9e:	f003 031f 	and.w	r3, r3, #31
 801bba2:	2b02      	cmp	r3, #2
 801bba4:	d014      	beq.n	801bbd0 <USBD_LL_DataOutStage+0x98>
 801bba6:	2b02      	cmp	r3, #2
 801bba8:	d81d      	bhi.n	801bbe6 <USBD_LL_DataOutStage+0xae>
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d002      	beq.n	801bbb4 <USBD_LL_DataOutStage+0x7c>
 801bbae:	2b01      	cmp	r3, #1
 801bbb0:	d003      	beq.n	801bbba <USBD_LL_DataOutStage+0x82>
 801bbb2:	e018      	b.n	801bbe6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	75bb      	strb	r3, [r7, #22]
            break;
 801bbb8:	e018      	b.n	801bbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801bbc0:	b2db      	uxtb	r3, r3
 801bbc2:	4619      	mov	r1, r3
 801bbc4:	68f8      	ldr	r0, [r7, #12]
 801bbc6:	f000 fa5e 	bl	801c086 <USBD_CoreFindIF>
 801bbca:	4603      	mov	r3, r0
 801bbcc:	75bb      	strb	r3, [r7, #22]
            break;
 801bbce:	e00d      	b.n	801bbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801bbd6:	b2db      	uxtb	r3, r3
 801bbd8:	4619      	mov	r1, r3
 801bbda:	68f8      	ldr	r0, [r7, #12]
 801bbdc:	f000 fa60 	bl	801c0a0 <USBD_CoreFindEP>
 801bbe0:	4603      	mov	r3, r0
 801bbe2:	75bb      	strb	r3, [r7, #22]
            break;
 801bbe4:	e002      	b.n	801bbec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	75bb      	strb	r3, [r7, #22]
            break;
 801bbea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801bbec:	7dbb      	ldrb	r3, [r7, #22]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d119      	bne.n	801bc26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bbf8:	b2db      	uxtb	r3, r3
 801bbfa:	2b03      	cmp	r3, #3
 801bbfc:	d113      	bne.n	801bc26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801bbfe:	7dba      	ldrb	r2, [r7, #22]
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	32ae      	adds	r2, #174	; 0xae
 801bc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc08:	691b      	ldr	r3, [r3, #16]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d00b      	beq.n	801bc26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801bc0e:	7dba      	ldrb	r2, [r7, #22]
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801bc16:	7dba      	ldrb	r2, [r7, #22]
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	32ae      	adds	r2, #174	; 0xae
 801bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc20:	691b      	ldr	r3, [r3, #16]
 801bc22:	68f8      	ldr	r0, [r7, #12]
 801bc24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801bc26:	68f8      	ldr	r0, [r7, #12]
 801bc28:	f001 f94a 	bl	801cec0 <USBD_CtlSendStatus>
 801bc2c:	e032      	b.n	801bc94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801bc2e:	7afb      	ldrb	r3, [r7, #11]
 801bc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc34:	b2db      	uxtb	r3, r3
 801bc36:	4619      	mov	r1, r3
 801bc38:	68f8      	ldr	r0, [r7, #12]
 801bc3a:	f000 fa31 	bl	801c0a0 <USBD_CoreFindEP>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801bc42:	7dbb      	ldrb	r3, [r7, #22]
 801bc44:	2bff      	cmp	r3, #255	; 0xff
 801bc46:	d025      	beq.n	801bc94 <USBD_LL_DataOutStage+0x15c>
 801bc48:	7dbb      	ldrb	r3, [r7, #22]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d122      	bne.n	801bc94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bc54:	b2db      	uxtb	r3, r3
 801bc56:	2b03      	cmp	r3, #3
 801bc58:	d117      	bne.n	801bc8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801bc5a:	7dba      	ldrb	r2, [r7, #22]
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	32ae      	adds	r2, #174	; 0xae
 801bc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc64:	699b      	ldr	r3, [r3, #24]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d00f      	beq.n	801bc8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801bc6a:	7dba      	ldrb	r2, [r7, #22]
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801bc72:	7dba      	ldrb	r2, [r7, #22]
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	32ae      	adds	r2, #174	; 0xae
 801bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc7c:	699b      	ldr	r3, [r3, #24]
 801bc7e:	7afa      	ldrb	r2, [r7, #11]
 801bc80:	4611      	mov	r1, r2
 801bc82:	68f8      	ldr	r0, [r7, #12]
 801bc84:	4798      	blx	r3
 801bc86:	4603      	mov	r3, r0
 801bc88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801bc8a:	7dfb      	ldrb	r3, [r7, #23]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d001      	beq.n	801bc94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801bc90:	7dfb      	ldrb	r3, [r7, #23]
 801bc92:	e000      	b.n	801bc96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801bc94:	2300      	movs	r3, #0
}
 801bc96:	4618      	mov	r0, r3
 801bc98:	3718      	adds	r7, #24
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	bd80      	pop	{r7, pc}

0801bc9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bc9e:	b580      	push	{r7, lr}
 801bca0:	b086      	sub	sp, #24
 801bca2:	af00      	add	r7, sp, #0
 801bca4:	60f8      	str	r0, [r7, #12]
 801bca6:	460b      	mov	r3, r1
 801bca8:	607a      	str	r2, [r7, #4]
 801bcaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801bcac:	7afb      	ldrb	r3, [r7, #11]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d16f      	bne.n	801bd92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	3314      	adds	r3, #20
 801bcb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801bcbe:	2b02      	cmp	r3, #2
 801bcc0:	d15a      	bne.n	801bd78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	689a      	ldr	r2, [r3, #8]
 801bcc6:	693b      	ldr	r3, [r7, #16]
 801bcc8:	68db      	ldr	r3, [r3, #12]
 801bcca:	429a      	cmp	r2, r3
 801bccc:	d914      	bls.n	801bcf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801bcce:	693b      	ldr	r3, [r7, #16]
 801bcd0:	689a      	ldr	r2, [r3, #8]
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	68db      	ldr	r3, [r3, #12]
 801bcd6:	1ad2      	subs	r2, r2, r3
 801bcd8:	693b      	ldr	r3, [r7, #16]
 801bcda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801bcdc:	693b      	ldr	r3, [r7, #16]
 801bcde:	689b      	ldr	r3, [r3, #8]
 801bce0:	461a      	mov	r2, r3
 801bce2:	6879      	ldr	r1, [r7, #4]
 801bce4:	68f8      	ldr	r0, [r7, #12]
 801bce6:	f001 f8ac 	bl	801ce42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bcea:	2300      	movs	r3, #0
 801bcec:	2200      	movs	r2, #0
 801bcee:	2100      	movs	r1, #0
 801bcf0:	68f8      	ldr	r0, [r7, #12]
 801bcf2:	f001 fd87 	bl	801d804 <USBD_LL_PrepareReceive>
 801bcf6:	e03f      	b.n	801bd78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801bcf8:	693b      	ldr	r3, [r7, #16]
 801bcfa:	68da      	ldr	r2, [r3, #12]
 801bcfc:	693b      	ldr	r3, [r7, #16]
 801bcfe:	689b      	ldr	r3, [r3, #8]
 801bd00:	429a      	cmp	r2, r3
 801bd02:	d11c      	bne.n	801bd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801bd04:	693b      	ldr	r3, [r7, #16]
 801bd06:	685a      	ldr	r2, [r3, #4]
 801bd08:	693b      	ldr	r3, [r7, #16]
 801bd0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801bd0c:	429a      	cmp	r2, r3
 801bd0e:	d316      	bcc.n	801bd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801bd10:	693b      	ldr	r3, [r7, #16]
 801bd12:	685a      	ldr	r2, [r3, #4]
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801bd1a:	429a      	cmp	r2, r3
 801bd1c:	d20f      	bcs.n	801bd3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bd1e:	2200      	movs	r2, #0
 801bd20:	2100      	movs	r1, #0
 801bd22:	68f8      	ldr	r0, [r7, #12]
 801bd24:	f001 f88d 	bl	801ce42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bd30:	2300      	movs	r3, #0
 801bd32:	2200      	movs	r2, #0
 801bd34:	2100      	movs	r1, #0
 801bd36:	68f8      	ldr	r0, [r7, #12]
 801bd38:	f001 fd64 	bl	801d804 <USBD_LL_PrepareReceive>
 801bd3c:	e01c      	b.n	801bd78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bd44:	b2db      	uxtb	r3, r3
 801bd46:	2b03      	cmp	r3, #3
 801bd48:	d10f      	bne.n	801bd6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bd50:	68db      	ldr	r3, [r3, #12]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d009      	beq.n	801bd6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	2200      	movs	r2, #0
 801bd5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bd64:	68db      	ldr	r3, [r3, #12]
 801bd66:	68f8      	ldr	r0, [r7, #12]
 801bd68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801bd6a:	2180      	movs	r1, #128	; 0x80
 801bd6c:	68f8      	ldr	r0, [r7, #12]
 801bd6e:	f001 fc9f 	bl	801d6b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801bd72:	68f8      	ldr	r0, [r7, #12]
 801bd74:	f001 f8b7 	bl	801cee6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d03a      	beq.n	801bdf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801bd82:	68f8      	ldr	r0, [r7, #12]
 801bd84:	f7ff fe42 	bl	801ba0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801bd90:	e032      	b.n	801bdf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801bd92:	7afb      	ldrb	r3, [r7, #11]
 801bd94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bd98:	b2db      	uxtb	r3, r3
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	68f8      	ldr	r0, [r7, #12]
 801bd9e:	f000 f97f 	bl	801c0a0 <USBD_CoreFindEP>
 801bda2:	4603      	mov	r3, r0
 801bda4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801bda6:	7dfb      	ldrb	r3, [r7, #23]
 801bda8:	2bff      	cmp	r3, #255	; 0xff
 801bdaa:	d025      	beq.n	801bdf8 <USBD_LL_DataInStage+0x15a>
 801bdac:	7dfb      	ldrb	r3, [r7, #23]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d122      	bne.n	801bdf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bdb8:	b2db      	uxtb	r3, r3
 801bdba:	2b03      	cmp	r3, #3
 801bdbc:	d11c      	bne.n	801bdf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801bdbe:	7dfa      	ldrb	r2, [r7, #23]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	32ae      	adds	r2, #174	; 0xae
 801bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdc8:	695b      	ldr	r3, [r3, #20]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d014      	beq.n	801bdf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801bdce:	7dfa      	ldrb	r2, [r7, #23]
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801bdd6:	7dfa      	ldrb	r2, [r7, #23]
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	32ae      	adds	r2, #174	; 0xae
 801bddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bde0:	695b      	ldr	r3, [r3, #20]
 801bde2:	7afa      	ldrb	r2, [r7, #11]
 801bde4:	4611      	mov	r1, r2
 801bde6:	68f8      	ldr	r0, [r7, #12]
 801bde8:	4798      	blx	r3
 801bdea:	4603      	mov	r3, r0
 801bdec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801bdee:	7dbb      	ldrb	r3, [r7, #22]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d001      	beq.n	801bdf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801bdf4:	7dbb      	ldrb	r3, [r7, #22]
 801bdf6:	e000      	b.n	801bdfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801bdf8:	2300      	movs	r3, #0
}
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	3718      	adds	r7, #24
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd80      	pop	{r7, pc}

0801be02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801be02:	b580      	push	{r7, lr}
 801be04:	b084      	sub	sp, #16
 801be06:	af00      	add	r7, sp, #0
 801be08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801be0a:	2300      	movs	r3, #0
 801be0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	2201      	movs	r2, #1
 801be12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	2200      	movs	r2, #0
 801be1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2200      	movs	r2, #0
 801be22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2200      	movs	r2, #0
 801be28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2200      	movs	r2, #0
 801be30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d014      	beq.n	801be68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be44:	685b      	ldr	r3, [r3, #4]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d00e      	beq.n	801be68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be50:	685b      	ldr	r3, [r3, #4]
 801be52:	687a      	ldr	r2, [r7, #4]
 801be54:	6852      	ldr	r2, [r2, #4]
 801be56:	b2d2      	uxtb	r2, r2
 801be58:	4611      	mov	r1, r2
 801be5a:	6878      	ldr	r0, [r7, #4]
 801be5c:	4798      	blx	r3
 801be5e:	4603      	mov	r3, r0
 801be60:	2b00      	cmp	r3, #0
 801be62:	d001      	beq.n	801be68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801be64:	2303      	movs	r3, #3
 801be66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801be68:	2340      	movs	r3, #64	; 0x40
 801be6a:	2200      	movs	r2, #0
 801be6c:	2100      	movs	r1, #0
 801be6e:	6878      	ldr	r0, [r7, #4]
 801be70:	f001 fbd9 	bl	801d626 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2201      	movs	r2, #1
 801be78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	2240      	movs	r2, #64	; 0x40
 801be80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801be84:	2340      	movs	r3, #64	; 0x40
 801be86:	2200      	movs	r2, #0
 801be88:	2180      	movs	r1, #128	; 0x80
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f001 fbcb 	bl	801d626 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2201      	movs	r2, #1
 801be94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	2240      	movs	r2, #64	; 0x40
 801be9a:	621a      	str	r2, [r3, #32]

  return ret;
 801be9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801be9e:	4618      	mov	r0, r3
 801bea0:	3710      	adds	r7, #16
 801bea2:	46bd      	mov	sp, r7
 801bea4:	bd80      	pop	{r7, pc}

0801bea6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bea6:	b480      	push	{r7}
 801bea8:	b083      	sub	sp, #12
 801beaa:	af00      	add	r7, sp, #0
 801beac:	6078      	str	r0, [r7, #4]
 801beae:	460b      	mov	r3, r1
 801beb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	78fa      	ldrb	r2, [r7, #3]
 801beb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801beb8:	2300      	movs	r3, #0
}
 801beba:	4618      	mov	r0, r3
 801bebc:	370c      	adds	r7, #12
 801bebe:	46bd      	mov	sp, r7
 801bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec4:	4770      	bx	lr

0801bec6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bec6:	b480      	push	{r7}
 801bec8:	b083      	sub	sp, #12
 801beca:	af00      	add	r7, sp, #0
 801becc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bed4:	b2da      	uxtb	r2, r3
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	2204      	movs	r2, #4
 801bee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801bee4:	2300      	movs	r3, #0
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	370c      	adds	r7, #12
 801beea:	46bd      	mov	sp, r7
 801beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef0:	4770      	bx	lr

0801bef2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bef2:	b480      	push	{r7}
 801bef4:	b083      	sub	sp, #12
 801bef6:	af00      	add	r7, sp, #0
 801bef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf00:	b2db      	uxtb	r3, r3
 801bf02:	2b04      	cmp	r3, #4
 801bf04:	d106      	bne.n	801bf14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801bf0c:	b2da      	uxtb	r2, r3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801bf14:	2300      	movs	r3, #0
}
 801bf16:	4618      	mov	r0, r3
 801bf18:	370c      	adds	r7, #12
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf20:	4770      	bx	lr

0801bf22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bf22:	b580      	push	{r7, lr}
 801bf24:	b082      	sub	sp, #8
 801bf26:	af00      	add	r7, sp, #0
 801bf28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf30:	b2db      	uxtb	r3, r3
 801bf32:	2b03      	cmp	r3, #3
 801bf34:	d110      	bne.n	801bf58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d00b      	beq.n	801bf58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf46:	69db      	ldr	r3, [r3, #28]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d005      	beq.n	801bf58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf52:	69db      	ldr	r3, [r3, #28]
 801bf54:	6878      	ldr	r0, [r7, #4]
 801bf56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801bf58:	2300      	movs	r3, #0
}
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	3708      	adds	r7, #8
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}

0801bf62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801bf62:	b580      	push	{r7, lr}
 801bf64:	b082      	sub	sp, #8
 801bf66:	af00      	add	r7, sp, #0
 801bf68:	6078      	str	r0, [r7, #4]
 801bf6a:	460b      	mov	r3, r1
 801bf6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	32ae      	adds	r2, #174	; 0xae
 801bf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d101      	bne.n	801bf84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801bf80:	2303      	movs	r3, #3
 801bf82:	e01c      	b.n	801bfbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf8a:	b2db      	uxtb	r3, r3
 801bf8c:	2b03      	cmp	r3, #3
 801bf8e:	d115      	bne.n	801bfbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	32ae      	adds	r2, #174	; 0xae
 801bf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf9e:	6a1b      	ldr	r3, [r3, #32]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d00b      	beq.n	801bfbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	32ae      	adds	r2, #174	; 0xae
 801bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfb2:	6a1b      	ldr	r3, [r3, #32]
 801bfb4:	78fa      	ldrb	r2, [r7, #3]
 801bfb6:	4611      	mov	r1, r2
 801bfb8:	6878      	ldr	r0, [r7, #4]
 801bfba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bfbc:	2300      	movs	r3, #0
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	3708      	adds	r7, #8
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	bd80      	pop	{r7, pc}

0801bfc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801bfc6:	b580      	push	{r7, lr}
 801bfc8:	b082      	sub	sp, #8
 801bfca:	af00      	add	r7, sp, #0
 801bfcc:	6078      	str	r0, [r7, #4]
 801bfce:	460b      	mov	r3, r1
 801bfd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	32ae      	adds	r2, #174	; 0xae
 801bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d101      	bne.n	801bfe8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801bfe4:	2303      	movs	r3, #3
 801bfe6:	e01c      	b.n	801c022 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bfee:	b2db      	uxtb	r3, r3
 801bff0:	2b03      	cmp	r3, #3
 801bff2:	d115      	bne.n	801c020 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	32ae      	adds	r2, #174	; 0xae
 801bffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c004:	2b00      	cmp	r3, #0
 801c006:	d00b      	beq.n	801c020 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	32ae      	adds	r2, #174	; 0xae
 801c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c018:	78fa      	ldrb	r2, [r7, #3]
 801c01a:	4611      	mov	r1, r2
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c020:	2300      	movs	r3, #0
}
 801c022:	4618      	mov	r0, r3
 801c024:	3708      	adds	r7, #8
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}

0801c02a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801c02a:	b480      	push	{r7}
 801c02c:	b083      	sub	sp, #12
 801c02e:	af00      	add	r7, sp, #0
 801c030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c032:	2300      	movs	r3, #0
}
 801c034:	4618      	mov	r0, r3
 801c036:	370c      	adds	r7, #12
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr

0801c040 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801c048:	2300      	movs	r3, #0
 801c04a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	2201      	movs	r2, #1
 801c050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d00e      	beq.n	801c07c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	687a      	ldr	r2, [r7, #4]
 801c068:	6852      	ldr	r2, [r2, #4]
 801c06a:	b2d2      	uxtb	r2, r2
 801c06c:	4611      	mov	r1, r2
 801c06e:	6878      	ldr	r0, [r7, #4]
 801c070:	4798      	blx	r3
 801c072:	4603      	mov	r3, r0
 801c074:	2b00      	cmp	r3, #0
 801c076:	d001      	beq.n	801c07c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801c078:	2303      	movs	r3, #3
 801c07a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801c07c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c07e:	4618      	mov	r0, r3
 801c080:	3710      	adds	r7, #16
 801c082:	46bd      	mov	sp, r7
 801c084:	bd80      	pop	{r7, pc}

0801c086 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801c086:	b480      	push	{r7}
 801c088:	b083      	sub	sp, #12
 801c08a:	af00      	add	r7, sp, #0
 801c08c:	6078      	str	r0, [r7, #4]
 801c08e:	460b      	mov	r3, r1
 801c090:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801c092:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801c094:	4618      	mov	r0, r3
 801c096:	370c      	adds	r7, #12
 801c098:	46bd      	mov	sp, r7
 801c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09e:	4770      	bx	lr

0801c0a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801c0a0:	b480      	push	{r7}
 801c0a2:	b083      	sub	sp, #12
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	460b      	mov	r3, r1
 801c0aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801c0ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	370c      	adds	r7, #12
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0b8:	4770      	bx	lr

0801c0ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801c0ba:	b580      	push	{r7, lr}
 801c0bc:	b086      	sub	sp, #24
 801c0be:	af00      	add	r7, sp, #0
 801c0c0:	6078      	str	r0, [r7, #4]
 801c0c2:	460b      	mov	r3, r1
 801c0c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	885b      	ldrh	r3, [r3, #2]
 801c0d6:	b29a      	uxth	r2, r3
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	b29b      	uxth	r3, r3
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d920      	bls.n	801c124 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	781b      	ldrb	r3, [r3, #0]
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801c0ea:	e013      	b.n	801c114 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801c0ec:	f107 030a 	add.w	r3, r7, #10
 801c0f0:	4619      	mov	r1, r3
 801c0f2:	6978      	ldr	r0, [r7, #20]
 801c0f4:	f000 f81b 	bl	801c12e <USBD_GetNextDesc>
 801c0f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801c0fa:	697b      	ldr	r3, [r7, #20]
 801c0fc:	785b      	ldrb	r3, [r3, #1]
 801c0fe:	2b05      	cmp	r3, #5
 801c100:	d108      	bne.n	801c114 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801c106:	693b      	ldr	r3, [r7, #16]
 801c108:	789b      	ldrb	r3, [r3, #2]
 801c10a:	78fa      	ldrb	r2, [r7, #3]
 801c10c:	429a      	cmp	r2, r3
 801c10e:	d008      	beq.n	801c122 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801c110:	2300      	movs	r3, #0
 801c112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	885b      	ldrh	r3, [r3, #2]
 801c118:	b29a      	uxth	r2, r3
 801c11a:	897b      	ldrh	r3, [r7, #10]
 801c11c:	429a      	cmp	r2, r3
 801c11e:	d8e5      	bhi.n	801c0ec <USBD_GetEpDesc+0x32>
 801c120:	e000      	b.n	801c124 <USBD_GetEpDesc+0x6a>
          break;
 801c122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801c124:	693b      	ldr	r3, [r7, #16]
}
 801c126:	4618      	mov	r0, r3
 801c128:	3718      	adds	r7, #24
 801c12a:	46bd      	mov	sp, r7
 801c12c:	bd80      	pop	{r7, pc}

0801c12e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801c12e:	b480      	push	{r7}
 801c130:	b085      	sub	sp, #20
 801c132:	af00      	add	r7, sp, #0
 801c134:	6078      	str	r0, [r7, #4]
 801c136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	881a      	ldrh	r2, [r3, #0]
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	781b      	ldrb	r3, [r3, #0]
 801c144:	b29b      	uxth	r3, r3
 801c146:	4413      	add	r3, r2
 801c148:	b29a      	uxth	r2, r3
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	781b      	ldrb	r3, [r3, #0]
 801c152:	461a      	mov	r2, r3
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	4413      	add	r3, r2
 801c158:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801c15a:	68fb      	ldr	r3, [r7, #12]
}
 801c15c:	4618      	mov	r0, r3
 801c15e:	3714      	adds	r7, #20
 801c160:	46bd      	mov	sp, r7
 801c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c166:	4770      	bx	lr

0801c168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801c168:	b480      	push	{r7}
 801c16a:	b087      	sub	sp, #28
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801c174:	697b      	ldr	r3, [r7, #20]
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801c17a:	697b      	ldr	r3, [r7, #20]
 801c17c:	3301      	adds	r3, #1
 801c17e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801c180:	697b      	ldr	r3, [r7, #20]
 801c182:	781b      	ldrb	r3, [r3, #0]
 801c184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801c186:	8a3b      	ldrh	r3, [r7, #16]
 801c188:	021b      	lsls	r3, r3, #8
 801c18a:	b21a      	sxth	r2, r3
 801c18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c190:	4313      	orrs	r3, r2
 801c192:	b21b      	sxth	r3, r3
 801c194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801c196:	89fb      	ldrh	r3, [r7, #14]
}
 801c198:	4618      	mov	r0, r3
 801c19a:	371c      	adds	r7, #28
 801c19c:	46bd      	mov	sp, r7
 801c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a2:	4770      	bx	lr

0801c1a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b084      	sub	sp, #16
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
 801c1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	781b      	ldrb	r3, [r3, #0]
 801c1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c1ba:	2b40      	cmp	r3, #64	; 0x40
 801c1bc:	d005      	beq.n	801c1ca <USBD_StdDevReq+0x26>
 801c1be:	2b40      	cmp	r3, #64	; 0x40
 801c1c0:	d857      	bhi.n	801c272 <USBD_StdDevReq+0xce>
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d00f      	beq.n	801c1e6 <USBD_StdDevReq+0x42>
 801c1c6:	2b20      	cmp	r3, #32
 801c1c8:	d153      	bne.n	801c272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	32ae      	adds	r2, #174	; 0xae
 801c1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	6839      	ldr	r1, [r7, #0]
 801c1dc:	6878      	ldr	r0, [r7, #4]
 801c1de:	4798      	blx	r3
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	73fb      	strb	r3, [r7, #15]
      break;
 801c1e4:	e04a      	b.n	801c27c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	785b      	ldrb	r3, [r3, #1]
 801c1ea:	2b09      	cmp	r3, #9
 801c1ec:	d83b      	bhi.n	801c266 <USBD_StdDevReq+0xc2>
 801c1ee:	a201      	add	r2, pc, #4	; (adr r2, 801c1f4 <USBD_StdDevReq+0x50>)
 801c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1f4:	0801c249 	.word	0x0801c249
 801c1f8:	0801c25d 	.word	0x0801c25d
 801c1fc:	0801c267 	.word	0x0801c267
 801c200:	0801c253 	.word	0x0801c253
 801c204:	0801c267 	.word	0x0801c267
 801c208:	0801c227 	.word	0x0801c227
 801c20c:	0801c21d 	.word	0x0801c21d
 801c210:	0801c267 	.word	0x0801c267
 801c214:	0801c23f 	.word	0x0801c23f
 801c218:	0801c231 	.word	0x0801c231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c21c:	6839      	ldr	r1, [r7, #0]
 801c21e:	6878      	ldr	r0, [r7, #4]
 801c220:	f000 fa3c 	bl	801c69c <USBD_GetDescriptor>
          break;
 801c224:	e024      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c226:	6839      	ldr	r1, [r7, #0]
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f000 fba1 	bl	801c970 <USBD_SetAddress>
          break;
 801c22e:	e01f      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801c230:	6839      	ldr	r1, [r7, #0]
 801c232:	6878      	ldr	r0, [r7, #4]
 801c234:	f000 fbe0 	bl	801c9f8 <USBD_SetConfig>
 801c238:	4603      	mov	r3, r0
 801c23a:	73fb      	strb	r3, [r7, #15]
          break;
 801c23c:	e018      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c23e:	6839      	ldr	r1, [r7, #0]
 801c240:	6878      	ldr	r0, [r7, #4]
 801c242:	f000 fc83 	bl	801cb4c <USBD_GetConfig>
          break;
 801c246:	e013      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c248:	6839      	ldr	r1, [r7, #0]
 801c24a:	6878      	ldr	r0, [r7, #4]
 801c24c:	f000 fcb4 	bl	801cbb8 <USBD_GetStatus>
          break;
 801c250:	e00e      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c252:	6839      	ldr	r1, [r7, #0]
 801c254:	6878      	ldr	r0, [r7, #4]
 801c256:	f000 fce3 	bl	801cc20 <USBD_SetFeature>
          break;
 801c25a:	e009      	b.n	801c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c25c:	6839      	ldr	r1, [r7, #0]
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 fd07 	bl	801cc72 <USBD_ClrFeature>
          break;
 801c264:	e004      	b.n	801c270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801c266:	6839      	ldr	r1, [r7, #0]
 801c268:	6878      	ldr	r0, [r7, #4]
 801c26a:	f000 fd5e 	bl	801cd2a <USBD_CtlError>
          break;
 801c26e:	bf00      	nop
      }
      break;
 801c270:	e004      	b.n	801c27c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801c272:	6839      	ldr	r1, [r7, #0]
 801c274:	6878      	ldr	r0, [r7, #4]
 801c276:	f000 fd58 	bl	801cd2a <USBD_CtlError>
      break;
 801c27a:	bf00      	nop
  }

  return ret;
 801c27c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c27e:	4618      	mov	r0, r3
 801c280:	3710      	adds	r7, #16
 801c282:	46bd      	mov	sp, r7
 801c284:	bd80      	pop	{r7, pc}
 801c286:	bf00      	nop

0801c288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b084      	sub	sp, #16
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
 801c290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c292:	2300      	movs	r3, #0
 801c294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	781b      	ldrb	r3, [r3, #0]
 801c29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c29e:	2b40      	cmp	r3, #64	; 0x40
 801c2a0:	d005      	beq.n	801c2ae <USBD_StdItfReq+0x26>
 801c2a2:	2b40      	cmp	r3, #64	; 0x40
 801c2a4:	d852      	bhi.n	801c34c <USBD_StdItfReq+0xc4>
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d001      	beq.n	801c2ae <USBD_StdItfReq+0x26>
 801c2aa:	2b20      	cmp	r3, #32
 801c2ac:	d14e      	bne.n	801c34c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c2b4:	b2db      	uxtb	r3, r3
 801c2b6:	3b01      	subs	r3, #1
 801c2b8:	2b02      	cmp	r3, #2
 801c2ba:	d840      	bhi.n	801c33e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	889b      	ldrh	r3, [r3, #4]
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	2b01      	cmp	r3, #1
 801c2c4:	d836      	bhi.n	801c334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801c2c6:	683b      	ldr	r3, [r7, #0]
 801c2c8:	889b      	ldrh	r3, [r3, #4]
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	4619      	mov	r1, r3
 801c2ce:	6878      	ldr	r0, [r7, #4]
 801c2d0:	f7ff fed9 	bl	801c086 <USBD_CoreFindIF>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c2d8:	7bbb      	ldrb	r3, [r7, #14]
 801c2da:	2bff      	cmp	r3, #255	; 0xff
 801c2dc:	d01d      	beq.n	801c31a <USBD_StdItfReq+0x92>
 801c2de:	7bbb      	ldrb	r3, [r7, #14]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d11a      	bne.n	801c31a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801c2e4:	7bba      	ldrb	r2, [r7, #14]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	32ae      	adds	r2, #174	; 0xae
 801c2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c2ee:	689b      	ldr	r3, [r3, #8]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d00f      	beq.n	801c314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801c2f4:	7bba      	ldrb	r2, [r7, #14]
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801c2fc:	7bba      	ldrb	r2, [r7, #14]
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	32ae      	adds	r2, #174	; 0xae
 801c302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c306:	689b      	ldr	r3, [r3, #8]
 801c308:	6839      	ldr	r1, [r7, #0]
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	4798      	blx	r3
 801c30e:	4603      	mov	r3, r0
 801c310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801c312:	e004      	b.n	801c31e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801c314:	2303      	movs	r3, #3
 801c316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801c318:	e001      	b.n	801c31e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801c31a:	2303      	movs	r3, #3
 801c31c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c31e:	683b      	ldr	r3, [r7, #0]
 801c320:	88db      	ldrh	r3, [r3, #6]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d110      	bne.n	801c348 <USBD_StdItfReq+0xc0>
 801c326:	7bfb      	ldrb	r3, [r7, #15]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d10d      	bne.n	801c348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801c32c:	6878      	ldr	r0, [r7, #4]
 801c32e:	f000 fdc7 	bl	801cec0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c332:	e009      	b.n	801c348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801c334:	6839      	ldr	r1, [r7, #0]
 801c336:	6878      	ldr	r0, [r7, #4]
 801c338:	f000 fcf7 	bl	801cd2a <USBD_CtlError>
          break;
 801c33c:	e004      	b.n	801c348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c33e:	6839      	ldr	r1, [r7, #0]
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f000 fcf2 	bl	801cd2a <USBD_CtlError>
          break;
 801c346:	e000      	b.n	801c34a <USBD_StdItfReq+0xc2>
          break;
 801c348:	bf00      	nop
      }
      break;
 801c34a:	e004      	b.n	801c356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801c34c:	6839      	ldr	r1, [r7, #0]
 801c34e:	6878      	ldr	r0, [r7, #4]
 801c350:	f000 fceb 	bl	801cd2a <USBD_CtlError>
      break;
 801c354:	bf00      	nop
  }

  return ret;
 801c356:	7bfb      	ldrb	r3, [r7, #15]
}
 801c358:	4618      	mov	r0, r3
 801c35a:	3710      	adds	r7, #16
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bd80      	pop	{r7, pc}

0801c360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b084      	sub	sp, #16
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
 801c368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801c36a:	2300      	movs	r3, #0
 801c36c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	889b      	ldrh	r3, [r3, #4]
 801c372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	781b      	ldrb	r3, [r3, #0]
 801c378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c37c:	2b40      	cmp	r3, #64	; 0x40
 801c37e:	d007      	beq.n	801c390 <USBD_StdEPReq+0x30>
 801c380:	2b40      	cmp	r3, #64	; 0x40
 801c382:	f200 817f 	bhi.w	801c684 <USBD_StdEPReq+0x324>
 801c386:	2b00      	cmp	r3, #0
 801c388:	d02a      	beq.n	801c3e0 <USBD_StdEPReq+0x80>
 801c38a:	2b20      	cmp	r3, #32
 801c38c:	f040 817a 	bne.w	801c684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801c390:	7bbb      	ldrb	r3, [r7, #14]
 801c392:	4619      	mov	r1, r3
 801c394:	6878      	ldr	r0, [r7, #4]
 801c396:	f7ff fe83 	bl	801c0a0 <USBD_CoreFindEP>
 801c39a:	4603      	mov	r3, r0
 801c39c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c39e:	7b7b      	ldrb	r3, [r7, #13]
 801c3a0:	2bff      	cmp	r3, #255	; 0xff
 801c3a2:	f000 8174 	beq.w	801c68e <USBD_StdEPReq+0x32e>
 801c3a6:	7b7b      	ldrb	r3, [r7, #13]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	f040 8170 	bne.w	801c68e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801c3ae:	7b7a      	ldrb	r2, [r7, #13]
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801c3b6:	7b7a      	ldrb	r2, [r7, #13]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	32ae      	adds	r2, #174	; 0xae
 801c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3c0:	689b      	ldr	r3, [r3, #8]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	f000 8163 	beq.w	801c68e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801c3c8:	7b7a      	ldrb	r2, [r7, #13]
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	32ae      	adds	r2, #174	; 0xae
 801c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3d2:	689b      	ldr	r3, [r3, #8]
 801c3d4:	6839      	ldr	r1, [r7, #0]
 801c3d6:	6878      	ldr	r0, [r7, #4]
 801c3d8:	4798      	blx	r3
 801c3da:	4603      	mov	r3, r0
 801c3dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801c3de:	e156      	b.n	801c68e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c3e0:	683b      	ldr	r3, [r7, #0]
 801c3e2:	785b      	ldrb	r3, [r3, #1]
 801c3e4:	2b03      	cmp	r3, #3
 801c3e6:	d008      	beq.n	801c3fa <USBD_StdEPReq+0x9a>
 801c3e8:	2b03      	cmp	r3, #3
 801c3ea:	f300 8145 	bgt.w	801c678 <USBD_StdEPReq+0x318>
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	f000 809b 	beq.w	801c52a <USBD_StdEPReq+0x1ca>
 801c3f4:	2b01      	cmp	r3, #1
 801c3f6:	d03c      	beq.n	801c472 <USBD_StdEPReq+0x112>
 801c3f8:	e13e      	b.n	801c678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c400:	b2db      	uxtb	r3, r3
 801c402:	2b02      	cmp	r3, #2
 801c404:	d002      	beq.n	801c40c <USBD_StdEPReq+0xac>
 801c406:	2b03      	cmp	r3, #3
 801c408:	d016      	beq.n	801c438 <USBD_StdEPReq+0xd8>
 801c40a:	e02c      	b.n	801c466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c40c:	7bbb      	ldrb	r3, [r7, #14]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d00d      	beq.n	801c42e <USBD_StdEPReq+0xce>
 801c412:	7bbb      	ldrb	r3, [r7, #14]
 801c414:	2b80      	cmp	r3, #128	; 0x80
 801c416:	d00a      	beq.n	801c42e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801c418:	7bbb      	ldrb	r3, [r7, #14]
 801c41a:	4619      	mov	r1, r3
 801c41c:	6878      	ldr	r0, [r7, #4]
 801c41e:	f001 f947 	bl	801d6b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801c422:	2180      	movs	r1, #128	; 0x80
 801c424:	6878      	ldr	r0, [r7, #4]
 801c426:	f001 f943 	bl	801d6b0 <USBD_LL_StallEP>
 801c42a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c42c:	e020      	b.n	801c470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801c42e:	6839      	ldr	r1, [r7, #0]
 801c430:	6878      	ldr	r0, [r7, #4]
 801c432:	f000 fc7a 	bl	801cd2a <USBD_CtlError>
              break;
 801c436:	e01b      	b.n	801c470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c438:	683b      	ldr	r3, [r7, #0]
 801c43a:	885b      	ldrh	r3, [r3, #2]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d10e      	bne.n	801c45e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c440:	7bbb      	ldrb	r3, [r7, #14]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d00b      	beq.n	801c45e <USBD_StdEPReq+0xfe>
 801c446:	7bbb      	ldrb	r3, [r7, #14]
 801c448:	2b80      	cmp	r3, #128	; 0x80
 801c44a:	d008      	beq.n	801c45e <USBD_StdEPReq+0xfe>
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	88db      	ldrh	r3, [r3, #6]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d104      	bne.n	801c45e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801c454:	7bbb      	ldrb	r3, [r7, #14]
 801c456:	4619      	mov	r1, r3
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f001 f929 	bl	801d6b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801c45e:	6878      	ldr	r0, [r7, #4]
 801c460:	f000 fd2e 	bl	801cec0 <USBD_CtlSendStatus>

              break;
 801c464:	e004      	b.n	801c470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801c466:	6839      	ldr	r1, [r7, #0]
 801c468:	6878      	ldr	r0, [r7, #4]
 801c46a:	f000 fc5e 	bl	801cd2a <USBD_CtlError>
              break;
 801c46e:	bf00      	nop
          }
          break;
 801c470:	e107      	b.n	801c682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c478:	b2db      	uxtb	r3, r3
 801c47a:	2b02      	cmp	r3, #2
 801c47c:	d002      	beq.n	801c484 <USBD_StdEPReq+0x124>
 801c47e:	2b03      	cmp	r3, #3
 801c480:	d016      	beq.n	801c4b0 <USBD_StdEPReq+0x150>
 801c482:	e04b      	b.n	801c51c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c484:	7bbb      	ldrb	r3, [r7, #14]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d00d      	beq.n	801c4a6 <USBD_StdEPReq+0x146>
 801c48a:	7bbb      	ldrb	r3, [r7, #14]
 801c48c:	2b80      	cmp	r3, #128	; 0x80
 801c48e:	d00a      	beq.n	801c4a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801c490:	7bbb      	ldrb	r3, [r7, #14]
 801c492:	4619      	mov	r1, r3
 801c494:	6878      	ldr	r0, [r7, #4]
 801c496:	f001 f90b 	bl	801d6b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801c49a:	2180      	movs	r1, #128	; 0x80
 801c49c:	6878      	ldr	r0, [r7, #4]
 801c49e:	f001 f907 	bl	801d6b0 <USBD_LL_StallEP>
 801c4a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c4a4:	e040      	b.n	801c528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801c4a6:	6839      	ldr	r1, [r7, #0]
 801c4a8:	6878      	ldr	r0, [r7, #4]
 801c4aa:	f000 fc3e 	bl	801cd2a <USBD_CtlError>
              break;
 801c4ae:	e03b      	b.n	801c528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	885b      	ldrh	r3, [r3, #2]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d136      	bne.n	801c526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c4b8:	7bbb      	ldrb	r3, [r7, #14]
 801c4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d004      	beq.n	801c4cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801c4c2:	7bbb      	ldrb	r3, [r7, #14]
 801c4c4:	4619      	mov	r1, r3
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f001 f911 	bl	801d6ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801c4cc:	6878      	ldr	r0, [r7, #4]
 801c4ce:	f000 fcf7 	bl	801cec0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801c4d2:	7bbb      	ldrb	r3, [r7, #14]
 801c4d4:	4619      	mov	r1, r3
 801c4d6:	6878      	ldr	r0, [r7, #4]
 801c4d8:	f7ff fde2 	bl	801c0a0 <USBD_CoreFindEP>
 801c4dc:	4603      	mov	r3, r0
 801c4de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c4e0:	7b7b      	ldrb	r3, [r7, #13]
 801c4e2:	2bff      	cmp	r3, #255	; 0xff
 801c4e4:	d01f      	beq.n	801c526 <USBD_StdEPReq+0x1c6>
 801c4e6:	7b7b      	ldrb	r3, [r7, #13]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d11c      	bne.n	801c526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801c4ec:	7b7a      	ldrb	r2, [r7, #13]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801c4f4:	7b7a      	ldrb	r2, [r7, #13]
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	32ae      	adds	r2, #174	; 0xae
 801c4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c4fe:	689b      	ldr	r3, [r3, #8]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d010      	beq.n	801c526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801c504:	7b7a      	ldrb	r2, [r7, #13]
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	32ae      	adds	r2, #174	; 0xae
 801c50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c50e:	689b      	ldr	r3, [r3, #8]
 801c510:	6839      	ldr	r1, [r7, #0]
 801c512:	6878      	ldr	r0, [r7, #4]
 801c514:	4798      	blx	r3
 801c516:	4603      	mov	r3, r0
 801c518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801c51a:	e004      	b.n	801c526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801c51c:	6839      	ldr	r1, [r7, #0]
 801c51e:	6878      	ldr	r0, [r7, #4]
 801c520:	f000 fc03 	bl	801cd2a <USBD_CtlError>
              break;
 801c524:	e000      	b.n	801c528 <USBD_StdEPReq+0x1c8>
              break;
 801c526:	bf00      	nop
          }
          break;
 801c528:	e0ab      	b.n	801c682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c530:	b2db      	uxtb	r3, r3
 801c532:	2b02      	cmp	r3, #2
 801c534:	d002      	beq.n	801c53c <USBD_StdEPReq+0x1dc>
 801c536:	2b03      	cmp	r3, #3
 801c538:	d032      	beq.n	801c5a0 <USBD_StdEPReq+0x240>
 801c53a:	e097      	b.n	801c66c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c53c:	7bbb      	ldrb	r3, [r7, #14]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d007      	beq.n	801c552 <USBD_StdEPReq+0x1f2>
 801c542:	7bbb      	ldrb	r3, [r7, #14]
 801c544:	2b80      	cmp	r3, #128	; 0x80
 801c546:	d004      	beq.n	801c552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801c548:	6839      	ldr	r1, [r7, #0]
 801c54a:	6878      	ldr	r0, [r7, #4]
 801c54c:	f000 fbed 	bl	801cd2a <USBD_CtlError>
                break;
 801c550:	e091      	b.n	801c676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c556:	2b00      	cmp	r3, #0
 801c558:	da0b      	bge.n	801c572 <USBD_StdEPReq+0x212>
 801c55a:	7bbb      	ldrb	r3, [r7, #14]
 801c55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c560:	4613      	mov	r3, r2
 801c562:	009b      	lsls	r3, r3, #2
 801c564:	4413      	add	r3, r2
 801c566:	009b      	lsls	r3, r3, #2
 801c568:	3310      	adds	r3, #16
 801c56a:	687a      	ldr	r2, [r7, #4]
 801c56c:	4413      	add	r3, r2
 801c56e:	3304      	adds	r3, #4
 801c570:	e00b      	b.n	801c58a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c572:	7bbb      	ldrb	r3, [r7, #14]
 801c574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c578:	4613      	mov	r3, r2
 801c57a:	009b      	lsls	r3, r3, #2
 801c57c:	4413      	add	r3, r2
 801c57e:	009b      	lsls	r3, r3, #2
 801c580:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801c584:	687a      	ldr	r2, [r7, #4]
 801c586:	4413      	add	r3, r2
 801c588:	3304      	adds	r3, #4
 801c58a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c58c:	68bb      	ldr	r3, [r7, #8]
 801c58e:	2200      	movs	r2, #0
 801c590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801c592:	68bb      	ldr	r3, [r7, #8]
 801c594:	2202      	movs	r2, #2
 801c596:	4619      	mov	r1, r3
 801c598:	6878      	ldr	r0, [r7, #4]
 801c59a:	f000 fc37 	bl	801ce0c <USBD_CtlSendData>
              break;
 801c59e:	e06a      	b.n	801c676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	da11      	bge.n	801c5cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c5a8:	7bbb      	ldrb	r3, [r7, #14]
 801c5aa:	f003 020f 	and.w	r2, r3, #15
 801c5ae:	6879      	ldr	r1, [r7, #4]
 801c5b0:	4613      	mov	r3, r2
 801c5b2:	009b      	lsls	r3, r3, #2
 801c5b4:	4413      	add	r3, r2
 801c5b6:	009b      	lsls	r3, r3, #2
 801c5b8:	440b      	add	r3, r1
 801c5ba:	3324      	adds	r3, #36	; 0x24
 801c5bc:	881b      	ldrh	r3, [r3, #0]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d117      	bne.n	801c5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801c5c2:	6839      	ldr	r1, [r7, #0]
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f000 fbb0 	bl	801cd2a <USBD_CtlError>
                  break;
 801c5ca:	e054      	b.n	801c676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c5cc:	7bbb      	ldrb	r3, [r7, #14]
 801c5ce:	f003 020f 	and.w	r2, r3, #15
 801c5d2:	6879      	ldr	r1, [r7, #4]
 801c5d4:	4613      	mov	r3, r2
 801c5d6:	009b      	lsls	r3, r3, #2
 801c5d8:	4413      	add	r3, r2
 801c5da:	009b      	lsls	r3, r3, #2
 801c5dc:	440b      	add	r3, r1
 801c5de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c5e2:	881b      	ldrh	r3, [r3, #0]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d104      	bne.n	801c5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801c5e8:	6839      	ldr	r1, [r7, #0]
 801c5ea:	6878      	ldr	r0, [r7, #4]
 801c5ec:	f000 fb9d 	bl	801cd2a <USBD_CtlError>
                  break;
 801c5f0:	e041      	b.n	801c676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	da0b      	bge.n	801c612 <USBD_StdEPReq+0x2b2>
 801c5fa:	7bbb      	ldrb	r3, [r7, #14]
 801c5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c600:	4613      	mov	r3, r2
 801c602:	009b      	lsls	r3, r3, #2
 801c604:	4413      	add	r3, r2
 801c606:	009b      	lsls	r3, r3, #2
 801c608:	3310      	adds	r3, #16
 801c60a:	687a      	ldr	r2, [r7, #4]
 801c60c:	4413      	add	r3, r2
 801c60e:	3304      	adds	r3, #4
 801c610:	e00b      	b.n	801c62a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c612:	7bbb      	ldrb	r3, [r7, #14]
 801c614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c618:	4613      	mov	r3, r2
 801c61a:	009b      	lsls	r3, r3, #2
 801c61c:	4413      	add	r3, r2
 801c61e:	009b      	lsls	r3, r3, #2
 801c620:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801c624:	687a      	ldr	r2, [r7, #4]
 801c626:	4413      	add	r3, r2
 801c628:	3304      	adds	r3, #4
 801c62a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c62c:	7bbb      	ldrb	r3, [r7, #14]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d002      	beq.n	801c638 <USBD_StdEPReq+0x2d8>
 801c632:	7bbb      	ldrb	r3, [r7, #14]
 801c634:	2b80      	cmp	r3, #128	; 0x80
 801c636:	d103      	bne.n	801c640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	2200      	movs	r2, #0
 801c63c:	601a      	str	r2, [r3, #0]
 801c63e:	e00e      	b.n	801c65e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801c640:	7bbb      	ldrb	r3, [r7, #14]
 801c642:	4619      	mov	r1, r3
 801c644:	6878      	ldr	r0, [r7, #4]
 801c646:	f001 f871 	bl	801d72c <USBD_LL_IsStallEP>
 801c64a:	4603      	mov	r3, r0
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d003      	beq.n	801c658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	2201      	movs	r2, #1
 801c654:	601a      	str	r2, [r3, #0]
 801c656:	e002      	b.n	801c65e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801c658:	68bb      	ldr	r3, [r7, #8]
 801c65a:	2200      	movs	r2, #0
 801c65c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801c65e:	68bb      	ldr	r3, [r7, #8]
 801c660:	2202      	movs	r2, #2
 801c662:	4619      	mov	r1, r3
 801c664:	6878      	ldr	r0, [r7, #4]
 801c666:	f000 fbd1 	bl	801ce0c <USBD_CtlSendData>
              break;
 801c66a:	e004      	b.n	801c676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801c66c:	6839      	ldr	r1, [r7, #0]
 801c66e:	6878      	ldr	r0, [r7, #4]
 801c670:	f000 fb5b 	bl	801cd2a <USBD_CtlError>
              break;
 801c674:	bf00      	nop
          }
          break;
 801c676:	e004      	b.n	801c682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801c678:	6839      	ldr	r1, [r7, #0]
 801c67a:	6878      	ldr	r0, [r7, #4]
 801c67c:	f000 fb55 	bl	801cd2a <USBD_CtlError>
          break;
 801c680:	bf00      	nop
      }
      break;
 801c682:	e005      	b.n	801c690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801c684:	6839      	ldr	r1, [r7, #0]
 801c686:	6878      	ldr	r0, [r7, #4]
 801c688:	f000 fb4f 	bl	801cd2a <USBD_CtlError>
      break;
 801c68c:	e000      	b.n	801c690 <USBD_StdEPReq+0x330>
      break;
 801c68e:	bf00      	nop
  }

  return ret;
 801c690:	7bfb      	ldrb	r3, [r7, #15]
}
 801c692:	4618      	mov	r0, r3
 801c694:	3710      	adds	r7, #16
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
	...

0801c69c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b084      	sub	sp, #16
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]
 801c6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801c6b2:	683b      	ldr	r3, [r7, #0]
 801c6b4:	885b      	ldrh	r3, [r3, #2]
 801c6b6:	0a1b      	lsrs	r3, r3, #8
 801c6b8:	b29b      	uxth	r3, r3
 801c6ba:	3b01      	subs	r3, #1
 801c6bc:	2b06      	cmp	r3, #6
 801c6be:	f200 8128 	bhi.w	801c912 <USBD_GetDescriptor+0x276>
 801c6c2:	a201      	add	r2, pc, #4	; (adr r2, 801c6c8 <USBD_GetDescriptor+0x2c>)
 801c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6c8:	0801c6e5 	.word	0x0801c6e5
 801c6cc:	0801c6fd 	.word	0x0801c6fd
 801c6d0:	0801c73d 	.word	0x0801c73d
 801c6d4:	0801c913 	.word	0x0801c913
 801c6d8:	0801c913 	.word	0x0801c913
 801c6dc:	0801c8b3 	.word	0x0801c8b3
 801c6e0:	0801c8df 	.word	0x0801c8df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	687a      	ldr	r2, [r7, #4]
 801c6ee:	7c12      	ldrb	r2, [r2, #16]
 801c6f0:	f107 0108 	add.w	r1, r7, #8
 801c6f4:	4610      	mov	r0, r2
 801c6f6:	4798      	blx	r3
 801c6f8:	60f8      	str	r0, [r7, #12]
      break;
 801c6fa:	e112      	b.n	801c922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	7c1b      	ldrb	r3, [r3, #16]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d10d      	bne.n	801c720 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c70c:	f107 0208 	add.w	r2, r7, #8
 801c710:	4610      	mov	r0, r2
 801c712:	4798      	blx	r3
 801c714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	3301      	adds	r3, #1
 801c71a:	2202      	movs	r2, #2
 801c71c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c71e:	e100      	b.n	801c922 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c728:	f107 0208 	add.w	r2, r7, #8
 801c72c:	4610      	mov	r0, r2
 801c72e:	4798      	blx	r3
 801c730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	3301      	adds	r3, #1
 801c736:	2202      	movs	r2, #2
 801c738:	701a      	strb	r2, [r3, #0]
      break;
 801c73a:	e0f2      	b.n	801c922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	885b      	ldrh	r3, [r3, #2]
 801c740:	b2db      	uxtb	r3, r3
 801c742:	2b05      	cmp	r3, #5
 801c744:	f200 80ac 	bhi.w	801c8a0 <USBD_GetDescriptor+0x204>
 801c748:	a201      	add	r2, pc, #4	; (adr r2, 801c750 <USBD_GetDescriptor+0xb4>)
 801c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c74e:	bf00      	nop
 801c750:	0801c769 	.word	0x0801c769
 801c754:	0801c79d 	.word	0x0801c79d
 801c758:	0801c7d1 	.word	0x0801c7d1
 801c75c:	0801c805 	.word	0x0801c805
 801c760:	0801c839 	.word	0x0801c839
 801c764:	0801c86d 	.word	0x0801c86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c76e:	685b      	ldr	r3, [r3, #4]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d00b      	beq.n	801c78c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c77a:	685b      	ldr	r3, [r3, #4]
 801c77c:	687a      	ldr	r2, [r7, #4]
 801c77e:	7c12      	ldrb	r2, [r2, #16]
 801c780:	f107 0108 	add.w	r1, r7, #8
 801c784:	4610      	mov	r0, r2
 801c786:	4798      	blx	r3
 801c788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c78a:	e091      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c78c:	6839      	ldr	r1, [r7, #0]
 801c78e:	6878      	ldr	r0, [r7, #4]
 801c790:	f000 facb 	bl	801cd2a <USBD_CtlError>
            err++;
 801c794:	7afb      	ldrb	r3, [r7, #11]
 801c796:	3301      	adds	r3, #1
 801c798:	72fb      	strb	r3, [r7, #11]
          break;
 801c79a:	e089      	b.n	801c8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c7a2:	689b      	ldr	r3, [r3, #8]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d00b      	beq.n	801c7c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c7ae:	689b      	ldr	r3, [r3, #8]
 801c7b0:	687a      	ldr	r2, [r7, #4]
 801c7b2:	7c12      	ldrb	r2, [r2, #16]
 801c7b4:	f107 0108 	add.w	r1, r7, #8
 801c7b8:	4610      	mov	r0, r2
 801c7ba:	4798      	blx	r3
 801c7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c7be:	e077      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c7c0:	6839      	ldr	r1, [r7, #0]
 801c7c2:	6878      	ldr	r0, [r7, #4]
 801c7c4:	f000 fab1 	bl	801cd2a <USBD_CtlError>
            err++;
 801c7c8:	7afb      	ldrb	r3, [r7, #11]
 801c7ca:	3301      	adds	r3, #1
 801c7cc:	72fb      	strb	r3, [r7, #11]
          break;
 801c7ce:	e06f      	b.n	801c8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c7d6:	68db      	ldr	r3, [r3, #12]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d00b      	beq.n	801c7f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c7e2:	68db      	ldr	r3, [r3, #12]
 801c7e4:	687a      	ldr	r2, [r7, #4]
 801c7e6:	7c12      	ldrb	r2, [r2, #16]
 801c7e8:	f107 0108 	add.w	r1, r7, #8
 801c7ec:	4610      	mov	r0, r2
 801c7ee:	4798      	blx	r3
 801c7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c7f2:	e05d      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c7f4:	6839      	ldr	r1, [r7, #0]
 801c7f6:	6878      	ldr	r0, [r7, #4]
 801c7f8:	f000 fa97 	bl	801cd2a <USBD_CtlError>
            err++;
 801c7fc:	7afb      	ldrb	r3, [r7, #11]
 801c7fe:	3301      	adds	r3, #1
 801c800:	72fb      	strb	r3, [r7, #11]
          break;
 801c802:	e055      	b.n	801c8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c80a:	691b      	ldr	r3, [r3, #16]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d00b      	beq.n	801c828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c816:	691b      	ldr	r3, [r3, #16]
 801c818:	687a      	ldr	r2, [r7, #4]
 801c81a:	7c12      	ldrb	r2, [r2, #16]
 801c81c:	f107 0108 	add.w	r1, r7, #8
 801c820:	4610      	mov	r0, r2
 801c822:	4798      	blx	r3
 801c824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c826:	e043      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c828:	6839      	ldr	r1, [r7, #0]
 801c82a:	6878      	ldr	r0, [r7, #4]
 801c82c:	f000 fa7d 	bl	801cd2a <USBD_CtlError>
            err++;
 801c830:	7afb      	ldrb	r3, [r7, #11]
 801c832:	3301      	adds	r3, #1
 801c834:	72fb      	strb	r3, [r7, #11]
          break;
 801c836:	e03b      	b.n	801c8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c83e:	695b      	ldr	r3, [r3, #20]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d00b      	beq.n	801c85c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c84a:	695b      	ldr	r3, [r3, #20]
 801c84c:	687a      	ldr	r2, [r7, #4]
 801c84e:	7c12      	ldrb	r2, [r2, #16]
 801c850:	f107 0108 	add.w	r1, r7, #8
 801c854:	4610      	mov	r0, r2
 801c856:	4798      	blx	r3
 801c858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c85a:	e029      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c85c:	6839      	ldr	r1, [r7, #0]
 801c85e:	6878      	ldr	r0, [r7, #4]
 801c860:	f000 fa63 	bl	801cd2a <USBD_CtlError>
            err++;
 801c864:	7afb      	ldrb	r3, [r7, #11]
 801c866:	3301      	adds	r3, #1
 801c868:	72fb      	strb	r3, [r7, #11]
          break;
 801c86a:	e021      	b.n	801c8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c872:	699b      	ldr	r3, [r3, #24]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d00b      	beq.n	801c890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c87e:	699b      	ldr	r3, [r3, #24]
 801c880:	687a      	ldr	r2, [r7, #4]
 801c882:	7c12      	ldrb	r2, [r2, #16]
 801c884:	f107 0108 	add.w	r1, r7, #8
 801c888:	4610      	mov	r0, r2
 801c88a:	4798      	blx	r3
 801c88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c88e:	e00f      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801c890:	6839      	ldr	r1, [r7, #0]
 801c892:	6878      	ldr	r0, [r7, #4]
 801c894:	f000 fa49 	bl	801cd2a <USBD_CtlError>
            err++;
 801c898:	7afb      	ldrb	r3, [r7, #11]
 801c89a:	3301      	adds	r3, #1
 801c89c:	72fb      	strb	r3, [r7, #11]
          break;
 801c89e:	e007      	b.n	801c8b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801c8a0:	6839      	ldr	r1, [r7, #0]
 801c8a2:	6878      	ldr	r0, [r7, #4]
 801c8a4:	f000 fa41 	bl	801cd2a <USBD_CtlError>
          err++;
 801c8a8:	7afb      	ldrb	r3, [r7, #11]
 801c8aa:	3301      	adds	r3, #1
 801c8ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801c8ae:	bf00      	nop
      }
      break;
 801c8b0:	e037      	b.n	801c922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	7c1b      	ldrb	r3, [r3, #16]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d109      	bne.n	801c8ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8c2:	f107 0208 	add.w	r2, r7, #8
 801c8c6:	4610      	mov	r0, r2
 801c8c8:	4798      	blx	r3
 801c8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c8cc:	e029      	b.n	801c922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801c8ce:	6839      	ldr	r1, [r7, #0]
 801c8d0:	6878      	ldr	r0, [r7, #4]
 801c8d2:	f000 fa2a 	bl	801cd2a <USBD_CtlError>
        err++;
 801c8d6:	7afb      	ldrb	r3, [r7, #11]
 801c8d8:	3301      	adds	r3, #1
 801c8da:	72fb      	strb	r3, [r7, #11]
      break;
 801c8dc:	e021      	b.n	801c922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	7c1b      	ldrb	r3, [r3, #16]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d10d      	bne.n	801c902 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8ee:	f107 0208 	add.w	r2, r7, #8
 801c8f2:	4610      	mov	r0, r2
 801c8f4:	4798      	blx	r3
 801c8f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	3301      	adds	r3, #1
 801c8fc:	2207      	movs	r2, #7
 801c8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c900:	e00f      	b.n	801c922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801c902:	6839      	ldr	r1, [r7, #0]
 801c904:	6878      	ldr	r0, [r7, #4]
 801c906:	f000 fa10 	bl	801cd2a <USBD_CtlError>
        err++;
 801c90a:	7afb      	ldrb	r3, [r7, #11]
 801c90c:	3301      	adds	r3, #1
 801c90e:	72fb      	strb	r3, [r7, #11]
      break;
 801c910:	e007      	b.n	801c922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801c912:	6839      	ldr	r1, [r7, #0]
 801c914:	6878      	ldr	r0, [r7, #4]
 801c916:	f000 fa08 	bl	801cd2a <USBD_CtlError>
      err++;
 801c91a:	7afb      	ldrb	r3, [r7, #11]
 801c91c:	3301      	adds	r3, #1
 801c91e:	72fb      	strb	r3, [r7, #11]
      break;
 801c920:	bf00      	nop
  }

  if (err != 0U)
 801c922:	7afb      	ldrb	r3, [r7, #11]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d11e      	bne.n	801c966 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801c928:	683b      	ldr	r3, [r7, #0]
 801c92a:	88db      	ldrh	r3, [r3, #6]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d016      	beq.n	801c95e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801c930:	893b      	ldrh	r3, [r7, #8]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d00e      	beq.n	801c954 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	88da      	ldrh	r2, [r3, #6]
 801c93a:	893b      	ldrh	r3, [r7, #8]
 801c93c:	4293      	cmp	r3, r2
 801c93e:	bf28      	it	cs
 801c940:	4613      	movcs	r3, r2
 801c942:	b29b      	uxth	r3, r3
 801c944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c946:	893b      	ldrh	r3, [r7, #8]
 801c948:	461a      	mov	r2, r3
 801c94a:	68f9      	ldr	r1, [r7, #12]
 801c94c:	6878      	ldr	r0, [r7, #4]
 801c94e:	f000 fa5d 	bl	801ce0c <USBD_CtlSendData>
 801c952:	e009      	b.n	801c968 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801c954:	6839      	ldr	r1, [r7, #0]
 801c956:	6878      	ldr	r0, [r7, #4]
 801c958:	f000 f9e7 	bl	801cd2a <USBD_CtlError>
 801c95c:	e004      	b.n	801c968 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801c95e:	6878      	ldr	r0, [r7, #4]
 801c960:	f000 faae 	bl	801cec0 <USBD_CtlSendStatus>
 801c964:	e000      	b.n	801c968 <USBD_GetDescriptor+0x2cc>
    return;
 801c966:	bf00      	nop
  }
}
 801c968:	3710      	adds	r7, #16
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}
 801c96e:	bf00      	nop

0801c970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b084      	sub	sp, #16
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
 801c978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c97a:	683b      	ldr	r3, [r7, #0]
 801c97c:	889b      	ldrh	r3, [r3, #4]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d131      	bne.n	801c9e6 <USBD_SetAddress+0x76>
 801c982:	683b      	ldr	r3, [r7, #0]
 801c984:	88db      	ldrh	r3, [r3, #6]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d12d      	bne.n	801c9e6 <USBD_SetAddress+0x76>
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	885b      	ldrh	r3, [r3, #2]
 801c98e:	2b7f      	cmp	r3, #127	; 0x7f
 801c990:	d829      	bhi.n	801c9e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c992:	683b      	ldr	r3, [r7, #0]
 801c994:	885b      	ldrh	r3, [r3, #2]
 801c996:	b2db      	uxtb	r3, r3
 801c998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c9a4:	b2db      	uxtb	r3, r3
 801c9a6:	2b03      	cmp	r3, #3
 801c9a8:	d104      	bne.n	801c9b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801c9aa:	6839      	ldr	r1, [r7, #0]
 801c9ac:	6878      	ldr	r0, [r7, #4]
 801c9ae:	f000 f9bc 	bl	801cd2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c9b2:	e01d      	b.n	801c9f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	7bfa      	ldrb	r2, [r7, #15]
 801c9b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c9bc:	7bfb      	ldrb	r3, [r7, #15]
 801c9be:	4619      	mov	r1, r3
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	f000 fedf 	bl	801d784 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801c9c6:	6878      	ldr	r0, [r7, #4]
 801c9c8:	f000 fa7a 	bl	801cec0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c9cc:	7bfb      	ldrb	r3, [r7, #15]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d004      	beq.n	801c9dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	2202      	movs	r2, #2
 801c9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c9da:	e009      	b.n	801c9f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2201      	movs	r2, #1
 801c9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c9e4:	e004      	b.n	801c9f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c9e6:	6839      	ldr	r1, [r7, #0]
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	f000 f99e 	bl	801cd2a <USBD_CtlError>
  }
}
 801c9ee:	bf00      	nop
 801c9f0:	bf00      	nop
 801c9f2:	3710      	adds	r7, #16
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}

0801c9f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b084      	sub	sp, #16
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
 801ca00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ca02:	2300      	movs	r3, #0
 801ca04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ca06:	683b      	ldr	r3, [r7, #0]
 801ca08:	885b      	ldrh	r3, [r3, #2]
 801ca0a:	b2da      	uxtb	r2, r3
 801ca0c:	4b4e      	ldr	r3, [pc, #312]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ca10:	4b4d      	ldr	r3, [pc, #308]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	2b01      	cmp	r3, #1
 801ca16:	d905      	bls.n	801ca24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801ca18:	6839      	ldr	r1, [r7, #0]
 801ca1a:	6878      	ldr	r0, [r7, #4]
 801ca1c:	f000 f985 	bl	801cd2a <USBD_CtlError>
    return USBD_FAIL;
 801ca20:	2303      	movs	r3, #3
 801ca22:	e08c      	b.n	801cb3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ca2a:	b2db      	uxtb	r3, r3
 801ca2c:	2b02      	cmp	r3, #2
 801ca2e:	d002      	beq.n	801ca36 <USBD_SetConfig+0x3e>
 801ca30:	2b03      	cmp	r3, #3
 801ca32:	d029      	beq.n	801ca88 <USBD_SetConfig+0x90>
 801ca34:	e075      	b.n	801cb22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ca36:	4b44      	ldr	r3, [pc, #272]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca38:	781b      	ldrb	r3, [r3, #0]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d020      	beq.n	801ca80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801ca3e:	4b42      	ldr	r3, [pc, #264]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca40:	781b      	ldrb	r3, [r3, #0]
 801ca42:	461a      	mov	r2, r3
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ca48:	4b3f      	ldr	r3, [pc, #252]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca4a:	781b      	ldrb	r3, [r3, #0]
 801ca4c:	4619      	mov	r1, r3
 801ca4e:	6878      	ldr	r0, [r7, #4]
 801ca50:	f7fe ffe7 	bl	801ba22 <USBD_SetClassConfig>
 801ca54:	4603      	mov	r3, r0
 801ca56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801ca58:	7bfb      	ldrb	r3, [r7, #15]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d008      	beq.n	801ca70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801ca5e:	6839      	ldr	r1, [r7, #0]
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	f000 f962 	bl	801cd2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2202      	movs	r2, #2
 801ca6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ca6e:	e065      	b.n	801cb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801ca70:	6878      	ldr	r0, [r7, #4]
 801ca72:	f000 fa25 	bl	801cec0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	2203      	movs	r2, #3
 801ca7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ca7e:	e05d      	b.n	801cb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801ca80:	6878      	ldr	r0, [r7, #4]
 801ca82:	f000 fa1d 	bl	801cec0 <USBD_CtlSendStatus>
      break;
 801ca86:	e059      	b.n	801cb3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801ca88:	4b2f      	ldr	r3, [pc, #188]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca8a:	781b      	ldrb	r3, [r3, #0]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d112      	bne.n	801cab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2202      	movs	r2, #2
 801ca94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ca98:	4b2b      	ldr	r3, [pc, #172]	; (801cb48 <USBD_SetConfig+0x150>)
 801ca9a:	781b      	ldrb	r3, [r3, #0]
 801ca9c:	461a      	mov	r2, r3
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801caa2:	4b29      	ldr	r3, [pc, #164]	; (801cb48 <USBD_SetConfig+0x150>)
 801caa4:	781b      	ldrb	r3, [r3, #0]
 801caa6:	4619      	mov	r1, r3
 801caa8:	6878      	ldr	r0, [r7, #4]
 801caaa:	f7fe ffd6 	bl	801ba5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801caae:	6878      	ldr	r0, [r7, #4]
 801cab0:	f000 fa06 	bl	801cec0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801cab4:	e042      	b.n	801cb3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801cab6:	4b24      	ldr	r3, [pc, #144]	; (801cb48 <USBD_SetConfig+0x150>)
 801cab8:	781b      	ldrb	r3, [r3, #0]
 801caba:	461a      	mov	r2, r3
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	685b      	ldr	r3, [r3, #4]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d02a      	beq.n	801cb1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	685b      	ldr	r3, [r3, #4]
 801cac8:	b2db      	uxtb	r3, r3
 801caca:	4619      	mov	r1, r3
 801cacc:	6878      	ldr	r0, [r7, #4]
 801cace:	f7fe ffc4 	bl	801ba5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801cad2:	4b1d      	ldr	r3, [pc, #116]	; (801cb48 <USBD_SetConfig+0x150>)
 801cad4:	781b      	ldrb	r3, [r3, #0]
 801cad6:	461a      	mov	r2, r3
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801cadc:	4b1a      	ldr	r3, [pc, #104]	; (801cb48 <USBD_SetConfig+0x150>)
 801cade:	781b      	ldrb	r3, [r3, #0]
 801cae0:	4619      	mov	r1, r3
 801cae2:	6878      	ldr	r0, [r7, #4]
 801cae4:	f7fe ff9d 	bl	801ba22 <USBD_SetClassConfig>
 801cae8:	4603      	mov	r3, r0
 801caea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801caec:	7bfb      	ldrb	r3, [r7, #15]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d00f      	beq.n	801cb12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801caf2:	6839      	ldr	r1, [r7, #0]
 801caf4:	6878      	ldr	r0, [r7, #4]
 801caf6:	f000 f918 	bl	801cd2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	b2db      	uxtb	r3, r3
 801cb00:	4619      	mov	r1, r3
 801cb02:	6878      	ldr	r0, [r7, #4]
 801cb04:	f7fe ffa9 	bl	801ba5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	2202      	movs	r2, #2
 801cb0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801cb10:	e014      	b.n	801cb3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801cb12:	6878      	ldr	r0, [r7, #4]
 801cb14:	f000 f9d4 	bl	801cec0 <USBD_CtlSendStatus>
      break;
 801cb18:	e010      	b.n	801cb3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f000 f9d0 	bl	801cec0 <USBD_CtlSendStatus>
      break;
 801cb20:	e00c      	b.n	801cb3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801cb22:	6839      	ldr	r1, [r7, #0]
 801cb24:	6878      	ldr	r0, [r7, #4]
 801cb26:	f000 f900 	bl	801cd2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801cb2a:	4b07      	ldr	r3, [pc, #28]	; (801cb48 <USBD_SetConfig+0x150>)
 801cb2c:	781b      	ldrb	r3, [r3, #0]
 801cb2e:	4619      	mov	r1, r3
 801cb30:	6878      	ldr	r0, [r7, #4]
 801cb32:	f7fe ff92 	bl	801ba5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801cb36:	2303      	movs	r3, #3
 801cb38:	73fb      	strb	r3, [r7, #15]
      break;
 801cb3a:	bf00      	nop
  }

  return ret;
 801cb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb3e:	4618      	mov	r0, r3
 801cb40:	3710      	adds	r7, #16
 801cb42:	46bd      	mov	sp, r7
 801cb44:	bd80      	pop	{r7, pc}
 801cb46:	bf00      	nop
 801cb48:	20000d70 	.word	0x20000d70

0801cb4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cb4c:	b580      	push	{r7, lr}
 801cb4e:	b082      	sub	sp, #8
 801cb50:	af00      	add	r7, sp, #0
 801cb52:	6078      	str	r0, [r7, #4]
 801cb54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801cb56:	683b      	ldr	r3, [r7, #0]
 801cb58:	88db      	ldrh	r3, [r3, #6]
 801cb5a:	2b01      	cmp	r3, #1
 801cb5c:	d004      	beq.n	801cb68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801cb5e:	6839      	ldr	r1, [r7, #0]
 801cb60:	6878      	ldr	r0, [r7, #4]
 801cb62:	f000 f8e2 	bl	801cd2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801cb66:	e023      	b.n	801cbb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb6e:	b2db      	uxtb	r3, r3
 801cb70:	2b02      	cmp	r3, #2
 801cb72:	dc02      	bgt.n	801cb7a <USBD_GetConfig+0x2e>
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	dc03      	bgt.n	801cb80 <USBD_GetConfig+0x34>
 801cb78:	e015      	b.n	801cba6 <USBD_GetConfig+0x5a>
 801cb7a:	2b03      	cmp	r3, #3
 801cb7c:	d00b      	beq.n	801cb96 <USBD_GetConfig+0x4a>
 801cb7e:	e012      	b.n	801cba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2200      	movs	r2, #0
 801cb84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	3308      	adds	r3, #8
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	4619      	mov	r1, r3
 801cb8e:	6878      	ldr	r0, [r7, #4]
 801cb90:	f000 f93c 	bl	801ce0c <USBD_CtlSendData>
        break;
 801cb94:	e00c      	b.n	801cbb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	3304      	adds	r3, #4
 801cb9a:	2201      	movs	r2, #1
 801cb9c:	4619      	mov	r1, r3
 801cb9e:	6878      	ldr	r0, [r7, #4]
 801cba0:	f000 f934 	bl	801ce0c <USBD_CtlSendData>
        break;
 801cba4:	e004      	b.n	801cbb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801cba6:	6839      	ldr	r1, [r7, #0]
 801cba8:	6878      	ldr	r0, [r7, #4]
 801cbaa:	f000 f8be 	bl	801cd2a <USBD_CtlError>
        break;
 801cbae:	bf00      	nop
}
 801cbb0:	bf00      	nop
 801cbb2:	3708      	adds	r7, #8
 801cbb4:	46bd      	mov	sp, r7
 801cbb6:	bd80      	pop	{r7, pc}

0801cbb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b082      	sub	sp, #8
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
 801cbc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cbc8:	b2db      	uxtb	r3, r3
 801cbca:	3b01      	subs	r3, #1
 801cbcc:	2b02      	cmp	r3, #2
 801cbce:	d81e      	bhi.n	801cc0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	88db      	ldrh	r3, [r3, #6]
 801cbd4:	2b02      	cmp	r3, #2
 801cbd6:	d004      	beq.n	801cbe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801cbd8:	6839      	ldr	r1, [r7, #0]
 801cbda:	6878      	ldr	r0, [r7, #4]
 801cbdc:	f000 f8a5 	bl	801cd2a <USBD_CtlError>
        break;
 801cbe0:	e01a      	b.n	801cc18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	2201      	movs	r2, #1
 801cbe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d005      	beq.n	801cbfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	68db      	ldr	r3, [r3, #12]
 801cbf6:	f043 0202 	orr.w	r2, r3, #2
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	330c      	adds	r3, #12
 801cc02:	2202      	movs	r2, #2
 801cc04:	4619      	mov	r1, r3
 801cc06:	6878      	ldr	r0, [r7, #4]
 801cc08:	f000 f900 	bl	801ce0c <USBD_CtlSendData>
      break;
 801cc0c:	e004      	b.n	801cc18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801cc0e:	6839      	ldr	r1, [r7, #0]
 801cc10:	6878      	ldr	r0, [r7, #4]
 801cc12:	f000 f88a 	bl	801cd2a <USBD_CtlError>
      break;
 801cc16:	bf00      	nop
  }
}
 801cc18:	bf00      	nop
 801cc1a:	3708      	adds	r7, #8
 801cc1c:	46bd      	mov	sp, r7
 801cc1e:	bd80      	pop	{r7, pc}

0801cc20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b082      	sub	sp, #8
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
 801cc28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	885b      	ldrh	r3, [r3, #2]
 801cc2e:	2b01      	cmp	r3, #1
 801cc30:	d107      	bne.n	801cc42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	2201      	movs	r2, #1
 801cc36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801cc3a:	6878      	ldr	r0, [r7, #4]
 801cc3c:	f000 f940 	bl	801cec0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801cc40:	e013      	b.n	801cc6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	885b      	ldrh	r3, [r3, #2]
 801cc46:	2b02      	cmp	r3, #2
 801cc48:	d10b      	bne.n	801cc62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801cc4a:	683b      	ldr	r3, [r7, #0]
 801cc4c:	889b      	ldrh	r3, [r3, #4]
 801cc4e:	0a1b      	lsrs	r3, r3, #8
 801cc50:	b29b      	uxth	r3, r3
 801cc52:	b2da      	uxtb	r2, r3
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	f000 f930 	bl	801cec0 <USBD_CtlSendStatus>
}
 801cc60:	e003      	b.n	801cc6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801cc62:	6839      	ldr	r1, [r7, #0]
 801cc64:	6878      	ldr	r0, [r7, #4]
 801cc66:	f000 f860 	bl	801cd2a <USBD_CtlError>
}
 801cc6a:	bf00      	nop
 801cc6c:	3708      	adds	r7, #8
 801cc6e:	46bd      	mov	sp, r7
 801cc70:	bd80      	pop	{r7, pc}

0801cc72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cc72:	b580      	push	{r7, lr}
 801cc74:	b082      	sub	sp, #8
 801cc76:	af00      	add	r7, sp, #0
 801cc78:	6078      	str	r0, [r7, #4]
 801cc7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cc82:	b2db      	uxtb	r3, r3
 801cc84:	3b01      	subs	r3, #1
 801cc86:	2b02      	cmp	r3, #2
 801cc88:	d80b      	bhi.n	801cca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cc8a:	683b      	ldr	r3, [r7, #0]
 801cc8c:	885b      	ldrh	r3, [r3, #2]
 801cc8e:	2b01      	cmp	r3, #1
 801cc90:	d10c      	bne.n	801ccac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2200      	movs	r2, #0
 801cc96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801cc9a:	6878      	ldr	r0, [r7, #4]
 801cc9c:	f000 f910 	bl	801cec0 <USBD_CtlSendStatus>
      }
      break;
 801cca0:	e004      	b.n	801ccac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801cca2:	6839      	ldr	r1, [r7, #0]
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f000 f840 	bl	801cd2a <USBD_CtlError>
      break;
 801ccaa:	e000      	b.n	801ccae <USBD_ClrFeature+0x3c>
      break;
 801ccac:	bf00      	nop
  }
}
 801ccae:	bf00      	nop
 801ccb0:	3708      	adds	r7, #8
 801ccb2:	46bd      	mov	sp, r7
 801ccb4:	bd80      	pop	{r7, pc}

0801ccb6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ccb6:	b580      	push	{r7, lr}
 801ccb8:	b084      	sub	sp, #16
 801ccba:	af00      	add	r7, sp, #0
 801ccbc:	6078      	str	r0, [r7, #4]
 801ccbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801ccc0:	683b      	ldr	r3, [r7, #0]
 801ccc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	781a      	ldrb	r2, [r3, #0]
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	3301      	adds	r3, #1
 801ccd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	781a      	ldrb	r2, [r3, #0]
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	3301      	adds	r3, #1
 801ccde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801cce0:	68f8      	ldr	r0, [r7, #12]
 801cce2:	f7ff fa41 	bl	801c168 <SWAPBYTE>
 801cce6:	4603      	mov	r3, r0
 801cce8:	461a      	mov	r2, r3
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801ccfa:	68f8      	ldr	r0, [r7, #12]
 801ccfc:	f7ff fa34 	bl	801c168 <SWAPBYTE>
 801cd00:	4603      	mov	r3, r0
 801cd02:	461a      	mov	r2, r3
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	3301      	adds	r3, #1
 801cd12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801cd14:	68f8      	ldr	r0, [r7, #12]
 801cd16:	f7ff fa27 	bl	801c168 <SWAPBYTE>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	461a      	mov	r2, r3
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	80da      	strh	r2, [r3, #6]
}
 801cd22:	bf00      	nop
 801cd24:	3710      	adds	r7, #16
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}

0801cd2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cd2a:	b580      	push	{r7, lr}
 801cd2c:	b082      	sub	sp, #8
 801cd2e:	af00      	add	r7, sp, #0
 801cd30:	6078      	str	r0, [r7, #4]
 801cd32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801cd34:	2180      	movs	r1, #128	; 0x80
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f000 fcba 	bl	801d6b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801cd3c:	2100      	movs	r1, #0
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f000 fcb6 	bl	801d6b0 <USBD_LL_StallEP>
}
 801cd44:	bf00      	nop
 801cd46:	3708      	adds	r7, #8
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}

0801cd4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	60f8      	str	r0, [r7, #12]
 801cd54:	60b9      	str	r1, [r7, #8]
 801cd56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801cd58:	2300      	movs	r3, #0
 801cd5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d036      	beq.n	801cdd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801cd66:	6938      	ldr	r0, [r7, #16]
 801cd68:	f000 f836 	bl	801cdd8 <USBD_GetLen>
 801cd6c:	4603      	mov	r3, r0
 801cd6e:	3301      	adds	r3, #1
 801cd70:	b29b      	uxth	r3, r3
 801cd72:	005b      	lsls	r3, r3, #1
 801cd74:	b29a      	uxth	r2, r3
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801cd7a:	7dfb      	ldrb	r3, [r7, #23]
 801cd7c:	68ba      	ldr	r2, [r7, #8]
 801cd7e:	4413      	add	r3, r2
 801cd80:	687a      	ldr	r2, [r7, #4]
 801cd82:	7812      	ldrb	r2, [r2, #0]
 801cd84:	701a      	strb	r2, [r3, #0]
  idx++;
 801cd86:	7dfb      	ldrb	r3, [r7, #23]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801cd8c:	7dfb      	ldrb	r3, [r7, #23]
 801cd8e:	68ba      	ldr	r2, [r7, #8]
 801cd90:	4413      	add	r3, r2
 801cd92:	2203      	movs	r2, #3
 801cd94:	701a      	strb	r2, [r3, #0]
  idx++;
 801cd96:	7dfb      	ldrb	r3, [r7, #23]
 801cd98:	3301      	adds	r3, #1
 801cd9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801cd9c:	e013      	b.n	801cdc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801cd9e:	7dfb      	ldrb	r3, [r7, #23]
 801cda0:	68ba      	ldr	r2, [r7, #8]
 801cda2:	4413      	add	r3, r2
 801cda4:	693a      	ldr	r2, [r7, #16]
 801cda6:	7812      	ldrb	r2, [r2, #0]
 801cda8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801cdaa:	693b      	ldr	r3, [r7, #16]
 801cdac:	3301      	adds	r3, #1
 801cdae:	613b      	str	r3, [r7, #16]
    idx++;
 801cdb0:	7dfb      	ldrb	r3, [r7, #23]
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801cdb6:	7dfb      	ldrb	r3, [r7, #23]
 801cdb8:	68ba      	ldr	r2, [r7, #8]
 801cdba:	4413      	add	r3, r2
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	701a      	strb	r2, [r3, #0]
    idx++;
 801cdc0:	7dfb      	ldrb	r3, [r7, #23]
 801cdc2:	3301      	adds	r3, #1
 801cdc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801cdc6:	693b      	ldr	r3, [r7, #16]
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d1e7      	bne.n	801cd9e <USBD_GetString+0x52>
 801cdce:	e000      	b.n	801cdd2 <USBD_GetString+0x86>
    return;
 801cdd0:	bf00      	nop
  }
}
 801cdd2:	3718      	adds	r7, #24
 801cdd4:	46bd      	mov	sp, r7
 801cdd6:	bd80      	pop	{r7, pc}

0801cdd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cdd8:	b480      	push	{r7}
 801cdda:	b085      	sub	sp, #20
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cde0:	2300      	movs	r3, #0
 801cde2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801cde8:	e005      	b.n	801cdf6 <USBD_GetLen+0x1e>
  {
    len++;
 801cdea:	7bfb      	ldrb	r3, [r7, #15]
 801cdec:	3301      	adds	r3, #1
 801cdee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801cdf0:	68bb      	ldr	r3, [r7, #8]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801cdf6:	68bb      	ldr	r3, [r7, #8]
 801cdf8:	781b      	ldrb	r3, [r3, #0]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d1f5      	bne.n	801cdea <USBD_GetLen+0x12>
  }

  return len;
 801cdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce00:	4618      	mov	r0, r3
 801ce02:	3714      	adds	r7, #20
 801ce04:	46bd      	mov	sp, r7
 801ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce0a:	4770      	bx	lr

0801ce0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b084      	sub	sp, #16
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	60f8      	str	r0, [r7, #12]
 801ce14:	60b9      	str	r1, [r7, #8]
 801ce16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	2202      	movs	r2, #2
 801ce1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	687a      	ldr	r2, [r7, #4]
 801ce24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	687a      	ldr	r2, [r7, #4]
 801ce2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	68ba      	ldr	r2, [r7, #8]
 801ce30:	2100      	movs	r1, #0
 801ce32:	68f8      	ldr	r0, [r7, #12]
 801ce34:	f000 fcc5 	bl	801d7c2 <USBD_LL_Transmit>

  return USBD_OK;
 801ce38:	2300      	movs	r3, #0
}
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	3710      	adds	r7, #16
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}

0801ce42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801ce42:	b580      	push	{r7, lr}
 801ce44:	b084      	sub	sp, #16
 801ce46:	af00      	add	r7, sp, #0
 801ce48:	60f8      	str	r0, [r7, #12]
 801ce4a:	60b9      	str	r1, [r7, #8]
 801ce4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	68ba      	ldr	r2, [r7, #8]
 801ce52:	2100      	movs	r1, #0
 801ce54:	68f8      	ldr	r0, [r7, #12]
 801ce56:	f000 fcb4 	bl	801d7c2 <USBD_LL_Transmit>

  return USBD_OK;
 801ce5a:	2300      	movs	r3, #0
}
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	3710      	adds	r7, #16
 801ce60:	46bd      	mov	sp, r7
 801ce62:	bd80      	pop	{r7, pc}

0801ce64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801ce64:	b580      	push	{r7, lr}
 801ce66:	b084      	sub	sp, #16
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	60f8      	str	r0, [r7, #12]
 801ce6c:	60b9      	str	r1, [r7, #8]
 801ce6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	2203      	movs	r2, #3
 801ce74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	687a      	ldr	r2, [r7, #4]
 801ce7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	687a      	ldr	r2, [r7, #4]
 801ce84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	68ba      	ldr	r2, [r7, #8]
 801ce8c:	2100      	movs	r1, #0
 801ce8e:	68f8      	ldr	r0, [r7, #12]
 801ce90:	f000 fcb8 	bl	801d804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ce94:	2300      	movs	r3, #0
}
 801ce96:	4618      	mov	r0, r3
 801ce98:	3710      	adds	r7, #16
 801ce9a:	46bd      	mov	sp, r7
 801ce9c:	bd80      	pop	{r7, pc}

0801ce9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801ce9e:	b580      	push	{r7, lr}
 801cea0:	b084      	sub	sp, #16
 801cea2:	af00      	add	r7, sp, #0
 801cea4:	60f8      	str	r0, [r7, #12]
 801cea6:	60b9      	str	r1, [r7, #8]
 801cea8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	68ba      	ldr	r2, [r7, #8]
 801ceae:	2100      	movs	r1, #0
 801ceb0:	68f8      	ldr	r0, [r7, #12]
 801ceb2:	f000 fca7 	bl	801d804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ceb6:	2300      	movs	r3, #0
}
 801ceb8:	4618      	mov	r0, r3
 801ceba:	3710      	adds	r7, #16
 801cebc:	46bd      	mov	sp, r7
 801cebe:	bd80      	pop	{r7, pc}

0801cec0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b082      	sub	sp, #8
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2204      	movs	r2, #4
 801cecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801ced0:	2300      	movs	r3, #0
 801ced2:	2200      	movs	r2, #0
 801ced4:	2100      	movs	r1, #0
 801ced6:	6878      	ldr	r0, [r7, #4]
 801ced8:	f000 fc73 	bl	801d7c2 <USBD_LL_Transmit>

  return USBD_OK;
 801cedc:	2300      	movs	r3, #0
}
 801cede:	4618      	mov	r0, r3
 801cee0:	3708      	adds	r7, #8
 801cee2:	46bd      	mov	sp, r7
 801cee4:	bd80      	pop	{r7, pc}

0801cee6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cee6:	b580      	push	{r7, lr}
 801cee8:	b082      	sub	sp, #8
 801ceea:	af00      	add	r7, sp, #0
 801ceec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	2205      	movs	r2, #5
 801cef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cef6:	2300      	movs	r3, #0
 801cef8:	2200      	movs	r2, #0
 801cefa:	2100      	movs	r1, #0
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f000 fc81 	bl	801d804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cf02:	2300      	movs	r3, #0
}
 801cf04:	4618      	mov	r0, r3
 801cf06:	3708      	adds	r7, #8
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	bd80      	pop	{r7, pc}

0801cf0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cf10:	2200      	movs	r2, #0
 801cf12:	4912      	ldr	r1, [pc, #72]	; (801cf5c <MX_USB_DEVICE_Init+0x50>)
 801cf14:	4812      	ldr	r0, [pc, #72]	; (801cf60 <MX_USB_DEVICE_Init+0x54>)
 801cf16:	f7fe fd07 	bl	801b928 <USBD_Init>
 801cf1a:	4603      	mov	r3, r0
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d001      	beq.n	801cf24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cf20:	f7f6 fc3c 	bl	801379c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cf24:	490f      	ldr	r1, [pc, #60]	; (801cf64 <MX_USB_DEVICE_Init+0x58>)
 801cf26:	480e      	ldr	r0, [pc, #56]	; (801cf60 <MX_USB_DEVICE_Init+0x54>)
 801cf28:	f7fe fd2e 	bl	801b988 <USBD_RegisterClass>
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d001      	beq.n	801cf36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801cf32:	f7f6 fc33 	bl	801379c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cf36:	490c      	ldr	r1, [pc, #48]	; (801cf68 <MX_USB_DEVICE_Init+0x5c>)
 801cf38:	4809      	ldr	r0, [pc, #36]	; (801cf60 <MX_USB_DEVICE_Init+0x54>)
 801cf3a:	f7fe fc65 	bl	801b808 <USBD_CDC_RegisterInterface>
 801cf3e:	4603      	mov	r3, r0
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d001      	beq.n	801cf48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801cf44:	f7f6 fc2a 	bl	801379c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cf48:	4805      	ldr	r0, [pc, #20]	; (801cf60 <MX_USB_DEVICE_Init+0x54>)
 801cf4a:	f7fe fd53 	bl	801b9f4 <USBD_Start>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d001      	beq.n	801cf58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801cf54:	f7f6 fc22 	bl	801379c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cf58:	bf00      	nop
 801cf5a:	bd80      	pop	{r7, pc}
 801cf5c:	2000069c 	.word	0x2000069c
 801cf60:	20000d74 	.word	0x20000d74
 801cf64:	20000608 	.word	0x20000608
 801cf68:	20000688 	.word	0x20000688

0801cf6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cf70:	2200      	movs	r2, #0
 801cf72:	4905      	ldr	r1, [pc, #20]	; (801cf88 <CDC_Init_FS+0x1c>)
 801cf74:	4805      	ldr	r0, [pc, #20]	; (801cf8c <CDC_Init_FS+0x20>)
 801cf76:	f7fe fc61 	bl	801b83c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cf7a:	4905      	ldr	r1, [pc, #20]	; (801cf90 <CDC_Init_FS+0x24>)
 801cf7c:	4803      	ldr	r0, [pc, #12]	; (801cf8c <CDC_Init_FS+0x20>)
 801cf7e:	f7fe fc7f 	bl	801b880 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cf82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cf84:	4618      	mov	r0, r3
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	20001850 	.word	0x20001850
 801cf8c:	20000d74 	.word	0x20000d74
 801cf90:	20001050 	.word	0x20001050

0801cf94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cf94:	b480      	push	{r7}
 801cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cf98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa2:	4770      	bx	lr

0801cfa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cfa4:	b480      	push	{r7}
 801cfa6:	b083      	sub	sp, #12
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	4603      	mov	r3, r0
 801cfac:	6039      	str	r1, [r7, #0]
 801cfae:	71fb      	strb	r3, [r7, #7]
 801cfb0:	4613      	mov	r3, r2
 801cfb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cfb4:	79fb      	ldrb	r3, [r7, #7]
 801cfb6:	2b23      	cmp	r3, #35	; 0x23
 801cfb8:	d84a      	bhi.n	801d050 <CDC_Control_FS+0xac>
 801cfba:	a201      	add	r2, pc, #4	; (adr r2, 801cfc0 <CDC_Control_FS+0x1c>)
 801cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfc0:	0801d051 	.word	0x0801d051
 801cfc4:	0801d051 	.word	0x0801d051
 801cfc8:	0801d051 	.word	0x0801d051
 801cfcc:	0801d051 	.word	0x0801d051
 801cfd0:	0801d051 	.word	0x0801d051
 801cfd4:	0801d051 	.word	0x0801d051
 801cfd8:	0801d051 	.word	0x0801d051
 801cfdc:	0801d051 	.word	0x0801d051
 801cfe0:	0801d051 	.word	0x0801d051
 801cfe4:	0801d051 	.word	0x0801d051
 801cfe8:	0801d051 	.word	0x0801d051
 801cfec:	0801d051 	.word	0x0801d051
 801cff0:	0801d051 	.word	0x0801d051
 801cff4:	0801d051 	.word	0x0801d051
 801cff8:	0801d051 	.word	0x0801d051
 801cffc:	0801d051 	.word	0x0801d051
 801d000:	0801d051 	.word	0x0801d051
 801d004:	0801d051 	.word	0x0801d051
 801d008:	0801d051 	.word	0x0801d051
 801d00c:	0801d051 	.word	0x0801d051
 801d010:	0801d051 	.word	0x0801d051
 801d014:	0801d051 	.word	0x0801d051
 801d018:	0801d051 	.word	0x0801d051
 801d01c:	0801d051 	.word	0x0801d051
 801d020:	0801d051 	.word	0x0801d051
 801d024:	0801d051 	.word	0x0801d051
 801d028:	0801d051 	.word	0x0801d051
 801d02c:	0801d051 	.word	0x0801d051
 801d030:	0801d051 	.word	0x0801d051
 801d034:	0801d051 	.word	0x0801d051
 801d038:	0801d051 	.word	0x0801d051
 801d03c:	0801d051 	.word	0x0801d051
 801d040:	0801d051 	.word	0x0801d051
 801d044:	0801d051 	.word	0x0801d051
 801d048:	0801d051 	.word	0x0801d051
 801d04c:	0801d051 	.word	0x0801d051
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d050:	bf00      	nop
  }

  return (USBD_OK);
 801d052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d054:	4618      	mov	r0, r3
 801d056:	370c      	adds	r7, #12
 801d058:	46bd      	mov	sp, r7
 801d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d05e:	4770      	bx	lr

0801d060 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b082      	sub	sp, #8
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
 801d068:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d06a:	6879      	ldr	r1, [r7, #4]
 801d06c:	4805      	ldr	r0, [pc, #20]	; (801d084 <CDC_Receive_FS+0x24>)
 801d06e:	f7fe fc07 	bl	801b880 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d072:	4804      	ldr	r0, [pc, #16]	; (801d084 <CDC_Receive_FS+0x24>)
 801d074:	f7fe fc22 	bl	801b8bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d078:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d07a:	4618      	mov	r0, r3
 801d07c:	3708      	adds	r7, #8
 801d07e:	46bd      	mov	sp, r7
 801d080:	bd80      	pop	{r7, pc}
 801d082:	bf00      	nop
 801d084:	20000d74 	.word	0x20000d74

0801d088 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d088:	b480      	push	{r7}
 801d08a:	b087      	sub	sp, #28
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	60f8      	str	r0, [r7, #12]
 801d090:	60b9      	str	r1, [r7, #8]
 801d092:	4613      	mov	r3, r2
 801d094:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d096:	2300      	movs	r3, #0
 801d098:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d09e:	4618      	mov	r0, r3
 801d0a0:	371c      	adds	r7, #28
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0a8:	4770      	bx	lr
	...

0801d0ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0ac:	b480      	push	{r7}
 801d0ae:	b083      	sub	sp, #12
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	6039      	str	r1, [r7, #0]
 801d0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d0b8:	683b      	ldr	r3, [r7, #0]
 801d0ba:	2212      	movs	r2, #18
 801d0bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d0be:	4b03      	ldr	r3, [pc, #12]	; (801d0cc <USBD_FS_DeviceDescriptor+0x20>)
}
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	370c      	adds	r7, #12
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ca:	4770      	bx	lr
 801d0cc:	200006b8 	.word	0x200006b8

0801d0d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0d0:	b480      	push	{r7}
 801d0d2:	b083      	sub	sp, #12
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	6039      	str	r1, [r7, #0]
 801d0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d0dc:	683b      	ldr	r3, [r7, #0]
 801d0de:	2204      	movs	r2, #4
 801d0e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d0e2:	4b03      	ldr	r3, [pc, #12]	; (801d0f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	370c      	adds	r7, #12
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ee:	4770      	bx	lr
 801d0f0:	200006cc 	.word	0x200006cc

0801d0f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b082      	sub	sp, #8
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	6039      	str	r1, [r7, #0]
 801d0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d100:	79fb      	ldrb	r3, [r7, #7]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d105      	bne.n	801d112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d106:	683a      	ldr	r2, [r7, #0]
 801d108:	4907      	ldr	r1, [pc, #28]	; (801d128 <USBD_FS_ProductStrDescriptor+0x34>)
 801d10a:	4808      	ldr	r0, [pc, #32]	; (801d12c <USBD_FS_ProductStrDescriptor+0x38>)
 801d10c:	f7ff fe1e 	bl	801cd4c <USBD_GetString>
 801d110:	e004      	b.n	801d11c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d112:	683a      	ldr	r2, [r7, #0]
 801d114:	4904      	ldr	r1, [pc, #16]	; (801d128 <USBD_FS_ProductStrDescriptor+0x34>)
 801d116:	4805      	ldr	r0, [pc, #20]	; (801d12c <USBD_FS_ProductStrDescriptor+0x38>)
 801d118:	f7ff fe18 	bl	801cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d11c:	4b02      	ldr	r3, [pc, #8]	; (801d128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d11e:	4618      	mov	r0, r3
 801d120:	3708      	adds	r7, #8
 801d122:	46bd      	mov	sp, r7
 801d124:	bd80      	pop	{r7, pc}
 801d126:	bf00      	nop
 801d128:	20002050 	.word	0x20002050
 801d12c:	08021d5c 	.word	0x08021d5c

0801d130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	4603      	mov	r3, r0
 801d138:	6039      	str	r1, [r7, #0]
 801d13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d13c:	683a      	ldr	r2, [r7, #0]
 801d13e:	4904      	ldr	r1, [pc, #16]	; (801d150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d140:	4804      	ldr	r0, [pc, #16]	; (801d154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d142:	f7ff fe03 	bl	801cd4c <USBD_GetString>
  return USBD_StrDesc;
 801d146:	4b02      	ldr	r3, [pc, #8]	; (801d150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d148:	4618      	mov	r0, r3
 801d14a:	3708      	adds	r7, #8
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}
 801d150:	20002050 	.word	0x20002050
 801d154:	08021d74 	.word	0x08021d74

0801d158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b082      	sub	sp, #8
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	4603      	mov	r3, r0
 801d160:	6039      	str	r1, [r7, #0]
 801d162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d164:	683b      	ldr	r3, [r7, #0]
 801d166:	221a      	movs	r2, #26
 801d168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d16a:	f000 f843 	bl	801d1f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d16e:	4b02      	ldr	r3, [pc, #8]	; (801d178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d170:	4618      	mov	r0, r3
 801d172:	3708      	adds	r7, #8
 801d174:	46bd      	mov	sp, r7
 801d176:	bd80      	pop	{r7, pc}
 801d178:	200006d0 	.word	0x200006d0

0801d17c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b082      	sub	sp, #8
 801d180:	af00      	add	r7, sp, #0
 801d182:	4603      	mov	r3, r0
 801d184:	6039      	str	r1, [r7, #0]
 801d186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d188:	79fb      	ldrb	r3, [r7, #7]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d105      	bne.n	801d19a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d18e:	683a      	ldr	r2, [r7, #0]
 801d190:	4907      	ldr	r1, [pc, #28]	; (801d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d192:	4808      	ldr	r0, [pc, #32]	; (801d1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d194:	f7ff fdda 	bl	801cd4c <USBD_GetString>
 801d198:	e004      	b.n	801d1a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d19a:	683a      	ldr	r2, [r7, #0]
 801d19c:	4904      	ldr	r1, [pc, #16]	; (801d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d19e:	4805      	ldr	r0, [pc, #20]	; (801d1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d1a0:	f7ff fdd4 	bl	801cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d1a4:	4b02      	ldr	r3, [pc, #8]	; (801d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	3708      	adds	r7, #8
 801d1aa:	46bd      	mov	sp, r7
 801d1ac:	bd80      	pop	{r7, pc}
 801d1ae:	bf00      	nop
 801d1b0:	20002050 	.word	0x20002050
 801d1b4:	08021d88 	.word	0x08021d88

0801d1b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b082      	sub	sp, #8
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	4603      	mov	r3, r0
 801d1c0:	6039      	str	r1, [r7, #0]
 801d1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d1c4:	79fb      	ldrb	r3, [r7, #7]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d105      	bne.n	801d1d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d1ca:	683a      	ldr	r2, [r7, #0]
 801d1cc:	4907      	ldr	r1, [pc, #28]	; (801d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d1ce:	4808      	ldr	r0, [pc, #32]	; (801d1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d1d0:	f7ff fdbc 	bl	801cd4c <USBD_GetString>
 801d1d4:	e004      	b.n	801d1e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d1d6:	683a      	ldr	r2, [r7, #0]
 801d1d8:	4904      	ldr	r1, [pc, #16]	; (801d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d1da:	4805      	ldr	r0, [pc, #20]	; (801d1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d1dc:	f7ff fdb6 	bl	801cd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d1e0:	4b02      	ldr	r3, [pc, #8]	; (801d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3708      	adds	r7, #8
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}
 801d1ea:	bf00      	nop
 801d1ec:	20002050 	.word	0x20002050
 801d1f0:	08021d94 	.word	0x08021d94

0801d1f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b084      	sub	sp, #16
 801d1f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d1fa:	4b0f      	ldr	r3, [pc, #60]	; (801d238 <Get_SerialNum+0x44>)
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d200:	4b0e      	ldr	r3, [pc, #56]	; (801d23c <Get_SerialNum+0x48>)
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d206:	4b0e      	ldr	r3, [pc, #56]	; (801d240 <Get_SerialNum+0x4c>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d20c:	68fa      	ldr	r2, [r7, #12]
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	4413      	add	r3, r2
 801d212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d009      	beq.n	801d22e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d21a:	2208      	movs	r2, #8
 801d21c:	4909      	ldr	r1, [pc, #36]	; (801d244 <Get_SerialNum+0x50>)
 801d21e:	68f8      	ldr	r0, [r7, #12]
 801d220:	f000 f814 	bl	801d24c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d224:	2204      	movs	r2, #4
 801d226:	4908      	ldr	r1, [pc, #32]	; (801d248 <Get_SerialNum+0x54>)
 801d228:	68b8      	ldr	r0, [r7, #8]
 801d22a:	f000 f80f 	bl	801d24c <IntToUnicode>
  }
}
 801d22e:	bf00      	nop
 801d230:	3710      	adds	r7, #16
 801d232:	46bd      	mov	sp, r7
 801d234:	bd80      	pop	{r7, pc}
 801d236:	bf00      	nop
 801d238:	1fff7a10 	.word	0x1fff7a10
 801d23c:	1fff7a14 	.word	0x1fff7a14
 801d240:	1fff7a18 	.word	0x1fff7a18
 801d244:	200006d2 	.word	0x200006d2
 801d248:	200006e2 	.word	0x200006e2

0801d24c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d24c:	b480      	push	{r7}
 801d24e:	b087      	sub	sp, #28
 801d250:	af00      	add	r7, sp, #0
 801d252:	60f8      	str	r0, [r7, #12]
 801d254:	60b9      	str	r1, [r7, #8]
 801d256:	4613      	mov	r3, r2
 801d258:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d25a:	2300      	movs	r3, #0
 801d25c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d25e:	2300      	movs	r3, #0
 801d260:	75fb      	strb	r3, [r7, #23]
 801d262:	e027      	b.n	801d2b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	0f1b      	lsrs	r3, r3, #28
 801d268:	2b09      	cmp	r3, #9
 801d26a:	d80b      	bhi.n	801d284 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	0f1b      	lsrs	r3, r3, #28
 801d270:	b2da      	uxtb	r2, r3
 801d272:	7dfb      	ldrb	r3, [r7, #23]
 801d274:	005b      	lsls	r3, r3, #1
 801d276:	4619      	mov	r1, r3
 801d278:	68bb      	ldr	r3, [r7, #8]
 801d27a:	440b      	add	r3, r1
 801d27c:	3230      	adds	r2, #48	; 0x30
 801d27e:	b2d2      	uxtb	r2, r2
 801d280:	701a      	strb	r2, [r3, #0]
 801d282:	e00a      	b.n	801d29a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	0f1b      	lsrs	r3, r3, #28
 801d288:	b2da      	uxtb	r2, r3
 801d28a:	7dfb      	ldrb	r3, [r7, #23]
 801d28c:	005b      	lsls	r3, r3, #1
 801d28e:	4619      	mov	r1, r3
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	440b      	add	r3, r1
 801d294:	3237      	adds	r2, #55	; 0x37
 801d296:	b2d2      	uxtb	r2, r2
 801d298:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d29a:	68fb      	ldr	r3, [r7, #12]
 801d29c:	011b      	lsls	r3, r3, #4
 801d29e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d2a0:	7dfb      	ldrb	r3, [r7, #23]
 801d2a2:	005b      	lsls	r3, r3, #1
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	68ba      	ldr	r2, [r7, #8]
 801d2a8:	4413      	add	r3, r2
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d2ae:	7dfb      	ldrb	r3, [r7, #23]
 801d2b0:	3301      	adds	r3, #1
 801d2b2:	75fb      	strb	r3, [r7, #23]
 801d2b4:	7dfa      	ldrb	r2, [r7, #23]
 801d2b6:	79fb      	ldrb	r3, [r7, #7]
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	d3d3      	bcc.n	801d264 <IntToUnicode+0x18>
  }
}
 801d2bc:	bf00      	nop
 801d2be:	bf00      	nop
 801d2c0:	371c      	adds	r7, #28
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c8:	4770      	bx	lr
	...

0801d2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b08a      	sub	sp, #40	; 0x28
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d2d4:	f107 0314 	add.w	r3, r7, #20
 801d2d8:	2200      	movs	r2, #0
 801d2da:	601a      	str	r2, [r3, #0]
 801d2dc:	605a      	str	r2, [r3, #4]
 801d2de:	609a      	str	r2, [r3, #8]
 801d2e0:	60da      	str	r2, [r3, #12]
 801d2e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d2ec:	d13a      	bne.n	801d364 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	613b      	str	r3, [r7, #16]
 801d2f2:	4b1e      	ldr	r3, [pc, #120]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2f6:	4a1d      	ldr	r2, [pc, #116]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d2f8:	f043 0301 	orr.w	r3, r3, #1
 801d2fc:	6313      	str	r3, [r2, #48]	; 0x30
 801d2fe:	4b1b      	ldr	r3, [pc, #108]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d302:	f003 0301 	and.w	r3, r3, #1
 801d306:	613b      	str	r3, [r7, #16]
 801d308:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d30a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801d30e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d310:	2302      	movs	r3, #2
 801d312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d314:	2300      	movs	r3, #0
 801d316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d318:	2303      	movs	r3, #3
 801d31a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d31c:	230a      	movs	r3, #10
 801d31e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d320:	f107 0314 	add.w	r3, r7, #20
 801d324:	4619      	mov	r1, r3
 801d326:	4812      	ldr	r0, [pc, #72]	; (801d370 <HAL_PCD_MspInit+0xa4>)
 801d328:	f7f8 faec 	bl	8015904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d32c:	4b0f      	ldr	r3, [pc, #60]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d330:	4a0e      	ldr	r2, [pc, #56]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d336:	6353      	str	r3, [r2, #52]	; 0x34
 801d338:	2300      	movs	r3, #0
 801d33a:	60fb      	str	r3, [r7, #12]
 801d33c:	4b0b      	ldr	r3, [pc, #44]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d340:	4a0a      	ldr	r2, [pc, #40]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d346:	6453      	str	r3, [r2, #68]	; 0x44
 801d348:	4b08      	ldr	r3, [pc, #32]	; (801d36c <HAL_PCD_MspInit+0xa0>)
 801d34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d34c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d350:	60fb      	str	r3, [r7, #12]
 801d352:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d354:	2200      	movs	r2, #0
 801d356:	2100      	movs	r1, #0
 801d358:	2043      	movs	r0, #67	; 0x43
 801d35a:	f7f7 fe96 	bl	801508a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d35e:	2043      	movs	r0, #67	; 0x43
 801d360:	f7f7 feaf 	bl	80150c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d364:	bf00      	nop
 801d366:	3728      	adds	r7, #40	; 0x28
 801d368:	46bd      	mov	sp, r7
 801d36a:	bd80      	pop	{r7, pc}
 801d36c:	40023800 	.word	0x40023800
 801d370:	40020000 	.word	0x40020000

0801d374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b082      	sub	sp, #8
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801d388:	4619      	mov	r1, r3
 801d38a:	4610      	mov	r0, r2
 801d38c:	f7fe fb7f 	bl	801ba8e <USBD_LL_SetupStage>
}
 801d390:	bf00      	nop
 801d392:	3708      	adds	r7, #8
 801d394:	46bd      	mov	sp, r7
 801d396:	bd80      	pop	{r7, pc}

0801d398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	b082      	sub	sp, #8
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d3aa:	78fa      	ldrb	r2, [r7, #3]
 801d3ac:	6879      	ldr	r1, [r7, #4]
 801d3ae:	4613      	mov	r3, r2
 801d3b0:	00db      	lsls	r3, r3, #3
 801d3b2:	4413      	add	r3, r2
 801d3b4:	009b      	lsls	r3, r3, #2
 801d3b6:	440b      	add	r3, r1
 801d3b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801d3bc:	681a      	ldr	r2, [r3, #0]
 801d3be:	78fb      	ldrb	r3, [r7, #3]
 801d3c0:	4619      	mov	r1, r3
 801d3c2:	f7fe fbb9 	bl	801bb38 <USBD_LL_DataOutStage>
}
 801d3c6:	bf00      	nop
 801d3c8:	3708      	adds	r7, #8
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	bd80      	pop	{r7, pc}

0801d3ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3ce:	b580      	push	{r7, lr}
 801d3d0:	b082      	sub	sp, #8
 801d3d2:	af00      	add	r7, sp, #0
 801d3d4:	6078      	str	r0, [r7, #4]
 801d3d6:	460b      	mov	r3, r1
 801d3d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d3e0:	78fa      	ldrb	r2, [r7, #3]
 801d3e2:	6879      	ldr	r1, [r7, #4]
 801d3e4:	4613      	mov	r3, r2
 801d3e6:	00db      	lsls	r3, r3, #3
 801d3e8:	4413      	add	r3, r2
 801d3ea:	009b      	lsls	r3, r3, #2
 801d3ec:	440b      	add	r3, r1
 801d3ee:	334c      	adds	r3, #76	; 0x4c
 801d3f0:	681a      	ldr	r2, [r3, #0]
 801d3f2:	78fb      	ldrb	r3, [r7, #3]
 801d3f4:	4619      	mov	r1, r3
 801d3f6:	f7fe fc52 	bl	801bc9e <USBD_LL_DataInStage>
}
 801d3fa:	bf00      	nop
 801d3fc:	3708      	adds	r7, #8
 801d3fe:	46bd      	mov	sp, r7
 801d400:	bd80      	pop	{r7, pc}

0801d402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d402:	b580      	push	{r7, lr}
 801d404:	b082      	sub	sp, #8
 801d406:	af00      	add	r7, sp, #0
 801d408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d410:	4618      	mov	r0, r3
 801d412:	f7fe fd86 	bl	801bf22 <USBD_LL_SOF>
}
 801d416:	bf00      	nop
 801d418:	3708      	adds	r7, #8
 801d41a:	46bd      	mov	sp, r7
 801d41c:	bd80      	pop	{r7, pc}

0801d41e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d41e:	b580      	push	{r7, lr}
 801d420:	b084      	sub	sp, #16
 801d422:	af00      	add	r7, sp, #0
 801d424:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d426:	2301      	movs	r3, #1
 801d428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	68db      	ldr	r3, [r3, #12]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d102      	bne.n	801d438 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d432:	2300      	movs	r3, #0
 801d434:	73fb      	strb	r3, [r7, #15]
 801d436:	e008      	b.n	801d44a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	68db      	ldr	r3, [r3, #12]
 801d43c:	2b02      	cmp	r3, #2
 801d43e:	d102      	bne.n	801d446 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d440:	2301      	movs	r3, #1
 801d442:	73fb      	strb	r3, [r7, #15]
 801d444:	e001      	b.n	801d44a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d446:	f7f6 f9a9 	bl	801379c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d450:	7bfa      	ldrb	r2, [r7, #15]
 801d452:	4611      	mov	r1, r2
 801d454:	4618      	mov	r0, r3
 801d456:	f7fe fd26 	bl	801bea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d460:	4618      	mov	r0, r3
 801d462:	f7fe fcce 	bl	801be02 <USBD_LL_Reset>
}
 801d466:	bf00      	nop
 801d468:	3710      	adds	r7, #16
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bd80      	pop	{r7, pc}
	...

0801d470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b082      	sub	sp, #8
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d47e:	4618      	mov	r0, r3
 801d480:	f7fe fd21 	bl	801bec6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	687a      	ldr	r2, [r7, #4]
 801d490:	6812      	ldr	r2, [r2, #0]
 801d492:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d496:	f043 0301 	orr.w	r3, r3, #1
 801d49a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	6a1b      	ldr	r3, [r3, #32]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d005      	beq.n	801d4b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d4a4:	4b04      	ldr	r3, [pc, #16]	; (801d4b8 <HAL_PCD_SuspendCallback+0x48>)
 801d4a6:	691b      	ldr	r3, [r3, #16]
 801d4a8:	4a03      	ldr	r2, [pc, #12]	; (801d4b8 <HAL_PCD_SuspendCallback+0x48>)
 801d4aa:	f043 0306 	orr.w	r3, r3, #6
 801d4ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d4b0:	bf00      	nop
 801d4b2:	3708      	adds	r7, #8
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}
 801d4b8:	e000ed00 	.word	0xe000ed00

0801d4bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d4bc:	b580      	push	{r7, lr}
 801d4be:	b082      	sub	sp, #8
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f7fe fd11 	bl	801bef2 <USBD_LL_Resume>
}
 801d4d0:	bf00      	nop
 801d4d2:	3708      	adds	r7, #8
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}

0801d4d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d4d8:	b580      	push	{r7, lr}
 801d4da:	b082      	sub	sp, #8
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	6078      	str	r0, [r7, #4]
 801d4e0:	460b      	mov	r3, r1
 801d4e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d4ea:	78fa      	ldrb	r2, [r7, #3]
 801d4ec:	4611      	mov	r1, r2
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7fe fd69 	bl	801bfc6 <USBD_LL_IsoOUTIncomplete>
}
 801d4f4:	bf00      	nop
 801d4f6:	3708      	adds	r7, #8
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}

0801d4fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d4fc:	b580      	push	{r7, lr}
 801d4fe:	b082      	sub	sp, #8
 801d500:	af00      	add	r7, sp, #0
 801d502:	6078      	str	r0, [r7, #4]
 801d504:	460b      	mov	r3, r1
 801d506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d50e:	78fa      	ldrb	r2, [r7, #3]
 801d510:	4611      	mov	r1, r2
 801d512:	4618      	mov	r0, r3
 801d514:	f7fe fd25 	bl	801bf62 <USBD_LL_IsoINIncomplete>
}
 801d518:	bf00      	nop
 801d51a:	3708      	adds	r7, #8
 801d51c:	46bd      	mov	sp, r7
 801d51e:	bd80      	pop	{r7, pc}

0801d520 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b082      	sub	sp, #8
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d52e:	4618      	mov	r0, r3
 801d530:	f7fe fd7b 	bl	801c02a <USBD_LL_DevConnected>
}
 801d534:	bf00      	nop
 801d536:	3708      	adds	r7, #8
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d53c:	b580      	push	{r7, lr}
 801d53e:	b082      	sub	sp, #8
 801d540:	af00      	add	r7, sp, #0
 801d542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d54a:	4618      	mov	r0, r3
 801d54c:	f7fe fd78 	bl	801c040 <USBD_LL_DevDisconnected>
}
 801d550:	bf00      	nop
 801d552:	3708      	adds	r7, #8
 801d554:	46bd      	mov	sp, r7
 801d556:	bd80      	pop	{r7, pc}

0801d558 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	781b      	ldrb	r3, [r3, #0]
 801d564:	2b00      	cmp	r3, #0
 801d566:	d13c      	bne.n	801d5e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d568:	4a20      	ldr	r2, [pc, #128]	; (801d5ec <USBD_LL_Init+0x94>)
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	4a1e      	ldr	r2, [pc, #120]	; (801d5ec <USBD_LL_Init+0x94>)
 801d574:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d578:	4b1c      	ldr	r3, [pc, #112]	; (801d5ec <USBD_LL_Init+0x94>)
 801d57a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d57e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d580:	4b1a      	ldr	r3, [pc, #104]	; (801d5ec <USBD_LL_Init+0x94>)
 801d582:	2204      	movs	r2, #4
 801d584:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d586:	4b19      	ldr	r3, [pc, #100]	; (801d5ec <USBD_LL_Init+0x94>)
 801d588:	2202      	movs	r2, #2
 801d58a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d58c:	4b17      	ldr	r3, [pc, #92]	; (801d5ec <USBD_LL_Init+0x94>)
 801d58e:	2200      	movs	r2, #0
 801d590:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d592:	4b16      	ldr	r3, [pc, #88]	; (801d5ec <USBD_LL_Init+0x94>)
 801d594:	2202      	movs	r2, #2
 801d596:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d598:	4b14      	ldr	r3, [pc, #80]	; (801d5ec <USBD_LL_Init+0x94>)
 801d59a:	2200      	movs	r2, #0
 801d59c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d59e:	4b13      	ldr	r3, [pc, #76]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5a0:	2200      	movs	r2, #0
 801d5a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d5a4:	4b11      	ldr	r3, [pc, #68]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d5aa:	4b10      	ldr	r3, [pc, #64]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d5b0:	4b0e      	ldr	r3, [pc, #56]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d5b6:	480d      	ldr	r0, [pc, #52]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5b8:	f7f8 fb73 	bl	8015ca2 <HAL_PCD_Init>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d001      	beq.n	801d5c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d5c2:	f7f6 f8eb 	bl	801379c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d5c6:	2180      	movs	r1, #128	; 0x80
 801d5c8:	4808      	ldr	r0, [pc, #32]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5ca:	f7f9 fdca 	bl	8017162 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d5ce:	2240      	movs	r2, #64	; 0x40
 801d5d0:	2100      	movs	r1, #0
 801d5d2:	4806      	ldr	r0, [pc, #24]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5d4:	f7f9 fd7e 	bl	80170d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d5d8:	2280      	movs	r2, #128	; 0x80
 801d5da:	2101      	movs	r1, #1
 801d5dc:	4803      	ldr	r0, [pc, #12]	; (801d5ec <USBD_LL_Init+0x94>)
 801d5de:	f7f9 fd79 	bl	80170d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d5e2:	2300      	movs	r3, #0
}
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	3708      	adds	r7, #8
 801d5e8:	46bd      	mov	sp, r7
 801d5ea:	bd80      	pop	{r7, pc}
 801d5ec:	20002250 	.word	0x20002250

0801d5f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b084      	sub	sp, #16
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d606:	4618      	mov	r0, r3
 801d608:	f7f8 fc68 	bl	8015edc <HAL_PCD_Start>
 801d60c:	4603      	mov	r3, r0
 801d60e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d610:	7bfb      	ldrb	r3, [r7, #15]
 801d612:	4618      	mov	r0, r3
 801d614:	f000 f942 	bl	801d89c <USBD_Get_USB_Status>
 801d618:	4603      	mov	r3, r0
 801d61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d61c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d61e:	4618      	mov	r0, r3
 801d620:	3710      	adds	r7, #16
 801d622:	46bd      	mov	sp, r7
 801d624:	bd80      	pop	{r7, pc}

0801d626 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d626:	b580      	push	{r7, lr}
 801d628:	b084      	sub	sp, #16
 801d62a:	af00      	add	r7, sp, #0
 801d62c:	6078      	str	r0, [r7, #4]
 801d62e:	4608      	mov	r0, r1
 801d630:	4611      	mov	r1, r2
 801d632:	461a      	mov	r2, r3
 801d634:	4603      	mov	r3, r0
 801d636:	70fb      	strb	r3, [r7, #3]
 801d638:	460b      	mov	r3, r1
 801d63a:	70bb      	strb	r3, [r7, #2]
 801d63c:	4613      	mov	r3, r2
 801d63e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d640:	2300      	movs	r3, #0
 801d642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d644:	2300      	movs	r3, #0
 801d646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801d64e:	78bb      	ldrb	r3, [r7, #2]
 801d650:	883a      	ldrh	r2, [r7, #0]
 801d652:	78f9      	ldrb	r1, [r7, #3]
 801d654:	f7f9 f939 	bl	80168ca <HAL_PCD_EP_Open>
 801d658:	4603      	mov	r3, r0
 801d65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d65c:	7bfb      	ldrb	r3, [r7, #15]
 801d65e:	4618      	mov	r0, r3
 801d660:	f000 f91c 	bl	801d89c <USBD_Get_USB_Status>
 801d664:	4603      	mov	r3, r0
 801d666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d668:	7bbb      	ldrb	r3, [r7, #14]
}
 801d66a:	4618      	mov	r0, r3
 801d66c:	3710      	adds	r7, #16
 801d66e:	46bd      	mov	sp, r7
 801d670:	bd80      	pop	{r7, pc}

0801d672 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d672:	b580      	push	{r7, lr}
 801d674:	b084      	sub	sp, #16
 801d676:	af00      	add	r7, sp, #0
 801d678:	6078      	str	r0, [r7, #4]
 801d67a:	460b      	mov	r3, r1
 801d67c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d67e:	2300      	movs	r3, #0
 801d680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d682:	2300      	movs	r3, #0
 801d684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d68c:	78fa      	ldrb	r2, [r7, #3]
 801d68e:	4611      	mov	r1, r2
 801d690:	4618      	mov	r0, r3
 801d692:	f7f9 f982 	bl	801699a <HAL_PCD_EP_Close>
 801d696:	4603      	mov	r3, r0
 801d698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d69a:	7bfb      	ldrb	r3, [r7, #15]
 801d69c:	4618      	mov	r0, r3
 801d69e:	f000 f8fd 	bl	801d89c <USBD_Get_USB_Status>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	3710      	adds	r7, #16
 801d6ac:	46bd      	mov	sp, r7
 801d6ae:	bd80      	pop	{r7, pc}

0801d6b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6b0:	b580      	push	{r7, lr}
 801d6b2:	b084      	sub	sp, #16
 801d6b4:	af00      	add	r7, sp, #0
 801d6b6:	6078      	str	r0, [r7, #4]
 801d6b8:	460b      	mov	r3, r1
 801d6ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6bc:	2300      	movs	r3, #0
 801d6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d6ca:	78fa      	ldrb	r2, [r7, #3]
 801d6cc:	4611      	mov	r1, r2
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7f9 fa5a 	bl	8016b88 <HAL_PCD_EP_SetStall>
 801d6d4:	4603      	mov	r3, r0
 801d6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6d8:	7bfb      	ldrb	r3, [r7, #15]
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f000 f8de 	bl	801d89c <USBD_Get_USB_Status>
 801d6e0:	4603      	mov	r3, r0
 801d6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6e6:	4618      	mov	r0, r3
 801d6e8:	3710      	adds	r7, #16
 801d6ea:	46bd      	mov	sp, r7
 801d6ec:	bd80      	pop	{r7, pc}

0801d6ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6ee:	b580      	push	{r7, lr}
 801d6f0:	b084      	sub	sp, #16
 801d6f2:	af00      	add	r7, sp, #0
 801d6f4:	6078      	str	r0, [r7, #4]
 801d6f6:	460b      	mov	r3, r1
 801d6f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6fe:	2300      	movs	r3, #0
 801d700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d708:	78fa      	ldrb	r2, [r7, #3]
 801d70a:	4611      	mov	r1, r2
 801d70c:	4618      	mov	r0, r3
 801d70e:	f7f9 fa9f 	bl	8016c50 <HAL_PCD_EP_ClrStall>
 801d712:	4603      	mov	r3, r0
 801d714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d716:	7bfb      	ldrb	r3, [r7, #15]
 801d718:	4618      	mov	r0, r3
 801d71a:	f000 f8bf 	bl	801d89c <USBD_Get_USB_Status>
 801d71e:	4603      	mov	r3, r0
 801d720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d722:	7bbb      	ldrb	r3, [r7, #14]
}
 801d724:	4618      	mov	r0, r3
 801d726:	3710      	adds	r7, #16
 801d728:	46bd      	mov	sp, r7
 801d72a:	bd80      	pop	{r7, pc}

0801d72c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d72c:	b480      	push	{r7}
 801d72e:	b085      	sub	sp, #20
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
 801d734:	460b      	mov	r3, r1
 801d736:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d73e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d744:	2b00      	cmp	r3, #0
 801d746:	da0b      	bge.n	801d760 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d748:	78fb      	ldrb	r3, [r7, #3]
 801d74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d74e:	68f9      	ldr	r1, [r7, #12]
 801d750:	4613      	mov	r3, r2
 801d752:	00db      	lsls	r3, r3, #3
 801d754:	4413      	add	r3, r2
 801d756:	009b      	lsls	r3, r3, #2
 801d758:	440b      	add	r3, r1
 801d75a:	333e      	adds	r3, #62	; 0x3e
 801d75c:	781b      	ldrb	r3, [r3, #0]
 801d75e:	e00b      	b.n	801d778 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d760:	78fb      	ldrb	r3, [r7, #3]
 801d762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d766:	68f9      	ldr	r1, [r7, #12]
 801d768:	4613      	mov	r3, r2
 801d76a:	00db      	lsls	r3, r3, #3
 801d76c:	4413      	add	r3, r2
 801d76e:	009b      	lsls	r3, r3, #2
 801d770:	440b      	add	r3, r1
 801d772:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801d776:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d778:	4618      	mov	r0, r3
 801d77a:	3714      	adds	r7, #20
 801d77c:	46bd      	mov	sp, r7
 801d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d782:	4770      	bx	lr

0801d784 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d784:	b580      	push	{r7, lr}
 801d786:	b084      	sub	sp, #16
 801d788:	af00      	add	r7, sp, #0
 801d78a:	6078      	str	r0, [r7, #4]
 801d78c:	460b      	mov	r3, r1
 801d78e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d790:	2300      	movs	r3, #0
 801d792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d794:	2300      	movs	r3, #0
 801d796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d79e:	78fa      	ldrb	r2, [r7, #3]
 801d7a0:	4611      	mov	r1, r2
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	f7f9 f86c 	bl	8016880 <HAL_PCD_SetAddress>
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7ac:	7bfb      	ldrb	r3, [r7, #15]
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f000 f874 	bl	801d89c <USBD_Get_USB_Status>
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3710      	adds	r7, #16
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bd80      	pop	{r7, pc}

0801d7c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7c2:	b580      	push	{r7, lr}
 801d7c4:	b086      	sub	sp, #24
 801d7c6:	af00      	add	r7, sp, #0
 801d7c8:	60f8      	str	r0, [r7, #12]
 801d7ca:	607a      	str	r2, [r7, #4]
 801d7cc:	603b      	str	r3, [r7, #0]
 801d7ce:	460b      	mov	r3, r1
 801d7d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801d7e0:	7af9      	ldrb	r1, [r7, #11]
 801d7e2:	683b      	ldr	r3, [r7, #0]
 801d7e4:	687a      	ldr	r2, [r7, #4]
 801d7e6:	f7f9 f985 	bl	8016af4 <HAL_PCD_EP_Transmit>
 801d7ea:	4603      	mov	r3, r0
 801d7ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7ee:	7dfb      	ldrb	r3, [r7, #23]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	f000 f853 	bl	801d89c <USBD_Get_USB_Status>
 801d7f6:	4603      	mov	r3, r0
 801d7f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d7fa:	7dbb      	ldrb	r3, [r7, #22]
}
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	3718      	adds	r7, #24
 801d800:	46bd      	mov	sp, r7
 801d802:	bd80      	pop	{r7, pc}

0801d804 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b086      	sub	sp, #24
 801d808:	af00      	add	r7, sp, #0
 801d80a:	60f8      	str	r0, [r7, #12]
 801d80c:	607a      	str	r2, [r7, #4]
 801d80e:	603b      	str	r3, [r7, #0]
 801d810:	460b      	mov	r3, r1
 801d812:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d814:	2300      	movs	r3, #0
 801d816:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d818:	2300      	movs	r3, #0
 801d81a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801d822:	7af9      	ldrb	r1, [r7, #11]
 801d824:	683b      	ldr	r3, [r7, #0]
 801d826:	687a      	ldr	r2, [r7, #4]
 801d828:	f7f9 f901 	bl	8016a2e <HAL_PCD_EP_Receive>
 801d82c:	4603      	mov	r3, r0
 801d82e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d830:	7dfb      	ldrb	r3, [r7, #23]
 801d832:	4618      	mov	r0, r3
 801d834:	f000 f832 	bl	801d89c <USBD_Get_USB_Status>
 801d838:	4603      	mov	r3, r0
 801d83a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d83c:	7dbb      	ldrb	r3, [r7, #22]
}
 801d83e:	4618      	mov	r0, r3
 801d840:	3718      	adds	r7, #24
 801d842:	46bd      	mov	sp, r7
 801d844:	bd80      	pop	{r7, pc}

0801d846 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d846:	b580      	push	{r7, lr}
 801d848:	b082      	sub	sp, #8
 801d84a:	af00      	add	r7, sp, #0
 801d84c:	6078      	str	r0, [r7, #4]
 801d84e:	460b      	mov	r3, r1
 801d850:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d858:	78fa      	ldrb	r2, [r7, #3]
 801d85a:	4611      	mov	r1, r2
 801d85c:	4618      	mov	r0, r3
 801d85e:	f7f9 f931 	bl	8016ac4 <HAL_PCD_EP_GetRxCount>
 801d862:	4603      	mov	r3, r0
}
 801d864:	4618      	mov	r0, r3
 801d866:	3708      	adds	r7, #8
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd80      	pop	{r7, pc}

0801d86c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d86c:	b480      	push	{r7}
 801d86e:	b083      	sub	sp, #12
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d874:	4b03      	ldr	r3, [pc, #12]	; (801d884 <USBD_static_malloc+0x18>)
}
 801d876:	4618      	mov	r0, r3
 801d878:	370c      	adds	r7, #12
 801d87a:	46bd      	mov	sp, r7
 801d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d880:	4770      	bx	lr
 801d882:	bf00      	nop
 801d884:	2000275c 	.word	0x2000275c

0801d888 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d888:	b480      	push	{r7}
 801d88a:	b083      	sub	sp, #12
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]

}
 801d890:	bf00      	nop
 801d892:	370c      	adds	r7, #12
 801d894:	46bd      	mov	sp, r7
 801d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d89a:	4770      	bx	lr

0801d89c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d89c:	b480      	push	{r7}
 801d89e:	b085      	sub	sp, #20
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d8aa:	79fb      	ldrb	r3, [r7, #7]
 801d8ac:	2b03      	cmp	r3, #3
 801d8ae:	d817      	bhi.n	801d8e0 <USBD_Get_USB_Status+0x44>
 801d8b0:	a201      	add	r2, pc, #4	; (adr r2, 801d8b8 <USBD_Get_USB_Status+0x1c>)
 801d8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8b6:	bf00      	nop
 801d8b8:	0801d8c9 	.word	0x0801d8c9
 801d8bc:	0801d8cf 	.word	0x0801d8cf
 801d8c0:	0801d8d5 	.word	0x0801d8d5
 801d8c4:	0801d8db 	.word	0x0801d8db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	73fb      	strb	r3, [r7, #15]
    break;
 801d8cc:	e00b      	b.n	801d8e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d8ce:	2303      	movs	r3, #3
 801d8d0:	73fb      	strb	r3, [r7, #15]
    break;
 801d8d2:	e008      	b.n	801d8e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	73fb      	strb	r3, [r7, #15]
    break;
 801d8d8:	e005      	b.n	801d8e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d8da:	2303      	movs	r3, #3
 801d8dc:	73fb      	strb	r3, [r7, #15]
    break;
 801d8de:	e002      	b.n	801d8e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d8e0:	2303      	movs	r3, #3
 801d8e2:	73fb      	strb	r3, [r7, #15]
    break;
 801d8e4:	bf00      	nop
  }
  return usb_status;
 801d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	3714      	adds	r7, #20
 801d8ec:	46bd      	mov	sp, r7
 801d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8f2:	4770      	bx	lr

0801d8f4 <calloc>:
 801d8f4:	4b02      	ldr	r3, [pc, #8]	; (801d900 <calloc+0xc>)
 801d8f6:	460a      	mov	r2, r1
 801d8f8:	4601      	mov	r1, r0
 801d8fa:	6818      	ldr	r0, [r3, #0]
 801d8fc:	f000 b802 	b.w	801d904 <_calloc_r>
 801d900:	200008b0 	.word	0x200008b0

0801d904 <_calloc_r>:
 801d904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d906:	fba1 2402 	umull	r2, r4, r1, r2
 801d90a:	b94c      	cbnz	r4, 801d920 <_calloc_r+0x1c>
 801d90c:	4611      	mov	r1, r2
 801d90e:	9201      	str	r2, [sp, #4]
 801d910:	f000 f83e 	bl	801d990 <_malloc_r>
 801d914:	9a01      	ldr	r2, [sp, #4]
 801d916:	4605      	mov	r5, r0
 801d918:	b930      	cbnz	r0, 801d928 <_calloc_r+0x24>
 801d91a:	4628      	mov	r0, r5
 801d91c:	b003      	add	sp, #12
 801d91e:	bd30      	pop	{r4, r5, pc}
 801d920:	220c      	movs	r2, #12
 801d922:	6002      	str	r2, [r0, #0]
 801d924:	2500      	movs	r5, #0
 801d926:	e7f8      	b.n	801d91a <_calloc_r+0x16>
 801d928:	4621      	mov	r1, r4
 801d92a:	f001 fc9b 	bl	801f264 <memset>
 801d92e:	e7f4      	b.n	801d91a <_calloc_r+0x16>

0801d930 <malloc>:
 801d930:	4b02      	ldr	r3, [pc, #8]	; (801d93c <malloc+0xc>)
 801d932:	4601      	mov	r1, r0
 801d934:	6818      	ldr	r0, [r3, #0]
 801d936:	f000 b82b 	b.w	801d990 <_malloc_r>
 801d93a:	bf00      	nop
 801d93c:	200008b0 	.word	0x200008b0

0801d940 <free>:
 801d940:	4b02      	ldr	r3, [pc, #8]	; (801d94c <free+0xc>)
 801d942:	4601      	mov	r1, r0
 801d944:	6818      	ldr	r0, [r3, #0]
 801d946:	f001 bd45 	b.w	801f3d4 <_free_r>
 801d94a:	bf00      	nop
 801d94c:	200008b0 	.word	0x200008b0

0801d950 <sbrk_aligned>:
 801d950:	b570      	push	{r4, r5, r6, lr}
 801d952:	4e0e      	ldr	r6, [pc, #56]	; (801d98c <sbrk_aligned+0x3c>)
 801d954:	460c      	mov	r4, r1
 801d956:	6831      	ldr	r1, [r6, #0]
 801d958:	4605      	mov	r5, r0
 801d95a:	b911      	cbnz	r1, 801d962 <sbrk_aligned+0x12>
 801d95c:	f001 fcd0 	bl	801f300 <_sbrk_r>
 801d960:	6030      	str	r0, [r6, #0]
 801d962:	4621      	mov	r1, r4
 801d964:	4628      	mov	r0, r5
 801d966:	f001 fccb 	bl	801f300 <_sbrk_r>
 801d96a:	1c43      	adds	r3, r0, #1
 801d96c:	d00a      	beq.n	801d984 <sbrk_aligned+0x34>
 801d96e:	1cc4      	adds	r4, r0, #3
 801d970:	f024 0403 	bic.w	r4, r4, #3
 801d974:	42a0      	cmp	r0, r4
 801d976:	d007      	beq.n	801d988 <sbrk_aligned+0x38>
 801d978:	1a21      	subs	r1, r4, r0
 801d97a:	4628      	mov	r0, r5
 801d97c:	f001 fcc0 	bl	801f300 <_sbrk_r>
 801d980:	3001      	adds	r0, #1
 801d982:	d101      	bne.n	801d988 <sbrk_aligned+0x38>
 801d984:	f04f 34ff 	mov.w	r4, #4294967295
 801d988:	4620      	mov	r0, r4
 801d98a:	bd70      	pop	{r4, r5, r6, pc}
 801d98c:	20002980 	.word	0x20002980

0801d990 <_malloc_r>:
 801d990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d994:	1ccd      	adds	r5, r1, #3
 801d996:	f025 0503 	bic.w	r5, r5, #3
 801d99a:	3508      	adds	r5, #8
 801d99c:	2d0c      	cmp	r5, #12
 801d99e:	bf38      	it	cc
 801d9a0:	250c      	movcc	r5, #12
 801d9a2:	2d00      	cmp	r5, #0
 801d9a4:	4607      	mov	r7, r0
 801d9a6:	db01      	blt.n	801d9ac <_malloc_r+0x1c>
 801d9a8:	42a9      	cmp	r1, r5
 801d9aa:	d905      	bls.n	801d9b8 <_malloc_r+0x28>
 801d9ac:	230c      	movs	r3, #12
 801d9ae:	603b      	str	r3, [r7, #0]
 801d9b0:	2600      	movs	r6, #0
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d9b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801da8c <_malloc_r+0xfc>
 801d9bc:	f000 f868 	bl	801da90 <__malloc_lock>
 801d9c0:	f8d8 3000 	ldr.w	r3, [r8]
 801d9c4:	461c      	mov	r4, r3
 801d9c6:	bb5c      	cbnz	r4, 801da20 <_malloc_r+0x90>
 801d9c8:	4629      	mov	r1, r5
 801d9ca:	4638      	mov	r0, r7
 801d9cc:	f7ff ffc0 	bl	801d950 <sbrk_aligned>
 801d9d0:	1c43      	adds	r3, r0, #1
 801d9d2:	4604      	mov	r4, r0
 801d9d4:	d155      	bne.n	801da82 <_malloc_r+0xf2>
 801d9d6:	f8d8 4000 	ldr.w	r4, [r8]
 801d9da:	4626      	mov	r6, r4
 801d9dc:	2e00      	cmp	r6, #0
 801d9de:	d145      	bne.n	801da6c <_malloc_r+0xdc>
 801d9e0:	2c00      	cmp	r4, #0
 801d9e2:	d048      	beq.n	801da76 <_malloc_r+0xe6>
 801d9e4:	6823      	ldr	r3, [r4, #0]
 801d9e6:	4631      	mov	r1, r6
 801d9e8:	4638      	mov	r0, r7
 801d9ea:	eb04 0903 	add.w	r9, r4, r3
 801d9ee:	f001 fc87 	bl	801f300 <_sbrk_r>
 801d9f2:	4581      	cmp	r9, r0
 801d9f4:	d13f      	bne.n	801da76 <_malloc_r+0xe6>
 801d9f6:	6821      	ldr	r1, [r4, #0]
 801d9f8:	1a6d      	subs	r5, r5, r1
 801d9fa:	4629      	mov	r1, r5
 801d9fc:	4638      	mov	r0, r7
 801d9fe:	f7ff ffa7 	bl	801d950 <sbrk_aligned>
 801da02:	3001      	adds	r0, #1
 801da04:	d037      	beq.n	801da76 <_malloc_r+0xe6>
 801da06:	6823      	ldr	r3, [r4, #0]
 801da08:	442b      	add	r3, r5
 801da0a:	6023      	str	r3, [r4, #0]
 801da0c:	f8d8 3000 	ldr.w	r3, [r8]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d038      	beq.n	801da86 <_malloc_r+0xf6>
 801da14:	685a      	ldr	r2, [r3, #4]
 801da16:	42a2      	cmp	r2, r4
 801da18:	d12b      	bne.n	801da72 <_malloc_r+0xe2>
 801da1a:	2200      	movs	r2, #0
 801da1c:	605a      	str	r2, [r3, #4]
 801da1e:	e00f      	b.n	801da40 <_malloc_r+0xb0>
 801da20:	6822      	ldr	r2, [r4, #0]
 801da22:	1b52      	subs	r2, r2, r5
 801da24:	d41f      	bmi.n	801da66 <_malloc_r+0xd6>
 801da26:	2a0b      	cmp	r2, #11
 801da28:	d917      	bls.n	801da5a <_malloc_r+0xca>
 801da2a:	1961      	adds	r1, r4, r5
 801da2c:	42a3      	cmp	r3, r4
 801da2e:	6025      	str	r5, [r4, #0]
 801da30:	bf18      	it	ne
 801da32:	6059      	strne	r1, [r3, #4]
 801da34:	6863      	ldr	r3, [r4, #4]
 801da36:	bf08      	it	eq
 801da38:	f8c8 1000 	streq.w	r1, [r8]
 801da3c:	5162      	str	r2, [r4, r5]
 801da3e:	604b      	str	r3, [r1, #4]
 801da40:	4638      	mov	r0, r7
 801da42:	f104 060b 	add.w	r6, r4, #11
 801da46:	f000 f829 	bl	801da9c <__malloc_unlock>
 801da4a:	f026 0607 	bic.w	r6, r6, #7
 801da4e:	1d23      	adds	r3, r4, #4
 801da50:	1af2      	subs	r2, r6, r3
 801da52:	d0ae      	beq.n	801d9b2 <_malloc_r+0x22>
 801da54:	1b9b      	subs	r3, r3, r6
 801da56:	50a3      	str	r3, [r4, r2]
 801da58:	e7ab      	b.n	801d9b2 <_malloc_r+0x22>
 801da5a:	42a3      	cmp	r3, r4
 801da5c:	6862      	ldr	r2, [r4, #4]
 801da5e:	d1dd      	bne.n	801da1c <_malloc_r+0x8c>
 801da60:	f8c8 2000 	str.w	r2, [r8]
 801da64:	e7ec      	b.n	801da40 <_malloc_r+0xb0>
 801da66:	4623      	mov	r3, r4
 801da68:	6864      	ldr	r4, [r4, #4]
 801da6a:	e7ac      	b.n	801d9c6 <_malloc_r+0x36>
 801da6c:	4634      	mov	r4, r6
 801da6e:	6876      	ldr	r6, [r6, #4]
 801da70:	e7b4      	b.n	801d9dc <_malloc_r+0x4c>
 801da72:	4613      	mov	r3, r2
 801da74:	e7cc      	b.n	801da10 <_malloc_r+0x80>
 801da76:	230c      	movs	r3, #12
 801da78:	603b      	str	r3, [r7, #0]
 801da7a:	4638      	mov	r0, r7
 801da7c:	f000 f80e 	bl	801da9c <__malloc_unlock>
 801da80:	e797      	b.n	801d9b2 <_malloc_r+0x22>
 801da82:	6025      	str	r5, [r4, #0]
 801da84:	e7dc      	b.n	801da40 <_malloc_r+0xb0>
 801da86:	605b      	str	r3, [r3, #4]
 801da88:	deff      	udf	#255	; 0xff
 801da8a:	bf00      	nop
 801da8c:	2000297c 	.word	0x2000297c

0801da90 <__malloc_lock>:
 801da90:	4801      	ldr	r0, [pc, #4]	; (801da98 <__malloc_lock+0x8>)
 801da92:	f001 bc81 	b.w	801f398 <__retarget_lock_acquire_recursive>
 801da96:	bf00      	nop
 801da98:	20002ac4 	.word	0x20002ac4

0801da9c <__malloc_unlock>:
 801da9c:	4801      	ldr	r0, [pc, #4]	; (801daa4 <__malloc_unlock+0x8>)
 801da9e:	f001 bc7c 	b.w	801f39a <__retarget_lock_release_recursive>
 801daa2:	bf00      	nop
 801daa4:	20002ac4 	.word	0x20002ac4

0801daa8 <sulp>:
 801daa8:	b570      	push	{r4, r5, r6, lr}
 801daaa:	4604      	mov	r4, r0
 801daac:	460d      	mov	r5, r1
 801daae:	ec45 4b10 	vmov	d0, r4, r5
 801dab2:	4616      	mov	r6, r2
 801dab4:	f002 fbb0 	bl	8020218 <__ulp>
 801dab8:	ec51 0b10 	vmov	r0, r1, d0
 801dabc:	b17e      	cbz	r6, 801dade <sulp+0x36>
 801dabe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	dd09      	ble.n	801dade <sulp+0x36>
 801daca:	051b      	lsls	r3, r3, #20
 801dacc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dad0:	2400      	movs	r4, #0
 801dad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dad6:	4622      	mov	r2, r4
 801dad8:	462b      	mov	r3, r5
 801dada:	f7e2 fd9d 	bl	8000618 <__aeabi_dmul>
 801dade:	bd70      	pop	{r4, r5, r6, pc}

0801dae0 <_strtod_l>:
 801dae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae4:	ed2d 8b02 	vpush	{d8}
 801dae8:	b09b      	sub	sp, #108	; 0x6c
 801daea:	4604      	mov	r4, r0
 801daec:	9213      	str	r2, [sp, #76]	; 0x4c
 801daee:	2200      	movs	r2, #0
 801daf0:	9216      	str	r2, [sp, #88]	; 0x58
 801daf2:	460d      	mov	r5, r1
 801daf4:	f04f 0800 	mov.w	r8, #0
 801daf8:	f04f 0900 	mov.w	r9, #0
 801dafc:	460a      	mov	r2, r1
 801dafe:	9215      	str	r2, [sp, #84]	; 0x54
 801db00:	7811      	ldrb	r1, [r2, #0]
 801db02:	292b      	cmp	r1, #43	; 0x2b
 801db04:	d04c      	beq.n	801dba0 <_strtod_l+0xc0>
 801db06:	d83a      	bhi.n	801db7e <_strtod_l+0x9e>
 801db08:	290d      	cmp	r1, #13
 801db0a:	d834      	bhi.n	801db76 <_strtod_l+0x96>
 801db0c:	2908      	cmp	r1, #8
 801db0e:	d834      	bhi.n	801db7a <_strtod_l+0x9a>
 801db10:	2900      	cmp	r1, #0
 801db12:	d03d      	beq.n	801db90 <_strtod_l+0xb0>
 801db14:	2200      	movs	r2, #0
 801db16:	920a      	str	r2, [sp, #40]	; 0x28
 801db18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801db1a:	7832      	ldrb	r2, [r6, #0]
 801db1c:	2a30      	cmp	r2, #48	; 0x30
 801db1e:	f040 80b4 	bne.w	801dc8a <_strtod_l+0x1aa>
 801db22:	7872      	ldrb	r2, [r6, #1]
 801db24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801db28:	2a58      	cmp	r2, #88	; 0x58
 801db2a:	d170      	bne.n	801dc0e <_strtod_l+0x12e>
 801db2c:	9302      	str	r3, [sp, #8]
 801db2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db30:	9301      	str	r3, [sp, #4]
 801db32:	ab16      	add	r3, sp, #88	; 0x58
 801db34:	9300      	str	r3, [sp, #0]
 801db36:	4a8e      	ldr	r2, [pc, #568]	; (801dd70 <_strtod_l+0x290>)
 801db38:	ab17      	add	r3, sp, #92	; 0x5c
 801db3a:	a915      	add	r1, sp, #84	; 0x54
 801db3c:	4620      	mov	r0, r4
 801db3e:	f001 fcfd 	bl	801f53c <__gethex>
 801db42:	f010 070f 	ands.w	r7, r0, #15
 801db46:	4605      	mov	r5, r0
 801db48:	d005      	beq.n	801db56 <_strtod_l+0x76>
 801db4a:	2f06      	cmp	r7, #6
 801db4c:	d12a      	bne.n	801dba4 <_strtod_l+0xc4>
 801db4e:	3601      	adds	r6, #1
 801db50:	2300      	movs	r3, #0
 801db52:	9615      	str	r6, [sp, #84]	; 0x54
 801db54:	930a      	str	r3, [sp, #40]	; 0x28
 801db56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db58:	2b00      	cmp	r3, #0
 801db5a:	f040 857f 	bne.w	801e65c <_strtod_l+0xb7c>
 801db5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db60:	b1db      	cbz	r3, 801db9a <_strtod_l+0xba>
 801db62:	4642      	mov	r2, r8
 801db64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801db68:	ec43 2b10 	vmov	d0, r2, r3
 801db6c:	b01b      	add	sp, #108	; 0x6c
 801db6e:	ecbd 8b02 	vpop	{d8}
 801db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db76:	2920      	cmp	r1, #32
 801db78:	d1cc      	bne.n	801db14 <_strtod_l+0x34>
 801db7a:	3201      	adds	r2, #1
 801db7c:	e7bf      	b.n	801dafe <_strtod_l+0x1e>
 801db7e:	292d      	cmp	r1, #45	; 0x2d
 801db80:	d1c8      	bne.n	801db14 <_strtod_l+0x34>
 801db82:	2101      	movs	r1, #1
 801db84:	910a      	str	r1, [sp, #40]	; 0x28
 801db86:	1c51      	adds	r1, r2, #1
 801db88:	9115      	str	r1, [sp, #84]	; 0x54
 801db8a:	7852      	ldrb	r2, [r2, #1]
 801db8c:	2a00      	cmp	r2, #0
 801db8e:	d1c3      	bne.n	801db18 <_strtod_l+0x38>
 801db90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db92:	9515      	str	r5, [sp, #84]	; 0x54
 801db94:	2b00      	cmp	r3, #0
 801db96:	f040 855f 	bne.w	801e658 <_strtod_l+0xb78>
 801db9a:	4642      	mov	r2, r8
 801db9c:	464b      	mov	r3, r9
 801db9e:	e7e3      	b.n	801db68 <_strtod_l+0x88>
 801dba0:	2100      	movs	r1, #0
 801dba2:	e7ef      	b.n	801db84 <_strtod_l+0xa4>
 801dba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dba6:	b13a      	cbz	r2, 801dbb8 <_strtod_l+0xd8>
 801dba8:	2135      	movs	r1, #53	; 0x35
 801dbaa:	a818      	add	r0, sp, #96	; 0x60
 801dbac:	f002 fc31 	bl	8020412 <__copybits>
 801dbb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dbb2:	4620      	mov	r0, r4
 801dbb4:	f002 f804 	bl	801fbc0 <_Bfree>
 801dbb8:	3f01      	subs	r7, #1
 801dbba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dbbc:	2f04      	cmp	r7, #4
 801dbbe:	d806      	bhi.n	801dbce <_strtod_l+0xee>
 801dbc0:	e8df f007 	tbb	[pc, r7]
 801dbc4:	201d0314 	.word	0x201d0314
 801dbc8:	14          	.byte	0x14
 801dbc9:	00          	.byte	0x00
 801dbca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801dbce:	05e9      	lsls	r1, r5, #23
 801dbd0:	bf48      	it	mi
 801dbd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801dbd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dbda:	0d1b      	lsrs	r3, r3, #20
 801dbdc:	051b      	lsls	r3, r3, #20
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d1b9      	bne.n	801db56 <_strtod_l+0x76>
 801dbe2:	f001 fbaf 	bl	801f344 <__errno>
 801dbe6:	2322      	movs	r3, #34	; 0x22
 801dbe8:	6003      	str	r3, [r0, #0]
 801dbea:	e7b4      	b.n	801db56 <_strtod_l+0x76>
 801dbec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801dbf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dbf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dbf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801dbfc:	e7e7      	b.n	801dbce <_strtod_l+0xee>
 801dbfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801dd78 <_strtod_l+0x298>
 801dc02:	e7e4      	b.n	801dbce <_strtod_l+0xee>
 801dc04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dc08:	f04f 38ff 	mov.w	r8, #4294967295
 801dc0c:	e7df      	b.n	801dbce <_strtod_l+0xee>
 801dc0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc10:	1c5a      	adds	r2, r3, #1
 801dc12:	9215      	str	r2, [sp, #84]	; 0x54
 801dc14:	785b      	ldrb	r3, [r3, #1]
 801dc16:	2b30      	cmp	r3, #48	; 0x30
 801dc18:	d0f9      	beq.n	801dc0e <_strtod_l+0x12e>
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d09b      	beq.n	801db56 <_strtod_l+0x76>
 801dc1e:	2301      	movs	r3, #1
 801dc20:	f04f 0a00 	mov.w	sl, #0
 801dc24:	9304      	str	r3, [sp, #16]
 801dc26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc28:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801dc2e:	46d3      	mov	fp, sl
 801dc30:	220a      	movs	r2, #10
 801dc32:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dc34:	7806      	ldrb	r6, [r0, #0]
 801dc36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801dc3a:	b2d9      	uxtb	r1, r3
 801dc3c:	2909      	cmp	r1, #9
 801dc3e:	d926      	bls.n	801dc8e <_strtod_l+0x1ae>
 801dc40:	494c      	ldr	r1, [pc, #304]	; (801dd74 <_strtod_l+0x294>)
 801dc42:	2201      	movs	r2, #1
 801dc44:	f001 fb16 	bl	801f274 <strncmp>
 801dc48:	2800      	cmp	r0, #0
 801dc4a:	d030      	beq.n	801dcae <_strtod_l+0x1ce>
 801dc4c:	2000      	movs	r0, #0
 801dc4e:	4632      	mov	r2, r6
 801dc50:	9005      	str	r0, [sp, #20]
 801dc52:	465e      	mov	r6, fp
 801dc54:	4603      	mov	r3, r0
 801dc56:	2a65      	cmp	r2, #101	; 0x65
 801dc58:	d001      	beq.n	801dc5e <_strtod_l+0x17e>
 801dc5a:	2a45      	cmp	r2, #69	; 0x45
 801dc5c:	d113      	bne.n	801dc86 <_strtod_l+0x1a6>
 801dc5e:	b91e      	cbnz	r6, 801dc68 <_strtod_l+0x188>
 801dc60:	9a04      	ldr	r2, [sp, #16]
 801dc62:	4302      	orrs	r2, r0
 801dc64:	d094      	beq.n	801db90 <_strtod_l+0xb0>
 801dc66:	2600      	movs	r6, #0
 801dc68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801dc6a:	1c6a      	adds	r2, r5, #1
 801dc6c:	9215      	str	r2, [sp, #84]	; 0x54
 801dc6e:	786a      	ldrb	r2, [r5, #1]
 801dc70:	2a2b      	cmp	r2, #43	; 0x2b
 801dc72:	d074      	beq.n	801dd5e <_strtod_l+0x27e>
 801dc74:	2a2d      	cmp	r2, #45	; 0x2d
 801dc76:	d078      	beq.n	801dd6a <_strtod_l+0x28a>
 801dc78:	f04f 0c00 	mov.w	ip, #0
 801dc7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dc80:	2909      	cmp	r1, #9
 801dc82:	d97f      	bls.n	801dd84 <_strtod_l+0x2a4>
 801dc84:	9515      	str	r5, [sp, #84]	; 0x54
 801dc86:	2700      	movs	r7, #0
 801dc88:	e09e      	b.n	801ddc8 <_strtod_l+0x2e8>
 801dc8a:	2300      	movs	r3, #0
 801dc8c:	e7c8      	b.n	801dc20 <_strtod_l+0x140>
 801dc8e:	f1bb 0f08 	cmp.w	fp, #8
 801dc92:	bfd8      	it	le
 801dc94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801dc96:	f100 0001 	add.w	r0, r0, #1
 801dc9a:	bfda      	itte	le
 801dc9c:	fb02 3301 	mlale	r3, r2, r1, r3
 801dca0:	9309      	strle	r3, [sp, #36]	; 0x24
 801dca2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801dca6:	f10b 0b01 	add.w	fp, fp, #1
 801dcaa:	9015      	str	r0, [sp, #84]	; 0x54
 801dcac:	e7c1      	b.n	801dc32 <_strtod_l+0x152>
 801dcae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcb0:	1c5a      	adds	r2, r3, #1
 801dcb2:	9215      	str	r2, [sp, #84]	; 0x54
 801dcb4:	785a      	ldrb	r2, [r3, #1]
 801dcb6:	f1bb 0f00 	cmp.w	fp, #0
 801dcba:	d037      	beq.n	801dd2c <_strtod_l+0x24c>
 801dcbc:	9005      	str	r0, [sp, #20]
 801dcbe:	465e      	mov	r6, fp
 801dcc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801dcc4:	2b09      	cmp	r3, #9
 801dcc6:	d912      	bls.n	801dcee <_strtod_l+0x20e>
 801dcc8:	2301      	movs	r3, #1
 801dcca:	e7c4      	b.n	801dc56 <_strtod_l+0x176>
 801dccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcce:	1c5a      	adds	r2, r3, #1
 801dcd0:	9215      	str	r2, [sp, #84]	; 0x54
 801dcd2:	785a      	ldrb	r2, [r3, #1]
 801dcd4:	3001      	adds	r0, #1
 801dcd6:	2a30      	cmp	r2, #48	; 0x30
 801dcd8:	d0f8      	beq.n	801dccc <_strtod_l+0x1ec>
 801dcda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dcde:	2b08      	cmp	r3, #8
 801dce0:	f200 84c1 	bhi.w	801e666 <_strtod_l+0xb86>
 801dce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dce6:	9005      	str	r0, [sp, #20]
 801dce8:	2000      	movs	r0, #0
 801dcea:	930b      	str	r3, [sp, #44]	; 0x2c
 801dcec:	4606      	mov	r6, r0
 801dcee:	3a30      	subs	r2, #48	; 0x30
 801dcf0:	f100 0301 	add.w	r3, r0, #1
 801dcf4:	d014      	beq.n	801dd20 <_strtod_l+0x240>
 801dcf6:	9905      	ldr	r1, [sp, #20]
 801dcf8:	4419      	add	r1, r3
 801dcfa:	9105      	str	r1, [sp, #20]
 801dcfc:	4633      	mov	r3, r6
 801dcfe:	eb00 0c06 	add.w	ip, r0, r6
 801dd02:	210a      	movs	r1, #10
 801dd04:	4563      	cmp	r3, ip
 801dd06:	d113      	bne.n	801dd30 <_strtod_l+0x250>
 801dd08:	1833      	adds	r3, r6, r0
 801dd0a:	2b08      	cmp	r3, #8
 801dd0c:	f106 0601 	add.w	r6, r6, #1
 801dd10:	4406      	add	r6, r0
 801dd12:	dc1a      	bgt.n	801dd4a <_strtod_l+0x26a>
 801dd14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd16:	230a      	movs	r3, #10
 801dd18:	fb03 2301 	mla	r3, r3, r1, r2
 801dd1c:	9309      	str	r3, [sp, #36]	; 0x24
 801dd1e:	2300      	movs	r3, #0
 801dd20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dd22:	1c51      	adds	r1, r2, #1
 801dd24:	9115      	str	r1, [sp, #84]	; 0x54
 801dd26:	7852      	ldrb	r2, [r2, #1]
 801dd28:	4618      	mov	r0, r3
 801dd2a:	e7c9      	b.n	801dcc0 <_strtod_l+0x1e0>
 801dd2c:	4658      	mov	r0, fp
 801dd2e:	e7d2      	b.n	801dcd6 <_strtod_l+0x1f6>
 801dd30:	2b08      	cmp	r3, #8
 801dd32:	f103 0301 	add.w	r3, r3, #1
 801dd36:	dc03      	bgt.n	801dd40 <_strtod_l+0x260>
 801dd38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dd3a:	434f      	muls	r7, r1
 801dd3c:	9709      	str	r7, [sp, #36]	; 0x24
 801dd3e:	e7e1      	b.n	801dd04 <_strtod_l+0x224>
 801dd40:	2b10      	cmp	r3, #16
 801dd42:	bfd8      	it	le
 801dd44:	fb01 fa0a 	mulle.w	sl, r1, sl
 801dd48:	e7dc      	b.n	801dd04 <_strtod_l+0x224>
 801dd4a:	2e10      	cmp	r6, #16
 801dd4c:	bfdc      	itt	le
 801dd4e:	230a      	movle	r3, #10
 801dd50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801dd54:	e7e3      	b.n	801dd1e <_strtod_l+0x23e>
 801dd56:	2300      	movs	r3, #0
 801dd58:	9305      	str	r3, [sp, #20]
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	e780      	b.n	801dc60 <_strtod_l+0x180>
 801dd5e:	f04f 0c00 	mov.w	ip, #0
 801dd62:	1caa      	adds	r2, r5, #2
 801dd64:	9215      	str	r2, [sp, #84]	; 0x54
 801dd66:	78aa      	ldrb	r2, [r5, #2]
 801dd68:	e788      	b.n	801dc7c <_strtod_l+0x19c>
 801dd6a:	f04f 0c01 	mov.w	ip, #1
 801dd6e:	e7f8      	b.n	801dd62 <_strtod_l+0x282>
 801dd70:	08023c3c 	.word	0x08023c3c
 801dd74:	08023c2c 	.word	0x08023c2c
 801dd78:	7ff00000 	.word	0x7ff00000
 801dd7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dd7e:	1c51      	adds	r1, r2, #1
 801dd80:	9115      	str	r1, [sp, #84]	; 0x54
 801dd82:	7852      	ldrb	r2, [r2, #1]
 801dd84:	2a30      	cmp	r2, #48	; 0x30
 801dd86:	d0f9      	beq.n	801dd7c <_strtod_l+0x29c>
 801dd88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801dd8c:	2908      	cmp	r1, #8
 801dd8e:	f63f af7a 	bhi.w	801dc86 <_strtod_l+0x1a6>
 801dd92:	3a30      	subs	r2, #48	; 0x30
 801dd94:	9208      	str	r2, [sp, #32]
 801dd96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dd98:	920c      	str	r2, [sp, #48]	; 0x30
 801dd9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dd9c:	1c57      	adds	r7, r2, #1
 801dd9e:	9715      	str	r7, [sp, #84]	; 0x54
 801dda0:	7852      	ldrb	r2, [r2, #1]
 801dda2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801dda6:	f1be 0f09 	cmp.w	lr, #9
 801ddaa:	d938      	bls.n	801de1e <_strtod_l+0x33e>
 801ddac:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ddae:	1a7f      	subs	r7, r7, r1
 801ddb0:	2f08      	cmp	r7, #8
 801ddb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801ddb6:	dc03      	bgt.n	801ddc0 <_strtod_l+0x2e0>
 801ddb8:	9908      	ldr	r1, [sp, #32]
 801ddba:	428f      	cmp	r7, r1
 801ddbc:	bfa8      	it	ge
 801ddbe:	460f      	movge	r7, r1
 801ddc0:	f1bc 0f00 	cmp.w	ip, #0
 801ddc4:	d000      	beq.n	801ddc8 <_strtod_l+0x2e8>
 801ddc6:	427f      	negs	r7, r7
 801ddc8:	2e00      	cmp	r6, #0
 801ddca:	d14f      	bne.n	801de6c <_strtod_l+0x38c>
 801ddcc:	9904      	ldr	r1, [sp, #16]
 801ddce:	4301      	orrs	r1, r0
 801ddd0:	f47f aec1 	bne.w	801db56 <_strtod_l+0x76>
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	f47f aedb 	bne.w	801db90 <_strtod_l+0xb0>
 801ddda:	2a69      	cmp	r2, #105	; 0x69
 801dddc:	d029      	beq.n	801de32 <_strtod_l+0x352>
 801ddde:	dc26      	bgt.n	801de2e <_strtod_l+0x34e>
 801dde0:	2a49      	cmp	r2, #73	; 0x49
 801dde2:	d026      	beq.n	801de32 <_strtod_l+0x352>
 801dde4:	2a4e      	cmp	r2, #78	; 0x4e
 801dde6:	f47f aed3 	bne.w	801db90 <_strtod_l+0xb0>
 801ddea:	499b      	ldr	r1, [pc, #620]	; (801e058 <_strtod_l+0x578>)
 801ddec:	a815      	add	r0, sp, #84	; 0x54
 801ddee:	f001 fde5 	bl	801f9bc <__match>
 801ddf2:	2800      	cmp	r0, #0
 801ddf4:	f43f aecc 	beq.w	801db90 <_strtod_l+0xb0>
 801ddf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ddfa:	781b      	ldrb	r3, [r3, #0]
 801ddfc:	2b28      	cmp	r3, #40	; 0x28
 801ddfe:	d12f      	bne.n	801de60 <_strtod_l+0x380>
 801de00:	4996      	ldr	r1, [pc, #600]	; (801e05c <_strtod_l+0x57c>)
 801de02:	aa18      	add	r2, sp, #96	; 0x60
 801de04:	a815      	add	r0, sp, #84	; 0x54
 801de06:	f001 fded 	bl	801f9e4 <__hexnan>
 801de0a:	2805      	cmp	r0, #5
 801de0c:	d128      	bne.n	801de60 <_strtod_l+0x380>
 801de0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801de14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801de18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801de1c:	e69b      	b.n	801db56 <_strtod_l+0x76>
 801de1e:	9f08      	ldr	r7, [sp, #32]
 801de20:	210a      	movs	r1, #10
 801de22:	fb01 2107 	mla	r1, r1, r7, r2
 801de26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801de2a:	9208      	str	r2, [sp, #32]
 801de2c:	e7b5      	b.n	801dd9a <_strtod_l+0x2ba>
 801de2e:	2a6e      	cmp	r2, #110	; 0x6e
 801de30:	e7d9      	b.n	801dde6 <_strtod_l+0x306>
 801de32:	498b      	ldr	r1, [pc, #556]	; (801e060 <_strtod_l+0x580>)
 801de34:	a815      	add	r0, sp, #84	; 0x54
 801de36:	f001 fdc1 	bl	801f9bc <__match>
 801de3a:	2800      	cmp	r0, #0
 801de3c:	f43f aea8 	beq.w	801db90 <_strtod_l+0xb0>
 801de40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de42:	4988      	ldr	r1, [pc, #544]	; (801e064 <_strtod_l+0x584>)
 801de44:	3b01      	subs	r3, #1
 801de46:	a815      	add	r0, sp, #84	; 0x54
 801de48:	9315      	str	r3, [sp, #84]	; 0x54
 801de4a:	f001 fdb7 	bl	801f9bc <__match>
 801de4e:	b910      	cbnz	r0, 801de56 <_strtod_l+0x376>
 801de50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de52:	3301      	adds	r3, #1
 801de54:	9315      	str	r3, [sp, #84]	; 0x54
 801de56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801e074 <_strtod_l+0x594>
 801de5a:	f04f 0800 	mov.w	r8, #0
 801de5e:	e67a      	b.n	801db56 <_strtod_l+0x76>
 801de60:	4881      	ldr	r0, [pc, #516]	; (801e068 <_strtod_l+0x588>)
 801de62:	f001 faa9 	bl	801f3b8 <nan>
 801de66:	ec59 8b10 	vmov	r8, r9, d0
 801de6a:	e674      	b.n	801db56 <_strtod_l+0x76>
 801de6c:	9b05      	ldr	r3, [sp, #20]
 801de6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de70:	1afb      	subs	r3, r7, r3
 801de72:	f1bb 0f00 	cmp.w	fp, #0
 801de76:	bf08      	it	eq
 801de78:	46b3      	moveq	fp, r6
 801de7a:	2e10      	cmp	r6, #16
 801de7c:	9308      	str	r3, [sp, #32]
 801de7e:	4635      	mov	r5, r6
 801de80:	bfa8      	it	ge
 801de82:	2510      	movge	r5, #16
 801de84:	f7e2 fb4e 	bl	8000524 <__aeabi_ui2d>
 801de88:	2e09      	cmp	r6, #9
 801de8a:	4680      	mov	r8, r0
 801de8c:	4689      	mov	r9, r1
 801de8e:	dd13      	ble.n	801deb8 <_strtod_l+0x3d8>
 801de90:	4b76      	ldr	r3, [pc, #472]	; (801e06c <_strtod_l+0x58c>)
 801de92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801de96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801de9a:	f7e2 fbbd 	bl	8000618 <__aeabi_dmul>
 801de9e:	4680      	mov	r8, r0
 801dea0:	4650      	mov	r0, sl
 801dea2:	4689      	mov	r9, r1
 801dea4:	f7e2 fb3e 	bl	8000524 <__aeabi_ui2d>
 801dea8:	4602      	mov	r2, r0
 801deaa:	460b      	mov	r3, r1
 801deac:	4640      	mov	r0, r8
 801deae:	4649      	mov	r1, r9
 801deb0:	f7e2 f9fc 	bl	80002ac <__adddf3>
 801deb4:	4680      	mov	r8, r0
 801deb6:	4689      	mov	r9, r1
 801deb8:	2e0f      	cmp	r6, #15
 801deba:	dc38      	bgt.n	801df2e <_strtod_l+0x44e>
 801debc:	9b08      	ldr	r3, [sp, #32]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	f43f ae49 	beq.w	801db56 <_strtod_l+0x76>
 801dec4:	dd24      	ble.n	801df10 <_strtod_l+0x430>
 801dec6:	2b16      	cmp	r3, #22
 801dec8:	dc0b      	bgt.n	801dee2 <_strtod_l+0x402>
 801deca:	4968      	ldr	r1, [pc, #416]	; (801e06c <_strtod_l+0x58c>)
 801decc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ded0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ded4:	4642      	mov	r2, r8
 801ded6:	464b      	mov	r3, r9
 801ded8:	f7e2 fb9e 	bl	8000618 <__aeabi_dmul>
 801dedc:	4680      	mov	r8, r0
 801dede:	4689      	mov	r9, r1
 801dee0:	e639      	b.n	801db56 <_strtod_l+0x76>
 801dee2:	9a08      	ldr	r2, [sp, #32]
 801dee4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801dee8:	4293      	cmp	r3, r2
 801deea:	db20      	blt.n	801df2e <_strtod_l+0x44e>
 801deec:	4c5f      	ldr	r4, [pc, #380]	; (801e06c <_strtod_l+0x58c>)
 801deee:	f1c6 060f 	rsb	r6, r6, #15
 801def2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801def6:	4642      	mov	r2, r8
 801def8:	464b      	mov	r3, r9
 801defa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801defe:	f7e2 fb8b 	bl	8000618 <__aeabi_dmul>
 801df02:	9b08      	ldr	r3, [sp, #32]
 801df04:	1b9e      	subs	r6, r3, r6
 801df06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801df0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801df0e:	e7e3      	b.n	801ded8 <_strtod_l+0x3f8>
 801df10:	9b08      	ldr	r3, [sp, #32]
 801df12:	3316      	adds	r3, #22
 801df14:	db0b      	blt.n	801df2e <_strtod_l+0x44e>
 801df16:	9b05      	ldr	r3, [sp, #20]
 801df18:	1bdf      	subs	r7, r3, r7
 801df1a:	4b54      	ldr	r3, [pc, #336]	; (801e06c <_strtod_l+0x58c>)
 801df1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801df20:	e9d7 2300 	ldrd	r2, r3, [r7]
 801df24:	4640      	mov	r0, r8
 801df26:	4649      	mov	r1, r9
 801df28:	f7e2 fca0 	bl	800086c <__aeabi_ddiv>
 801df2c:	e7d6      	b.n	801dedc <_strtod_l+0x3fc>
 801df2e:	9b08      	ldr	r3, [sp, #32]
 801df30:	1b75      	subs	r5, r6, r5
 801df32:	441d      	add	r5, r3
 801df34:	2d00      	cmp	r5, #0
 801df36:	dd70      	ble.n	801e01a <_strtod_l+0x53a>
 801df38:	f015 030f 	ands.w	r3, r5, #15
 801df3c:	d00a      	beq.n	801df54 <_strtod_l+0x474>
 801df3e:	494b      	ldr	r1, [pc, #300]	; (801e06c <_strtod_l+0x58c>)
 801df40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801df44:	4642      	mov	r2, r8
 801df46:	464b      	mov	r3, r9
 801df48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df4c:	f7e2 fb64 	bl	8000618 <__aeabi_dmul>
 801df50:	4680      	mov	r8, r0
 801df52:	4689      	mov	r9, r1
 801df54:	f035 050f 	bics.w	r5, r5, #15
 801df58:	d04d      	beq.n	801dff6 <_strtod_l+0x516>
 801df5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801df5e:	dd22      	ble.n	801dfa6 <_strtod_l+0x4c6>
 801df60:	2500      	movs	r5, #0
 801df62:	46ab      	mov	fp, r5
 801df64:	9509      	str	r5, [sp, #36]	; 0x24
 801df66:	9505      	str	r5, [sp, #20]
 801df68:	2322      	movs	r3, #34	; 0x22
 801df6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e074 <_strtod_l+0x594>
 801df6e:	6023      	str	r3, [r4, #0]
 801df70:	f04f 0800 	mov.w	r8, #0
 801df74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df76:	2b00      	cmp	r3, #0
 801df78:	f43f aded 	beq.w	801db56 <_strtod_l+0x76>
 801df7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801df7e:	4620      	mov	r0, r4
 801df80:	f001 fe1e 	bl	801fbc0 <_Bfree>
 801df84:	9905      	ldr	r1, [sp, #20]
 801df86:	4620      	mov	r0, r4
 801df88:	f001 fe1a 	bl	801fbc0 <_Bfree>
 801df8c:	4659      	mov	r1, fp
 801df8e:	4620      	mov	r0, r4
 801df90:	f001 fe16 	bl	801fbc0 <_Bfree>
 801df94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801df96:	4620      	mov	r0, r4
 801df98:	f001 fe12 	bl	801fbc0 <_Bfree>
 801df9c:	4629      	mov	r1, r5
 801df9e:	4620      	mov	r0, r4
 801dfa0:	f001 fe0e 	bl	801fbc0 <_Bfree>
 801dfa4:	e5d7      	b.n	801db56 <_strtod_l+0x76>
 801dfa6:	4b32      	ldr	r3, [pc, #200]	; (801e070 <_strtod_l+0x590>)
 801dfa8:	9304      	str	r3, [sp, #16]
 801dfaa:	2300      	movs	r3, #0
 801dfac:	112d      	asrs	r5, r5, #4
 801dfae:	4640      	mov	r0, r8
 801dfb0:	4649      	mov	r1, r9
 801dfb2:	469a      	mov	sl, r3
 801dfb4:	2d01      	cmp	r5, #1
 801dfb6:	dc21      	bgt.n	801dffc <_strtod_l+0x51c>
 801dfb8:	b10b      	cbz	r3, 801dfbe <_strtod_l+0x4de>
 801dfba:	4680      	mov	r8, r0
 801dfbc:	4689      	mov	r9, r1
 801dfbe:	492c      	ldr	r1, [pc, #176]	; (801e070 <_strtod_l+0x590>)
 801dfc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801dfc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801dfc8:	4642      	mov	r2, r8
 801dfca:	464b      	mov	r3, r9
 801dfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dfd0:	f7e2 fb22 	bl	8000618 <__aeabi_dmul>
 801dfd4:	4b27      	ldr	r3, [pc, #156]	; (801e074 <_strtod_l+0x594>)
 801dfd6:	460a      	mov	r2, r1
 801dfd8:	400b      	ands	r3, r1
 801dfda:	4927      	ldr	r1, [pc, #156]	; (801e078 <_strtod_l+0x598>)
 801dfdc:	428b      	cmp	r3, r1
 801dfde:	4680      	mov	r8, r0
 801dfe0:	d8be      	bhi.n	801df60 <_strtod_l+0x480>
 801dfe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801dfe6:	428b      	cmp	r3, r1
 801dfe8:	bf86      	itte	hi
 801dfea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801e07c <_strtod_l+0x59c>
 801dfee:	f04f 38ff 	movhi.w	r8, #4294967295
 801dff2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801dff6:	2300      	movs	r3, #0
 801dff8:	9304      	str	r3, [sp, #16]
 801dffa:	e07b      	b.n	801e0f4 <_strtod_l+0x614>
 801dffc:	07ea      	lsls	r2, r5, #31
 801dffe:	d505      	bpl.n	801e00c <_strtod_l+0x52c>
 801e000:	9b04      	ldr	r3, [sp, #16]
 801e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e006:	f7e2 fb07 	bl	8000618 <__aeabi_dmul>
 801e00a:	2301      	movs	r3, #1
 801e00c:	9a04      	ldr	r2, [sp, #16]
 801e00e:	3208      	adds	r2, #8
 801e010:	f10a 0a01 	add.w	sl, sl, #1
 801e014:	106d      	asrs	r5, r5, #1
 801e016:	9204      	str	r2, [sp, #16]
 801e018:	e7cc      	b.n	801dfb4 <_strtod_l+0x4d4>
 801e01a:	d0ec      	beq.n	801dff6 <_strtod_l+0x516>
 801e01c:	426d      	negs	r5, r5
 801e01e:	f015 020f 	ands.w	r2, r5, #15
 801e022:	d00a      	beq.n	801e03a <_strtod_l+0x55a>
 801e024:	4b11      	ldr	r3, [pc, #68]	; (801e06c <_strtod_l+0x58c>)
 801e026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e02a:	4640      	mov	r0, r8
 801e02c:	4649      	mov	r1, r9
 801e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e032:	f7e2 fc1b 	bl	800086c <__aeabi_ddiv>
 801e036:	4680      	mov	r8, r0
 801e038:	4689      	mov	r9, r1
 801e03a:	112d      	asrs	r5, r5, #4
 801e03c:	d0db      	beq.n	801dff6 <_strtod_l+0x516>
 801e03e:	2d1f      	cmp	r5, #31
 801e040:	dd1e      	ble.n	801e080 <_strtod_l+0x5a0>
 801e042:	2500      	movs	r5, #0
 801e044:	46ab      	mov	fp, r5
 801e046:	9509      	str	r5, [sp, #36]	; 0x24
 801e048:	9505      	str	r5, [sp, #20]
 801e04a:	2322      	movs	r3, #34	; 0x22
 801e04c:	f04f 0800 	mov.w	r8, #0
 801e050:	f04f 0900 	mov.w	r9, #0
 801e054:	6023      	str	r3, [r4, #0]
 801e056:	e78d      	b.n	801df74 <_strtod_l+0x494>
 801e058:	08023c37 	.word	0x08023c37
 801e05c:	08023c50 	.word	0x08023c50
 801e060:	08023c2e 	.word	0x08023c2e
 801e064:	08023c31 	.word	0x08023c31
 801e068:	08023fea 	.word	0x08023fea
 801e06c:	08023ea8 	.word	0x08023ea8
 801e070:	08023e80 	.word	0x08023e80
 801e074:	7ff00000 	.word	0x7ff00000
 801e078:	7ca00000 	.word	0x7ca00000
 801e07c:	7fefffff 	.word	0x7fefffff
 801e080:	f015 0310 	ands.w	r3, r5, #16
 801e084:	bf18      	it	ne
 801e086:	236a      	movne	r3, #106	; 0x6a
 801e088:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e42c <_strtod_l+0x94c>
 801e08c:	9304      	str	r3, [sp, #16]
 801e08e:	4640      	mov	r0, r8
 801e090:	4649      	mov	r1, r9
 801e092:	2300      	movs	r3, #0
 801e094:	07ea      	lsls	r2, r5, #31
 801e096:	d504      	bpl.n	801e0a2 <_strtod_l+0x5c2>
 801e098:	e9da 2300 	ldrd	r2, r3, [sl]
 801e09c:	f7e2 fabc 	bl	8000618 <__aeabi_dmul>
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	106d      	asrs	r5, r5, #1
 801e0a4:	f10a 0a08 	add.w	sl, sl, #8
 801e0a8:	d1f4      	bne.n	801e094 <_strtod_l+0x5b4>
 801e0aa:	b10b      	cbz	r3, 801e0b0 <_strtod_l+0x5d0>
 801e0ac:	4680      	mov	r8, r0
 801e0ae:	4689      	mov	r9, r1
 801e0b0:	9b04      	ldr	r3, [sp, #16]
 801e0b2:	b1bb      	cbz	r3, 801e0e4 <_strtod_l+0x604>
 801e0b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e0b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	4649      	mov	r1, r9
 801e0c0:	dd10      	ble.n	801e0e4 <_strtod_l+0x604>
 801e0c2:	2b1f      	cmp	r3, #31
 801e0c4:	f340 811e 	ble.w	801e304 <_strtod_l+0x824>
 801e0c8:	2b34      	cmp	r3, #52	; 0x34
 801e0ca:	bfde      	ittt	le
 801e0cc:	f04f 33ff 	movle.w	r3, #4294967295
 801e0d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801e0d4:	4093      	lslle	r3, r2
 801e0d6:	f04f 0800 	mov.w	r8, #0
 801e0da:	bfcc      	ite	gt
 801e0dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e0e0:	ea03 0901 	andle.w	r9, r3, r1
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	4640      	mov	r0, r8
 801e0ea:	4649      	mov	r1, r9
 801e0ec:	f7e2 fcfc 	bl	8000ae8 <__aeabi_dcmpeq>
 801e0f0:	2800      	cmp	r0, #0
 801e0f2:	d1a6      	bne.n	801e042 <_strtod_l+0x562>
 801e0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0f6:	9300      	str	r3, [sp, #0]
 801e0f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e0fa:	4633      	mov	r3, r6
 801e0fc:	465a      	mov	r2, fp
 801e0fe:	4620      	mov	r0, r4
 801e100:	f001 fdc6 	bl	801fc90 <__s2b>
 801e104:	9009      	str	r0, [sp, #36]	; 0x24
 801e106:	2800      	cmp	r0, #0
 801e108:	f43f af2a 	beq.w	801df60 <_strtod_l+0x480>
 801e10c:	9a08      	ldr	r2, [sp, #32]
 801e10e:	9b05      	ldr	r3, [sp, #20]
 801e110:	2a00      	cmp	r2, #0
 801e112:	eba3 0307 	sub.w	r3, r3, r7
 801e116:	bfa8      	it	ge
 801e118:	2300      	movge	r3, #0
 801e11a:	930c      	str	r3, [sp, #48]	; 0x30
 801e11c:	2500      	movs	r5, #0
 801e11e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e122:	9312      	str	r3, [sp, #72]	; 0x48
 801e124:	46ab      	mov	fp, r5
 801e126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e128:	4620      	mov	r0, r4
 801e12a:	6859      	ldr	r1, [r3, #4]
 801e12c:	f001 fd08 	bl	801fb40 <_Balloc>
 801e130:	9005      	str	r0, [sp, #20]
 801e132:	2800      	cmp	r0, #0
 801e134:	f43f af18 	beq.w	801df68 <_strtod_l+0x488>
 801e138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e13a:	691a      	ldr	r2, [r3, #16]
 801e13c:	3202      	adds	r2, #2
 801e13e:	f103 010c 	add.w	r1, r3, #12
 801e142:	0092      	lsls	r2, r2, #2
 801e144:	300c      	adds	r0, #12
 801e146:	f001 f929 	bl	801f39c <memcpy>
 801e14a:	ec49 8b10 	vmov	d0, r8, r9
 801e14e:	aa18      	add	r2, sp, #96	; 0x60
 801e150:	a917      	add	r1, sp, #92	; 0x5c
 801e152:	4620      	mov	r0, r4
 801e154:	f002 f8d0 	bl	80202f8 <__d2b>
 801e158:	ec49 8b18 	vmov	d8, r8, r9
 801e15c:	9016      	str	r0, [sp, #88]	; 0x58
 801e15e:	2800      	cmp	r0, #0
 801e160:	f43f af02 	beq.w	801df68 <_strtod_l+0x488>
 801e164:	2101      	movs	r1, #1
 801e166:	4620      	mov	r0, r4
 801e168:	f001 fe2a 	bl	801fdc0 <__i2b>
 801e16c:	4683      	mov	fp, r0
 801e16e:	2800      	cmp	r0, #0
 801e170:	f43f aefa 	beq.w	801df68 <_strtod_l+0x488>
 801e174:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e176:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e178:	2e00      	cmp	r6, #0
 801e17a:	bfab      	itete	ge
 801e17c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801e17e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801e180:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801e182:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801e186:	bfac      	ite	ge
 801e188:	eb06 0a03 	addge.w	sl, r6, r3
 801e18c:	1b9f      	sublt	r7, r3, r6
 801e18e:	9b04      	ldr	r3, [sp, #16]
 801e190:	1af6      	subs	r6, r6, r3
 801e192:	4416      	add	r6, r2
 801e194:	4ba0      	ldr	r3, [pc, #640]	; (801e418 <_strtod_l+0x938>)
 801e196:	3e01      	subs	r6, #1
 801e198:	429e      	cmp	r6, r3
 801e19a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e19e:	f280 80c4 	bge.w	801e32a <_strtod_l+0x84a>
 801e1a2:	1b9b      	subs	r3, r3, r6
 801e1a4:	2b1f      	cmp	r3, #31
 801e1a6:	eba2 0203 	sub.w	r2, r2, r3
 801e1aa:	f04f 0101 	mov.w	r1, #1
 801e1ae:	f300 80b0 	bgt.w	801e312 <_strtod_l+0x832>
 801e1b2:	fa01 f303 	lsl.w	r3, r1, r3
 801e1b6:	930e      	str	r3, [sp, #56]	; 0x38
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	930d      	str	r3, [sp, #52]	; 0x34
 801e1bc:	eb0a 0602 	add.w	r6, sl, r2
 801e1c0:	9b04      	ldr	r3, [sp, #16]
 801e1c2:	45b2      	cmp	sl, r6
 801e1c4:	4417      	add	r7, r2
 801e1c6:	441f      	add	r7, r3
 801e1c8:	4653      	mov	r3, sl
 801e1ca:	bfa8      	it	ge
 801e1cc:	4633      	movge	r3, r6
 801e1ce:	42bb      	cmp	r3, r7
 801e1d0:	bfa8      	it	ge
 801e1d2:	463b      	movge	r3, r7
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	bfc2      	ittt	gt
 801e1d8:	1af6      	subgt	r6, r6, r3
 801e1da:	1aff      	subgt	r7, r7, r3
 801e1dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801e1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	dd17      	ble.n	801e216 <_strtod_l+0x736>
 801e1e6:	4659      	mov	r1, fp
 801e1e8:	461a      	mov	r2, r3
 801e1ea:	4620      	mov	r0, r4
 801e1ec:	f001 fea8 	bl	801ff40 <__pow5mult>
 801e1f0:	4683      	mov	fp, r0
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	f43f aeb8 	beq.w	801df68 <_strtod_l+0x488>
 801e1f8:	4601      	mov	r1, r0
 801e1fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	f001 fdf5 	bl	801fdec <__multiply>
 801e202:	900b      	str	r0, [sp, #44]	; 0x2c
 801e204:	2800      	cmp	r0, #0
 801e206:	f43f aeaf 	beq.w	801df68 <_strtod_l+0x488>
 801e20a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e20c:	4620      	mov	r0, r4
 801e20e:	f001 fcd7 	bl	801fbc0 <_Bfree>
 801e212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e214:	9316      	str	r3, [sp, #88]	; 0x58
 801e216:	2e00      	cmp	r6, #0
 801e218:	f300 808c 	bgt.w	801e334 <_strtod_l+0x854>
 801e21c:	9b08      	ldr	r3, [sp, #32]
 801e21e:	2b00      	cmp	r3, #0
 801e220:	dd08      	ble.n	801e234 <_strtod_l+0x754>
 801e222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e224:	9905      	ldr	r1, [sp, #20]
 801e226:	4620      	mov	r0, r4
 801e228:	f001 fe8a 	bl	801ff40 <__pow5mult>
 801e22c:	9005      	str	r0, [sp, #20]
 801e22e:	2800      	cmp	r0, #0
 801e230:	f43f ae9a 	beq.w	801df68 <_strtod_l+0x488>
 801e234:	2f00      	cmp	r7, #0
 801e236:	dd08      	ble.n	801e24a <_strtod_l+0x76a>
 801e238:	9905      	ldr	r1, [sp, #20]
 801e23a:	463a      	mov	r2, r7
 801e23c:	4620      	mov	r0, r4
 801e23e:	f001 fed9 	bl	801fff4 <__lshift>
 801e242:	9005      	str	r0, [sp, #20]
 801e244:	2800      	cmp	r0, #0
 801e246:	f43f ae8f 	beq.w	801df68 <_strtod_l+0x488>
 801e24a:	f1ba 0f00 	cmp.w	sl, #0
 801e24e:	dd08      	ble.n	801e262 <_strtod_l+0x782>
 801e250:	4659      	mov	r1, fp
 801e252:	4652      	mov	r2, sl
 801e254:	4620      	mov	r0, r4
 801e256:	f001 fecd 	bl	801fff4 <__lshift>
 801e25a:	4683      	mov	fp, r0
 801e25c:	2800      	cmp	r0, #0
 801e25e:	f43f ae83 	beq.w	801df68 <_strtod_l+0x488>
 801e262:	9a05      	ldr	r2, [sp, #20]
 801e264:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e266:	4620      	mov	r0, r4
 801e268:	f001 ff4c 	bl	8020104 <__mdiff>
 801e26c:	4605      	mov	r5, r0
 801e26e:	2800      	cmp	r0, #0
 801e270:	f43f ae7a 	beq.w	801df68 <_strtod_l+0x488>
 801e274:	68c3      	ldr	r3, [r0, #12]
 801e276:	930b      	str	r3, [sp, #44]	; 0x2c
 801e278:	2300      	movs	r3, #0
 801e27a:	60c3      	str	r3, [r0, #12]
 801e27c:	4659      	mov	r1, fp
 801e27e:	f001 ff25 	bl	80200cc <__mcmp>
 801e282:	2800      	cmp	r0, #0
 801e284:	da60      	bge.n	801e348 <_strtod_l+0x868>
 801e286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e288:	ea53 0308 	orrs.w	r3, r3, r8
 801e28c:	f040 8084 	bne.w	801e398 <_strtod_l+0x8b8>
 801e290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e294:	2b00      	cmp	r3, #0
 801e296:	d17f      	bne.n	801e398 <_strtod_l+0x8b8>
 801e298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e29c:	0d1b      	lsrs	r3, r3, #20
 801e29e:	051b      	lsls	r3, r3, #20
 801e2a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e2a4:	d978      	bls.n	801e398 <_strtod_l+0x8b8>
 801e2a6:	696b      	ldr	r3, [r5, #20]
 801e2a8:	b913      	cbnz	r3, 801e2b0 <_strtod_l+0x7d0>
 801e2aa:	692b      	ldr	r3, [r5, #16]
 801e2ac:	2b01      	cmp	r3, #1
 801e2ae:	dd73      	ble.n	801e398 <_strtod_l+0x8b8>
 801e2b0:	4629      	mov	r1, r5
 801e2b2:	2201      	movs	r2, #1
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	f001 fe9d 	bl	801fff4 <__lshift>
 801e2ba:	4659      	mov	r1, fp
 801e2bc:	4605      	mov	r5, r0
 801e2be:	f001 ff05 	bl	80200cc <__mcmp>
 801e2c2:	2800      	cmp	r0, #0
 801e2c4:	dd68      	ble.n	801e398 <_strtod_l+0x8b8>
 801e2c6:	9904      	ldr	r1, [sp, #16]
 801e2c8:	4a54      	ldr	r2, [pc, #336]	; (801e41c <_strtod_l+0x93c>)
 801e2ca:	464b      	mov	r3, r9
 801e2cc:	2900      	cmp	r1, #0
 801e2ce:	f000 8084 	beq.w	801e3da <_strtod_l+0x8fa>
 801e2d2:	ea02 0109 	and.w	r1, r2, r9
 801e2d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e2da:	dc7e      	bgt.n	801e3da <_strtod_l+0x8fa>
 801e2dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e2e0:	f77f aeb3 	ble.w	801e04a <_strtod_l+0x56a>
 801e2e4:	4b4e      	ldr	r3, [pc, #312]	; (801e420 <_strtod_l+0x940>)
 801e2e6:	4640      	mov	r0, r8
 801e2e8:	4649      	mov	r1, r9
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	f7e2 f994 	bl	8000618 <__aeabi_dmul>
 801e2f0:	4b4a      	ldr	r3, [pc, #296]	; (801e41c <_strtod_l+0x93c>)
 801e2f2:	400b      	ands	r3, r1
 801e2f4:	4680      	mov	r8, r0
 801e2f6:	4689      	mov	r9, r1
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	f47f ae3f 	bne.w	801df7c <_strtod_l+0x49c>
 801e2fe:	2322      	movs	r3, #34	; 0x22
 801e300:	6023      	str	r3, [r4, #0]
 801e302:	e63b      	b.n	801df7c <_strtod_l+0x49c>
 801e304:	f04f 32ff 	mov.w	r2, #4294967295
 801e308:	fa02 f303 	lsl.w	r3, r2, r3
 801e30c:	ea03 0808 	and.w	r8, r3, r8
 801e310:	e6e8      	b.n	801e0e4 <_strtod_l+0x604>
 801e312:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e316:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e31a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e31e:	36e2      	adds	r6, #226	; 0xe2
 801e320:	fa01 f306 	lsl.w	r3, r1, r6
 801e324:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e328:	e748      	b.n	801e1bc <_strtod_l+0x6dc>
 801e32a:	2100      	movs	r1, #0
 801e32c:	2301      	movs	r3, #1
 801e32e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e332:	e743      	b.n	801e1bc <_strtod_l+0x6dc>
 801e334:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e336:	4632      	mov	r2, r6
 801e338:	4620      	mov	r0, r4
 801e33a:	f001 fe5b 	bl	801fff4 <__lshift>
 801e33e:	9016      	str	r0, [sp, #88]	; 0x58
 801e340:	2800      	cmp	r0, #0
 801e342:	f47f af6b 	bne.w	801e21c <_strtod_l+0x73c>
 801e346:	e60f      	b.n	801df68 <_strtod_l+0x488>
 801e348:	46ca      	mov	sl, r9
 801e34a:	d171      	bne.n	801e430 <_strtod_l+0x950>
 801e34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e34e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e352:	b352      	cbz	r2, 801e3aa <_strtod_l+0x8ca>
 801e354:	4a33      	ldr	r2, [pc, #204]	; (801e424 <_strtod_l+0x944>)
 801e356:	4293      	cmp	r3, r2
 801e358:	d12a      	bne.n	801e3b0 <_strtod_l+0x8d0>
 801e35a:	9b04      	ldr	r3, [sp, #16]
 801e35c:	4641      	mov	r1, r8
 801e35e:	b1fb      	cbz	r3, 801e3a0 <_strtod_l+0x8c0>
 801e360:	4b2e      	ldr	r3, [pc, #184]	; (801e41c <_strtod_l+0x93c>)
 801e362:	ea09 0303 	and.w	r3, r9, r3
 801e366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e36a:	f04f 32ff 	mov.w	r2, #4294967295
 801e36e:	d81a      	bhi.n	801e3a6 <_strtod_l+0x8c6>
 801e370:	0d1b      	lsrs	r3, r3, #20
 801e372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e376:	fa02 f303 	lsl.w	r3, r2, r3
 801e37a:	4299      	cmp	r1, r3
 801e37c:	d118      	bne.n	801e3b0 <_strtod_l+0x8d0>
 801e37e:	4b2a      	ldr	r3, [pc, #168]	; (801e428 <_strtod_l+0x948>)
 801e380:	459a      	cmp	sl, r3
 801e382:	d102      	bne.n	801e38a <_strtod_l+0x8aa>
 801e384:	3101      	adds	r1, #1
 801e386:	f43f adef 	beq.w	801df68 <_strtod_l+0x488>
 801e38a:	4b24      	ldr	r3, [pc, #144]	; (801e41c <_strtod_l+0x93c>)
 801e38c:	ea0a 0303 	and.w	r3, sl, r3
 801e390:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e394:	f04f 0800 	mov.w	r8, #0
 801e398:	9b04      	ldr	r3, [sp, #16]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d1a2      	bne.n	801e2e4 <_strtod_l+0x804>
 801e39e:	e5ed      	b.n	801df7c <_strtod_l+0x49c>
 801e3a0:	f04f 33ff 	mov.w	r3, #4294967295
 801e3a4:	e7e9      	b.n	801e37a <_strtod_l+0x89a>
 801e3a6:	4613      	mov	r3, r2
 801e3a8:	e7e7      	b.n	801e37a <_strtod_l+0x89a>
 801e3aa:	ea53 0308 	orrs.w	r3, r3, r8
 801e3ae:	d08a      	beq.n	801e2c6 <_strtod_l+0x7e6>
 801e3b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3b2:	b1e3      	cbz	r3, 801e3ee <_strtod_l+0x90e>
 801e3b4:	ea13 0f0a 	tst.w	r3, sl
 801e3b8:	d0ee      	beq.n	801e398 <_strtod_l+0x8b8>
 801e3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3bc:	9a04      	ldr	r2, [sp, #16]
 801e3be:	4640      	mov	r0, r8
 801e3c0:	4649      	mov	r1, r9
 801e3c2:	b1c3      	cbz	r3, 801e3f6 <_strtod_l+0x916>
 801e3c4:	f7ff fb70 	bl	801daa8 <sulp>
 801e3c8:	4602      	mov	r2, r0
 801e3ca:	460b      	mov	r3, r1
 801e3cc:	ec51 0b18 	vmov	r0, r1, d8
 801e3d0:	f7e1 ff6c 	bl	80002ac <__adddf3>
 801e3d4:	4680      	mov	r8, r0
 801e3d6:	4689      	mov	r9, r1
 801e3d8:	e7de      	b.n	801e398 <_strtod_l+0x8b8>
 801e3da:	4013      	ands	r3, r2
 801e3dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e3e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e3e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e3e8:	f04f 38ff 	mov.w	r8, #4294967295
 801e3ec:	e7d4      	b.n	801e398 <_strtod_l+0x8b8>
 801e3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3f0:	ea13 0f08 	tst.w	r3, r8
 801e3f4:	e7e0      	b.n	801e3b8 <_strtod_l+0x8d8>
 801e3f6:	f7ff fb57 	bl	801daa8 <sulp>
 801e3fa:	4602      	mov	r2, r0
 801e3fc:	460b      	mov	r3, r1
 801e3fe:	ec51 0b18 	vmov	r0, r1, d8
 801e402:	f7e1 ff51 	bl	80002a8 <__aeabi_dsub>
 801e406:	2200      	movs	r2, #0
 801e408:	2300      	movs	r3, #0
 801e40a:	4680      	mov	r8, r0
 801e40c:	4689      	mov	r9, r1
 801e40e:	f7e2 fb6b 	bl	8000ae8 <__aeabi_dcmpeq>
 801e412:	2800      	cmp	r0, #0
 801e414:	d0c0      	beq.n	801e398 <_strtod_l+0x8b8>
 801e416:	e618      	b.n	801e04a <_strtod_l+0x56a>
 801e418:	fffffc02 	.word	0xfffffc02
 801e41c:	7ff00000 	.word	0x7ff00000
 801e420:	39500000 	.word	0x39500000
 801e424:	000fffff 	.word	0x000fffff
 801e428:	7fefffff 	.word	0x7fefffff
 801e42c:	08023c68 	.word	0x08023c68
 801e430:	4659      	mov	r1, fp
 801e432:	4628      	mov	r0, r5
 801e434:	f001 ffba 	bl	80203ac <__ratio>
 801e438:	ec57 6b10 	vmov	r6, r7, d0
 801e43c:	ee10 0a10 	vmov	r0, s0
 801e440:	2200      	movs	r2, #0
 801e442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e446:	4639      	mov	r1, r7
 801e448:	f7e2 fb62 	bl	8000b10 <__aeabi_dcmple>
 801e44c:	2800      	cmp	r0, #0
 801e44e:	d071      	beq.n	801e534 <_strtod_l+0xa54>
 801e450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e452:	2b00      	cmp	r3, #0
 801e454:	d17c      	bne.n	801e550 <_strtod_l+0xa70>
 801e456:	f1b8 0f00 	cmp.w	r8, #0
 801e45a:	d15a      	bne.n	801e512 <_strtod_l+0xa32>
 801e45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e460:	2b00      	cmp	r3, #0
 801e462:	d15d      	bne.n	801e520 <_strtod_l+0xa40>
 801e464:	4b90      	ldr	r3, [pc, #576]	; (801e6a8 <_strtod_l+0xbc8>)
 801e466:	2200      	movs	r2, #0
 801e468:	4630      	mov	r0, r6
 801e46a:	4639      	mov	r1, r7
 801e46c:	f7e2 fb46 	bl	8000afc <__aeabi_dcmplt>
 801e470:	2800      	cmp	r0, #0
 801e472:	d15c      	bne.n	801e52e <_strtod_l+0xa4e>
 801e474:	4630      	mov	r0, r6
 801e476:	4639      	mov	r1, r7
 801e478:	4b8c      	ldr	r3, [pc, #560]	; (801e6ac <_strtod_l+0xbcc>)
 801e47a:	2200      	movs	r2, #0
 801e47c:	f7e2 f8cc 	bl	8000618 <__aeabi_dmul>
 801e480:	4606      	mov	r6, r0
 801e482:	460f      	mov	r7, r1
 801e484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e488:	9606      	str	r6, [sp, #24]
 801e48a:	9307      	str	r3, [sp, #28]
 801e48c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e490:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e494:	4b86      	ldr	r3, [pc, #536]	; (801e6b0 <_strtod_l+0xbd0>)
 801e496:	ea0a 0303 	and.w	r3, sl, r3
 801e49a:	930d      	str	r3, [sp, #52]	; 0x34
 801e49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e49e:	4b85      	ldr	r3, [pc, #532]	; (801e6b4 <_strtod_l+0xbd4>)
 801e4a0:	429a      	cmp	r2, r3
 801e4a2:	f040 8090 	bne.w	801e5c6 <_strtod_l+0xae6>
 801e4a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e4aa:	ec49 8b10 	vmov	d0, r8, r9
 801e4ae:	f001 feb3 	bl	8020218 <__ulp>
 801e4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e4b6:	ec51 0b10 	vmov	r0, r1, d0
 801e4ba:	f7e2 f8ad 	bl	8000618 <__aeabi_dmul>
 801e4be:	4642      	mov	r2, r8
 801e4c0:	464b      	mov	r3, r9
 801e4c2:	f7e1 fef3 	bl	80002ac <__adddf3>
 801e4c6:	460b      	mov	r3, r1
 801e4c8:	4979      	ldr	r1, [pc, #484]	; (801e6b0 <_strtod_l+0xbd0>)
 801e4ca:	4a7b      	ldr	r2, [pc, #492]	; (801e6b8 <_strtod_l+0xbd8>)
 801e4cc:	4019      	ands	r1, r3
 801e4ce:	4291      	cmp	r1, r2
 801e4d0:	4680      	mov	r8, r0
 801e4d2:	d944      	bls.n	801e55e <_strtod_l+0xa7e>
 801e4d4:	ee18 2a90 	vmov	r2, s17
 801e4d8:	4b78      	ldr	r3, [pc, #480]	; (801e6bc <_strtod_l+0xbdc>)
 801e4da:	429a      	cmp	r2, r3
 801e4dc:	d104      	bne.n	801e4e8 <_strtod_l+0xa08>
 801e4de:	ee18 3a10 	vmov	r3, s16
 801e4e2:	3301      	adds	r3, #1
 801e4e4:	f43f ad40 	beq.w	801df68 <_strtod_l+0x488>
 801e4e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801e6bc <_strtod_l+0xbdc>
 801e4ec:	f04f 38ff 	mov.w	r8, #4294967295
 801e4f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f001 fb64 	bl	801fbc0 <_Bfree>
 801e4f8:	9905      	ldr	r1, [sp, #20]
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	f001 fb60 	bl	801fbc0 <_Bfree>
 801e500:	4659      	mov	r1, fp
 801e502:	4620      	mov	r0, r4
 801e504:	f001 fb5c 	bl	801fbc0 <_Bfree>
 801e508:	4629      	mov	r1, r5
 801e50a:	4620      	mov	r0, r4
 801e50c:	f001 fb58 	bl	801fbc0 <_Bfree>
 801e510:	e609      	b.n	801e126 <_strtod_l+0x646>
 801e512:	f1b8 0f01 	cmp.w	r8, #1
 801e516:	d103      	bne.n	801e520 <_strtod_l+0xa40>
 801e518:	f1b9 0f00 	cmp.w	r9, #0
 801e51c:	f43f ad95 	beq.w	801e04a <_strtod_l+0x56a>
 801e520:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e678 <_strtod_l+0xb98>
 801e524:	4f60      	ldr	r7, [pc, #384]	; (801e6a8 <_strtod_l+0xbc8>)
 801e526:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e52a:	2600      	movs	r6, #0
 801e52c:	e7ae      	b.n	801e48c <_strtod_l+0x9ac>
 801e52e:	4f5f      	ldr	r7, [pc, #380]	; (801e6ac <_strtod_l+0xbcc>)
 801e530:	2600      	movs	r6, #0
 801e532:	e7a7      	b.n	801e484 <_strtod_l+0x9a4>
 801e534:	4b5d      	ldr	r3, [pc, #372]	; (801e6ac <_strtod_l+0xbcc>)
 801e536:	4630      	mov	r0, r6
 801e538:	4639      	mov	r1, r7
 801e53a:	2200      	movs	r2, #0
 801e53c:	f7e2 f86c 	bl	8000618 <__aeabi_dmul>
 801e540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e542:	4606      	mov	r6, r0
 801e544:	460f      	mov	r7, r1
 801e546:	2b00      	cmp	r3, #0
 801e548:	d09c      	beq.n	801e484 <_strtod_l+0x9a4>
 801e54a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e54e:	e79d      	b.n	801e48c <_strtod_l+0x9ac>
 801e550:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801e680 <_strtod_l+0xba0>
 801e554:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e558:	ec57 6b17 	vmov	r6, r7, d7
 801e55c:	e796      	b.n	801e48c <_strtod_l+0x9ac>
 801e55e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e562:	9b04      	ldr	r3, [sp, #16]
 801e564:	46ca      	mov	sl, r9
 801e566:	2b00      	cmp	r3, #0
 801e568:	d1c2      	bne.n	801e4f0 <_strtod_l+0xa10>
 801e56a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e56e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e570:	0d1b      	lsrs	r3, r3, #20
 801e572:	051b      	lsls	r3, r3, #20
 801e574:	429a      	cmp	r2, r3
 801e576:	d1bb      	bne.n	801e4f0 <_strtod_l+0xa10>
 801e578:	4630      	mov	r0, r6
 801e57a:	4639      	mov	r1, r7
 801e57c:	f7e2 fb84 	bl	8000c88 <__aeabi_d2lz>
 801e580:	f7e2 f81c 	bl	80005bc <__aeabi_l2d>
 801e584:	4602      	mov	r2, r0
 801e586:	460b      	mov	r3, r1
 801e588:	4630      	mov	r0, r6
 801e58a:	4639      	mov	r1, r7
 801e58c:	f7e1 fe8c 	bl	80002a8 <__aeabi_dsub>
 801e590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e592:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e596:	ea43 0308 	orr.w	r3, r3, r8
 801e59a:	4313      	orrs	r3, r2
 801e59c:	4606      	mov	r6, r0
 801e59e:	460f      	mov	r7, r1
 801e5a0:	d054      	beq.n	801e64c <_strtod_l+0xb6c>
 801e5a2:	a339      	add	r3, pc, #228	; (adr r3, 801e688 <_strtod_l+0xba8>)
 801e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a8:	f7e2 faa8 	bl	8000afc <__aeabi_dcmplt>
 801e5ac:	2800      	cmp	r0, #0
 801e5ae:	f47f ace5 	bne.w	801df7c <_strtod_l+0x49c>
 801e5b2:	a337      	add	r3, pc, #220	; (adr r3, 801e690 <_strtod_l+0xbb0>)
 801e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5b8:	4630      	mov	r0, r6
 801e5ba:	4639      	mov	r1, r7
 801e5bc:	f7e2 fabc 	bl	8000b38 <__aeabi_dcmpgt>
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	d095      	beq.n	801e4f0 <_strtod_l+0xa10>
 801e5c4:	e4da      	b.n	801df7c <_strtod_l+0x49c>
 801e5c6:	9b04      	ldr	r3, [sp, #16]
 801e5c8:	b333      	cbz	r3, 801e618 <_strtod_l+0xb38>
 801e5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e5d0:	d822      	bhi.n	801e618 <_strtod_l+0xb38>
 801e5d2:	a331      	add	r3, pc, #196	; (adr r3, 801e698 <_strtod_l+0xbb8>)
 801e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d8:	4630      	mov	r0, r6
 801e5da:	4639      	mov	r1, r7
 801e5dc:	f7e2 fa98 	bl	8000b10 <__aeabi_dcmple>
 801e5e0:	b1a0      	cbz	r0, 801e60c <_strtod_l+0xb2c>
 801e5e2:	4639      	mov	r1, r7
 801e5e4:	4630      	mov	r0, r6
 801e5e6:	f7e2 fac7 	bl	8000b78 <__aeabi_d2uiz>
 801e5ea:	2801      	cmp	r0, #1
 801e5ec:	bf38      	it	cc
 801e5ee:	2001      	movcc	r0, #1
 801e5f0:	f7e1 ff98 	bl	8000524 <__aeabi_ui2d>
 801e5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5f6:	4606      	mov	r6, r0
 801e5f8:	460f      	mov	r7, r1
 801e5fa:	bb23      	cbnz	r3, 801e646 <_strtod_l+0xb66>
 801e5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e600:	9010      	str	r0, [sp, #64]	; 0x40
 801e602:	9311      	str	r3, [sp, #68]	; 0x44
 801e604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e608:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e60c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e60e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e610:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e614:	1a9b      	subs	r3, r3, r2
 801e616:	930f      	str	r3, [sp, #60]	; 0x3c
 801e618:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e61c:	eeb0 0a48 	vmov.f32	s0, s16
 801e620:	eef0 0a68 	vmov.f32	s1, s17
 801e624:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e628:	f001 fdf6 	bl	8020218 <__ulp>
 801e62c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e630:	ec53 2b10 	vmov	r2, r3, d0
 801e634:	f7e1 fff0 	bl	8000618 <__aeabi_dmul>
 801e638:	ec53 2b18 	vmov	r2, r3, d8
 801e63c:	f7e1 fe36 	bl	80002ac <__adddf3>
 801e640:	4680      	mov	r8, r0
 801e642:	4689      	mov	r9, r1
 801e644:	e78d      	b.n	801e562 <_strtod_l+0xa82>
 801e646:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801e64a:	e7db      	b.n	801e604 <_strtod_l+0xb24>
 801e64c:	a314      	add	r3, pc, #80	; (adr r3, 801e6a0 <_strtod_l+0xbc0>)
 801e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e652:	f7e2 fa53 	bl	8000afc <__aeabi_dcmplt>
 801e656:	e7b3      	b.n	801e5c0 <_strtod_l+0xae0>
 801e658:	2300      	movs	r3, #0
 801e65a:	930a      	str	r3, [sp, #40]	; 0x28
 801e65c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e65e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e660:	6013      	str	r3, [r2, #0]
 801e662:	f7ff ba7c 	b.w	801db5e <_strtod_l+0x7e>
 801e666:	2a65      	cmp	r2, #101	; 0x65
 801e668:	f43f ab75 	beq.w	801dd56 <_strtod_l+0x276>
 801e66c:	2a45      	cmp	r2, #69	; 0x45
 801e66e:	f43f ab72 	beq.w	801dd56 <_strtod_l+0x276>
 801e672:	2301      	movs	r3, #1
 801e674:	f7ff bbaa 	b.w	801ddcc <_strtod_l+0x2ec>
 801e678:	00000000 	.word	0x00000000
 801e67c:	bff00000 	.word	0xbff00000
 801e680:	00000000 	.word	0x00000000
 801e684:	3ff00000 	.word	0x3ff00000
 801e688:	94a03595 	.word	0x94a03595
 801e68c:	3fdfffff 	.word	0x3fdfffff
 801e690:	35afe535 	.word	0x35afe535
 801e694:	3fe00000 	.word	0x3fe00000
 801e698:	ffc00000 	.word	0xffc00000
 801e69c:	41dfffff 	.word	0x41dfffff
 801e6a0:	94a03595 	.word	0x94a03595
 801e6a4:	3fcfffff 	.word	0x3fcfffff
 801e6a8:	3ff00000 	.word	0x3ff00000
 801e6ac:	3fe00000 	.word	0x3fe00000
 801e6b0:	7ff00000 	.word	0x7ff00000
 801e6b4:	7fe00000 	.word	0x7fe00000
 801e6b8:	7c9fffff 	.word	0x7c9fffff
 801e6bc:	7fefffff 	.word	0x7fefffff

0801e6c0 <strtof>:
 801e6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801e788 <strtof+0xc8>
 801e6c8:	4b2a      	ldr	r3, [pc, #168]	; (801e774 <strtof+0xb4>)
 801e6ca:	460a      	mov	r2, r1
 801e6cc:	ed2d 8b02 	vpush	{d8}
 801e6d0:	4601      	mov	r1, r0
 801e6d2:	f8d8 0000 	ldr.w	r0, [r8]
 801e6d6:	f7ff fa03 	bl	801dae0 <_strtod_l>
 801e6da:	ec55 4b10 	vmov	r4, r5, d0
 801e6de:	ee10 2a10 	vmov	r2, s0
 801e6e2:	ee10 0a10 	vmov	r0, s0
 801e6e6:	462b      	mov	r3, r5
 801e6e8:	4629      	mov	r1, r5
 801e6ea:	f7e2 fa2f 	bl	8000b4c <__aeabi_dcmpun>
 801e6ee:	b190      	cbz	r0, 801e716 <strtof+0x56>
 801e6f0:	2d00      	cmp	r5, #0
 801e6f2:	4821      	ldr	r0, [pc, #132]	; (801e778 <strtof+0xb8>)
 801e6f4:	da09      	bge.n	801e70a <strtof+0x4a>
 801e6f6:	f000 fe67 	bl	801f3c8 <nanf>
 801e6fa:	eeb1 8a40 	vneg.f32	s16, s0
 801e6fe:	eeb0 0a48 	vmov.f32	s0, s16
 801e702:	ecbd 8b02 	vpop	{d8}
 801e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e70a:	ecbd 8b02 	vpop	{d8}
 801e70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e712:	f000 be59 	b.w	801f3c8 <nanf>
 801e716:	4620      	mov	r0, r4
 801e718:	4629      	mov	r1, r5
 801e71a:	f7e2 fa4d 	bl	8000bb8 <__aeabi_d2f>
 801e71e:	ee08 0a10 	vmov	s16, r0
 801e722:	eddf 7a16 	vldr	s15, [pc, #88]	; 801e77c <strtof+0xbc>
 801e726:	eeb0 7ac8 	vabs.f32	s14, s16
 801e72a:	eeb4 7a67 	vcmp.f32	s14, s15
 801e72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e732:	dd11      	ble.n	801e758 <strtof+0x98>
 801e734:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801e738:	4b11      	ldr	r3, [pc, #68]	; (801e780 <strtof+0xc0>)
 801e73a:	f04f 32ff 	mov.w	r2, #4294967295
 801e73e:	4620      	mov	r0, r4
 801e740:	4639      	mov	r1, r7
 801e742:	f7e2 fa03 	bl	8000b4c <__aeabi_dcmpun>
 801e746:	b980      	cbnz	r0, 801e76a <strtof+0xaa>
 801e748:	4b0d      	ldr	r3, [pc, #52]	; (801e780 <strtof+0xc0>)
 801e74a:	f04f 32ff 	mov.w	r2, #4294967295
 801e74e:	4620      	mov	r0, r4
 801e750:	4639      	mov	r1, r7
 801e752:	f7e2 f9dd 	bl	8000b10 <__aeabi_dcmple>
 801e756:	b940      	cbnz	r0, 801e76a <strtof+0xaa>
 801e758:	ee18 3a10 	vmov	r3, s16
 801e75c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e760:	d1cd      	bne.n	801e6fe <strtof+0x3e>
 801e762:	4b08      	ldr	r3, [pc, #32]	; (801e784 <strtof+0xc4>)
 801e764:	402b      	ands	r3, r5
 801e766:	2b00      	cmp	r3, #0
 801e768:	d0c9      	beq.n	801e6fe <strtof+0x3e>
 801e76a:	f8d8 3000 	ldr.w	r3, [r8]
 801e76e:	2222      	movs	r2, #34	; 0x22
 801e770:	601a      	str	r2, [r3, #0]
 801e772:	e7c4      	b.n	801e6fe <strtof+0x3e>
 801e774:	200006f8 	.word	0x200006f8
 801e778:	08023fea 	.word	0x08023fea
 801e77c:	7f7fffff 	.word	0x7f7fffff
 801e780:	7fefffff 	.word	0x7fefffff
 801e784:	7ff00000 	.word	0x7ff00000
 801e788:	200008b0 	.word	0x200008b0

0801e78c <_strtol_l.constprop.0>:
 801e78c:	2b01      	cmp	r3, #1
 801e78e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e792:	d001      	beq.n	801e798 <_strtol_l.constprop.0+0xc>
 801e794:	2b24      	cmp	r3, #36	; 0x24
 801e796:	d906      	bls.n	801e7a6 <_strtol_l.constprop.0+0x1a>
 801e798:	f000 fdd4 	bl	801f344 <__errno>
 801e79c:	2316      	movs	r3, #22
 801e79e:	6003      	str	r3, [r0, #0]
 801e7a0:	2000      	movs	r0, #0
 801e7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e88c <_strtol_l.constprop.0+0x100>
 801e7aa:	460d      	mov	r5, r1
 801e7ac:	462e      	mov	r6, r5
 801e7ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e7b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e7b6:	f017 0708 	ands.w	r7, r7, #8
 801e7ba:	d1f7      	bne.n	801e7ac <_strtol_l.constprop.0+0x20>
 801e7bc:	2c2d      	cmp	r4, #45	; 0x2d
 801e7be:	d132      	bne.n	801e826 <_strtol_l.constprop.0+0x9a>
 801e7c0:	782c      	ldrb	r4, [r5, #0]
 801e7c2:	2701      	movs	r7, #1
 801e7c4:	1cb5      	adds	r5, r6, #2
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d05b      	beq.n	801e882 <_strtol_l.constprop.0+0xf6>
 801e7ca:	2b10      	cmp	r3, #16
 801e7cc:	d109      	bne.n	801e7e2 <_strtol_l.constprop.0+0x56>
 801e7ce:	2c30      	cmp	r4, #48	; 0x30
 801e7d0:	d107      	bne.n	801e7e2 <_strtol_l.constprop.0+0x56>
 801e7d2:	782c      	ldrb	r4, [r5, #0]
 801e7d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e7d8:	2c58      	cmp	r4, #88	; 0x58
 801e7da:	d14d      	bne.n	801e878 <_strtol_l.constprop.0+0xec>
 801e7dc:	786c      	ldrb	r4, [r5, #1]
 801e7de:	2310      	movs	r3, #16
 801e7e0:	3502      	adds	r5, #2
 801e7e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e7e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7ea:	f04f 0e00 	mov.w	lr, #0
 801e7ee:	fbb8 f9f3 	udiv	r9, r8, r3
 801e7f2:	4676      	mov	r6, lr
 801e7f4:	fb03 8a19 	mls	sl, r3, r9, r8
 801e7f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e7fc:	f1bc 0f09 	cmp.w	ip, #9
 801e800:	d816      	bhi.n	801e830 <_strtol_l.constprop.0+0xa4>
 801e802:	4664      	mov	r4, ip
 801e804:	42a3      	cmp	r3, r4
 801e806:	dd24      	ble.n	801e852 <_strtol_l.constprop.0+0xc6>
 801e808:	f1be 3fff 	cmp.w	lr, #4294967295
 801e80c:	d008      	beq.n	801e820 <_strtol_l.constprop.0+0x94>
 801e80e:	45b1      	cmp	r9, r6
 801e810:	d31c      	bcc.n	801e84c <_strtol_l.constprop.0+0xc0>
 801e812:	d101      	bne.n	801e818 <_strtol_l.constprop.0+0x8c>
 801e814:	45a2      	cmp	sl, r4
 801e816:	db19      	blt.n	801e84c <_strtol_l.constprop.0+0xc0>
 801e818:	fb06 4603 	mla	r6, r6, r3, r4
 801e81c:	f04f 0e01 	mov.w	lr, #1
 801e820:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e824:	e7e8      	b.n	801e7f8 <_strtol_l.constprop.0+0x6c>
 801e826:	2c2b      	cmp	r4, #43	; 0x2b
 801e828:	bf04      	itt	eq
 801e82a:	782c      	ldrbeq	r4, [r5, #0]
 801e82c:	1cb5      	addeq	r5, r6, #2
 801e82e:	e7ca      	b.n	801e7c6 <_strtol_l.constprop.0+0x3a>
 801e830:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e834:	f1bc 0f19 	cmp.w	ip, #25
 801e838:	d801      	bhi.n	801e83e <_strtol_l.constprop.0+0xb2>
 801e83a:	3c37      	subs	r4, #55	; 0x37
 801e83c:	e7e2      	b.n	801e804 <_strtol_l.constprop.0+0x78>
 801e83e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e842:	f1bc 0f19 	cmp.w	ip, #25
 801e846:	d804      	bhi.n	801e852 <_strtol_l.constprop.0+0xc6>
 801e848:	3c57      	subs	r4, #87	; 0x57
 801e84a:	e7db      	b.n	801e804 <_strtol_l.constprop.0+0x78>
 801e84c:	f04f 3eff 	mov.w	lr, #4294967295
 801e850:	e7e6      	b.n	801e820 <_strtol_l.constprop.0+0x94>
 801e852:	f1be 3fff 	cmp.w	lr, #4294967295
 801e856:	d105      	bne.n	801e864 <_strtol_l.constprop.0+0xd8>
 801e858:	2322      	movs	r3, #34	; 0x22
 801e85a:	6003      	str	r3, [r0, #0]
 801e85c:	4646      	mov	r6, r8
 801e85e:	b942      	cbnz	r2, 801e872 <_strtol_l.constprop.0+0xe6>
 801e860:	4630      	mov	r0, r6
 801e862:	e79e      	b.n	801e7a2 <_strtol_l.constprop.0+0x16>
 801e864:	b107      	cbz	r7, 801e868 <_strtol_l.constprop.0+0xdc>
 801e866:	4276      	negs	r6, r6
 801e868:	2a00      	cmp	r2, #0
 801e86a:	d0f9      	beq.n	801e860 <_strtol_l.constprop.0+0xd4>
 801e86c:	f1be 0f00 	cmp.w	lr, #0
 801e870:	d000      	beq.n	801e874 <_strtol_l.constprop.0+0xe8>
 801e872:	1e69      	subs	r1, r5, #1
 801e874:	6011      	str	r1, [r2, #0]
 801e876:	e7f3      	b.n	801e860 <_strtol_l.constprop.0+0xd4>
 801e878:	2430      	movs	r4, #48	; 0x30
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	d1b1      	bne.n	801e7e2 <_strtol_l.constprop.0+0x56>
 801e87e:	2308      	movs	r3, #8
 801e880:	e7af      	b.n	801e7e2 <_strtol_l.constprop.0+0x56>
 801e882:	2c30      	cmp	r4, #48	; 0x30
 801e884:	d0a5      	beq.n	801e7d2 <_strtol_l.constprop.0+0x46>
 801e886:	230a      	movs	r3, #10
 801e888:	e7ab      	b.n	801e7e2 <_strtol_l.constprop.0+0x56>
 801e88a:	bf00      	nop
 801e88c:	08023c91 	.word	0x08023c91

0801e890 <strtol>:
 801e890:	4613      	mov	r3, r2
 801e892:	460a      	mov	r2, r1
 801e894:	4601      	mov	r1, r0
 801e896:	4802      	ldr	r0, [pc, #8]	; (801e8a0 <strtol+0x10>)
 801e898:	6800      	ldr	r0, [r0, #0]
 801e89a:	f7ff bf77 	b.w	801e78c <_strtol_l.constprop.0>
 801e89e:	bf00      	nop
 801e8a0:	200008b0 	.word	0x200008b0

0801e8a4 <_strtoul_l.constprop.0>:
 801e8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e8a8:	4f36      	ldr	r7, [pc, #216]	; (801e984 <_strtoul_l.constprop.0+0xe0>)
 801e8aa:	4686      	mov	lr, r0
 801e8ac:	460d      	mov	r5, r1
 801e8ae:	4628      	mov	r0, r5
 801e8b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e8b4:	5d3e      	ldrb	r6, [r7, r4]
 801e8b6:	f016 0608 	ands.w	r6, r6, #8
 801e8ba:	d1f8      	bne.n	801e8ae <_strtoul_l.constprop.0+0xa>
 801e8bc:	2c2d      	cmp	r4, #45	; 0x2d
 801e8be:	d130      	bne.n	801e922 <_strtoul_l.constprop.0+0x7e>
 801e8c0:	782c      	ldrb	r4, [r5, #0]
 801e8c2:	2601      	movs	r6, #1
 801e8c4:	1c85      	adds	r5, r0, #2
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d057      	beq.n	801e97a <_strtoul_l.constprop.0+0xd6>
 801e8ca:	2b10      	cmp	r3, #16
 801e8cc:	d109      	bne.n	801e8e2 <_strtoul_l.constprop.0+0x3e>
 801e8ce:	2c30      	cmp	r4, #48	; 0x30
 801e8d0:	d107      	bne.n	801e8e2 <_strtoul_l.constprop.0+0x3e>
 801e8d2:	7828      	ldrb	r0, [r5, #0]
 801e8d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e8d8:	2858      	cmp	r0, #88	; 0x58
 801e8da:	d149      	bne.n	801e970 <_strtoul_l.constprop.0+0xcc>
 801e8dc:	786c      	ldrb	r4, [r5, #1]
 801e8de:	2310      	movs	r3, #16
 801e8e0:	3502      	adds	r5, #2
 801e8e2:	f04f 38ff 	mov.w	r8, #4294967295
 801e8e6:	2700      	movs	r7, #0
 801e8e8:	fbb8 f8f3 	udiv	r8, r8, r3
 801e8ec:	fb03 f908 	mul.w	r9, r3, r8
 801e8f0:	ea6f 0909 	mvn.w	r9, r9
 801e8f4:	4638      	mov	r0, r7
 801e8f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e8fa:	f1bc 0f09 	cmp.w	ip, #9
 801e8fe:	d815      	bhi.n	801e92c <_strtoul_l.constprop.0+0x88>
 801e900:	4664      	mov	r4, ip
 801e902:	42a3      	cmp	r3, r4
 801e904:	dd23      	ble.n	801e94e <_strtoul_l.constprop.0+0xaa>
 801e906:	f1b7 3fff 	cmp.w	r7, #4294967295
 801e90a:	d007      	beq.n	801e91c <_strtoul_l.constprop.0+0x78>
 801e90c:	4580      	cmp	r8, r0
 801e90e:	d31b      	bcc.n	801e948 <_strtoul_l.constprop.0+0xa4>
 801e910:	d101      	bne.n	801e916 <_strtoul_l.constprop.0+0x72>
 801e912:	45a1      	cmp	r9, r4
 801e914:	db18      	blt.n	801e948 <_strtoul_l.constprop.0+0xa4>
 801e916:	fb00 4003 	mla	r0, r0, r3, r4
 801e91a:	2701      	movs	r7, #1
 801e91c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e920:	e7e9      	b.n	801e8f6 <_strtoul_l.constprop.0+0x52>
 801e922:	2c2b      	cmp	r4, #43	; 0x2b
 801e924:	bf04      	itt	eq
 801e926:	782c      	ldrbeq	r4, [r5, #0]
 801e928:	1c85      	addeq	r5, r0, #2
 801e92a:	e7cc      	b.n	801e8c6 <_strtoul_l.constprop.0+0x22>
 801e92c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e930:	f1bc 0f19 	cmp.w	ip, #25
 801e934:	d801      	bhi.n	801e93a <_strtoul_l.constprop.0+0x96>
 801e936:	3c37      	subs	r4, #55	; 0x37
 801e938:	e7e3      	b.n	801e902 <_strtoul_l.constprop.0+0x5e>
 801e93a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e93e:	f1bc 0f19 	cmp.w	ip, #25
 801e942:	d804      	bhi.n	801e94e <_strtoul_l.constprop.0+0xaa>
 801e944:	3c57      	subs	r4, #87	; 0x57
 801e946:	e7dc      	b.n	801e902 <_strtoul_l.constprop.0+0x5e>
 801e948:	f04f 37ff 	mov.w	r7, #4294967295
 801e94c:	e7e6      	b.n	801e91c <_strtoul_l.constprop.0+0x78>
 801e94e:	1c7b      	adds	r3, r7, #1
 801e950:	d106      	bne.n	801e960 <_strtoul_l.constprop.0+0xbc>
 801e952:	2322      	movs	r3, #34	; 0x22
 801e954:	f8ce 3000 	str.w	r3, [lr]
 801e958:	4638      	mov	r0, r7
 801e95a:	b932      	cbnz	r2, 801e96a <_strtoul_l.constprop.0+0xc6>
 801e95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e960:	b106      	cbz	r6, 801e964 <_strtoul_l.constprop.0+0xc0>
 801e962:	4240      	negs	r0, r0
 801e964:	2a00      	cmp	r2, #0
 801e966:	d0f9      	beq.n	801e95c <_strtoul_l.constprop.0+0xb8>
 801e968:	b107      	cbz	r7, 801e96c <_strtoul_l.constprop.0+0xc8>
 801e96a:	1e69      	subs	r1, r5, #1
 801e96c:	6011      	str	r1, [r2, #0]
 801e96e:	e7f5      	b.n	801e95c <_strtoul_l.constprop.0+0xb8>
 801e970:	2430      	movs	r4, #48	; 0x30
 801e972:	2b00      	cmp	r3, #0
 801e974:	d1b5      	bne.n	801e8e2 <_strtoul_l.constprop.0+0x3e>
 801e976:	2308      	movs	r3, #8
 801e978:	e7b3      	b.n	801e8e2 <_strtoul_l.constprop.0+0x3e>
 801e97a:	2c30      	cmp	r4, #48	; 0x30
 801e97c:	d0a9      	beq.n	801e8d2 <_strtoul_l.constprop.0+0x2e>
 801e97e:	230a      	movs	r3, #10
 801e980:	e7af      	b.n	801e8e2 <_strtoul_l.constprop.0+0x3e>
 801e982:	bf00      	nop
 801e984:	08023c91 	.word	0x08023c91

0801e988 <strtoul>:
 801e988:	4613      	mov	r3, r2
 801e98a:	460a      	mov	r2, r1
 801e98c:	4601      	mov	r1, r0
 801e98e:	4802      	ldr	r0, [pc, #8]	; (801e998 <strtoul+0x10>)
 801e990:	6800      	ldr	r0, [r0, #0]
 801e992:	f7ff bf87 	b.w	801e8a4 <_strtoul_l.constprop.0>
 801e996:	bf00      	nop
 801e998:	200008b0 	.word	0x200008b0

0801e99c <_strtoll_l.constprop.0>:
 801e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9a0:	b085      	sub	sp, #20
 801e9a2:	4688      	mov	r8, r1
 801e9a4:	9201      	str	r2, [sp, #4]
 801e9a6:	4a45      	ldr	r2, [pc, #276]	; (801eabc <_strtoll_l.constprop.0+0x120>)
 801e9a8:	9003      	str	r0, [sp, #12]
 801e9aa:	461e      	mov	r6, r3
 801e9ac:	460d      	mov	r5, r1
 801e9ae:	462b      	mov	r3, r5
 801e9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e9b4:	5d17      	ldrb	r7, [r2, r4]
 801e9b6:	f017 0708 	ands.w	r7, r7, #8
 801e9ba:	d1f8      	bne.n	801e9ae <_strtoll_l.constprop.0+0x12>
 801e9bc:	2c2d      	cmp	r4, #45	; 0x2d
 801e9be:	d14a      	bne.n	801ea56 <_strtoll_l.constprop.0+0xba>
 801e9c0:	782c      	ldrb	r4, [r5, #0]
 801e9c2:	2701      	movs	r7, #1
 801e9c4:	1c9d      	adds	r5, r3, #2
 801e9c6:	2e00      	cmp	r6, #0
 801e9c8:	d073      	beq.n	801eab2 <_strtoll_l.constprop.0+0x116>
 801e9ca:	2e10      	cmp	r6, #16
 801e9cc:	d109      	bne.n	801e9e2 <_strtoll_l.constprop.0+0x46>
 801e9ce:	2c30      	cmp	r4, #48	; 0x30
 801e9d0:	d107      	bne.n	801e9e2 <_strtoll_l.constprop.0+0x46>
 801e9d2:	782b      	ldrb	r3, [r5, #0]
 801e9d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e9d8:	2b58      	cmp	r3, #88	; 0x58
 801e9da:	d165      	bne.n	801eaa8 <_strtoll_l.constprop.0+0x10c>
 801e9dc:	786c      	ldrb	r4, [r5, #1]
 801e9de:	2610      	movs	r6, #16
 801e9e0:	3502      	adds	r5, #2
 801e9e2:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 801e9e6:	f107 3bff 	add.w	fp, r7, #4294967295
 801e9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e9ee:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801e9f2:	4632      	mov	r2, r6
 801e9f4:	464b      	mov	r3, r9
 801e9f6:	4658      	mov	r0, fp
 801e9f8:	4651      	mov	r1, sl
 801e9fa:	f7e2 f92d 	bl	8000c58 <__aeabi_uldivmod>
 801e9fe:	9202      	str	r2, [sp, #8]
 801ea00:	2200      	movs	r2, #0
 801ea02:	4684      	mov	ip, r0
 801ea04:	468e      	mov	lr, r1
 801ea06:	4610      	mov	r0, r2
 801ea08:	4611      	mov	r1, r2
 801ea0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ea0e:	2b09      	cmp	r3, #9
 801ea10:	d905      	bls.n	801ea1e <_strtoll_l.constprop.0+0x82>
 801ea12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801ea16:	2b19      	cmp	r3, #25
 801ea18:	d822      	bhi.n	801ea60 <_strtoll_l.constprop.0+0xc4>
 801ea1a:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 801ea1e:	429e      	cmp	r6, r3
 801ea20:	dd28      	ble.n	801ea74 <_strtoll_l.constprop.0+0xd8>
 801ea22:	1c54      	adds	r4, r2, #1
 801ea24:	d014      	beq.n	801ea50 <_strtoll_l.constprop.0+0xb4>
 801ea26:	4584      	cmp	ip, r0
 801ea28:	eb7e 0201 	sbcs.w	r2, lr, r1
 801ea2c:	d31f      	bcc.n	801ea6e <_strtoll_l.constprop.0+0xd2>
 801ea2e:	458e      	cmp	lr, r1
 801ea30:	bf08      	it	eq
 801ea32:	4584      	cmpeq	ip, r0
 801ea34:	d102      	bne.n	801ea3c <_strtoll_l.constprop.0+0xa0>
 801ea36:	9a02      	ldr	r2, [sp, #8]
 801ea38:	429a      	cmp	r2, r3
 801ea3a:	db18      	blt.n	801ea6e <_strtoll_l.constprop.0+0xd2>
 801ea3c:	4371      	muls	r1, r6
 801ea3e:	fb00 1109 	mla	r1, r0, r9, r1
 801ea42:	fba6 0200 	umull	r0, r2, r6, r0
 801ea46:	440a      	add	r2, r1
 801ea48:	1818      	adds	r0, r3, r0
 801ea4a:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 801ea4e:	2201      	movs	r2, #1
 801ea50:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ea54:	e7d9      	b.n	801ea0a <_strtoll_l.constprop.0+0x6e>
 801ea56:	2c2b      	cmp	r4, #43	; 0x2b
 801ea58:	bf04      	itt	eq
 801ea5a:	782c      	ldrbeq	r4, [r5, #0]
 801ea5c:	1c9d      	addeq	r5, r3, #2
 801ea5e:	e7b2      	b.n	801e9c6 <_strtoll_l.constprop.0+0x2a>
 801ea60:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801ea64:	2b19      	cmp	r3, #25
 801ea66:	d805      	bhi.n	801ea74 <_strtoll_l.constprop.0+0xd8>
 801ea68:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 801ea6c:	e7d7      	b.n	801ea1e <_strtoll_l.constprop.0+0x82>
 801ea6e:	f04f 32ff 	mov.w	r2, #4294967295
 801ea72:	e7ed      	b.n	801ea50 <_strtoll_l.constprop.0+0xb4>
 801ea74:	1c53      	adds	r3, r2, #1
 801ea76:	d109      	bne.n	801ea8c <_strtoll_l.constprop.0+0xf0>
 801ea78:	9a03      	ldr	r2, [sp, #12]
 801ea7a:	2322      	movs	r3, #34	; 0x22
 801ea7c:	6013      	str	r3, [r2, #0]
 801ea7e:	9b01      	ldr	r3, [sp, #4]
 801ea80:	4658      	mov	r0, fp
 801ea82:	4651      	mov	r1, sl
 801ea84:	b953      	cbnz	r3, 801ea9c <_strtoll_l.constprop.0+0x100>
 801ea86:	b005      	add	sp, #20
 801ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea8c:	b117      	cbz	r7, 801ea94 <_strtoll_l.constprop.0+0xf8>
 801ea8e:	4240      	negs	r0, r0
 801ea90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ea94:	9b01      	ldr	r3, [sp, #4]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d0f5      	beq.n	801ea86 <_strtoll_l.constprop.0+0xea>
 801ea9a:	b10a      	cbz	r2, 801eaa0 <_strtoll_l.constprop.0+0x104>
 801ea9c:	f105 38ff 	add.w	r8, r5, #4294967295
 801eaa0:	9b01      	ldr	r3, [sp, #4]
 801eaa2:	f8c3 8000 	str.w	r8, [r3]
 801eaa6:	e7ee      	b.n	801ea86 <_strtoll_l.constprop.0+0xea>
 801eaa8:	2430      	movs	r4, #48	; 0x30
 801eaaa:	2e00      	cmp	r6, #0
 801eaac:	d199      	bne.n	801e9e2 <_strtoll_l.constprop.0+0x46>
 801eaae:	2608      	movs	r6, #8
 801eab0:	e797      	b.n	801e9e2 <_strtoll_l.constprop.0+0x46>
 801eab2:	2c30      	cmp	r4, #48	; 0x30
 801eab4:	d08d      	beq.n	801e9d2 <_strtoll_l.constprop.0+0x36>
 801eab6:	260a      	movs	r6, #10
 801eab8:	e793      	b.n	801e9e2 <_strtoll_l.constprop.0+0x46>
 801eaba:	bf00      	nop
 801eabc:	08023c91 	.word	0x08023c91

0801eac0 <strtoll>:
 801eac0:	4613      	mov	r3, r2
 801eac2:	460a      	mov	r2, r1
 801eac4:	4601      	mov	r1, r0
 801eac6:	4802      	ldr	r0, [pc, #8]	; (801ead0 <strtoll+0x10>)
 801eac8:	6800      	ldr	r0, [r0, #0]
 801eaca:	f7ff bf67 	b.w	801e99c <_strtoll_l.constprop.0>
 801eace:	bf00      	nop
 801ead0:	200008b0 	.word	0x200008b0

0801ead4 <_strtoull_l.constprop.0>:
 801ead4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead8:	4692      	mov	sl, r2
 801eada:	4a49      	ldr	r2, [pc, #292]	; (801ec00 <_strtoull_l.constprop.0+0x12c>)
 801eadc:	9001      	str	r0, [sp, #4]
 801eade:	4689      	mov	r9, r1
 801eae0:	461d      	mov	r5, r3
 801eae2:	460e      	mov	r6, r1
 801eae4:	4633      	mov	r3, r6
 801eae6:	f816 4b01 	ldrb.w	r4, [r6], #1
 801eaea:	5d17      	ldrb	r7, [r2, r4]
 801eaec:	f017 0708 	ands.w	r7, r7, #8
 801eaf0:	d1f8      	bne.n	801eae4 <_strtoull_l.constprop.0+0x10>
 801eaf2:	2c2d      	cmp	r4, #45	; 0x2d
 801eaf4:	d14b      	bne.n	801eb8e <_strtoull_l.constprop.0+0xba>
 801eaf6:	7834      	ldrb	r4, [r6, #0]
 801eaf8:	2701      	movs	r7, #1
 801eafa:	1c9e      	adds	r6, r3, #2
 801eafc:	2d00      	cmp	r5, #0
 801eafe:	d07b      	beq.n	801ebf8 <_strtoull_l.constprop.0+0x124>
 801eb00:	2d10      	cmp	r5, #16
 801eb02:	d109      	bne.n	801eb18 <_strtoull_l.constprop.0+0x44>
 801eb04:	2c30      	cmp	r4, #48	; 0x30
 801eb06:	d107      	bne.n	801eb18 <_strtoull_l.constprop.0+0x44>
 801eb08:	7833      	ldrb	r3, [r6, #0]
 801eb0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eb0e:	2b58      	cmp	r3, #88	; 0x58
 801eb10:	d16d      	bne.n	801ebee <_strtoull_l.constprop.0+0x11a>
 801eb12:	7874      	ldrb	r4, [r6, #1]
 801eb14:	2510      	movs	r5, #16
 801eb16:	3602      	adds	r6, #2
 801eb18:	ea4f 7be5 	mov.w	fp, r5, asr #31
 801eb1c:	462a      	mov	r2, r5
 801eb1e:	465b      	mov	r3, fp
 801eb20:	f04f 30ff 	mov.w	r0, #4294967295
 801eb24:	f04f 31ff 	mov.w	r1, #4294967295
 801eb28:	f7e2 f896 	bl	8000c58 <__aeabi_uldivmod>
 801eb2c:	462a      	mov	r2, r5
 801eb2e:	9000      	str	r0, [sp, #0]
 801eb30:	4688      	mov	r8, r1
 801eb32:	465b      	mov	r3, fp
 801eb34:	f04f 30ff 	mov.w	r0, #4294967295
 801eb38:	f04f 31ff 	mov.w	r1, #4294967295
 801eb3c:	f7e2 f88c 	bl	8000c58 <__aeabi_uldivmod>
 801eb40:	2300      	movs	r3, #0
 801eb42:	4618      	mov	r0, r3
 801eb44:	4619      	mov	r1, r3
 801eb46:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801eb4a:	f1bc 0f09 	cmp.w	ip, #9
 801eb4e:	d823      	bhi.n	801eb98 <_strtoull_l.constprop.0+0xc4>
 801eb50:	4664      	mov	r4, ip
 801eb52:	42a5      	cmp	r5, r4
 801eb54:	dd31      	ble.n	801ebba <_strtoull_l.constprop.0+0xe6>
 801eb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb5a:	d015      	beq.n	801eb88 <_strtoull_l.constprop.0+0xb4>
 801eb5c:	9b00      	ldr	r3, [sp, #0]
 801eb5e:	4283      	cmp	r3, r0
 801eb60:	eb78 0301 	sbcs.w	r3, r8, r1
 801eb64:	d326      	bcc.n	801ebb4 <_strtoull_l.constprop.0+0xe0>
 801eb66:	9b00      	ldr	r3, [sp, #0]
 801eb68:	4588      	cmp	r8, r1
 801eb6a:	bf08      	it	eq
 801eb6c:	4283      	cmpeq	r3, r0
 801eb6e:	d101      	bne.n	801eb74 <_strtoull_l.constprop.0+0xa0>
 801eb70:	42a2      	cmp	r2, r4
 801eb72:	db1f      	blt.n	801ebb4 <_strtoull_l.constprop.0+0xe0>
 801eb74:	4369      	muls	r1, r5
 801eb76:	fb00 110b 	mla	r1, r0, fp, r1
 801eb7a:	fba5 0300 	umull	r0, r3, r5, r0
 801eb7e:	4419      	add	r1, r3
 801eb80:	1820      	adds	r0, r4, r0
 801eb82:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801eb86:	2301      	movs	r3, #1
 801eb88:	f816 4b01 	ldrb.w	r4, [r6], #1
 801eb8c:	e7db      	b.n	801eb46 <_strtoull_l.constprop.0+0x72>
 801eb8e:	2c2b      	cmp	r4, #43	; 0x2b
 801eb90:	bf04      	itt	eq
 801eb92:	7834      	ldrbeq	r4, [r6, #0]
 801eb94:	1c9e      	addeq	r6, r3, #2
 801eb96:	e7b1      	b.n	801eafc <_strtoull_l.constprop.0+0x28>
 801eb98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801eb9c:	f1bc 0f19 	cmp.w	ip, #25
 801eba0:	d801      	bhi.n	801eba6 <_strtoull_l.constprop.0+0xd2>
 801eba2:	3c37      	subs	r4, #55	; 0x37
 801eba4:	e7d5      	b.n	801eb52 <_strtoull_l.constprop.0+0x7e>
 801eba6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ebaa:	f1bc 0f19 	cmp.w	ip, #25
 801ebae:	d804      	bhi.n	801ebba <_strtoull_l.constprop.0+0xe6>
 801ebb0:	3c57      	subs	r4, #87	; 0x57
 801ebb2:	e7ce      	b.n	801eb52 <_strtoull_l.constprop.0+0x7e>
 801ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 801ebb8:	e7e6      	b.n	801eb88 <_strtoull_l.constprop.0+0xb4>
 801ebba:	1c5a      	adds	r2, r3, #1
 801ebbc:	d10a      	bne.n	801ebd4 <_strtoull_l.constprop.0+0x100>
 801ebbe:	9901      	ldr	r1, [sp, #4]
 801ebc0:	2222      	movs	r2, #34	; 0x22
 801ebc2:	600a      	str	r2, [r1, #0]
 801ebc4:	4618      	mov	r0, r3
 801ebc6:	4619      	mov	r1, r3
 801ebc8:	f1ba 0f00 	cmp.w	sl, #0
 801ebcc:	d10a      	bne.n	801ebe4 <_strtoull_l.constprop.0+0x110>
 801ebce:	b003      	add	sp, #12
 801ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd4:	b117      	cbz	r7, 801ebdc <_strtoull_l.constprop.0+0x108>
 801ebd6:	4240      	negs	r0, r0
 801ebd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ebdc:	f1ba 0f00 	cmp.w	sl, #0
 801ebe0:	d0f5      	beq.n	801ebce <_strtoull_l.constprop.0+0xfa>
 801ebe2:	b10b      	cbz	r3, 801ebe8 <_strtoull_l.constprop.0+0x114>
 801ebe4:	f106 39ff 	add.w	r9, r6, #4294967295
 801ebe8:	f8ca 9000 	str.w	r9, [sl]
 801ebec:	e7ef      	b.n	801ebce <_strtoull_l.constprop.0+0xfa>
 801ebee:	2430      	movs	r4, #48	; 0x30
 801ebf0:	2d00      	cmp	r5, #0
 801ebf2:	d191      	bne.n	801eb18 <_strtoull_l.constprop.0+0x44>
 801ebf4:	2508      	movs	r5, #8
 801ebf6:	e78f      	b.n	801eb18 <_strtoull_l.constprop.0+0x44>
 801ebf8:	2c30      	cmp	r4, #48	; 0x30
 801ebfa:	d085      	beq.n	801eb08 <_strtoull_l.constprop.0+0x34>
 801ebfc:	250a      	movs	r5, #10
 801ebfe:	e78b      	b.n	801eb18 <_strtoull_l.constprop.0+0x44>
 801ec00:	08023c91 	.word	0x08023c91

0801ec04 <strtoull>:
 801ec04:	4613      	mov	r3, r2
 801ec06:	460a      	mov	r2, r1
 801ec08:	4601      	mov	r1, r0
 801ec0a:	4802      	ldr	r0, [pc, #8]	; (801ec14 <strtoull+0x10>)
 801ec0c:	6800      	ldr	r0, [r0, #0]
 801ec0e:	f7ff bf61 	b.w	801ead4 <_strtoull_l.constprop.0>
 801ec12:	bf00      	nop
 801ec14:	200008b0 	.word	0x200008b0

0801ec18 <__sflush_r>:
 801ec18:	898a      	ldrh	r2, [r1, #12]
 801ec1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec1e:	4605      	mov	r5, r0
 801ec20:	0710      	lsls	r0, r2, #28
 801ec22:	460c      	mov	r4, r1
 801ec24:	d458      	bmi.n	801ecd8 <__sflush_r+0xc0>
 801ec26:	684b      	ldr	r3, [r1, #4]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	dc05      	bgt.n	801ec38 <__sflush_r+0x20>
 801ec2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	dc02      	bgt.n	801ec38 <__sflush_r+0x20>
 801ec32:	2000      	movs	r0, #0
 801ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec3a:	2e00      	cmp	r6, #0
 801ec3c:	d0f9      	beq.n	801ec32 <__sflush_r+0x1a>
 801ec3e:	2300      	movs	r3, #0
 801ec40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ec44:	682f      	ldr	r7, [r5, #0]
 801ec46:	6a21      	ldr	r1, [r4, #32]
 801ec48:	602b      	str	r3, [r5, #0]
 801ec4a:	d032      	beq.n	801ecb2 <__sflush_r+0x9a>
 801ec4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ec4e:	89a3      	ldrh	r3, [r4, #12]
 801ec50:	075a      	lsls	r2, r3, #29
 801ec52:	d505      	bpl.n	801ec60 <__sflush_r+0x48>
 801ec54:	6863      	ldr	r3, [r4, #4]
 801ec56:	1ac0      	subs	r0, r0, r3
 801ec58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ec5a:	b10b      	cbz	r3, 801ec60 <__sflush_r+0x48>
 801ec5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ec5e:	1ac0      	subs	r0, r0, r3
 801ec60:	2300      	movs	r3, #0
 801ec62:	4602      	mov	r2, r0
 801ec64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec66:	6a21      	ldr	r1, [r4, #32]
 801ec68:	4628      	mov	r0, r5
 801ec6a:	47b0      	blx	r6
 801ec6c:	1c43      	adds	r3, r0, #1
 801ec6e:	89a3      	ldrh	r3, [r4, #12]
 801ec70:	d106      	bne.n	801ec80 <__sflush_r+0x68>
 801ec72:	6829      	ldr	r1, [r5, #0]
 801ec74:	291d      	cmp	r1, #29
 801ec76:	d82b      	bhi.n	801ecd0 <__sflush_r+0xb8>
 801ec78:	4a29      	ldr	r2, [pc, #164]	; (801ed20 <__sflush_r+0x108>)
 801ec7a:	410a      	asrs	r2, r1
 801ec7c:	07d6      	lsls	r6, r2, #31
 801ec7e:	d427      	bmi.n	801ecd0 <__sflush_r+0xb8>
 801ec80:	2200      	movs	r2, #0
 801ec82:	6062      	str	r2, [r4, #4]
 801ec84:	04d9      	lsls	r1, r3, #19
 801ec86:	6922      	ldr	r2, [r4, #16]
 801ec88:	6022      	str	r2, [r4, #0]
 801ec8a:	d504      	bpl.n	801ec96 <__sflush_r+0x7e>
 801ec8c:	1c42      	adds	r2, r0, #1
 801ec8e:	d101      	bne.n	801ec94 <__sflush_r+0x7c>
 801ec90:	682b      	ldr	r3, [r5, #0]
 801ec92:	b903      	cbnz	r3, 801ec96 <__sflush_r+0x7e>
 801ec94:	6560      	str	r0, [r4, #84]	; 0x54
 801ec96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec98:	602f      	str	r7, [r5, #0]
 801ec9a:	2900      	cmp	r1, #0
 801ec9c:	d0c9      	beq.n	801ec32 <__sflush_r+0x1a>
 801ec9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eca2:	4299      	cmp	r1, r3
 801eca4:	d002      	beq.n	801ecac <__sflush_r+0x94>
 801eca6:	4628      	mov	r0, r5
 801eca8:	f000 fb94 	bl	801f3d4 <_free_r>
 801ecac:	2000      	movs	r0, #0
 801ecae:	6360      	str	r0, [r4, #52]	; 0x34
 801ecb0:	e7c0      	b.n	801ec34 <__sflush_r+0x1c>
 801ecb2:	2301      	movs	r3, #1
 801ecb4:	4628      	mov	r0, r5
 801ecb6:	47b0      	blx	r6
 801ecb8:	1c41      	adds	r1, r0, #1
 801ecba:	d1c8      	bne.n	801ec4e <__sflush_r+0x36>
 801ecbc:	682b      	ldr	r3, [r5, #0]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d0c5      	beq.n	801ec4e <__sflush_r+0x36>
 801ecc2:	2b1d      	cmp	r3, #29
 801ecc4:	d001      	beq.n	801ecca <__sflush_r+0xb2>
 801ecc6:	2b16      	cmp	r3, #22
 801ecc8:	d101      	bne.n	801ecce <__sflush_r+0xb6>
 801ecca:	602f      	str	r7, [r5, #0]
 801eccc:	e7b1      	b.n	801ec32 <__sflush_r+0x1a>
 801ecce:	89a3      	ldrh	r3, [r4, #12]
 801ecd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecd4:	81a3      	strh	r3, [r4, #12]
 801ecd6:	e7ad      	b.n	801ec34 <__sflush_r+0x1c>
 801ecd8:	690f      	ldr	r7, [r1, #16]
 801ecda:	2f00      	cmp	r7, #0
 801ecdc:	d0a9      	beq.n	801ec32 <__sflush_r+0x1a>
 801ecde:	0793      	lsls	r3, r2, #30
 801ece0:	680e      	ldr	r6, [r1, #0]
 801ece2:	bf08      	it	eq
 801ece4:	694b      	ldreq	r3, [r1, #20]
 801ece6:	600f      	str	r7, [r1, #0]
 801ece8:	bf18      	it	ne
 801ecea:	2300      	movne	r3, #0
 801ecec:	eba6 0807 	sub.w	r8, r6, r7
 801ecf0:	608b      	str	r3, [r1, #8]
 801ecf2:	f1b8 0f00 	cmp.w	r8, #0
 801ecf6:	dd9c      	ble.n	801ec32 <__sflush_r+0x1a>
 801ecf8:	6a21      	ldr	r1, [r4, #32]
 801ecfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ecfc:	4643      	mov	r3, r8
 801ecfe:	463a      	mov	r2, r7
 801ed00:	4628      	mov	r0, r5
 801ed02:	47b0      	blx	r6
 801ed04:	2800      	cmp	r0, #0
 801ed06:	dc06      	bgt.n	801ed16 <__sflush_r+0xfe>
 801ed08:	89a3      	ldrh	r3, [r4, #12]
 801ed0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed0e:	81a3      	strh	r3, [r4, #12]
 801ed10:	f04f 30ff 	mov.w	r0, #4294967295
 801ed14:	e78e      	b.n	801ec34 <__sflush_r+0x1c>
 801ed16:	4407      	add	r7, r0
 801ed18:	eba8 0800 	sub.w	r8, r8, r0
 801ed1c:	e7e9      	b.n	801ecf2 <__sflush_r+0xda>
 801ed1e:	bf00      	nop
 801ed20:	dfbffffe 	.word	0xdfbffffe

0801ed24 <_fflush_r>:
 801ed24:	b538      	push	{r3, r4, r5, lr}
 801ed26:	690b      	ldr	r3, [r1, #16]
 801ed28:	4605      	mov	r5, r0
 801ed2a:	460c      	mov	r4, r1
 801ed2c:	b913      	cbnz	r3, 801ed34 <_fflush_r+0x10>
 801ed2e:	2500      	movs	r5, #0
 801ed30:	4628      	mov	r0, r5
 801ed32:	bd38      	pop	{r3, r4, r5, pc}
 801ed34:	b118      	cbz	r0, 801ed3e <_fflush_r+0x1a>
 801ed36:	6a03      	ldr	r3, [r0, #32]
 801ed38:	b90b      	cbnz	r3, 801ed3e <_fflush_r+0x1a>
 801ed3a:	f000 f8a9 	bl	801ee90 <__sinit>
 801ed3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d0f3      	beq.n	801ed2e <_fflush_r+0xa>
 801ed46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ed48:	07d0      	lsls	r0, r2, #31
 801ed4a:	d404      	bmi.n	801ed56 <_fflush_r+0x32>
 801ed4c:	0599      	lsls	r1, r3, #22
 801ed4e:	d402      	bmi.n	801ed56 <_fflush_r+0x32>
 801ed50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed52:	f000 fb21 	bl	801f398 <__retarget_lock_acquire_recursive>
 801ed56:	4628      	mov	r0, r5
 801ed58:	4621      	mov	r1, r4
 801ed5a:	f7ff ff5d 	bl	801ec18 <__sflush_r>
 801ed5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed60:	07da      	lsls	r2, r3, #31
 801ed62:	4605      	mov	r5, r0
 801ed64:	d4e4      	bmi.n	801ed30 <_fflush_r+0xc>
 801ed66:	89a3      	ldrh	r3, [r4, #12]
 801ed68:	059b      	lsls	r3, r3, #22
 801ed6a:	d4e1      	bmi.n	801ed30 <_fflush_r+0xc>
 801ed6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed6e:	f000 fb14 	bl	801f39a <__retarget_lock_release_recursive>
 801ed72:	e7dd      	b.n	801ed30 <_fflush_r+0xc>

0801ed74 <fflush>:
 801ed74:	4601      	mov	r1, r0
 801ed76:	b920      	cbnz	r0, 801ed82 <fflush+0xe>
 801ed78:	4a04      	ldr	r2, [pc, #16]	; (801ed8c <fflush+0x18>)
 801ed7a:	4905      	ldr	r1, [pc, #20]	; (801ed90 <fflush+0x1c>)
 801ed7c:	4805      	ldr	r0, [pc, #20]	; (801ed94 <fflush+0x20>)
 801ed7e:	f000 b89f 	b.w	801eec0 <_fwalk_sglue>
 801ed82:	4b05      	ldr	r3, [pc, #20]	; (801ed98 <fflush+0x24>)
 801ed84:	6818      	ldr	r0, [r3, #0]
 801ed86:	f7ff bfcd 	b.w	801ed24 <_fflush_r>
 801ed8a:	bf00      	nop
 801ed8c:	200006ec 	.word	0x200006ec
 801ed90:	0801ed25 	.word	0x0801ed25
 801ed94:	20000864 	.word	0x20000864
 801ed98:	200008b0 	.word	0x200008b0

0801ed9c <std>:
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	b510      	push	{r4, lr}
 801eda0:	4604      	mov	r4, r0
 801eda2:	e9c0 3300 	strd	r3, r3, [r0]
 801eda6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801edaa:	6083      	str	r3, [r0, #8]
 801edac:	8181      	strh	r1, [r0, #12]
 801edae:	6643      	str	r3, [r0, #100]	; 0x64
 801edb0:	81c2      	strh	r2, [r0, #14]
 801edb2:	6183      	str	r3, [r0, #24]
 801edb4:	4619      	mov	r1, r3
 801edb6:	2208      	movs	r2, #8
 801edb8:	305c      	adds	r0, #92	; 0x5c
 801edba:	f000 fa53 	bl	801f264 <memset>
 801edbe:	4b05      	ldr	r3, [pc, #20]	; (801edd4 <std+0x38>)
 801edc0:	6263      	str	r3, [r4, #36]	; 0x24
 801edc2:	4b05      	ldr	r3, [pc, #20]	; (801edd8 <std+0x3c>)
 801edc4:	62a3      	str	r3, [r4, #40]	; 0x28
 801edc6:	4b05      	ldr	r3, [pc, #20]	; (801eddc <std+0x40>)
 801edc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801edca:	4b05      	ldr	r3, [pc, #20]	; (801ede0 <std+0x44>)
 801edcc:	6224      	str	r4, [r4, #32]
 801edce:	6323      	str	r3, [r4, #48]	; 0x30
 801edd0:	bd10      	pop	{r4, pc}
 801edd2:	bf00      	nop
 801edd4:	0801f081 	.word	0x0801f081
 801edd8:	0801f0a3 	.word	0x0801f0a3
 801eddc:	0801f0db 	.word	0x0801f0db
 801ede0:	0801f0ff 	.word	0x0801f0ff

0801ede4 <stdio_exit_handler>:
 801ede4:	4a02      	ldr	r2, [pc, #8]	; (801edf0 <stdio_exit_handler+0xc>)
 801ede6:	4903      	ldr	r1, [pc, #12]	; (801edf4 <stdio_exit_handler+0x10>)
 801ede8:	4803      	ldr	r0, [pc, #12]	; (801edf8 <stdio_exit_handler+0x14>)
 801edea:	f000 b869 	b.w	801eec0 <_fwalk_sglue>
 801edee:	bf00      	nop
 801edf0:	200006ec 	.word	0x200006ec
 801edf4:	0801ed25 	.word	0x0801ed25
 801edf8:	20000864 	.word	0x20000864

0801edfc <cleanup_stdio>:
 801edfc:	6841      	ldr	r1, [r0, #4]
 801edfe:	4b0c      	ldr	r3, [pc, #48]	; (801ee30 <cleanup_stdio+0x34>)
 801ee00:	4299      	cmp	r1, r3
 801ee02:	b510      	push	{r4, lr}
 801ee04:	4604      	mov	r4, r0
 801ee06:	d001      	beq.n	801ee0c <cleanup_stdio+0x10>
 801ee08:	f7ff ff8c 	bl	801ed24 <_fflush_r>
 801ee0c:	68a1      	ldr	r1, [r4, #8]
 801ee0e:	4b09      	ldr	r3, [pc, #36]	; (801ee34 <cleanup_stdio+0x38>)
 801ee10:	4299      	cmp	r1, r3
 801ee12:	d002      	beq.n	801ee1a <cleanup_stdio+0x1e>
 801ee14:	4620      	mov	r0, r4
 801ee16:	f7ff ff85 	bl	801ed24 <_fflush_r>
 801ee1a:	68e1      	ldr	r1, [r4, #12]
 801ee1c:	4b06      	ldr	r3, [pc, #24]	; (801ee38 <cleanup_stdio+0x3c>)
 801ee1e:	4299      	cmp	r1, r3
 801ee20:	d004      	beq.n	801ee2c <cleanup_stdio+0x30>
 801ee22:	4620      	mov	r0, r4
 801ee24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee28:	f7ff bf7c 	b.w	801ed24 <_fflush_r>
 801ee2c:	bd10      	pop	{r4, pc}
 801ee2e:	bf00      	nop
 801ee30:	20002984 	.word	0x20002984
 801ee34:	200029ec 	.word	0x200029ec
 801ee38:	20002a54 	.word	0x20002a54

0801ee3c <global_stdio_init.part.0>:
 801ee3c:	b510      	push	{r4, lr}
 801ee3e:	4b0b      	ldr	r3, [pc, #44]	; (801ee6c <global_stdio_init.part.0+0x30>)
 801ee40:	4c0b      	ldr	r4, [pc, #44]	; (801ee70 <global_stdio_init.part.0+0x34>)
 801ee42:	4a0c      	ldr	r2, [pc, #48]	; (801ee74 <global_stdio_init.part.0+0x38>)
 801ee44:	601a      	str	r2, [r3, #0]
 801ee46:	4620      	mov	r0, r4
 801ee48:	2200      	movs	r2, #0
 801ee4a:	2104      	movs	r1, #4
 801ee4c:	f7ff ffa6 	bl	801ed9c <std>
 801ee50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ee54:	2201      	movs	r2, #1
 801ee56:	2109      	movs	r1, #9
 801ee58:	f7ff ffa0 	bl	801ed9c <std>
 801ee5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ee60:	2202      	movs	r2, #2
 801ee62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee66:	2112      	movs	r1, #18
 801ee68:	f7ff bf98 	b.w	801ed9c <std>
 801ee6c:	20002abc 	.word	0x20002abc
 801ee70:	20002984 	.word	0x20002984
 801ee74:	0801ede5 	.word	0x0801ede5

0801ee78 <__sfp_lock_acquire>:
 801ee78:	4801      	ldr	r0, [pc, #4]	; (801ee80 <__sfp_lock_acquire+0x8>)
 801ee7a:	f000 ba8d 	b.w	801f398 <__retarget_lock_acquire_recursive>
 801ee7e:	bf00      	nop
 801ee80:	20002ac5 	.word	0x20002ac5

0801ee84 <__sfp_lock_release>:
 801ee84:	4801      	ldr	r0, [pc, #4]	; (801ee8c <__sfp_lock_release+0x8>)
 801ee86:	f000 ba88 	b.w	801f39a <__retarget_lock_release_recursive>
 801ee8a:	bf00      	nop
 801ee8c:	20002ac5 	.word	0x20002ac5

0801ee90 <__sinit>:
 801ee90:	b510      	push	{r4, lr}
 801ee92:	4604      	mov	r4, r0
 801ee94:	f7ff fff0 	bl	801ee78 <__sfp_lock_acquire>
 801ee98:	6a23      	ldr	r3, [r4, #32]
 801ee9a:	b11b      	cbz	r3, 801eea4 <__sinit+0x14>
 801ee9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eea0:	f7ff bff0 	b.w	801ee84 <__sfp_lock_release>
 801eea4:	4b04      	ldr	r3, [pc, #16]	; (801eeb8 <__sinit+0x28>)
 801eea6:	6223      	str	r3, [r4, #32]
 801eea8:	4b04      	ldr	r3, [pc, #16]	; (801eebc <__sinit+0x2c>)
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d1f5      	bne.n	801ee9c <__sinit+0xc>
 801eeb0:	f7ff ffc4 	bl	801ee3c <global_stdio_init.part.0>
 801eeb4:	e7f2      	b.n	801ee9c <__sinit+0xc>
 801eeb6:	bf00      	nop
 801eeb8:	0801edfd 	.word	0x0801edfd
 801eebc:	20002abc 	.word	0x20002abc

0801eec0 <_fwalk_sglue>:
 801eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eec4:	4607      	mov	r7, r0
 801eec6:	4688      	mov	r8, r1
 801eec8:	4614      	mov	r4, r2
 801eeca:	2600      	movs	r6, #0
 801eecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801eed0:	f1b9 0901 	subs.w	r9, r9, #1
 801eed4:	d505      	bpl.n	801eee2 <_fwalk_sglue+0x22>
 801eed6:	6824      	ldr	r4, [r4, #0]
 801eed8:	2c00      	cmp	r4, #0
 801eeda:	d1f7      	bne.n	801eecc <_fwalk_sglue+0xc>
 801eedc:	4630      	mov	r0, r6
 801eede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eee2:	89ab      	ldrh	r3, [r5, #12]
 801eee4:	2b01      	cmp	r3, #1
 801eee6:	d907      	bls.n	801eef8 <_fwalk_sglue+0x38>
 801eee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eeec:	3301      	adds	r3, #1
 801eeee:	d003      	beq.n	801eef8 <_fwalk_sglue+0x38>
 801eef0:	4629      	mov	r1, r5
 801eef2:	4638      	mov	r0, r7
 801eef4:	47c0      	blx	r8
 801eef6:	4306      	orrs	r6, r0
 801eef8:	3568      	adds	r5, #104	; 0x68
 801eefa:	e7e9      	b.n	801eed0 <_fwalk_sglue+0x10>

0801eefc <iprintf>:
 801eefc:	b40f      	push	{r0, r1, r2, r3}
 801eefe:	b507      	push	{r0, r1, r2, lr}
 801ef00:	4906      	ldr	r1, [pc, #24]	; (801ef1c <iprintf+0x20>)
 801ef02:	ab04      	add	r3, sp, #16
 801ef04:	6808      	ldr	r0, [r1, #0]
 801ef06:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef0a:	6881      	ldr	r1, [r0, #8]
 801ef0c:	9301      	str	r3, [sp, #4]
 801ef0e:	f001 fc53 	bl	80207b8 <_vfiprintf_r>
 801ef12:	b003      	add	sp, #12
 801ef14:	f85d eb04 	ldr.w	lr, [sp], #4
 801ef18:	b004      	add	sp, #16
 801ef1a:	4770      	bx	lr
 801ef1c:	200008b0 	.word	0x200008b0

0801ef20 <_puts_r>:
 801ef20:	6a03      	ldr	r3, [r0, #32]
 801ef22:	b570      	push	{r4, r5, r6, lr}
 801ef24:	6884      	ldr	r4, [r0, #8]
 801ef26:	4605      	mov	r5, r0
 801ef28:	460e      	mov	r6, r1
 801ef2a:	b90b      	cbnz	r3, 801ef30 <_puts_r+0x10>
 801ef2c:	f7ff ffb0 	bl	801ee90 <__sinit>
 801ef30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ef32:	07db      	lsls	r3, r3, #31
 801ef34:	d405      	bmi.n	801ef42 <_puts_r+0x22>
 801ef36:	89a3      	ldrh	r3, [r4, #12]
 801ef38:	0598      	lsls	r0, r3, #22
 801ef3a:	d402      	bmi.n	801ef42 <_puts_r+0x22>
 801ef3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef3e:	f000 fa2b 	bl	801f398 <__retarget_lock_acquire_recursive>
 801ef42:	89a3      	ldrh	r3, [r4, #12]
 801ef44:	0719      	lsls	r1, r3, #28
 801ef46:	d513      	bpl.n	801ef70 <_puts_r+0x50>
 801ef48:	6923      	ldr	r3, [r4, #16]
 801ef4a:	b18b      	cbz	r3, 801ef70 <_puts_r+0x50>
 801ef4c:	3e01      	subs	r6, #1
 801ef4e:	68a3      	ldr	r3, [r4, #8]
 801ef50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ef54:	3b01      	subs	r3, #1
 801ef56:	60a3      	str	r3, [r4, #8]
 801ef58:	b9e9      	cbnz	r1, 801ef96 <_puts_r+0x76>
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	da2e      	bge.n	801efbc <_puts_r+0x9c>
 801ef5e:	4622      	mov	r2, r4
 801ef60:	210a      	movs	r1, #10
 801ef62:	4628      	mov	r0, r5
 801ef64:	f000 f8cf 	bl	801f106 <__swbuf_r>
 801ef68:	3001      	adds	r0, #1
 801ef6a:	d007      	beq.n	801ef7c <_puts_r+0x5c>
 801ef6c:	250a      	movs	r5, #10
 801ef6e:	e007      	b.n	801ef80 <_puts_r+0x60>
 801ef70:	4621      	mov	r1, r4
 801ef72:	4628      	mov	r0, r5
 801ef74:	f000 f904 	bl	801f180 <__swsetup_r>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	d0e7      	beq.n	801ef4c <_puts_r+0x2c>
 801ef7c:	f04f 35ff 	mov.w	r5, #4294967295
 801ef80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ef82:	07da      	lsls	r2, r3, #31
 801ef84:	d405      	bmi.n	801ef92 <_puts_r+0x72>
 801ef86:	89a3      	ldrh	r3, [r4, #12]
 801ef88:	059b      	lsls	r3, r3, #22
 801ef8a:	d402      	bmi.n	801ef92 <_puts_r+0x72>
 801ef8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef8e:	f000 fa04 	bl	801f39a <__retarget_lock_release_recursive>
 801ef92:	4628      	mov	r0, r5
 801ef94:	bd70      	pop	{r4, r5, r6, pc}
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	da04      	bge.n	801efa4 <_puts_r+0x84>
 801ef9a:	69a2      	ldr	r2, [r4, #24]
 801ef9c:	429a      	cmp	r2, r3
 801ef9e:	dc06      	bgt.n	801efae <_puts_r+0x8e>
 801efa0:	290a      	cmp	r1, #10
 801efa2:	d004      	beq.n	801efae <_puts_r+0x8e>
 801efa4:	6823      	ldr	r3, [r4, #0]
 801efa6:	1c5a      	adds	r2, r3, #1
 801efa8:	6022      	str	r2, [r4, #0]
 801efaa:	7019      	strb	r1, [r3, #0]
 801efac:	e7cf      	b.n	801ef4e <_puts_r+0x2e>
 801efae:	4622      	mov	r2, r4
 801efb0:	4628      	mov	r0, r5
 801efb2:	f000 f8a8 	bl	801f106 <__swbuf_r>
 801efb6:	3001      	adds	r0, #1
 801efb8:	d1c9      	bne.n	801ef4e <_puts_r+0x2e>
 801efba:	e7df      	b.n	801ef7c <_puts_r+0x5c>
 801efbc:	6823      	ldr	r3, [r4, #0]
 801efbe:	250a      	movs	r5, #10
 801efc0:	1c5a      	adds	r2, r3, #1
 801efc2:	6022      	str	r2, [r4, #0]
 801efc4:	701d      	strb	r5, [r3, #0]
 801efc6:	e7db      	b.n	801ef80 <_puts_r+0x60>

0801efc8 <puts>:
 801efc8:	4b02      	ldr	r3, [pc, #8]	; (801efd4 <puts+0xc>)
 801efca:	4601      	mov	r1, r0
 801efcc:	6818      	ldr	r0, [r3, #0]
 801efce:	f7ff bfa7 	b.w	801ef20 <_puts_r>
 801efd2:	bf00      	nop
 801efd4:	200008b0 	.word	0x200008b0

0801efd8 <sniprintf>:
 801efd8:	b40c      	push	{r2, r3}
 801efda:	b530      	push	{r4, r5, lr}
 801efdc:	4b17      	ldr	r3, [pc, #92]	; (801f03c <sniprintf+0x64>)
 801efde:	1e0c      	subs	r4, r1, #0
 801efe0:	681d      	ldr	r5, [r3, #0]
 801efe2:	b09d      	sub	sp, #116	; 0x74
 801efe4:	da08      	bge.n	801eff8 <sniprintf+0x20>
 801efe6:	238b      	movs	r3, #139	; 0x8b
 801efe8:	602b      	str	r3, [r5, #0]
 801efea:	f04f 30ff 	mov.w	r0, #4294967295
 801efee:	b01d      	add	sp, #116	; 0x74
 801eff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eff4:	b002      	add	sp, #8
 801eff6:	4770      	bx	lr
 801eff8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801effc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f000:	bf14      	ite	ne
 801f002:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f006:	4623      	moveq	r3, r4
 801f008:	9304      	str	r3, [sp, #16]
 801f00a:	9307      	str	r3, [sp, #28]
 801f00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f010:	9002      	str	r0, [sp, #8]
 801f012:	9006      	str	r0, [sp, #24]
 801f014:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f01a:	ab21      	add	r3, sp, #132	; 0x84
 801f01c:	a902      	add	r1, sp, #8
 801f01e:	4628      	mov	r0, r5
 801f020:	9301      	str	r3, [sp, #4]
 801f022:	f001 faa1 	bl	8020568 <_svfiprintf_r>
 801f026:	1c43      	adds	r3, r0, #1
 801f028:	bfbc      	itt	lt
 801f02a:	238b      	movlt	r3, #139	; 0x8b
 801f02c:	602b      	strlt	r3, [r5, #0]
 801f02e:	2c00      	cmp	r4, #0
 801f030:	d0dd      	beq.n	801efee <sniprintf+0x16>
 801f032:	9b02      	ldr	r3, [sp, #8]
 801f034:	2200      	movs	r2, #0
 801f036:	701a      	strb	r2, [r3, #0]
 801f038:	e7d9      	b.n	801efee <sniprintf+0x16>
 801f03a:	bf00      	nop
 801f03c:	200008b0 	.word	0x200008b0

0801f040 <siprintf>:
 801f040:	b40e      	push	{r1, r2, r3}
 801f042:	b500      	push	{lr}
 801f044:	b09c      	sub	sp, #112	; 0x70
 801f046:	ab1d      	add	r3, sp, #116	; 0x74
 801f048:	9002      	str	r0, [sp, #8]
 801f04a:	9006      	str	r0, [sp, #24]
 801f04c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f050:	4809      	ldr	r0, [pc, #36]	; (801f078 <siprintf+0x38>)
 801f052:	9107      	str	r1, [sp, #28]
 801f054:	9104      	str	r1, [sp, #16]
 801f056:	4909      	ldr	r1, [pc, #36]	; (801f07c <siprintf+0x3c>)
 801f058:	f853 2b04 	ldr.w	r2, [r3], #4
 801f05c:	9105      	str	r1, [sp, #20]
 801f05e:	6800      	ldr	r0, [r0, #0]
 801f060:	9301      	str	r3, [sp, #4]
 801f062:	a902      	add	r1, sp, #8
 801f064:	f001 fa80 	bl	8020568 <_svfiprintf_r>
 801f068:	9b02      	ldr	r3, [sp, #8]
 801f06a:	2200      	movs	r2, #0
 801f06c:	701a      	strb	r2, [r3, #0]
 801f06e:	b01c      	add	sp, #112	; 0x70
 801f070:	f85d eb04 	ldr.w	lr, [sp], #4
 801f074:	b003      	add	sp, #12
 801f076:	4770      	bx	lr
 801f078:	200008b0 	.word	0x200008b0
 801f07c:	ffff0208 	.word	0xffff0208

0801f080 <__sread>:
 801f080:	b510      	push	{r4, lr}
 801f082:	460c      	mov	r4, r1
 801f084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f088:	f000 f928 	bl	801f2dc <_read_r>
 801f08c:	2800      	cmp	r0, #0
 801f08e:	bfab      	itete	ge
 801f090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f092:	89a3      	ldrhlt	r3, [r4, #12]
 801f094:	181b      	addge	r3, r3, r0
 801f096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f09a:	bfac      	ite	ge
 801f09c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f09e:	81a3      	strhlt	r3, [r4, #12]
 801f0a0:	bd10      	pop	{r4, pc}

0801f0a2 <__swrite>:
 801f0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0a6:	461f      	mov	r7, r3
 801f0a8:	898b      	ldrh	r3, [r1, #12]
 801f0aa:	05db      	lsls	r3, r3, #23
 801f0ac:	4605      	mov	r5, r0
 801f0ae:	460c      	mov	r4, r1
 801f0b0:	4616      	mov	r6, r2
 801f0b2:	d505      	bpl.n	801f0c0 <__swrite+0x1e>
 801f0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0b8:	2302      	movs	r3, #2
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	f000 f8fc 	bl	801f2b8 <_lseek_r>
 801f0c0:	89a3      	ldrh	r3, [r4, #12]
 801f0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f0c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f0ca:	81a3      	strh	r3, [r4, #12]
 801f0cc:	4632      	mov	r2, r6
 801f0ce:	463b      	mov	r3, r7
 801f0d0:	4628      	mov	r0, r5
 801f0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f0d6:	f000 b923 	b.w	801f320 <_write_r>

0801f0da <__sseek>:
 801f0da:	b510      	push	{r4, lr}
 801f0dc:	460c      	mov	r4, r1
 801f0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0e2:	f000 f8e9 	bl	801f2b8 <_lseek_r>
 801f0e6:	1c43      	adds	r3, r0, #1
 801f0e8:	89a3      	ldrh	r3, [r4, #12]
 801f0ea:	bf15      	itete	ne
 801f0ec:	6560      	strne	r0, [r4, #84]	; 0x54
 801f0ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f0f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f0f6:	81a3      	strheq	r3, [r4, #12]
 801f0f8:	bf18      	it	ne
 801f0fa:	81a3      	strhne	r3, [r4, #12]
 801f0fc:	bd10      	pop	{r4, pc}

0801f0fe <__sclose>:
 801f0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f102:	f000 b8c9 	b.w	801f298 <_close_r>

0801f106 <__swbuf_r>:
 801f106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f108:	460e      	mov	r6, r1
 801f10a:	4614      	mov	r4, r2
 801f10c:	4605      	mov	r5, r0
 801f10e:	b118      	cbz	r0, 801f118 <__swbuf_r+0x12>
 801f110:	6a03      	ldr	r3, [r0, #32]
 801f112:	b90b      	cbnz	r3, 801f118 <__swbuf_r+0x12>
 801f114:	f7ff febc 	bl	801ee90 <__sinit>
 801f118:	69a3      	ldr	r3, [r4, #24]
 801f11a:	60a3      	str	r3, [r4, #8]
 801f11c:	89a3      	ldrh	r3, [r4, #12]
 801f11e:	071a      	lsls	r2, r3, #28
 801f120:	d525      	bpl.n	801f16e <__swbuf_r+0x68>
 801f122:	6923      	ldr	r3, [r4, #16]
 801f124:	b31b      	cbz	r3, 801f16e <__swbuf_r+0x68>
 801f126:	6823      	ldr	r3, [r4, #0]
 801f128:	6922      	ldr	r2, [r4, #16]
 801f12a:	1a98      	subs	r0, r3, r2
 801f12c:	6963      	ldr	r3, [r4, #20]
 801f12e:	b2f6      	uxtb	r6, r6
 801f130:	4283      	cmp	r3, r0
 801f132:	4637      	mov	r7, r6
 801f134:	dc04      	bgt.n	801f140 <__swbuf_r+0x3a>
 801f136:	4621      	mov	r1, r4
 801f138:	4628      	mov	r0, r5
 801f13a:	f7ff fdf3 	bl	801ed24 <_fflush_r>
 801f13e:	b9e0      	cbnz	r0, 801f17a <__swbuf_r+0x74>
 801f140:	68a3      	ldr	r3, [r4, #8]
 801f142:	3b01      	subs	r3, #1
 801f144:	60a3      	str	r3, [r4, #8]
 801f146:	6823      	ldr	r3, [r4, #0]
 801f148:	1c5a      	adds	r2, r3, #1
 801f14a:	6022      	str	r2, [r4, #0]
 801f14c:	701e      	strb	r6, [r3, #0]
 801f14e:	6962      	ldr	r2, [r4, #20]
 801f150:	1c43      	adds	r3, r0, #1
 801f152:	429a      	cmp	r2, r3
 801f154:	d004      	beq.n	801f160 <__swbuf_r+0x5a>
 801f156:	89a3      	ldrh	r3, [r4, #12]
 801f158:	07db      	lsls	r3, r3, #31
 801f15a:	d506      	bpl.n	801f16a <__swbuf_r+0x64>
 801f15c:	2e0a      	cmp	r6, #10
 801f15e:	d104      	bne.n	801f16a <__swbuf_r+0x64>
 801f160:	4621      	mov	r1, r4
 801f162:	4628      	mov	r0, r5
 801f164:	f7ff fdde 	bl	801ed24 <_fflush_r>
 801f168:	b938      	cbnz	r0, 801f17a <__swbuf_r+0x74>
 801f16a:	4638      	mov	r0, r7
 801f16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f16e:	4621      	mov	r1, r4
 801f170:	4628      	mov	r0, r5
 801f172:	f000 f805 	bl	801f180 <__swsetup_r>
 801f176:	2800      	cmp	r0, #0
 801f178:	d0d5      	beq.n	801f126 <__swbuf_r+0x20>
 801f17a:	f04f 37ff 	mov.w	r7, #4294967295
 801f17e:	e7f4      	b.n	801f16a <__swbuf_r+0x64>

0801f180 <__swsetup_r>:
 801f180:	b538      	push	{r3, r4, r5, lr}
 801f182:	4b2a      	ldr	r3, [pc, #168]	; (801f22c <__swsetup_r+0xac>)
 801f184:	4605      	mov	r5, r0
 801f186:	6818      	ldr	r0, [r3, #0]
 801f188:	460c      	mov	r4, r1
 801f18a:	b118      	cbz	r0, 801f194 <__swsetup_r+0x14>
 801f18c:	6a03      	ldr	r3, [r0, #32]
 801f18e:	b90b      	cbnz	r3, 801f194 <__swsetup_r+0x14>
 801f190:	f7ff fe7e 	bl	801ee90 <__sinit>
 801f194:	89a3      	ldrh	r3, [r4, #12]
 801f196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f19a:	0718      	lsls	r0, r3, #28
 801f19c:	d422      	bmi.n	801f1e4 <__swsetup_r+0x64>
 801f19e:	06d9      	lsls	r1, r3, #27
 801f1a0:	d407      	bmi.n	801f1b2 <__swsetup_r+0x32>
 801f1a2:	2309      	movs	r3, #9
 801f1a4:	602b      	str	r3, [r5, #0]
 801f1a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f1aa:	81a3      	strh	r3, [r4, #12]
 801f1ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f1b0:	e034      	b.n	801f21c <__swsetup_r+0x9c>
 801f1b2:	0758      	lsls	r0, r3, #29
 801f1b4:	d512      	bpl.n	801f1dc <__swsetup_r+0x5c>
 801f1b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f1b8:	b141      	cbz	r1, 801f1cc <__swsetup_r+0x4c>
 801f1ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f1be:	4299      	cmp	r1, r3
 801f1c0:	d002      	beq.n	801f1c8 <__swsetup_r+0x48>
 801f1c2:	4628      	mov	r0, r5
 801f1c4:	f000 f906 	bl	801f3d4 <_free_r>
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	6363      	str	r3, [r4, #52]	; 0x34
 801f1cc:	89a3      	ldrh	r3, [r4, #12]
 801f1ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f1d2:	81a3      	strh	r3, [r4, #12]
 801f1d4:	2300      	movs	r3, #0
 801f1d6:	6063      	str	r3, [r4, #4]
 801f1d8:	6923      	ldr	r3, [r4, #16]
 801f1da:	6023      	str	r3, [r4, #0]
 801f1dc:	89a3      	ldrh	r3, [r4, #12]
 801f1de:	f043 0308 	orr.w	r3, r3, #8
 801f1e2:	81a3      	strh	r3, [r4, #12]
 801f1e4:	6923      	ldr	r3, [r4, #16]
 801f1e6:	b94b      	cbnz	r3, 801f1fc <__swsetup_r+0x7c>
 801f1e8:	89a3      	ldrh	r3, [r4, #12]
 801f1ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f1ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f1f2:	d003      	beq.n	801f1fc <__swsetup_r+0x7c>
 801f1f4:	4621      	mov	r1, r4
 801f1f6:	4628      	mov	r0, r5
 801f1f8:	f001 fdae 	bl	8020d58 <__smakebuf_r>
 801f1fc:	89a0      	ldrh	r0, [r4, #12]
 801f1fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f202:	f010 0301 	ands.w	r3, r0, #1
 801f206:	d00a      	beq.n	801f21e <__swsetup_r+0x9e>
 801f208:	2300      	movs	r3, #0
 801f20a:	60a3      	str	r3, [r4, #8]
 801f20c:	6963      	ldr	r3, [r4, #20]
 801f20e:	425b      	negs	r3, r3
 801f210:	61a3      	str	r3, [r4, #24]
 801f212:	6923      	ldr	r3, [r4, #16]
 801f214:	b943      	cbnz	r3, 801f228 <__swsetup_r+0xa8>
 801f216:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f21a:	d1c4      	bne.n	801f1a6 <__swsetup_r+0x26>
 801f21c:	bd38      	pop	{r3, r4, r5, pc}
 801f21e:	0781      	lsls	r1, r0, #30
 801f220:	bf58      	it	pl
 801f222:	6963      	ldrpl	r3, [r4, #20]
 801f224:	60a3      	str	r3, [r4, #8]
 801f226:	e7f4      	b.n	801f212 <__swsetup_r+0x92>
 801f228:	2000      	movs	r0, #0
 801f22a:	e7f7      	b.n	801f21c <__swsetup_r+0x9c>
 801f22c:	200008b0 	.word	0x200008b0

0801f230 <memmove>:
 801f230:	4288      	cmp	r0, r1
 801f232:	b510      	push	{r4, lr}
 801f234:	eb01 0402 	add.w	r4, r1, r2
 801f238:	d902      	bls.n	801f240 <memmove+0x10>
 801f23a:	4284      	cmp	r4, r0
 801f23c:	4623      	mov	r3, r4
 801f23e:	d807      	bhi.n	801f250 <memmove+0x20>
 801f240:	1e43      	subs	r3, r0, #1
 801f242:	42a1      	cmp	r1, r4
 801f244:	d008      	beq.n	801f258 <memmove+0x28>
 801f246:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f24e:	e7f8      	b.n	801f242 <memmove+0x12>
 801f250:	4402      	add	r2, r0
 801f252:	4601      	mov	r1, r0
 801f254:	428a      	cmp	r2, r1
 801f256:	d100      	bne.n	801f25a <memmove+0x2a>
 801f258:	bd10      	pop	{r4, pc}
 801f25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f262:	e7f7      	b.n	801f254 <memmove+0x24>

0801f264 <memset>:
 801f264:	4402      	add	r2, r0
 801f266:	4603      	mov	r3, r0
 801f268:	4293      	cmp	r3, r2
 801f26a:	d100      	bne.n	801f26e <memset+0xa>
 801f26c:	4770      	bx	lr
 801f26e:	f803 1b01 	strb.w	r1, [r3], #1
 801f272:	e7f9      	b.n	801f268 <memset+0x4>

0801f274 <strncmp>:
 801f274:	b510      	push	{r4, lr}
 801f276:	b16a      	cbz	r2, 801f294 <strncmp+0x20>
 801f278:	3901      	subs	r1, #1
 801f27a:	1884      	adds	r4, r0, r2
 801f27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f280:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f284:	429a      	cmp	r2, r3
 801f286:	d103      	bne.n	801f290 <strncmp+0x1c>
 801f288:	42a0      	cmp	r0, r4
 801f28a:	d001      	beq.n	801f290 <strncmp+0x1c>
 801f28c:	2a00      	cmp	r2, #0
 801f28e:	d1f5      	bne.n	801f27c <strncmp+0x8>
 801f290:	1ad0      	subs	r0, r2, r3
 801f292:	bd10      	pop	{r4, pc}
 801f294:	4610      	mov	r0, r2
 801f296:	e7fc      	b.n	801f292 <strncmp+0x1e>

0801f298 <_close_r>:
 801f298:	b538      	push	{r3, r4, r5, lr}
 801f29a:	4d06      	ldr	r5, [pc, #24]	; (801f2b4 <_close_r+0x1c>)
 801f29c:	2300      	movs	r3, #0
 801f29e:	4604      	mov	r4, r0
 801f2a0:	4608      	mov	r0, r1
 801f2a2:	602b      	str	r3, [r5, #0]
 801f2a4:	f7f4 fdb3 	bl	8013e0e <_close>
 801f2a8:	1c43      	adds	r3, r0, #1
 801f2aa:	d102      	bne.n	801f2b2 <_close_r+0x1a>
 801f2ac:	682b      	ldr	r3, [r5, #0]
 801f2ae:	b103      	cbz	r3, 801f2b2 <_close_r+0x1a>
 801f2b0:	6023      	str	r3, [r4, #0]
 801f2b2:	bd38      	pop	{r3, r4, r5, pc}
 801f2b4:	20002ac0 	.word	0x20002ac0

0801f2b8 <_lseek_r>:
 801f2b8:	b538      	push	{r3, r4, r5, lr}
 801f2ba:	4d07      	ldr	r5, [pc, #28]	; (801f2d8 <_lseek_r+0x20>)
 801f2bc:	4604      	mov	r4, r0
 801f2be:	4608      	mov	r0, r1
 801f2c0:	4611      	mov	r1, r2
 801f2c2:	2200      	movs	r2, #0
 801f2c4:	602a      	str	r2, [r5, #0]
 801f2c6:	461a      	mov	r2, r3
 801f2c8:	f7f4 fdc8 	bl	8013e5c <_lseek>
 801f2cc:	1c43      	adds	r3, r0, #1
 801f2ce:	d102      	bne.n	801f2d6 <_lseek_r+0x1e>
 801f2d0:	682b      	ldr	r3, [r5, #0]
 801f2d2:	b103      	cbz	r3, 801f2d6 <_lseek_r+0x1e>
 801f2d4:	6023      	str	r3, [r4, #0]
 801f2d6:	bd38      	pop	{r3, r4, r5, pc}
 801f2d8:	20002ac0 	.word	0x20002ac0

0801f2dc <_read_r>:
 801f2dc:	b538      	push	{r3, r4, r5, lr}
 801f2de:	4d07      	ldr	r5, [pc, #28]	; (801f2fc <_read_r+0x20>)
 801f2e0:	4604      	mov	r4, r0
 801f2e2:	4608      	mov	r0, r1
 801f2e4:	4611      	mov	r1, r2
 801f2e6:	2200      	movs	r2, #0
 801f2e8:	602a      	str	r2, [r5, #0]
 801f2ea:	461a      	mov	r2, r3
 801f2ec:	f7f4 fd56 	bl	8013d9c <_read>
 801f2f0:	1c43      	adds	r3, r0, #1
 801f2f2:	d102      	bne.n	801f2fa <_read_r+0x1e>
 801f2f4:	682b      	ldr	r3, [r5, #0]
 801f2f6:	b103      	cbz	r3, 801f2fa <_read_r+0x1e>
 801f2f8:	6023      	str	r3, [r4, #0]
 801f2fa:	bd38      	pop	{r3, r4, r5, pc}
 801f2fc:	20002ac0 	.word	0x20002ac0

0801f300 <_sbrk_r>:
 801f300:	b538      	push	{r3, r4, r5, lr}
 801f302:	4d06      	ldr	r5, [pc, #24]	; (801f31c <_sbrk_r+0x1c>)
 801f304:	2300      	movs	r3, #0
 801f306:	4604      	mov	r4, r0
 801f308:	4608      	mov	r0, r1
 801f30a:	602b      	str	r3, [r5, #0]
 801f30c:	f7f4 fdb4 	bl	8013e78 <_sbrk>
 801f310:	1c43      	adds	r3, r0, #1
 801f312:	d102      	bne.n	801f31a <_sbrk_r+0x1a>
 801f314:	682b      	ldr	r3, [r5, #0]
 801f316:	b103      	cbz	r3, 801f31a <_sbrk_r+0x1a>
 801f318:	6023      	str	r3, [r4, #0]
 801f31a:	bd38      	pop	{r3, r4, r5, pc}
 801f31c:	20002ac0 	.word	0x20002ac0

0801f320 <_write_r>:
 801f320:	b538      	push	{r3, r4, r5, lr}
 801f322:	4d07      	ldr	r5, [pc, #28]	; (801f340 <_write_r+0x20>)
 801f324:	4604      	mov	r4, r0
 801f326:	4608      	mov	r0, r1
 801f328:	4611      	mov	r1, r2
 801f32a:	2200      	movs	r2, #0
 801f32c:	602a      	str	r2, [r5, #0]
 801f32e:	461a      	mov	r2, r3
 801f330:	f7f4 fd51 	bl	8013dd6 <_write>
 801f334:	1c43      	adds	r3, r0, #1
 801f336:	d102      	bne.n	801f33e <_write_r+0x1e>
 801f338:	682b      	ldr	r3, [r5, #0]
 801f33a:	b103      	cbz	r3, 801f33e <_write_r+0x1e>
 801f33c:	6023      	str	r3, [r4, #0]
 801f33e:	bd38      	pop	{r3, r4, r5, pc}
 801f340:	20002ac0 	.word	0x20002ac0

0801f344 <__errno>:
 801f344:	4b01      	ldr	r3, [pc, #4]	; (801f34c <__errno+0x8>)
 801f346:	6818      	ldr	r0, [r3, #0]
 801f348:	4770      	bx	lr
 801f34a:	bf00      	nop
 801f34c:	200008b0 	.word	0x200008b0

0801f350 <__libc_init_array>:
 801f350:	b570      	push	{r4, r5, r6, lr}
 801f352:	4d0d      	ldr	r5, [pc, #52]	; (801f388 <__libc_init_array+0x38>)
 801f354:	4c0d      	ldr	r4, [pc, #52]	; (801f38c <__libc_init_array+0x3c>)
 801f356:	1b64      	subs	r4, r4, r5
 801f358:	10a4      	asrs	r4, r4, #2
 801f35a:	2600      	movs	r6, #0
 801f35c:	42a6      	cmp	r6, r4
 801f35e:	d109      	bne.n	801f374 <__libc_init_array+0x24>
 801f360:	4d0b      	ldr	r5, [pc, #44]	; (801f390 <__libc_init_array+0x40>)
 801f362:	4c0c      	ldr	r4, [pc, #48]	; (801f394 <__libc_init_array+0x44>)
 801f364:	f001 fe0a 	bl	8020f7c <_init>
 801f368:	1b64      	subs	r4, r4, r5
 801f36a:	10a4      	asrs	r4, r4, #2
 801f36c:	2600      	movs	r6, #0
 801f36e:	42a6      	cmp	r6, r4
 801f370:	d105      	bne.n	801f37e <__libc_init_array+0x2e>
 801f372:	bd70      	pop	{r4, r5, r6, pc}
 801f374:	f855 3b04 	ldr.w	r3, [r5], #4
 801f378:	4798      	blx	r3
 801f37a:	3601      	adds	r6, #1
 801f37c:	e7ee      	b.n	801f35c <__libc_init_array+0xc>
 801f37e:	f855 3b04 	ldr.w	r3, [r5], #4
 801f382:	4798      	blx	r3
 801f384:	3601      	adds	r6, #1
 801f386:	e7f2      	b.n	801f36e <__libc_init_array+0x1e>
 801f388:	08023ff4 	.word	0x08023ff4
 801f38c:	08023ff4 	.word	0x08023ff4
 801f390:	08023ff4 	.word	0x08023ff4
 801f394:	08023ff8 	.word	0x08023ff8

0801f398 <__retarget_lock_acquire_recursive>:
 801f398:	4770      	bx	lr

0801f39a <__retarget_lock_release_recursive>:
 801f39a:	4770      	bx	lr

0801f39c <memcpy>:
 801f39c:	440a      	add	r2, r1
 801f39e:	4291      	cmp	r1, r2
 801f3a0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f3a4:	d100      	bne.n	801f3a8 <memcpy+0xc>
 801f3a6:	4770      	bx	lr
 801f3a8:	b510      	push	{r4, lr}
 801f3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f3ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f3b2:	4291      	cmp	r1, r2
 801f3b4:	d1f9      	bne.n	801f3aa <memcpy+0xe>
 801f3b6:	bd10      	pop	{r4, pc}

0801f3b8 <nan>:
 801f3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f3c0 <nan+0x8>
 801f3bc:	4770      	bx	lr
 801f3be:	bf00      	nop
 801f3c0:	00000000 	.word	0x00000000
 801f3c4:	7ff80000 	.word	0x7ff80000

0801f3c8 <nanf>:
 801f3c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f3d0 <nanf+0x8>
 801f3cc:	4770      	bx	lr
 801f3ce:	bf00      	nop
 801f3d0:	7fc00000 	.word	0x7fc00000

0801f3d4 <_free_r>:
 801f3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f3d6:	2900      	cmp	r1, #0
 801f3d8:	d044      	beq.n	801f464 <_free_r+0x90>
 801f3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3de:	9001      	str	r0, [sp, #4]
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	f1a1 0404 	sub.w	r4, r1, #4
 801f3e6:	bfb8      	it	lt
 801f3e8:	18e4      	addlt	r4, r4, r3
 801f3ea:	f7fe fb51 	bl	801da90 <__malloc_lock>
 801f3ee:	4a1e      	ldr	r2, [pc, #120]	; (801f468 <_free_r+0x94>)
 801f3f0:	9801      	ldr	r0, [sp, #4]
 801f3f2:	6813      	ldr	r3, [r2, #0]
 801f3f4:	b933      	cbnz	r3, 801f404 <_free_r+0x30>
 801f3f6:	6063      	str	r3, [r4, #4]
 801f3f8:	6014      	str	r4, [r2, #0]
 801f3fa:	b003      	add	sp, #12
 801f3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f400:	f7fe bb4c 	b.w	801da9c <__malloc_unlock>
 801f404:	42a3      	cmp	r3, r4
 801f406:	d908      	bls.n	801f41a <_free_r+0x46>
 801f408:	6825      	ldr	r5, [r4, #0]
 801f40a:	1961      	adds	r1, r4, r5
 801f40c:	428b      	cmp	r3, r1
 801f40e:	bf01      	itttt	eq
 801f410:	6819      	ldreq	r1, [r3, #0]
 801f412:	685b      	ldreq	r3, [r3, #4]
 801f414:	1949      	addeq	r1, r1, r5
 801f416:	6021      	streq	r1, [r4, #0]
 801f418:	e7ed      	b.n	801f3f6 <_free_r+0x22>
 801f41a:	461a      	mov	r2, r3
 801f41c:	685b      	ldr	r3, [r3, #4]
 801f41e:	b10b      	cbz	r3, 801f424 <_free_r+0x50>
 801f420:	42a3      	cmp	r3, r4
 801f422:	d9fa      	bls.n	801f41a <_free_r+0x46>
 801f424:	6811      	ldr	r1, [r2, #0]
 801f426:	1855      	adds	r5, r2, r1
 801f428:	42a5      	cmp	r5, r4
 801f42a:	d10b      	bne.n	801f444 <_free_r+0x70>
 801f42c:	6824      	ldr	r4, [r4, #0]
 801f42e:	4421      	add	r1, r4
 801f430:	1854      	adds	r4, r2, r1
 801f432:	42a3      	cmp	r3, r4
 801f434:	6011      	str	r1, [r2, #0]
 801f436:	d1e0      	bne.n	801f3fa <_free_r+0x26>
 801f438:	681c      	ldr	r4, [r3, #0]
 801f43a:	685b      	ldr	r3, [r3, #4]
 801f43c:	6053      	str	r3, [r2, #4]
 801f43e:	440c      	add	r4, r1
 801f440:	6014      	str	r4, [r2, #0]
 801f442:	e7da      	b.n	801f3fa <_free_r+0x26>
 801f444:	d902      	bls.n	801f44c <_free_r+0x78>
 801f446:	230c      	movs	r3, #12
 801f448:	6003      	str	r3, [r0, #0]
 801f44a:	e7d6      	b.n	801f3fa <_free_r+0x26>
 801f44c:	6825      	ldr	r5, [r4, #0]
 801f44e:	1961      	adds	r1, r4, r5
 801f450:	428b      	cmp	r3, r1
 801f452:	bf04      	itt	eq
 801f454:	6819      	ldreq	r1, [r3, #0]
 801f456:	685b      	ldreq	r3, [r3, #4]
 801f458:	6063      	str	r3, [r4, #4]
 801f45a:	bf04      	itt	eq
 801f45c:	1949      	addeq	r1, r1, r5
 801f45e:	6021      	streq	r1, [r4, #0]
 801f460:	6054      	str	r4, [r2, #4]
 801f462:	e7ca      	b.n	801f3fa <_free_r+0x26>
 801f464:	b003      	add	sp, #12
 801f466:	bd30      	pop	{r4, r5, pc}
 801f468:	2000297c 	.word	0x2000297c

0801f46c <rshift>:
 801f46c:	6903      	ldr	r3, [r0, #16]
 801f46e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f476:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f47a:	f100 0414 	add.w	r4, r0, #20
 801f47e:	dd45      	ble.n	801f50c <rshift+0xa0>
 801f480:	f011 011f 	ands.w	r1, r1, #31
 801f484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f48c:	d10c      	bne.n	801f4a8 <rshift+0x3c>
 801f48e:	f100 0710 	add.w	r7, r0, #16
 801f492:	4629      	mov	r1, r5
 801f494:	42b1      	cmp	r1, r6
 801f496:	d334      	bcc.n	801f502 <rshift+0x96>
 801f498:	1a9b      	subs	r3, r3, r2
 801f49a:	009b      	lsls	r3, r3, #2
 801f49c:	1eea      	subs	r2, r5, #3
 801f49e:	4296      	cmp	r6, r2
 801f4a0:	bf38      	it	cc
 801f4a2:	2300      	movcc	r3, #0
 801f4a4:	4423      	add	r3, r4
 801f4a6:	e015      	b.n	801f4d4 <rshift+0x68>
 801f4a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f4ac:	f1c1 0820 	rsb	r8, r1, #32
 801f4b0:	40cf      	lsrs	r7, r1
 801f4b2:	f105 0e04 	add.w	lr, r5, #4
 801f4b6:	46a1      	mov	r9, r4
 801f4b8:	4576      	cmp	r6, lr
 801f4ba:	46f4      	mov	ip, lr
 801f4bc:	d815      	bhi.n	801f4ea <rshift+0x7e>
 801f4be:	1a9a      	subs	r2, r3, r2
 801f4c0:	0092      	lsls	r2, r2, #2
 801f4c2:	3a04      	subs	r2, #4
 801f4c4:	3501      	adds	r5, #1
 801f4c6:	42ae      	cmp	r6, r5
 801f4c8:	bf38      	it	cc
 801f4ca:	2200      	movcc	r2, #0
 801f4cc:	18a3      	adds	r3, r4, r2
 801f4ce:	50a7      	str	r7, [r4, r2]
 801f4d0:	b107      	cbz	r7, 801f4d4 <rshift+0x68>
 801f4d2:	3304      	adds	r3, #4
 801f4d4:	1b1a      	subs	r2, r3, r4
 801f4d6:	42a3      	cmp	r3, r4
 801f4d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f4dc:	bf08      	it	eq
 801f4de:	2300      	moveq	r3, #0
 801f4e0:	6102      	str	r2, [r0, #16]
 801f4e2:	bf08      	it	eq
 801f4e4:	6143      	streq	r3, [r0, #20]
 801f4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f4ea:	f8dc c000 	ldr.w	ip, [ip]
 801f4ee:	fa0c fc08 	lsl.w	ip, ip, r8
 801f4f2:	ea4c 0707 	orr.w	r7, ip, r7
 801f4f6:	f849 7b04 	str.w	r7, [r9], #4
 801f4fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f4fe:	40cf      	lsrs	r7, r1
 801f500:	e7da      	b.n	801f4b8 <rshift+0x4c>
 801f502:	f851 cb04 	ldr.w	ip, [r1], #4
 801f506:	f847 cf04 	str.w	ip, [r7, #4]!
 801f50a:	e7c3      	b.n	801f494 <rshift+0x28>
 801f50c:	4623      	mov	r3, r4
 801f50e:	e7e1      	b.n	801f4d4 <rshift+0x68>

0801f510 <__hexdig_fun>:
 801f510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f514:	2b09      	cmp	r3, #9
 801f516:	d802      	bhi.n	801f51e <__hexdig_fun+0xe>
 801f518:	3820      	subs	r0, #32
 801f51a:	b2c0      	uxtb	r0, r0
 801f51c:	4770      	bx	lr
 801f51e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f522:	2b05      	cmp	r3, #5
 801f524:	d801      	bhi.n	801f52a <__hexdig_fun+0x1a>
 801f526:	3847      	subs	r0, #71	; 0x47
 801f528:	e7f7      	b.n	801f51a <__hexdig_fun+0xa>
 801f52a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f52e:	2b05      	cmp	r3, #5
 801f530:	d801      	bhi.n	801f536 <__hexdig_fun+0x26>
 801f532:	3827      	subs	r0, #39	; 0x27
 801f534:	e7f1      	b.n	801f51a <__hexdig_fun+0xa>
 801f536:	2000      	movs	r0, #0
 801f538:	4770      	bx	lr
	...

0801f53c <__gethex>:
 801f53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f540:	4617      	mov	r7, r2
 801f542:	680a      	ldr	r2, [r1, #0]
 801f544:	b085      	sub	sp, #20
 801f546:	f102 0b02 	add.w	fp, r2, #2
 801f54a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f54e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f552:	4681      	mov	r9, r0
 801f554:	468a      	mov	sl, r1
 801f556:	9302      	str	r3, [sp, #8]
 801f558:	32fe      	adds	r2, #254	; 0xfe
 801f55a:	eb02 030b 	add.w	r3, r2, fp
 801f55e:	46d8      	mov	r8, fp
 801f560:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f564:	9301      	str	r3, [sp, #4]
 801f566:	2830      	cmp	r0, #48	; 0x30
 801f568:	d0f7      	beq.n	801f55a <__gethex+0x1e>
 801f56a:	f7ff ffd1 	bl	801f510 <__hexdig_fun>
 801f56e:	4604      	mov	r4, r0
 801f570:	2800      	cmp	r0, #0
 801f572:	d138      	bne.n	801f5e6 <__gethex+0xaa>
 801f574:	49a7      	ldr	r1, [pc, #668]	; (801f814 <__gethex+0x2d8>)
 801f576:	2201      	movs	r2, #1
 801f578:	4640      	mov	r0, r8
 801f57a:	f7ff fe7b 	bl	801f274 <strncmp>
 801f57e:	4606      	mov	r6, r0
 801f580:	2800      	cmp	r0, #0
 801f582:	d169      	bne.n	801f658 <__gethex+0x11c>
 801f584:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f588:	465d      	mov	r5, fp
 801f58a:	f7ff ffc1 	bl	801f510 <__hexdig_fun>
 801f58e:	2800      	cmp	r0, #0
 801f590:	d064      	beq.n	801f65c <__gethex+0x120>
 801f592:	465a      	mov	r2, fp
 801f594:	7810      	ldrb	r0, [r2, #0]
 801f596:	2830      	cmp	r0, #48	; 0x30
 801f598:	4690      	mov	r8, r2
 801f59a:	f102 0201 	add.w	r2, r2, #1
 801f59e:	d0f9      	beq.n	801f594 <__gethex+0x58>
 801f5a0:	f7ff ffb6 	bl	801f510 <__hexdig_fun>
 801f5a4:	2301      	movs	r3, #1
 801f5a6:	fab0 f480 	clz	r4, r0
 801f5aa:	0964      	lsrs	r4, r4, #5
 801f5ac:	465e      	mov	r6, fp
 801f5ae:	9301      	str	r3, [sp, #4]
 801f5b0:	4642      	mov	r2, r8
 801f5b2:	4615      	mov	r5, r2
 801f5b4:	3201      	adds	r2, #1
 801f5b6:	7828      	ldrb	r0, [r5, #0]
 801f5b8:	f7ff ffaa 	bl	801f510 <__hexdig_fun>
 801f5bc:	2800      	cmp	r0, #0
 801f5be:	d1f8      	bne.n	801f5b2 <__gethex+0x76>
 801f5c0:	4994      	ldr	r1, [pc, #592]	; (801f814 <__gethex+0x2d8>)
 801f5c2:	2201      	movs	r2, #1
 801f5c4:	4628      	mov	r0, r5
 801f5c6:	f7ff fe55 	bl	801f274 <strncmp>
 801f5ca:	b978      	cbnz	r0, 801f5ec <__gethex+0xb0>
 801f5cc:	b946      	cbnz	r6, 801f5e0 <__gethex+0xa4>
 801f5ce:	1c6e      	adds	r6, r5, #1
 801f5d0:	4632      	mov	r2, r6
 801f5d2:	4615      	mov	r5, r2
 801f5d4:	3201      	adds	r2, #1
 801f5d6:	7828      	ldrb	r0, [r5, #0]
 801f5d8:	f7ff ff9a 	bl	801f510 <__hexdig_fun>
 801f5dc:	2800      	cmp	r0, #0
 801f5de:	d1f8      	bne.n	801f5d2 <__gethex+0x96>
 801f5e0:	1b73      	subs	r3, r6, r5
 801f5e2:	009e      	lsls	r6, r3, #2
 801f5e4:	e004      	b.n	801f5f0 <__gethex+0xb4>
 801f5e6:	2400      	movs	r4, #0
 801f5e8:	4626      	mov	r6, r4
 801f5ea:	e7e1      	b.n	801f5b0 <__gethex+0x74>
 801f5ec:	2e00      	cmp	r6, #0
 801f5ee:	d1f7      	bne.n	801f5e0 <__gethex+0xa4>
 801f5f0:	782b      	ldrb	r3, [r5, #0]
 801f5f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f5f6:	2b50      	cmp	r3, #80	; 0x50
 801f5f8:	d13d      	bne.n	801f676 <__gethex+0x13a>
 801f5fa:	786b      	ldrb	r3, [r5, #1]
 801f5fc:	2b2b      	cmp	r3, #43	; 0x2b
 801f5fe:	d02f      	beq.n	801f660 <__gethex+0x124>
 801f600:	2b2d      	cmp	r3, #45	; 0x2d
 801f602:	d031      	beq.n	801f668 <__gethex+0x12c>
 801f604:	1c69      	adds	r1, r5, #1
 801f606:	f04f 0b00 	mov.w	fp, #0
 801f60a:	7808      	ldrb	r0, [r1, #0]
 801f60c:	f7ff ff80 	bl	801f510 <__hexdig_fun>
 801f610:	1e42      	subs	r2, r0, #1
 801f612:	b2d2      	uxtb	r2, r2
 801f614:	2a18      	cmp	r2, #24
 801f616:	d82e      	bhi.n	801f676 <__gethex+0x13a>
 801f618:	f1a0 0210 	sub.w	r2, r0, #16
 801f61c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f620:	f7ff ff76 	bl	801f510 <__hexdig_fun>
 801f624:	f100 3cff 	add.w	ip, r0, #4294967295
 801f628:	fa5f fc8c 	uxtb.w	ip, ip
 801f62c:	f1bc 0f18 	cmp.w	ip, #24
 801f630:	d91d      	bls.n	801f66e <__gethex+0x132>
 801f632:	f1bb 0f00 	cmp.w	fp, #0
 801f636:	d000      	beq.n	801f63a <__gethex+0xfe>
 801f638:	4252      	negs	r2, r2
 801f63a:	4416      	add	r6, r2
 801f63c:	f8ca 1000 	str.w	r1, [sl]
 801f640:	b1dc      	cbz	r4, 801f67a <__gethex+0x13e>
 801f642:	9b01      	ldr	r3, [sp, #4]
 801f644:	2b00      	cmp	r3, #0
 801f646:	bf14      	ite	ne
 801f648:	f04f 0800 	movne.w	r8, #0
 801f64c:	f04f 0806 	moveq.w	r8, #6
 801f650:	4640      	mov	r0, r8
 801f652:	b005      	add	sp, #20
 801f654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f658:	4645      	mov	r5, r8
 801f65a:	4626      	mov	r6, r4
 801f65c:	2401      	movs	r4, #1
 801f65e:	e7c7      	b.n	801f5f0 <__gethex+0xb4>
 801f660:	f04f 0b00 	mov.w	fp, #0
 801f664:	1ca9      	adds	r1, r5, #2
 801f666:	e7d0      	b.n	801f60a <__gethex+0xce>
 801f668:	f04f 0b01 	mov.w	fp, #1
 801f66c:	e7fa      	b.n	801f664 <__gethex+0x128>
 801f66e:	230a      	movs	r3, #10
 801f670:	fb03 0002 	mla	r0, r3, r2, r0
 801f674:	e7d0      	b.n	801f618 <__gethex+0xdc>
 801f676:	4629      	mov	r1, r5
 801f678:	e7e0      	b.n	801f63c <__gethex+0x100>
 801f67a:	eba5 0308 	sub.w	r3, r5, r8
 801f67e:	3b01      	subs	r3, #1
 801f680:	4621      	mov	r1, r4
 801f682:	2b07      	cmp	r3, #7
 801f684:	dc0a      	bgt.n	801f69c <__gethex+0x160>
 801f686:	4648      	mov	r0, r9
 801f688:	f000 fa5a 	bl	801fb40 <_Balloc>
 801f68c:	4604      	mov	r4, r0
 801f68e:	b940      	cbnz	r0, 801f6a2 <__gethex+0x166>
 801f690:	4b61      	ldr	r3, [pc, #388]	; (801f818 <__gethex+0x2dc>)
 801f692:	4602      	mov	r2, r0
 801f694:	21e4      	movs	r1, #228	; 0xe4
 801f696:	4861      	ldr	r0, [pc, #388]	; (801f81c <__gethex+0x2e0>)
 801f698:	f001 fbbc 	bl	8020e14 <__assert_func>
 801f69c:	3101      	adds	r1, #1
 801f69e:	105b      	asrs	r3, r3, #1
 801f6a0:	e7ef      	b.n	801f682 <__gethex+0x146>
 801f6a2:	f100 0a14 	add.w	sl, r0, #20
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	495a      	ldr	r1, [pc, #360]	; (801f814 <__gethex+0x2d8>)
 801f6aa:	f8cd a004 	str.w	sl, [sp, #4]
 801f6ae:	469b      	mov	fp, r3
 801f6b0:	45a8      	cmp	r8, r5
 801f6b2:	d342      	bcc.n	801f73a <__gethex+0x1fe>
 801f6b4:	9801      	ldr	r0, [sp, #4]
 801f6b6:	f840 bb04 	str.w	fp, [r0], #4
 801f6ba:	eba0 000a 	sub.w	r0, r0, sl
 801f6be:	1080      	asrs	r0, r0, #2
 801f6c0:	6120      	str	r0, [r4, #16]
 801f6c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f6c6:	4658      	mov	r0, fp
 801f6c8:	f000 fb2c 	bl	801fd24 <__hi0bits>
 801f6cc:	683d      	ldr	r5, [r7, #0]
 801f6ce:	eba8 0000 	sub.w	r0, r8, r0
 801f6d2:	42a8      	cmp	r0, r5
 801f6d4:	dd59      	ble.n	801f78a <__gethex+0x24e>
 801f6d6:	eba0 0805 	sub.w	r8, r0, r5
 801f6da:	4641      	mov	r1, r8
 801f6dc:	4620      	mov	r0, r4
 801f6de:	f000 febb 	bl	8020458 <__any_on>
 801f6e2:	4683      	mov	fp, r0
 801f6e4:	b1b8      	cbz	r0, 801f716 <__gethex+0x1da>
 801f6e6:	f108 33ff 	add.w	r3, r8, #4294967295
 801f6ea:	1159      	asrs	r1, r3, #5
 801f6ec:	f003 021f 	and.w	r2, r3, #31
 801f6f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f6f4:	f04f 0b01 	mov.w	fp, #1
 801f6f8:	fa0b f202 	lsl.w	r2, fp, r2
 801f6fc:	420a      	tst	r2, r1
 801f6fe:	d00a      	beq.n	801f716 <__gethex+0x1da>
 801f700:	455b      	cmp	r3, fp
 801f702:	dd06      	ble.n	801f712 <__gethex+0x1d6>
 801f704:	f1a8 0102 	sub.w	r1, r8, #2
 801f708:	4620      	mov	r0, r4
 801f70a:	f000 fea5 	bl	8020458 <__any_on>
 801f70e:	2800      	cmp	r0, #0
 801f710:	d138      	bne.n	801f784 <__gethex+0x248>
 801f712:	f04f 0b02 	mov.w	fp, #2
 801f716:	4641      	mov	r1, r8
 801f718:	4620      	mov	r0, r4
 801f71a:	f7ff fea7 	bl	801f46c <rshift>
 801f71e:	4446      	add	r6, r8
 801f720:	68bb      	ldr	r3, [r7, #8]
 801f722:	42b3      	cmp	r3, r6
 801f724:	da41      	bge.n	801f7aa <__gethex+0x26e>
 801f726:	4621      	mov	r1, r4
 801f728:	4648      	mov	r0, r9
 801f72a:	f000 fa49 	bl	801fbc0 <_Bfree>
 801f72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f730:	2300      	movs	r3, #0
 801f732:	6013      	str	r3, [r2, #0]
 801f734:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f738:	e78a      	b.n	801f650 <__gethex+0x114>
 801f73a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f73e:	2a2e      	cmp	r2, #46	; 0x2e
 801f740:	d014      	beq.n	801f76c <__gethex+0x230>
 801f742:	2b20      	cmp	r3, #32
 801f744:	d106      	bne.n	801f754 <__gethex+0x218>
 801f746:	9b01      	ldr	r3, [sp, #4]
 801f748:	f843 bb04 	str.w	fp, [r3], #4
 801f74c:	f04f 0b00 	mov.w	fp, #0
 801f750:	9301      	str	r3, [sp, #4]
 801f752:	465b      	mov	r3, fp
 801f754:	7828      	ldrb	r0, [r5, #0]
 801f756:	9303      	str	r3, [sp, #12]
 801f758:	f7ff feda 	bl	801f510 <__hexdig_fun>
 801f75c:	9b03      	ldr	r3, [sp, #12]
 801f75e:	f000 000f 	and.w	r0, r0, #15
 801f762:	4098      	lsls	r0, r3
 801f764:	ea4b 0b00 	orr.w	fp, fp, r0
 801f768:	3304      	adds	r3, #4
 801f76a:	e7a1      	b.n	801f6b0 <__gethex+0x174>
 801f76c:	45a8      	cmp	r8, r5
 801f76e:	d8e8      	bhi.n	801f742 <__gethex+0x206>
 801f770:	2201      	movs	r2, #1
 801f772:	4628      	mov	r0, r5
 801f774:	9303      	str	r3, [sp, #12]
 801f776:	f7ff fd7d 	bl	801f274 <strncmp>
 801f77a:	4926      	ldr	r1, [pc, #152]	; (801f814 <__gethex+0x2d8>)
 801f77c:	9b03      	ldr	r3, [sp, #12]
 801f77e:	2800      	cmp	r0, #0
 801f780:	d1df      	bne.n	801f742 <__gethex+0x206>
 801f782:	e795      	b.n	801f6b0 <__gethex+0x174>
 801f784:	f04f 0b03 	mov.w	fp, #3
 801f788:	e7c5      	b.n	801f716 <__gethex+0x1da>
 801f78a:	da0b      	bge.n	801f7a4 <__gethex+0x268>
 801f78c:	eba5 0800 	sub.w	r8, r5, r0
 801f790:	4621      	mov	r1, r4
 801f792:	4642      	mov	r2, r8
 801f794:	4648      	mov	r0, r9
 801f796:	f000 fc2d 	bl	801fff4 <__lshift>
 801f79a:	eba6 0608 	sub.w	r6, r6, r8
 801f79e:	4604      	mov	r4, r0
 801f7a0:	f100 0a14 	add.w	sl, r0, #20
 801f7a4:	f04f 0b00 	mov.w	fp, #0
 801f7a8:	e7ba      	b.n	801f720 <__gethex+0x1e4>
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	42b3      	cmp	r3, r6
 801f7ae:	dd73      	ble.n	801f898 <__gethex+0x35c>
 801f7b0:	1b9e      	subs	r6, r3, r6
 801f7b2:	42b5      	cmp	r5, r6
 801f7b4:	dc34      	bgt.n	801f820 <__gethex+0x2e4>
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	2b02      	cmp	r3, #2
 801f7ba:	d023      	beq.n	801f804 <__gethex+0x2c8>
 801f7bc:	2b03      	cmp	r3, #3
 801f7be:	d025      	beq.n	801f80c <__gethex+0x2d0>
 801f7c0:	2b01      	cmp	r3, #1
 801f7c2:	d115      	bne.n	801f7f0 <__gethex+0x2b4>
 801f7c4:	42b5      	cmp	r5, r6
 801f7c6:	d113      	bne.n	801f7f0 <__gethex+0x2b4>
 801f7c8:	2d01      	cmp	r5, #1
 801f7ca:	d10b      	bne.n	801f7e4 <__gethex+0x2a8>
 801f7cc:	9a02      	ldr	r2, [sp, #8]
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	6013      	str	r3, [r2, #0]
 801f7d2:	2301      	movs	r3, #1
 801f7d4:	6123      	str	r3, [r4, #16]
 801f7d6:	f8ca 3000 	str.w	r3, [sl]
 801f7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f7e0:	601c      	str	r4, [r3, #0]
 801f7e2:	e735      	b.n	801f650 <__gethex+0x114>
 801f7e4:	1e69      	subs	r1, r5, #1
 801f7e6:	4620      	mov	r0, r4
 801f7e8:	f000 fe36 	bl	8020458 <__any_on>
 801f7ec:	2800      	cmp	r0, #0
 801f7ee:	d1ed      	bne.n	801f7cc <__gethex+0x290>
 801f7f0:	4621      	mov	r1, r4
 801f7f2:	4648      	mov	r0, r9
 801f7f4:	f000 f9e4 	bl	801fbc0 <_Bfree>
 801f7f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	6013      	str	r3, [r2, #0]
 801f7fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f802:	e725      	b.n	801f650 <__gethex+0x114>
 801f804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f806:	2b00      	cmp	r3, #0
 801f808:	d1f2      	bne.n	801f7f0 <__gethex+0x2b4>
 801f80a:	e7df      	b.n	801f7cc <__gethex+0x290>
 801f80c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d1dc      	bne.n	801f7cc <__gethex+0x290>
 801f812:	e7ed      	b.n	801f7f0 <__gethex+0x2b4>
 801f814:	08023c2c 	.word	0x08023c2c
 801f818:	08023d99 	.word	0x08023d99
 801f81c:	08023daa 	.word	0x08023daa
 801f820:	f106 38ff 	add.w	r8, r6, #4294967295
 801f824:	f1bb 0f00 	cmp.w	fp, #0
 801f828:	d133      	bne.n	801f892 <__gethex+0x356>
 801f82a:	f1b8 0f00 	cmp.w	r8, #0
 801f82e:	d004      	beq.n	801f83a <__gethex+0x2fe>
 801f830:	4641      	mov	r1, r8
 801f832:	4620      	mov	r0, r4
 801f834:	f000 fe10 	bl	8020458 <__any_on>
 801f838:	4683      	mov	fp, r0
 801f83a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f83e:	2301      	movs	r3, #1
 801f840:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f844:	f008 081f 	and.w	r8, r8, #31
 801f848:	fa03 f308 	lsl.w	r3, r3, r8
 801f84c:	4213      	tst	r3, r2
 801f84e:	4631      	mov	r1, r6
 801f850:	4620      	mov	r0, r4
 801f852:	bf18      	it	ne
 801f854:	f04b 0b02 	orrne.w	fp, fp, #2
 801f858:	1bad      	subs	r5, r5, r6
 801f85a:	f7ff fe07 	bl	801f46c <rshift>
 801f85e:	687e      	ldr	r6, [r7, #4]
 801f860:	f04f 0802 	mov.w	r8, #2
 801f864:	f1bb 0f00 	cmp.w	fp, #0
 801f868:	d04a      	beq.n	801f900 <__gethex+0x3c4>
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	2b02      	cmp	r3, #2
 801f86e:	d016      	beq.n	801f89e <__gethex+0x362>
 801f870:	2b03      	cmp	r3, #3
 801f872:	d018      	beq.n	801f8a6 <__gethex+0x36a>
 801f874:	2b01      	cmp	r3, #1
 801f876:	d109      	bne.n	801f88c <__gethex+0x350>
 801f878:	f01b 0f02 	tst.w	fp, #2
 801f87c:	d006      	beq.n	801f88c <__gethex+0x350>
 801f87e:	f8da 3000 	ldr.w	r3, [sl]
 801f882:	ea4b 0b03 	orr.w	fp, fp, r3
 801f886:	f01b 0f01 	tst.w	fp, #1
 801f88a:	d10f      	bne.n	801f8ac <__gethex+0x370>
 801f88c:	f048 0810 	orr.w	r8, r8, #16
 801f890:	e036      	b.n	801f900 <__gethex+0x3c4>
 801f892:	f04f 0b01 	mov.w	fp, #1
 801f896:	e7d0      	b.n	801f83a <__gethex+0x2fe>
 801f898:	f04f 0801 	mov.w	r8, #1
 801f89c:	e7e2      	b.n	801f864 <__gethex+0x328>
 801f89e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8a0:	f1c3 0301 	rsb	r3, r3, #1
 801f8a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d0ef      	beq.n	801f88c <__gethex+0x350>
 801f8ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f8b0:	f104 0214 	add.w	r2, r4, #20
 801f8b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f8b8:	9301      	str	r3, [sp, #4]
 801f8ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f8be:	2300      	movs	r3, #0
 801f8c0:	4694      	mov	ip, r2
 801f8c2:	f852 1b04 	ldr.w	r1, [r2], #4
 801f8c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f8ca:	d01e      	beq.n	801f90a <__gethex+0x3ce>
 801f8cc:	3101      	adds	r1, #1
 801f8ce:	f8cc 1000 	str.w	r1, [ip]
 801f8d2:	f1b8 0f02 	cmp.w	r8, #2
 801f8d6:	f104 0214 	add.w	r2, r4, #20
 801f8da:	d13d      	bne.n	801f958 <__gethex+0x41c>
 801f8dc:	683b      	ldr	r3, [r7, #0]
 801f8de:	3b01      	subs	r3, #1
 801f8e0:	42ab      	cmp	r3, r5
 801f8e2:	d10b      	bne.n	801f8fc <__gethex+0x3c0>
 801f8e4:	1169      	asrs	r1, r5, #5
 801f8e6:	2301      	movs	r3, #1
 801f8e8:	f005 051f 	and.w	r5, r5, #31
 801f8ec:	fa03 f505 	lsl.w	r5, r3, r5
 801f8f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f8f4:	421d      	tst	r5, r3
 801f8f6:	bf18      	it	ne
 801f8f8:	f04f 0801 	movne.w	r8, #1
 801f8fc:	f048 0820 	orr.w	r8, r8, #32
 801f900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f902:	601c      	str	r4, [r3, #0]
 801f904:	9b02      	ldr	r3, [sp, #8]
 801f906:	601e      	str	r6, [r3, #0]
 801f908:	e6a2      	b.n	801f650 <__gethex+0x114>
 801f90a:	4290      	cmp	r0, r2
 801f90c:	f842 3c04 	str.w	r3, [r2, #-4]
 801f910:	d8d6      	bhi.n	801f8c0 <__gethex+0x384>
 801f912:	68a2      	ldr	r2, [r4, #8]
 801f914:	4593      	cmp	fp, r2
 801f916:	db17      	blt.n	801f948 <__gethex+0x40c>
 801f918:	6861      	ldr	r1, [r4, #4]
 801f91a:	4648      	mov	r0, r9
 801f91c:	3101      	adds	r1, #1
 801f91e:	f000 f90f 	bl	801fb40 <_Balloc>
 801f922:	4682      	mov	sl, r0
 801f924:	b918      	cbnz	r0, 801f92e <__gethex+0x3f2>
 801f926:	4b1b      	ldr	r3, [pc, #108]	; (801f994 <__gethex+0x458>)
 801f928:	4602      	mov	r2, r0
 801f92a:	2184      	movs	r1, #132	; 0x84
 801f92c:	e6b3      	b.n	801f696 <__gethex+0x15a>
 801f92e:	6922      	ldr	r2, [r4, #16]
 801f930:	3202      	adds	r2, #2
 801f932:	f104 010c 	add.w	r1, r4, #12
 801f936:	0092      	lsls	r2, r2, #2
 801f938:	300c      	adds	r0, #12
 801f93a:	f7ff fd2f 	bl	801f39c <memcpy>
 801f93e:	4621      	mov	r1, r4
 801f940:	4648      	mov	r0, r9
 801f942:	f000 f93d 	bl	801fbc0 <_Bfree>
 801f946:	4654      	mov	r4, sl
 801f948:	6922      	ldr	r2, [r4, #16]
 801f94a:	1c51      	adds	r1, r2, #1
 801f94c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f950:	6121      	str	r1, [r4, #16]
 801f952:	2101      	movs	r1, #1
 801f954:	6151      	str	r1, [r2, #20]
 801f956:	e7bc      	b.n	801f8d2 <__gethex+0x396>
 801f958:	6921      	ldr	r1, [r4, #16]
 801f95a:	4559      	cmp	r1, fp
 801f95c:	dd0b      	ble.n	801f976 <__gethex+0x43a>
 801f95e:	2101      	movs	r1, #1
 801f960:	4620      	mov	r0, r4
 801f962:	f7ff fd83 	bl	801f46c <rshift>
 801f966:	68bb      	ldr	r3, [r7, #8]
 801f968:	3601      	adds	r6, #1
 801f96a:	42b3      	cmp	r3, r6
 801f96c:	f6ff aedb 	blt.w	801f726 <__gethex+0x1ea>
 801f970:	f04f 0801 	mov.w	r8, #1
 801f974:	e7c2      	b.n	801f8fc <__gethex+0x3c0>
 801f976:	f015 051f 	ands.w	r5, r5, #31
 801f97a:	d0f9      	beq.n	801f970 <__gethex+0x434>
 801f97c:	9b01      	ldr	r3, [sp, #4]
 801f97e:	441a      	add	r2, r3
 801f980:	f1c5 0520 	rsb	r5, r5, #32
 801f984:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f988:	f000 f9cc 	bl	801fd24 <__hi0bits>
 801f98c:	42a8      	cmp	r0, r5
 801f98e:	dbe6      	blt.n	801f95e <__gethex+0x422>
 801f990:	e7ee      	b.n	801f970 <__gethex+0x434>
 801f992:	bf00      	nop
 801f994:	08023d99 	.word	0x08023d99

0801f998 <L_shift>:
 801f998:	f1c2 0208 	rsb	r2, r2, #8
 801f99c:	0092      	lsls	r2, r2, #2
 801f99e:	b570      	push	{r4, r5, r6, lr}
 801f9a0:	f1c2 0620 	rsb	r6, r2, #32
 801f9a4:	6843      	ldr	r3, [r0, #4]
 801f9a6:	6804      	ldr	r4, [r0, #0]
 801f9a8:	fa03 f506 	lsl.w	r5, r3, r6
 801f9ac:	432c      	orrs	r4, r5
 801f9ae:	40d3      	lsrs	r3, r2
 801f9b0:	6004      	str	r4, [r0, #0]
 801f9b2:	f840 3f04 	str.w	r3, [r0, #4]!
 801f9b6:	4288      	cmp	r0, r1
 801f9b8:	d3f4      	bcc.n	801f9a4 <L_shift+0xc>
 801f9ba:	bd70      	pop	{r4, r5, r6, pc}

0801f9bc <__match>:
 801f9bc:	b530      	push	{r4, r5, lr}
 801f9be:	6803      	ldr	r3, [r0, #0]
 801f9c0:	3301      	adds	r3, #1
 801f9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f9c6:	b914      	cbnz	r4, 801f9ce <__match+0x12>
 801f9c8:	6003      	str	r3, [r0, #0]
 801f9ca:	2001      	movs	r0, #1
 801f9cc:	bd30      	pop	{r4, r5, pc}
 801f9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f9d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f9d6:	2d19      	cmp	r5, #25
 801f9d8:	bf98      	it	ls
 801f9da:	3220      	addls	r2, #32
 801f9dc:	42a2      	cmp	r2, r4
 801f9de:	d0f0      	beq.n	801f9c2 <__match+0x6>
 801f9e0:	2000      	movs	r0, #0
 801f9e2:	e7f3      	b.n	801f9cc <__match+0x10>

0801f9e4 <__hexnan>:
 801f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9e8:	680b      	ldr	r3, [r1, #0]
 801f9ea:	6801      	ldr	r1, [r0, #0]
 801f9ec:	115e      	asrs	r6, r3, #5
 801f9ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f9f2:	f013 031f 	ands.w	r3, r3, #31
 801f9f6:	b087      	sub	sp, #28
 801f9f8:	bf18      	it	ne
 801f9fa:	3604      	addne	r6, #4
 801f9fc:	2500      	movs	r5, #0
 801f9fe:	1f37      	subs	r7, r6, #4
 801fa00:	4682      	mov	sl, r0
 801fa02:	4690      	mov	r8, r2
 801fa04:	9301      	str	r3, [sp, #4]
 801fa06:	f846 5c04 	str.w	r5, [r6, #-4]
 801fa0a:	46b9      	mov	r9, r7
 801fa0c:	463c      	mov	r4, r7
 801fa0e:	9502      	str	r5, [sp, #8]
 801fa10:	46ab      	mov	fp, r5
 801fa12:	784a      	ldrb	r2, [r1, #1]
 801fa14:	1c4b      	adds	r3, r1, #1
 801fa16:	9303      	str	r3, [sp, #12]
 801fa18:	b342      	cbz	r2, 801fa6c <__hexnan+0x88>
 801fa1a:	4610      	mov	r0, r2
 801fa1c:	9105      	str	r1, [sp, #20]
 801fa1e:	9204      	str	r2, [sp, #16]
 801fa20:	f7ff fd76 	bl	801f510 <__hexdig_fun>
 801fa24:	2800      	cmp	r0, #0
 801fa26:	d14f      	bne.n	801fac8 <__hexnan+0xe4>
 801fa28:	9a04      	ldr	r2, [sp, #16]
 801fa2a:	9905      	ldr	r1, [sp, #20]
 801fa2c:	2a20      	cmp	r2, #32
 801fa2e:	d818      	bhi.n	801fa62 <__hexnan+0x7e>
 801fa30:	9b02      	ldr	r3, [sp, #8]
 801fa32:	459b      	cmp	fp, r3
 801fa34:	dd13      	ble.n	801fa5e <__hexnan+0x7a>
 801fa36:	454c      	cmp	r4, r9
 801fa38:	d206      	bcs.n	801fa48 <__hexnan+0x64>
 801fa3a:	2d07      	cmp	r5, #7
 801fa3c:	dc04      	bgt.n	801fa48 <__hexnan+0x64>
 801fa3e:	462a      	mov	r2, r5
 801fa40:	4649      	mov	r1, r9
 801fa42:	4620      	mov	r0, r4
 801fa44:	f7ff ffa8 	bl	801f998 <L_shift>
 801fa48:	4544      	cmp	r4, r8
 801fa4a:	d950      	bls.n	801faee <__hexnan+0x10a>
 801fa4c:	2300      	movs	r3, #0
 801fa4e:	f1a4 0904 	sub.w	r9, r4, #4
 801fa52:	f844 3c04 	str.w	r3, [r4, #-4]
 801fa56:	f8cd b008 	str.w	fp, [sp, #8]
 801fa5a:	464c      	mov	r4, r9
 801fa5c:	461d      	mov	r5, r3
 801fa5e:	9903      	ldr	r1, [sp, #12]
 801fa60:	e7d7      	b.n	801fa12 <__hexnan+0x2e>
 801fa62:	2a29      	cmp	r2, #41	; 0x29
 801fa64:	d155      	bne.n	801fb12 <__hexnan+0x12e>
 801fa66:	3102      	adds	r1, #2
 801fa68:	f8ca 1000 	str.w	r1, [sl]
 801fa6c:	f1bb 0f00 	cmp.w	fp, #0
 801fa70:	d04f      	beq.n	801fb12 <__hexnan+0x12e>
 801fa72:	454c      	cmp	r4, r9
 801fa74:	d206      	bcs.n	801fa84 <__hexnan+0xa0>
 801fa76:	2d07      	cmp	r5, #7
 801fa78:	dc04      	bgt.n	801fa84 <__hexnan+0xa0>
 801fa7a:	462a      	mov	r2, r5
 801fa7c:	4649      	mov	r1, r9
 801fa7e:	4620      	mov	r0, r4
 801fa80:	f7ff ff8a 	bl	801f998 <L_shift>
 801fa84:	4544      	cmp	r4, r8
 801fa86:	d934      	bls.n	801faf2 <__hexnan+0x10e>
 801fa88:	f1a8 0204 	sub.w	r2, r8, #4
 801fa8c:	4623      	mov	r3, r4
 801fa8e:	f853 1b04 	ldr.w	r1, [r3], #4
 801fa92:	f842 1f04 	str.w	r1, [r2, #4]!
 801fa96:	429f      	cmp	r7, r3
 801fa98:	d2f9      	bcs.n	801fa8e <__hexnan+0xaa>
 801fa9a:	1b3b      	subs	r3, r7, r4
 801fa9c:	f023 0303 	bic.w	r3, r3, #3
 801faa0:	3304      	adds	r3, #4
 801faa2:	3e03      	subs	r6, #3
 801faa4:	3401      	adds	r4, #1
 801faa6:	42a6      	cmp	r6, r4
 801faa8:	bf38      	it	cc
 801faaa:	2304      	movcc	r3, #4
 801faac:	4443      	add	r3, r8
 801faae:	2200      	movs	r2, #0
 801fab0:	f843 2b04 	str.w	r2, [r3], #4
 801fab4:	429f      	cmp	r7, r3
 801fab6:	d2fb      	bcs.n	801fab0 <__hexnan+0xcc>
 801fab8:	683b      	ldr	r3, [r7, #0]
 801faba:	b91b      	cbnz	r3, 801fac4 <__hexnan+0xe0>
 801fabc:	4547      	cmp	r7, r8
 801fabe:	d126      	bne.n	801fb0e <__hexnan+0x12a>
 801fac0:	2301      	movs	r3, #1
 801fac2:	603b      	str	r3, [r7, #0]
 801fac4:	2005      	movs	r0, #5
 801fac6:	e025      	b.n	801fb14 <__hexnan+0x130>
 801fac8:	3501      	adds	r5, #1
 801faca:	2d08      	cmp	r5, #8
 801facc:	f10b 0b01 	add.w	fp, fp, #1
 801fad0:	dd06      	ble.n	801fae0 <__hexnan+0xfc>
 801fad2:	4544      	cmp	r4, r8
 801fad4:	d9c3      	bls.n	801fa5e <__hexnan+0x7a>
 801fad6:	2300      	movs	r3, #0
 801fad8:	f844 3c04 	str.w	r3, [r4, #-4]
 801fadc:	2501      	movs	r5, #1
 801fade:	3c04      	subs	r4, #4
 801fae0:	6822      	ldr	r2, [r4, #0]
 801fae2:	f000 000f 	and.w	r0, r0, #15
 801fae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801faea:	6020      	str	r0, [r4, #0]
 801faec:	e7b7      	b.n	801fa5e <__hexnan+0x7a>
 801faee:	2508      	movs	r5, #8
 801faf0:	e7b5      	b.n	801fa5e <__hexnan+0x7a>
 801faf2:	9b01      	ldr	r3, [sp, #4]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d0df      	beq.n	801fab8 <__hexnan+0xd4>
 801faf8:	f1c3 0320 	rsb	r3, r3, #32
 801fafc:	f04f 32ff 	mov.w	r2, #4294967295
 801fb00:	40da      	lsrs	r2, r3
 801fb02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fb06:	4013      	ands	r3, r2
 801fb08:	f846 3c04 	str.w	r3, [r6, #-4]
 801fb0c:	e7d4      	b.n	801fab8 <__hexnan+0xd4>
 801fb0e:	3f04      	subs	r7, #4
 801fb10:	e7d2      	b.n	801fab8 <__hexnan+0xd4>
 801fb12:	2004      	movs	r0, #4
 801fb14:	b007      	add	sp, #28
 801fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb1a <__ascii_mbtowc>:
 801fb1a:	b082      	sub	sp, #8
 801fb1c:	b901      	cbnz	r1, 801fb20 <__ascii_mbtowc+0x6>
 801fb1e:	a901      	add	r1, sp, #4
 801fb20:	b142      	cbz	r2, 801fb34 <__ascii_mbtowc+0x1a>
 801fb22:	b14b      	cbz	r3, 801fb38 <__ascii_mbtowc+0x1e>
 801fb24:	7813      	ldrb	r3, [r2, #0]
 801fb26:	600b      	str	r3, [r1, #0]
 801fb28:	7812      	ldrb	r2, [r2, #0]
 801fb2a:	1e10      	subs	r0, r2, #0
 801fb2c:	bf18      	it	ne
 801fb2e:	2001      	movne	r0, #1
 801fb30:	b002      	add	sp, #8
 801fb32:	4770      	bx	lr
 801fb34:	4610      	mov	r0, r2
 801fb36:	e7fb      	b.n	801fb30 <__ascii_mbtowc+0x16>
 801fb38:	f06f 0001 	mvn.w	r0, #1
 801fb3c:	e7f8      	b.n	801fb30 <__ascii_mbtowc+0x16>
	...

0801fb40 <_Balloc>:
 801fb40:	b570      	push	{r4, r5, r6, lr}
 801fb42:	69c6      	ldr	r6, [r0, #28]
 801fb44:	4604      	mov	r4, r0
 801fb46:	460d      	mov	r5, r1
 801fb48:	b976      	cbnz	r6, 801fb68 <_Balloc+0x28>
 801fb4a:	2010      	movs	r0, #16
 801fb4c:	f7fd fef0 	bl	801d930 <malloc>
 801fb50:	4602      	mov	r2, r0
 801fb52:	61e0      	str	r0, [r4, #28]
 801fb54:	b920      	cbnz	r0, 801fb60 <_Balloc+0x20>
 801fb56:	4b18      	ldr	r3, [pc, #96]	; (801fbb8 <_Balloc+0x78>)
 801fb58:	4818      	ldr	r0, [pc, #96]	; (801fbbc <_Balloc+0x7c>)
 801fb5a:	216b      	movs	r1, #107	; 0x6b
 801fb5c:	f001 f95a 	bl	8020e14 <__assert_func>
 801fb60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fb64:	6006      	str	r6, [r0, #0]
 801fb66:	60c6      	str	r6, [r0, #12]
 801fb68:	69e6      	ldr	r6, [r4, #28]
 801fb6a:	68f3      	ldr	r3, [r6, #12]
 801fb6c:	b183      	cbz	r3, 801fb90 <_Balloc+0x50>
 801fb6e:	69e3      	ldr	r3, [r4, #28]
 801fb70:	68db      	ldr	r3, [r3, #12]
 801fb72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fb76:	b9b8      	cbnz	r0, 801fba8 <_Balloc+0x68>
 801fb78:	2101      	movs	r1, #1
 801fb7a:	fa01 f605 	lsl.w	r6, r1, r5
 801fb7e:	1d72      	adds	r2, r6, #5
 801fb80:	0092      	lsls	r2, r2, #2
 801fb82:	4620      	mov	r0, r4
 801fb84:	f7fd febe 	bl	801d904 <_calloc_r>
 801fb88:	b160      	cbz	r0, 801fba4 <_Balloc+0x64>
 801fb8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fb8e:	e00e      	b.n	801fbae <_Balloc+0x6e>
 801fb90:	2221      	movs	r2, #33	; 0x21
 801fb92:	2104      	movs	r1, #4
 801fb94:	4620      	mov	r0, r4
 801fb96:	f7fd feb5 	bl	801d904 <_calloc_r>
 801fb9a:	69e3      	ldr	r3, [r4, #28]
 801fb9c:	60f0      	str	r0, [r6, #12]
 801fb9e:	68db      	ldr	r3, [r3, #12]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d1e4      	bne.n	801fb6e <_Balloc+0x2e>
 801fba4:	2000      	movs	r0, #0
 801fba6:	bd70      	pop	{r4, r5, r6, pc}
 801fba8:	6802      	ldr	r2, [r0, #0]
 801fbaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fbae:	2300      	movs	r3, #0
 801fbb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fbb4:	e7f7      	b.n	801fba6 <_Balloc+0x66>
 801fbb6:	bf00      	nop
 801fbb8:	08023e0a 	.word	0x08023e0a
 801fbbc:	08023e21 	.word	0x08023e21

0801fbc0 <_Bfree>:
 801fbc0:	b570      	push	{r4, r5, r6, lr}
 801fbc2:	69c6      	ldr	r6, [r0, #28]
 801fbc4:	4605      	mov	r5, r0
 801fbc6:	460c      	mov	r4, r1
 801fbc8:	b976      	cbnz	r6, 801fbe8 <_Bfree+0x28>
 801fbca:	2010      	movs	r0, #16
 801fbcc:	f7fd feb0 	bl	801d930 <malloc>
 801fbd0:	4602      	mov	r2, r0
 801fbd2:	61e8      	str	r0, [r5, #28]
 801fbd4:	b920      	cbnz	r0, 801fbe0 <_Bfree+0x20>
 801fbd6:	4b09      	ldr	r3, [pc, #36]	; (801fbfc <_Bfree+0x3c>)
 801fbd8:	4809      	ldr	r0, [pc, #36]	; (801fc00 <_Bfree+0x40>)
 801fbda:	218f      	movs	r1, #143	; 0x8f
 801fbdc:	f001 f91a 	bl	8020e14 <__assert_func>
 801fbe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fbe4:	6006      	str	r6, [r0, #0]
 801fbe6:	60c6      	str	r6, [r0, #12]
 801fbe8:	b13c      	cbz	r4, 801fbfa <_Bfree+0x3a>
 801fbea:	69eb      	ldr	r3, [r5, #28]
 801fbec:	6862      	ldr	r2, [r4, #4]
 801fbee:	68db      	ldr	r3, [r3, #12]
 801fbf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fbf4:	6021      	str	r1, [r4, #0]
 801fbf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fbfa:	bd70      	pop	{r4, r5, r6, pc}
 801fbfc:	08023e0a 	.word	0x08023e0a
 801fc00:	08023e21 	.word	0x08023e21

0801fc04 <__multadd>:
 801fc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc08:	690d      	ldr	r5, [r1, #16]
 801fc0a:	4607      	mov	r7, r0
 801fc0c:	460c      	mov	r4, r1
 801fc0e:	461e      	mov	r6, r3
 801fc10:	f101 0c14 	add.w	ip, r1, #20
 801fc14:	2000      	movs	r0, #0
 801fc16:	f8dc 3000 	ldr.w	r3, [ip]
 801fc1a:	b299      	uxth	r1, r3
 801fc1c:	fb02 6101 	mla	r1, r2, r1, r6
 801fc20:	0c1e      	lsrs	r6, r3, #16
 801fc22:	0c0b      	lsrs	r3, r1, #16
 801fc24:	fb02 3306 	mla	r3, r2, r6, r3
 801fc28:	b289      	uxth	r1, r1
 801fc2a:	3001      	adds	r0, #1
 801fc2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fc30:	4285      	cmp	r5, r0
 801fc32:	f84c 1b04 	str.w	r1, [ip], #4
 801fc36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fc3a:	dcec      	bgt.n	801fc16 <__multadd+0x12>
 801fc3c:	b30e      	cbz	r6, 801fc82 <__multadd+0x7e>
 801fc3e:	68a3      	ldr	r3, [r4, #8]
 801fc40:	42ab      	cmp	r3, r5
 801fc42:	dc19      	bgt.n	801fc78 <__multadd+0x74>
 801fc44:	6861      	ldr	r1, [r4, #4]
 801fc46:	4638      	mov	r0, r7
 801fc48:	3101      	adds	r1, #1
 801fc4a:	f7ff ff79 	bl	801fb40 <_Balloc>
 801fc4e:	4680      	mov	r8, r0
 801fc50:	b928      	cbnz	r0, 801fc5e <__multadd+0x5a>
 801fc52:	4602      	mov	r2, r0
 801fc54:	4b0c      	ldr	r3, [pc, #48]	; (801fc88 <__multadd+0x84>)
 801fc56:	480d      	ldr	r0, [pc, #52]	; (801fc8c <__multadd+0x88>)
 801fc58:	21ba      	movs	r1, #186	; 0xba
 801fc5a:	f001 f8db 	bl	8020e14 <__assert_func>
 801fc5e:	6922      	ldr	r2, [r4, #16]
 801fc60:	3202      	adds	r2, #2
 801fc62:	f104 010c 	add.w	r1, r4, #12
 801fc66:	0092      	lsls	r2, r2, #2
 801fc68:	300c      	adds	r0, #12
 801fc6a:	f7ff fb97 	bl	801f39c <memcpy>
 801fc6e:	4621      	mov	r1, r4
 801fc70:	4638      	mov	r0, r7
 801fc72:	f7ff ffa5 	bl	801fbc0 <_Bfree>
 801fc76:	4644      	mov	r4, r8
 801fc78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fc7c:	3501      	adds	r5, #1
 801fc7e:	615e      	str	r6, [r3, #20]
 801fc80:	6125      	str	r5, [r4, #16]
 801fc82:	4620      	mov	r0, r4
 801fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc88:	08023d99 	.word	0x08023d99
 801fc8c:	08023e21 	.word	0x08023e21

0801fc90 <__s2b>:
 801fc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc94:	460c      	mov	r4, r1
 801fc96:	4615      	mov	r5, r2
 801fc98:	461f      	mov	r7, r3
 801fc9a:	2209      	movs	r2, #9
 801fc9c:	3308      	adds	r3, #8
 801fc9e:	4606      	mov	r6, r0
 801fca0:	fb93 f3f2 	sdiv	r3, r3, r2
 801fca4:	2100      	movs	r1, #0
 801fca6:	2201      	movs	r2, #1
 801fca8:	429a      	cmp	r2, r3
 801fcaa:	db09      	blt.n	801fcc0 <__s2b+0x30>
 801fcac:	4630      	mov	r0, r6
 801fcae:	f7ff ff47 	bl	801fb40 <_Balloc>
 801fcb2:	b940      	cbnz	r0, 801fcc6 <__s2b+0x36>
 801fcb4:	4602      	mov	r2, r0
 801fcb6:	4b19      	ldr	r3, [pc, #100]	; (801fd1c <__s2b+0x8c>)
 801fcb8:	4819      	ldr	r0, [pc, #100]	; (801fd20 <__s2b+0x90>)
 801fcba:	21d3      	movs	r1, #211	; 0xd3
 801fcbc:	f001 f8aa 	bl	8020e14 <__assert_func>
 801fcc0:	0052      	lsls	r2, r2, #1
 801fcc2:	3101      	adds	r1, #1
 801fcc4:	e7f0      	b.n	801fca8 <__s2b+0x18>
 801fcc6:	9b08      	ldr	r3, [sp, #32]
 801fcc8:	6143      	str	r3, [r0, #20]
 801fcca:	2d09      	cmp	r5, #9
 801fccc:	f04f 0301 	mov.w	r3, #1
 801fcd0:	6103      	str	r3, [r0, #16]
 801fcd2:	dd16      	ble.n	801fd02 <__s2b+0x72>
 801fcd4:	f104 0909 	add.w	r9, r4, #9
 801fcd8:	46c8      	mov	r8, r9
 801fcda:	442c      	add	r4, r5
 801fcdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fce0:	4601      	mov	r1, r0
 801fce2:	3b30      	subs	r3, #48	; 0x30
 801fce4:	220a      	movs	r2, #10
 801fce6:	4630      	mov	r0, r6
 801fce8:	f7ff ff8c 	bl	801fc04 <__multadd>
 801fcec:	45a0      	cmp	r8, r4
 801fcee:	d1f5      	bne.n	801fcdc <__s2b+0x4c>
 801fcf0:	f1a5 0408 	sub.w	r4, r5, #8
 801fcf4:	444c      	add	r4, r9
 801fcf6:	1b2d      	subs	r5, r5, r4
 801fcf8:	1963      	adds	r3, r4, r5
 801fcfa:	42bb      	cmp	r3, r7
 801fcfc:	db04      	blt.n	801fd08 <__s2b+0x78>
 801fcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd02:	340a      	adds	r4, #10
 801fd04:	2509      	movs	r5, #9
 801fd06:	e7f6      	b.n	801fcf6 <__s2b+0x66>
 801fd08:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fd0c:	4601      	mov	r1, r0
 801fd0e:	3b30      	subs	r3, #48	; 0x30
 801fd10:	220a      	movs	r2, #10
 801fd12:	4630      	mov	r0, r6
 801fd14:	f7ff ff76 	bl	801fc04 <__multadd>
 801fd18:	e7ee      	b.n	801fcf8 <__s2b+0x68>
 801fd1a:	bf00      	nop
 801fd1c:	08023d99 	.word	0x08023d99
 801fd20:	08023e21 	.word	0x08023e21

0801fd24 <__hi0bits>:
 801fd24:	0c03      	lsrs	r3, r0, #16
 801fd26:	041b      	lsls	r3, r3, #16
 801fd28:	b9d3      	cbnz	r3, 801fd60 <__hi0bits+0x3c>
 801fd2a:	0400      	lsls	r0, r0, #16
 801fd2c:	2310      	movs	r3, #16
 801fd2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fd32:	bf04      	itt	eq
 801fd34:	0200      	lsleq	r0, r0, #8
 801fd36:	3308      	addeq	r3, #8
 801fd38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fd3c:	bf04      	itt	eq
 801fd3e:	0100      	lsleq	r0, r0, #4
 801fd40:	3304      	addeq	r3, #4
 801fd42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fd46:	bf04      	itt	eq
 801fd48:	0080      	lsleq	r0, r0, #2
 801fd4a:	3302      	addeq	r3, #2
 801fd4c:	2800      	cmp	r0, #0
 801fd4e:	db05      	blt.n	801fd5c <__hi0bits+0x38>
 801fd50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fd54:	f103 0301 	add.w	r3, r3, #1
 801fd58:	bf08      	it	eq
 801fd5a:	2320      	moveq	r3, #32
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	4770      	bx	lr
 801fd60:	2300      	movs	r3, #0
 801fd62:	e7e4      	b.n	801fd2e <__hi0bits+0xa>

0801fd64 <__lo0bits>:
 801fd64:	6803      	ldr	r3, [r0, #0]
 801fd66:	f013 0207 	ands.w	r2, r3, #7
 801fd6a:	d00c      	beq.n	801fd86 <__lo0bits+0x22>
 801fd6c:	07d9      	lsls	r1, r3, #31
 801fd6e:	d422      	bmi.n	801fdb6 <__lo0bits+0x52>
 801fd70:	079a      	lsls	r2, r3, #30
 801fd72:	bf49      	itett	mi
 801fd74:	085b      	lsrmi	r3, r3, #1
 801fd76:	089b      	lsrpl	r3, r3, #2
 801fd78:	6003      	strmi	r3, [r0, #0]
 801fd7a:	2201      	movmi	r2, #1
 801fd7c:	bf5c      	itt	pl
 801fd7e:	6003      	strpl	r3, [r0, #0]
 801fd80:	2202      	movpl	r2, #2
 801fd82:	4610      	mov	r0, r2
 801fd84:	4770      	bx	lr
 801fd86:	b299      	uxth	r1, r3
 801fd88:	b909      	cbnz	r1, 801fd8e <__lo0bits+0x2a>
 801fd8a:	0c1b      	lsrs	r3, r3, #16
 801fd8c:	2210      	movs	r2, #16
 801fd8e:	b2d9      	uxtb	r1, r3
 801fd90:	b909      	cbnz	r1, 801fd96 <__lo0bits+0x32>
 801fd92:	3208      	adds	r2, #8
 801fd94:	0a1b      	lsrs	r3, r3, #8
 801fd96:	0719      	lsls	r1, r3, #28
 801fd98:	bf04      	itt	eq
 801fd9a:	091b      	lsreq	r3, r3, #4
 801fd9c:	3204      	addeq	r2, #4
 801fd9e:	0799      	lsls	r1, r3, #30
 801fda0:	bf04      	itt	eq
 801fda2:	089b      	lsreq	r3, r3, #2
 801fda4:	3202      	addeq	r2, #2
 801fda6:	07d9      	lsls	r1, r3, #31
 801fda8:	d403      	bmi.n	801fdb2 <__lo0bits+0x4e>
 801fdaa:	085b      	lsrs	r3, r3, #1
 801fdac:	f102 0201 	add.w	r2, r2, #1
 801fdb0:	d003      	beq.n	801fdba <__lo0bits+0x56>
 801fdb2:	6003      	str	r3, [r0, #0]
 801fdb4:	e7e5      	b.n	801fd82 <__lo0bits+0x1e>
 801fdb6:	2200      	movs	r2, #0
 801fdb8:	e7e3      	b.n	801fd82 <__lo0bits+0x1e>
 801fdba:	2220      	movs	r2, #32
 801fdbc:	e7e1      	b.n	801fd82 <__lo0bits+0x1e>
	...

0801fdc0 <__i2b>:
 801fdc0:	b510      	push	{r4, lr}
 801fdc2:	460c      	mov	r4, r1
 801fdc4:	2101      	movs	r1, #1
 801fdc6:	f7ff febb 	bl	801fb40 <_Balloc>
 801fdca:	4602      	mov	r2, r0
 801fdcc:	b928      	cbnz	r0, 801fdda <__i2b+0x1a>
 801fdce:	4b05      	ldr	r3, [pc, #20]	; (801fde4 <__i2b+0x24>)
 801fdd0:	4805      	ldr	r0, [pc, #20]	; (801fde8 <__i2b+0x28>)
 801fdd2:	f240 1145 	movw	r1, #325	; 0x145
 801fdd6:	f001 f81d 	bl	8020e14 <__assert_func>
 801fdda:	2301      	movs	r3, #1
 801fddc:	6144      	str	r4, [r0, #20]
 801fdde:	6103      	str	r3, [r0, #16]
 801fde0:	bd10      	pop	{r4, pc}
 801fde2:	bf00      	nop
 801fde4:	08023d99 	.word	0x08023d99
 801fde8:	08023e21 	.word	0x08023e21

0801fdec <__multiply>:
 801fdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdf0:	4691      	mov	r9, r2
 801fdf2:	690a      	ldr	r2, [r1, #16]
 801fdf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fdf8:	429a      	cmp	r2, r3
 801fdfa:	bfb8      	it	lt
 801fdfc:	460b      	movlt	r3, r1
 801fdfe:	460c      	mov	r4, r1
 801fe00:	bfbc      	itt	lt
 801fe02:	464c      	movlt	r4, r9
 801fe04:	4699      	movlt	r9, r3
 801fe06:	6927      	ldr	r7, [r4, #16]
 801fe08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801fe0c:	68a3      	ldr	r3, [r4, #8]
 801fe0e:	6861      	ldr	r1, [r4, #4]
 801fe10:	eb07 060a 	add.w	r6, r7, sl
 801fe14:	42b3      	cmp	r3, r6
 801fe16:	b085      	sub	sp, #20
 801fe18:	bfb8      	it	lt
 801fe1a:	3101      	addlt	r1, #1
 801fe1c:	f7ff fe90 	bl	801fb40 <_Balloc>
 801fe20:	b930      	cbnz	r0, 801fe30 <__multiply+0x44>
 801fe22:	4602      	mov	r2, r0
 801fe24:	4b44      	ldr	r3, [pc, #272]	; (801ff38 <__multiply+0x14c>)
 801fe26:	4845      	ldr	r0, [pc, #276]	; (801ff3c <__multiply+0x150>)
 801fe28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801fe2c:	f000 fff2 	bl	8020e14 <__assert_func>
 801fe30:	f100 0514 	add.w	r5, r0, #20
 801fe34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fe38:	462b      	mov	r3, r5
 801fe3a:	2200      	movs	r2, #0
 801fe3c:	4543      	cmp	r3, r8
 801fe3e:	d321      	bcc.n	801fe84 <__multiply+0x98>
 801fe40:	f104 0314 	add.w	r3, r4, #20
 801fe44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fe48:	f109 0314 	add.w	r3, r9, #20
 801fe4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801fe50:	9202      	str	r2, [sp, #8]
 801fe52:	1b3a      	subs	r2, r7, r4
 801fe54:	3a15      	subs	r2, #21
 801fe56:	f022 0203 	bic.w	r2, r2, #3
 801fe5a:	3204      	adds	r2, #4
 801fe5c:	f104 0115 	add.w	r1, r4, #21
 801fe60:	428f      	cmp	r7, r1
 801fe62:	bf38      	it	cc
 801fe64:	2204      	movcc	r2, #4
 801fe66:	9201      	str	r2, [sp, #4]
 801fe68:	9a02      	ldr	r2, [sp, #8]
 801fe6a:	9303      	str	r3, [sp, #12]
 801fe6c:	429a      	cmp	r2, r3
 801fe6e:	d80c      	bhi.n	801fe8a <__multiply+0x9e>
 801fe70:	2e00      	cmp	r6, #0
 801fe72:	dd03      	ble.n	801fe7c <__multiply+0x90>
 801fe74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d05b      	beq.n	801ff34 <__multiply+0x148>
 801fe7c:	6106      	str	r6, [r0, #16]
 801fe7e:	b005      	add	sp, #20
 801fe80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe84:	f843 2b04 	str.w	r2, [r3], #4
 801fe88:	e7d8      	b.n	801fe3c <__multiply+0x50>
 801fe8a:	f8b3 a000 	ldrh.w	sl, [r3]
 801fe8e:	f1ba 0f00 	cmp.w	sl, #0
 801fe92:	d024      	beq.n	801fede <__multiply+0xf2>
 801fe94:	f104 0e14 	add.w	lr, r4, #20
 801fe98:	46a9      	mov	r9, r5
 801fe9a:	f04f 0c00 	mov.w	ip, #0
 801fe9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801fea2:	f8d9 1000 	ldr.w	r1, [r9]
 801fea6:	fa1f fb82 	uxth.w	fp, r2
 801feaa:	b289      	uxth	r1, r1
 801feac:	fb0a 110b 	mla	r1, sl, fp, r1
 801feb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801feb4:	f8d9 2000 	ldr.w	r2, [r9]
 801feb8:	4461      	add	r1, ip
 801feba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801febe:	fb0a c20b 	mla	r2, sl, fp, ip
 801fec2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801fec6:	b289      	uxth	r1, r1
 801fec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801fecc:	4577      	cmp	r7, lr
 801fece:	f849 1b04 	str.w	r1, [r9], #4
 801fed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801fed6:	d8e2      	bhi.n	801fe9e <__multiply+0xb2>
 801fed8:	9a01      	ldr	r2, [sp, #4]
 801feda:	f845 c002 	str.w	ip, [r5, r2]
 801fede:	9a03      	ldr	r2, [sp, #12]
 801fee0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fee4:	3304      	adds	r3, #4
 801fee6:	f1b9 0f00 	cmp.w	r9, #0
 801feea:	d021      	beq.n	801ff30 <__multiply+0x144>
 801feec:	6829      	ldr	r1, [r5, #0]
 801feee:	f104 0c14 	add.w	ip, r4, #20
 801fef2:	46ae      	mov	lr, r5
 801fef4:	f04f 0a00 	mov.w	sl, #0
 801fef8:	f8bc b000 	ldrh.w	fp, [ip]
 801fefc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ff00:	fb09 220b 	mla	r2, r9, fp, r2
 801ff04:	4452      	add	r2, sl
 801ff06:	b289      	uxth	r1, r1
 801ff08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ff0c:	f84e 1b04 	str.w	r1, [lr], #4
 801ff10:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ff14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ff18:	f8be 1000 	ldrh.w	r1, [lr]
 801ff1c:	fb09 110a 	mla	r1, r9, sl, r1
 801ff20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ff24:	4567      	cmp	r7, ip
 801ff26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ff2a:	d8e5      	bhi.n	801fef8 <__multiply+0x10c>
 801ff2c:	9a01      	ldr	r2, [sp, #4]
 801ff2e:	50a9      	str	r1, [r5, r2]
 801ff30:	3504      	adds	r5, #4
 801ff32:	e799      	b.n	801fe68 <__multiply+0x7c>
 801ff34:	3e01      	subs	r6, #1
 801ff36:	e79b      	b.n	801fe70 <__multiply+0x84>
 801ff38:	08023d99 	.word	0x08023d99
 801ff3c:	08023e21 	.word	0x08023e21

0801ff40 <__pow5mult>:
 801ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff44:	4615      	mov	r5, r2
 801ff46:	f012 0203 	ands.w	r2, r2, #3
 801ff4a:	4606      	mov	r6, r0
 801ff4c:	460f      	mov	r7, r1
 801ff4e:	d007      	beq.n	801ff60 <__pow5mult+0x20>
 801ff50:	4c25      	ldr	r4, [pc, #148]	; (801ffe8 <__pow5mult+0xa8>)
 801ff52:	3a01      	subs	r2, #1
 801ff54:	2300      	movs	r3, #0
 801ff56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ff5a:	f7ff fe53 	bl	801fc04 <__multadd>
 801ff5e:	4607      	mov	r7, r0
 801ff60:	10ad      	asrs	r5, r5, #2
 801ff62:	d03d      	beq.n	801ffe0 <__pow5mult+0xa0>
 801ff64:	69f4      	ldr	r4, [r6, #28]
 801ff66:	b97c      	cbnz	r4, 801ff88 <__pow5mult+0x48>
 801ff68:	2010      	movs	r0, #16
 801ff6a:	f7fd fce1 	bl	801d930 <malloc>
 801ff6e:	4602      	mov	r2, r0
 801ff70:	61f0      	str	r0, [r6, #28]
 801ff72:	b928      	cbnz	r0, 801ff80 <__pow5mult+0x40>
 801ff74:	4b1d      	ldr	r3, [pc, #116]	; (801ffec <__pow5mult+0xac>)
 801ff76:	481e      	ldr	r0, [pc, #120]	; (801fff0 <__pow5mult+0xb0>)
 801ff78:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ff7c:	f000 ff4a 	bl	8020e14 <__assert_func>
 801ff80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ff84:	6004      	str	r4, [r0, #0]
 801ff86:	60c4      	str	r4, [r0, #12]
 801ff88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ff8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ff90:	b94c      	cbnz	r4, 801ffa6 <__pow5mult+0x66>
 801ff92:	f240 2171 	movw	r1, #625	; 0x271
 801ff96:	4630      	mov	r0, r6
 801ff98:	f7ff ff12 	bl	801fdc0 <__i2b>
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ffa2:	4604      	mov	r4, r0
 801ffa4:	6003      	str	r3, [r0, #0]
 801ffa6:	f04f 0900 	mov.w	r9, #0
 801ffaa:	07eb      	lsls	r3, r5, #31
 801ffac:	d50a      	bpl.n	801ffc4 <__pow5mult+0x84>
 801ffae:	4639      	mov	r1, r7
 801ffb0:	4622      	mov	r2, r4
 801ffb2:	4630      	mov	r0, r6
 801ffb4:	f7ff ff1a 	bl	801fdec <__multiply>
 801ffb8:	4639      	mov	r1, r7
 801ffba:	4680      	mov	r8, r0
 801ffbc:	4630      	mov	r0, r6
 801ffbe:	f7ff fdff 	bl	801fbc0 <_Bfree>
 801ffc2:	4647      	mov	r7, r8
 801ffc4:	106d      	asrs	r5, r5, #1
 801ffc6:	d00b      	beq.n	801ffe0 <__pow5mult+0xa0>
 801ffc8:	6820      	ldr	r0, [r4, #0]
 801ffca:	b938      	cbnz	r0, 801ffdc <__pow5mult+0x9c>
 801ffcc:	4622      	mov	r2, r4
 801ffce:	4621      	mov	r1, r4
 801ffd0:	4630      	mov	r0, r6
 801ffd2:	f7ff ff0b 	bl	801fdec <__multiply>
 801ffd6:	6020      	str	r0, [r4, #0]
 801ffd8:	f8c0 9000 	str.w	r9, [r0]
 801ffdc:	4604      	mov	r4, r0
 801ffde:	e7e4      	b.n	801ffaa <__pow5mult+0x6a>
 801ffe0:	4638      	mov	r0, r7
 801ffe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ffe6:	bf00      	nop
 801ffe8:	08023f70 	.word	0x08023f70
 801ffec:	08023e0a 	.word	0x08023e0a
 801fff0:	08023e21 	.word	0x08023e21

0801fff4 <__lshift>:
 801fff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fff8:	460c      	mov	r4, r1
 801fffa:	6849      	ldr	r1, [r1, #4]
 801fffc:	6923      	ldr	r3, [r4, #16]
 801fffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020002:	68a3      	ldr	r3, [r4, #8]
 8020004:	4607      	mov	r7, r0
 8020006:	4691      	mov	r9, r2
 8020008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802000c:	f108 0601 	add.w	r6, r8, #1
 8020010:	42b3      	cmp	r3, r6
 8020012:	db0b      	blt.n	802002c <__lshift+0x38>
 8020014:	4638      	mov	r0, r7
 8020016:	f7ff fd93 	bl	801fb40 <_Balloc>
 802001a:	4605      	mov	r5, r0
 802001c:	b948      	cbnz	r0, 8020032 <__lshift+0x3e>
 802001e:	4602      	mov	r2, r0
 8020020:	4b28      	ldr	r3, [pc, #160]	; (80200c4 <__lshift+0xd0>)
 8020022:	4829      	ldr	r0, [pc, #164]	; (80200c8 <__lshift+0xd4>)
 8020024:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8020028:	f000 fef4 	bl	8020e14 <__assert_func>
 802002c:	3101      	adds	r1, #1
 802002e:	005b      	lsls	r3, r3, #1
 8020030:	e7ee      	b.n	8020010 <__lshift+0x1c>
 8020032:	2300      	movs	r3, #0
 8020034:	f100 0114 	add.w	r1, r0, #20
 8020038:	f100 0210 	add.w	r2, r0, #16
 802003c:	4618      	mov	r0, r3
 802003e:	4553      	cmp	r3, sl
 8020040:	db33      	blt.n	80200aa <__lshift+0xb6>
 8020042:	6920      	ldr	r0, [r4, #16]
 8020044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020048:	f104 0314 	add.w	r3, r4, #20
 802004c:	f019 091f 	ands.w	r9, r9, #31
 8020050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020058:	d02b      	beq.n	80200b2 <__lshift+0xbe>
 802005a:	f1c9 0e20 	rsb	lr, r9, #32
 802005e:	468a      	mov	sl, r1
 8020060:	2200      	movs	r2, #0
 8020062:	6818      	ldr	r0, [r3, #0]
 8020064:	fa00 f009 	lsl.w	r0, r0, r9
 8020068:	4310      	orrs	r0, r2
 802006a:	f84a 0b04 	str.w	r0, [sl], #4
 802006e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020072:	459c      	cmp	ip, r3
 8020074:	fa22 f20e 	lsr.w	r2, r2, lr
 8020078:	d8f3      	bhi.n	8020062 <__lshift+0x6e>
 802007a:	ebac 0304 	sub.w	r3, ip, r4
 802007e:	3b15      	subs	r3, #21
 8020080:	f023 0303 	bic.w	r3, r3, #3
 8020084:	3304      	adds	r3, #4
 8020086:	f104 0015 	add.w	r0, r4, #21
 802008a:	4584      	cmp	ip, r0
 802008c:	bf38      	it	cc
 802008e:	2304      	movcc	r3, #4
 8020090:	50ca      	str	r2, [r1, r3]
 8020092:	b10a      	cbz	r2, 8020098 <__lshift+0xa4>
 8020094:	f108 0602 	add.w	r6, r8, #2
 8020098:	3e01      	subs	r6, #1
 802009a:	4638      	mov	r0, r7
 802009c:	612e      	str	r6, [r5, #16]
 802009e:	4621      	mov	r1, r4
 80200a0:	f7ff fd8e 	bl	801fbc0 <_Bfree>
 80200a4:	4628      	mov	r0, r5
 80200a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80200ae:	3301      	adds	r3, #1
 80200b0:	e7c5      	b.n	802003e <__lshift+0x4a>
 80200b2:	3904      	subs	r1, #4
 80200b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80200b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80200bc:	459c      	cmp	ip, r3
 80200be:	d8f9      	bhi.n	80200b4 <__lshift+0xc0>
 80200c0:	e7ea      	b.n	8020098 <__lshift+0xa4>
 80200c2:	bf00      	nop
 80200c4:	08023d99 	.word	0x08023d99
 80200c8:	08023e21 	.word	0x08023e21

080200cc <__mcmp>:
 80200cc:	b530      	push	{r4, r5, lr}
 80200ce:	6902      	ldr	r2, [r0, #16]
 80200d0:	690c      	ldr	r4, [r1, #16]
 80200d2:	1b12      	subs	r2, r2, r4
 80200d4:	d10e      	bne.n	80200f4 <__mcmp+0x28>
 80200d6:	f100 0314 	add.w	r3, r0, #20
 80200da:	3114      	adds	r1, #20
 80200dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80200e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80200e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80200e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80200ec:	42a5      	cmp	r5, r4
 80200ee:	d003      	beq.n	80200f8 <__mcmp+0x2c>
 80200f0:	d305      	bcc.n	80200fe <__mcmp+0x32>
 80200f2:	2201      	movs	r2, #1
 80200f4:	4610      	mov	r0, r2
 80200f6:	bd30      	pop	{r4, r5, pc}
 80200f8:	4283      	cmp	r3, r0
 80200fa:	d3f3      	bcc.n	80200e4 <__mcmp+0x18>
 80200fc:	e7fa      	b.n	80200f4 <__mcmp+0x28>
 80200fe:	f04f 32ff 	mov.w	r2, #4294967295
 8020102:	e7f7      	b.n	80200f4 <__mcmp+0x28>

08020104 <__mdiff>:
 8020104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020108:	460c      	mov	r4, r1
 802010a:	4606      	mov	r6, r0
 802010c:	4611      	mov	r1, r2
 802010e:	4620      	mov	r0, r4
 8020110:	4690      	mov	r8, r2
 8020112:	f7ff ffdb 	bl	80200cc <__mcmp>
 8020116:	1e05      	subs	r5, r0, #0
 8020118:	d110      	bne.n	802013c <__mdiff+0x38>
 802011a:	4629      	mov	r1, r5
 802011c:	4630      	mov	r0, r6
 802011e:	f7ff fd0f 	bl	801fb40 <_Balloc>
 8020122:	b930      	cbnz	r0, 8020132 <__mdiff+0x2e>
 8020124:	4b3a      	ldr	r3, [pc, #232]	; (8020210 <__mdiff+0x10c>)
 8020126:	4602      	mov	r2, r0
 8020128:	f240 2137 	movw	r1, #567	; 0x237
 802012c:	4839      	ldr	r0, [pc, #228]	; (8020214 <__mdiff+0x110>)
 802012e:	f000 fe71 	bl	8020e14 <__assert_func>
 8020132:	2301      	movs	r3, #1
 8020134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802013c:	bfa4      	itt	ge
 802013e:	4643      	movge	r3, r8
 8020140:	46a0      	movge	r8, r4
 8020142:	4630      	mov	r0, r6
 8020144:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020148:	bfa6      	itte	ge
 802014a:	461c      	movge	r4, r3
 802014c:	2500      	movge	r5, #0
 802014e:	2501      	movlt	r5, #1
 8020150:	f7ff fcf6 	bl	801fb40 <_Balloc>
 8020154:	b920      	cbnz	r0, 8020160 <__mdiff+0x5c>
 8020156:	4b2e      	ldr	r3, [pc, #184]	; (8020210 <__mdiff+0x10c>)
 8020158:	4602      	mov	r2, r0
 802015a:	f240 2145 	movw	r1, #581	; 0x245
 802015e:	e7e5      	b.n	802012c <__mdiff+0x28>
 8020160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8020164:	6926      	ldr	r6, [r4, #16]
 8020166:	60c5      	str	r5, [r0, #12]
 8020168:	f104 0914 	add.w	r9, r4, #20
 802016c:	f108 0514 	add.w	r5, r8, #20
 8020170:	f100 0e14 	add.w	lr, r0, #20
 8020174:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8020178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802017c:	f108 0210 	add.w	r2, r8, #16
 8020180:	46f2      	mov	sl, lr
 8020182:	2100      	movs	r1, #0
 8020184:	f859 3b04 	ldr.w	r3, [r9], #4
 8020188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802018c:	fa11 f88b 	uxtah	r8, r1, fp
 8020190:	b299      	uxth	r1, r3
 8020192:	0c1b      	lsrs	r3, r3, #16
 8020194:	eba8 0801 	sub.w	r8, r8, r1
 8020198:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802019c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80201a0:	fa1f f888 	uxth.w	r8, r8
 80201a4:	1419      	asrs	r1, r3, #16
 80201a6:	454e      	cmp	r6, r9
 80201a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80201ac:	f84a 3b04 	str.w	r3, [sl], #4
 80201b0:	d8e8      	bhi.n	8020184 <__mdiff+0x80>
 80201b2:	1b33      	subs	r3, r6, r4
 80201b4:	3b15      	subs	r3, #21
 80201b6:	f023 0303 	bic.w	r3, r3, #3
 80201ba:	3304      	adds	r3, #4
 80201bc:	3415      	adds	r4, #21
 80201be:	42a6      	cmp	r6, r4
 80201c0:	bf38      	it	cc
 80201c2:	2304      	movcc	r3, #4
 80201c4:	441d      	add	r5, r3
 80201c6:	4473      	add	r3, lr
 80201c8:	469e      	mov	lr, r3
 80201ca:	462e      	mov	r6, r5
 80201cc:	4566      	cmp	r6, ip
 80201ce:	d30e      	bcc.n	80201ee <__mdiff+0xea>
 80201d0:	f10c 0203 	add.w	r2, ip, #3
 80201d4:	1b52      	subs	r2, r2, r5
 80201d6:	f022 0203 	bic.w	r2, r2, #3
 80201da:	3d03      	subs	r5, #3
 80201dc:	45ac      	cmp	ip, r5
 80201de:	bf38      	it	cc
 80201e0:	2200      	movcc	r2, #0
 80201e2:	4413      	add	r3, r2
 80201e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80201e8:	b17a      	cbz	r2, 802020a <__mdiff+0x106>
 80201ea:	6107      	str	r7, [r0, #16]
 80201ec:	e7a4      	b.n	8020138 <__mdiff+0x34>
 80201ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80201f2:	fa11 f288 	uxtah	r2, r1, r8
 80201f6:	1414      	asrs	r4, r2, #16
 80201f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80201fc:	b292      	uxth	r2, r2
 80201fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8020202:	f84e 2b04 	str.w	r2, [lr], #4
 8020206:	1421      	asrs	r1, r4, #16
 8020208:	e7e0      	b.n	80201cc <__mdiff+0xc8>
 802020a:	3f01      	subs	r7, #1
 802020c:	e7ea      	b.n	80201e4 <__mdiff+0xe0>
 802020e:	bf00      	nop
 8020210:	08023d99 	.word	0x08023d99
 8020214:	08023e21 	.word	0x08023e21

08020218 <__ulp>:
 8020218:	b082      	sub	sp, #8
 802021a:	ed8d 0b00 	vstr	d0, [sp]
 802021e:	9a01      	ldr	r2, [sp, #4]
 8020220:	4b0f      	ldr	r3, [pc, #60]	; (8020260 <__ulp+0x48>)
 8020222:	4013      	ands	r3, r2
 8020224:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8020228:	2b00      	cmp	r3, #0
 802022a:	dc08      	bgt.n	802023e <__ulp+0x26>
 802022c:	425b      	negs	r3, r3
 802022e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8020232:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020236:	da04      	bge.n	8020242 <__ulp+0x2a>
 8020238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802023c:	4113      	asrs	r3, r2
 802023e:	2200      	movs	r2, #0
 8020240:	e008      	b.n	8020254 <__ulp+0x3c>
 8020242:	f1a2 0314 	sub.w	r3, r2, #20
 8020246:	2b1e      	cmp	r3, #30
 8020248:	bfda      	itte	le
 802024a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802024e:	40da      	lsrle	r2, r3
 8020250:	2201      	movgt	r2, #1
 8020252:	2300      	movs	r3, #0
 8020254:	4619      	mov	r1, r3
 8020256:	4610      	mov	r0, r2
 8020258:	ec41 0b10 	vmov	d0, r0, r1
 802025c:	b002      	add	sp, #8
 802025e:	4770      	bx	lr
 8020260:	7ff00000 	.word	0x7ff00000

08020264 <__b2d>:
 8020264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020268:	6906      	ldr	r6, [r0, #16]
 802026a:	f100 0814 	add.w	r8, r0, #20
 802026e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020272:	1f37      	subs	r7, r6, #4
 8020274:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020278:	4610      	mov	r0, r2
 802027a:	f7ff fd53 	bl	801fd24 <__hi0bits>
 802027e:	f1c0 0320 	rsb	r3, r0, #32
 8020282:	280a      	cmp	r0, #10
 8020284:	600b      	str	r3, [r1, #0]
 8020286:	491b      	ldr	r1, [pc, #108]	; (80202f4 <__b2d+0x90>)
 8020288:	dc15      	bgt.n	80202b6 <__b2d+0x52>
 802028a:	f1c0 0c0b 	rsb	ip, r0, #11
 802028e:	fa22 f30c 	lsr.w	r3, r2, ip
 8020292:	45b8      	cmp	r8, r7
 8020294:	ea43 0501 	orr.w	r5, r3, r1
 8020298:	bf34      	ite	cc
 802029a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802029e:	2300      	movcs	r3, #0
 80202a0:	3015      	adds	r0, #21
 80202a2:	fa02 f000 	lsl.w	r0, r2, r0
 80202a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80202aa:	4303      	orrs	r3, r0
 80202ac:	461c      	mov	r4, r3
 80202ae:	ec45 4b10 	vmov	d0, r4, r5
 80202b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202b6:	45b8      	cmp	r8, r7
 80202b8:	bf3a      	itte	cc
 80202ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80202be:	f1a6 0708 	subcc.w	r7, r6, #8
 80202c2:	2300      	movcs	r3, #0
 80202c4:	380b      	subs	r0, #11
 80202c6:	d012      	beq.n	80202ee <__b2d+0x8a>
 80202c8:	f1c0 0120 	rsb	r1, r0, #32
 80202cc:	fa23 f401 	lsr.w	r4, r3, r1
 80202d0:	4082      	lsls	r2, r0
 80202d2:	4322      	orrs	r2, r4
 80202d4:	4547      	cmp	r7, r8
 80202d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80202da:	bf8c      	ite	hi
 80202dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80202e0:	2200      	movls	r2, #0
 80202e2:	4083      	lsls	r3, r0
 80202e4:	40ca      	lsrs	r2, r1
 80202e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80202ea:	4313      	orrs	r3, r2
 80202ec:	e7de      	b.n	80202ac <__b2d+0x48>
 80202ee:	ea42 0501 	orr.w	r5, r2, r1
 80202f2:	e7db      	b.n	80202ac <__b2d+0x48>
 80202f4:	3ff00000 	.word	0x3ff00000

080202f8 <__d2b>:
 80202f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80202fc:	460f      	mov	r7, r1
 80202fe:	2101      	movs	r1, #1
 8020300:	ec59 8b10 	vmov	r8, r9, d0
 8020304:	4616      	mov	r6, r2
 8020306:	f7ff fc1b 	bl	801fb40 <_Balloc>
 802030a:	4604      	mov	r4, r0
 802030c:	b930      	cbnz	r0, 802031c <__d2b+0x24>
 802030e:	4602      	mov	r2, r0
 8020310:	4b24      	ldr	r3, [pc, #144]	; (80203a4 <__d2b+0xac>)
 8020312:	4825      	ldr	r0, [pc, #148]	; (80203a8 <__d2b+0xb0>)
 8020314:	f240 310f 	movw	r1, #783	; 0x30f
 8020318:	f000 fd7c 	bl	8020e14 <__assert_func>
 802031c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020324:	bb2d      	cbnz	r5, 8020372 <__d2b+0x7a>
 8020326:	9301      	str	r3, [sp, #4]
 8020328:	f1b8 0300 	subs.w	r3, r8, #0
 802032c:	d026      	beq.n	802037c <__d2b+0x84>
 802032e:	4668      	mov	r0, sp
 8020330:	9300      	str	r3, [sp, #0]
 8020332:	f7ff fd17 	bl	801fd64 <__lo0bits>
 8020336:	e9dd 1200 	ldrd	r1, r2, [sp]
 802033a:	b1e8      	cbz	r0, 8020378 <__d2b+0x80>
 802033c:	f1c0 0320 	rsb	r3, r0, #32
 8020340:	fa02 f303 	lsl.w	r3, r2, r3
 8020344:	430b      	orrs	r3, r1
 8020346:	40c2      	lsrs	r2, r0
 8020348:	6163      	str	r3, [r4, #20]
 802034a:	9201      	str	r2, [sp, #4]
 802034c:	9b01      	ldr	r3, [sp, #4]
 802034e:	61a3      	str	r3, [r4, #24]
 8020350:	2b00      	cmp	r3, #0
 8020352:	bf14      	ite	ne
 8020354:	2202      	movne	r2, #2
 8020356:	2201      	moveq	r2, #1
 8020358:	6122      	str	r2, [r4, #16]
 802035a:	b1bd      	cbz	r5, 802038c <__d2b+0x94>
 802035c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020360:	4405      	add	r5, r0
 8020362:	603d      	str	r5, [r7, #0]
 8020364:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020368:	6030      	str	r0, [r6, #0]
 802036a:	4620      	mov	r0, r4
 802036c:	b003      	add	sp, #12
 802036e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020376:	e7d6      	b.n	8020326 <__d2b+0x2e>
 8020378:	6161      	str	r1, [r4, #20]
 802037a:	e7e7      	b.n	802034c <__d2b+0x54>
 802037c:	a801      	add	r0, sp, #4
 802037e:	f7ff fcf1 	bl	801fd64 <__lo0bits>
 8020382:	9b01      	ldr	r3, [sp, #4]
 8020384:	6163      	str	r3, [r4, #20]
 8020386:	3020      	adds	r0, #32
 8020388:	2201      	movs	r2, #1
 802038a:	e7e5      	b.n	8020358 <__d2b+0x60>
 802038c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020394:	6038      	str	r0, [r7, #0]
 8020396:	6918      	ldr	r0, [r3, #16]
 8020398:	f7ff fcc4 	bl	801fd24 <__hi0bits>
 802039c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80203a0:	e7e2      	b.n	8020368 <__d2b+0x70>
 80203a2:	bf00      	nop
 80203a4:	08023d99 	.word	0x08023d99
 80203a8:	08023e21 	.word	0x08023e21

080203ac <__ratio>:
 80203ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b0:	4688      	mov	r8, r1
 80203b2:	4669      	mov	r1, sp
 80203b4:	4681      	mov	r9, r0
 80203b6:	f7ff ff55 	bl	8020264 <__b2d>
 80203ba:	a901      	add	r1, sp, #4
 80203bc:	4640      	mov	r0, r8
 80203be:	ec55 4b10 	vmov	r4, r5, d0
 80203c2:	f7ff ff4f 	bl	8020264 <__b2d>
 80203c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80203ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80203ce:	eba3 0c02 	sub.w	ip, r3, r2
 80203d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80203d6:	1a9b      	subs	r3, r3, r2
 80203d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80203dc:	ec51 0b10 	vmov	r0, r1, d0
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	bfd6      	itet	le
 80203e4:	460a      	movle	r2, r1
 80203e6:	462a      	movgt	r2, r5
 80203e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80203ec:	468b      	mov	fp, r1
 80203ee:	462f      	mov	r7, r5
 80203f0:	bfd4      	ite	le
 80203f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80203f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80203fa:	4620      	mov	r0, r4
 80203fc:	ee10 2a10 	vmov	r2, s0
 8020400:	465b      	mov	r3, fp
 8020402:	4639      	mov	r1, r7
 8020404:	f7e0 fa32 	bl	800086c <__aeabi_ddiv>
 8020408:	ec41 0b10 	vmov	d0, r0, r1
 802040c:	b003      	add	sp, #12
 802040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020412 <__copybits>:
 8020412:	3901      	subs	r1, #1
 8020414:	b570      	push	{r4, r5, r6, lr}
 8020416:	1149      	asrs	r1, r1, #5
 8020418:	6914      	ldr	r4, [r2, #16]
 802041a:	3101      	adds	r1, #1
 802041c:	f102 0314 	add.w	r3, r2, #20
 8020420:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020424:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020428:	1f05      	subs	r5, r0, #4
 802042a:	42a3      	cmp	r3, r4
 802042c:	d30c      	bcc.n	8020448 <__copybits+0x36>
 802042e:	1aa3      	subs	r3, r4, r2
 8020430:	3b11      	subs	r3, #17
 8020432:	f023 0303 	bic.w	r3, r3, #3
 8020436:	3211      	adds	r2, #17
 8020438:	42a2      	cmp	r2, r4
 802043a:	bf88      	it	hi
 802043c:	2300      	movhi	r3, #0
 802043e:	4418      	add	r0, r3
 8020440:	2300      	movs	r3, #0
 8020442:	4288      	cmp	r0, r1
 8020444:	d305      	bcc.n	8020452 <__copybits+0x40>
 8020446:	bd70      	pop	{r4, r5, r6, pc}
 8020448:	f853 6b04 	ldr.w	r6, [r3], #4
 802044c:	f845 6f04 	str.w	r6, [r5, #4]!
 8020450:	e7eb      	b.n	802042a <__copybits+0x18>
 8020452:	f840 3b04 	str.w	r3, [r0], #4
 8020456:	e7f4      	b.n	8020442 <__copybits+0x30>

08020458 <__any_on>:
 8020458:	f100 0214 	add.w	r2, r0, #20
 802045c:	6900      	ldr	r0, [r0, #16]
 802045e:	114b      	asrs	r3, r1, #5
 8020460:	4298      	cmp	r0, r3
 8020462:	b510      	push	{r4, lr}
 8020464:	db11      	blt.n	802048a <__any_on+0x32>
 8020466:	dd0a      	ble.n	802047e <__any_on+0x26>
 8020468:	f011 011f 	ands.w	r1, r1, #31
 802046c:	d007      	beq.n	802047e <__any_on+0x26>
 802046e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020472:	fa24 f001 	lsr.w	r0, r4, r1
 8020476:	fa00 f101 	lsl.w	r1, r0, r1
 802047a:	428c      	cmp	r4, r1
 802047c:	d10b      	bne.n	8020496 <__any_on+0x3e>
 802047e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020482:	4293      	cmp	r3, r2
 8020484:	d803      	bhi.n	802048e <__any_on+0x36>
 8020486:	2000      	movs	r0, #0
 8020488:	bd10      	pop	{r4, pc}
 802048a:	4603      	mov	r3, r0
 802048c:	e7f7      	b.n	802047e <__any_on+0x26>
 802048e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020492:	2900      	cmp	r1, #0
 8020494:	d0f5      	beq.n	8020482 <__any_on+0x2a>
 8020496:	2001      	movs	r0, #1
 8020498:	e7f6      	b.n	8020488 <__any_on+0x30>

0802049a <__ascii_wctomb>:
 802049a:	b149      	cbz	r1, 80204b0 <__ascii_wctomb+0x16>
 802049c:	2aff      	cmp	r2, #255	; 0xff
 802049e:	bf85      	ittet	hi
 80204a0:	238a      	movhi	r3, #138	; 0x8a
 80204a2:	6003      	strhi	r3, [r0, #0]
 80204a4:	700a      	strbls	r2, [r1, #0]
 80204a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80204aa:	bf98      	it	ls
 80204ac:	2001      	movls	r0, #1
 80204ae:	4770      	bx	lr
 80204b0:	4608      	mov	r0, r1
 80204b2:	4770      	bx	lr

080204b4 <__ssputs_r>:
 80204b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204b8:	688e      	ldr	r6, [r1, #8]
 80204ba:	461f      	mov	r7, r3
 80204bc:	42be      	cmp	r6, r7
 80204be:	680b      	ldr	r3, [r1, #0]
 80204c0:	4682      	mov	sl, r0
 80204c2:	460c      	mov	r4, r1
 80204c4:	4690      	mov	r8, r2
 80204c6:	d82c      	bhi.n	8020522 <__ssputs_r+0x6e>
 80204c8:	898a      	ldrh	r2, [r1, #12]
 80204ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80204ce:	d026      	beq.n	802051e <__ssputs_r+0x6a>
 80204d0:	6965      	ldr	r5, [r4, #20]
 80204d2:	6909      	ldr	r1, [r1, #16]
 80204d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80204d8:	eba3 0901 	sub.w	r9, r3, r1
 80204dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80204e0:	1c7b      	adds	r3, r7, #1
 80204e2:	444b      	add	r3, r9
 80204e4:	106d      	asrs	r5, r5, #1
 80204e6:	429d      	cmp	r5, r3
 80204e8:	bf38      	it	cc
 80204ea:	461d      	movcc	r5, r3
 80204ec:	0553      	lsls	r3, r2, #21
 80204ee:	d527      	bpl.n	8020540 <__ssputs_r+0x8c>
 80204f0:	4629      	mov	r1, r5
 80204f2:	f7fd fa4d 	bl	801d990 <_malloc_r>
 80204f6:	4606      	mov	r6, r0
 80204f8:	b360      	cbz	r0, 8020554 <__ssputs_r+0xa0>
 80204fa:	6921      	ldr	r1, [r4, #16]
 80204fc:	464a      	mov	r2, r9
 80204fe:	f7fe ff4d 	bl	801f39c <memcpy>
 8020502:	89a3      	ldrh	r3, [r4, #12]
 8020504:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802050c:	81a3      	strh	r3, [r4, #12]
 802050e:	6126      	str	r6, [r4, #16]
 8020510:	6165      	str	r5, [r4, #20]
 8020512:	444e      	add	r6, r9
 8020514:	eba5 0509 	sub.w	r5, r5, r9
 8020518:	6026      	str	r6, [r4, #0]
 802051a:	60a5      	str	r5, [r4, #8]
 802051c:	463e      	mov	r6, r7
 802051e:	42be      	cmp	r6, r7
 8020520:	d900      	bls.n	8020524 <__ssputs_r+0x70>
 8020522:	463e      	mov	r6, r7
 8020524:	6820      	ldr	r0, [r4, #0]
 8020526:	4632      	mov	r2, r6
 8020528:	4641      	mov	r1, r8
 802052a:	f7fe fe81 	bl	801f230 <memmove>
 802052e:	68a3      	ldr	r3, [r4, #8]
 8020530:	1b9b      	subs	r3, r3, r6
 8020532:	60a3      	str	r3, [r4, #8]
 8020534:	6823      	ldr	r3, [r4, #0]
 8020536:	4433      	add	r3, r6
 8020538:	6023      	str	r3, [r4, #0]
 802053a:	2000      	movs	r0, #0
 802053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020540:	462a      	mov	r2, r5
 8020542:	f000 fc85 	bl	8020e50 <_realloc_r>
 8020546:	4606      	mov	r6, r0
 8020548:	2800      	cmp	r0, #0
 802054a:	d1e0      	bne.n	802050e <__ssputs_r+0x5a>
 802054c:	6921      	ldr	r1, [r4, #16]
 802054e:	4650      	mov	r0, sl
 8020550:	f7fe ff40 	bl	801f3d4 <_free_r>
 8020554:	230c      	movs	r3, #12
 8020556:	f8ca 3000 	str.w	r3, [sl]
 802055a:	89a3      	ldrh	r3, [r4, #12]
 802055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020560:	81a3      	strh	r3, [r4, #12]
 8020562:	f04f 30ff 	mov.w	r0, #4294967295
 8020566:	e7e9      	b.n	802053c <__ssputs_r+0x88>

08020568 <_svfiprintf_r>:
 8020568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802056c:	4698      	mov	r8, r3
 802056e:	898b      	ldrh	r3, [r1, #12]
 8020570:	061b      	lsls	r3, r3, #24
 8020572:	b09d      	sub	sp, #116	; 0x74
 8020574:	4607      	mov	r7, r0
 8020576:	460d      	mov	r5, r1
 8020578:	4614      	mov	r4, r2
 802057a:	d50e      	bpl.n	802059a <_svfiprintf_r+0x32>
 802057c:	690b      	ldr	r3, [r1, #16]
 802057e:	b963      	cbnz	r3, 802059a <_svfiprintf_r+0x32>
 8020580:	2140      	movs	r1, #64	; 0x40
 8020582:	f7fd fa05 	bl	801d990 <_malloc_r>
 8020586:	6028      	str	r0, [r5, #0]
 8020588:	6128      	str	r0, [r5, #16]
 802058a:	b920      	cbnz	r0, 8020596 <_svfiprintf_r+0x2e>
 802058c:	230c      	movs	r3, #12
 802058e:	603b      	str	r3, [r7, #0]
 8020590:	f04f 30ff 	mov.w	r0, #4294967295
 8020594:	e0d0      	b.n	8020738 <_svfiprintf_r+0x1d0>
 8020596:	2340      	movs	r3, #64	; 0x40
 8020598:	616b      	str	r3, [r5, #20]
 802059a:	2300      	movs	r3, #0
 802059c:	9309      	str	r3, [sp, #36]	; 0x24
 802059e:	2320      	movs	r3, #32
 80205a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80205a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80205a8:	2330      	movs	r3, #48	; 0x30
 80205aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020750 <_svfiprintf_r+0x1e8>
 80205ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80205b2:	f04f 0901 	mov.w	r9, #1
 80205b6:	4623      	mov	r3, r4
 80205b8:	469a      	mov	sl, r3
 80205ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80205be:	b10a      	cbz	r2, 80205c4 <_svfiprintf_r+0x5c>
 80205c0:	2a25      	cmp	r2, #37	; 0x25
 80205c2:	d1f9      	bne.n	80205b8 <_svfiprintf_r+0x50>
 80205c4:	ebba 0b04 	subs.w	fp, sl, r4
 80205c8:	d00b      	beq.n	80205e2 <_svfiprintf_r+0x7a>
 80205ca:	465b      	mov	r3, fp
 80205cc:	4622      	mov	r2, r4
 80205ce:	4629      	mov	r1, r5
 80205d0:	4638      	mov	r0, r7
 80205d2:	f7ff ff6f 	bl	80204b4 <__ssputs_r>
 80205d6:	3001      	adds	r0, #1
 80205d8:	f000 80a9 	beq.w	802072e <_svfiprintf_r+0x1c6>
 80205dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80205de:	445a      	add	r2, fp
 80205e0:	9209      	str	r2, [sp, #36]	; 0x24
 80205e2:	f89a 3000 	ldrb.w	r3, [sl]
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	f000 80a1 	beq.w	802072e <_svfiprintf_r+0x1c6>
 80205ec:	2300      	movs	r3, #0
 80205ee:	f04f 32ff 	mov.w	r2, #4294967295
 80205f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80205f6:	f10a 0a01 	add.w	sl, sl, #1
 80205fa:	9304      	str	r3, [sp, #16]
 80205fc:	9307      	str	r3, [sp, #28]
 80205fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020602:	931a      	str	r3, [sp, #104]	; 0x68
 8020604:	4654      	mov	r4, sl
 8020606:	2205      	movs	r2, #5
 8020608:	f814 1b01 	ldrb.w	r1, [r4], #1
 802060c:	4850      	ldr	r0, [pc, #320]	; (8020750 <_svfiprintf_r+0x1e8>)
 802060e:	f7df fdef 	bl	80001f0 <memchr>
 8020612:	9a04      	ldr	r2, [sp, #16]
 8020614:	b9d8      	cbnz	r0, 802064e <_svfiprintf_r+0xe6>
 8020616:	06d0      	lsls	r0, r2, #27
 8020618:	bf44      	itt	mi
 802061a:	2320      	movmi	r3, #32
 802061c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020620:	0711      	lsls	r1, r2, #28
 8020622:	bf44      	itt	mi
 8020624:	232b      	movmi	r3, #43	; 0x2b
 8020626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802062a:	f89a 3000 	ldrb.w	r3, [sl]
 802062e:	2b2a      	cmp	r3, #42	; 0x2a
 8020630:	d015      	beq.n	802065e <_svfiprintf_r+0xf6>
 8020632:	9a07      	ldr	r2, [sp, #28]
 8020634:	4654      	mov	r4, sl
 8020636:	2000      	movs	r0, #0
 8020638:	f04f 0c0a 	mov.w	ip, #10
 802063c:	4621      	mov	r1, r4
 802063e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020642:	3b30      	subs	r3, #48	; 0x30
 8020644:	2b09      	cmp	r3, #9
 8020646:	d94d      	bls.n	80206e4 <_svfiprintf_r+0x17c>
 8020648:	b1b0      	cbz	r0, 8020678 <_svfiprintf_r+0x110>
 802064a:	9207      	str	r2, [sp, #28]
 802064c:	e014      	b.n	8020678 <_svfiprintf_r+0x110>
 802064e:	eba0 0308 	sub.w	r3, r0, r8
 8020652:	fa09 f303 	lsl.w	r3, r9, r3
 8020656:	4313      	orrs	r3, r2
 8020658:	9304      	str	r3, [sp, #16]
 802065a:	46a2      	mov	sl, r4
 802065c:	e7d2      	b.n	8020604 <_svfiprintf_r+0x9c>
 802065e:	9b03      	ldr	r3, [sp, #12]
 8020660:	1d19      	adds	r1, r3, #4
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	9103      	str	r1, [sp, #12]
 8020666:	2b00      	cmp	r3, #0
 8020668:	bfbb      	ittet	lt
 802066a:	425b      	neglt	r3, r3
 802066c:	f042 0202 	orrlt.w	r2, r2, #2
 8020670:	9307      	strge	r3, [sp, #28]
 8020672:	9307      	strlt	r3, [sp, #28]
 8020674:	bfb8      	it	lt
 8020676:	9204      	strlt	r2, [sp, #16]
 8020678:	7823      	ldrb	r3, [r4, #0]
 802067a:	2b2e      	cmp	r3, #46	; 0x2e
 802067c:	d10c      	bne.n	8020698 <_svfiprintf_r+0x130>
 802067e:	7863      	ldrb	r3, [r4, #1]
 8020680:	2b2a      	cmp	r3, #42	; 0x2a
 8020682:	d134      	bne.n	80206ee <_svfiprintf_r+0x186>
 8020684:	9b03      	ldr	r3, [sp, #12]
 8020686:	1d1a      	adds	r2, r3, #4
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	9203      	str	r2, [sp, #12]
 802068c:	2b00      	cmp	r3, #0
 802068e:	bfb8      	it	lt
 8020690:	f04f 33ff 	movlt.w	r3, #4294967295
 8020694:	3402      	adds	r4, #2
 8020696:	9305      	str	r3, [sp, #20]
 8020698:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8020760 <_svfiprintf_r+0x1f8>
 802069c:	7821      	ldrb	r1, [r4, #0]
 802069e:	2203      	movs	r2, #3
 80206a0:	4650      	mov	r0, sl
 80206a2:	f7df fda5 	bl	80001f0 <memchr>
 80206a6:	b138      	cbz	r0, 80206b8 <_svfiprintf_r+0x150>
 80206a8:	9b04      	ldr	r3, [sp, #16]
 80206aa:	eba0 000a 	sub.w	r0, r0, sl
 80206ae:	2240      	movs	r2, #64	; 0x40
 80206b0:	4082      	lsls	r2, r0
 80206b2:	4313      	orrs	r3, r2
 80206b4:	3401      	adds	r4, #1
 80206b6:	9304      	str	r3, [sp, #16]
 80206b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80206bc:	4825      	ldr	r0, [pc, #148]	; (8020754 <_svfiprintf_r+0x1ec>)
 80206be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80206c2:	2206      	movs	r2, #6
 80206c4:	f7df fd94 	bl	80001f0 <memchr>
 80206c8:	2800      	cmp	r0, #0
 80206ca:	d038      	beq.n	802073e <_svfiprintf_r+0x1d6>
 80206cc:	4b22      	ldr	r3, [pc, #136]	; (8020758 <_svfiprintf_r+0x1f0>)
 80206ce:	bb1b      	cbnz	r3, 8020718 <_svfiprintf_r+0x1b0>
 80206d0:	9b03      	ldr	r3, [sp, #12]
 80206d2:	3307      	adds	r3, #7
 80206d4:	f023 0307 	bic.w	r3, r3, #7
 80206d8:	3308      	adds	r3, #8
 80206da:	9303      	str	r3, [sp, #12]
 80206dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206de:	4433      	add	r3, r6
 80206e0:	9309      	str	r3, [sp, #36]	; 0x24
 80206e2:	e768      	b.n	80205b6 <_svfiprintf_r+0x4e>
 80206e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80206e8:	460c      	mov	r4, r1
 80206ea:	2001      	movs	r0, #1
 80206ec:	e7a6      	b.n	802063c <_svfiprintf_r+0xd4>
 80206ee:	2300      	movs	r3, #0
 80206f0:	3401      	adds	r4, #1
 80206f2:	9305      	str	r3, [sp, #20]
 80206f4:	4619      	mov	r1, r3
 80206f6:	f04f 0c0a 	mov.w	ip, #10
 80206fa:	4620      	mov	r0, r4
 80206fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020700:	3a30      	subs	r2, #48	; 0x30
 8020702:	2a09      	cmp	r2, #9
 8020704:	d903      	bls.n	802070e <_svfiprintf_r+0x1a6>
 8020706:	2b00      	cmp	r3, #0
 8020708:	d0c6      	beq.n	8020698 <_svfiprintf_r+0x130>
 802070a:	9105      	str	r1, [sp, #20]
 802070c:	e7c4      	b.n	8020698 <_svfiprintf_r+0x130>
 802070e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020712:	4604      	mov	r4, r0
 8020714:	2301      	movs	r3, #1
 8020716:	e7f0      	b.n	80206fa <_svfiprintf_r+0x192>
 8020718:	ab03      	add	r3, sp, #12
 802071a:	9300      	str	r3, [sp, #0]
 802071c:	462a      	mov	r2, r5
 802071e:	4b0f      	ldr	r3, [pc, #60]	; (802075c <_svfiprintf_r+0x1f4>)
 8020720:	a904      	add	r1, sp, #16
 8020722:	4638      	mov	r0, r7
 8020724:	f3af 8000 	nop.w
 8020728:	1c42      	adds	r2, r0, #1
 802072a:	4606      	mov	r6, r0
 802072c:	d1d6      	bne.n	80206dc <_svfiprintf_r+0x174>
 802072e:	89ab      	ldrh	r3, [r5, #12]
 8020730:	065b      	lsls	r3, r3, #25
 8020732:	f53f af2d 	bmi.w	8020590 <_svfiprintf_r+0x28>
 8020736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020738:	b01d      	add	sp, #116	; 0x74
 802073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802073e:	ab03      	add	r3, sp, #12
 8020740:	9300      	str	r3, [sp, #0]
 8020742:	462a      	mov	r2, r5
 8020744:	4b05      	ldr	r3, [pc, #20]	; (802075c <_svfiprintf_r+0x1f4>)
 8020746:	a904      	add	r1, sp, #16
 8020748:	4638      	mov	r0, r7
 802074a:	f000 f9bd 	bl	8020ac8 <_printf_i>
 802074e:	e7eb      	b.n	8020728 <_svfiprintf_r+0x1c0>
 8020750:	08023f7c 	.word	0x08023f7c
 8020754:	08023f86 	.word	0x08023f86
 8020758:	00000000 	.word	0x00000000
 802075c:	080204b5 	.word	0x080204b5
 8020760:	08023f82 	.word	0x08023f82

08020764 <__sfputc_r>:
 8020764:	6893      	ldr	r3, [r2, #8]
 8020766:	3b01      	subs	r3, #1
 8020768:	2b00      	cmp	r3, #0
 802076a:	b410      	push	{r4}
 802076c:	6093      	str	r3, [r2, #8]
 802076e:	da08      	bge.n	8020782 <__sfputc_r+0x1e>
 8020770:	6994      	ldr	r4, [r2, #24]
 8020772:	42a3      	cmp	r3, r4
 8020774:	db01      	blt.n	802077a <__sfputc_r+0x16>
 8020776:	290a      	cmp	r1, #10
 8020778:	d103      	bne.n	8020782 <__sfputc_r+0x1e>
 802077a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802077e:	f7fe bcc2 	b.w	801f106 <__swbuf_r>
 8020782:	6813      	ldr	r3, [r2, #0]
 8020784:	1c58      	adds	r0, r3, #1
 8020786:	6010      	str	r0, [r2, #0]
 8020788:	7019      	strb	r1, [r3, #0]
 802078a:	4608      	mov	r0, r1
 802078c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020790:	4770      	bx	lr

08020792 <__sfputs_r>:
 8020792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020794:	4606      	mov	r6, r0
 8020796:	460f      	mov	r7, r1
 8020798:	4614      	mov	r4, r2
 802079a:	18d5      	adds	r5, r2, r3
 802079c:	42ac      	cmp	r4, r5
 802079e:	d101      	bne.n	80207a4 <__sfputs_r+0x12>
 80207a0:	2000      	movs	r0, #0
 80207a2:	e007      	b.n	80207b4 <__sfputs_r+0x22>
 80207a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207a8:	463a      	mov	r2, r7
 80207aa:	4630      	mov	r0, r6
 80207ac:	f7ff ffda 	bl	8020764 <__sfputc_r>
 80207b0:	1c43      	adds	r3, r0, #1
 80207b2:	d1f3      	bne.n	802079c <__sfputs_r+0xa>
 80207b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080207b8 <_vfiprintf_r>:
 80207b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207bc:	460d      	mov	r5, r1
 80207be:	b09d      	sub	sp, #116	; 0x74
 80207c0:	4614      	mov	r4, r2
 80207c2:	4698      	mov	r8, r3
 80207c4:	4606      	mov	r6, r0
 80207c6:	b118      	cbz	r0, 80207d0 <_vfiprintf_r+0x18>
 80207c8:	6a03      	ldr	r3, [r0, #32]
 80207ca:	b90b      	cbnz	r3, 80207d0 <_vfiprintf_r+0x18>
 80207cc:	f7fe fb60 	bl	801ee90 <__sinit>
 80207d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80207d2:	07d9      	lsls	r1, r3, #31
 80207d4:	d405      	bmi.n	80207e2 <_vfiprintf_r+0x2a>
 80207d6:	89ab      	ldrh	r3, [r5, #12]
 80207d8:	059a      	lsls	r2, r3, #22
 80207da:	d402      	bmi.n	80207e2 <_vfiprintf_r+0x2a>
 80207dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80207de:	f7fe fddb 	bl	801f398 <__retarget_lock_acquire_recursive>
 80207e2:	89ab      	ldrh	r3, [r5, #12]
 80207e4:	071b      	lsls	r3, r3, #28
 80207e6:	d501      	bpl.n	80207ec <_vfiprintf_r+0x34>
 80207e8:	692b      	ldr	r3, [r5, #16]
 80207ea:	b99b      	cbnz	r3, 8020814 <_vfiprintf_r+0x5c>
 80207ec:	4629      	mov	r1, r5
 80207ee:	4630      	mov	r0, r6
 80207f0:	f7fe fcc6 	bl	801f180 <__swsetup_r>
 80207f4:	b170      	cbz	r0, 8020814 <_vfiprintf_r+0x5c>
 80207f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80207f8:	07dc      	lsls	r4, r3, #31
 80207fa:	d504      	bpl.n	8020806 <_vfiprintf_r+0x4e>
 80207fc:	f04f 30ff 	mov.w	r0, #4294967295
 8020800:	b01d      	add	sp, #116	; 0x74
 8020802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020806:	89ab      	ldrh	r3, [r5, #12]
 8020808:	0598      	lsls	r0, r3, #22
 802080a:	d4f7      	bmi.n	80207fc <_vfiprintf_r+0x44>
 802080c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802080e:	f7fe fdc4 	bl	801f39a <__retarget_lock_release_recursive>
 8020812:	e7f3      	b.n	80207fc <_vfiprintf_r+0x44>
 8020814:	2300      	movs	r3, #0
 8020816:	9309      	str	r3, [sp, #36]	; 0x24
 8020818:	2320      	movs	r3, #32
 802081a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802081e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020822:	2330      	movs	r3, #48	; 0x30
 8020824:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80209d8 <_vfiprintf_r+0x220>
 8020828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802082c:	f04f 0901 	mov.w	r9, #1
 8020830:	4623      	mov	r3, r4
 8020832:	469a      	mov	sl, r3
 8020834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020838:	b10a      	cbz	r2, 802083e <_vfiprintf_r+0x86>
 802083a:	2a25      	cmp	r2, #37	; 0x25
 802083c:	d1f9      	bne.n	8020832 <_vfiprintf_r+0x7a>
 802083e:	ebba 0b04 	subs.w	fp, sl, r4
 8020842:	d00b      	beq.n	802085c <_vfiprintf_r+0xa4>
 8020844:	465b      	mov	r3, fp
 8020846:	4622      	mov	r2, r4
 8020848:	4629      	mov	r1, r5
 802084a:	4630      	mov	r0, r6
 802084c:	f7ff ffa1 	bl	8020792 <__sfputs_r>
 8020850:	3001      	adds	r0, #1
 8020852:	f000 80a9 	beq.w	80209a8 <_vfiprintf_r+0x1f0>
 8020856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020858:	445a      	add	r2, fp
 802085a:	9209      	str	r2, [sp, #36]	; 0x24
 802085c:	f89a 3000 	ldrb.w	r3, [sl]
 8020860:	2b00      	cmp	r3, #0
 8020862:	f000 80a1 	beq.w	80209a8 <_vfiprintf_r+0x1f0>
 8020866:	2300      	movs	r3, #0
 8020868:	f04f 32ff 	mov.w	r2, #4294967295
 802086c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020870:	f10a 0a01 	add.w	sl, sl, #1
 8020874:	9304      	str	r3, [sp, #16]
 8020876:	9307      	str	r3, [sp, #28]
 8020878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802087c:	931a      	str	r3, [sp, #104]	; 0x68
 802087e:	4654      	mov	r4, sl
 8020880:	2205      	movs	r2, #5
 8020882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020886:	4854      	ldr	r0, [pc, #336]	; (80209d8 <_vfiprintf_r+0x220>)
 8020888:	f7df fcb2 	bl	80001f0 <memchr>
 802088c:	9a04      	ldr	r2, [sp, #16]
 802088e:	b9d8      	cbnz	r0, 80208c8 <_vfiprintf_r+0x110>
 8020890:	06d1      	lsls	r1, r2, #27
 8020892:	bf44      	itt	mi
 8020894:	2320      	movmi	r3, #32
 8020896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802089a:	0713      	lsls	r3, r2, #28
 802089c:	bf44      	itt	mi
 802089e:	232b      	movmi	r3, #43	; 0x2b
 80208a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80208a4:	f89a 3000 	ldrb.w	r3, [sl]
 80208a8:	2b2a      	cmp	r3, #42	; 0x2a
 80208aa:	d015      	beq.n	80208d8 <_vfiprintf_r+0x120>
 80208ac:	9a07      	ldr	r2, [sp, #28]
 80208ae:	4654      	mov	r4, sl
 80208b0:	2000      	movs	r0, #0
 80208b2:	f04f 0c0a 	mov.w	ip, #10
 80208b6:	4621      	mov	r1, r4
 80208b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80208bc:	3b30      	subs	r3, #48	; 0x30
 80208be:	2b09      	cmp	r3, #9
 80208c0:	d94d      	bls.n	802095e <_vfiprintf_r+0x1a6>
 80208c2:	b1b0      	cbz	r0, 80208f2 <_vfiprintf_r+0x13a>
 80208c4:	9207      	str	r2, [sp, #28]
 80208c6:	e014      	b.n	80208f2 <_vfiprintf_r+0x13a>
 80208c8:	eba0 0308 	sub.w	r3, r0, r8
 80208cc:	fa09 f303 	lsl.w	r3, r9, r3
 80208d0:	4313      	orrs	r3, r2
 80208d2:	9304      	str	r3, [sp, #16]
 80208d4:	46a2      	mov	sl, r4
 80208d6:	e7d2      	b.n	802087e <_vfiprintf_r+0xc6>
 80208d8:	9b03      	ldr	r3, [sp, #12]
 80208da:	1d19      	adds	r1, r3, #4
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	9103      	str	r1, [sp, #12]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	bfbb      	ittet	lt
 80208e4:	425b      	neglt	r3, r3
 80208e6:	f042 0202 	orrlt.w	r2, r2, #2
 80208ea:	9307      	strge	r3, [sp, #28]
 80208ec:	9307      	strlt	r3, [sp, #28]
 80208ee:	bfb8      	it	lt
 80208f0:	9204      	strlt	r2, [sp, #16]
 80208f2:	7823      	ldrb	r3, [r4, #0]
 80208f4:	2b2e      	cmp	r3, #46	; 0x2e
 80208f6:	d10c      	bne.n	8020912 <_vfiprintf_r+0x15a>
 80208f8:	7863      	ldrb	r3, [r4, #1]
 80208fa:	2b2a      	cmp	r3, #42	; 0x2a
 80208fc:	d134      	bne.n	8020968 <_vfiprintf_r+0x1b0>
 80208fe:	9b03      	ldr	r3, [sp, #12]
 8020900:	1d1a      	adds	r2, r3, #4
 8020902:	681b      	ldr	r3, [r3, #0]
 8020904:	9203      	str	r2, [sp, #12]
 8020906:	2b00      	cmp	r3, #0
 8020908:	bfb8      	it	lt
 802090a:	f04f 33ff 	movlt.w	r3, #4294967295
 802090e:	3402      	adds	r4, #2
 8020910:	9305      	str	r3, [sp, #20]
 8020912:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80209e8 <_vfiprintf_r+0x230>
 8020916:	7821      	ldrb	r1, [r4, #0]
 8020918:	2203      	movs	r2, #3
 802091a:	4650      	mov	r0, sl
 802091c:	f7df fc68 	bl	80001f0 <memchr>
 8020920:	b138      	cbz	r0, 8020932 <_vfiprintf_r+0x17a>
 8020922:	9b04      	ldr	r3, [sp, #16]
 8020924:	eba0 000a 	sub.w	r0, r0, sl
 8020928:	2240      	movs	r2, #64	; 0x40
 802092a:	4082      	lsls	r2, r0
 802092c:	4313      	orrs	r3, r2
 802092e:	3401      	adds	r4, #1
 8020930:	9304      	str	r3, [sp, #16]
 8020932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020936:	4829      	ldr	r0, [pc, #164]	; (80209dc <_vfiprintf_r+0x224>)
 8020938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802093c:	2206      	movs	r2, #6
 802093e:	f7df fc57 	bl	80001f0 <memchr>
 8020942:	2800      	cmp	r0, #0
 8020944:	d03f      	beq.n	80209c6 <_vfiprintf_r+0x20e>
 8020946:	4b26      	ldr	r3, [pc, #152]	; (80209e0 <_vfiprintf_r+0x228>)
 8020948:	bb1b      	cbnz	r3, 8020992 <_vfiprintf_r+0x1da>
 802094a:	9b03      	ldr	r3, [sp, #12]
 802094c:	3307      	adds	r3, #7
 802094e:	f023 0307 	bic.w	r3, r3, #7
 8020952:	3308      	adds	r3, #8
 8020954:	9303      	str	r3, [sp, #12]
 8020956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020958:	443b      	add	r3, r7
 802095a:	9309      	str	r3, [sp, #36]	; 0x24
 802095c:	e768      	b.n	8020830 <_vfiprintf_r+0x78>
 802095e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020962:	460c      	mov	r4, r1
 8020964:	2001      	movs	r0, #1
 8020966:	e7a6      	b.n	80208b6 <_vfiprintf_r+0xfe>
 8020968:	2300      	movs	r3, #0
 802096a:	3401      	adds	r4, #1
 802096c:	9305      	str	r3, [sp, #20]
 802096e:	4619      	mov	r1, r3
 8020970:	f04f 0c0a 	mov.w	ip, #10
 8020974:	4620      	mov	r0, r4
 8020976:	f810 2b01 	ldrb.w	r2, [r0], #1
 802097a:	3a30      	subs	r2, #48	; 0x30
 802097c:	2a09      	cmp	r2, #9
 802097e:	d903      	bls.n	8020988 <_vfiprintf_r+0x1d0>
 8020980:	2b00      	cmp	r3, #0
 8020982:	d0c6      	beq.n	8020912 <_vfiprintf_r+0x15a>
 8020984:	9105      	str	r1, [sp, #20]
 8020986:	e7c4      	b.n	8020912 <_vfiprintf_r+0x15a>
 8020988:	fb0c 2101 	mla	r1, ip, r1, r2
 802098c:	4604      	mov	r4, r0
 802098e:	2301      	movs	r3, #1
 8020990:	e7f0      	b.n	8020974 <_vfiprintf_r+0x1bc>
 8020992:	ab03      	add	r3, sp, #12
 8020994:	9300      	str	r3, [sp, #0]
 8020996:	462a      	mov	r2, r5
 8020998:	4b12      	ldr	r3, [pc, #72]	; (80209e4 <_vfiprintf_r+0x22c>)
 802099a:	a904      	add	r1, sp, #16
 802099c:	4630      	mov	r0, r6
 802099e:	f3af 8000 	nop.w
 80209a2:	4607      	mov	r7, r0
 80209a4:	1c78      	adds	r0, r7, #1
 80209a6:	d1d6      	bne.n	8020956 <_vfiprintf_r+0x19e>
 80209a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80209aa:	07d9      	lsls	r1, r3, #31
 80209ac:	d405      	bmi.n	80209ba <_vfiprintf_r+0x202>
 80209ae:	89ab      	ldrh	r3, [r5, #12]
 80209b0:	059a      	lsls	r2, r3, #22
 80209b2:	d402      	bmi.n	80209ba <_vfiprintf_r+0x202>
 80209b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80209b6:	f7fe fcf0 	bl	801f39a <__retarget_lock_release_recursive>
 80209ba:	89ab      	ldrh	r3, [r5, #12]
 80209bc:	065b      	lsls	r3, r3, #25
 80209be:	f53f af1d 	bmi.w	80207fc <_vfiprintf_r+0x44>
 80209c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80209c4:	e71c      	b.n	8020800 <_vfiprintf_r+0x48>
 80209c6:	ab03      	add	r3, sp, #12
 80209c8:	9300      	str	r3, [sp, #0]
 80209ca:	462a      	mov	r2, r5
 80209cc:	4b05      	ldr	r3, [pc, #20]	; (80209e4 <_vfiprintf_r+0x22c>)
 80209ce:	a904      	add	r1, sp, #16
 80209d0:	4630      	mov	r0, r6
 80209d2:	f000 f879 	bl	8020ac8 <_printf_i>
 80209d6:	e7e4      	b.n	80209a2 <_vfiprintf_r+0x1ea>
 80209d8:	08023f7c 	.word	0x08023f7c
 80209dc:	08023f86 	.word	0x08023f86
 80209e0:	00000000 	.word	0x00000000
 80209e4:	08020793 	.word	0x08020793
 80209e8:	08023f82 	.word	0x08023f82

080209ec <_printf_common>:
 80209ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209f0:	4616      	mov	r6, r2
 80209f2:	4699      	mov	r9, r3
 80209f4:	688a      	ldr	r2, [r1, #8]
 80209f6:	690b      	ldr	r3, [r1, #16]
 80209f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80209fc:	4293      	cmp	r3, r2
 80209fe:	bfb8      	it	lt
 8020a00:	4613      	movlt	r3, r2
 8020a02:	6033      	str	r3, [r6, #0]
 8020a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020a08:	4607      	mov	r7, r0
 8020a0a:	460c      	mov	r4, r1
 8020a0c:	b10a      	cbz	r2, 8020a12 <_printf_common+0x26>
 8020a0e:	3301      	adds	r3, #1
 8020a10:	6033      	str	r3, [r6, #0]
 8020a12:	6823      	ldr	r3, [r4, #0]
 8020a14:	0699      	lsls	r1, r3, #26
 8020a16:	bf42      	ittt	mi
 8020a18:	6833      	ldrmi	r3, [r6, #0]
 8020a1a:	3302      	addmi	r3, #2
 8020a1c:	6033      	strmi	r3, [r6, #0]
 8020a1e:	6825      	ldr	r5, [r4, #0]
 8020a20:	f015 0506 	ands.w	r5, r5, #6
 8020a24:	d106      	bne.n	8020a34 <_printf_common+0x48>
 8020a26:	f104 0a19 	add.w	sl, r4, #25
 8020a2a:	68e3      	ldr	r3, [r4, #12]
 8020a2c:	6832      	ldr	r2, [r6, #0]
 8020a2e:	1a9b      	subs	r3, r3, r2
 8020a30:	42ab      	cmp	r3, r5
 8020a32:	dc26      	bgt.n	8020a82 <_printf_common+0x96>
 8020a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020a38:	1e13      	subs	r3, r2, #0
 8020a3a:	6822      	ldr	r2, [r4, #0]
 8020a3c:	bf18      	it	ne
 8020a3e:	2301      	movne	r3, #1
 8020a40:	0692      	lsls	r2, r2, #26
 8020a42:	d42b      	bmi.n	8020a9c <_printf_common+0xb0>
 8020a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020a48:	4649      	mov	r1, r9
 8020a4a:	4638      	mov	r0, r7
 8020a4c:	47c0      	blx	r8
 8020a4e:	3001      	adds	r0, #1
 8020a50:	d01e      	beq.n	8020a90 <_printf_common+0xa4>
 8020a52:	6823      	ldr	r3, [r4, #0]
 8020a54:	6922      	ldr	r2, [r4, #16]
 8020a56:	f003 0306 	and.w	r3, r3, #6
 8020a5a:	2b04      	cmp	r3, #4
 8020a5c:	bf02      	ittt	eq
 8020a5e:	68e5      	ldreq	r5, [r4, #12]
 8020a60:	6833      	ldreq	r3, [r6, #0]
 8020a62:	1aed      	subeq	r5, r5, r3
 8020a64:	68a3      	ldr	r3, [r4, #8]
 8020a66:	bf0c      	ite	eq
 8020a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020a6c:	2500      	movne	r5, #0
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	bfc4      	itt	gt
 8020a72:	1a9b      	subgt	r3, r3, r2
 8020a74:	18ed      	addgt	r5, r5, r3
 8020a76:	2600      	movs	r6, #0
 8020a78:	341a      	adds	r4, #26
 8020a7a:	42b5      	cmp	r5, r6
 8020a7c:	d11a      	bne.n	8020ab4 <_printf_common+0xc8>
 8020a7e:	2000      	movs	r0, #0
 8020a80:	e008      	b.n	8020a94 <_printf_common+0xa8>
 8020a82:	2301      	movs	r3, #1
 8020a84:	4652      	mov	r2, sl
 8020a86:	4649      	mov	r1, r9
 8020a88:	4638      	mov	r0, r7
 8020a8a:	47c0      	blx	r8
 8020a8c:	3001      	adds	r0, #1
 8020a8e:	d103      	bne.n	8020a98 <_printf_common+0xac>
 8020a90:	f04f 30ff 	mov.w	r0, #4294967295
 8020a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a98:	3501      	adds	r5, #1
 8020a9a:	e7c6      	b.n	8020a2a <_printf_common+0x3e>
 8020a9c:	18e1      	adds	r1, r4, r3
 8020a9e:	1c5a      	adds	r2, r3, #1
 8020aa0:	2030      	movs	r0, #48	; 0x30
 8020aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020aa6:	4422      	add	r2, r4
 8020aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020ab0:	3302      	adds	r3, #2
 8020ab2:	e7c7      	b.n	8020a44 <_printf_common+0x58>
 8020ab4:	2301      	movs	r3, #1
 8020ab6:	4622      	mov	r2, r4
 8020ab8:	4649      	mov	r1, r9
 8020aba:	4638      	mov	r0, r7
 8020abc:	47c0      	blx	r8
 8020abe:	3001      	adds	r0, #1
 8020ac0:	d0e6      	beq.n	8020a90 <_printf_common+0xa4>
 8020ac2:	3601      	adds	r6, #1
 8020ac4:	e7d9      	b.n	8020a7a <_printf_common+0x8e>
	...

08020ac8 <_printf_i>:
 8020ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020acc:	7e0f      	ldrb	r7, [r1, #24]
 8020ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020ad0:	2f78      	cmp	r7, #120	; 0x78
 8020ad2:	4691      	mov	r9, r2
 8020ad4:	4680      	mov	r8, r0
 8020ad6:	460c      	mov	r4, r1
 8020ad8:	469a      	mov	sl, r3
 8020ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020ade:	d807      	bhi.n	8020af0 <_printf_i+0x28>
 8020ae0:	2f62      	cmp	r7, #98	; 0x62
 8020ae2:	d80a      	bhi.n	8020afa <_printf_i+0x32>
 8020ae4:	2f00      	cmp	r7, #0
 8020ae6:	f000 80d4 	beq.w	8020c92 <_printf_i+0x1ca>
 8020aea:	2f58      	cmp	r7, #88	; 0x58
 8020aec:	f000 80c0 	beq.w	8020c70 <_printf_i+0x1a8>
 8020af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020af8:	e03a      	b.n	8020b70 <_printf_i+0xa8>
 8020afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020afe:	2b15      	cmp	r3, #21
 8020b00:	d8f6      	bhi.n	8020af0 <_printf_i+0x28>
 8020b02:	a101      	add	r1, pc, #4	; (adr r1, 8020b08 <_printf_i+0x40>)
 8020b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020b08:	08020b61 	.word	0x08020b61
 8020b0c:	08020b75 	.word	0x08020b75
 8020b10:	08020af1 	.word	0x08020af1
 8020b14:	08020af1 	.word	0x08020af1
 8020b18:	08020af1 	.word	0x08020af1
 8020b1c:	08020af1 	.word	0x08020af1
 8020b20:	08020b75 	.word	0x08020b75
 8020b24:	08020af1 	.word	0x08020af1
 8020b28:	08020af1 	.word	0x08020af1
 8020b2c:	08020af1 	.word	0x08020af1
 8020b30:	08020af1 	.word	0x08020af1
 8020b34:	08020c79 	.word	0x08020c79
 8020b38:	08020ba1 	.word	0x08020ba1
 8020b3c:	08020c33 	.word	0x08020c33
 8020b40:	08020af1 	.word	0x08020af1
 8020b44:	08020af1 	.word	0x08020af1
 8020b48:	08020c9b 	.word	0x08020c9b
 8020b4c:	08020af1 	.word	0x08020af1
 8020b50:	08020ba1 	.word	0x08020ba1
 8020b54:	08020af1 	.word	0x08020af1
 8020b58:	08020af1 	.word	0x08020af1
 8020b5c:	08020c3b 	.word	0x08020c3b
 8020b60:	682b      	ldr	r3, [r5, #0]
 8020b62:	1d1a      	adds	r2, r3, #4
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	602a      	str	r2, [r5, #0]
 8020b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020b70:	2301      	movs	r3, #1
 8020b72:	e09f      	b.n	8020cb4 <_printf_i+0x1ec>
 8020b74:	6820      	ldr	r0, [r4, #0]
 8020b76:	682b      	ldr	r3, [r5, #0]
 8020b78:	0607      	lsls	r7, r0, #24
 8020b7a:	f103 0104 	add.w	r1, r3, #4
 8020b7e:	6029      	str	r1, [r5, #0]
 8020b80:	d501      	bpl.n	8020b86 <_printf_i+0xbe>
 8020b82:	681e      	ldr	r6, [r3, #0]
 8020b84:	e003      	b.n	8020b8e <_printf_i+0xc6>
 8020b86:	0646      	lsls	r6, r0, #25
 8020b88:	d5fb      	bpl.n	8020b82 <_printf_i+0xba>
 8020b8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020b8e:	2e00      	cmp	r6, #0
 8020b90:	da03      	bge.n	8020b9a <_printf_i+0xd2>
 8020b92:	232d      	movs	r3, #45	; 0x2d
 8020b94:	4276      	negs	r6, r6
 8020b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b9a:	485a      	ldr	r0, [pc, #360]	; (8020d04 <_printf_i+0x23c>)
 8020b9c:	230a      	movs	r3, #10
 8020b9e:	e012      	b.n	8020bc6 <_printf_i+0xfe>
 8020ba0:	682b      	ldr	r3, [r5, #0]
 8020ba2:	6820      	ldr	r0, [r4, #0]
 8020ba4:	1d19      	adds	r1, r3, #4
 8020ba6:	6029      	str	r1, [r5, #0]
 8020ba8:	0605      	lsls	r5, r0, #24
 8020baa:	d501      	bpl.n	8020bb0 <_printf_i+0xe8>
 8020bac:	681e      	ldr	r6, [r3, #0]
 8020bae:	e002      	b.n	8020bb6 <_printf_i+0xee>
 8020bb0:	0641      	lsls	r1, r0, #25
 8020bb2:	d5fb      	bpl.n	8020bac <_printf_i+0xe4>
 8020bb4:	881e      	ldrh	r6, [r3, #0]
 8020bb6:	4853      	ldr	r0, [pc, #332]	; (8020d04 <_printf_i+0x23c>)
 8020bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8020bba:	bf0c      	ite	eq
 8020bbc:	2308      	moveq	r3, #8
 8020bbe:	230a      	movne	r3, #10
 8020bc0:	2100      	movs	r1, #0
 8020bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020bc6:	6865      	ldr	r5, [r4, #4]
 8020bc8:	60a5      	str	r5, [r4, #8]
 8020bca:	2d00      	cmp	r5, #0
 8020bcc:	bfa2      	ittt	ge
 8020bce:	6821      	ldrge	r1, [r4, #0]
 8020bd0:	f021 0104 	bicge.w	r1, r1, #4
 8020bd4:	6021      	strge	r1, [r4, #0]
 8020bd6:	b90e      	cbnz	r6, 8020bdc <_printf_i+0x114>
 8020bd8:	2d00      	cmp	r5, #0
 8020bda:	d04b      	beq.n	8020c74 <_printf_i+0x1ac>
 8020bdc:	4615      	mov	r5, r2
 8020bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8020be2:	fb03 6711 	mls	r7, r3, r1, r6
 8020be6:	5dc7      	ldrb	r7, [r0, r7]
 8020be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020bec:	4637      	mov	r7, r6
 8020bee:	42bb      	cmp	r3, r7
 8020bf0:	460e      	mov	r6, r1
 8020bf2:	d9f4      	bls.n	8020bde <_printf_i+0x116>
 8020bf4:	2b08      	cmp	r3, #8
 8020bf6:	d10b      	bne.n	8020c10 <_printf_i+0x148>
 8020bf8:	6823      	ldr	r3, [r4, #0]
 8020bfa:	07de      	lsls	r6, r3, #31
 8020bfc:	d508      	bpl.n	8020c10 <_printf_i+0x148>
 8020bfe:	6923      	ldr	r3, [r4, #16]
 8020c00:	6861      	ldr	r1, [r4, #4]
 8020c02:	4299      	cmp	r1, r3
 8020c04:	bfde      	ittt	le
 8020c06:	2330      	movle	r3, #48	; 0x30
 8020c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020c10:	1b52      	subs	r2, r2, r5
 8020c12:	6122      	str	r2, [r4, #16]
 8020c14:	f8cd a000 	str.w	sl, [sp]
 8020c18:	464b      	mov	r3, r9
 8020c1a:	aa03      	add	r2, sp, #12
 8020c1c:	4621      	mov	r1, r4
 8020c1e:	4640      	mov	r0, r8
 8020c20:	f7ff fee4 	bl	80209ec <_printf_common>
 8020c24:	3001      	adds	r0, #1
 8020c26:	d14a      	bne.n	8020cbe <_printf_i+0x1f6>
 8020c28:	f04f 30ff 	mov.w	r0, #4294967295
 8020c2c:	b004      	add	sp, #16
 8020c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c32:	6823      	ldr	r3, [r4, #0]
 8020c34:	f043 0320 	orr.w	r3, r3, #32
 8020c38:	6023      	str	r3, [r4, #0]
 8020c3a:	4833      	ldr	r0, [pc, #204]	; (8020d08 <_printf_i+0x240>)
 8020c3c:	2778      	movs	r7, #120	; 0x78
 8020c3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020c42:	6823      	ldr	r3, [r4, #0]
 8020c44:	6829      	ldr	r1, [r5, #0]
 8020c46:	061f      	lsls	r7, r3, #24
 8020c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8020c4c:	d402      	bmi.n	8020c54 <_printf_i+0x18c>
 8020c4e:	065f      	lsls	r7, r3, #25
 8020c50:	bf48      	it	mi
 8020c52:	b2b6      	uxthmi	r6, r6
 8020c54:	07df      	lsls	r7, r3, #31
 8020c56:	bf48      	it	mi
 8020c58:	f043 0320 	orrmi.w	r3, r3, #32
 8020c5c:	6029      	str	r1, [r5, #0]
 8020c5e:	bf48      	it	mi
 8020c60:	6023      	strmi	r3, [r4, #0]
 8020c62:	b91e      	cbnz	r6, 8020c6c <_printf_i+0x1a4>
 8020c64:	6823      	ldr	r3, [r4, #0]
 8020c66:	f023 0320 	bic.w	r3, r3, #32
 8020c6a:	6023      	str	r3, [r4, #0]
 8020c6c:	2310      	movs	r3, #16
 8020c6e:	e7a7      	b.n	8020bc0 <_printf_i+0xf8>
 8020c70:	4824      	ldr	r0, [pc, #144]	; (8020d04 <_printf_i+0x23c>)
 8020c72:	e7e4      	b.n	8020c3e <_printf_i+0x176>
 8020c74:	4615      	mov	r5, r2
 8020c76:	e7bd      	b.n	8020bf4 <_printf_i+0x12c>
 8020c78:	682b      	ldr	r3, [r5, #0]
 8020c7a:	6826      	ldr	r6, [r4, #0]
 8020c7c:	6961      	ldr	r1, [r4, #20]
 8020c7e:	1d18      	adds	r0, r3, #4
 8020c80:	6028      	str	r0, [r5, #0]
 8020c82:	0635      	lsls	r5, r6, #24
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	d501      	bpl.n	8020c8c <_printf_i+0x1c4>
 8020c88:	6019      	str	r1, [r3, #0]
 8020c8a:	e002      	b.n	8020c92 <_printf_i+0x1ca>
 8020c8c:	0670      	lsls	r0, r6, #25
 8020c8e:	d5fb      	bpl.n	8020c88 <_printf_i+0x1c0>
 8020c90:	8019      	strh	r1, [r3, #0]
 8020c92:	2300      	movs	r3, #0
 8020c94:	6123      	str	r3, [r4, #16]
 8020c96:	4615      	mov	r5, r2
 8020c98:	e7bc      	b.n	8020c14 <_printf_i+0x14c>
 8020c9a:	682b      	ldr	r3, [r5, #0]
 8020c9c:	1d1a      	adds	r2, r3, #4
 8020c9e:	602a      	str	r2, [r5, #0]
 8020ca0:	681d      	ldr	r5, [r3, #0]
 8020ca2:	6862      	ldr	r2, [r4, #4]
 8020ca4:	2100      	movs	r1, #0
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f7df faa2 	bl	80001f0 <memchr>
 8020cac:	b108      	cbz	r0, 8020cb2 <_printf_i+0x1ea>
 8020cae:	1b40      	subs	r0, r0, r5
 8020cb0:	6060      	str	r0, [r4, #4]
 8020cb2:	6863      	ldr	r3, [r4, #4]
 8020cb4:	6123      	str	r3, [r4, #16]
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020cbc:	e7aa      	b.n	8020c14 <_printf_i+0x14c>
 8020cbe:	6923      	ldr	r3, [r4, #16]
 8020cc0:	462a      	mov	r2, r5
 8020cc2:	4649      	mov	r1, r9
 8020cc4:	4640      	mov	r0, r8
 8020cc6:	47d0      	blx	sl
 8020cc8:	3001      	adds	r0, #1
 8020cca:	d0ad      	beq.n	8020c28 <_printf_i+0x160>
 8020ccc:	6823      	ldr	r3, [r4, #0]
 8020cce:	079b      	lsls	r3, r3, #30
 8020cd0:	d413      	bmi.n	8020cfa <_printf_i+0x232>
 8020cd2:	68e0      	ldr	r0, [r4, #12]
 8020cd4:	9b03      	ldr	r3, [sp, #12]
 8020cd6:	4298      	cmp	r0, r3
 8020cd8:	bfb8      	it	lt
 8020cda:	4618      	movlt	r0, r3
 8020cdc:	e7a6      	b.n	8020c2c <_printf_i+0x164>
 8020cde:	2301      	movs	r3, #1
 8020ce0:	4632      	mov	r2, r6
 8020ce2:	4649      	mov	r1, r9
 8020ce4:	4640      	mov	r0, r8
 8020ce6:	47d0      	blx	sl
 8020ce8:	3001      	adds	r0, #1
 8020cea:	d09d      	beq.n	8020c28 <_printf_i+0x160>
 8020cec:	3501      	adds	r5, #1
 8020cee:	68e3      	ldr	r3, [r4, #12]
 8020cf0:	9903      	ldr	r1, [sp, #12]
 8020cf2:	1a5b      	subs	r3, r3, r1
 8020cf4:	42ab      	cmp	r3, r5
 8020cf6:	dcf2      	bgt.n	8020cde <_printf_i+0x216>
 8020cf8:	e7eb      	b.n	8020cd2 <_printf_i+0x20a>
 8020cfa:	2500      	movs	r5, #0
 8020cfc:	f104 0619 	add.w	r6, r4, #25
 8020d00:	e7f5      	b.n	8020cee <_printf_i+0x226>
 8020d02:	bf00      	nop
 8020d04:	08023f8d 	.word	0x08023f8d
 8020d08:	08023f9e 	.word	0x08023f9e

08020d0c <__swhatbuf_r>:
 8020d0c:	b570      	push	{r4, r5, r6, lr}
 8020d0e:	460c      	mov	r4, r1
 8020d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d14:	2900      	cmp	r1, #0
 8020d16:	b096      	sub	sp, #88	; 0x58
 8020d18:	4615      	mov	r5, r2
 8020d1a:	461e      	mov	r6, r3
 8020d1c:	da0d      	bge.n	8020d3a <__swhatbuf_r+0x2e>
 8020d1e:	89a3      	ldrh	r3, [r4, #12]
 8020d20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020d24:	f04f 0100 	mov.w	r1, #0
 8020d28:	bf0c      	ite	eq
 8020d2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020d2e:	2340      	movne	r3, #64	; 0x40
 8020d30:	2000      	movs	r0, #0
 8020d32:	6031      	str	r1, [r6, #0]
 8020d34:	602b      	str	r3, [r5, #0]
 8020d36:	b016      	add	sp, #88	; 0x58
 8020d38:	bd70      	pop	{r4, r5, r6, pc}
 8020d3a:	466a      	mov	r2, sp
 8020d3c:	f000 f848 	bl	8020dd0 <_fstat_r>
 8020d40:	2800      	cmp	r0, #0
 8020d42:	dbec      	blt.n	8020d1e <__swhatbuf_r+0x12>
 8020d44:	9901      	ldr	r1, [sp, #4]
 8020d46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020d4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020d4e:	4259      	negs	r1, r3
 8020d50:	4159      	adcs	r1, r3
 8020d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020d56:	e7eb      	b.n	8020d30 <__swhatbuf_r+0x24>

08020d58 <__smakebuf_r>:
 8020d58:	898b      	ldrh	r3, [r1, #12]
 8020d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020d5c:	079d      	lsls	r5, r3, #30
 8020d5e:	4606      	mov	r6, r0
 8020d60:	460c      	mov	r4, r1
 8020d62:	d507      	bpl.n	8020d74 <__smakebuf_r+0x1c>
 8020d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020d68:	6023      	str	r3, [r4, #0]
 8020d6a:	6123      	str	r3, [r4, #16]
 8020d6c:	2301      	movs	r3, #1
 8020d6e:	6163      	str	r3, [r4, #20]
 8020d70:	b002      	add	sp, #8
 8020d72:	bd70      	pop	{r4, r5, r6, pc}
 8020d74:	ab01      	add	r3, sp, #4
 8020d76:	466a      	mov	r2, sp
 8020d78:	f7ff ffc8 	bl	8020d0c <__swhatbuf_r>
 8020d7c:	9900      	ldr	r1, [sp, #0]
 8020d7e:	4605      	mov	r5, r0
 8020d80:	4630      	mov	r0, r6
 8020d82:	f7fc fe05 	bl	801d990 <_malloc_r>
 8020d86:	b948      	cbnz	r0, 8020d9c <__smakebuf_r+0x44>
 8020d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d8c:	059a      	lsls	r2, r3, #22
 8020d8e:	d4ef      	bmi.n	8020d70 <__smakebuf_r+0x18>
 8020d90:	f023 0303 	bic.w	r3, r3, #3
 8020d94:	f043 0302 	orr.w	r3, r3, #2
 8020d98:	81a3      	strh	r3, [r4, #12]
 8020d9a:	e7e3      	b.n	8020d64 <__smakebuf_r+0xc>
 8020d9c:	89a3      	ldrh	r3, [r4, #12]
 8020d9e:	6020      	str	r0, [r4, #0]
 8020da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020da4:	81a3      	strh	r3, [r4, #12]
 8020da6:	9b00      	ldr	r3, [sp, #0]
 8020da8:	6163      	str	r3, [r4, #20]
 8020daa:	9b01      	ldr	r3, [sp, #4]
 8020dac:	6120      	str	r0, [r4, #16]
 8020dae:	b15b      	cbz	r3, 8020dc8 <__smakebuf_r+0x70>
 8020db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020db4:	4630      	mov	r0, r6
 8020db6:	f000 f81d 	bl	8020df4 <_isatty_r>
 8020dba:	b128      	cbz	r0, 8020dc8 <__smakebuf_r+0x70>
 8020dbc:	89a3      	ldrh	r3, [r4, #12]
 8020dbe:	f023 0303 	bic.w	r3, r3, #3
 8020dc2:	f043 0301 	orr.w	r3, r3, #1
 8020dc6:	81a3      	strh	r3, [r4, #12]
 8020dc8:	89a3      	ldrh	r3, [r4, #12]
 8020dca:	431d      	orrs	r5, r3
 8020dcc:	81a5      	strh	r5, [r4, #12]
 8020dce:	e7cf      	b.n	8020d70 <__smakebuf_r+0x18>

08020dd0 <_fstat_r>:
 8020dd0:	b538      	push	{r3, r4, r5, lr}
 8020dd2:	4d07      	ldr	r5, [pc, #28]	; (8020df0 <_fstat_r+0x20>)
 8020dd4:	2300      	movs	r3, #0
 8020dd6:	4604      	mov	r4, r0
 8020dd8:	4608      	mov	r0, r1
 8020dda:	4611      	mov	r1, r2
 8020ddc:	602b      	str	r3, [r5, #0]
 8020dde:	f7f3 f822 	bl	8013e26 <_fstat>
 8020de2:	1c43      	adds	r3, r0, #1
 8020de4:	d102      	bne.n	8020dec <_fstat_r+0x1c>
 8020de6:	682b      	ldr	r3, [r5, #0]
 8020de8:	b103      	cbz	r3, 8020dec <_fstat_r+0x1c>
 8020dea:	6023      	str	r3, [r4, #0]
 8020dec:	bd38      	pop	{r3, r4, r5, pc}
 8020dee:	bf00      	nop
 8020df0:	20002ac0 	.word	0x20002ac0

08020df4 <_isatty_r>:
 8020df4:	b538      	push	{r3, r4, r5, lr}
 8020df6:	4d06      	ldr	r5, [pc, #24]	; (8020e10 <_isatty_r+0x1c>)
 8020df8:	2300      	movs	r3, #0
 8020dfa:	4604      	mov	r4, r0
 8020dfc:	4608      	mov	r0, r1
 8020dfe:	602b      	str	r3, [r5, #0]
 8020e00:	f7f3 f821 	bl	8013e46 <_isatty>
 8020e04:	1c43      	adds	r3, r0, #1
 8020e06:	d102      	bne.n	8020e0e <_isatty_r+0x1a>
 8020e08:	682b      	ldr	r3, [r5, #0]
 8020e0a:	b103      	cbz	r3, 8020e0e <_isatty_r+0x1a>
 8020e0c:	6023      	str	r3, [r4, #0]
 8020e0e:	bd38      	pop	{r3, r4, r5, pc}
 8020e10:	20002ac0 	.word	0x20002ac0

08020e14 <__assert_func>:
 8020e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020e16:	4614      	mov	r4, r2
 8020e18:	461a      	mov	r2, r3
 8020e1a:	4b09      	ldr	r3, [pc, #36]	; (8020e40 <__assert_func+0x2c>)
 8020e1c:	681b      	ldr	r3, [r3, #0]
 8020e1e:	4605      	mov	r5, r0
 8020e20:	68d8      	ldr	r0, [r3, #12]
 8020e22:	b14c      	cbz	r4, 8020e38 <__assert_func+0x24>
 8020e24:	4b07      	ldr	r3, [pc, #28]	; (8020e44 <__assert_func+0x30>)
 8020e26:	9100      	str	r1, [sp, #0]
 8020e28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020e2c:	4906      	ldr	r1, [pc, #24]	; (8020e48 <__assert_func+0x34>)
 8020e2e:	462b      	mov	r3, r5
 8020e30:	f000 f83e 	bl	8020eb0 <fiprintf>
 8020e34:	f000 f84e 	bl	8020ed4 <abort>
 8020e38:	4b04      	ldr	r3, [pc, #16]	; (8020e4c <__assert_func+0x38>)
 8020e3a:	461c      	mov	r4, r3
 8020e3c:	e7f3      	b.n	8020e26 <__assert_func+0x12>
 8020e3e:	bf00      	nop
 8020e40:	200008b0 	.word	0x200008b0
 8020e44:	08023faf 	.word	0x08023faf
 8020e48:	08023fbc 	.word	0x08023fbc
 8020e4c:	08023fea 	.word	0x08023fea

08020e50 <_realloc_r>:
 8020e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e54:	4680      	mov	r8, r0
 8020e56:	4614      	mov	r4, r2
 8020e58:	460e      	mov	r6, r1
 8020e5a:	b921      	cbnz	r1, 8020e66 <_realloc_r+0x16>
 8020e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020e60:	4611      	mov	r1, r2
 8020e62:	f7fc bd95 	b.w	801d990 <_malloc_r>
 8020e66:	b92a      	cbnz	r2, 8020e74 <_realloc_r+0x24>
 8020e68:	f7fe fab4 	bl	801f3d4 <_free_r>
 8020e6c:	4625      	mov	r5, r4
 8020e6e:	4628      	mov	r0, r5
 8020e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e74:	f000 f835 	bl	8020ee2 <_malloc_usable_size_r>
 8020e78:	4284      	cmp	r4, r0
 8020e7a:	4607      	mov	r7, r0
 8020e7c:	d802      	bhi.n	8020e84 <_realloc_r+0x34>
 8020e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020e82:	d812      	bhi.n	8020eaa <_realloc_r+0x5a>
 8020e84:	4621      	mov	r1, r4
 8020e86:	4640      	mov	r0, r8
 8020e88:	f7fc fd82 	bl	801d990 <_malloc_r>
 8020e8c:	4605      	mov	r5, r0
 8020e8e:	2800      	cmp	r0, #0
 8020e90:	d0ed      	beq.n	8020e6e <_realloc_r+0x1e>
 8020e92:	42bc      	cmp	r4, r7
 8020e94:	4622      	mov	r2, r4
 8020e96:	4631      	mov	r1, r6
 8020e98:	bf28      	it	cs
 8020e9a:	463a      	movcs	r2, r7
 8020e9c:	f7fe fa7e 	bl	801f39c <memcpy>
 8020ea0:	4631      	mov	r1, r6
 8020ea2:	4640      	mov	r0, r8
 8020ea4:	f7fe fa96 	bl	801f3d4 <_free_r>
 8020ea8:	e7e1      	b.n	8020e6e <_realloc_r+0x1e>
 8020eaa:	4635      	mov	r5, r6
 8020eac:	e7df      	b.n	8020e6e <_realloc_r+0x1e>
	...

08020eb0 <fiprintf>:
 8020eb0:	b40e      	push	{r1, r2, r3}
 8020eb2:	b503      	push	{r0, r1, lr}
 8020eb4:	4601      	mov	r1, r0
 8020eb6:	ab03      	add	r3, sp, #12
 8020eb8:	4805      	ldr	r0, [pc, #20]	; (8020ed0 <fiprintf+0x20>)
 8020eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ebe:	6800      	ldr	r0, [r0, #0]
 8020ec0:	9301      	str	r3, [sp, #4]
 8020ec2:	f7ff fc79 	bl	80207b8 <_vfiprintf_r>
 8020ec6:	b002      	add	sp, #8
 8020ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ecc:	b003      	add	sp, #12
 8020ece:	4770      	bx	lr
 8020ed0:	200008b0 	.word	0x200008b0

08020ed4 <abort>:
 8020ed4:	b508      	push	{r3, lr}
 8020ed6:	2006      	movs	r0, #6
 8020ed8:	f000 f834 	bl	8020f44 <raise>
 8020edc:	2001      	movs	r0, #1
 8020ede:	f7f2 ff53 	bl	8013d88 <_exit>

08020ee2 <_malloc_usable_size_r>:
 8020ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ee6:	1f18      	subs	r0, r3, #4
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	bfbc      	itt	lt
 8020eec:	580b      	ldrlt	r3, [r1, r0]
 8020eee:	18c0      	addlt	r0, r0, r3
 8020ef0:	4770      	bx	lr

08020ef2 <_raise_r>:
 8020ef2:	291f      	cmp	r1, #31
 8020ef4:	b538      	push	{r3, r4, r5, lr}
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	460d      	mov	r5, r1
 8020efa:	d904      	bls.n	8020f06 <_raise_r+0x14>
 8020efc:	2316      	movs	r3, #22
 8020efe:	6003      	str	r3, [r0, #0]
 8020f00:	f04f 30ff 	mov.w	r0, #4294967295
 8020f04:	bd38      	pop	{r3, r4, r5, pc}
 8020f06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020f08:	b112      	cbz	r2, 8020f10 <_raise_r+0x1e>
 8020f0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020f0e:	b94b      	cbnz	r3, 8020f24 <_raise_r+0x32>
 8020f10:	4620      	mov	r0, r4
 8020f12:	f000 f831 	bl	8020f78 <_getpid_r>
 8020f16:	462a      	mov	r2, r5
 8020f18:	4601      	mov	r1, r0
 8020f1a:	4620      	mov	r0, r4
 8020f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020f20:	f000 b818 	b.w	8020f54 <_kill_r>
 8020f24:	2b01      	cmp	r3, #1
 8020f26:	d00a      	beq.n	8020f3e <_raise_r+0x4c>
 8020f28:	1c59      	adds	r1, r3, #1
 8020f2a:	d103      	bne.n	8020f34 <_raise_r+0x42>
 8020f2c:	2316      	movs	r3, #22
 8020f2e:	6003      	str	r3, [r0, #0]
 8020f30:	2001      	movs	r0, #1
 8020f32:	e7e7      	b.n	8020f04 <_raise_r+0x12>
 8020f34:	2400      	movs	r4, #0
 8020f36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020f3a:	4628      	mov	r0, r5
 8020f3c:	4798      	blx	r3
 8020f3e:	2000      	movs	r0, #0
 8020f40:	e7e0      	b.n	8020f04 <_raise_r+0x12>
	...

08020f44 <raise>:
 8020f44:	4b02      	ldr	r3, [pc, #8]	; (8020f50 <raise+0xc>)
 8020f46:	4601      	mov	r1, r0
 8020f48:	6818      	ldr	r0, [r3, #0]
 8020f4a:	f7ff bfd2 	b.w	8020ef2 <_raise_r>
 8020f4e:	bf00      	nop
 8020f50:	200008b0 	.word	0x200008b0

08020f54 <_kill_r>:
 8020f54:	b538      	push	{r3, r4, r5, lr}
 8020f56:	4d07      	ldr	r5, [pc, #28]	; (8020f74 <_kill_r+0x20>)
 8020f58:	2300      	movs	r3, #0
 8020f5a:	4604      	mov	r4, r0
 8020f5c:	4608      	mov	r0, r1
 8020f5e:	4611      	mov	r1, r2
 8020f60:	602b      	str	r3, [r5, #0]
 8020f62:	f7f2 ff01 	bl	8013d68 <_kill>
 8020f66:	1c43      	adds	r3, r0, #1
 8020f68:	d102      	bne.n	8020f70 <_kill_r+0x1c>
 8020f6a:	682b      	ldr	r3, [r5, #0]
 8020f6c:	b103      	cbz	r3, 8020f70 <_kill_r+0x1c>
 8020f6e:	6023      	str	r3, [r4, #0]
 8020f70:	bd38      	pop	{r3, r4, r5, pc}
 8020f72:	bf00      	nop
 8020f74:	20002ac0 	.word	0x20002ac0

08020f78 <_getpid_r>:
 8020f78:	f7f2 beee 	b.w	8013d58 <_getpid>

08020f7c <_init>:
 8020f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f7e:	bf00      	nop
 8020f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020f82:	bc08      	pop	{r3}
 8020f84:	469e      	mov	lr, r3
 8020f86:	4770      	bx	lr

08020f88 <_fini>:
 8020f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f8a:	bf00      	nop
 8020f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020f8e:	bc08      	pop	{r3}
 8020f90:	469e      	mov	lr, r3
 8020f92:	4770      	bx	lr
