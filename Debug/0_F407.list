
0_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000211dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003064  08021370  08021370  00031370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080243d4  080243d4  00040910  2**0
                  CONTENTS
  4 .ARM          00000008  080243d4  080243d4  000343d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080243dc  080243dc  00040910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080243dc  080243dc  000343dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080243e0  080243e0  000343e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000910  20000000  080243e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040910  2**0
                  CONTENTS
 10 .bss          00002214  20000910  20000910  00040910  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20002b24  20002b24  00040910  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040910  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040940  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039dc6  00000000  00000000  00040983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000074a7  00000000  00000000  0007a749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002058  00000000  00000000  00081bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c60  00000000  00000000  00083c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002af9f  00000000  00000000  000858a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030b28  00000000  00000000  000b0847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e096c  00000000  00000000  000e136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009ce8  00000000  00000000  001c1cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000038  00000000  00000000  001cb9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000910 	.word	0x20000910
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021354 	.word	0x08021354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000914 	.word	0x20000914
 80001cc:	08021354 	.word	0x08021354

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a6 	b.w	8000fbc <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14a      	bne.n	8000d9a <__udivmoddi4+0xa6>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0xe2>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b143      	cbz	r3, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	409f      	lsls	r7, r3
 8000d1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	409c      	lsls	r4, r3
 8000d22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d26:	fa1f f58c 	uxth.w	r5, ip
 8000d2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	fb01 f005 	mul.w	r0, r1, r5
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x62>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d48:	f080 811c 	bcs.w	8000f84 <__udivmoddi4+0x290>
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	f240 8119 	bls.w	8000f84 <__udivmoddi4+0x290>
 8000d52:	3902      	subs	r1, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d66:	fb00 f505 	mul.w	r5, r0, r5
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x90>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x294>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x294>
 8000d80:	4464      	add	r4, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11e      	cbz	r6, 8000d96 <__udivmoddi4+0xa2>
 8000d8e:	40dc      	lsrs	r4, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9c6 4300 	strd	r4, r3, [r6]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0xbc>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f000 80ed 	beq.w	8000f7e <__udivmoddi4+0x28a>
 8000da4:	2100      	movs	r1, #0
 8000da6:	e9c6 0500 	strd	r0, r5, [r6]
 8000daa:	4608      	mov	r0, r1
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	fab3 f183 	clz	r1, r3
 8000db4:	2900      	cmp	r1, #0
 8000db6:	d149      	bne.n	8000e4c <__udivmoddi4+0x158>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0xce>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	f200 80f8 	bhi.w	8000fb2 <__udivmoddi4+0x2be>
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d0e2      	beq.n	8000d96 <__udivmoddi4+0xa2>
 8000dd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd4:	e7df      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000dd6:	b902      	cbnz	r2, 8000dda <__udivmoddi4+0xe6>
 8000dd8:	deff      	udf	#255	; 0xff
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8090 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2101      	movs	r1, #1
 8000df0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df4:	fb07 2015 	mls	r0, r7, r5, r2
 8000df8:	0c22      	lsrs	r2, r4, #16
 8000dfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dfe:	fb0e f005 	mul.w	r0, lr, r5
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x124>
 8000e06:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x122>
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2b8>
 8000e16:	4645      	mov	r5, r8
 8000e18:	1a12      	subs	r2, r2, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x14e>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x14c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000e40:	4610      	mov	r0, r2
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4a:	e79f      	b.n	8000d8c <__udivmoddi4+0x98>
 8000e4c:	f1c1 0720 	rsb	r7, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	40fd      	lsrs	r5, r7
 8000e64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e68:	4323      	orrs	r3, r4
 8000e6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	fb09 5518 	mls	r5, r9, r8, r5
 8000e76:	0c1c      	lsrs	r4, r3, #16
 8000e78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b0>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e98:	42a5      	cmp	r5, r4
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4464      	add	r4, ip
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	b29d      	uxth	r5, r3
 8000ea8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eac:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1da>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2ac>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2ac>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46ae      	mov	lr, r5
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x29c>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x298>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x208>
 8000ee6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eea:	eb64 040e 	sbc.w	r4, r4, lr
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	40cc      	lsrs	r4, r1
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	e9c6 7400 	strd	r7, r4, [r6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	f1c3 0120 	rsb	r1, r3, #32
 8000f08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f10:	fa25 f101 	lsr.w	r1, r5, r1
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432a      	orrs	r2, r5
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f24:	fb07 1510 	mls	r5, r7, r0, r1
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f32:	428d      	cmp	r5, r1
 8000f34:	fa04 f403 	lsl.w	r4, r4, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x258>
 8000f3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f44:	428d      	cmp	r5, r1
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b0>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1b49      	subs	r1, r1, r5
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f54:	fb07 1115 	mls	r1, r7, r5, r1
 8000f58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x282>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f72:	3d02      	subs	r5, #2
 8000f74:	4462      	add	r2, ip
 8000f76:	1a52      	subs	r2, r2, r1
 8000f78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0xfc>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xa2>
 8000f84:	4639      	mov	r1, r7
 8000f86:	e6e6      	b.n	8000d56 <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x90>
 8000f8c:	4548      	cmp	r0, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f0>
 8000f9c:	4645      	mov	r5, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x282>
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1da>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x258>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b0>
 8000fac:	3d02      	subs	r5, #2
 8000fae:	4462      	add	r2, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x124>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e70a      	b.n	8000dcc <__udivmoddi4+0xd8>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x14e>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000fcc:	73fb      	strb	r3, [r7, #15]
    return value;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <CO_getUint32>:
    return value;
}

/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t
CO_getUint32(const void* buf) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
    uint32_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000fe8:	60fb      	str	r3, [r7, #12]
    return value;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
 8001004:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8001028:	2304      	movs	r3, #4
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <OD_getIndex>:
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex ( const OD_entry_t* entry)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <OD_getIndex+0x14>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	e000      	b.n	800104c <OD_getIndex+0x16>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <OD_extension_init+0x14>
 8001068:	2305      	movs	r3, #5
 800106a:	e003      	b.n	8001074 <OD_extension_init+0x1c>
    entry->extension = extension;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <OD_get_u32>:



/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	460b      	mov	r3, r1
 800108e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001090:	7af9      	ldrb	r1, [r7, #11]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2304      	movs	r3, #4
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f001 fdf6 	bl	8002c8c <OD_get_value>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <OD_read_1014>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00c      	beq.n	80010d8 <OD_read_1014+0x2e>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	7d1b      	ldrb	r3, [r3, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <OD_read_1014+0x2e>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <OD_read_1014+0x2e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d902      	bls.n	80010d8 <OD_read_1014+0x2e>
        || (countRead == NULL)) {
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <OD_read_1014+0x32>
        return ODR_DEV_INCOMPAT;
 80010d8:	2309      	movs	r3, #9
 80010da:	e027      	b.n	800112c <OD_read_1014+0x82>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61fb      	str	r3, [r7, #28]

    uint16_t canId = (em->producerCanId == CO_CAN_ID_EMERGENCY) ? (CO_CAN_ID_EMERGENCY + em->nodeId)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e8:	2b80      	cmp	r3, #128	; 0x80
 80010ea:	d106      	bne.n	80010fa <OD_read_1014+0x50>
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3380      	adds	r3, #128	; 0x80
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	e002      	b.n	8001100 <OD_read_1014+0x56>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001100:	837b      	strh	r3, [r7, #26]
                                                                : em->producerCanId;
    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <OD_read_1014+0x64>
 800110a:	2300      	movs	r3, #0
 800110c:	e001      	b.n	8001112 <OD_read_1014+0x68>
 800110e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001112:	617b      	str	r3, [r7, #20]
    COB_IDEmergency32 |= canId;
 8001114:	8b7b      	ldrh	r3, [r7, #26]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 800111c:	6979      	ldr	r1, [r7, #20]
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff ff7a 	bl	8001018 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2204      	movs	r2, #4
 8001128:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <OD_write_1014>:

static ODR_t
OD_write_1014(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00c      	beq.n	8001162 <OD_write_1014+0x2e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	7d1b      	ldrb	r3, [r3, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d108      	bne.n	8001162 <OD_write_1014+0x2e>
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <OD_write_1014+0x2e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d102      	bne.n	8001162 <OD_write_1014+0x2e>
        || (countWritten == NULL)) {
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <OD_write_1014+0x32>
        return ODR_DEV_INCOMPAT;
 8001162:	2309      	movs	r3, #9
 8001164:	e088      	b.n	8001278 <OD_write_1014+0x144>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61fb      	str	r3, [r7, #28]

    /* Verify written value. COB ID must not change, if emergency is enabled */
    uint32_t COB_IDEmergency32 = CO_getUint32(buf);
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f7ff ff35 	bl	8000fdc <CO_getUint32>
 8001172:	61b8      	str	r0, [r7, #24]
    uint16_t newCanId = (uint16_t)(COB_IDEmergency32 & 0x7FFU);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	b29b      	uxth	r3, r3
 8001178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117c:	82fb      	strh	r3, [r7, #22]
    uint16_t curCanId = (em->producerCanId == CO_CAN_ID_EMERGENCY) ? (CO_CAN_ID_EMERGENCY + em->nodeId)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001184:	2b80      	cmp	r3, #128	; 0x80
 8001186:	d106      	bne.n	8001196 <OD_write_1014+0x62>
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800118e:	b29b      	uxth	r3, r3
 8001190:	3380      	adds	r3, #128	; 0x80
 8001192:	b29b      	uxth	r3, r3
 8001194:	e002      	b.n	800119c <OD_write_1014+0x68>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800119c:	82bb      	strh	r3, [r7, #20]
                                                                   : em->producerCanId;
    bool_t newEnabled = ((COB_IDEmergency32 & 0x80000000U) == 0U) && (newCanId != 0U);
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db04      	blt.n	80011ae <OD_write_1014+0x7a>
 80011a4:	8afb      	ldrh	r3, [r7, #22]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <OD_write_1014+0x7a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <OD_write_1014+0x7c>
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
    if (((COB_IDEmergency32 & 0x7FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(newCanId)
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <OD_write_1014+0x14c>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d131      	bne.n	8001220 <OD_write_1014+0xec>
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	2b7f      	cmp	r3, #127	; 0x7f
 80011c0:	d92e      	bls.n	8001220 <OD_write_1014+0xec>
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c8:	d903      	bls.n	80011d2 <OD_write_1014+0x9e>
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011d0:	d926      	bls.n	8001220 <OD_write_1014+0xec>
 80011d2:	8afb      	ldrh	r3, [r7, #22]
 80011d4:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80011d8:	d903      	bls.n	80011e2 <OD_write_1014+0xae>
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011e0:	d31e      	bcc.n	8001220 <OD_write_1014+0xec>
 80011e2:	8afb      	ldrh	r3, [r7, #22]
 80011e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011e8:	d903      	bls.n	80011f2 <OD_write_1014+0xbe>
 80011ea:	8afb      	ldrh	r3, [r7, #22]
 80011ec:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80011f0:	d316      	bcc.n	8001220 <OD_write_1014+0xec>
 80011f2:	8afb      	ldrh	r3, [r7, #22]
 80011f4:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80011f8:	d303      	bcc.n	8001202 <OD_write_1014+0xce>
 80011fa:	8afb      	ldrh	r3, [r7, #22]
 80011fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001200:	d30e      	bcc.n	8001220 <OD_write_1014+0xec>
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001208:	d80a      	bhi.n	8001220 <OD_write_1014+0xec>
        || ((em->producerEnabled && newEnabled) && (newCanId != curCanId))) {
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <OD_write_1014+0xf0>
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <OD_write_1014+0xf0>
 8001218:	8afa      	ldrh	r2, [r7, #22]
 800121a:	8abb      	ldrh	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <OD_write_1014+0xf0>
        return ODR_INVALID_VALUE;
 8001220:	230f      	movs	r3, #15
 8001222:	e029      	b.n	8001278 <OD_write_1014+0x144>
    }

    /* store values. If default CAN-ID is used, then store only value of CO_CAN_ID_EMERGENCY without node id. */
    em->producerEnabled = newEnabled;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    em->producerCanId = (newCanId == ((uint16_t)CO_CAN_ID_EMERGENCY + em->nodeId)) ? CO_CAN_ID_EMERGENCY : newCanId;
 800122a:	8afa      	ldrh	r2, [r7, #22]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001232:	3380      	adds	r3, #128	; 0x80
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <OD_write_1014+0x108>
 8001238:	8afa      	ldrh	r2, [r7, #22]
 800123a:	e000      	b.n	800123e <OD_write_1014+0x10a>
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* configure emergency message CAN transmission */
    if (newEnabled) {
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00f      	beq.n	800126a <OD_write_1014+0x136>
        em->CANtxBuff = CO_CANtxBufferInit(em->CANdevTx, em->CANdevTxIdx, newCanId, false, 8U, false);
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	6958      	ldr	r0, [r3, #20]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8001254:	8afa      	ldrh	r2, [r7, #22]
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2308      	movs	r3, #8
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	f011 fdd0 	bl	8012e04 <CO_CANtxBufferInit>
 8001264:	4602      	mov	r2, r0
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f001 fb10 	bl	8002896 <OD_writeOriginal>
 8001276:	4603      	mov	r3, r0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	7ffff800 	.word	0x7ffff800

08001284 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <OD_read_1003+0x34>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <OD_read_1003+0x34>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <OD_read_1003+0x34>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d803      	bhi.n	80012b2 <OD_read_1003+0x2e>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	7d1b      	ldrb	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <OD_read_1003+0x34>
        || (count < 1U)) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80012b8:	2309      	movs	r3, #9
 80012ba:	e04d      	b.n	8001358 <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	7f1b      	ldrb	r3, [r3, #28]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d801      	bhi.n	80012ce <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80012ca:	2309      	movs	r3, #9
 80012cc:	e044      	b.n	8001358 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	7d1b      	ldrb	r3, [r3, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10b      	bne.n	80012ee <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	4619      	mov	r1, r3
 80012de:	68b8      	ldr	r0, [r7, #8]
 80012e0:	f7ff fe8a 	bl	8000ff8 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e034      	b.n	8001358 <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7d1a      	ldrb	r2, [r3, #20]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d82c      	bhi.n	8001356 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	7f5b      	ldrb	r3, [r3, #29]
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	7d1b      	ldrb	r3, [r3, #20]
 8001306:	b29b      	uxth	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29b      	uxth	r3, r3
 800130c:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800130e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da07      	bge.n	8001326 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	b29a      	uxth	r2, r3
 800131c:	8afb      	ldrh	r3, [r7, #22]
 800131e:	4413      	add	r3, r2
 8001320:	b29b      	uxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
 8001324:	e007      	b.n	8001336 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8001326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	7f12      	ldrb	r2, [r2, #28]
 800132e:	4293      	cmp	r3, r2
 8001330:	db01      	blt.n	8001336 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8001332:	2309      	movs	r3, #9
 8001334:	e010      	b.n	8001358 <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff fe66 	bl	8001018 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2204      	movs	r2, #4
 8001350:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 8001356:	2319      	movs	r3, #25
    }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00c      	beq.n	800138e <OD_write_1003+0x2e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7d1b      	ldrb	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <OD_write_1003+0x2e>
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <OD_write_1003+0x2e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <OD_write_1003+0x2e>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 800138e:	2309      	movs	r3, #9
 8001390:	e012      	b.n	80013b8 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f7ff fe14 	bl	8000fc0 <CO_getUint8>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 800139e:	230f      	movs	r3, #15
 80013a0:	e00a      	b.n	80013b8 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <OD_read_statusBits>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_statusBits(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (countRead == NULL)) {
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d009      	beq.n	80013e8 <OD_read_statusBits+0x28>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	7d1b      	ldrb	r3, [r3, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <OD_read_statusBits+0x28>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <OD_read_statusBits+0x28>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <OD_read_statusBits+0x2c>
        return ODR_DEV_INCOMPAT;
 80013e8:	2309      	movs	r3, #9
 80013ea:	e024      	b.n	8001436 <OD_read_statusBits+0x76>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]

    /* get MAX(errorStatusBitsSize, bufSize, ODsizeIndication) */
    OD_size_t countReadLocal = CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U;
 80013f2:	230a      	movs	r3, #10
 80013f4:	617b      	str	r3, [r7, #20]
    if (countReadLocal > count) {
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d901      	bls.n	8001402 <OD_read_statusBits+0x42>
        countReadLocal = count;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	617b      	str	r3, [r7, #20]
    }
    if ((stream->dataLength != 0U) && (countReadLocal > stream->dataLength)) {
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <OD_read_statusBits+0x5c>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d903      	bls.n	800141c <OD_read_statusBits+0x5c>
        countReadLocal = stream->dataLength;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e002      	b.n	8001422 <OD_read_statusBits+0x62>
    } else {
        stream->dataLength = countReadLocal;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	609a      	str	r2, [r3, #8]
    }

    (void)memcpy((void*)(buf), (const void*)(&em->errorStatusBits[0]), countReadLocal);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	4619      	mov	r1, r3
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f01e f9a3 	bl	801f774 <memcpy>

    *countRead = countReadLocal;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <OD_write_statusBits>:

static ODR_t
OD_write_statusBits(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (countWritten == NULL)) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <OD_write_statusBits+0x28>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7d1b      	ldrb	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <OD_write_statusBits+0x28>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <OD_write_statusBits+0x28>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <OD_write_statusBits+0x2c>
        return ODR_DEV_INCOMPAT;
 8001466:	2309      	movs	r3, #9
 8001468:	e024      	b.n	80014b4 <OD_write_statusBits+0x76>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	613b      	str	r3, [r7, #16]

    /* get MAX(errorStatusBitsSize, bufSize, ODsizeIndication) */
    OD_size_t countWrite = CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U;
 8001470:	230a      	movs	r3, #10
 8001472:	617b      	str	r3, [r7, #20]
    if (countWrite > count) {
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d901      	bls.n	8001480 <OD_write_statusBits+0x42>
        countWrite = count;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	617b      	str	r3, [r7, #20]
    }
    if ((stream->dataLength != 0U) && (countWrite > stream->dataLength)) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <OD_write_statusBits+0x5c>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	429a      	cmp	r2, r3
 8001490:	d903      	bls.n	800149a <OD_write_statusBits+0x5c>
        countWrite = stream->dataLength;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e002      	b.n	80014a0 <OD_write_statusBits+0x62>
    } else {
        stream->dataLength = countWrite;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	609a      	str	r2, [r3, #8]
    }

    (void)memcpy((void*)(&em->errorStatusBits[0]), (const void*)(buf), countWrite);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f01e f964 	bl	801f774 <memcpy>

    *countWritten = countWrite;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <CO_EM_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_EM_receive(void* object, void* msg) {
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    CO_EM_t* em = (CO_EM_t*)object;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	61fb      	str	r3, [r7, #28]

    if ((em != NULL) && (em->pFunctSignalRx != NULL)) {
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d022      	beq.n	8001516 <CO_EM_receive+0x5a>
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01e      	beq.n	8001516 <CO_EM_receive+0x5a>
        uint16_t ident = CO_CANrxMsg_readIdent(msg);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	837b      	strh	r3, [r7, #26]

        /* ignore sync messages (necessary if sync object is not used) */
        if (ident != 0x80U) {
 80014de:	8b7b      	ldrh	r3, [r7, #26]
 80014e0:	2b80      	cmp	r3, #128	; 0x80
 80014e2:	d018      	beq.n	8001516 <CO_EM_receive+0x5a>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3305      	adds	r3, #5
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
            uint16_t errorCode;
            uint32_t infoCode;

            (void)memcpy((void*)(&errorCode), (const void*)(&data[0]), sizeof(errorCode));
 80014f0:	827b      	strh	r3, [r7, #18]
            (void)memcpy((void*)(&infoCode), (const void*)(&data[4]), sizeof(infoCode));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
            em->pFunctSignalRx(ident, CO_SWAP_16(errorCode), data[2], data[3], CO_SWAP_32(infoCode));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80014fe:	8a79      	ldrh	r1, [r7, #18]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3302      	adds	r3, #2
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3303      	adds	r3, #3
 800150a:	781d      	ldrb	r5, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8b78      	ldrh	r0, [r7, #26]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	462b      	mov	r3, r5
 8001514:	47a0      	blx	r4
        }
    }
}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001520 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af04      	add	r7, sp, #16
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800152e:	2300      	movs	r3, #0
 8001530:	757b      	strb	r3, [r7, #21]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01d      	beq.n	8001574 <CO_EM_init+0x54>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01a      	beq.n	8001574 <CO_EM_init+0x54>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <CO_EM_init+0x2c>
 8001544:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d813      	bhi.n	8001574 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d010      	beq.n	8001574 <CO_EM_init+0x54>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00d      	beq.n	8001574 <CO_EM_init+0x54>
 8001558:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <CO_EM_init+0x54>
 8001560:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 8001564:	2b00      	cmp	r3, #0
 8001566:	db05      	blt.n	8001574 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <CO_EM_init+0x5a>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e0de      	b.n	8001738 <CO_EM_init+0x218>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 800157a:	2268      	movs	r2, #104	; 0x68
 800157c:	2100      	movs	r1, #0
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f01e f85c 	bl	801f63c <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800158a:	2300      	movs	r3, #0
 800158c:	2201      	movs	r2, #1
 800158e:	2100      	movs	r1, #0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f001 fbf5 	bl	8002d80 <OD_getPtr>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10c      	bne.n	80015be <CO_EM_init+0x9e>
        if (errInfo != NULL) {
 80015a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <CO_EM_init+0x98>
            *errInfo = OD_getIndex(OD_1001_errReg);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fd43 	bl	8001036 <OD_getIndex>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80015b8:	f06f 030b 	mvn.w	r3, #11
 80015bc:	e0bc      	b.n	8001738 <CO_EM_init+0x218>
    }
    *em->errorRegister = 0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015d2:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80015d4:	f107 0210 	add.w	r2, r7, #16
 80015d8:	2301      	movs	r3, #1
 80015da:	2100      	movs	r1, #0
 80015dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015de:	f7ff fd4f 	bl	8001080 <OD_get_u32>
 80015e2:	4603      	mov	r3, r0
 80015e4:	753b      	strb	r3, [r7, #20]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80015e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <CO_EM_init+0xd8>
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <CO_EM_init+0x220>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d010      	beq.n	800161a <CO_EM_init+0xfa>
        if (errInfo != NULL) {
 80015f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <CO_EM_init+0xec>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80015fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001600:	f7ff fd19 	bl	8001036 <OD_getIndex>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160a:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 800160c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <CO_EM_init+0xfa>
            return CO_ERROR_OD_PARAMETERS;
 8001614:	f06f 030b 	mvn.w	r3, #11
 8001618:	e08e      	b.n	8001738 <CO_EM_init+0x218>
        }
    }

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_CONFIGURABLE) != 0
    uint16_t producerCanId = (uint16_t)(COB_IDEmergency32 & 0x7FFU);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	b29b      	uxth	r3, r3
 800161e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001622:	82fb      	strh	r3, [r7, #22]
    em->producerEnabled = ((COB_IDEmergency32 & 0x80000000U) == 0U) && (producerCanId != 0U);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db04      	blt.n	8001634 <CO_EM_init+0x114>
 800162a:	8afb      	ldrh	r3, [r7, #22]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <CO_EM_init+0x114>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <CO_EM_init+0x116>
 8001634:	2300      	movs	r3, #0
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a3f      	ldr	r2, [pc, #252]	; (8001744 <CO_EM_init+0x224>)
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_write_1014;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <CO_EM_init+0x228>)
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3330      	adds	r3, #48	; 0x30
 8001652:	4619      	mov	r1, r3
 8001654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001656:	f7ff fcff 	bl	8001058 <OD_extension_init>
 800165a:	4603      	mov	r3, r0
 800165c:	753b      	strb	r3, [r7, #20]
    if (odRet != ODR_OK) {
 800165e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00c      	beq.n	8001680 <CO_EM_init+0x160>
        if (errInfo != NULL) {
 8001666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <CO_EM_init+0x15a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800166c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800166e:	f7ff fce2 	bl	8001036 <OD_getIndex>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001678:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800167a:	f06f 030b 	mvn.w	r3, #11
 800167e:	e05b      	b.n	8001738 <CO_EM_init+0x218>
    }
    /* following two variables are used inside OD_read_1014 and OD_write_1014 */
    em->producerCanId = producerCanId;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8afa      	ldrh	r2, [r7, #22]
 8001684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    em->CANdevTxIdx = CANdevTxIdx;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800168c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY (0x80) is stored into non-volatile
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
 8001690:	8afb      	ldrh	r3, [r7, #22]
 8001692:	2b80      	cmp	r3, #128	; 0x80
 8001694:	d105      	bne.n	80016a2 <CO_EM_init+0x182>
        producerCanId += nodeId;
 8001696:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800169a:	b29a      	uxth	r2, r3
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	4413      	add	r3, r2
 80016a0:	82fb      	strh	r3, [r7, #22]
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80016a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 80016ac:	8afa      	ldrh	r2, [r7, #22]
 80016ae:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80016b0:	2300      	movs	r3, #0
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2308      	movs	r3, #8
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f011 fba2 	bl	8012e04 <CO_CANtxBufferInit>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <CO_EM_init+0x1b4>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e031      	b.n	8001738 <CO_EM_init+0x218>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.read = OD_read_1003;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <CO_EM_init+0x22c>)
 80016de:	649a      	str	r2, [r3, #72]	; 0x48
    em->OD_1003_extension.write = OD_write_1003;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <CO_EM_init+0x230>)
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3344      	adds	r3, #68	; 0x44
 80016ea:	4619      	mov	r1, r3
 80016ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016ee:	f7ff fcb3 	bl	8001058 <OD_extension_init>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) != 0
    /* If OD entry available, make access to em->errorStatusBits */
    em->OD_statusBits_extension.object = em;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
    em->OD_statusBits_extension.read = OD_read_statusBits;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <CO_EM_init+0x234>)
 80016fc:	659a      	str	r2, [r3, #88]	; 0x58
    em->OD_statusBits_extension.write = OD_write_statusBits;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <CO_EM_init+0x238>)
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)OD_extension_init(OD_statusBits, &em->OD_statusBits_extension);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3354      	adds	r3, #84	; 0x54
 8001708:	4619      	mov	r1, r3
 800170a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800170c:	f7ff fca4 	bl	8001058 <OD_extension_init>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_STATUS_BITS */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
    em->pFunctSignalRx = NULL;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	665a      	str	r2, [r3, #100]	; 0x64
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
 8001716:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <CO_EM_init+0x23c>)
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172c:	f011 fb0c 	bl	8012d48 <CO_CANrxBufferInit>
 8001730:	4603      	mov	r3, r0
 8001732:	757b      	strb	r3, [r7, #21]
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8001734:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	7ffff800 	.word	0x7ffff800
 8001744:	080010ab 	.word	0x080010ab
 8001748:	08001135 	.word	0x08001135
 800174c:	08001285 	.word	0x08001285
 8001750:	08001361 	.word	0x08001361
 8001754:	080013c1 	.word	0x080013c1
 8001758:	0800143f 	.word	0x0800143f
 800175c:	080014bd 	.word	0x080014bd

08001760 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	8a5b      	ldrh	r3, [r3, #18]
 8001774:	83bb      	strh	r3, [r7, #28]
    if (CANerrSt != em->CANerrorStatusOld) {
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8a1b      	ldrh	r3, [r3, #16]
 800177a:	8bba      	ldrh	r2, [r7, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	f000 80a3 	beq.w	80018c8 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8a1a      	ldrh	r2, [r3, #16]
 8001786:	8bbb      	ldrh	r3, [r7, #28]
 8001788:	4053      	eors	r3, r2
 800178a:	837b      	strh	r3, [r7, #26]
        em->CANerrorStatusOld = CANerrSt;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8bba      	ldrh	r2, [r7, #28]
 8001790:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 8001792:	8b7a      	ldrh	r2, [r7, #26]
 8001794:	f240 1301 	movw	r3, #257	; 0x101
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 800179e:	8bba      	ldrh	r2, [r7, #28]
 80017a0:	f240 1301 	movw	r3, #257	; 0x101
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2201      	movs	r2, #1
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f93a 	bl	8001a34 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 80017c0:	8b7b      	ldrh	r3, [r7, #26]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80017ca:	8bbb      	ldrh	r3, [r7, #28]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f248 1320 	movw	r3, #33056	; 0x8120
 80017e4:	2207      	movs	r2, #7
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f924 	bl	8001a34 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 80017ec:	8b7b      	ldrh	r3, [r7, #26]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 80017f6:	8bbb      	ldrh	r3, [r7, #28]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4619      	mov	r1, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f248 1340 	movw	r3, #33088	; 0x8140
 8001810:	2212      	movs	r2, #18
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f90e 	bl	8001a34 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8001818:	8b7b      	ldrh	r3, [r7, #26]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8001822:	8bbb      	ldrh	r3, [r7, #28]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4619      	mov	r1, r3
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f248 1310 	movw	r3, #33040	; 0x8110
 800183c:	2214      	movs	r2, #20
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f8f8 	bl	8001a34 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8001844:	8b7b      	ldrh	r3, [r7, #26]
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 800184e:	8bbb      	ldrh	r3, [r7, #28]
 8001850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001868:	2215      	movs	r2, #21
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f8e2 	bl	8001a34 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8001870:	8b7b      	ldrh	r3, [r7, #26]
 8001872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 800187a:	8bbb      	ldrh	r3, [r7, #28]
 800187c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f248 1320 	movw	r3, #33056	; 0x8120
 8001894:	2206      	movs	r2, #6
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8cc 	bl	8001a34 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 800189c:	8b7b      	ldrh	r3, [r7, #26]
 800189e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d010      	beq.n	80018c8 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80018a6:	8bbb      	ldrh	r3, [r7, #28]
 80018a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f248 1310 	movw	r3, #33040	; 0x8110
 80018c0:	2213      	movs	r2, #19
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f8b6 	bl	8001a34 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	77fb      	strb	r3, [r7, #31]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	77fb      	strb	r3, [r7, #31]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <CO_EM_process+0x18c>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 80018ec:	7ffb      	ldrb	r3, [r7, #31]
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	77fb      	strb	r3, [r7, #31]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	7a1b      	ldrb	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <CO_EM_process+0x1a4>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800190a:	77fb      	strb	r3, [r7, #31]
    }
    *em->errorRegister = errorRegister;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	7ffa      	ldrb	r2, [r7, #31]
 8001912:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8086 	beq.w	8001a28 <CO_EM_process+0x2c8>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	7f1b      	ldrb	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f240 8083 	bls.w	8001a2c <CO_EM_process+0x2cc>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	7f9b      	ldrb	r3, [r3, #30]
 800192a:	767b      	strb	r3, [r7, #25]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d17a      	bne.n	8001a2c <CO_EM_process+0x2cc>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	7f5b      	ldrb	r3, [r3, #29]
 800193a:	7e7a      	ldrb	r2, [r7, #25]
 800193c:	429a      	cmp	r2, r3
 800193e:	d075      	beq.n	8001a2c <CO_EM_process+0x2cc>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	7e7b      	ldrb	r3, [r7, #25]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6998      	ldr	r0, [r3, #24]
 8001954:	7e7b      	ldrb	r3, [r7, #25]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4403      	add	r3, r0
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	1d58      	adds	r0, r3, #5
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	7e7b      	ldrb	r3, [r7, #25]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	2208      	movs	r2, #8
 8001970:	4619      	mov	r1, r3
 8001972:	f01d feff 	bl	801f774 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f011 fab9 	bl	8012ef8 <CO_CANsend>

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
            /* report also own emergency messages */
            if (em->pFunctSignalRx != NULL) {
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198a:	2b00      	cmp	r3, #0
 800198c:	d018      	beq.n	80019c0 <CO_EM_process+0x260>
                uint32_t errMsg = em->fifo[fifoPpPtr].msg;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	7e7b      	ldrb	r3, [r7, #25]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	617b      	str	r3, [r7, #20]
                em->pFunctSignalRx(0, CO_SWAP_16((uint16_t)errMsg), errorRegister, (uint8_t)(errMsg >> 24),
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b299      	uxth	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	0e1b      	lsrs	r3, r3, #24
 80019a8:	b2d8      	uxtb	r0, r3
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	7e7b      	ldrb	r3, [r7, #25]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
                em->pFunctSignalRx(0, CO_SWAP_16((uint16_t)errMsg), errorRegister, (uint8_t)(errMsg >> 24),
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	7ffa      	ldrb	r2, [r7, #31]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4603      	mov	r3, r0
 80019bc:	2000      	movs	r0, #0
 80019be:	47a0      	blx	r4
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 80019c0:	7e7b      	ldrb	r3, [r7, #25]
 80019c2:	3301      	adds	r3, #1
 80019c4:	767b      	strb	r3, [r7, #25]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	7f1b      	ldrb	r3, [r3, #28]
 80019ca:	7e7a      	ldrb	r2, [r7, #25]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d201      	bcs.n	80019d4 <CO_EM_process+0x274>
 80019d0:	7e7a      	ldrb	r2, [r7, #25]
 80019d2:	e000      	b.n	80019d6 <CO_EM_process+0x276>
 80019d4:	2200      	movs	r2, #0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	7fdb      	ldrb	r3, [r3, #31]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10c      	bne.n	80019fc <CO_EM_process+0x29c>
                em->fifoOverflow = 2;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2202      	movs	r2, #2
 80019e6:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	2220      	movs	r2, #32
 80019f2:	2101      	movs	r1, #1
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f81d 	bl	8001a34 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80019fa:	e017      	b.n	8001a2c <CO_EM_process+0x2cc>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	7fdb      	ldrb	r3, [r3, #31]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d113      	bne.n	8001a2c <CO_EM_process+0x2cc>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	7f9a      	ldrb	r2, [r3, #30]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7f5b      	ldrb	r3, [r3, #29]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10d      	bne.n	8001a2c <CO_EM_process+0x2cc>
                em->fifoOverflow = 0;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	2100      	movs	r1, #0
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f807 	bl	8001a34 <CO_error>
    return;
 8001a26:	e001      	b.n	8001a2c <CO_EM_process+0x2cc>
        return;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <CO_EM_process+0x2ce>
    return;
 8001a2c:	bf00      	nop
}
 8001a2e:	3724      	adds	r7, #36	; 0x24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 8001a34:	b480      	push	{r7}
 8001a36:	b08d      	sub	sp, #52	; 0x34
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	460b      	mov	r3, r1
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a6 	beq.w	8001b9e <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2201      	movs	r2, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d90a      	bls.n	8001a88 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8001a72:	2305      	movs	r3, #5
 8001a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001a7e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001a82:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8001a88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8001aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <CO_error+0x88>
            return;
 8001aae:	e079      	b.n	8001ba4 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8001ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d074      	beq.n	8001ba2 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	061a      	lsls	r2, r3, #24
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac8:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ace:	f3ef 8210 	mrs	r2, PRIMASK
 8001ad2:	617a      	str	r2, [r7, #20]
  return(result);
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
    if (setError) {
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e00b      	b.n	8001b0c <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001afe:	43db      	mvns	r3, r3
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	4013      	ands	r3, r2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	7f1b      	ldrb	r3, [r3, #28]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d93c      	bls.n	8001b8e <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	7f5b      	ldrb	r3, [r3, #29]
 8001b18:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8001b1a:	7efb      	ldrb	r3, [r7, #27]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
 8001b26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d302      	bcc.n	8001b34 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	7f9b      	ldrb	r3, [r3, #30]
 8001b38:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d103      	bne.n	8001b48 <CO_error+0x114>
            em->fifoOverflow = 1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	77da      	strb	r2, [r3, #31]
 8001b46:	e022      	b.n	8001b8e <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	7efb      	ldrb	r3, [r7, #27]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	7efb      	ldrb	r3, [r7, #27]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b6a:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	7f1b      	ldrb	r3, [r3, #28]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d207      	bcs.n	8001b8e <CO_error+0x15a>
                em->fifoCount++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f383 8810 	msr	PRIMASK, r3
}
 8001b9c:	e002      	b.n	8001ba4 <CO_error+0x170>
        return;
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <CO_error+0x170>
            return;
 8001ba2:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8001ba4:	3734      	adds	r7, #52	; 0x34
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001bba:	60fb      	str	r3, [r7, #12]
    return value;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <OD_getIndex>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <OD_getIndex+0x14>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	e000      	b.n	8001be0 <OD_getIndex+0x16>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <OD_extension_init>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <OD_extension_init+0x14>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e003      	b.n	8001c08 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001c24:	7af9      	ldrb	r1, [r7, #11]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f001 f82c 	bl	8002c8c <OD_get_value>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8001c3e:	b480      	push	{r7}
 8001c40:	b087      	sub	sp, #28
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3305      	adds	r3, #5
 8001c56:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b25a      	sxtb	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b088      	sub	sp, #32
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <OD_write_1016+0x40>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00f      	beq.n	8001cba <OD_write_1016+0x40>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	7d1b      	ldrb	r3, [r3, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	7d1a      	ldrb	r2, [r3, #20]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	7a1b      	ldrb	r3, [r3, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d805      	bhi.n	8001cba <OD_write_1016+0x40>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d102      	bne.n	8001cba <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8001cba:	2309      	movs	r3, #9
 8001cbc:	e020      	b.n	8001d00 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8001cbe:	68b8      	ldr	r0, [r7, #8]
 8001cc0:	f7ff ff75 	bl	8001bae <CO_getUint32>
 8001cc4:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	7d1b      	ldrb	r3, [r3, #20]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2d9      	uxtb	r1, r3
 8001cd8:	8abb      	ldrh	r3, [r7, #20]
 8001cda:	7dfa      	ldrb	r2, [r7, #23]
 8001cdc:	69f8      	ldr	r0, [r7, #28]
 8001cde:	f000 f8bd 	bl	8001e5c <CO_HBconsumer_initEntry>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8001ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e006      	b.n	8001d00 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fdcc 	bl	8002896 <OD_writeOriginal>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <CO_HBconsumer_init+0x2c>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <CO_HBconsumer_init+0x2c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <CO_HBconsumer_init+0x2c>
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e087      	b.n	8001e4a <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8001d3a:	2238      	movs	r2, #56	; 0x38
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f01d fc7c 	bl	801f63c <memset>
    HBcons->em = em;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d54:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001d5a:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf28      	it	cs
 8001d68:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
 8001d74:	e041      	b.n	8001dfa <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2d9      	uxtb	r1, r3
 8001d7c:	f107 0214 	add.w	r2, r7, #20
 8001d80:	2301      	movs	r3, #1
 8001d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d84:	f7ff ff46 	bl	8001c14 <OD_get_u32>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001d8c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00c      	beq.n	8001dae <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8001d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d9c:	f7ff ff15 	bl	8001bca <OD_getIndex>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001da8:	f06f 030b 	mvn.w	r3, #11
 8001dac:	e04d      	b.n	8001e4a <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8001db8:	8b7b      	ldrh	r3, [r7, #26]
 8001dba:	7f7a      	ldrb	r2, [r7, #29]
 8001dbc:	7ff9      	ldrb	r1, [r7, #31]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f84c 	bl	8001e5c <CO_HBconsumer_initEntry>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001dc8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d011      	beq.n	8001df4 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8001dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd8:	f7ff fef7 	bl	8001bca <OD_getIndex>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8001de4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001de8:	f113 0f0c 	cmn.w	r3, #12
 8001dec:	d002      	beq.n	8001df4 <CO_HBconsumer_init+0xec>
                return ret;
 8001dee:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001df2:	e02a      	b.n	8001e4a <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001df4:	7ffb      	ldrb	r3, [r7, #31]
 8001df6:	3301      	adds	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	7a1b      	ldrb	r3, [r3, #8]
 8001dfe:	7ffa      	ldrb	r2, [r7, #31]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3b8      	bcc.n	8001d76 <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <CO_HBconsumer_init+0x14c>)
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <CO_HBconsumer_init+0x150>)
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3320      	adds	r3, #32
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e1e:	f7ff fee5 	bl	8001bec <OD_extension_init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001e26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e36:	f7ff fec8 	bl	8001bca <OD_getIndex>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001e42:	f06f 030b 	mvn.w	r3, #11
 8001e46:	e000      	b.n	8001e4a <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	080027e7 	.word	0x080027e7
 8001e58:	08001c7b 	.word	0x08001c7b

08001e5c <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	70fb      	strb	r3, [r7, #3]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70bb      	strb	r3, [r7, #2]
 8001e72:	4613      	mov	r3, r2
 8001e74:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <CO_HBconsumer_initEntry+0x30>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a1b      	ldrb	r3, [r3, #8]
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d302      	bcc.n	8001e92 <CO_HBconsumer_initEntry+0x36>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	e08d      	b.n	8001fae <CO_HBconsumer_initEntry+0x152>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8001e92:	883b      	ldrh	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d030      	beq.n	8001efa <CO_HBconsumer_initEntry+0x9e>
 8001e98:	78bb      	ldrb	r3, [r7, #2]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d02d      	beq.n	8001efa <CO_HBconsumer_initEntry+0x9e>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ea4:	e023      	b.n	8001eee <CO_HBconsumer_initEntry+0x92>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f107 040c 	add.w	r4, r7, #12
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	6023      	str	r3, [r4, #0]
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d009      	beq.n	8001ee4 <CO_HBconsumer_initEntry+0x88>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <CO_HBconsumer_initEntry+0x88>
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	78ba      	ldrb	r2, [r7, #2]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d102      	bne.n	8001ee4 <CO_HBconsumer_initEntry+0x88>
                ret = CO_ERROR_OD_PARAMETERS;
 8001ede:	23f4      	movs	r3, #244	; 0xf4
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7a1b      	ldrb	r3, [r3, #8]
 8001ef2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3d5      	bcc.n	8001ea6 <CO_HBconsumer_initEntry+0x4a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001efa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d153      	bne.n	8001faa <CO_HBconsumer_initEntry+0x14e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	623b      	str	r3, [r7, #32]
        monitoredNode->nodeId = nodeId;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	78ba      	ldrb	r2, [r7, #2]
 8001f18:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001f1a:	883b      	ldrh	r3, [r7, #0]
 8001f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f20:	fb03 f202 	mul.w	r2, r3, r2
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	741a      	strb	r2, [r3, #16]
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <CO_HBconsumer_initEntry+0x102>
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <CO_HBconsumer_initEntry+0x102>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001f54:	84bb      	strh	r3, [r7, #36]	; 0x24
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	709a      	strb	r2, [r3, #2]
 8001f5c:	e007      	b.n	8001f6e <CO_HBconsumer_initEntry+0x112>
        } else {
            COB_ID = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	84bb      	strh	r3, [r7, #36]	; 0x24
            monitoredNode->time_us = 0;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6998      	ldr	r0, [r3, #24]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8b9a      	ldrh	r2, [r3, #28]
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b29c      	uxth	r4, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001f8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f90:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <CO_HBconsumer_initEntry+0x15c>)
 8001f92:	9102      	str	r1, [sp, #8]
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2300      	movs	r3, #0
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	f010 fed2 	bl	8012d48 <CO_CANrxBufferInit>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return ret;
 8001faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08001c3f 	.word	0x08001c3f

08001fbc <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b08f      	sub	sp, #60	; 0x3c
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 809a 	beq.w	800210e <CO_HBconsumer_process+0x152>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8095 	beq.w	800210e <CO_HBconsumer_process+0x152>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fea:	e088      	b.n	80020fe <CO_HBconsumer_process+0x142>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d072      	beq.n	80020f2 <CO_HBconsumer_process+0x136>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <CO_HBconsumer_process+0x9e>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <CO_HBconsumer_process+0x88>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	789b      	ldrb	r3, [r3, #2]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d10a      	bne.n	800203c <CO_HBconsumer_process+0x80>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	f248 1330 	movw	r3, #33072	; 0x8130
 8002034:	221c      	movs	r2, #28
 8002036:	2101      	movs	r1, #1
 8002038:	f7ff fcfc 	bl	8001a34 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2201      	movs	r2, #1
 8002040:	709a      	strb	r2, [r3, #2]
 8002042:	e007      	b.n	8002054 <CO_HBconsumer_process+0x98>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2202      	movs	r2, #2
 8002048:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d11c      	bne.n	800209c <CO_HBconsumer_process+0xe0>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	441a      	add	r2, r3
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	429a      	cmp	r2, r3
 8002078:	d310      	bcc.n	800209c <CO_HBconsumer_process+0xe0>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f248 1330 	movw	r3, #33072	; 0x8130
 8002088:	221b      	movs	r2, #27
 800208a:	2101      	movs	r1, #1
 800208c:	f7ff fcd2 	bl	8001a34 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2203      	movs	r2, #3
 800209a:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d001      	beq.n	80020a8 <CO_HBconsumer_process+0xec>
                allMonitoredActiveCurrent = false;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d001      	beq.n	80020b6 <CO_HBconsumer_process+0xfa>
                allMonitoredOperationalCurrent = false;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
            }
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            /* Verify, if NMT state of monitored node changed */
            if (monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d016      	beq.n	80020f4 <CO_HBconsumer_process+0x138>
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0
                if (HBcons->pFunctSignalNmtChanged != NULL) {
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <CO_HBconsumer_process+0x12a>
                    HBcons->pFunctSignalNmtChanged(monitoredNode->nodeId, i, monitoredNode->NMTstate,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	7818      	ldrb	r0, [r3, #0]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80020e4:	47a0      	blx	r4
                if (monitoredNode->pFunctSignalNmtChanged != NULL) {
                    monitoredNode->pFunctSignalNmtChanged(monitoredNode->nodeId, i, monitoredNode->NMTstate,
                                                          monitoredNode->pFunctSignalObjectNmtChanged);
#endif
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	741a      	strb	r2, [r3, #16]
 80020f0:	e000      	b.n	80020f4 <CO_HBconsumer_process+0x138>
                continue;
 80020f2:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	3301      	adds	r3, #1
 80020fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	7a1b      	ldrb	r3, [r3, #8]
 8002102:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002106:	429a      	cmp	r2, r3
 8002108:	f4ff af70 	bcc.w	8001fec <CO_HBconsumer_process+0x30>
 800210c:	e02e      	b.n	800216c <CO_HBconsumer_process+0x1b0>
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <CO_HBconsumer_process+0x160>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d027      	beq.n	800216c <CO_HBconsumer_process+0x1b0>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
 8002120:	e01b      	b.n	800215a <CO_HBconsumer_process+0x19e>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	7ffa      	ldrb	r2, [r7, #31]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	741a      	strb	r2, [r3, #16]
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	789b      	ldrb	r3, [r3, #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <CO_HBconsumer_process+0x198>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2201      	movs	r2, #1
 8002152:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8002154:	7ffb      	ldrb	r3, [r7, #31]
 8002156:	3301      	adds	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	7a1b      	ldrb	r3, [r3, #8]
 800215e:	7ffa      	ldrb	r2, [r7, #31]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3de      	bcc.n	8002122 <CO_HBconsumer_process+0x166>
            }
        }
        allMonitoredActiveCurrent = false;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d114      	bne.n	800219e <CO_HBconsumer_process+0x1e2>
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d011      	beq.n	800219e <CO_HBconsumer_process+0x1e2>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	221b      	movs	r2, #27
 8002186:	2100      	movs	r1, #0
 8002188:	f7ff fc54 	bl	8001a34 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	221c      	movs	r2, #28
 8002198:	2100      	movs	r1, #0
 800219a:	f7ff fc4b 	bl	8001a34 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a2:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a8:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	bf00      	nop
 80021b2:	3734      	adds	r7, #52	; 0x34
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd90      	pop	{r4, r7, pc}

080021b8 <CO_getUint16>:
CO_getUint16(const void* buf) {
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 80021c6:	81fb      	strh	r3, [r7, #14]
    return value;
 80021c8:	89fb      	ldrh	r3, [r7, #14]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <OD_getIndex>:
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <OD_getIndex+0x14>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	e000      	b.n	80021ec <OD_getIndex+0x16>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <OD_extension_init>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <OD_extension_init+0x14>
 8002208:	2305      	movs	r3, #5
 800220a:	e003      	b.n	8002214 <OD_extension_init+0x1c>
    entry->extension = extension;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002230:	7af9      	ldrb	r1, [r7, #11]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2302      	movs	r3, #2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fd26 	bl	8002c8c <OD_get_value>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	2201      	movs	r2, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d807      	bhi.n	8002286 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	5cd2      	ldrb	r2, [r2, r3]
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	4013      	ands	r3, r2
 8002280:	b2db      	uxtb	r3, r3
               : false;
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <CO_isError+0x40>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <CO_isError+0x42>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <CO_getErrorRegister+0x1e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <CO_getErrorRegister+0x1e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	e000      	b.n	80022b8 <CO_getErrorRegister+0x20>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	3305      	adds	r3, #5
 80022d8:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3301      	adds	r3, #1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d10a      	bne.n	8002308 <CO_NMT_receive+0x44>
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <CO_NMT_receive+0x3e>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	7bba      	ldrb	r2, [r7, #14]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d102      	bne.n	8002308 <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <OD_write_1017+0x2e>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	7d1b      	ldrb	r3, [r3, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <OD_write_1017+0x2e>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <OD_write_1017+0x2e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d102      	bne.n	8002342 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8002342:	2309      	movs	r3, #9
 8002344:	e017      	b.n	8002376 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	f7ff ff33 	bl	80021b8 <CO_getUint16>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa91 	bl	8002896 <OD_writeOriginal>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af04      	add	r7, sp, #16
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <CO_NMT_init+0x36>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <CO_NMT_init+0x36>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <CO_NMT_init+0x36>
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <CO_NMT_init+0x36>
        || (HB_CANdevTx == NULL)
 80023aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
 80023b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <CO_NMT_init+0x3c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e0b0      	b.n	800251e <CO_NMT_init+0x19e>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 80023bc:	2238      	movs	r2, #56	; 0x38
 80023be:	2100      	movs	r1, #0
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f01d f93b 	bl	801f63c <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8c3a      	ldrh	r2, [r7, #32]
 80023dc:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 80023e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80023f2:	f107 0214 	add.w	r2, r7, #20
 80023f6:	2301      	movs	r3, #1
 80023f8:	2100      	movs	r1, #0
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	f7ff ff10 	bl	8002220 <OD_get_u16>
 8002400:	4603      	mov	r3, r0
 8002402:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002404:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <CO_NMT_init+0xa6>
        if (errInfo != NULL) {
 800240c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <CO_NMT_init+0xa0>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f7ff fedf 	bl	80021d6 <OD_getIndex>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002420:	f06f 030b 	mvn.w	r3, #11
 8002424:	e07b      	b.n	800251e <CO_NMT_init+0x19e>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8002426:	8abb      	ldrh	r3, [r7, #20]
 8002428:	461a      	mov	r2, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fb03 f202 	mul.w	r2, r3, r2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <CO_NMT_init+0x1a8>)
 8002440:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a39      	ldr	r2, [pc, #228]	; (800252c <CO_NMT_init+0x1ac>)
 8002446:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3310      	adds	r3, #16
 800244c:	4619      	mov	r1, r3
 800244e:	68b8      	ldr	r0, [r7, #8]
 8002450:	f7ff fed2 	bl	80021f8 <OD_extension_init>
 8002454:	4603      	mov	r3, r0
 8002456:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002458:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <CO_NMT_init+0xfa>
        if (errInfo != NULL) {
 8002460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <CO_NMT_init+0xf4>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f7ff feb5 	bl	80021d6 <OD_getIndex>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002472:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002474:	f06f 030b 	mvn.w	r3, #11
 8002478:	e051      	b.n	800251e <CO_NMT_init+0x19e>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d903      	bls.n	800248e <CO_NMT_init+0x10e>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 800248e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002490:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <CO_NMT_init+0x1b0>)
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80024a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024a4:	f010 fc50 	bl	8012d48 <CO_CANrxBufferInit>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 80024ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <CO_NMT_init+0x13a>
        return ret;
 80024b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b8:	e031      	b.n	800251e <CO_NMT_init+0x19e>
    }

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
    /* configure NMT CAN transmission */
    NMT->NMT_CANdevTx = NMT_CANdevTx;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->NMT_TXbuff = CO_CANtxBufferInit(NMT_CANdevTx, NMT_txIdx, CANidTxNMT, false, 2, false);
 80024c0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80024c2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	2302      	movs	r3, #2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024d0:	f010 fc98 	bl	8012e04 <CO_CANtxBufferInit>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->NMT_TXbuff == NULL) {
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e01a      	b.n	800251e <CO_NMT_init+0x19e>
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 80024ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80024f2:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80024f6:	2300      	movs	r3, #0
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2301      	movs	r3, #1
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002502:	f010 fc7f 	bl	8012e04 <CO_CANtxBufferInit>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
    if (NMT->HB_TXbuff == NULL) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <CO_NMT_init+0x19a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	e001      	b.n	800251e <CO_NMT_init+0x19e>
    }

    return ret;
 800251a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	080027e7 	.word	0x080027e7
 800252c:	08002315 	.word	0x08002315
 8002530:	080022c5 	.word	0x080022c5

08002534 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8002550:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d204      	bcs.n	8002574 <CO_NMT_process+0x40>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	e000      	b.n	8002576 <CO_NMT_process+0x42>
 8002574:	2300      	movs	r3, #0
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10e      	bne.n	800259e <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <CO_NMT_process+0x6a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002596:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 800259a:	429a      	cmp	r2, r3
 800259c:	d020      	beq.n	80025e0 <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80025a6:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f010 fca0 	bl	8012ef8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80025b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	889b      	ldrh	r3, [r3, #4]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <CO_NMT_process+0x9c>
 80025cc:	2305      	movs	r3, #5
 80025ce:	e000      	b.n	80025d2 <CO_NMT_process+0x9e>
 80025d0:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	e003      	b.n	80025e0 <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80025e6:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	789b      	ldrb	r3, [r3, #2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02a      	beq.n	8002646 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	789b      	ldrb	r3, [r3, #2]
 80025f4:	2b82      	cmp	r3, #130	; 0x82
 80025f6:	d01e      	beq.n	8002636 <CO_NMT_process+0x102>
 80025f8:	2b82      	cmp	r3, #130	; 0x82
 80025fa:	dc20      	bgt.n	800263e <CO_NMT_process+0x10a>
 80025fc:	2b81      	cmp	r3, #129	; 0x81
 80025fe:	d016      	beq.n	800262e <CO_NMT_process+0xfa>
 8002600:	2b81      	cmp	r3, #129	; 0x81
 8002602:	dc1c      	bgt.n	800263e <CO_NMT_process+0x10a>
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d00e      	beq.n	8002626 <CO_NMT_process+0xf2>
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	dc18      	bgt.n	800263e <CO_NMT_process+0x10a>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d002      	beq.n	8002616 <CO_NMT_process+0xe2>
 8002610:	2b02      	cmp	r3, #2
 8002612:	d004      	beq.n	800261e <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8002614:	e013      	b.n	800263e <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8002616:	2305      	movs	r3, #5
 8002618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800261c:	e010      	b.n	8002640 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800261e:	2304      	movs	r3, #4
 8002620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002624:	e00c      	b.n	8002640 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8002626:	237f      	movs	r3, #127	; 0x7f
 8002628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800262c:	e008      	b.n	8002640 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800262e:	2302      	movs	r3, #2
 8002630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002634:	e004      	b.n	8002640 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800263c:	e000      	b.n	8002640 <CO_NMT_process+0x10c>
                break;
 800263e:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	889b      	ldrh	r3, [r3, #4]
 800264a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2112      	movs	r1, #18
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fdf2 	bl	800224a <CO_isError>
 8002666:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	211b      	movs	r1, #27
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdeb 	bl	800224a <CO_isError>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	211c      	movs	r1, #28
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fde4 	bl	800224a <CO_isError>
 8002682:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <CO_NMT_process+0x16c>
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <CO_NMT_process+0x168>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <CO_NMT_process+0x168>
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <CO_NMT_process+0x16c>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <CO_NMT_process+0x16e>
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	889b      	ldrh	r3, [r3, #4]
 80026a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fdeb 	bl	8002298 <CO_getErrorRegister>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	889b      	ldrh	r3, [r3, #4]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <CO_NMT_process+0x1b8>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <CO_NMT_process+0x1b8>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <CO_NMT_process+0x1ba>
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 80026f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d111      	bne.n	800271c <CO_NMT_process+0x1e8>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <CO_NMT_process+0x1d0>
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	889b      	ldrh	r3, [r3, #4]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <CO_NMT_process+0x1e0>
 8002710:	2304      	movs	r3, #4
 8002712:	e000      	b.n	8002716 <CO_NMT_process+0x1e2>
 8002714:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800271a:	e011      	b.n	8002740 <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	889b      	ldrh	r3, [r3, #4]
 8002720:	b21b      	sxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	da0c      	bge.n	8002740 <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8002726:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800272a:	2b7f      	cmp	r3, #127	; 0x7f
 800272c:	d108      	bne.n	8002740 <CO_NMT_process+0x20c>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <CO_NMT_process+0x20c>
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800273a:	2305      	movs	r3, #5
 800273c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_CALLBACK_CHANGE) != 0
    /* Notify operating state change */
    if ((NMT->operatingStatePrev != NMTstateCpy) || NNTinit) {
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002746:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 800274a:	429a      	cmp	r2, r3
 800274c:	d102      	bne.n	8002754 <CO_NMT_process+0x220>
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <CO_NMT_process+0x234>
        if (NMT->pFunctNMT != NULL) {
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <CO_NMT_process+0x234>
            NMT->pFunctNMT(NMTstateCpy);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800276e:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <CO_NMT_process+0x24a>
        *NMTstate = NMTstateCpy;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800277c:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 800277e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8002782:	4618      	mov	r0, r3
 8002784:	3738      	adds	r7, #56	; 0x38
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <CO_NMT_sendCommand>:

#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
CO_ReturnError_t
CO_NMT_sendCommand(CO_NMT_t* NMT, CO_NMT_command_t command, uint8_t nodeID) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
 8002796:	4613      	mov	r3, r2
 8002798:	70bb      	strb	r3, [r7, #2]
    /* verify arguments */
    if (NMT == NULL) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <CO_NMT_sendCommand+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	e01b      	b.n	80027de <CO_NMT_sendCommand+0x54>
    }

    /* Apply NMT command also to this node, if set so. */
    if ((nodeID == 0U) || (nodeID == NMT->nodeId)) {
 80027a6:	78bb      	ldrb	r3, [r7, #2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <CO_NMT_sendCommand+0x2c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	78db      	ldrb	r3, [r3, #3]
 80027b0:	78ba      	ldrb	r2, [r7, #2]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d102      	bne.n	80027bc <CO_NMT_sendCommand+0x32>
        NMT->internalCommand = command;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	709a      	strb	r2, [r3, #2]
    }

    /* Send NMT master message. */
    NMT->NMT_TXbuff->data[0] = (uint8_t)command;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	715a      	strb	r2, [r3, #5]
    NMT->NMT_TXbuff->data[1] = nodeID;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	78ba      	ldrb	r2, [r7, #2]
 80027ca:	719a      	strb	r2, [r3, #6]
    return CO_CANsend(NMT->NMT_CANdevTx, NMT->NMT_TXbuff);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f010 fb8e 	bl	8012ef8 <CO_CANsend>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b088      	sub	sp, #32
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <OD_readOriginal+0x20>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <OD_readOriginal+0x20>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8002806:	2309      	movs	r3, #9
 8002808:	e041      	b.n	800288e <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800281c:	230e      	movs	r3, #14
 800281e:	e036      	b.n	800288e <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <OD_readOriginal+0x4e>
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d922      	bls.n	800287a <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	429a      	cmp	r2, r3
 800283c:	d801      	bhi.n	8002842 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800283e:	2309      	movs	r3, #9
 8002840:	e025      	b.n	800288e <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90a      	bls.n	8002874 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	441a      	add	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800286e:	23ff      	movs	r3, #255	; 0xff
 8002870:	75fb      	strb	r3, [r7, #23]
 8002872:	e002      	b.n	800287a <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f01c ff78 	bl	801f774 <memcpy>

    *countRead = dataLenToCopy;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	601a      	str	r2, [r3, #0]
    return returnCode;
 800288a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002896:	b580      	push	{r7, lr}
 8002898:	b088      	sub	sp, #32
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <OD_writeOriginal+0x20>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <OD_writeOriginal+0x20>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80028b6:	2309      	movs	r3, #9
 80028b8:	e056      	b.n	8002968 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 80028d0:	230e      	movs	r3, #14
 80028d2:	e049      	b.n	8002968 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <OD_writeOriginal+0x52>
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d924      	bls.n	8002932 <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d801      	bhi.n	80028f6 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80028f2:	2309      	movs	r3, #9
 80028f4:	e038      	b.n	8002968 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d90a      	bls.n	800292c <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002926:	23ff      	movs	r3, #255	; 0xff
 8002928:	74fb      	strb	r3, [r7, #19]
 800292a:	e002      	b.n	8002932 <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d201      	bcs.n	800293e <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 800293a:	230c      	movs	r3, #12
 800293c:	e014      	b.n	8002968 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	429a      	cmp	r2, r3
 8002944:	d80f      	bhi.n	8002966 <OD_writeOriginal+0xd0>
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d80b      	bhi.n	8002966 <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f01c ff0e 	bl	801f774 <memcpy>
 8002958:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002960:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002964:	e000      	b.n	8002968 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 8002966:	2309      	movs	r3, #9
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 800297e:	2302      	movs	r3, #2
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 800299a:	2302      	movs	r3, #2
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
if ((od == NULL) || (od->size == 0U)) { return NULL; }
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <OD_find+0x1a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <OD_find+0x1e>
 80029c2:	2300      	movs	r3, #0
 80029c4:	e046      	b.n	8002a54 <OD_find+0xac>

uint16_t min = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	82fb      	strh	r3, [r7, #22]
uint16_t max = od->size - 1U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
while (min < max)
 80029d2:	e026      	b.n	8002a22 <OD_find+0x7a>
{
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80029d4:	8afa      	ldrh	r2, [r7, #22]
 80029d6:	8abb      	ldrh	r3, [r7, #20]
 80029d8:	4413      	add	r3, r2
 80029da:	105b      	asrs	r3, r3, #1
 80029dc:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	89fa      	ldrh	r2, [r7, #14]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) { return entry; }
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	887a      	ldrh	r2, [r7, #2]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d101      	bne.n	80029fe <OD_find+0x56>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	e02a      	b.n	8002a54 <OD_find+0xac>

        if (index <  entry->index)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d209      	bcs.n	8002a1c <OD_find+0x74>
			{
			  max = (cur > 0U) ? (cur - 1U) : cur;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <OD_find+0x6e>
 8002a0e:	89fb      	ldrh	r3, [r7, #14]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	e000      	b.n	8002a18 <OD_find+0x70>
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	82bb      	strh	r3, [r7, #20]
 8002a1a:	e002      	b.n	8002a22 <OD_find+0x7a>
			} else { min = cur + 1U;}
 8002a1c:	89fb      	ldrh	r3, [r7, #14]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	82fb      	strh	r3, [r7, #22]
while (min < max)
 8002a22:	8afa      	ldrh	r2, [r7, #22]
 8002a24:	8abb      	ldrh	r3, [r7, #20]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3d4      	bcc.n	80029d4 <OD_find+0x2c>
}/////////////////////////////////////while (min < max)

if (min == max)
 8002a2a:	8afa      	ldrh	r2, [r7, #22]
 8002a2c:	8abb      	ldrh	r3, [r7, #20]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10f      	bne.n	8002a52 <OD_find+0xaa>
    {
    OD_entry_t* entry = &od->list[min];
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	8afa      	ldrh	r2, [r7, #22]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	613b      	str	r3, [r7, #16]
    if (index == entry->index) {return entry; }
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d101      	bne.n	8002a52 <OD_find+0xaa>
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	e000      	b.n	8002a54 <OD_find+0xac>
    }

return NULL; /* entry does not exist in OD */
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <OD_getSub>:
ODR_t  ///Return code from OD access function.
OD_getSub (	const OD_entry_t*	entry,
			uint8_t 			subIndex,
			OD_IO_t*			io,
			bool_t				odOrig )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08d      	sub	sp, #52	; 0x34
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <OD_getSub+0x1e>
    	|| entry->odObject == NULL)  { return ODR_IDX_NOT_EXIST; }
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <OD_getSub+0x22>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e0d7      	b.n	8002c32 <OD_getSub+0x1d2>

    if ( io == NULL ) {  return ODR_DEV_INCOMPAT; }
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <OD_getSub+0x2c>
 8002a88:	2309      	movs	r3, #9
 8002a8a:	e0d2      	b.n	8002c32 <OD_getSub+0x1d2>

    OD_stream_t* stream = &io->stream;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d051      	beq.n	8002b40 <OD_getSub+0xe0>
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	f300 808d 	bgt.w	8002bbc <OD_getSub+0x15c>
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d002      	beq.n	8002aac <OD_getSub+0x4c>
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d015      	beq.n	8002ad6 <OD_getSub+0x76>
 8002aaa:	e087      	b.n	8002bbc <OD_getSub+0x15c>
    {
     case ODT_VAR: {
            		if (subIndex > 0U) {return ODR_SUB_NOT_EXIST;}
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <OD_getSub+0x56>
 8002ab2:	230e      	movs	r3, #14
 8002ab4:	e0bd      	b.n	8002c32 <OD_getSub+0x1d2>
            		CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	617b      	str	r3, [r7, #20]

					stream->attribute  = odo->attribute;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	791a      	ldrb	r2, [r3, #4]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	601a      	str	r2, [r3, #0]
					stream->dataLength = odo->dataLength;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	609a      	str	r2, [r3, #8]
					break;}
 8002ad4:	e074      	b.n	8002bc0 <OD_getSub+0x160>

	case ODT_ARR: {
            		if (subIndex >= entry->subEntriesCount) { return ODR_SUB_NOT_EXIST; }
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	789b      	ldrb	r3, [r3, #2]
 8002ada:	7afa      	ldrb	r2, [r7, #11]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d301      	bcc.n	8002ae4 <OD_getSub+0x84>
 8002ae0:	230e      	movs	r3, #14
 8002ae2:	e0a6      	b.n	8002c32 <OD_getSub+0x1d2>
           			CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61fb      	str	r3, [r7, #28]

					if (subIndex == 0U)
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <OD_getSub+0xa8>
					{
					stream->attribute  = odo->attribute0;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	7a1a      	ldrb	r2, [r3, #8]
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig0;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	601a      	str	r2, [r3, #0]
					stream->dataLength = 1;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	2201      	movs	r2, #1
 8002b04:	609a      	str	r2, [r3, #8]
							stream->attribute  = odo->attribute;
							uint8_t* ptr       = odo->dataOrig;
							stream->dataOrig   = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
							stream->dataLength = odo->dataElementLength;
							}
					break;}
 8002b06:	e05b      	b.n	8002bc0 <OD_getSub+0x160>
							stream->attribute  = odo->attribute;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	7a5a      	ldrb	r2, [r3, #9]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	741a      	strb	r2, [r3, #16]
							uint8_t* ptr       = odo->dataOrig;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	61bb      	str	r3, [r7, #24]
							stream->dataOrig   = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <OD_getSub+0xd0>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	7afa      	ldrb	r2, [r7, #11]
 8002b22:	3a01      	subs	r2, #1
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	e000      	b.n	8002b32 <OD_getSub+0xd2>
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	6013      	str	r3, [r2, #0]
							stream->dataLength = odo->dataElementLength;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	609a      	str	r2, [r3, #8]
					break;}
 8002b3e:	e03f      	b.n	8002bc0 <OD_getSub+0x160>

	case ODT_REC: {
				   CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	623b      	str	r3, [r7, #32]
				   CO_PROGMEM OD_obj_record_t* odo    = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
				   for (uint8_t i = 0; i < entry->subEntriesCount; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b50:	e01c      	b.n	8002b8c <OD_getSub+0x12c>
				   	   {
						if (odoArr[i].subIndex == subIndex) {odo = &odoArr[i];break;}
 8002b52:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	4413      	add	r3, r2
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	7afa      	ldrb	r2, [r7, #11]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10a      	bne.n	8002b82 <OD_getSub+0x122>
 8002b6c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b80:	e00a      	b.n	8002b98 <OD_getSub+0x138>
				   for (uint8_t i = 0; i < entry->subEntriesCount; i++)
 8002b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b86:	3301      	adds	r3, #1
 8002b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	789b      	ldrb	r3, [r3, #2]
 8002b90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3dc      	bcc.n	8002b52 <OD_getSub+0xf2>
					   }
					if (odo == NULL) {return ODR_SUB_NOT_EXIST;}
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <OD_getSub+0x142>
 8002b9e:	230e      	movs	r3, #14
 8002ba0:	e047      	b.n	8002c32 <OD_getSub+0x1d2>
					stream->attribute  = odo->attribute;
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	795a      	ldrb	r2, [r3, #5]
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	741a      	strb	r2, [r3, #16]
					stream->dataOrig   = odo->dataOrig;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	601a      	str	r2, [r3, #0]
					stream->dataLength = odo->dataLength;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	609a      	str	r2, [r3, #8]
					break;}
 8002bba:	e001      	b.n	8002bc0 <OD_getSub+0x160>

        default:  { return ODR_DEV_INCOMPAT; break; }
 8002bbc:	2309      	movs	r3, #9
 8002bbe:	e038      	b.n	8002c32 <OD_getSub+0x1d2>




    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <OD_getSub+0x16e>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <OD_getSub+0x182>
    {
        io->read 		= OD_readOriginal;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <OD_getSub+0x1e0>)
 8002bd2:	619a      	str	r2, [r3, #24]
        io->write 		= OD_writeOriginal;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <OD_getSub+0x1e4>)
 8002bd8:	61da      	str	r2, [r3, #28]
        stream->object 	= NULL;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	e01c      	b.n	8002c1c <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
         io->read       = (entry->extension->read  != NULL) ? entry->extension->read  : OD_readDisabled;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <OD_getSub+0x194>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	e000      	b.n	8002bf6 <OD_getSub+0x196>
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <OD_getSub+0x1e8>)
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6193      	str	r3, [r2, #24]
         io->write      = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <OD_getSub+0x1ac>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	e000      	b.n	8002c0e <OD_getSub+0x1ae>
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <OD_getSub+0x1ec>)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	61d3      	str	r3, [r2, #28]
         stream->object =  entry->extension->object;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	605a      	str	r2, [r3, #4]
         }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	7afa      	ldrb	r2, [r7, #11]
 8002c2e:	751a      	strb	r2, [r3, #20]
    return ODR_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3734      	adds	r7, #52	; 0x34
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	080027e7 	.word	0x080027e7
 8002c44:	08002897 	.word	0x08002897
 8002c48:	08002971 	.word	0x08002971
 8002c4c:	0800298d 	.word	0x0800298d

08002c50 <OD_getSDOabCode>:


uint32_t
OD_getSDOabCode(ODR_t returnCode)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db03      	blt.n	8002c6a <OD_getSDOabCode+0x1a>
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b19      	cmp	r3, #25
 8002c68:	dd02      	ble.n	8002c70 <OD_getSDOabCode+0x20>
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <OD_getSDOabCode+0x38>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	e004      	b.n	8002c7a <OD_getSDOabCode+0x2a>
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <OD_getSDOabCode+0x38>)
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	0802217c 	.word	0x0802217c

08002c8c <OD_get_value>:
OD_get_value (	const OD_entry_t* 	entry,
				uint8_t 			subIndex,
				void* 				val,
				OD_size_t 			len,
				bool_t 				odOrig )
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b091      	sub	sp, #68	; 0x44
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) { return ODR_DEV_INCOMPAT; }
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <OD_get_value+0x1a>
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	e02b      	b.n	8002cfe <OD_get_value+0x72>

    OD_IO_t io = {NULL};
 8002ca6:	f107 0318 	add.w	r3, r7, #24
 8002caa:	2220      	movs	r2, #32
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f01c fcc4 	bl	801f63c <memset>
    OD_stream_t* stream  = &io.stream;
 8002cb4:	f107 0318 	add.w	r3, r7, #24
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t    countRd = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
    ODR_t 		 ret     = OD_getSub(entry, subIndex, &io, odOrig);
 8002cbe:	f107 0218 	add.w	r2, r7, #24
 8002cc2:	7af9      	ldrb	r1, [r7, #11]
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff feca 	bl	8002a60 <OD_getSub>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) { return ret; }
 8002cd2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <OD_get_value+0x54>
 8002cda:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002cde:	e00e      	b.n	8002cfe <OD_get_value+0x72>

    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <OD_get_value+0x62>
 8002cea:	230b      	movs	r3, #11
 8002cec:	e007      	b.n	8002cfe <OD_get_value+0x72>

    return io.read(stream, val, len, &countRd);
 8002cee:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cfa:	47a0      	blx	r4
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3744      	adds	r7, #68	; 0x44
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}

08002d06 <OD_set_value>:
			const OD_entry_t*	entry,
			uint8_t 			subIndex,
			void* 				val,
			OD_size_t 			len,
			bool_t 				odOrig )
{
 8002d06:	b590      	push	{r4, r7, lr}
 8002d08:	b091      	sub	sp, #68	; 0x44
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	460b      	mov	r3, r1
 8002d14:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {return ODR_DEV_INCOMPAT; }
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <OD_set_value+0x1a>
 8002d1c:	2309      	movs	r3, #9
 8002d1e:	e02b      	b.n	8002d78 <OD_set_value+0x72>
    OD_IO_t io = {NULL};
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	2220      	movs	r2, #32
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f01c fc87 	bl	801f63c <memset>
    OD_stream_t* stream = &io.stream;
 8002d2e:	f107 0318 	add.w	r3, r7, #24
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002d38:	f107 0218 	add.w	r2, r7, #24
 8002d3c:	7af9      	ldrb	r1, [r7, #11]
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe8d 	bl	8002a60 <OD_getSub>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {  return ret;  }
 8002d4c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <OD_set_value+0x54>
 8002d54:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002d58:	e00e      	b.n	8002d78 <OD_set_value+0x72>

    if (stream->dataLength != len) {  return ODR_TYPE_MISMATCH;  }
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <OD_set_value+0x62>
 8002d64:	230b      	movs	r3, #11
 8002d66:	e007      	b.n	8002d78 <OD_set_value+0x72>

    return io.write(stream, val, len, &countWritten);
 8002d68:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d74:	47a0      	blx	r4
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3744      	adds	r7, #68	; 0x44
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <OD_getPtr>:



void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8002d96:	f107 0210 	add.w	r2, r7, #16
 8002d9a:	7af9      	ldrb	r1, [r7, #11]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fe5e 	bl	8002a60 <OD_getSub>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK)
 8002daa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <OD_getPtr+0x60>
    {
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U))
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <OD_getPtr+0x42>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <OD_getPtr+0x4a>
        {
         errCopy = ODR_DEV_INCOMPAT;
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002dc8:	e00a      	b.n	8002de0 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <OD_getPtr+0x60>
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d002      	beq.n	8002de0 <OD_getPtr+0x60>
        			{
            		errCopy = ODR_TYPE_MISMATCH;
 8002dda:	230b      	movs	r3, #11
 8002ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        			} else {} /* MISRA C 2004 14.10 */

    }

    if (err != NULL) { *err = errCopy; }
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <OD_getPtr+0x6e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002dec:	701a      	strb	r2, [r3, #0]

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8002dee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <OD_getPtr+0x7c>
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	e000      	b.n	8002dfe <OD_getPtr+0x7e>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3738      	adds	r7, #56	; 0x38
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002e12:	73fb      	strb	r3, [r7, #15]
    return value;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8002e30:	81fb      	strh	r3, [r7, #14]
    return value;
 8002e32:	89fb      	ldrh	r3, [r7, #14]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002e4c:	60fb      	str	r3, [r7, #12]
    return value;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002e6c:	2304      	movs	r3, #4
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <OD_getIndex>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <OD_getIndex+0x14>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	e000      	b.n	8002e90 <OD_getIndex+0x16>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <OD_extension_init>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <OD_extension_init+0x14>
 8002eac:	2305      	movs	r3, #5
 8002eae:	e003      	b.n	8002eb8 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002ed4:	7af9      	ldrb	r1, [r7, #11]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2301      	movs	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fed4 	bl	8002c8c <OD_get_value>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	460b      	mov	r3, r1
 8002efc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002efe:	7af9      	ldrb	r1, [r7, #11]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2302      	movs	r3, #2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff febf 	bl	8002c8c <OD_get_value>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002f28:	7af9      	ldrb	r1, [r7, #11]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2304      	movs	r3, #4
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff feaa 	bl	8002c8c <OD_get_value>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <OD_write_dummy+0x1a>
        *countWritten = count;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <OD_read_dummy+0x20>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <OD_read_dummy+0x20>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002f8a:	2309      	movs	r3, #9
 8002f8c:	e010      	b.n	8002fb0 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d902      	bls.n	8002f9e <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	68b8      	ldr	r0, [r7, #8]
 8002fa4:	f01c fb4a 	bl	801f63c <memset>

    *countRead = count;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b092      	sub	sp, #72	; 0x48
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002fde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	015b      	lsls	r3, r3, #5
 8002fec:	3310      	adds	r3, #16
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d901      	bls.n	8003000 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	e090      	b.n	8003122 <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8003000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003004:	2b1f      	cmp	r3, #31
 8003006:	d81a      	bhi.n	800303e <PDOconfigMap+0x86>
 8003008:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8003014:	2218      	movs	r2, #24
 8003016:	2100      	movs	r1, #0
 8003018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800301a:	f01c fb0f 	bl	801f63c <memset>
        stream->dataLength = mappedLength;
 800301e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8003026:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	4a3e      	ldr	r2, [pc, #248]	; (800312c <PDOconfigMap+0x174>)
 8003032:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <PDOconfigMap+0x178>)
 8003038:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e071      	b.n	8003122 <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 800303e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003042:	4619      	mov	r1, r3
 8003044:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003046:	f7ff fcaf 	bl	80029a8 <OD_find>
 800304a:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800304c:	f107 0210 	add.w	r2, r7, #16
 8003050:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003054:	2300      	movs	r3, #0
 8003056:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003058:	f7ff fd02 	bl	8002a60 <OD_getSub>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8003062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <PDOconfigMap+0xb8>
        return odRet;
 800306a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800306e:	e058      	b.n	8003122 <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <PDOconfigMap+0xc2>
 8003076:	2308      	movs	r3, #8
 8003078:	e000      	b.n	800307c <PDOconfigMap+0xc4>
 800307a:	2304      	movs	r3, #4
 800307c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8003080:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003084:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003088:	4013      	ands	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <PDOconfigMap+0xee>
 8003090:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d201      	bcs.n	80030aa <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80030a6:	2306      	movs	r3, #6
 80030a8:	e03b      	b.n	8003122 <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	461d      	mov	r5, r3
 80030ae:	f107 0410 	add.w	r4, r7, #16
 80030b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 80030be:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d129      	bne.n	8003120 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 80030cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80030d0:	2b1f      	cmp	r3, #31
 80030d2:	d81f      	bhi.n	8003114 <PDOconfigMap+0x15c>
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	79fa      	ldrb	r2, [r7, #7]
 80030ea:	3308      	adds	r3, #8
 80030ec:	440b      	add	r3, r1
 80030ee:	1d19      	adds	r1, r3, #4
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3244      	adds	r2, #68	; 0x44
 80030f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 80030f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	b2d1      	uxtb	r1, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	460a      	mov	r2, r1
 800310e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8003112:	e005      	b.n	8003120 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8003114:	79fa      	ldrb	r2, [r7, #7]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3244      	adds	r2, #68	; 0x44
 800311a:	2100      	movs	r1, #0
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3748      	adds	r7, #72	; 0x48
 8003126:	46bd      	mov	sp, r7
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	bf00      	nop
 800312c:	08002f6b 	.word	0x08002f6b
 8003130:	08002f43 	.word	0x08002f43

08003134 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800314a:	f107 021b 	add.w	r2, r7, #27
 800314e:	2301      	movs	r3, #1
 8003150:	2100      	movs	r1, #0
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff feb6 	bl	8002ec4 <OD_get_u8>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800315e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe84 	bl	8002e7a <OD_getIndex>
 8003172:	4603      	mov	r3, r0
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800317a:	f06f 030b 	mvn.w	r3, #11
 800317e:	e07f      	b.n	8003280 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e05b      	b.n	8003240 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8003188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318c:	015b      	lsls	r3, r3, #5
 800318e:	3310      	adds	r3, #16
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 800319a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319e:	3301      	adds	r3, #1
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	f107 0214 	add.w	r2, r7, #20
 80031a6:	2301      	movs	r3, #1
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff feb5 	bl	8002f18 <OD_get_u32>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80031b4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80031b8:	2b0e      	cmp	r3, #14
 80031ba:	d03b      	beq.n	8003234 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 80031bc:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00f      	beq.n	80031e4 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fe55 	bl	8002e7a <OD_getIndex>
 80031d0:	4603      	mov	r3, r0
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	431a      	orrs	r2, r3
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80031de:	f06f 030b 	mvn.w	r3, #11
 80031e2:	e04d      	b.n	8003280 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80031e4:	6979      	ldr	r1, [r7, #20]
 80031e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fee1 	bl	8002fb8 <PDOconfigMap>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 80031fc:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <PDO_initMapping+0xea>
                *erroneousMap = map;
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 800321e:	7efb      	ldrb	r3, [r7, #27]
 8003220:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003224:	429a      	cmp	r2, r3
 8003226:	d206      	bcs.n	8003236 <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	4413      	add	r3, r2
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	e000      	b.n	8003236 <PDO_initMapping+0x102>
            continue;
 8003234:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8003236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800323a:	3301      	adds	r3, #1
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003244:	2b07      	cmp	r3, #7
 8003246:	d99f      	bls.n	8003188 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2b08      	cmp	r3, #8
 800324c:	d805      	bhi.n	800325a <PDO_initMapping+0x126>
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <PDO_initMapping+0x134>
 8003254:	7efb      	ldrb	r3, [r7, #27]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8003262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8003278:	7efa      	ldrb	r2, [r7, #27]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <OD_write_PDO_mapping+0x28>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <OD_write_PDO_mapping+0x28>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <OD_write_PDO_mapping+0x28>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	7d1b      	ldrb	r3, [r3, #20]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d901      	bls.n	80032b4 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 80032b0:	2309      	movs	r3, #9
 80032b2:	e07e      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <OD_write_PDO_mapping+0x4a>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	7b5b      	ldrb	r3, [r3, #13]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <OD_write_PDO_mapping+0x4e>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	7d1b      	ldrb	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 80032d2:	2302      	movs	r3, #2
 80032d4:	e06d      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	7d1b      	ldrb	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d145      	bne.n	800336a <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 80032de:	68b8      	ldr	r0, [r7, #8]
 80032e0:	f7ff fd91 	bl	8002e06 <CO_getUint8>
 80032e4:	4603      	mov	r3, r0
 80032e6:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 80032ec:	7fbb      	ldrb	r3, [r7, #30]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d901      	bls.n	80032f6 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 80032f2:	2307      	movs	r3, #7
 80032f4:	e05d      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fc:	e01b      	b.n	8003336 <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80032fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	3310      	adds	r3, #16
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	4413      	add	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8003320:	2306      	movs	r3, #6
 8003322:	e046      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8003324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800332c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003330:	3301      	adds	r3, #1
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003336:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800333a:	7fbb      	ldrb	r3, [r7, #30]
 800333c:	429a      	cmp	r2, r3
 800333e:	d3de      	bcc.n	80032fe <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b08      	cmp	r3, #8
 8003344:	d901      	bls.n	800334a <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8003346:	2307      	movs	r3, #7
 8003348:	e033      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <OD_write_PDO_mapping+0xd2>
 8003350:	7fbb      	ldrb	r3, [r7, #30]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8003356:	230f      	movs	r3, #15
 8003358:	e02b      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	b2da      	uxtb	r2, r3
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	7fba      	ldrb	r2, [r7, #30]
 8003366:	735a      	strb	r2, [r3, #13]
 8003368:	e01c      	b.n	80033a4 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f7ff fd68 	bl	8002e40 <CO_getUint32>
 8003370:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	7d1b      	ldrb	r3, [r3, #20]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	460b      	mov	r3, r1
 800338a:	6a39      	ldr	r1, [r7, #32]
 800338c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338e:	f7ff fe13 	bl	8002fb8 <PDOconfigMap>
 8003392:	4603      	mov	r3, r0
 8003394:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8003396:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <OD_write_PDO_mapping+0x11c>
            return odRet;
 800339e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033a2:	e006      	b.n	80033b2 <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff fa73 	bl	8002896 <OD_writeOriginal>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3730      	adds	r7, #48	; 0x30
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff fa09 	bl	80027e6 <OD_readOriginal>
 80033d4:	4603      	mov	r3, r0
 80033d6:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 80033d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d134      	bne.n	800344a <OD_read_PDO_commParam+0x90>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	7d1b      	ldrb	r3, [r3, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d130      	bne.n	800344a <OD_read_PDO_commParam+0x90>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d12c      	bne.n	800344a <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	f7ff fd22 	bl	8002e40 <CO_getUint32>
 80033fc:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003406:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8003408:	8a7b      	ldrh	r3, [r7, #18]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <OD_read_PDO_commParam+0x78>
 800340e:	8a7a      	ldrh	r2, [r7, #18]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8003416:	4619      	mov	r1, r3
 8003418:	f64f 7380 	movw	r3, #65408	; 0xff80
 800341c:	400b      	ands	r3, r1
 800341e:	429a      	cmp	r2, r3
 8003420:	d107      	bne.n	8003432 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800342e:	4313      	orrs	r3, r2
 8003430:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003440:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 8003442:	69f9      	ldr	r1, [r7, #28]
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	f7ff fd09 	bl	8002e5c <CO_setUint32>
    }

    return returnCode;
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 8003456:	b580      	push	{r7, lr}
 8003458:	b088      	sub	sp, #32
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	3305      	adds	r3, #5
 8003472:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800347a:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d03e      	beq.n	8003502 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	7b1b      	ldrb	r3, [r3, #12]
 8003488:	7cfa      	ldrb	r2, [r7, #19]
 800348a:	429a      	cmp	r2, r3
 800348c:	d334      	bcc.n	80034f8 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	7b1b      	ldrb	r3, [r3, #12]
 8003492:	7cfa      	ldrb	r2, [r7, #19]
 8003494:	429a      	cmp	r2, r3
 8003496:	d105      	bne.n	80034a4 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d107      	bne.n	80034ae <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 800349e:	230b      	movs	r3, #11
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e004      	b.n	80034ae <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 80034aa:	230d      	movs	r3, #13
 80034ac:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <CO_PDO_receive+0x80>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <CO_PDO_receive+0x80>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <CO_PDO_receive+0x80>
                bufNo = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 80034d6:	7fbb      	ldrb	r3, [r7, #30]
 80034d8:	332e      	adds	r3, #46	; 0x2e
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4413      	add	r3, r2
 80034e0:	2208      	movs	r2, #8
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f01c f945 	bl	801f774 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80034ea:	7fba      	ldrb	r2, [r7, #30]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	325a      	adds	r2, #90	; 0x5a
 80034f0:	2101      	movs	r1, #1
 80034f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034f6:	e004      	b.n	8003502 <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 80034fe:	230c      	movs	r3, #12
 8003500:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	7ffa      	ldrb	r2, [r7, #31]
 8003506:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b092      	sub	sp, #72	; 0x48
 8003518:	af04      	add	r7, sp, #16
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <OD_write_14xx+0x26>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <OD_write_14xx+0x26>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <OD_write_14xx+0x26>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d901      	bls.n	800353e <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800353a:	2309      	movs	r3, #9
 800353c:	e102      	b.n	8003744 <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	4618      	mov	r0, r3
 8003552:	f01c f90f 	bl	801f774 <memcpy>

    switch (stream->subIndex) {
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	7d1b      	ldrb	r3, [r3, #20]
 800355a:	2b05      	cmp	r3, #5
 800355c:	f000 80d5 	beq.w	800370a <OD_write_14xx+0x1f6>
 8003560:	2b05      	cmp	r3, #5
 8003562:	f300 80e4 	bgt.w	800372e <OD_write_14xx+0x21a>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d003      	beq.n	8003572 <OD_write_14xx+0x5e>
 800356a:	2b02      	cmp	r3, #2
 800356c:	f000 80a6 	beq.w	80036bc <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8003570:	e0dd      	b.n	800372e <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 8003572:	68b8      	ldr	r0, [r7, #8]
 8003574:	f7ff fc64 	bl	8002e40 <CO_getUint32>
 8003578:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	86fb      	strh	r3, [r7, #54]	; 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	43db      	mvns	r3, r3
 8003588:	0fdb      	lsrs	r3, r3, #31
 800358a:	b2db      	uxtb	r3, r3
 800358c:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	4b6e      	ldr	r3, [pc, #440]	; (800374c <OD_write_14xx+0x238>)
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d13d      	bne.n	8003614 <OD_write_14xx+0x100>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <OD_write_14xx+0x9e>
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <OD_write_14xx+0x9e>
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80035ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d130      	bne.n	8003614 <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d026      	beq.n	8003606 <OD_write_14xx+0xf2>
 80035b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ba:	2b7f      	cmp	r3, #127	; 0x7f
 80035bc:	d92a      	bls.n	8003614 <OD_write_14xx+0x100>
 80035be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d903      	bls.n	80035ce <OD_write_14xx+0xba>
 80035c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035c8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80035cc:	d922      	bls.n	8003614 <OD_write_14xx+0x100>
 80035ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035d0:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80035d4:	d903      	bls.n	80035de <OD_write_14xx+0xca>
 80035d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035dc:	d31a      	bcc.n	8003614 <OD_write_14xx+0x100>
 80035de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035e4:	d903      	bls.n	80035ee <OD_write_14xx+0xda>
 80035e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035e8:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80035ec:	d312      	bcc.n	8003614 <OD_write_14xx+0x100>
 80035ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035f0:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80035f4:	d303      	bcc.n	80035fe <OD_write_14xx+0xea>
 80035f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035fc:	d30a      	bcc.n	8003614 <OD_write_14xx+0x100>
 80035fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003604:	d806      	bhi.n	8003614 <OD_write_14xx+0x100>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <OD_write_14xx+0x104>
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	7b5b      	ldrb	r3, [r3, #13]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 8003614:	230f      	movs	r3, #15
 8003616:	e095      	b.n	8003744 <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	429a      	cmp	r2, r3
 8003620:	d106      	bne.n	8003630 <OD_write_14xx+0x11c>
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8003628:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800362a:	429a      	cmp	r2, r3
 800362c:	f000 8081 	beq.w	8003732 <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8003636:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003638:	429a      	cmp	r2, r3
 800363a:	d108      	bne.n	800364e <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003642:	f107 0310 	add.w	r3, r7, #16
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fc07 	bl	8002e5c <CO_setUint32>
                if (!valid) {
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <OD_write_14xx+0x144>
                    CAN_ID = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	86fb      	strh	r3, [r7, #54]	; 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	6858      	ldr	r0, [r3, #4]
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 8003662:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <OD_write_14xx+0x23c>)
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2300      	movs	r3, #0
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003674:	f00f fb68 	bl	8012d48 <CO_CANrxBufferInit>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <OD_write_14xx+0x186>
 8003682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <OD_write_14xx+0x186>
                    PDO->valid = true;
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	2201      	movs	r2, #1
 800368e:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003694:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            break;
 8003698:	e04b      	b.n	8003732 <OD_write_14xx+0x21e>
                    PDO->valid = false;
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
                    if (ret != CO_ERROR_NO) {
 80036b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03c      	beq.n	8003732 <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 80036b8:	2309      	movs	r3, #9
 80036ba:	e043      	b.n	8003744 <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f7ff fba2 	bl	8002e06 <CO_getUint8>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80036c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036cc:	2bf0      	cmp	r3, #240	; 0xf0
 80036ce:	d905      	bls.n	80036dc <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80036d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d4:	2bfd      	cmp	r3, #253	; 0xfd
 80036d6:	d801      	bhi.n	80036dc <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 80036d8:	230f      	movs	r3, #15
 80036da:	e033      	b.n	8003744 <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80036dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e0:	2bf0      	cmp	r3, #240	; 0xf0
 80036e2:	bf94      	ite	ls
 80036e4:	2301      	movls	r3, #1
 80036e6:	2300      	movhi	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d003      	beq.n	8003700 <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            RPDO->synchronous = synchronous;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8003708:	e014      	b.n	8003734 <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f7ff fb89 	bl	8002e22 <CO_getUint16>
 8003710:	4603      	mov	r3, r0
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800371a:	fb03 f202 	mul.w	r2, r3, r2
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
            RPDO->timeoutTimer = 0;
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 800372c:	e002      	b.n	8003734 <OD_write_14xx+0x220>
            break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <OD_write_14xx+0x220>
            break;
 8003732:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003734:	f107 0110 	add.w	r1, r7, #16
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff f8aa 	bl	8002896 <OD_writeOriginal>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3738      	adds	r7, #56	; 0x38
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	3ffff800 	.word	0x3ffff800
 8003750:	08003457 	.word	0x08003457

08003754 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b090      	sub	sp, #64	; 0x40
 8003758:	af04      	add	r7, sp, #16
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <CO_RPDO_init+0x36>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <CO_RPDO_init+0x36>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <CO_RPDO_init+0x36>
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <CO_RPDO_init+0x36>
 800377e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 8003784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	e115      	b.n	80039bc <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 8003790:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8003794:	2100      	movs	r1, #0
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f01b ff50 	bl	801f63c <memset>

    /* Configure object variables */
    PDO->em = em;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a6:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2301      	movs	r3, #1
 80037b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037be:	f7ff fcb9 	bl	8003134 <PDO_initMapping>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 80037c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <CO_RPDO_init+0x82>
        return ret;
 80037d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80037d4:	e0f2      	b.n	80039bc <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80037da:	f107 0218 	add.w	r2, r7, #24
 80037de:	2301      	movs	r3, #1
 80037e0:	2101      	movs	r1, #1
 80037e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037e4:	f7ff fb98 	bl	8002f18 <OD_get_u32>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80037ee:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 80037fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037fe:	f7ff fb3c 	bl	8002e7a <OD_getIndex>
 8003802:	4603      	mov	r3, r0
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800380e:	f06f 030b 	mvn.w	r3, #11
 8003812:	e0d3      	b.n	80039bc <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	43db      	mvns	r3, r3
 8003818:	0fdb      	lsrs	r3, r3, #31
 800381a:	b2db      	uxtb	r3, r3
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <CO_RPDO_init+0xf6>
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	7b5b      	ldrb	r3, [r3, #13]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <CO_RPDO_init+0xe8>
 8003836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <CO_RPDO_init+0xf6>
        valid = false;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <CO_RPDO_init+0x10a>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	e000      	b.n	8003860 <CO_RPDO_init+0x10c>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003866:	221a      	movs	r2, #26
 8003868:	2101      	movs	r1, #1
 800386a:	f7fe f8e3 	bl	8001a34 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8003878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <CO_RPDO_init+0x13c>
 800387e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003880:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003882:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003886:	400b      	ands	r3, r1
 8003888:	429a      	cmp	r2, r3
 800388a:	d101      	bne.n	8003890 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 800388c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800388e:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8003890:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003892:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8003896:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <CO_RPDO_init+0x270>)
 8003898:	9302      	str	r3, [sp, #8]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80038a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038a8:	f00f fa4e 	bl	8012d48 <CO_CANrxBufferInit>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 80038b2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <CO_RPDO_init+0x16c>
        return ret;
 80038ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80038be:	e07d      	b.n	80039bc <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80038c6:	23fe      	movs	r3, #254	; 0xfe
 80038c8:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80038ca:	f107 0217 	add.w	r2, r7, #23
 80038ce:	2301      	movs	r3, #1
 80038d0:	2102      	movs	r1, #2
 80038d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038d4:	f7ff faf6 	bl	8002ec4 <OD_get_u8>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80038de:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 80038ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038ee:	f7ff fac4 	bl	8002e7a <OD_getIndex>
 80038f2:	4603      	mov	r3, r0
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80038fe:	f06f 030b 	mvn.w	r3, #11
 8003902:	e05b      	b.n	80039bc <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2bf0      	cmp	r3, #240	; 0xf0
 8003910:	bf94      	ite	ls
 8003912:	2301      	movls	r3, #1
 8003914:	2300      	movhi	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8003924:	f107 0214 	add.w	r2, r7, #20
 8003928:	2301      	movs	r3, #1
 800392a:	2105      	movs	r1, #5
 800392c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800392e:	f7ff fade 	bl	8002eee <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 8003932:	8abb      	ldrh	r3, [r7, #20]
 8003934:	461a      	mov	r2, r3
 8003936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393a:	fb03 f202 	mul.w	r2, r3, r2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	2201      	movs	r2, #1
 8003948:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800395a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003962:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800396a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <CO_RPDO_init+0x274>)
 800397a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <CO_RPDO_init+0x278>)
 8003982:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <CO_RPDO_init+0x27c>)
 8003992:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <CO_RPDO_init+0x280>)
 800399a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80039a4:	4619      	mov	r1, r3
 80039a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039a8:	f7ff fa78 	bl	8002e9c <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039b6:	f7ff fa71 	bl	8002e9c <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	08003457 	.word	0x08003457
 80039c8:	080033bb 	.word	0x080033bb
 80039cc:	08003515 	.word	0x08003515
 80039d0:	080027e7 	.word	0x080027e7
 80039d4:	08003289 	.word	0x08003289

080039d8 <CO_RPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t syncWas)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b097      	sub	sp, #92	; 0x5c
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
 (void)		syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
 (void)		timerNext_us;
#endif

CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (PDO->valid && NMTisOperational
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8124 	beq.w	8003c3c <CO_RPDO_process+0x264>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8120 	beq.w	8003c3c <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 80039fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <CO_RPDO_process+0x36>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 8117 	bne.w	8003c3c <CO_RPDO_process+0x264>
#endif
       ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003a14:	2b0a      	cmp	r3, #10
 8003a16:	d927      	bls.n	8003a68 <CO_RPDO_process+0x90>
        	{
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003a1e:	2b0b      	cmp	r3, #11
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d102      	bne.n	8003a3a <CO_RPDO_process+0x62>
 8003a34:	f248 2310 	movw	r3, #33296	; 0x8210
 8003a38:	e001      	b.n	8003a3e <CO_RPDO_process+0x66>
 8003a3a:	f248 2320 	movw	r3, #33312	; 0x8220
 8003a3e:	857b      	strh	r3, [r7, #42]	; 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	7b1b      	ldrb	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a4c:	9200      	str	r2, [sp, #0]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a52:	f7fd ffef 	bl	8001a34 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <CO_RPDO_process+0x88>
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	e000      	b.n	8003a62 <CO_RPDO_process+0x8a>
 8003a60:	2200      	movs	r2, #0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        	}

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) { bufNo = 1; }
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <CO_RPDO_process+0xbc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <CO_RPDO_process+0xbc>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <CO_RPDO_process+0xbc>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8003a94:	2300      	movs	r3, #0
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003a98:	e07d      	b.n	8003b96 <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8003a9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003aa2:	332e      	adds	r3, #46	; 0x2e
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
            OD_size_t verifyLength = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8003ab0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	325a      	adds	r2, #90	; 0x5a
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003ac4:	e04a      	b.n	8003b5c <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8003ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	3310      	adds	r3, #16
 8003ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad0:	4413      	add	r3, r2
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ae4:	4413      	add	r3, r2
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d83d      	bhi.n	8003b6a <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d901      	bls.n	8003afe <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8003afa:	2308      	movs	r3, #8
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d911      	bls.n	8003b2a <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f01b fd94 	bl	801f63c <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8003b14:	7ffa      	ldrb	r2, [r7, #31]
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f01b fe29 	bl	801f774 <memcpy>
                    dataOD = buf;
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
 8003b28:	e001      	b.n	8003b2e <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 8003b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	69dc      	ldr	r4, [r3, #28]
 8003b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b42:	47a0      	blx	r4
                *dataOffset = mappedLength;
 8003b44:	7ffa      	ldrb	r2, [r7, #31]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b4e:	4413      	add	r3, r2
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b56:	3301      	adds	r3, #1
 8003b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	7b5b      	ldrb	r3, [r3, #13]
 8003b60:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3ae      	bcc.n	8003ac6 <CO_RPDO_process+0xee>
 8003b68:	e000      	b.n	8003b6c <CO_RPDO_process+0x194>
                    break;
 8003b6a:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d805      	bhi.n	8003b7e <CO_RPDO_process+0x1a6>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	7b1b      	ldrb	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8003b8e:	222c      	movs	r2, #44	; 0x2c
 8003b90:	2101      	movs	r1, #1
 8003b92:	f7fd ff4f 	bl	8001a34 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003b96:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	325a      	adds	r2, #90	; 0x5a
 8003b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f af79 	bne.w	8003a9a <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d058      	beq.n	8003c64 <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8003bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d90a      	bls.n	8003bde <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2217      	movs	r2, #23
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f7fd ff2b 	bl	8001a34 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
       ) {
 8003be6:	e03d      	b.n	8003c64 <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d038      	beq.n	8003c64 <CO_RPDO_process+0x28c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d230      	bcs.n	8003c64 <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d920      	bls.n	8003c64 <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f248 2350 	movw	r3, #33360	; 0x8250
 8003c32:	2217      	movs	r2, #23
 8003c34:	2101      	movs	r1, #1
 8003c36:	f7fd fefd 	bl	8001a34 <CO_error>
       ) {
 8003c3a:	e013      	b.n	8003c64 <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <CO_RPDO_process+0x272>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10d      	bne.n	8003c66 <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 8003c62:	e000      	b.n	8003c66 <CO_RPDO_process+0x28e>
       ) {
 8003c64:	bf00      	nop
}
 8003c66:	bf00      	nop
 8003c68:	3754      	adds	r7, #84	; 0x54
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
	...

08003c70 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b093      	sub	sp, #76	; 0x4c
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <OD_write_18xx+0x26>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <OD_write_18xx+0x26>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <OD_write_18xx+0x26>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d901      	bls.n	8003c9a <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003c96:	2309      	movs	r3, #9
 8003c98:	e136      	b.n	8003f08 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f01b fd61 	bl	801f774 <memcpy>

    switch (stream->subIndex) {
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	7d1b      	ldrb	r3, [r3, #20]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	f200 811a 	bhi.w	8003ef2 <OD_write_18xx+0x282>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <OD_write_18xx+0x54>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cdd 	.word	0x08003cdd
 8003cc8:	08003e13 	.word	0x08003e13
 8003ccc:	08003e75 	.word	0x08003e75
 8003cd0:	08003ef3 	.word	0x08003ef3
 8003cd4:	08003ea3 	.word	0x08003ea3
 8003cd8:	08003ec7 	.word	0x08003ec7
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8003cdc:	68b8      	ldr	r0, [r7, #8]
 8003cde:	f7ff f8af 	bl	8002e40 <CO_getUint32>
 8003ce2:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cec:	87fb      	strh	r3, [r7, #62]	; 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	0fdb      	lsrs	r3, r3, #31
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <OD_write_18xx+0x2a0>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d13d      	bne.n	8003d7e <OD_write_18xx+0x10e>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <OD_write_18xx+0xac>
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <OD_write_18xx+0xac>
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8003d16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d130      	bne.n	8003d7e <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d026      	beq.n	8003d70 <OD_write_18xx+0x100>
 8003d22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d24:	2b7f      	cmp	r3, #127	; 0x7f
 8003d26:	d92a      	bls.n	8003d7e <OD_write_18xx+0x10e>
 8003d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d903      	bls.n	8003d38 <OD_write_18xx+0xc8>
 8003d30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d32:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003d36:	d922      	bls.n	8003d7e <OD_write_18xx+0x10e>
 8003d38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d3a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003d3e:	d903      	bls.n	8003d48 <OD_write_18xx+0xd8>
 8003d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d42:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d46:	d31a      	bcc.n	8003d7e <OD_write_18xx+0x10e>
 8003d48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d4e:	d903      	bls.n	8003d58 <OD_write_18xx+0xe8>
 8003d50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d52:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003d56:	d312      	bcc.n	8003d7e <OD_write_18xx+0x10e>
 8003d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d5a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003d5e:	d303      	bcc.n	8003d68 <OD_write_18xx+0xf8>
 8003d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d66:	d30a      	bcc.n	8003d7e <OD_write_18xx+0x10e>
 8003d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d6e:	d806      	bhi.n	8003d7e <OD_write_18xx+0x10e>
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <OD_write_18xx+0x112>
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	7b5b      	ldrb	r3, [r3, #13]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 8003d7e:	230f      	movs	r3, #15
 8003d80:	e0c2      	b.n	8003f08 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d106      	bne.n	8003d9a <OD_write_18xx+0x12a>
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8003d92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003d94:	429a      	cmp	r2, r3
 8003d96:	f000 80ae 	beq.w	8003ef6 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8003da0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d108      	bne.n	8003db8 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f852 	bl	8002e5c <CO_setUint32>
                }
                if (!valid) {
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <OD_write_18xx+0x152>
                    CAN_ID = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	6858      	ldr	r0, [r3, #4]
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd2:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8003dd6:	2af0      	cmp	r2, #240	; 0xf0
 8003dd8:	bf94      	ite	ls
 8003dda:	2201      	movls	r2, #1
 8003ddc:	2200      	movhi	r2, #0
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	4614      	mov	r4, r2
 8003de2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003de4:	9401      	str	r4, [sp, #4]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	f00f f80b 	bl	8012e04 <CO_CANtxBufferInit>
 8003dee:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 8003df6:	2309      	movs	r3, #9
 8003df8:	e086      	b.n	8003f08 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                PDO->valid = valid;
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003e0c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            }
            break;
 8003e10:	e071      	b.n	8003ef6 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8003e12:	68b8      	ldr	r0, [r7, #8]
 8003e14:	f7fe fff7 	bl	8002e06 <CO_getUint8>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e22:	2bf0      	cmp	r3, #240	; 0xf0
 8003e24:	d905      	bls.n	8003e32 <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8003e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2a:	2bfd      	cmp	r3, #253	; 0xfd
 8003e2c:	d801      	bhi.n	8003e32 <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 8003e2e:	230f      	movs	r3, #15
 8003e30:	e06a      	b.n	8003f08 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8003e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e36:	2bf0      	cmp	r3, #240	; 0xf0
 8003e38:	bf94      	ite	ls
 8003e3a:	2301      	movls	r3, #1
 8003e3c:	2300      	movhi	r3, #0
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003e46:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e56:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
            TPDO->sendRequest = true;
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            TPDO->eventTimer = 0;
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
            break;
 8003e72:	e041      	b.n	8003ef8 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	e043      	b.n	8003f08 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f7fe ffce 	bl	8002e22 <CO_getUint16>
 8003e86:	4603      	mov	r3, r0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	2264      	movs	r2, #100	; 0x64
 8003e8e:	fb03 f202 	mul.w	r2, r3, r2
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            TPDO->inhibitTimer = 0;
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            break;
 8003ea0:	e02a      	b.n	8003ef8 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f7fe ffbd 	bl	8002e22 <CO_getUint16>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb2:	fb03 f202 	mul.w	r2, r3, r2
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            TPDO->eventTimer = 0;
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8003ec4:	e018      	b.n	8003ef8 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8003ec6:	68b8      	ldr	r0, [r7, #8]
 8003ec8:	f7fe ff9d 	bl	8002e06 <CO_getUint8>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <OD_write_18xx+0x272>
 8003eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ede:	2bf0      	cmp	r3, #240	; 0xf0
 8003ee0:	d901      	bls.n	8003ee6 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 8003ee2:	230f      	movs	r3, #15
 8003ee4:	e010      	b.n	8003f08 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003eec:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            break;
 8003ef0:	e002      	b.n	8003ef8 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <OD_write_18xx+0x288>
            break;
 8003ef6:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003ef8:	f107 0114 	add.w	r1, r7, #20
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7fe fcc8 	bl	8002896 <OD_writeOriginal>
 8003f06:	4603      	mov	r3, r0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3744      	adds	r7, #68	; 0x44
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	3ffff800 	.word	0x3ffff800

08003f14 <CO_TPDO_init>:
				OD_entry_t* OD_18xx_TPDOCommPar,
				OD_entry_t* OD_1Axx_TPDOMapPar,
				CO_CANmodule_t* CANdevTx,
				uint16_t 	CANdevTxIdx,
				uint32_t* 	errInfo  )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <CO_TPDO_init+0x36>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <CO_TPDO_init+0x36>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <CO_TPDO_init+0x36>
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <CO_TPDO_init+0x36>
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) 	{
 8003f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <CO_TPDO_init+0x3c>
        						return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e144      	b.n	80041da <CO_TPDO_init+0x2c6>
    							}

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003f50:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003f54:	2100      	movs	r1, #0
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f01b fb70 	bl	801f63c <memset>

    /* Configure object variables */
    PDO->em = em;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f66:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping (PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8003f6c:	f107 031c 	add.w	r3, r7, #28
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2300      	movs	r3, #0
 8003f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f7e:	f7ff f8d9 	bl	8003134 <PDO_initMapping>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (ret != CO_ERROR_NO) { return ret;}
 8003f88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <CO_TPDO_init+0x82>
 8003f90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003f94:	e121      	b.n	80041da <CO_TPDO_init+0x2c6>



    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003f96:	23fe      	movs	r3, #254	; 0xfe
 8003f98:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8003f9a:	f107 021b 	add.w	r2, r7, #27
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fa4:	f7fe ff8e 	bl	8002ec4 <OD_get_u8>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK)
 8003fae:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <CO_TPDO_init+0xc0>
    {
        if (errInfo != NULL)
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <CO_TPDO_init+0xba>
        {
         *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8003fbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fbe:	f7fe ff5c 	bl	8002e7a <OD_getIndex>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003fce:	f06f 030b 	mvn.w	r3, #11
 8003fd2:	e102      	b.n	80041da <CO_TPDO_init+0x2c6>
    }

    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8003fd4:	7efb      	ldrb	r3, [r7, #27]
 8003fd6:	2bfd      	cmp	r3, #253	; 0xfd
 8003fd8:	d804      	bhi.n	8003fe4 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8003fda:	7efb      	ldrb	r3, [r7, #27]
 8003fdc:	2bf0      	cmp	r3, #240	; 0xf0
 8003fde:	d901      	bls.n	8003fe4 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003fe0:	23fe      	movs	r3, #254	; 0xfe
 8003fe2:	76fb      	strb	r3, [r7, #27]
      }
    TPDO->transmissionType = transmissionType;
 8003fe4:	7efa      	ldrb	r2, [r7, #27]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    TPDO->sendRequest = true;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
              odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003ff8:	f107 0214 	add.w	r2, r7, #20
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	2101      	movs	r1, #1
 8004000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004002:	f7fe ff89 	bl	8002f18 <OD_get_u32>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK)
 800400c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <CO_TPDO_init+0x11e>
    {
        if (errInfo != NULL)
 8004014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <CO_TPDO_init+0x118>
        {
        *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 800401a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800401c:	f7fe ff2d 	bl	8002e7a <OD_getIndex>
 8004020:	4603      	mov	r3, r0
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800402c:	f06f 030b 	mvn.w	r3, #11
 8004030:	e0d3      	b.n	80041da <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	43db      	mvns	r3, r3
 8004036:	0fdb      	lsrs	r3, r3, #31
 8004038:	b2db      	uxtb	r3, r3
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004044:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <CO_TPDO_init+0x154>
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	7b5b      	ldrb	r3, [r3, #13]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <CO_TPDO_init+0x146>
 8004054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <CO_TPDO_init+0x154>
        valid = false;
 800405a:	2300      	movs	r3, #0
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00e      	beq.n	800408c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <CO_TPDO_init+0x168>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	e000      	b.n	800407e <CO_TPDO_init+0x16a>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8004084:	221a      	movs	r2, #26
 8004086:	2101      	movs	r1, #1
 8004088:	f7fd fcd4 	bl	8001a34 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8004096:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <CO_TPDO_init+0x19a>
 800409c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800409e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80040a0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80040a4:	400b      	ands	r3, r1
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d101      	bne.n	80040ae <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80040aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80040b8:	2af0      	cmp	r2, #240	; 0xf0
 80040ba:	bf94      	ite	ls
 80040bc:	2201      	movls	r2, #1
 80040be:	2200      	movhi	r2, #0
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	4610      	mov	r0, r2
 80040c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80040c6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80040ca:	9001      	str	r0, [sp, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80040d2:	f00e fe97 	bl	8012e04 <CO_CANtxBufferInit>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    if (TPDO->CANtxBuff == NULL) {
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e075      	b.n	80041da <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f2:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80040fc:	f107 0212 	add.w	r2, r7, #18
 8004100:	2301      	movs	r3, #1
 8004102:	2103      	movs	r1, #3
 8004104:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004106:	f7fe fef2 	bl	8002eee <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800410a:	f107 0210 	add.w	r2, r7, #16
 800410e:	2301      	movs	r3, #1
 8004110:	2105      	movs	r1, #5
 8004112:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004114:	f7fe feeb 	bl	8002eee <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8004118:	8a7b      	ldrh	r3, [r7, #18]
 800411a:	461a      	mov	r2, r3
 800411c:	2364      	movs	r3, #100	; 0x64
 800411e:	fb03 f202 	mul.w	r2, r3, r2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8004128:	8a3b      	ldrh	r3, [r7, #16]
 800412a:	461a      	mov	r2, r3
 800412c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004130:	fb03 f202 	mul.w	r2, r3, r2
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8004148:	2301      	movs	r3, #1
 800414a:	2106      	movs	r1, #6
 800414c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800414e:	f7fe feb9 	bl	8002ec4 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    TPDO->syncCounter = 255;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2200      	movs	r2, #0
 8004166:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004178:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004180:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004188:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <CO_TPDO_init+0x2d0>)
 8004198:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <CO_TPDO_init+0x2d4>)
 80041a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <CO_TPDO_init+0x2d8>)
 80041b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <CO_TPDO_init+0x2dc>)
 80041b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80041c2:	4619      	mov	r1, r3
 80041c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041c6:	f7fe fe69 	bl	8002e9c <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80041d0:	4619      	mov	r1, r3
 80041d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80041d4:	f7fe fe62 	bl	8002e9c <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3730      	adds	r7, #48	; 0x30
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	080033bb 	.word	0x080033bb
 80041e8:	08003c71 	.word	0x08003c71
 80041ec:	080027e7 	.word	0x080027e7
 80041f0:	08003289 	.word	0x08003289

080041f4 <CO_TPDOsend>:
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b093      	sub	sp, #76	; 0x4c
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
CO_PDO_common_t* PDO 	= &TPDO->PDO_common;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t* 	dataTPDO 	= &TPDO->CANtxBuff->data[0];
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8004206:	3305      	adds	r3, #5
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
OD_size_t verifyLength 	= 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <CO_TPDOsend+0x2e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800421e:	2bfd      	cmp	r3, #253	; 0xfd
 8004220:	d901      	bls.n	8004226 <CO_TPDOsend+0x32>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <CO_TPDOsend+0x34>
 8004226:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004230:	e066      	b.n	8004300 <CO_TPDOsend+0x10c>
    {
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8004232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	3310      	adds	r3, #16
 800423a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423c:	4413      	add	r3, r2
 800423e:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 800424a:	7efb      	ldrb	r3, [r7, #27]
 800424c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424e:	4413      	add	r3, r2
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2b08      	cmp	r3, #8
 8004256:	d85a      	bhi.n	800430e <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b08      	cmp	r3, #8
 8004262:	d901      	bls.n	8004268 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8004264:	2308      	movs	r3, #8
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8004268:	7efb      	ldrb	r3, [r7, #27]
 800426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426c:	429a      	cmp	r2, r3
 800426e:	d90a      	bls.n	8004286 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	2208      	movs	r2, #8
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f01b f9df 	bl	801f63c <memset>
            dataTPDOCopy = buf;
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004284:	e001      	b.n	800428a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	699c      	ldr	r4, [r3, #24]
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429c:	69f8      	ldr	r0, [r7, #28]
 800429e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80042a0:	7efa      	ldrb	r2, [r7, #27]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80042a6:	7efb      	ldrb	r3, [r7, #27]
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d906      	bls.n	80042bc <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 80042ae:	7efa      	ldrb	r2, [r7, #27]
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	4619      	mov	r1, r3
 80042b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042b8:	f01b fa5c 	bl	801f774 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80042bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	3244      	adds	r2, #68	; 0x44
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <CO_TPDOsend+0xfa>
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e0:	440b      	add	r3, r1
 80042e2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80042ee:	7efb      	ldrb	r3, [r7, #27]
 80042f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042f2:	4413      	add	r3, r2
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 80042f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042fa:	3301      	adds	r3, #1
 80042fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	7b5b      	ldrb	r3, [r3, #13]
 8004304:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004308:	429a      	cmp	r2, r3
 800430a:	d392      	bcc.n	8004232 <CO_TPDOsend+0x3e>
 800430c:	e000      	b.n	8004310 <CO_TPDOsend+0x11c>
            break;
 800430e:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	2b08      	cmp	r3, #8
 8004314:	d805      	bhi.n	8004322 <CO_TPDOsend+0x12e>
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	7b1b      	ldrb	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8004332:	222c      	movs	r2, #44	; 0x2c
 8004334:	2101      	movs	r1, #1
 8004336:	f7fd fb7d 	bl	8001a34 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 800433a:	f06f 030c 	mvn.w	r3, #12
 800433e:	e019      	b.n	8004374 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f00e fdc3 	bl	8012ef8 <CO_CANsend>
 8004372:	4603      	mov	r3, r0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3744      	adds	r7, #68	; 0x44
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <CO_TPDO_process>:
                uint32_t 	timeDifference_us,
				uint32_t* 	timerNext_us,
#endif
                bool_t 		NMTisOperational,
				bool_t 		syncWas )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
(void)timerNext_us;
#endif
(void)syncWas;

    if (PDO->valid && NMTisOperational) {
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80dc 	beq.w	8004550 <CO_TPDO_process+0x1d4>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80d8 	beq.w	8004550 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80043b0:	2bfd      	cmp	r3, #253	; 0xfd
 80043b2:	d946      	bls.n	8004442 <CO_TPDO_process+0xc6>
        {
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <CO_TPDO_process+0x74>
            {
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d205      	bcs.n	80043d6 <CO_TPDO_process+0x5a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	e000      	b.n	80043d8 <CO_TPDO_process+0x5c>
 80043d6:	2300      	movs	r3, #0
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {TPDO->sendRequest = true;}
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <CO_TPDO_process+0x74>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d123      	bne.n	8004442 <CO_TPDO_process+0xc6>
            {
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e01b      	b.n	8004438 <CO_TPDO_process+0xbc>
                {
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8004400:	7ffa      	ldrb	r2, [r7, #31]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3244      	adds	r2, #68	; 0x44
 8004406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440a:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00f      	beq.n	8004432 <CO_TPDO_process+0xb6>
                    {
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	7ffb      	ldrb	r3, [r7, #31]
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	440b      	add	r3, r1
 800441c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004420:	4013      	ands	r3, r2
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <CO_TPDO_process+0xb6>
                        	{TPDO->sendRequest = true; break;}
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8004430:	e007      	b.n	8004442 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	3301      	adds	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	7b5b      	ldrb	r3, [r3, #13]
 800443c:	7ffa      	ldrb	r2, [r7, #31]
 800443e:	429a      	cmp	r2, r3
 8004440:	d3de      	bcc.n	8004400 <CO_TPDO_process+0x84>


#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8004448:	2bfd      	cmp	r3, #253	; 0xfd
 800444a:	d91d      	bls.n	8004488 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d205      	bcs.n	8004464 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	e000      	b.n	8004466 <CO_TPDO_process+0xea>
 8004464:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) { (void)CO_TPDOsend(TPDO); }
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8004472:	2b00      	cmp	r3, #0
 8004474:	d07d      	beq.n	8004572 <CO_TPDO_process+0x1f6>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800447c:	2b00      	cmp	r3, #0
 800447e:	d178      	bne.n	8004572 <CO_TPDO_process+0x1f6>
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff feb7 	bl	80041f4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8004486:	e074      	b.n	8004572 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800448e:	2b00      	cmp	r3, #0
 8004490:	d06f      	beq.n	8004572 <CO_TPDO_process+0x1f6>
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d06c      	beq.n	8004572 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d062      	beq.n	8004572 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fea1 	bl	80041f4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80044b2:	e05e      	b.n	8004572 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80044ba:	2bff      	cmp	r3, #255	; 0xff
 80044bc:	d119      	bne.n	80044f2 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80044c4:	7c5b      	ldrb	r3, [r3, #17]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <CO_TPDO_process+0x162>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	22fe      	movs	r2, #254	; 0xfe
 80044d8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80044dc:	e009      	b.n	80044f2 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80044f8:	2bfe      	cmp	r3, #254	; 0xfe
 80044fa:	d112      	bne.n	8004522 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004502:	7c9a      	ldrb	r2, [r3, #18]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800450a:	429a      	cmp	r2, r3
 800450c:	d131      	bne.n	8004572 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff fe6a 	bl	80041f4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8004520:	e027      	b.n	8004572 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8004528:	3b01      	subs	r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11a      	bne.n	8004572 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fe53 	bl	80041f4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800454e:	e010      	b.n	8004572 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	22ff      	movs	r2, #255	; 0xff
 800456c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 8004570:	e000      	b.n	8004574 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8004572:	bf00      	nop
}
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <CO_getUint8>:
CO_getUint8(const void* buf) {
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004588:	73fb      	strb	r3, [r7, #15]
    return value;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80045a4:	60fb      	str	r3, [r7, #12]
    return value;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <OD_getIndex>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <OD_getIndex+0x14>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	e000      	b.n	80045ca <OD_getIndex+0x16>
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <OD_extension_init>:
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <OD_extension_init+0x14>
 80045e6:	2305      	movs	r3, #5
 80045e8:	e003      	b.n	80045f2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	460b      	mov	r3, r1
 800460c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800460e:	7af9      	ldrb	r1, [r7, #11]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2301      	movs	r3, #1
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7fe fb37 	bl	8002c8c <OD_get_value>
 800461e:	4603      	mov	r3, r0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	460b      	mov	r3, r1
 8004636:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004638:	7af9      	ldrb	r1, [r7, #11]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2304      	movs	r3, #4
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fe fb22 	bl	8002c8c <OD_get_value>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <CO_fifo_reset>:
 * Reset fifo object, make it empty
 *
 * @param fifo This object
 */
static inline void
CO_fifo_reset(CO_fifo_t* fifo) {
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <CO_fifo_reset+0x22>
        fifo->readPtr = 0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_DATATYPES) != 0
        fifo->started = false;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
#endif
    }

    return;
 8004672:	bf00      	nop
 8004674:	bf00      	nop
}
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <CO_fifo_getSpace>:
 * @param fifo This object
 *
 * @return number of available bytes
 */
static inline size_t
CO_fifo_getSpace(CO_fifo_t* fifo) {
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
    int sizeLeft = (int)fifo->readPtr - (int)fifo->writePtr - 1;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
    if (sizeLeft < 0) {
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da05      	bge.n	80046aa <CO_fifo_getSpace+0x2a>
        sizeLeft += (int)fifo->bufSize;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
    }

    return (size_t)sizeLeft;
 80046aa:	68fb      	ldr	r3, [r7, #12]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <CO_fifo_getOccupied>:
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da05      	bge.n	80046e0 <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	461a      	mov	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    }

    return (size_t)sizeOccupied;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <CO_fifo_altGetOccupied>:
 *
 * @return number of occupied bytes.
 */
static inline size_t
CO_fifo_altGetOccupied(CO_fifo_t* fifo)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)(fifo->writePtr) - (int)(fifo->altReadPtr);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	60fb      	str	r3, [r7, #12]
		if (sizeOccupied < 0)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	da05      	bge.n	8004716 <CO_fifo_altGetOccupied+0x28>
		{
		 sizeOccupied += (int)(fifo->bufSize);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
		}

    return (size_t)sizeOccupied;
 8004716:	68fb      	ldr	r3, [r7, #12]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <CO_SDOclient_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDOclient_receive(void* object, void* msg)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)object;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	623b      	str	r3, [r7, #32]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	77fb      	strb	r3, [r7, #31]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	3305      	adds	r3, #5
 800473c:	61bb      	str	r3, [r7, #24]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if ((SDO_C->state != CO_SDO_ST_IDLE) && (DLC == 8U) && (!CO_FLAG_READ(SDO_C->CANrxNew) || (data[0] == 0x80U)))
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80c7 	beq.w	80048da <CO_SDOclient_receive+0x1b6>
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	2b08      	cmp	r3, #8
 8004750:	f040 80c3 	bne.w	80048da <CO_SDOclient_receive+0x1b6>
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <CO_SDOclient_receive+0x44>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	f040 80b9 	bne.w	80048da <CO_SDOclient_receive+0x1b6>
    {
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        bool_t state_not_upload_blk_sublock_sreq = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	617b      	str	r3, [r7, #20]
        bool_t state_not_upload_blk_sublock_crsp = (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	613b      	str	r3, [r7, #16]
        if ((data[0] == 0x80U) /* abort from server */
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d005      	beq.n	80047a4 <CO_SDOclient_receive+0x80>
            || (state_not_upload_blk_sublock_sreq && state_not_upload_blk_sublock_crsp))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01d      	beq.n	80047da <CO_SDOclient_receive+0xb6>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <CO_SDOclient_receive+0xb6>
        	{
#endif
            /* copy data and set 'new message' flag */
            (void)memcpy((void*)&SDO_C->CANrxData[0], (const void*)&data[0], 8);
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80047aa:	2208      	movs	r2, #8
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f01a ffe0 	bl	801f774 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
            /* Optional signal to RTOS, which can resume task, which handles
             * SDO client processing. */
            if (SDO_C->pFunctSignal != NULL)
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8089 	beq.w	80048da <CO_SDOclient_receive+0x1b6>
            	{
                SDO_C->pFunctSignal(SDO_C->functSignalObject);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	f8d2 2490 	ldr.w	r2, [r2, #1168]	; 0x490
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
            if (SDO_C->pFunctSignal != NULL)
 80047d8:	e07f      	b.n	80048da <CO_SDOclient_receive+0x1b6>
            	}
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0

        } else if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d179      	bne.n	80048da <CO_SDOclient_receive+0x1b6>
            /* block upload, copy data directly */
            CO_SDO_state_t state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80047e6:	2364      	movs	r3, #100	; 0x64
 80047e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uint8_t seqno = data[0] & 0x7FU;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f4:	73fb      	strb	r3, [r7, #15]
            SDO_C->timeoutTimer = 0;
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2200      	movs	r2, #0
 80047fa:	675a      	str	r2, [r3, #116]	; 0x74
            SDO_C->block_timeoutTimer = 0;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

            /* verify if sequence number is correct */
            if ((seqno <= SDO_C->block_blksize) && (seqno == (SDO_C->block_seqno + 1U))) {
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 800480a:	7bfa      	ldrb	r2, [r7, #15]
 800480c:	429a      	cmp	r2, r3
 800480e:	d839      	bhi.n	8004884 <CO_SDOclient_receive+0x160>
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8004818:	3301      	adds	r3, #1
 800481a:	429a      	cmp	r2, r3
 800481c:	d132      	bne.n	8004884 <CO_SDOclient_receive+0x160>
                SDO_C->block_seqno = seqno;
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0

                /* is this the last segment? */
                if ((data[0] & 0x80U) != 0U) {
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b25b      	sxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	da0f      	bge.n	8004850 <CO_SDOclient_receive+0x12c>
                    /* copy data to temporary buffer, because we don't know the number of bytes not containing data */
                    (void)memcpy((void*)&SDO_C->block_dataUploadLast[0], (const void*)&data[1], 7);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f503 6095 	add.w	r0, r3, #1192	; 0x4a8
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3301      	adds	r3, #1
 800483a:	2207      	movs	r2, #7
 800483c:	4619      	mov	r1, r3
 800483e:	f01a ff99 	bl	801f774 <memcpy>
                    SDO_C->finished = true;
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	2201      	movs	r2, #1
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
                    state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8004848:	2365      	movs	r3, #101	; 0x65
 800484a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ((data[0] & 0x80U) != 0U) {
 800484e:	e028      	b.n	80048a2 <CO_SDOclient_receive+0x17e>
                } else {
                    /* Copy data. There is always enough space in fifo buffer,
                     * because block_blksize was calculated before */
                    (void)CO_fifo_write(&SDO_C->bufFifo, &data[1], 7, &SDO_C->block_crc);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	1c59      	adds	r1, r3, #1
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004860:	2207      	movs	r2, #7
 8004862:	f005 fad3 	bl	8009e0c <CO_fifo_write>
                    SDO_C->sizeTran += 7U;
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	1dda      	adds	r2, r3, #7
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	669a      	str	r2, [r3, #104]	; 0x68
                    /* all segments in sub-block has been transferred */
                    if (seqno == SDO_C->block_blksize) {
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	429a      	cmp	r2, r3
 800487a:	d112      	bne.n	80048a2 <CO_SDOclient_receive+0x17e>
                        state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 800487c:	2365      	movs	r3, #101	; 0x65
 800487e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ((data[0] & 0x80U) != 0U) {
 8004882:	e00e      	b.n	80048a2 <CO_SDOclient_receive+0x17e>
                    }
                }
            }
            /* If message is duplicate or sequence didn't start yet, ignore it. Otherwise seqno is wrong,
             * so break sub-block. Data after last good seqno will be re-transmitted. */
            else if ((seqno != SDO_C->block_seqno) && (SDO_C->block_seqno != 0U)) {
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	429a      	cmp	r2, r3
 800488e:	d009      	beq.n	80048a4 <CO_SDOclient_receive+0x180>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <CO_SDOclient_receive+0x180>
                state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 800489a:	2365      	movs	r3, #101	; 0x65
 800489c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048a0:	e000      	b.n	80048a4 <CO_SDOclient_receive+0x180>
                if ((data[0] & 0x80U) != 0U) {
 80048a2:	bf00      	nop
                CO_DEBUG_SDO_CLIENT(msg);
#endif
            }

            /* Is exit from sub-block receive state? */
            if (state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	2b64      	cmp	r3, #100	; 0x64
 80048aa:	d016      	beq.n	80048da <CO_SDOclient_receive+0x1b6>
                /* Processing will continue in another thread, so make memory
                 * barrier here with CO_FLAG_CLEAR() call. */
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                SDO_C->state = state;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80048ba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
                /* Optional signal to RTOS, which can resume task, which handles SDO client processing. */
                if (SDO_C->pFunctSignal != NULL) {
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <CO_SDOclient_receive+0x1b6>
                    SDO_C->pFunctSignal(SDO_C->functSignalObject);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	f8d2 2490 	ldr.w	r2, [r2, #1168]	; 0x490
 80048d4:	4610      	mov	r0, r2
 80048d6:	4798      	blx	r3
        } else { /* MISRA C 2004 14.10 */
        }

#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 80048d8:	e7ff      	b.n	80048da <CO_SDOclient_receive+0x1b6>
 80048da:	bf00      	nop
 80048dc:	3728      	adds	r7, #40	; 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <OD_write_1280>:
 * Custom function for writing OD object _SDO client parameter_
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1280(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <OD_write_1280+0x20>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <OD_write_1280+0x20>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <OD_write_1280+0x24>
        return ODR_DEV_INCOMPAT;
 8004904:	2309      	movs	r3, #9
 8004906:	e0e4      	b.n	8004ad2 <OD_write_1280+0x1ee>
    }

    CO_SDOclient_t* SDO_C = (CO_SDOclient_t*)stream->object;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	7d1b      	ldrb	r3, [r3, #20]
 8004912:	2b03      	cmp	r3, #3
 8004914:	f200 80d4 	bhi.w	8004ac0 <OD_write_1280+0x1dc>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <OD_write_1280+0x3c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004931 	.word	0x08004931
 8004924:	08004935 	.word	0x08004935
 8004928:	080049e9 	.word	0x080049e9
 800492c:	08004a9d 	.word	0x08004a9d
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8004930:	2304      	movs	r3, #4
 8004932:	e0ce      	b.n	8004ad2 <OD_write_1280+0x1ee>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004934:	68b8      	ldr	r0, [r7, #8]
 8004936:	f7ff fe2f 	bl	8004598 <CO_getUint32>
 800493a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004944:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO_C->COB_IDClientToServer & 0x7FFU);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	b29b      	uxth	r3, r3
 800494c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004950:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	43db      	mvns	r3, r3
 8004956:	0fdb      	lsrs	r3, r3, #31
 8004958:	b2db      	uxtb	r3, r3
 800495a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && SDO_C->valid && (CAN_ID != CAN_ID_cur))
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <OD_write_1280+0x1f8>)
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d134      	bne.n	80049d0 <OD_write_1280+0xec>
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <OD_write_1280+0x98>
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <OD_write_1280+0x98>
 8004974:	8afa      	ldrh	r2, [r7, #22]
 8004976:	8abb      	ldrh	r3, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d129      	bne.n	80049d0 <OD_write_1280+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d028      	beq.n	80049d4 <OD_write_1280+0xf0>
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	2b7f      	cmp	r3, #127	; 0x7f
 8004986:	d923      	bls.n	80049d0 <OD_write_1280+0xec>
 8004988:	8afb      	ldrh	r3, [r7, #22]
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d903      	bls.n	8004998 <OD_write_1280+0xb4>
 8004990:	8afb      	ldrh	r3, [r7, #22]
 8004992:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004996:	d91b      	bls.n	80049d0 <OD_write_1280+0xec>
 8004998:	8afb      	ldrh	r3, [r7, #22]
 800499a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800499e:	d903      	bls.n	80049a8 <OD_write_1280+0xc4>
 80049a0:	8afb      	ldrh	r3, [r7, #22]
 80049a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049a6:	d313      	bcc.n	80049d0 <OD_write_1280+0xec>
 80049a8:	8afb      	ldrh	r3, [r7, #22]
 80049aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049ae:	d903      	bls.n	80049b8 <OD_write_1280+0xd4>
 80049b0:	8afb      	ldrh	r3, [r7, #22]
 80049b2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80049b6:	d30b      	bcc.n	80049d0 <OD_write_1280+0xec>
 80049b8:	8afb      	ldrh	r3, [r7, #22]
 80049ba:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80049be:	d303      	bcc.n	80049c8 <OD_write_1280+0xe4>
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c6:	d303      	bcc.n	80049d0 <OD_write_1280+0xec>
 80049c8:	8afb      	ldrh	r3, [r7, #22]
 80049ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ce:	d901      	bls.n	80049d4 <OD_write_1280+0xf0>
                return ODR_INVALID_VALUE;
 80049d0:	230f      	movs	r3, #15
 80049d2:	e07e      	b.n	8004ad2 <OD_write_1280+0x1ee>
            }
            (void)CO_SDOclient_setup(SDO_C, COB_ID, SDO_C->COB_IDServerToClient, SDO_C->nodeIDOfTheSDOServer);
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049de:	69b9      	ldr	r1, [r7, #24]
 80049e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049e2:	f000 f95b 	bl	8004c9c <CO_SDOclient_setup>
            break;
 80049e6:	e06d      	b.n	8004ac4 <OD_write_1280+0x1e0>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f7ff fdd5 	bl	8004598 <CO_getUint32>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f8:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO_C->COB_IDServerToClient & 0x7FFU);
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a04:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	0fdb      	lsrs	r3, r3, #31
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && SDO_C->valid && (CAN_ID != CAN_ID_cur))
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	4b32      	ldr	r3, [pc, #200]	; (8004adc <OD_write_1280+0x1f8>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d134      	bne.n	8004a84 <OD_write_1280+0x1a0>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <OD_write_1280+0x14c>
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <OD_write_1280+0x14c>
 8004a28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a2a:	8c3b      	ldrh	r3, [r7, #32]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d129      	bne.n	8004a84 <OD_write_1280+0x1a0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <OD_write_1280+0x1a4>
 8004a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a38:	2b7f      	cmp	r3, #127	; 0x7f
 8004a3a:	d923      	bls.n	8004a84 <OD_write_1280+0x1a0>
 8004a3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d903      	bls.n	8004a4c <OD_write_1280+0x168>
 8004a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a46:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004a4a:	d91b      	bls.n	8004a84 <OD_write_1280+0x1a0>
 8004a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a4e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004a52:	d903      	bls.n	8004a5c <OD_write_1280+0x178>
 8004a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a5a:	d313      	bcc.n	8004a84 <OD_write_1280+0x1a0>
 8004a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a62:	d903      	bls.n	8004a6c <OD_write_1280+0x188>
 8004a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a66:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004a6a:	d30b      	bcc.n	8004a84 <OD_write_1280+0x1a0>
 8004a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a6e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004a72:	d303      	bcc.n	8004a7c <OD_write_1280+0x198>
 8004a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a7a:	d303      	bcc.n	8004a84 <OD_write_1280+0x1a0>
 8004a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a82:	d901      	bls.n	8004a88 <OD_write_1280+0x1a4>
                return ODR_INVALID_VALUE;
 8004a84:	230f      	movs	r3, #15
 8004a86:	e024      	b.n	8004ad2 <OD_write_1280+0x1ee>
            }
            (void)CO_SDOclient_setup(SDO_C, SDO_C->COB_IDClientToServer, COB_ID, SDO_C->nodeIDOfTheSDOServer);
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a96:	f000 f901 	bl	8004c9c <CO_SDOclient_setup>
            break;
 8004a9a:	e013      	b.n	8004ac4 <OD_write_1280+0x1e0>
        }

        case 3: { /* Node-ID of the SDO server */
            uint8_t nodeId = CO_getUint8(buf);
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f7ff fd6d 	bl	800457c <CO_getUint8>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId > 127U) {
 8004aa8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da01      	bge.n	8004ab4 <OD_write_1280+0x1d0>
                return ODR_INVALID_VALUE;
 8004ab0:	230f      	movs	r3, #15
 8004ab2:	e00e      	b.n	8004ad2 <OD_write_1280+0x1ee>
            }
            SDO_C->nodeIDOfTheSDOServer = nodeId;
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004aba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            break;
 8004abe:	e001      	b.n	8004ac4 <OD_write_1280+0x1e0>
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8004ac0:	230e      	movs	r3, #14
 8004ac2:	e006      	b.n	8004ad2 <OD_write_1280+0x1ee>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fd fee3 	bl	8002896 <OD_writeOriginal>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3730      	adds	r7, #48	; 0x30
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	3ffff800 	.word	0x3ffff800

08004ae0 <CO_SDOclient_init>:
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOclient_init(CO_SDOclient_t* SDO_C, OD_t* OD, OD_entry_t* OD_1280_SDOcliPar, uint8_t nodeId,
                  CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
                  uint32_t* errInfo) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	70fb      	strb	r3, [r7, #3]
    bool_t index_SDOcliPar_min = (OD_getIndex(OD_1280_SDOcliPar) < (uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM));
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fd60 	bl	80045b4 <OD_getIndex>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	f241 237f 	movw	r3, #4735	; 0x127f
 8004afc:	429a      	cmp	r2, r3
 8004afe:	bf94      	ite	ls
 8004b00:	2301      	movls	r3, #1
 8004b02:	2300      	movhi	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    bool_t index_SDOcliPar_max = (OD_getIndex(OD_1280_SDOcliPar) > ((uint16_t)(OD_H1280_SDO_CLIENT_1_PARAM) + 0x7FU));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd53 	bl	80045b4 <OD_getIndex>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	f241 23ff 	movw	r3, #4863	; 0x12ff
 8004b16:	429a      	cmp	r2, r3
 8004b18:	bf8c      	ite	hi
 8004b1a:	2301      	movhi	r3, #1
 8004b1c:	2300      	movls	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	623b      	str	r3, [r7, #32]

    /* verify arguments */
    if ((SDO_C == NULL) || (OD_1280_SDOcliPar == NULL) || index_SDOcliPar_min || index_SDOcliPar_max
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <CO_SDOclient_init+0x66>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <CO_SDOclient_init+0x66>
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <CO_SDOclient_init+0x66>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <CO_SDOclient_init+0x66>
        || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <CO_SDOclient_init+0x66>
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <CO_SDOclient_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	e09f      	b.n	8004c8c <CO_SDOclient_init+0x1ac>
    }

    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    SDO_C->OD = OD;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	601a      	str	r2, [r3, #0]
    SDO_C->nodeId = nodeId;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	711a      	strb	r2, [r3, #4]
#endif
    SDO_C->CANdevRx = CANdevRx;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b62:	859a      	strh	r2, [r3, #44]	; 0x2c
    SDO_C->CANdevTx = CANdevTx;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004b6e:	869a      	strh	r2, [r3, #52]	; 0x34
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_CALLBACK_PRE) != 0
    SDO_C->pFunctSignal = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
    SDO_C->functSignalObject = NULL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf, CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3394      	adds	r3, #148	; 0x94
 8004b8a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f005 f91a 	bl	8009dc8 <CO_fifo_init>

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8004b94:	f107 0219 	add.w	r2, r7, #25
 8004b98:	2301      	movs	r3, #1
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff fd2e 	bl	80045fe <OD_get_u8>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8004ba6:	f107 0214 	add.w	r2, r7, #20
 8004baa:	2301      	movs	r3, #1
 8004bac:	2101      	movs	r1, #1
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fd3a 	bl	8004628 <OD_get_u32>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8004bb8:	f107 0210 	add.w	r2, r7, #16
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fd31 	bl	8004628 <OD_get_u32>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8004bca:	f107 0218 	add.w	r2, r7, #24
 8004bce:	2301      	movs	r3, #1
 8004bd0:	2103      	movs	r1, #3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fd13 	bl	80045fe <OD_get_u8>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	773b      	strb	r3, [r7, #28]

    if ((odRet0 != ODR_OK) || (maxSubIndex != 3U) || (odRet1 != ODR_OK) || (odRet2 != ODR_OK) || (odRet3 != ODR_OK)) {
 8004bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10e      	bne.n	8004c02 <CO_SDOclient_init+0x122>
 8004be4:	7e7b      	ldrb	r3, [r7, #25]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d10b      	bne.n	8004c02 <CO_SDOclient_init+0x122>
 8004bea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d107      	bne.n	8004c02 <CO_SDOclient_init+0x122>
 8004bf2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <CO_SDOclient_init+0x122>
 8004bfa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <CO_SDOclient_init+0x13c>
        if (errInfo != NULL) {
 8004c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <CO_SDOclient_init+0x136>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fcd3 	bl	80045b4 <OD_getIndex>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c14:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004c16:	f06f 030b 	mvn.w	r3, #11
 8004c1a:	e037      	b.n	8004c8c <CO_SDOclient_init+0x1ac>
    }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO_C->OD_1280_extension.object = SDO_C;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
    SDO_C->OD_1280_extension.read = OD_readOriginal;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <CO_SDOclient_init+0x1b4>)
 8004c26:	649a      	str	r2, [r3, #72]	; 0x48
    SDO_C->OD_1280_extension.write = OD_write_1280;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <CO_SDOclient_init+0x1b8>)
 8004c2c:	64da      	str	r2, [r3, #76]	; 0x4c
    ODR_t odRetE = OD_extension_init(OD_1280_SDOcliPar, &SDO_C->OD_1280_extension);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3344      	adds	r3, #68	; 0x44
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fcce 	bl	80045d6 <OD_extension_init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	76fb      	strb	r3, [r7, #27]
    if (odRetE != ODR_OK) {
 8004c3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <CO_SDOclient_init+0x180>
        if (errInfo != NULL) {
 8004c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <CO_SDOclient_init+0x17a>
            *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fcb1 	bl	80045b4 <OD_getIndex>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004c5a:	f06f 030b 	mvn.w	r3, #11
 8004c5e:	e015      	b.n	8004c8c <CO_SDOclient_init+0x1ac>
    }

    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	63da      	str	r2, [r3, #60]	; 0x3c
    SDO_C->COB_IDServerToClient = 0;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C, COB_IDClientToServer, COB_IDServerToClient,
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	7e3b      	ldrb	r3, [r7, #24]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f812 	bl	8004c9c <CO_SDOclient_setup>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	76bb      	strb	r3, [r7, #26]
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 8004c7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <CO_SDOclient_init+0x1aa>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	e000      	b.n	8004c8c <CO_SDOclient_init+0x1ac>
    }

    return CO_ERROR_NO;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3728      	adds	r7, #40	; 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	080027e7 	.word	0x080027e7
 8004c98:	080048e5 	.word	0x080048e5

08004c9c <CO_SDOclient_setup>:
CO_SDOclient_setup (
					CO_SDOclient_t* SDO_C,
					uint32_t COB_IDClientToServer,
					uint32_t COB_IDServerToClient,
                    uint8_t nodeIDOfTheSDOServer)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {  return CO_SDO_RT_wrongArguments;}
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <CO_SDOclient_setup+0x1a>
 8004cb0:	f06f 0301 	mvn.w	r3, #1
 8004cb4:	e073      	b.n	8004d9e <CO_SDOclient_setup+0x102>


    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_OD_DYNAMIC)!=0

    /* proceed only, if parameters change */
    if (
    		(COB_IDClientToServer == SDO_C->COB_IDClientToServer)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if (
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d106      	bne.n	8004ce6 <CO_SDOclient_setup+0x4a>
         && (COB_IDServerToClient == SDO_C->COB_IDServerToClient)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d101      	bne.n	8004ce6 <CO_SDOclient_setup+0x4a>
	   ) {return CO_SDO_RT_ok_communicationEnd; }
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e05b      	b.n	8004d9e <CO_SDOclient_setup+0x102>


    /* store variables */
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	63da      	str	r2, [r3, #60]	; 0x3c
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDClientToServer & 0x7FFU) : 0U;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db05      	blt.n	8004d04 <CO_SDOclient_setup+0x68>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	e000      	b.n	8004d06 <CO_SDOclient_setup+0x6a>
 8004d04:	2300      	movs	r3, #0
 8004d06:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)(COB_IDServerToClient & 0x7FFU) : 0U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db05      	blt.n	8004d1a <CO_SDOclient_setup+0x7e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	e000      	b.n	8004d1c <CO_SDOclient_setup+0x80>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	82bb      	strh	r3, [r7, #20]
    if (
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d006      	beq.n	8004d32 <CO_SDOclient_setup+0x96>
    		(CanIdC2S != 0U)
		 && (CanIdS2C != 0U)
 8004d24:	8abb      	ldrh	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <CO_SDOclient_setup+0x96>
	   ) {SDO_C->valid = true;} else {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d30:	e006      	b.n	8004d40 <CO_SDOclient_setup+0xa4>
		   	   	   	   	   	   	   	   CanIdC2S = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	82fb      	strh	r3, [r7, #22]
		   	   	   	   	   	   	   	   CanIdS2C = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	82bb      	strh	r3, [r7, #20]
		   	   	   	   	   	   	   	   SDO_C->valid = false;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	659a      	str	r2, [r3, #88]	; 0x58
	   	   	   	   	   	   	   	   	 }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(SDO_C->CANdevRx, SDO_C->CANdevRxIdx, CanIdS2C, 0x7FF, false, (void*)SDO_C,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8004d48:	8aba      	ldrh	r2, [r7, #20]
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <CO_SDOclient_setup+0x10c>)
 8004d4c:	9302      	str	r3, [sp, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004d5a:	f00d fff5 	bl	8012d48 <CO_CANrxBufferInit>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	74fb      	strb	r3, [r7, #19]
                                              CO_SDOclient_receive);

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(SDO_C->CANdevTx, SDO_C->CANdevTxIdx, CanIdC2S, false, 8, false);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8004d6a:	8afa      	ldrh	r2, [r7, #22]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	2308      	movs	r3, #8
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	f00e f845 	bl	8012e04 <CO_CANtxBufferInit>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38

    if ((ret != CO_ERROR_NO) || (SDO_C->CANtxBuff == NULL)) {
 8004d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <CO_SDOclient_setup+0xf4>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <CO_SDOclient_setup+0x100>
        SDO_C->valid = false;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58
        return CO_SDO_RT_wrongArguments;
 8004d96:	f06f 0301 	mvn.w	r3, #1
 8004d9a:	e000      	b.n	8004d9e <CO_SDOclient_setup+0x102>
    }

    return CO_SDO_RT_ok_communicationEnd;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08004725 	.word	0x08004725

08004dac <CO_SDOclientDownloadInitiate>:
/******************************************************************************
 * DOWNLOAD                                                                   *
 ******************************************************************************/
CO_SDO_return_t
CO_SDOclientDownloadInitiate(CO_SDOclient_t* SDO_C, uint16_t index, uint8_t subIndex, size_t sizeIndicated,
                             uint16_t SDOtimeoutTime_ms, bool_t blockEnable) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	727b      	strb	r3, [r7, #9]
    /* verify parameters */
    if ((SDO_C == NULL) || !SDO_C->valid) {
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <CO_SDOclientDownloadInitiate+0x20>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <CO_SDOclientDownloadInitiate+0x26>
        return CO_SDO_RT_wrongArguments;
 8004dcc:	f06f 0301 	mvn.w	r3, #1
 8004dd0:	e04d      	b.n	8004e6e <CO_SDOclientDownloadInitiate+0xc2>
    }

    /* save parameters */
    SDO_C->index 				= index;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	897a      	ldrh	r2, [r7, #10]
 8004dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    SDO_C->subIndex 			= subIndex;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	7a7a      	ldrb	r2, [r7, #9]
 8004dde:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO_C->sizeInd 				= sizeIndicated;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	665a      	str	r2, [r3, #100]	; 0x64
    SDO_C->sizeTran 			= 0;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	669a      	str	r2, [r3, #104]	; 0x68
    SDO_C->finished 			= false;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60
    SDO_C->SDOtimeoutTime_us 	= (uint32_t)SDOtimeoutTime_ms * 1000U;
 8004df4:	8b3b      	ldrh	r3, [r7, #24]
 8004df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dfa:	fb03 f202 	mul.w	r2, r3, r2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	671a      	str	r2, [r3, #112]	; 0x70
    SDO_C->timeoutTimer 		= 0;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	675a      	str	r2, [r3, #116]	; 0x74
    CO_fifo_reset(&SDO_C->bufFifo);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3378      	adds	r3, #120	; 0x78
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fc20 	bl	8004652 <CO_fifo_reset>

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* if node-ID of the SDO server is the same as node-ID of this node, then transfer data within this node */
    if ((SDO_C->OD != NULL) && (SDO_C->nodeId != 0U) && (SDO_C->nodeIDOfTheSDOServer == SDO_C->nodeId)) {
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d012      	beq.n	8004e40 <CO_SDOclientDownloadInitiate+0x94>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00e      	beq.n	8004e40 <CO_SDOclientDownloadInitiate+0x94>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	791b      	ldrb	r3, [r3, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d107      	bne.n	8004e40 <CO_SDOclientDownloadInitiate+0x94>
        SDO_C->OD_IO.write = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
        SDO_C->state = CO_SDO_ST_DOWNLOAD_LOCAL_TRANSFER;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004e3e:	e011      	b.n	8004e64 <CO_SDOclientDownloadInitiate+0xb8>
    } else
#endif
#if (CO_CONFIG_SDO_CLI&&CO_CONFIG_SDO_CLI_BLOCK)!=0
        if (blockEnable && ((sizeIndicated == 0U) || (sizeIndicated > (size_t)(CO_CONFIG_SDO_CLI_PST)))) {
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <CO_SDOclientDownloadInitiate+0xb0>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <CO_SDOclientDownloadInitiate+0xa6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d904      	bls.n	8004e5c <CO_SDOclientDownloadInitiate+0xb0>
        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2251      	movs	r2, #81	; 0x51
 8004e56:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004e5a:	e003      	b.n	8004e64 <CO_SDOclientDownloadInitiate+0xb8>
    } else
#endif
    {
        SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2211      	movs	r2, #17
 8004e60:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

    return CO_SDO_RT_ok_communicationEnd;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <CO_SDOclientDownloadInitSize>:



void
CO_SDOclientDownloadInitSize(CO_SDOclient_t* SDO_C, size_t sizeIndicated) {
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
    if (SDO_C != NULL) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d012      	beq.n	8004eac <CO_SDOclientDownloadInitSize+0x36>
        SDO_C->sizeInd = sizeIndicated;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        if ((SDO_C->state == CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ) && (sizeIndicated > 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b51      	cmp	r3, #81	; 0x51
 8004e96:	d109      	bne.n	8004eac <CO_SDOclientDownloadInitSize+0x36>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <CO_SDOclientDownloadInitSize+0x36>
            && (sizeIndicated <= (size_t)(CO_CONFIG_SDO_CLI_PST))) {
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b15      	cmp	r3, #21
 8004ea2:	d803      	bhi.n	8004eac <CO_SDOclientDownloadInitSize+0x36>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2211      	movs	r2, #17
 8004ea8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        }
#endif
    }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <CO_SDOclientDownloadBufWrite>:

size_t
CO_SDOclientDownloadBufWrite(CO_SDOclient_t* SDO_C, const uint8_t* buf, size_t count) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
    if ((SDO_C != NULL) && (buf != NULL)) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <CO_SDOclientDownloadBufWrite+0x2e>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <CO_SDOclientDownloadBufWrite+0x2e>
        ret = CO_fifo_write(&SDO_C->bufFifo, buf, count, NULL);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004eda:	2300      	movs	r3, #0
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	f004 ff94 	bl	8009e0c <CO_fifo_write>
 8004ee4:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <CO_SDOclientDownload>:

CO_SDO_return_t
CO_SDOclientDownload(CO_SDOclient_t* SDO_C, uint32_t timeDifference_us, bool_t send_abort, bool_t bufferPartial,
                     CO_SDO_abortCode_t* SDOabortCode, size_t* sizeTransferred, uint32_t* timerNext_us) {
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8004efc:	f2a4 443c 	subw	r4, r4, #1084	; 0x43c
 8004f00:	6020      	str	r0, [r4, #0]
 8004f02:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 8004f06:	f5a0 6088 	sub.w	r0, r0, #1088	; 0x440
 8004f0a:	6001      	str	r1, [r0, #0]
 8004f0c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004f10:	f2a1 4144 	subw	r1, r1, #1092	; 0x444
 8004f14:	600a      	str	r2, [r1, #0]
 8004f16:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8004f1a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8004f1e:	6013      	str	r3, [r2, #0]
    (void)timerNext_us;
    (void)bufferPartial; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

    if ((SDO_C == NULL) || !SDO_C->valid) {
 8004f2c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f30:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <CO_SDOclientDownload+0x5a>
 8004f3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <CO_SDOclientDownload+0x6a>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004f4a:	4b93      	ldr	r3, [pc, #588]	; (8005198 <CO_SDOclientDownload+0x2a8>)
 8004f4c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ret = CO_SDO_RT_wrongArguments;
 8004f50:	23fe      	movs	r3, #254	; 0xfe
 8004f52:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004f56:	f000 bda2 	b.w	8005a9e <CO_SDOclientDownload+0xbae>
    } else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8004f5a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f5e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <CO_SDOclientDownload+0x88>
        ret = CO_SDO_RT_ok_communicationEnd;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004f74:	f000 bd93 	b.w	8005a9e <CO_SDOclientDownload+0xbae>
    }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* Transfer data locally */
    else if ((SDO_C->state == CO_SDO_ST_DOWNLOAD_LOCAL_TRANSFER) && !send_abort) {
 8004f78:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f7c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	f040 8246 	bne.w	800541a <CO_SDOclientDownload+0x52a>
 8004f8e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004f92:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 823e 	bne.w	800541a <CO_SDOclientDownload+0x52a>
        /* search object dictionary in first pass */
        if (SDO_C->OD_IO.write == NULL)
 8004f9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fa2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d163      	bne.n	8005076 <CO_SDOclientDownload+0x186>
        {
            ODR_t odRet;
            odRet = OD_getSub(OD_find(SDO_C->OD, SDO_C->index), SDO_C->subIndex, &SDO_C->OD_IO, false);
 8004fae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fb2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fbe:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7fd fcec 	bl	80029a8 <OD_find>
 8004fd0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fd4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 8004fde:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004fe2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f103 0208 	add.w	r2, r3, #8
 8004fec:	2300      	movs	r3, #0
 8004fee:	f7fd fd37 	bl	8002a60 <OD_getSub>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b

            if (odRet != ODR_OK) {
 8004ff8:	f997 343b 	ldrsb.w	r3, [r7, #1083]	; 0x43b
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <CO_SDOclientDownload+0x126>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8005000:	f997 343b 	ldrsb.w	r3, [r7, #1083]	; 0x43b
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fe23 	bl	8002c50 <OD_getSDOabCode>
 800500a:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 800500e:	23f7      	movs	r3, #247	; 0xf7
 8005010:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005014:	e02f      	b.n	8005076 <CO_SDOclientDownload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8005016:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800501a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	7e1b      	ldrb	r3, [r3, #24]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <CO_SDOclientDownload+0x148>
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <CO_SDOclientDownload+0x2ac>)
 800502c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8005030:	23f7      	movs	r3, #247	; 0xf7
 8005032:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005036:	e01e      	b.n	8005076 <CO_SDOclientDownload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U) {
 8005038:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800503c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	7e1b      	ldrb	r3, [r3, #24]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <CO_SDOclientDownload+0x16a>
                abortCode = CO_SDO_AB_READONLY;
 800504c:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <CO_SDOclientDownload+0x2b0>)
 800504e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8005052:	23f7      	movs	r3, #247	; 0xf7
 8005054:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005058:	e00d      	b.n	8005076 <CO_SDOclientDownload+0x186>
            } else if (SDO_C->OD_IO.write == NULL) {
 800505a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800505e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <CO_SDOclientDownload+0x186>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800506a:	4b4b      	ldr	r3, [pc, #300]	; (8005198 <CO_SDOclientDownload+0x2a8>)
 800506c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8005070:	23f7      	movs	r3, #247	; 0xf7
 8005072:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
            } else { /* MISRA C 2004 14.10 */
            }
        }

        /* write data, in several passes if necessary */
        if (SDO_C->OD_IO.write != NULL)
 8005076:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800507a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 81b2 	beq.w	80053ec <CO_SDOclientDownload+0x4fc>
        {
            size_t count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8005088:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800508c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3378      	adds	r3, #120	; 0x78
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fb0f 	bl	80046b8 <CO_fifo_getOccupied>
 800509a:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
            uint8_t buf[CO_CONFIG_SDO_CLI_BUFFER_SIZE + 2U];

            (void)CO_fifo_read(&SDO_C->bufFifo, buf, count, NULL);
 800509e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050a2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80050ac:	f107 0114 	add.w	r1, r7, #20
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80050b6:	f004 ff01 	bl	8009ebc <CO_fifo_read>
            SDO_C->sizeTran += count;
 80050ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050be:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050c6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80050ca:	441a      	add	r2, r3
 80050cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	669a      	str	r2, [r3, #104]	; 0x68

            /* error: no data */
            if ((count == 0U) || (count > CO_CONFIG_SDO_CLI_BUFFER_SIZE)) {
 80050d8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <CO_SDOclientDownload+0x1fa>
 80050e0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80050e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e8:	d906      	bls.n	80050f8 <CO_SDOclientDownload+0x208>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80050ea:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <CO_SDOclientDownload+0x2a8>)
 80050ec:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 80050f0:	23f7      	movs	r3, #247	; 0xf7
 80050f2:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80050f6:	e0fe      	b.n	80052f6 <CO_SDOclientDownload+0x406>
            }
            /* verify if sizeTran is too large */
            else if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 80050f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80050fc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005104:	2b00      	cmp	r3, #0
 8005106:	d023      	beq.n	8005150 <CO_SDOclientDownload+0x260>
 8005108:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800510c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005114:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005118:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005120:	429a      	cmp	r2, r3
 8005122:	d915      	bls.n	8005150 <CO_SDOclientDownload+0x260>
                SDO_C->sizeTran -= count;
 8005124:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005128:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005130:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800513a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	669a      	str	r2, [r3, #104]	; 0x68
                abortCode = CO_SDO_AB_DATA_LONG;
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <CO_SDOclientDownload+0x2b4>)
 8005144:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8005148:	23f7      	movs	r3, #247	; 0xf7
 800514a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 800514e:	e0d2      	b.n	80052f6 <CO_SDOclientDownload+0x406>
            }
            /* Verify sizeTran is too small in last segment of data */
            else if (!bufferPartial && (SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8005150:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005154:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d126      	bne.n	80051ac <CO_SDOclientDownload+0x2bc>
 800515e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005162:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01e      	beq.n	80051ac <CO_SDOclientDownload+0x2bc>
 800516e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005172:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800517a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800517e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005186:	429a      	cmp	r2, r3
 8005188:	d210      	bcs.n	80051ac <CO_SDOclientDownload+0x2bc>
                abortCode = CO_SDO_AB_DATA_SHORT;
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <CO_SDOclientDownload+0x2b8>)
 800518c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                ret = CO_SDO_RT_endedWithClientAbort;
 8005190:	23f7      	movs	r3, #247	; 0xf7
 8005192:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005196:	e0ae      	b.n	80052f6 <CO_SDOclientDownload+0x406>
 8005198:	06040047 	.word	0x06040047
 800519c:	06010000 	.word	0x06010000
 80051a0:	06010002 	.word	0x06010002
 80051a4:	06070012 	.word	0x06070012
 80051a8:	06070013 	.word	0x06070013
            }
            /* is the last segment of data? */
            else if (!bufferPartial) {
 80051ac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051b0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 809d 	bne.w	80052f6 <CO_SDOclientDownload+0x406>
                if ((SDO_C->OD_IO.stream.attribute & ODA_MB) != 0) {reverseBytes(buf, count); }


#endif

                OD_size_t sizeInOd = SDO_C->OD_IO.stream.dataLength;
 80051bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434

                /* If dataType is string, then size of data downloaded may be shorter than size of
                 * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
                 * also OD data size, (temporary, send info about EOF into OD_IO.write) */
                if (
                	 (SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U
 80051cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	7e1b      	ldrb	r3, [r3, #24]
 80051d8:	b25b      	sxtb	r3, r3
                if (
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da5e      	bge.n	800529c <CO_SDOclientDownload+0x3ac>
                    &&
 80051de:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <CO_SDOclientDownload+0x30a>
					 ((sizeInOd == 0U) || (SDO_C->sizeTran < sizeInOd))
 80051e6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051ea:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f2:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d950      	bls.n	800529c <CO_SDOclientDownload+0x3ac>
					) {
                       buf[count] = 0;
 80051fa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80051fe:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8005202:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8005206:	4413      	add	r3, r2
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
                       count++;
 800520c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8005210:	3301      	adds	r3, #1
 8005212:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
                       SDO_C->sizeTran++;
 8005216:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800521a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005228:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	669a      	str	r2, [r3, #104]	; 0x68
						if ( (sizeInOd == 0U) || (sizeInOd > SDO_C->sizeTran) )
 8005230:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <CO_SDOclientDownload+0x35c>
 8005238:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800523c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005244:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8005248:	429a      	cmp	r2, r3
 800524a:	d91a      	bls.n	8005282 <CO_SDOclientDownload+0x392>
							{
							buf[count] = 0;
 800524c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005250:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8005254:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8005258:	4413      	add	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
							count++;
 800525e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8005262:	3301      	adds	r3, #1
 8005264:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
							SDO_C->sizeTran++;
 8005268:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800526c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800527a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	669a      	str	r2, [r3, #104]	; 0x68
							}
						SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran;
 8005282:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005286:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800528e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005292:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e02c      	b.n	80052f6 <CO_SDOclientDownload+0x406>
                      }


                		else if (sizeInOd == 0U) /* Indicate OD data size, if necessary. Used for EOF check. */
 800529c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <CO_SDOclientDownload+0x3ce>
                		{
                		SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran;
 80052a4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052a8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052b0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052b4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	611a      	str	r2, [r3, #16]
 80052bc:	e01b      	b.n	80052f6 <CO_SDOclientDownload+0x406>
                		}

                		else if (SDO_C->sizeTran != sizeInOd) /* Verify if size of data downloaded matches data size in OD. */
 80052be:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052c2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ca:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d011      	beq.n	80052f6 <CO_SDOclientDownload+0x406>
                		{
                		abortCode = (SDO_C->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80052d2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80052d6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052de:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d201      	bcs.n	80052ea <CO_SDOclientDownload+0x3fa>
 80052e6:	4bc2      	ldr	r3, [pc, #776]	; (80055f0 <CO_SDOclientDownload+0x700>)
 80052e8:	e000      	b.n	80052ec <CO_SDOclientDownload+0x3fc>
 80052ea:	4bc2      	ldr	r3, [pc, #776]	; (80055f4 <CO_SDOclientDownload+0x704>)
 80052ec:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                		ret = CO_SDO_RT_endedWithClientAbort;
 80052f0:	23f7      	movs	r3, #247	; 0xf7
 80052f2:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                		} else { } /* MISRA C 2004 14.10 */

            } else { /* MISRA C 2004 14.10 */
            }

            if (abortCode == CO_SDO_AB_NONE) {
 80052f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d176      	bne.n	80053ec <CO_SDOclientDownload+0x4fc>
                OD_size_t countWritten = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

                /* write data to Object Dictionary */
                CO_LOCK_OD(SDO_C->CANdevTx);
 8005304:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005308:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005310:	f3ef 8210 	mrs	r2, PRIMASK
 8005314:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
  return(result);
 8005318:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800531c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800531e:	b672      	cpsid	i
}
 8005320:	bf00      	nop
                ODR_t odRet = SDO_C->OD_IO.write(&SDO_C->OD_IO.stream, buf, (OD_size_t)count, &countWritten);
 8005322:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005326:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800532e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005332:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f103 0008 	add.w	r0, r3, #8
 800533c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005340:	f107 0114 	add.w	r1, r7, #20
 8005344:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8005348:	47a0      	blx	r4
 800534a:	4603      	mov	r3, r0
 800534c:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
                CO_UNLOCK_OD(SDO_C->CANdevTx);
 8005350:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005354:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8005366:	f383 8810 	msr	PRIMASK, r3
}
 800536a:	bf00      	nop

                /* verify for errors in write */
                if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 800536c:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00f      	beq.n	8005394 <CO_SDOclientDownload+0x4a4>
 8005374:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d00a      	beq.n	8005394 <CO_SDOclientDownload+0x4a4>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800537e:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 8005382:	4618      	mov	r0, r3
 8005384:	f7fd fc64 	bl	8002c50 <OD_getSDOabCode>
 8005388:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
                    ret = CO_SDO_RT_endedWithServerAbort;
 800538c:	23f6      	movs	r3, #246	; 0xf6
 800538e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005392:	e02b      	b.n	80053ec <CO_SDOclientDownload+0x4fc>
                }
                /* error if OD variable was written completely, but SDO download still has data */
                else if (bufferPartial && (odRet == ODR_OK)) {
 8005394:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005398:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <CO_SDOclientDownload+0x4c8>
 80053a2:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <CO_SDOclientDownload+0x4c8>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80053aa:	4b91      	ldr	r3, [pc, #580]	; (80055f0 <CO_SDOclientDownload+0x700>)
 80053ac:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    ret = CO_SDO_RT_endedWithClientAbort;
 80053b0:	23f7      	movs	r3, #247	; 0xf7
 80053b2:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80053b6:	e019      	b.n	80053ec <CO_SDOclientDownload+0x4fc>
                }
                /* is end of transfer? */
                else if (!bufferPartial) {
 80053b8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053bc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <CO_SDOclientDownload+0x4f6>
                    /* error if OD variable was not written completely, but SDO download finished */
                    if (odRet == ODR_PARTIAL) {
 80053c6:	f997 3433 	ldrsb.w	r3, [r7, #1075]	; 0x433
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d106      	bne.n	80053de <CO_SDOclientDownload+0x4ee>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 80053d0:	4b88      	ldr	r3, [pc, #544]	; (80055f4 <CO_SDOclientDownload+0x704>)
 80053d2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        ret = CO_SDO_RT_endedWithClientAbort;
 80053d6:	23f7      	movs	r3, #247	; 0xf7
 80053d8:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80053dc:	e006      	b.n	80053ec <CO_SDOclientDownload+0x4fc>
                    }
                    /* data transfer finished successfully */
                    else {
                        ret = CO_SDO_RT_ok_communicationEnd;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80053e4:	e002      	b.n	80053ec <CO_SDOclientDownload+0x4fc>
                    }
                } else {
                    ret = CO_SDO_RT_waitingLocalTransfer;
 80053e6:	2306      	movs	r3, #6
 80053e8:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                }
            }
        }

        if (ret != CO_SDO_RT_waitingLocalTransfer)
 80053ec:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d008      	beq.n	8005406 <CO_SDOclientDownload+0x516>
        	{ SDO_C->state = CO_SDO_ST_IDLE; }
 80053f4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80053f8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8005404:	e34a      	b.n	8005a9c <CO_SDOclientDownload+0xbac>


#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        /* Inform OS to call this function again without delay. */
        		else if (timerNext_us != NULL) {*timerNext_us = 0;}
 8005406:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8346 	beq.w	8005a9c <CO_SDOclientDownload+0xbac>
 8005410:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8005418:	e340      	b.n	8005a9c <CO_SDOclientDownload+0xbac>
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */


    /* CAN data received */
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 800541a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800541e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 831c 	beq.w	8005a66 <CO_SDOclientDownload+0xb76>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80U) {
 800542e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005432:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d119      	bne.n	8005474 <CO_SDOclientDownload+0x584>
            uint32_t code;
            (void)memcpy((void*)(&code), (const void*)(&SDO_C->CANrxData[4]), sizeof(code));
 8005440:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005444:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8005454:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8005458:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_IDLE;
 800545c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005460:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithServerAbort;
 800546c:	23f6      	movs	r3, #246	; 0xf6
 800546e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8005472:	e2e2      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
        } else if (send_abort) {
 8005474:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005478:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <CO_SDOclientDownload+0x5ba>
            abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8005482:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <CO_SDOclientDownload+0x5a2>
 800548a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	e000      	b.n	8005494 <CO_SDOclientDownload+0x5a4>
 8005492:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <CO_SDOclientDownload+0x708>)
 8005494:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_ABORT;
 8005498:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800549c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80054a8:	e2c7      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
        } else {
            switch (SDO_C->state) {
 80054aa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054ae:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b56      	cmp	r3, #86	; 0x56
 80054bc:	f300 82b0 	bgt.w	8005a20 <CO_SDOclientDownload+0xb30>
 80054c0:	2b52      	cmp	r3, #82	; 0x52
 80054c2:	da05      	bge.n	80054d0 <CO_SDOclientDownload+0x5e0>
 80054c4:	2b12      	cmp	r3, #18
 80054c6:	d015      	beq.n	80054f4 <CO_SDOclientDownload+0x604>
 80054c8:	2b14      	cmp	r3, #20
 80054ca:	f000 809b 	beq.w	8005604 <CO_SDOclientDownload+0x714>
 80054ce:	e2a7      	b.n	8005a20 <CO_SDOclientDownload+0xb30>
 80054d0:	3b52      	subs	r3, #82	; 0x52
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	f200 82a4 	bhi.w	8005a20 <CO_SDOclientDownload+0xb30>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <CO_SDOclientDownload+0x5f0>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	080056cd 	.word	0x080056cd
 80054e4:	08005a39 	.word	0x08005a39
 80054e8:	0800581b 	.word	0x0800581b
 80054ec:	08005a21 	.word	0x08005a21
 80054f0:	080059df 	.word	0x080059df
                case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                    if (SDO_C->CANrxData[0] == 0x60U) {
 80054f4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80054f8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005502:	2b60      	cmp	r3, #96	; 0x60
 8005504:	d167      	bne.n	80055d6 <CO_SDOclientDownload+0x6e6>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8005506:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800550a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8005514:	b29b      	uxth	r3, r3
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
                        index |= SDO_C->CANrxData[1];
 800551c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005520:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800552a:	b29a      	uxth	r2, r3
 800552c:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8005530:	4313      	orrs	r3, r2
 8005532:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
                        subindex = SDO_C->CANrxData[3];
 8005536:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800553a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8005544:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8005548:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800554c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005556:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 800555a:	429a      	cmp	r2, r3
 800555c:	d10a      	bne.n	8005574 <CO_SDOclientDownload+0x684>
 800555e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005562:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800556c:	f897 2425 	ldrb.w	r2, [r7, #1061]	; 0x425
 8005570:	429a      	cmp	r2, r3
 8005572:	d00b      	beq.n	800558c <CO_SDOclientDownload+0x69c>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8005574:	4b21      	ldr	r3, [pc, #132]	; (80055fc <CO_SDOclientDownload+0x70c>)
 8005576:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 800557a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800557e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 800558a:	e256      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        }

#if (CO_CONFIG_SDO_CLI&&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                        if (SDO_C->finished) {
 800558c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005590:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <CO_SDOclientDownload+0x6c4>
                            /* expedited transfer */
                            SDO_C->state = CO_SDO_ST_IDLE;
 800559c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055a0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
#endif
                    } else {
                        	abortCode = CO_SDO_AB_CMD;
                        	SDO_C->state = CO_SDO_ST_ABORT;
                    		}
                    break;
 80055b2:	e242      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                            SDO_C->toggle = 0x00;
 80055b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055b8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80055c4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055c8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2213      	movs	r2, #19
 80055d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80055d4:	e231      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        	abortCode = CO_SDO_AB_CMD;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <CO_SDOclientDownload+0x710>)
 80055d8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        	SDO_C->state = CO_SDO_ST_ABORT;
 80055dc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80055e0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80055ec:	e225      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
 80055ee:	bf00      	nop
 80055f0:	06070012 	.word	0x06070012
 80055f4:	06070013 	.word	0x06070013
 80055f8:	06040047 	.word	0x06040047
 80055fc:	06040043 	.word	0x06040043
 8005600:	05040001 	.word	0x05040001
                }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xEFU) == 0x20U) {
 8005604:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005608:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005612:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005616:	2b20      	cmp	r3, #32
 8005618:	d14c      	bne.n	80056b4 <CO_SDOclientDownload+0x7c4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO_C->CANrxData[0] & 0x10U;
 800561a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800561e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
                        if (toggle != SDO_C->toggle) {
 8005630:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005634:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800563e:	f897 2428 	ldrb.w	r2, [r7, #1064]	; 0x428
 8005642:	429a      	cmp	r2, r3
 8005644:	d00b      	beq.n	800565e <CO_SDOclientDownload+0x76e>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8005646:	4bc8      	ldr	r3, [pc, #800]	; (8005968 <CO_SDOclientDownload+0xa78>)
 8005648:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 800564c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005650:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 800565c:	e1ed      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        }
                        SDO_C->toggle = (toggle == 0x00U) ? 0x10U : 0x00U;
 800565e:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <CO_SDOclientDownload+0x77a>
 8005666:	2210      	movs	r2, #16
 8005668:	e000      	b.n	800566c <CO_SDOclientDownload+0x77c>
 800566a:	2200      	movs	r2, #0
 800566c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005670:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

                        /* is end of transfer? */
                        if (SDO_C->finished) {
 800567a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800567e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <CO_SDOclientDownload+0x7b2>
                            SDO_C->state = CO_SDO_ST_IDLE;
 800568a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800568e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80056a0:	e1cb      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80056a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056a6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2213      	movs	r2, #19
 80056ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80056b2:	e1c2      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 80056b4:	4bad      	ldr	r3, [pc, #692]	; (800596c <CO_SDOclientDownload+0xa7c>)
 80056b6:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 80056ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056be:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80056ca:	e1b6      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_SEGMENTED */

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
                case CO_SDO_ST_DOWNLOAD_BLK_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xFBU) == 0xA0U) {
 80056cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80056da:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80056de:	2ba0      	cmp	r3, #160	; 0xa0
 80056e0:	f040 808f 	bne.w	8005802 <CO_SDOclientDownload+0x912>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 80056e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056e8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
                        index |= SDO_C->CANrxData[1];
 80056fa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80056fe:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8005708:	b29a      	uxth	r2, r3
 800570a:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 800570e:	4313      	orrs	r3, r2
 8005710:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
                        subindex = SDO_C->CANrxData[3];
 8005714:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005718:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8005722:	f887 3429 	strb.w	r3, [r7, #1065]	; 0x429
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8005726:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800572a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005734:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 8005738:	429a      	cmp	r2, r3
 800573a:	d10a      	bne.n	8005752 <CO_SDOclientDownload+0x862>
 800573c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005740:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800574a:	f897 2429 	ldrb.w	r2, [r7, #1065]	; 0x429
 800574e:	429a      	cmp	r2, r3
 8005750:	d00b      	beq.n	800576a <CO_SDOclientDownload+0x87a>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8005752:	4b87      	ldr	r3, [pc, #540]	; (8005970 <CO_SDOclientDownload+0xa80>)
 8005754:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 8005758:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800575c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8005768:	e167      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        }

                        SDO_C->block_crc = 0;
 800576a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800576e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
                        SDO_C->block_blksize = SDO_C->CANrxData[4];
 800577a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800577e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f893 2488 	ldrb.w	r2, [r3, #1160]	; 0x488
 8005788:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800578c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                        if ((SDO_C->block_blksize < 1U) || (SDO_C->block_blksize > 127U)) {
 8005796:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800579a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <CO_SDOclientDownload+0x8cc>
 80057a8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057ac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da07      	bge.n	80057cc <CO_SDOclientDownload+0x8dc>
                            SDO_C->block_blksize = 127;
 80057bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	227f      	movs	r2, #127	; 0x7f
 80057c8:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                        }
                        SDO_C->block_seqno = 0;
 80057cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                        (void)CO_fifo_altBegin(&SDO_C->bufFifo, 0);
 80057dc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057e0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3378      	adds	r3, #120	; 0x78
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 fbd0 	bl	8009f90 <CO_fifo_altBegin>
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 80057f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80057f4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2253      	movs	r2, #83	; 0x53
 80057fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    } else {
                           abortCode = CO_SDO_AB_CMD;
                           SDO_C->state = CO_SDO_ST_ABORT;
                           }
                    break;
 8005800:	e11b      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                           abortCode = CO_SDO_AB_CMD;
 8005802:	4b5a      	ldr	r3, [pc, #360]	; (800596c <CO_SDOclientDownload+0xa7c>)
 8005804:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                           SDO_C->state = CO_SDO_ST_ABORT;
 8005808:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800580c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005818:	e10f      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                }

                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ: break;
                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP:
                {
                    if (SDO_C->CANrxData[0] == 0xA2U) {
 800581a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800581e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8005828:	2ba2      	cmp	r3, #162	; 0xa2
 800582a:	f040 80cc 	bne.w	80059c6 <CO_SDOclientDownload+0xad6>
                        /* check number of segments */
                        if (SDO_C->CANrxData[1] < SDO_C->block_seqno) {
 800582e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005832:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800583c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005840:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800584a:	429a      	cmp	r2, r3
 800584c:	d24d      	bcs.n	80058ea <CO_SDOclientDownload+0x9fa>
                            /* NOT all segments transferred successfully. Re-transmit data after erroneous segment. */
                            size_t cntFailed = (size_t)(SDO_C->block_seqno) - (size_t)(SDO_C->CANrxData[1]);
 800584e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005852:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800585c:	461a      	mov	r2, r3
 800585e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005862:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
                            cntFailed = (cntFailed * 7U) - SDO_C->block_noData;
 8005872:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8005880:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	f892 24a2 	ldrb.w	r2, [r2, #1186]	; 0x4a2
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
                            SDO_C->sizeTran -= cntFailed;
 8005890:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005894:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800589c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058a6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	669a      	str	r2, [r3, #104]	; 0x68
                            (void)CO_fifo_altBegin(&SDO_C->bufFifo, (size_t)SDO_C->CANrxData[1] * 7U);
 80058ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058b2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80058bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80058ca:	4619      	mov	r1, r3
 80058cc:	460b      	mov	r3, r1
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	1a5b      	subs	r3, r3, r1
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f004 fb5b 	bl	8009f90 <CO_fifo_altBegin>
                            SDO_C->finished = false;
 80058da:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058de:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
 80058e8:	e01b      	b.n	8005922 <CO_SDOclientDownload+0xa32>
                        } else if (SDO_C->CANrxData[1] > SDO_C->block_seqno) {
 80058ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058ee:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 80058f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80058fc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8005906:	429a      	cmp	r2, r3
 8005908:	d90b      	bls.n	8005922 <CO_SDOclientDownload+0xa32>
                            /* something strange from server, break transmission */
                            abortCode = CO_SDO_AB_CMD;
 800590a:	4b18      	ldr	r3, [pc, #96]	; (800596c <CO_SDOclientDownload+0xa7c>)
 800590c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                            SDO_C->state = CO_SDO_ST_ABORT;
 8005910:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005914:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8005920:	e08b      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* confirm successfully transmitted data */
                        CO_fifo_altFinish(&SDO_C->bufFifo, &SDO_C->block_crc);
 8005922:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005926:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8005930:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005934:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800593e:	4619      	mov	r1, r3
 8005940:	4610      	mov	r0, r2
 8005942:	f004 fb5b 	bl	8009ffc <CO_fifo_altFinish>

                        if (SDO_C->finished) {
 8005946:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800594a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00e      	beq.n	8005974 <CO_SDOclientDownload+0xa84>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_END_REQ;
 8005956:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800595a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2255      	movs	r2, #85	; 0x55
 8005962:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8005966:	e068      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
 8005968:	05030000 	.word	0x05030000
 800596c:	05040001 	.word	0x05040001
 8005970:	06040043 	.word	0x06040043
                            SDO_C->block_blksize = SDO_C->CANrxData[2];
 8005974:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005978:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f893 2486 	ldrb.w	r2, [r3, #1158]	; 0x486
 8005982:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005986:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                            SDO_C->block_seqno = 0;
 8005990:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005994:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                            (void)CO_fifo_altBegin(&SDO_C->bufFifo, 0);
 80059a0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059a4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3378      	adds	r3, #120	; 0x78
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f004 faee 	bl	8009f90 <CO_fifo_altBegin>
                            SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 80059b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059b8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2253      	movs	r2, #83	; 0x53
 80059c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80059c4:	e039      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 80059c6:	4b83      	ldr	r3, [pc, #524]	; (8005bd4 <CO_SDOclientDownload+0xce4>)
 80059c8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 80059cc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059d0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 80059dc:	e02d      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                }

                case CO_SDO_ST_DOWNLOAD_BLK_END_RSP: {
                    if (SDO_C->CANrxData[0] == 0xA1U) {
 80059de:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059e2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80059ec:	2ba1      	cmp	r3, #161	; 0xa1
 80059ee:	d10b      	bne.n	8005a08 <CO_SDOclientDownload+0xb18>
                        /*  SDO block download successfully transferred */
                        SDO_C->state = CO_SDO_ST_IDLE;
 80059f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80059f4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        ret = CO_SDO_RT_ok_communicationEnd;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8005a06:	e018      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                        abortCode = CO_SDO_AB_CMD;
 8005a08:	4b72      	ldr	r3, [pc, #456]	; (8005bd4 <CO_SDOclientDownload+0xce4>)
 8005a0a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 8005a0e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a12:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005a1e:	e00c      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
                case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
                default: {
                    abortCode = CO_SDO_AB_CMD;
 8005a20:	4b6c      	ldr	r3, [pc, #432]	; (8005bd4 <CO_SDOclientDownload+0xce4>)
 8005a22:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8005a26:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a2a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005a36:	e000      	b.n	8005a3a <CO_SDOclientDownload+0xb4a>
                case CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ: break;
 8005a38:	bf00      	nop
                }
            }
        }
        SDO_C->timeoutTimer = 0;
 8005a3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	675a      	str	r2, [r3, #116]	; 0x74
        timeDifference_us = 0;
 8005a48:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a4c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8005a54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a58:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8005a64:	e01b      	b.n	8005a9e <CO_SDOclientDownload+0xbae>
    } else if (send_abort) {
 8005a66:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a6a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d014      	beq.n	8005a9e <CO_SDOclientDownload+0xbae>
        abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8005a74:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <CO_SDOclientDownload+0xb94>
 8005a7c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	e000      	b.n	8005a86 <CO_SDOclientDownload+0xb96>
 8005a84:	4b54      	ldr	r3, [pc, #336]	; (8005bd8 <CO_SDOclientDownload+0xce8>)
 8005a86:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        SDO_C->state = CO_SDO_ST_ABORT;
 8005a8a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005a8e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005a9a:	e000      	b.n	8005a9e <CO_SDOclientDownload+0xbae>
        if (ret != CO_SDO_RT_waitingLocalTransfer)
 8005a9c:	bf00      	nop
    } else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag */
    if (ret == CO_SDO_RT_waitingResponse) {
 8005a9e:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d164      	bne.n	8005b70 <CO_SDOclientDownload+0xc80>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8005aa6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005aaa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ab2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ab6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d211      	bcs.n	8005ae6 <CO_SDOclientDownload+0xbf6>
            SDO_C->timeoutTimer += timeDifference_us;
 8005ac2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ac6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ace:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ad2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	441a      	add	r2, r3
 8005ada:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ade:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	675a      	str	r2, [r3, #116]	; 0x74
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8005ae6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005aea:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005af2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005af6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d30b      	bcc.n	8005b1a <CO_SDOclientDownload+0xc2a>
            abortCode = CO_SDO_AB_TIMEOUT;
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <CO_SDOclientDownload+0xcec>)
 8005b04:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            SDO_C->state = CO_SDO_ST_ABORT;
 8005b08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b0c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005b18:	e01e      	b.n	8005b58 <CO_SDOclientDownload+0xc68>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        else if (timerNext_us != NULL) {
 8005b1a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01a      	beq.n	8005b58 <CO_SDOclientDownload+0xc68>
            /* check again after timeout time elapsed */
            uint32_t diff = SDO_C->SDOtimeoutTime_us - SDO_C->timeoutTimer;
 8005b22:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b26:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b2e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b32:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            if (*timerNext_us > diff) {
 8005b40:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d204      	bcs.n	8005b58 <CO_SDOclientDownload+0xc68>
                *timerNext_us = diff;
 8005b4e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8005b52:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8005b56:	601a      	str	r2, [r3, #0]
            }
        } else { /* MISRA C 2004 14.10 */
        }
#endif
        if (SDO_C->CANtxBuff->bufferFull) {
 8005b58:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b5c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <CO_SDOclientDownload+0xc80>
            ret = CO_SDO_RT_transmittBufferFull;
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
        }
    }

    /* Transmit CAN data */
    if (ret == CO_SDO_RT_waitingResponse) {
 8005b70:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	f040 8432 	bne.w	80063de <CO_SDOclientDownload+0x14ee>
        size_t count;
        (void)memset((void*)&SDO_C->CANtxBuff->data[0], 0, 8);
 8005b7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	3305      	adds	r3, #5
 8005b88:	2208      	movs	r2, #8
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f019 fd55 	bl	801f63c <memset>

        switch (SDO_C->state) {
 8005b92:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005b96:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b55      	cmp	r3, #85	; 0x55
 8005ba4:	f000 83c5 	beq.w	8006332 <CO_SDOclientDownload+0x1442>
 8005ba8:	2b55      	cmp	r3, #85	; 0x55
 8005baa:	f300 8415 	bgt.w	80063d8 <CO_SDOclientDownload+0x14e8>
 8005bae:	2b53      	cmp	r3, #83	; 0x53
 8005bb0:	f000 829d 	beq.w	80060ee <CO_SDOclientDownload+0x11fe>
 8005bb4:	2b53      	cmp	r3, #83	; 0x53
 8005bb6:	f300 840f 	bgt.w	80063d8 <CO_SDOclientDownload+0x14e8>
 8005bba:	2b51      	cmp	r3, #81	; 0x51
 8005bbc:	f000 8216 	beq.w	8005fec <CO_SDOclientDownload+0x10fc>
 8005bc0:	2b51      	cmp	r3, #81	; 0x51
 8005bc2:	f300 8409 	bgt.w	80063d8 <CO_SDOclientDownload+0x14e8>
 8005bc6:	2b11      	cmp	r3, #17
 8005bc8:	d00a      	beq.n	8005be0 <CO_SDOclientDownload+0xcf0>
 8005bca:	2b13      	cmp	r3, #19
 8005bcc:	f000 812e 	beq.w	8005e2c <CO_SDOclientDownload+0xf3c>
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8005bd0:	f000 bc02 	b.w	80063d8 <CO_SDOclientDownload+0x14e8>
 8005bd4:	05040001 	.word	0x05040001
 8005bd8:	06040047 	.word	0x06040047
 8005bdc:	05040000 	.word	0x05040000
                SDO_C->CANtxBuff->data[0] = 0x20;
 8005be0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005be4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2220      	movs	r2, #32
 8005bee:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8005bf0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005bf4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005bfe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c02:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8005c0e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c12:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c24:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8005c30:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c34:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8005c40:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8005c4a:	721a      	strb	r2, [r3, #8]
                count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8005c4c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c50:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3378      	adds	r3, #120	; 0x78
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fd2d 	bl	80046b8 <CO_fifo_getOccupied>
 8005c5e:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                if (((SDO_C->sizeInd == 0U) && (count <= 4U)) || ((SDO_C->sizeInd > 0U) && (SDO_C->sizeInd <= 4U))) {
 8005c62:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c66:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <CO_SDOclientDownload+0xd8a>
 8005c72:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d910      	bls.n	8005c9c <CO_SDOclientDownload+0xdac>
 8005c7a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c7e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8085 	beq.w	8005d96 <CO_SDOclientDownload+0xea6>
 8005c8c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005c90:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d87c      	bhi.n	8005d96 <CO_SDOclientDownload+0xea6>
                    SDO_C->CANtxBuff->data[0] |= 0x02U;
 8005c9c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ca0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	795a      	ldrb	r2, [r3, #5]
 8005caa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cae:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f042 0202 	orr.w	r2, r2, #2
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	715a      	strb	r2, [r3, #5]
                    if ((count == 0U) || ((SDO_C->sizeInd > 0U) && (SDO_C->sizeInd != count))) {
 8005cbe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <CO_SDOclientDownload+0xdfa>
 8005cc6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cca:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <CO_SDOclientDownload+0xe18>
 8005cd6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cda:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d00e      	beq.n	8005d08 <CO_SDOclientDownload+0xe18>
                        SDO_C->state = CO_SDO_ST_IDLE;
 8005cea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005cee:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        abortCode = CO_SDO_AB_TYPE_MISMATCH;
 8005cfa:	4bb9      	ldr	r3, [pc, #740]	; (8005fe0 <CO_SDOclientDownload+0x10f0>)
 8005cfc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        ret = CO_SDO_RT_endedWithClientAbort;
 8005d00:	23f7      	movs	r3, #247	; 0xf7
 8005d02:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
                        break;
 8005d06:	e36a      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                    if (SDO_C->sizeInd > 0U) {
 8005d08:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d0c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <CO_SDOclientDownload+0xe5e>
                        SDO_C->CANtxBuff->data[0] |= (uint8_t)(0x01U | ((4U - count) << 2));
 8005d18:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d1c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	795a      	ldrb	r2, [r3, #5]
 8005d26:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f1c3 0304 	rsb	r3, r3, #4
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	4313      	orrs	r3, r2
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	715a      	strb	r2, [r3, #5]
                    (void)CO_fifo_read(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[4], count, NULL);
 8005d4e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d52:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005d5c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d60:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	f103 0109 	add.w	r1, r3, #9
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8005d72:	f004 f8a3 	bl	8009ebc <CO_fifo_read>
                    SDO_C->sizeTran = count;
 8005d76:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d7a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8005d84:	669a      	str	r2, [r3, #104]	; 0x68
                    SDO_C->finished = true;
 8005d86:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d8a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	661a      	str	r2, [r3, #96]	; 0x60
 8005d94:	e02a      	b.n	8005dec <CO_SDOclientDownload+0xefc>
                    if (SDO_C->sizeInd > 0U) {
 8005d96:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005d9a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d022      	beq.n	8005dec <CO_SDOclientDownload+0xefc>
                        uint32_t size = CO_SWAP_32((uint32_t)SDO_C->sizeInd);
 8005da6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005daa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db2:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
                        SDO_C->CANtxBuff->data[0] |= 0x01U;
 8005db6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dba:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	795a      	ldrb	r2, [r3, #5]
 8005dc4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dc8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&size), sizeof(size));
 8005dd8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ddc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	3309      	adds	r3, #9
 8005de6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8005dea:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 8005dec:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005df0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005dfa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005dfe:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e06:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e0a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f00d f86f 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8005e1a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e1e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2212      	movs	r2, #18
 8005e26:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005e2a:	e2d8      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                count = CO_fifo_read(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[1], 7, NULL);
 8005e2c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e30:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005e3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1d99      	adds	r1, r3, #6
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	f004 f836 	bl	8009ebc <CO_fifo_read>
 8005e50:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                SDO_C->sizeTran += count;
 8005e54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e58:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e60:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005e64:	441a      	add	r2, r3
 8005e66:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e6a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	669a      	str	r2, [r3, #104]	; 0x68
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 8005e72:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e76:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d028      	beq.n	8005ed4 <CO_SDOclientDownload+0xfe4>
 8005e82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e86:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e8e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005e92:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d91a      	bls.n	8005ed4 <CO_SDOclientDownload+0xfe4>
                    SDO_C->sizeTran -= count;
 8005e9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ea2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005eaa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005eb4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	669a      	str	r2, [r3, #104]	; 0x68
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005ebc:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <CO_SDOclientDownload+0x10f4>)
 8005ebe:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8005ec2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ec6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8005ed2:	e284      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                SDO_C->CANtxBuff->data[0] = (uint8_t)(SDO_C->toggle | ((7U - count) << 1));
 8005ed4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ed8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f893 1494 	ldrb.w	r1, [r3, #1172]	; 0x494
 8005ee2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f1c3 0307 	rsb	r3, r3, #7
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ef6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	430a      	orrs	r2, r1
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	715a      	strb	r2, [r3, #5]
                if ((CO_fifo_getOccupied(&SDO_C->bufFifo) == 0U) && !bufferPartial) {
 8005f04:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f08:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3378      	adds	r3, #120	; 0x78
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fbd1 	bl	80046b8 <CO_fifo_getOccupied>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d140      	bne.n	8005f9e <CO_SDOclientDownload+0x10ae>
 8005f1c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f20:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d139      	bne.n	8005f9e <CO_SDOclientDownload+0x10ae>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8005f2a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f2e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d019      	beq.n	8005f6e <CO_SDOclientDownload+0x107e>
 8005f3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f3e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f46:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f4a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d20b      	bcs.n	8005f6e <CO_SDOclientDownload+0x107e>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8005f56:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <CO_SDOclientDownload+0x10f8>)
 8005f58:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 8005f5c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f60:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 8005f6c:	e237      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                    SDO_C->CANtxBuff->data[0] |= 0x01U;
 8005f6e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f72:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	795a      	ldrb	r2, [r3, #5]
 8005f7c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f80:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	715a      	strb	r2, [r3, #5]
                    SDO_C->finished = true;
 8005f90:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005f94:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	661a      	str	r2, [r3, #96]	; 0x60
                SDO_C->timeoutTimer = 0;
 8005f9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fa2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8005fac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fb0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fbc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f00c ff96 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8005fcc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005fd0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2214      	movs	r2, #20
 8005fd8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 8005fdc:	e1ff      	b.n	80063de <CO_SDOclientDownload+0x14ee>
 8005fde:	bf00      	nop
 8005fe0:	06070010 	.word	0x06070010
 8005fe4:	06070012 	.word	0x06070012
 8005fe8:	06070013 	.word	0x06070013
                SDO_C->CANtxBuff->data[0] = 0xC4;
 8005fec:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005ff0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	22c4      	movs	r2, #196	; 0xc4
 8005ffa:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8005ffc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006000:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800600a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800600e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800601a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800601e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	b29a      	uxth	r2, r3
 800602c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006030:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800603c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006040:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800604c:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8006056:	721a      	strb	r2, [r3, #8]
                if (SDO_C->sizeInd > 0U) {
 8006058:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800605c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006064:	2b00      	cmp	r3, #0
 8006066:	d022      	beq.n	80060ae <CO_SDOclientDownload+0x11be>
                    uint32_t size = CO_SWAP_32((uint32_t)SDO_C->sizeInd);
 8006068:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800606c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006074:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
                    SDO_C->CANtxBuff->data[0] |= 0x02U;
 8006078:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800607c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	795a      	ldrb	r2, [r3, #5]
 8006086:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800608a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f042 0202 	orr.w	r2, r2, #2
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&size), sizeof(size));
 800609a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800609e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	3309      	adds	r3, #9
 80060a8:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80060ac:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 80060ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060b2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80060bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060cc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f00c ff0e 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_RSP;
 80060dc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060e0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2252      	movs	r2, #82	; 0x52
 80060e8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 80060ec:	e177      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                if ((CO_fifo_altGetOccupied(&SDO_C->bufFifo) < 7U) && bufferPartial) {
 80060ee:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80060f2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3378      	adds	r3, #120	; 0x78
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe faf7 	bl	80046ee <CO_fifo_altGetOccupied>
 8006100:	4603      	mov	r3, r0
 8006102:	2b06      	cmp	r3, #6
 8006104:	d807      	bhi.n	8006116 <CO_SDOclientDownload+0x1226>
 8006106:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800610a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 8163 	bne.w	80063dc <CO_SDOclientDownload+0x14ec>
                SDO_C->block_seqno++;
 8006116:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800611a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8006124:	3301      	adds	r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800612c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                SDO_C->CANtxBuff->data[0] = SDO_C->block_seqno;
 8006136:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800613a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8006146:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	f892 24a0 	ldrb.w	r2, [r2, #1184]	; 0x4a0
 8006150:	715a      	strb	r2, [r3, #5]
                count = CO_fifo_altRead(&SDO_C->bufFifo, &SDO_C->CANtxBuff->data[1], 7);
 8006152:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006156:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006160:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006164:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	3306      	adds	r3, #6
 800616e:	2207      	movs	r2, #7
 8006170:	4619      	mov	r1, r3
 8006172:	f003 ff80 	bl	800a076 <CO_fifo_altRead>
 8006176:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
                SDO_C->block_noData = (uint8_t)(7U - count);
 800617a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f1c3 0307 	rsb	r3, r3, #7
 8006184:	b2da      	uxtb	r2, r3
 8006186:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800618a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
                SDO_C->sizeTran += count;
 8006194:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006198:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061a0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80061a4:	441a      	add	r2, r3
 80061a6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061aa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	669a      	str	r2, [r3, #104]	; 0x68
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 80061b2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061b6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d028      	beq.n	8006214 <CO_SDOclientDownload+0x1324>
 80061c2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061c6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061ce:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061d2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061da:	429a      	cmp	r2, r3
 80061dc:	d91a      	bls.n	8006214 <CO_SDOclientDownload+0x1324>
                    SDO_C->sizeTran -= count;
 80061de:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061e2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061ea:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80061f4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68
                    abortCode = CO_SDO_AB_DATA_LONG;
 80061fc:	4bc4      	ldr	r3, [pc, #784]	; (8006510 <CO_SDOclientDownload+0x1620>)
 80061fe:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                    SDO_C->state = CO_SDO_ST_ABORT;
 8006202:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006206:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006212:	e0e4      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                if ((CO_fifo_altGetOccupied(&SDO_C->bufFifo) == 0U) && !bufferPartial) {
 8006214:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006218:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3378      	adds	r3, #120	; 0x78
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fa64 	bl	80046ee <CO_fifo_altGetOccupied>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d149      	bne.n	80062c0 <CO_SDOclientDownload+0x13d0>
 800622c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006230:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d142      	bne.n	80062c0 <CO_SDOclientDownload+0x13d0>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 800623a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800623e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006246:	2b00      	cmp	r3, #0
 8006248:	d019      	beq.n	800627e <CO_SDOclientDownload+0x138e>
 800624a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800624e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006256:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800625a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006262:	429a      	cmp	r2, r3
 8006264:	d20b      	bcs.n	800627e <CO_SDOclientDownload+0x138e>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8006266:	4bab      	ldr	r3, [pc, #684]	; (8006514 <CO_SDOclientDownload+0x1624>)
 8006268:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
                        SDO_C->state = CO_SDO_ST_ABORT;
 800626c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006270:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 800627c:	e0af      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                    SDO_C->CANtxBuff->data[0] |= 0x80U;
 800627e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006282:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	795a      	ldrb	r2, [r3, #5]
 800628c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006290:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	715a      	strb	r2, [r3, #5]
                    SDO_C->finished = true;
 80062a0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80062a4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
                    SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 80062ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80062b2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2254      	movs	r2, #84	; 0x54
 80062ba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80062be:	e020      	b.n	8006302 <CO_SDOclientDownload+0x1412>
                else if (SDO_C->block_seqno >= SDO_C->block_blksize) {
 80062c0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80062c4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f893 24a0 	ldrb.w	r2, [r3, #1184]	; 0x4a0
 80062ce:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80062d2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f893 34a1 	ldrb.w	r3, [r3, #1185]	; 0x4a1
 80062dc:	429a      	cmp	r2, r3
 80062de:	d308      	bcc.n	80062f2 <CO_SDOclientDownload+0x1402>
                    SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 80062e0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80062e4:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2254      	movs	r2, #84	; 0x54
 80062ec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80062f0:	e007      	b.n	8006302 <CO_SDOclientDownload+0x1412>
                    if (timerNext_us != NULL) {
 80062f2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <CO_SDOclientDownload+0x1412>
                        *timerNext_us = 0;
 80062fa:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
                SDO_C->timeoutTimer = 0;
 8006302:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006306:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2200      	movs	r2, #0
 800630e:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8006310:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006314:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006320:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f00c fde4 	bl	8012ef8 <CO_CANsend>
                break;
 8006330:	e055      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                SDO_C->CANtxBuff->data[0] = (uint8_t)(0xC1U | (SDO_C->block_noData << 2));
 8006332:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006336:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f893 34a2 	ldrb.w	r3, [r3, #1186]	; 0x4a2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	b2da      	uxtb	r2, r3
 8006344:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006348:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->block_crc;
 8006358:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800635c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 24b0 	ldrh.w	r2, [r3, #1200]	; 0x4b0
 8006366:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800636a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->block_crc >> 8);
 8006376:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800637a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	; 0x4b0
 8006384:	0a1b      	lsrs	r3, r3, #8
 8006386:	b29a      	uxth	r2, r3
 8006388:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800638c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	71da      	strb	r2, [r3, #7]
                SDO_C->timeoutTimer = 0;
 8006398:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800639c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80063a6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80063aa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80063b6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f00c fd99 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_END_RSP;
 80063c6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80063ca:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2256      	movs	r2, #86	; 0x56
 80063d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 80063d6:	e002      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <CO_SDOclientDownload+0x14ee>
                    break;
 80063dc:	bf00      	nop
            }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 80063de:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d176      	bne.n	80064d4 <CO_SDOclientDownload+0x15e4>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 80063e6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80063ea:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d15f      	bne.n	80064ba <CO_SDOclientDownload+0x15ca>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80063fa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80063fe:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8006402:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006406:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	2280      	movs	r2, #128	; 0x80
 8006410:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8006412:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006416:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006420:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006424:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8006430:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006434:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b29a      	uxth	r2, r3
 8006442:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006446:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8006452:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006456:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8006462:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800646c:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 800646e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006472:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	3309      	adds	r3, #9
 800647c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8006480:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8006482:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006486:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006492:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f00c fd2b 	bl	8012ef8 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 80064a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80064a6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithClientAbort;
 80064b2:	23f7      	movs	r3, #247	; 0xf7
 80064b4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80064b8:	e00c      	b.n	80064d4 <CO_SDOclientDownload+0x15e4>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        else if (SDO_C->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 80064ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80064be:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b53      	cmp	r3, #83	; 0x53
 80064cc:	d102      	bne.n	80064d4 <CO_SDOclientDownload+0x15e4>
            ret = CO_SDO_RT_blockDownldInProgress;
 80064ce:	2303      	movs	r3, #3
 80064d0:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
        } else { /* MISRA C 2004 14.10 */
        }
#endif
    }

    if (sizeTransferred != NULL) {
 80064d4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <CO_SDOclientDownload+0x15fe>
        *sizeTransferred = SDO_C->sizeTran;
 80064dc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80064e0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064e8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80064ec:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 80064ee:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <CO_SDOclientDownload+0x1610>
        *SDOabortCode = abortCode;
 80064f6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80064fa:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80064fe:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8006500:	f997 3447 	ldrsb.w	r3, [r7, #1095]	; 0x447
}
 8006504:	4618      	mov	r0, r3
 8006506:	f207 474c 	addw	r7, r7, #1100	; 0x44c
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}
 800650e:	bf00      	nop
 8006510:	06070012 	.word	0x06070012
 8006514:	06070013 	.word	0x06070013

08006518 <CO_SDOclientUploadInitiate>:
/******************************************************************************
 * UPLOAD                                                                     *
 ******************************************************************************/
CO_SDO_return_t
CO_SDOclientUploadInitiate(CO_SDOclient_t* SDO_C, uint16_t index, uint8_t subIndex, uint16_t SDOtimeoutTime_ms,
                           bool_t blockEnable) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	817b      	strh	r3, [r7, #10]
 800652a:	460b      	mov	r3, r1
 800652c:	727b      	strb	r3, [r7, #9]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
    /* verify parameters */
    if ((SDO_C == NULL) || !SDO_C->valid) { return CO_SDO_RT_wrongArguments;}
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <CO_SDOclientUploadInitiate+0x28>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <CO_SDOclientUploadInitiate+0x2e>
 8006540:	f06f 0301 	mvn.w	r3, #1
 8006544:	e04f      	b.n	80065e6 <CO_SDOclientUploadInitiate+0xce>

    /* save parameters */
    SDO_C->index = index;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	897a      	ldrh	r2, [r7, #10]
 800654a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    SDO_C->subIndex = subIndex;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	7a7a      	ldrb	r2, [r7, #9]
 8006552:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO_C->sizeInd = 0;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	665a      	str	r2, [r3, #100]	; 0x64
    SDO_C->sizeTran = 0;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	669a      	str	r2, [r3, #104]	; 0x68
    SDO_C->finished = false;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	661a      	str	r2, [r3, #96]	; 0x60
    CO_fifo_reset(&SDO_C->bufFifo);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3378      	adds	r3, #120	; 0x78
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe f870 	bl	8004652 <CO_fifo_reset>
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006578:	fb03 f202 	mul.w	r2, r3, r2
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	671a      	str	r2, [r3, #112]	; 0x70
    SDO_C->timeoutTimer = 0;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	675a      	str	r2, [r3, #116]	; 0x74
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK)!=0
    SDO_C->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700U;
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800658c:	fb03 f202 	mul.w	r2, r3, r2
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* if node-ID of the SDO server is the same as node-ID of this node, then transfer data within this node */
    if (((SDO_C->OD != NULL) && (SDO_C->nodeId != 0U)) && (SDO_C->nodeIDOfTheSDOServer == SDO_C->nodeId)) {
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d012      	beq.n	80065c4 <CO_SDOclientUploadInitiate+0xac>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	791b      	ldrb	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <CO_SDOclientUploadInitiate+0xac>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	791b      	ldrb	r3, [r3, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d107      	bne.n	80065c4 <CO_SDOclientUploadInitiate+0xac>
        SDO_C->OD_IO.read = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	621a      	str	r2, [r3, #32]
        SDO_C->state = CO_SDO_ST_UPLOAD_LOCAL_TRANSFER;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80065c2:	e00b      	b.n	80065dc <CO_SDOclientUploadInitiate+0xc4>
    } else
#endif
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        if (blockEnable) {
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <CO_SDOclientUploadInitiate+0xbc>
        SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2261      	movs	r2, #97	; 0x61
 80065ce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80065d2:	e003      	b.n	80065dc <CO_SDOclientUploadInitiate+0xc4>
    } else
#endif
    {
        SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2221      	movs	r2, #33	; 0x21
 80065d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

    return CO_SDO_RT_ok_communicationEnd;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <CO_SDOclientUpload>:

CO_SDO_return_t
CO_SDOclientUpload(CO_SDOclient_t* SDO_C, uint32_t timeDifference_us, bool_t send_abort,
                   CO_SDO_abortCode_t* SDOabortCode, size_t* sizeIndicated, size_t* sizeTransferred,
                   uint32_t* timerNext_us) {
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 80065fc:	f2a4 4464 	subw	r4, r4, #1124	; 0x464
 8006600:	6020      	str	r0, [r4, #0]
 8006602:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 8006606:	f5a0 608d 	sub.w	r0, r0, #1128	; 0x468
 800660a:	6001      	str	r1, [r0, #0]
 800660c:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8006610:	f2a1 416c 	subw	r1, r1, #1132	; 0x46c
 8006614:	600a      	str	r2, [r1, #0]
 8006616:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800661a:	f5a2 628e 	sub.w	r2, r2, #1136	; 0x470
 800661e:	6013      	str	r3, [r2, #0]
    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    if ((SDO_C == NULL) || !SDO_C->valid) {
 800662c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006630:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <CO_SDOclientUpload+0x5a>
 800663a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800663e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	2b00      	cmp	r3, #0
 8006648:	d107      	bne.n	800665a <CO_SDOclientUpload+0x6a>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800664a:	4b8b      	ldr	r3, [pc, #556]	; (8006878 <CO_SDOclientUpload+0x288>)
 800664c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        ret = CO_SDO_RT_wrongArguments;
 8006650:	23fe      	movs	r3, #254	; 0xfe
 8006652:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006656:	f000 beb2 	b.w	80073be <CO_SDOclientUpload+0xdce>
    } else if (SDO_C->state == CO_SDO_ST_IDLE) {
 800665a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800665e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <CO_SDOclientUpload+0x88>
        ret = CO_SDO_RT_ok_communicationEnd;
 800666e:	2300      	movs	r3, #0
 8006670:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006674:	f000 bea3 	b.w	80073be <CO_SDOclientUpload+0xdce>
    }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_LOCAL) != 0
    /* Transfer data locally */
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 8006678:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800667c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b20      	cmp	r3, #32
 800668a:	f040 81ca 	bne.w	8006a22 <CO_SDOclientUpload+0x432>
 800668e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006692:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 81c2 	bne.w	8006a22 <CO_SDOclientUpload+0x432>
        /* search object dictionary in first pass */
        if (SDO_C->OD_IO.read == NULL) {
 800669e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066a2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d163      	bne.n	8006776 <CO_SDOclientUpload+0x186>
            ODR_t odRet;

            odRet = OD_getSub(OD_find(SDO_C->OD, SDO_C->index), SDO_C->subIndex, &SDO_C->OD_IO, false);
 80066ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066be:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fc f96c 	bl	80029a8 <OD_find>
 80066d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066d4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 80066de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80066e2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f103 0208 	add.w	r2, r3, #8
 80066ec:	2300      	movs	r3, #0
 80066ee:	f7fc f9b7 	bl	8002a60 <OD_getSub>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453

            if (odRet != ODR_OK) {
 80066f8:	f997 3453 	ldrsb.w	r3, [r7, #1107]	; 0x453
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <CO_SDOclientUpload+0x126>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8006700:	f997 3453 	ldrsb.w	r3, [r7, #1107]	; 0x453
 8006704:	4618      	mov	r0, r3
 8006706:	f7fc faa3 	bl	8002c50 <OD_getSDOabCode>
 800670a:	f8c7 0468 	str.w	r0, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 800670e:	23f7      	movs	r3, #247	; 0xf7
 8006710:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006714:	e02f      	b.n	8006776 <CO_SDOclientUpload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8006716:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800671a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	7e1b      	ldrb	r3, [r3, #24]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <CO_SDOclientUpload+0x148>
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800672a:	4b54      	ldr	r3, [pc, #336]	; (800687c <CO_SDOclientUpload+0x28c>)
 800672c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 8006730:	23f7      	movs	r3, #247	; 0xf7
 8006732:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006736:	e01e      	b.n	8006776 <CO_SDOclientUpload+0x186>
            } else if ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U) {
 8006738:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800673c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	7e1b      	ldrb	r3, [r3, #24]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <CO_SDOclientUpload+0x16a>
                abortCode = CO_SDO_AB_WRITEONLY;
 800674c:	4b4c      	ldr	r3, [pc, #304]	; (8006880 <CO_SDOclientUpload+0x290>)
 800674e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 8006752:	23f7      	movs	r3, #247	; 0xf7
 8006754:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006758:	e00d      	b.n	8006776 <CO_SDOclientUpload+0x186>
            } else if (SDO_C->OD_IO.read == NULL) {
 800675a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800675e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <CO_SDOclientUpload+0x186>
                abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800676a:	4b43      	ldr	r3, [pc, #268]	; (8006878 <CO_SDOclientUpload+0x288>)
 800676c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithClientAbort;
 8006770:	23f7      	movs	r3, #247	; 0xf7
 8006772:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
            } else { /* MISRA C 2004 14.10 */
            }
        }

        size_t countFifo = CO_fifo_getSpace(&SDO_C->bufFifo);
 8006776:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800677a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3378      	adds	r3, #120	; 0x78
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd ff7c 	bl	8004680 <CO_fifo_getSpace>
 8006788:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c

        /* skip copying if buffer full */
        if (countFifo == 0U) {
 800678c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <CO_SDOclientUpload+0x1ac>
            ret = CO_SDO_RT_uploadDataBufferFull;
 8006794:	2305      	movs	r3, #5
 8006796:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 800679a:	e125      	b.n	80069e8 <CO_SDOclientUpload+0x3f8>
        }
        /* read data, in several passes if necessary */
        else if (SDO_C->OD_IO.read != NULL) {
 800679c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067a0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 811d 	beq.w	80069e8 <CO_SDOclientUpload+0x3f8>
            /* Get size of data in Object Dictionary. If size is not indicated
             * use maximum SDO client buffer size. Prepare temp buffer. */
            OD_size_t countData = SDO_C->OD_IO.stream.dataLength;
 80067ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
            OD_size_t countBuf = ((countData > 0U) && (countData <= countFifo)) ? countData : (OD_size_t)countFifo;
 80067be:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <CO_SDOclientUpload+0x1e8>
 80067c6:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80067ca:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d802      	bhi.n	80067d8 <CO_SDOclientUpload+0x1e8>
 80067d2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80067d6:	e001      	b.n	80067dc <CO_SDOclientUpload+0x1ec>
 80067d8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80067dc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            OD_size_t countRd = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
            uint8_t buf[CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1U];

            /* load data from OD variable into the buffer */
            CO_LOCK_OD(SDO_C->CANdevTx);
 80067e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80067ea:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8210 	mrs	r2, PRIMASK
 80067f6:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
  return(result);
 80067fa:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80067fe:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8006800:	b672      	cpsid	i
}
 8006802:	bf00      	nop
            ODR_t odRet = SDO_C->OD_IO.read(&SDO_C->OD_IO.stream, buf, countBuf, &countRd);
 8006804:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006808:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1c      	ldr	r4, [r3, #32]
 8006810:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006814:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f103 0008 	add.w	r0, r3, #8
 800681e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8006822:	f107 0110 	add.w	r1, r7, #16
 8006826:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 800682a:	47a0      	blx	r4
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
            CO_UNLOCK_OD(SDO_C->CANdevTx);
 8006832:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006836:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006844:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8006848:	f383 8810 	msr	PRIMASK, r3
}
 800684c:	bf00      	nop

            if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 800684e:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <CO_SDOclientUpload+0x294>
 8006856:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d011      	beq.n	8006884 <CO_SDOclientUpload+0x294>
                abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8006860:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 8006864:	4618      	mov	r0, r3
 8006866:	f7fc f9f3 	bl	8002c50 <OD_getSDOabCode>
 800686a:	f8c7 0468 	str.w	r0, [r7, #1128]	; 0x468
                ret = CO_SDO_RT_endedWithServerAbort;
 800686e:	23f6      	movs	r3, #246	; 0xf6
 8006870:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006874:	e0b8      	b.n	80069e8 <CO_SDOclientUpload+0x3f8>
 8006876:	bf00      	nop
 8006878:	06040047 	.word	0x06040047
 800687c:	06010000 	.word	0x06010000
 8006880:	06010001 	.word	0x06010001
            } else {
                /* if data is string, send only data up to null termination */
                if ((countRd > 0U) && (countRd <= CO_CONFIG_SDO_CLI_BUFFER_SIZE)
 8006884:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006888:	2b00      	cmp	r3, #0
 800688a:	d03f      	beq.n	800690c <CO_SDOclientUpload+0x31c>
 800688c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006894:	d83a      	bhi.n	800690c <CO_SDOclientUpload+0x31c>
                    && ((SDO_C->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8006896:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800689a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	7e1b      	ldrb	r3, [r3, #24]
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da31      	bge.n	800690c <CO_SDOclientUpload+0x31c>
                    buf[countRd] = 0; /* (buf is one byte larger) */
 80068a8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80068ac:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80068b0:	f5a2 628c 	sub.w	r2, r2, #1120	; 0x460
 80068b4:	2100      	movs	r1, #0
 80068b6:	54d1      	strb	r1, [r2, r3]
                    OD_size_t countStr = (OD_size_t)strlen((char*)buf);
 80068b8:	f107 0310 	add.w	r3, r7, #16
 80068bc:	4618      	mov	r0, r3
 80068be:	f7f9 fce7 	bl	8000290 <strlen>
 80068c2:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
                    if (countStr == 0U) {
 80068c6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <CO_SDOclientUpload+0x2e4>
                        countStr = 1; /* no zero length */
 80068ce:	2301      	movs	r3, #1
 80068d0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
                    }
                    if (countStr < countRd) {
 80068d4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80068d8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80068dc:	429a      	cmp	r2, r3
 80068de:	d215      	bcs.n	800690c <CO_SDOclientUpload+0x31c>
                        /* string terminator found, finish read, shorten data */
                        countRd = countStr;
 80068e0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80068e4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
                        odRet = ODR_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
                        SDO_C->OD_IO.stream.dataLength = (OD_size_t)SDO_C->sizeTran + countRd;
 80068ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068f2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80068fa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80068fe:	441a      	add	r2, r3
 8006900:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006904:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	611a      	str	r2, [r3, #16]
                    }
                }

                (void)CO_fifo_write(&SDO_C->bufFifo, buf, countRd, NULL);
 800690c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006910:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800691a:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800691e:	f107 0110 	add.w	r1, r7, #16
 8006922:	2300      	movs	r3, #0
 8006924:	f003 fa72 	bl	8009e0c <CO_fifo_write>
                SDO_C->sizeTran += countRd;
 8006928:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800692c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006934:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8006938:	441a      	add	r2, r3
 800693a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800693e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	669a      	str	r2, [r3, #104]	; 0x68

                /* verify if size of data uploaded is too large */
                SDO_C->sizeInd = SDO_C->OD_IO.stream.dataLength;
 8006946:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800694a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006956:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	665a      	str	r2, [r3, #100]	; 0x64
                if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 800695e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006962:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696a:	2b00      	cmp	r3, #0
 800696c:	d014      	beq.n	8006998 <CO_SDOclientUpload+0x3a8>
 800696e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006972:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800697a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800697e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006986:	429a      	cmp	r2, r3
 8006988:	d906      	bls.n	8006998 <CO_SDOclientUpload+0x3a8>
                    abortCode = CO_SDO_AB_DATA_LONG;
 800698a:	4bcb      	ldr	r3, [pc, #812]	; (8006cb8 <CO_SDOclientUpload+0x6c8>)
 800698c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    ret = CO_SDO_RT_endedWithClientAbort;
 8006990:	23f7      	movs	r3, #247	; 0xf7
 8006992:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006996:	e027      	b.n	80069e8 <CO_SDOclientUpload+0x3f8>
                }
                /* If no more segments to be upload, finish */
                else if (odRet == ODR_OK) {
 8006998:	f997 3467 	ldrsb.w	r3, [r7, #1127]	; 0x467
 800699c:	2b00      	cmp	r3, #0
 800699e:	d120      	bne.n	80069e2 <CO_SDOclientUpload+0x3f2>
                    /* verify size of data uploaded */
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 80069a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069a4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d014      	beq.n	80069da <CO_SDOclientUpload+0x3ea>
 80069b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069b4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069c0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d206      	bcs.n	80069da <CO_SDOclientUpload+0x3ea>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 80069cc:	4bbb      	ldr	r3, [pc, #748]	; (8006cbc <CO_SDOclientUpload+0x6cc>)
 80069ce:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        ret = CO_SDO_RT_endedWithClientAbort;
 80069d2:	23f7      	movs	r3, #247	; 0xf7
 80069d4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80069d8:	e006      	b.n	80069e8 <CO_SDOclientUpload+0x3f8>
                    } else {
                        ret = CO_SDO_RT_ok_communicationEnd;
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80069e0:	e002      	b.n	80069e8 <CO_SDOclientUpload+0x3f8>
                    }
                } else {
                    ret = CO_SDO_RT_waitingLocalTransfer;
 80069e2:	2306      	movs	r3, #6
 80069e4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                }
            }
        } else { /* MISRA C 2004 14.10 */
        }

        if ((ret != CO_SDO_RT_uploadDataBufferFull) && (ret != CO_SDO_RT_waitingLocalTransfer)) {
 80069e8:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80069ec:	2b05      	cmp	r3, #5
 80069ee:	d00d      	beq.n	8006a0c <CO_SDOclientUpload+0x41c>
 80069f0:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d009      	beq.n	8006a0c <CO_SDOclientUpload+0x41c>
            SDO_C->state = CO_SDO_ST_IDLE;
 80069f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80069fc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 8006a08:	f000 bcd8 	b.w	80073bc <CO_SDOclientUpload+0xdcc>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        /* Inform OS to call this function again without delay. */
        else if (timerNext_us != NULL) {
 8006a0c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 84d3 	beq.w	80073bc <CO_SDOclientUpload+0xdcc>
            *timerNext_us = 0;
 8006a16:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 8006a1e:	f000 bccd 	b.w	80073bc <CO_SDOclientUpload+0xdcc>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received */
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8006a22:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a26:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8498 	beq.w	8007366 <CO_SDOclientUpload+0xd76>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80U) {
 8006a36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a3a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d11a      	bne.n	8006a7e <CO_SDOclientUpload+0x48e>
            uint32_t code;
            (void)memcpy((void*)(&code), (const void*)(&SDO_C->CANrxData[4]), sizeof(code));
 8006a48:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a4c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8006a5c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8006a60:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            SDO_C->state = CO_SDO_ST_IDLE;
 8006a64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a68:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithServerAbort;
 8006a74:	23f6      	movs	r3, #246	; 0xf6
 8006a76:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8006a7a:	f000 bc5e 	b.w	800733a <CO_SDOclientUpload+0xd4a>
        } else if (send_abort) {
 8006a7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a82:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01a      	beq.n	8006ac2 <CO_SDOclientUpload+0x4d2>
            abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8006a8c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a90:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <CO_SDOclientUpload+0x4b8>
 8006a9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006a9e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	e000      	b.n	8006aaa <CO_SDOclientUpload+0x4ba>
 8006aa8:	4b85      	ldr	r3, [pc, #532]	; (8006cc0 <CO_SDOclientUpload+0x6d0>)
 8006aaa:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            SDO_C->state = CO_SDO_ST_ABORT;
 8006aae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ab2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8006abe:	f000 bc3c 	b.w	800733a <CO_SDOclientUpload+0xd4a>
        } else {
            switch (SDO_C->state) {
 8006ac2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ac6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b66      	cmp	r3, #102	; 0x66
 8006ad4:	f000 8361 	beq.w	800719a <CO_SDOclientUpload+0xbaa>
 8006ad8:	2b66      	cmp	r3, #102	; 0x66
 8006ada:	f300 8421 	bgt.w	8007320 <CO_SDOclientUpload+0xd30>
 8006ade:	2b64      	cmp	r3, #100	; 0x64
 8006ae0:	f000 842a 	beq.w	8007338 <CO_SDOclientUpload+0xd48>
 8006ae4:	2b64      	cmp	r3, #100	; 0x64
 8006ae6:	f300 841b 	bgt.w	8007320 <CO_SDOclientUpload+0xd30>
 8006aea:	2b62      	cmp	r3, #98	; 0x62
 8006aec:	f000 81de 	beq.w	8006eac <CO_SDOclientUpload+0x8bc>
 8006af0:	2b62      	cmp	r3, #98	; 0x62
 8006af2:	f300 8415 	bgt.w	8007320 <CO_SDOclientUpload+0xd30>
 8006af6:	2b22      	cmp	r3, #34	; 0x22
 8006af8:	d004      	beq.n	8006b04 <CO_SDOclientUpload+0x514>
 8006afa:	2b24      	cmp	r3, #36	; 0x24
 8006afc:	f000 80e6 	beq.w	8006ccc <CO_SDOclientUpload+0x6dc>
 8006b00:	f000 bc0e 	b.w	8007320 <CO_SDOclientUpload+0xd30>
                case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xF0U) == 0x40U) {
 8006b04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b08:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	f040 80c1 	bne.w	8006c9e <CO_SDOclientUpload+0x6ae>
                        /* verify index and subindex */
                        uint16_t index;
                        uint8_t subindex;
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8006b1c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b20:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
                        index |= SDO_C->CANrxData[1];
 8006b32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b36:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
                        subindex = SDO_C->CANrxData[3];
 8006b4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b50:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8006b5a:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8006b5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b62:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b6c:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	; 0x42e
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d10a      	bne.n	8006b8a <CO_SDOclientUpload+0x59a>
 8006b74:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b78:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006b82:	f897 242d 	ldrb.w	r2, [r7, #1069]	; 0x42d
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d00b      	beq.n	8006ba2 <CO_SDOclientUpload+0x5b2>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8006b8a:	4b4e      	ldr	r3, [pc, #312]	; (8006cc4 <CO_SDOclientUpload+0x6d4>)
 8006b8c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006b90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006b94:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006ba0:	e3cb      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        }

                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 8006ba2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ba6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d044      	beq.n	8006c42 <CO_SDOclientUpload+0x652>
                            /* Expedited transfer */
                            size_t count = 4;
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
                            /* is size indicated? */
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8006bbe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bc2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <CO_SDOclientUpload+0x604>
                                count -= (((size_t)SDO_C->CANrxData[0]) >> 2) & 0x03U;
 8006bd4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bd8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
                            }
                            /* copy data, indicate size and finish */
                            (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[4], count, NULL);
 8006bf4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006bf8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006c02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c06:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f503 6191 	add.w	r1, r3, #1160	; 0x488
 8006c10:	2300      	movs	r3, #0
 8006c12:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8006c16:	f003 f8f9 	bl	8009e0c <CO_fifo_write>
                            SDO_C->sizeTran = count;
 8006c1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c1e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8006c28:	669a      	str	r2, [r3, #104]	; 0x68
                            SDO_C->state = CO_SDO_ST_IDLE;
 8006c2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c2e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006c40:	e37b      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8006c42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c46:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d011      	beq.n	8006c7c <CO_SDOclientUpload+0x68c>
                                (void)memcpy((void*)(&size), (void*)(&SDO_C->CANrxData[4]), sizeof(size));
 8006c58:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c5c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
                                SDO_C->sizeInd = CO_SWAP_32(size);
 8006c6c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8006c70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c74:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	665a      	str	r2, [r3, #100]	; 0x64
                            SDO_C->toggle = 0x00;
 8006c7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c80:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8006c8c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006c90:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2223      	movs	r2, #35	; 0x23
 8006c98:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006c9c:	e34d      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <CO_SDOclientUpload+0x6d8>)
 8006ca0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006ca4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ca8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006cb4:	e341      	b.n	800733a <CO_SDOclientUpload+0xd4a>
 8006cb6:	bf00      	nop
 8006cb8:	06070012 	.word	0x06070012
 8006cbc:	06070013 	.word	0x06070013
 8006cc0:	06040047 	.word	0x06040047
 8006cc4:	06040043 	.word	0x06040043
 8006cc8:	05040001 	.word	0x05040001
                }

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xE0U) == 0x00U) {
 8006ccc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cd0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006cda:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 80d8 	bne.w	8006e94 <CO_SDOclientUpload+0x8a4>
                        size_t count, countWr;

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO_C->CANrxData[0] & 0x10U;
 8006ce4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ce8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
                        if (toggle != SDO_C->toggle) {
 8006cfa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006cfe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006d08:	f897 2438 	ldrb.w	r2, [r7, #1080]	; 0x438
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d00b      	beq.n	8006d28 <CO_SDOclientUpload+0x738>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8006d10:	4baf      	ldr	r3, [pc, #700]	; (8006fd0 <CO_SDOclientUpload+0x9e0>)
 8006d12:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006d16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d1a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006d26:	e308      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        }
                        SDO_C->toggle = (toggle == 0x00U) ? 0x10U : 0x00U;
 8006d28:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <CO_SDOclientUpload+0x744>
 8006d30:	2210      	movs	r2, #16
 8006d32:	e000      	b.n	8006d36 <CO_SDOclientUpload+0x746>
 8006d34:	2200      	movs	r2, #0
 8006d36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d3a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

                        /* get data size and write data to the buffer */
                        count = (size_t)(7U) - (((size_t)(SDO_C->CANrxData[0]) >> 1) & 0x07U);
 8006d44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d48:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
                        countWr = CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[1], count, NULL);
 8006d60:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d64:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006d6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d72:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f203 4185 	addw	r1, r3, #1157	; 0x485
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8006d82:	f003 f843 	bl	8009e0c <CO_fifo_write>
 8006d86:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
                        SDO_C->sizeTran += countWr;
 8006d8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006d8e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006d96:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006d9a:	441a      	add	r2, r3
 8006d9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006da0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* verify, if there was not enough space in fifo buffer */
                        if (countWr != count) {
 8006da8:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8006dac:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d00b      	beq.n	8006dcc <CO_SDOclientUpload+0x7dc>
                            abortCode = CO_SDO_AB_OUT_OF_MEM;
 8006db4:	4b87      	ldr	r3, [pc, #540]	; (8006fd4 <CO_SDOclientUpload+0x9e4>)
 8006db6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006dba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dbe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006dca:	e2b6      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        }

                        /* verify if size of data uploaded is too large */
                        if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 8006dcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dd0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d019      	beq.n	8006e10 <CO_SDOclientUpload+0x820>
 8006ddc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006de0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006de8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006dec:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d90b      	bls.n	8006e10 <CO_SDOclientUpload+0x820>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8006df8:	4b77      	ldr	r3, [pc, #476]	; (8006fd8 <CO_SDOclientUpload+0x9e8>)
 8006dfa:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006dfe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e02:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8006e0e:	e294      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        }

                        /* If no more segments to be upload, finish */
                        if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8006e10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e14:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d02d      	beq.n	8006e82 <CO_SDOclientUpload+0x892>
                            /* verify size of data uploaded */
                            if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran < SDO_C->sizeInd)) {
 8006e26:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e2a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <CO_SDOclientUpload+0x87a>
 8006e36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e3a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e46:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d20b      	bcs.n	8006e6a <CO_SDOclientUpload+0x87a>
                                abortCode = CO_SDO_AB_DATA_SHORT;
 8006e52:	4b62      	ldr	r3, [pc, #392]	; (8006fdc <CO_SDOclientUpload+0x9ec>)
 8006e54:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                                SDO_C->state = CO_SDO_ST_ABORT;
 8006e58:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e5c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006e68:	e267      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                                SDO_C->state = CO_SDO_ST_IDLE;
 8006e6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e6e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                                ret = CO_SDO_RT_ok_communicationEnd;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 8006e80:	e25b      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8006e82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e86:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2223      	movs	r2, #35	; 0x23
 8006e8e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006e92:	e252      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8006e94:	4b52      	ldr	r3, [pc, #328]	; (8006fe0 <CO_SDOclientUpload+0x9f0>)
 8006e96:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8006e9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006e9e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006eaa:	e246      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_SEGMENTED */

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP: {
                    if ((SDO_C->CANrxData[0] & 0xF9U) == 0xC0U) {
 8006eac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006eb0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006eba:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8006ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec0:	f040 8092 	bne.w	8006fe8 <CO_SDOclientUpload+0x9f8>
                        uint16_t index;
                        uint8_t subindex;

                        /* get server CRC support info and data size */
                        if ((SDO_C->CANrxData[0] & 0x04U) != 0U) {
 8006ec4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ec8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <CO_SDOclientUpload+0x8fc>
                            SDO_C->block_crcEnabled = true;
 8006eda:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ede:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 8006eea:	e007      	b.n	8006efc <CO_SDOclientUpload+0x90c>
                        } else {
                            SDO_C->block_crcEnabled = false;
 8006eec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006ef0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                        }
                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 8006efc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f00:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <CO_SDOclientUpload+0x946>
                            uint32_t size;
                            (void)memcpy((void*)(&size), (const void*)(&SDO_C->CANrxData[4]), sizeof(size));
 8006f12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f16:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
                            SDO_C->sizeInd = CO_SWAP_32(size);
 8006f26:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8006f2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f2e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	665a      	str	r2, [r3, #100]	; 0x64
                        }

                        /* verify index and subindex */
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8006f36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f3a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
                        index |= SDO_C->CANrxData[1];
 8006f4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f50:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
                        subindex = SDO_C->CANrxData[3];
 8006f66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f6a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 8006f74:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8006f78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f7c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f86:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d10a      	bne.n	8006fa4 <CO_SDOclientUpload+0x9b4>
 8006f8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006f92:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006f9c:	f897 2439 	ldrb.w	r2, [r7, #1081]	; 0x439
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d00b      	beq.n	8006fbc <CO_SDOclientUpload+0x9cc>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <CO_SDOclientUpload+0x9f4>)
 8006fa6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8006faa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fae:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        }
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8006fba:	e1be      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                            SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2;
 8006fbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fc0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2263      	movs	r2, #99	; 0x63
 8006fc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8006fcc:	e1b5      	b.n	800733a <CO_SDOclientUpload+0xd4a>
 8006fce:	bf00      	nop
 8006fd0:	05030000 	.word	0x05030000
 8006fd4:	05040005 	.word	0x05040005
 8006fd8:	06070012 	.word	0x06070012
 8006fdc:	06070013 	.word	0x06070013
 8006fe0:	05040001 	.word	0x05040001
 8006fe4:	06040043 	.word	0x06040043
                    else if ((SDO_C->CANrxData[0] & 0xF0U) == 0x40U) {
 8006fe8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006fec:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8006ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	f040 80c1 	bne.w	8007182 <CO_SDOclientUpload+0xb92>
                        index = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8007000:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007004:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 800700e:	b29b      	uxth	r3, r3
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
                        index |= SDO_C->CANrxData[1];
 8007016:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800701a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 800702a:	4313      	orrs	r3, r2
 800702c:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
                        subindex = SDO_C->CANrxData[3];
 8007030:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007034:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f893 3487 	ldrb.w	r3, [r3, #1159]	; 0x487
 800703e:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
                        if ((index != SDO_C->index) || (subindex != SDO_C->subIndex)) {
 8007042:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007046:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007050:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 8007054:	429a      	cmp	r2, r3
 8007056:	d10a      	bne.n	800706e <CO_SDOclientUpload+0xa7e>
 8007058:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800705c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8007066:	f897 243d 	ldrb.w	r2, [r7, #1085]	; 0x43d
 800706a:	429a      	cmp	r2, r3
 800706c:	d00b      	beq.n	8007086 <CO_SDOclientUpload+0xa96>
                            abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 800706e:	4bc8      	ldr	r3, [pc, #800]	; (8007390 <CO_SDOclientUpload+0xda0>)
 8007070:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8007074:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007078:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8007084:	e159      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        if ((SDO_C->CANrxData[0] & 0x02U) != 0U) {
 8007086:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800708a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d044      	beq.n	8007126 <CO_SDOclientUpload+0xb36>
                            size_t count = 4;
 800709c:	2304      	movs	r3, #4
 800709e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 80070a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070a6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00f      	beq.n	80070d8 <CO_SDOclientUpload+0xae8>
                                count -= ((size_t)(SDO_C->CANrxData[0]) >> 2) & 0x03U;
 80070b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070bc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
                            (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->CANrxData[4], count, NULL);
 80070d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070dc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80070e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80070ea:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f503 6191 	add.w	r1, r3, #1160	; 0x488
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80070fa:	f002 fe87 	bl	8009e0c <CO_fifo_write>
                            SDO_C->sizeTran = count;
 80070fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007102:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800710c:	669a      	str	r2, [r3, #104]	; 0x68
                            SDO_C->state = CO_SDO_ST_IDLE;
 800710e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007112:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            ret = CO_SDO_RT_ok_communicationEnd;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 8007124:	e109      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                            if ((SDO_C->CANrxData[0] & 0x01U) != 0U) {
 8007126:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800712a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <CO_SDOclientUpload+0xb70>
                                (void)memcpy((void*)(&size), (const void*)(&SDO_C->CANrxData[4]), sizeof(size));
 800713c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007140:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                                SDO_C->sizeInd = CO_SWAP_32(size);
 8007150:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8007154:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007158:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	665a      	str	r2, [r3, #100]	; 0x64
                            SDO_C->toggle = 0x00;
 8007160:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007164:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
                            SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8007170:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007174:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2223      	movs	r2, #35	; 0x23
 800717c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8007180:	e0db      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8007182:	4b84      	ldr	r3, [pc, #528]	; (8007394 <CO_SDOclientUpload+0xda4>)
 8007184:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 8007188:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800718c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8007198:	e0cf      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                    /* data are copied directly in the receive function */
                    break;
                }

                case CO_SDO_ST_UPLOAD_BLK_END_SREQ: {
                    if ((SDO_C->CANrxData[0] & 0xE3U) == 0xC1U) {
 800719a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800719e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80071a8:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 80071ac:	2bc1      	cmp	r3, #193	; 0xc1
 80071ae:	f040 80ab 	bne.w	8007308 <CO_SDOclientUpload+0xd18>
                        /* Get number of data bytes in last segment, that do not
                         * contain data. Then copy remaining data into fifo */
                        uint8_t noData = ((SDO_C->CANrxData[0] >> 2) & 0x07U);
 80071b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071b6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80071c0:	089b      	lsrs	r3, r3, #2
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
                        (void)CO_fifo_write(&SDO_C->bufFifo, &SDO_C->block_dataUploadLast[0], (size_t)(7U) - noData,
 80071cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071d0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80071da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f503 6195 	add.w	r1, r3, #1192	; 0x4a8
 80071e8:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 80071ec:	f1c3 0207 	rsb	r2, r3, #7
 80071f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80071f4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80071fe:	f002 fe05 	bl	8009e0c <CO_fifo_write>
                                            &SDO_C->block_crc);
                        SDO_C->sizeTran += (size_t)(7U) - noData;
 8007202:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007206:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800720e:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	1dda      	adds	r2, r3, #7
 8007216:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800721a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	669a      	str	r2, [r3, #104]	; 0x68

                        /* verify length */
                        if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran != SDO_C->sizeInd)) {
 8007222:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007226:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722e:	2b00      	cmp	r3, #0
 8007230:	d029      	beq.n	8007286 <CO_SDOclientUpload+0xc96>
 8007232:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007236:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800723e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007242:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724a:	429a      	cmp	r2, r3
 800724c:	d01b      	beq.n	8007286 <CO_SDOclientUpload+0xc96>
                            abortCode = (SDO_C->sizeTran > SDO_C->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800724e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007252:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800725a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800725e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007266:	429a      	cmp	r2, r3
 8007268:	d901      	bls.n	800726e <CO_SDOclientUpload+0xc7e>
 800726a:	4b4b      	ldr	r3, [pc, #300]	; (8007398 <CO_SDOclientUpload+0xda8>)
 800726c:	e000      	b.n	8007270 <CO_SDOclientUpload+0xc80>
 800726e:	4b4b      	ldr	r3, [pc, #300]	; (800739c <CO_SDOclientUpload+0xdac>)
 8007270:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                            SDO_C->state = CO_SDO_ST_ABORT;
 8007274:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007278:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                            break;
 8007284:	e059      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        }

                        /* verify CRC */
                        if (SDO_C->block_crcEnabled) {
 8007286:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800728a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02e      	beq.n	80072f6 <CO_SDOclientUpload+0xd06>
                            uint16_t crcServer;
                            crcServer = ((uint16_t)SDO_C->CANrxData[2]) << 8;
 8007298:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800729c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	f8a7 3440 	strh.w	r3, [r7, #1088]	; 0x440
                            crcServer |= SDO_C->CANrxData[1];
 80072ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8b7 3440 	ldrh.w	r3, [r7, #1088]	; 0x440
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8a7 3440 	strh.w	r3, [r7, #1088]	; 0x440
                            if (crcServer != SDO_C->block_crc) {
 80072c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072cc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	; 0x4b0
 80072d6:	f8b7 2440 	ldrh.w	r2, [r7, #1088]	; 0x440
 80072da:	429a      	cmp	r2, r3
 80072dc:	d00b      	beq.n	80072f6 <CO_SDOclientUpload+0xd06>
                                abortCode = CO_SDO_AB_CRC;
 80072de:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <CO_SDOclientUpload+0xdb0>)
 80072e0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                                SDO_C->state = CO_SDO_ST_ABORT;
 80072e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                                break;
 80072f4:	e021      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                            }
                        }
                        SDO_C->state = CO_SDO_ST_UPLOAD_BLK_END_CRSP;
 80072f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80072fa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2267      	movs	r2, #103	; 0x67
 8007302:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO_C->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8007306:	e018      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                        abortCode = CO_SDO_AB_CMD;
 8007308:	4b22      	ldr	r3, [pc, #136]	; (8007394 <CO_SDOclientUpload+0xda4>)
 800730a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 800730e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007312:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 800731e:	e00c      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ:
                case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
                case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
                default: {
                    abortCode = CO_SDO_AB_CMD;
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <CO_SDOclientUpload+0xda4>)
 8007322:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    SDO_C->state = CO_SDO_ST_ABORT;
 8007326:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800732a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 8007336:	e000      	b.n	800733a <CO_SDOclientUpload+0xd4a>
                    break;
 8007338:	bf00      	nop
                }
            }
        }
        SDO_C->timeoutTimer = 0;
 800733a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800733e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	675a      	str	r2, [r3, #116]	; 0x74
        timeDifference_us = 0;
 8007348:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800734c:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8007354:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007358:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8007364:	e02b      	b.n	80073be <CO_SDOclientUpload+0xdce>
    } else if (send_abort) {
 8007366:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800736a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d024      	beq.n	80073be <CO_SDOclientUpload+0xdce>
        abortCode = (SDOabortCode != NULL) ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8007374:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007378:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <CO_SDOclientUpload+0xdb4>
 8007382:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007386:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	e00a      	b.n	80073a6 <CO_SDOclientUpload+0xdb6>
 8007390:	06040043 	.word	0x06040043
 8007394:	05040001 	.word	0x05040001
 8007398:	06070012 	.word	0x06070012
 800739c:	06070013 	.word	0x06070013
 80073a0:	05040004 	.word	0x05040004
 80073a4:	4ba4      	ldr	r3, [pc, #656]	; (8007638 <CO_SDOclientUpload+0x1048>)
 80073a6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        SDO_C->state = CO_SDO_ST_ABORT;
 80073aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073ae:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80073ba:	e000      	b.n	80073be <CO_SDOclientUpload+0xdce>
    else if ((SDO_C->state == CO_SDO_ST_UPLOAD_LOCAL_TRANSFER) && !send_abort) {
 80073bc:	bf00      	nop
    } else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag */
    if (ret == CO_SDO_RT_waitingResponse) {
 80073be:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	f040 8100 	bne.w	80075c8 <CO_SDOclientUpload+0xfd8>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 80073c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073cc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80073d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073d8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d211      	bcs.n	8007408 <CO_SDOclientUpload+0xe18>
            SDO_C->timeoutTimer += timeDifference_us;
 80073e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80073f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80073f4:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	441a      	add	r2, r3
 80073fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007400:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	675a      	str	r2, [r3, #116]	; 0x74
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8007408:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800740c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007414:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007418:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	429a      	cmp	r2, r3
 8007422:	d336      	bcc.n	8007492 <CO_SDOclientUpload+0xea2>
            bool_t state_upload_seg_req = (SDO_C->state == CO_SDO_ST_UPLOAD_SEGMENT_REQ);
 8007424:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007428:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b23      	cmp	r3, #35	; 0x23
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
            bool_t state_upload_blk_sublock_crsp = (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP);
 8007442:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007446:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b65      	cmp	r3, #101	; 0x65
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            if (state_upload_seg_req || state_upload_blk_sublock_crsp) {
 8007460:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <CO_SDOclientUpload+0xe80>
 8007468:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <CO_SDOclientUpload+0xe8a>
                /* application didn't empty buffer */
                abortCode = CO_SDO_AB_GENERAL;
 8007470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007474:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8007478:	e002      	b.n	8007480 <CO_SDOclientUpload+0xe90>
            } else {
                abortCode = CO_SDO_AB_TIMEOUT;
 800747a:	4b70      	ldr	r3, [pc, #448]	; (800763c <CO_SDOclientUpload+0x104c>)
 800747c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            }
            SDO_C->state = CO_SDO_ST_ABORT;
 8007480:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007484:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8007490:	e01e      	b.n	80074d0 <CO_SDOclientUpload+0xee0>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
        else if (timerNext_us != NULL) {
 8007492:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01a      	beq.n	80074d0 <CO_SDOclientUpload+0xee0>
            /* check again after timeout time elapsed */
            uint32_t diff = SDO_C->SDOtimeoutTime_us - SDO_C->timeoutTimer;
 800749a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800749e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074aa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
            if (*timerNext_us > diff) {
 80074b8:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d204      	bcs.n	80074d0 <CO_SDOclientUpload+0xee0>
                *timerNext_us = diff;
 80074c6:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80074ca:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80074ce:	601a      	str	r2, [r3, #0]
        }
#endif

#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        /* Timeout for sub-block reception */
        if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 80074d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074d4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b64      	cmp	r3, #100	; 0x64
 80074e2:	d165      	bne.n	80075b0 <CO_SDOclientUpload+0xfc0>
            if (SDO_C->block_timeoutTimer < SDO_C->block_SDOtimeoutTime_us) {
 80074e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 80074f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80074f6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007500:	429a      	cmp	r2, r3
 8007502:	d213      	bcs.n	800752c <CO_SDOclientUpload+0xf3c>
                SDO_C->block_timeoutTimer += timeDifference_us;
 8007504:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007508:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 8007512:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007516:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	441a      	add	r2, r3
 800751e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007522:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
            }
            if (SDO_C->block_timeoutTimer >= SDO_C->block_SDOtimeoutTime_us) {
 800752c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007530:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
 800753a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800753e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007548:	429a      	cmp	r2, r3
 800754a:	d310      	bcc.n	800756e <CO_SDOclientUpload+0xf7e>
                /* SDO_C->state will change, processing will continue in this
                 * thread. Make memory barrier here with CO_FLAG_CLEAR() call. */
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 800754c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007550:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2265      	movs	r2, #101	; 0x65
 8007558:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 800755c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007560:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800756c:	e020      	b.n	80075b0 <CO_SDOclientUpload+0xfc0>
            }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_FLAG_TIMERNEXT) != 0
            else if (timerNext_us != NULL) {
 800756e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01c      	beq.n	80075b0 <CO_SDOclientUpload+0xfc0>
                /* check again after timeout time elapsed */
                uint32_t diff = SDO_C->block_SDOtimeoutTime_us - SDO_C->block_timeoutTimer;
 8007576:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800757a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8007584:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007588:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
                if (*timerNext_us > diff) {
 8007598:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d204      	bcs.n	80075b0 <CO_SDOclientUpload+0xfc0>
                    *timerNext_us = diff;
 80075a6:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80075aa:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80075ae:	601a      	str	r2, [r3, #0]
            }
#endif
        }
#endif /* CO_CONFIG_SDO_CLI & CO_CONFIG_SDO_CLI_BLOCK */

        if (SDO_C->CANtxBuff->bufferFull) {
 80075b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075b4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <CO_SDOclientUpload+0xfd8>
            ret = CO_SDO_RT_transmittBufferFull;
 80075c2:	2304      	movs	r3, #4
 80075c4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
        }
    }

    /* Transmit CAN data */
    if (ret == CO_SDO_RT_waitingResponse) {
 80075c8:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f040 82aa 	bne.w	8007b26 <CO_SDOclientUpload+0x1536>
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        size_t count;
#endif
        (void)memset((void*)&SDO_C->CANtxBuff->data[0], 0, 8);
 80075d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075d6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	3305      	adds	r3, #5
 80075e0:	2208      	movs	r2, #8
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f018 f829 	bl	801f63c <memset>

        switch (SDO_C->state) {
 80075ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80075ee:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b67      	cmp	r3, #103	; 0x67
 80075fc:	f300 8289 	bgt.w	8007b12 <CO_SDOclientUpload+0x1522>
 8007600:	2b61      	cmp	r3, #97	; 0x61
 8007602:	da04      	bge.n	800760e <CO_SDOclientUpload+0x101e>
 8007604:	2b21      	cmp	r3, #33	; 0x21
 8007606:	d01b      	beq.n	8007640 <CO_SDOclientUpload+0x1050>
 8007608:	2b23      	cmp	r3, #35	; 0x23
 800760a:	d06f      	beq.n	80076ec <CO_SDOclientUpload+0x10fc>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
            case CO_SDO_ST_UPLOAD_BLK_END_SREQ:
            default: {
                /* none */
                break;
 800760c:	e281      	b.n	8007b12 <CO_SDOclientUpload+0x1522>
        switch (SDO_C->state) {
 800760e:	3b61      	subs	r3, #97	; 0x61
 8007610:	2b06      	cmp	r3, #6
 8007612:	f200 827e 	bhi.w	8007b12 <CO_SDOclientUpload+0x1522>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <CO_SDOclientUpload+0x102c>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800776f 	.word	0x0800776f
 8007620:	08007b13 	.word	0x08007b13
 8007624:	080078b1 	.word	0x080078b1
 8007628:	08007b13 	.word	0x08007b13
 800762c:	08007941 	.word	0x08007941
 8007630:	08007b13 	.word	0x08007b13
 8007634:	08007acb 	.word	0x08007acb
 8007638:	06040047 	.word	0x06040047
 800763c:	05040000 	.word	0x05040000
                SDO_C->CANtxBuff->data[0] = 0x40;
 8007640:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007644:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	2240      	movs	r2, #64	; 0x40
 800764e:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8007650:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007654:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800765e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007662:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800766e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007672:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	b29a      	uxth	r2, r3
 8007680:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007684:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8007690:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007694:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80076a0:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 80076aa:	721a      	strb	r2, [r3, #8]
                SDO_C->timeoutTimer = 0;
 80076ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076b0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80076ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076be:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076ca:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f00b fc0f 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80076da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2222      	movs	r2, #34	; 0x22
 80076e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 80076ea:	e21c      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                if (CO_fifo_getSpace(&SDO_C->bufFifo) < 7U) {
 80076ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80076f0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3378      	adds	r3, #120	; 0x78
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fc ffc1 	bl	8004680 <CO_fifo_getSpace>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b06      	cmp	r3, #6
 8007702:	d803      	bhi.n	800770c <CO_SDOclientUpload+0x111c>
                    ret = CO_SDO_RT_uploadDataBufferFull;
 8007704:	2305      	movs	r3, #5
 8007706:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                    break;
 800770a:	e20c      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0x60U | SDO_C->toggle;
 800770c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007710:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800771a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800771e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	715a      	strb	r2, [r3, #5]
                SDO_C->timeoutTimer = 0;
 800772e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007732:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2200      	movs	r2, #0
 800773a:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 800773c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007740:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007748:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800774c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f00b fbce 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800775c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007760:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2224      	movs	r2, #36	; 0x24
 8007768:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 800776c:	e1db      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA4;
 800776e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007772:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	22a4      	movs	r2, #164	; 0xa4
 800777c:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 800777e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007782:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800778c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007790:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	719a      	strb	r2, [r3, #6]
                SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800779c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077a0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	71da      	strb	r2, [r3, #7]
                SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 80077be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077c2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80077ce:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 80077d8:	721a      	strb	r2, [r3, #8]
                count = CO_fifo_getSpace(&SDO_C->bufFifo) / 7U;
 80077da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80077de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3378      	adds	r3, #120	; 0x78
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fc ff4a 	bl	8004680 <CO_fifo_getSpace>
 80077ec:	4602      	mov	r2, r0
 80077ee:	4bca      	ldr	r3, [pc, #808]	; (8007b18 <CO_SDOclientUpload+0x1528>)
 80077f0:	fba3 1302 	umull	r1, r3, r3, r2
 80077f4:	1ad2      	subs	r2, r2, r3
 80077f6:	0852      	lsrs	r2, r2, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
                if (count > 127U) {
 8007800:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007804:	2b7f      	cmp	r3, #127	; 0x7f
 8007806:	d903      	bls.n	8007810 <CO_SDOclientUpload+0x1220>
                    count = 127;
 8007808:	237f      	movs	r3, #127	; 0x7f
 800780a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800780e:	e00f      	b.n	8007830 <CO_SDOclientUpload+0x1240>
                } else if (count == 0U) {
 8007810:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <CO_SDOclientUpload+0x1240>
                    abortCode = CO_SDO_AB_OUT_OF_MEM;
 8007818:	4bc0      	ldr	r3, [pc, #768]	; (8007b1c <CO_SDOclientUpload+0x152c>)
 800781a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                    SDO_C->state = CO_SDO_ST_ABORT;
 800781e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007822:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    break;
 800782e:	e17a      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->block_blksize = (uint8_t)count;
 8007830:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007834:	b2da      	uxtb	r2, r3
 8007836:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800783a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                SDO_C->CANtxBuff->data[4] = SDO_C->block_blksize;
 8007844:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007848:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007854:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	f892 24a1 	ldrb.w	r2, [r2, #1185]	; 0x4a1
 800785e:	725a      	strb	r2, [r3, #9]
                SDO_C->CANtxBuff->data[5] = CO_CONFIG_SDO_CLI_PST;
 8007860:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007864:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	2215      	movs	r2, #21
 800786e:	729a      	strb	r2, [r3, #10]
                SDO_C->timeoutTimer = 0;
 8007870:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007874:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	675a      	str	r2, [r3, #116]	; 0x74
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 800787e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007882:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800788e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f00b fb2d 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP;
 800789e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078a2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2262      	movs	r2, #98	; 0x62
 80078aa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 80078ae:	e13a      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA3;
 80078b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078b4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	22a3      	movs	r2, #163	; 0xa3
 80078be:	715a      	strb	r2, [r3, #5]
                SDO_C->timeoutTimer = 0;
 80078c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078c4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	675a      	str	r2, [r3, #116]	; 0x74
                SDO_C->block_timeoutTimer = 0;
 80078ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078d2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
                SDO_C->block_seqno = 0;
 80078de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078e2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                SDO_C->block_crc = 0;
 80078ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80078f2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
                SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80078fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007902:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2264      	movs	r2, #100	; 0x64
 800790a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                CO_FLAG_CLEAR(SDO_C->CANrxNew);
 800790e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007912:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 800791e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007922:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800792e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f00b fadd 	bl	8012ef8 <CO_CANsend>
                break;
 800793e:	e0f2      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA2;
 8007940:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007944:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	22a2      	movs	r2, #162	; 0xa2
 800794e:	715a      	strb	r2, [r3, #5]
                SDO_C->CANtxBuff->data[1] = SDO_C->block_seqno;
 8007950:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007954:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007960:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	f892 24a0 	ldrb.w	r2, [r2, #1184]	; 0x4a0
 800796a:	719a      	strb	r2, [r3, #6]
                if (SDO_C->finished) {
 800796c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007970:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <CO_SDOclientUpload+0x139e>
                    SDO_C->state = CO_SDO_ST_UPLOAD_BLK_END_SREQ;
 800797c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007980:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2266      	movs	r2, #102	; 0x66
 8007988:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800798c:	e076      	b.n	8007a7c <CO_SDOclientUpload+0x148c>
                    if ((SDO_C->sizeInd > 0U) && (SDO_C->sizeTran > SDO_C->sizeInd)) {
 800798e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007992:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799a:	2b00      	cmp	r3, #0
 800799c:	d019      	beq.n	80079d2 <CO_SDOclientUpload+0x13e2>
 800799e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079a2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80079aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079ae:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d90b      	bls.n	80079d2 <CO_SDOclientUpload+0x13e2>
                        abortCode = CO_SDO_AB_DATA_LONG;
 80079ba:	4b59      	ldr	r3, [pc, #356]	; (8007b20 <CO_SDOclientUpload+0x1530>)
 80079bc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
                        SDO_C->state = CO_SDO_ST_ABORT;
 80079c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079c4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 80079d0:	e0a9      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                    count = CO_fifo_getSpace(&SDO_C->bufFifo) / 7U;
 80079d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80079d6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3378      	adds	r3, #120	; 0x78
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fc fe4e 	bl	8004680 <CO_fifo_getSpace>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4b4c      	ldr	r3, [pc, #304]	; (8007b18 <CO_SDOclientUpload+0x1528>)
 80079e8:	fba3 1302 	umull	r1, r3, r3, r2
 80079ec:	1ad2      	subs	r2, r2, r3
 80079ee:	0852      	lsrs	r2, r2, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	089b      	lsrs	r3, r3, #2
 80079f4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
                    if (count >= 127U) {
 80079f8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80079fc:	2b7e      	cmp	r3, #126	; 0x7e
 80079fe:	d903      	bls.n	8007a08 <CO_SDOclientUpload+0x1418>
                        count = 127;
 8007a00:	237f      	movs	r3, #127	; 0x7f
 8007a02:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8007a06:	e017      	b.n	8007a38 <CO_SDOclientUpload+0x1448>
                    } else if (CO_fifo_getOccupied(&SDO_C->bufFifo) > 0U) {
 8007a08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a0c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3378      	adds	r3, #120	; 0x78
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fc fe4f 	bl	80046b8 <CO_fifo_getOccupied>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <CO_SDOclientUpload+0x1448>
                        ret = CO_SDO_RT_uploadDataBufferFull;
 8007a20:	2305      	movs	r3, #5
 8007a22:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                        if (timerNext_us != NULL) {
 8007a26:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d07a      	beq.n	8007b24 <CO_SDOclientUpload+0x1534>
                            *timerNext_us = 0;
 8007a2e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
                        break;
 8007a36:	e075      	b.n	8007b24 <CO_SDOclientUpload+0x1534>
                    SDO_C->block_blksize = (uint8_t)count;
 8007a38:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a42:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
                    SDO_C->block_seqno = 0;
 8007a4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a50:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
                    SDO_C->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 8007a5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a60:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2264      	movs	r2, #100	; 0x64
 8007a68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8007a6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a70:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
                SDO_C->CANtxBuff->data[2] = SDO_C->block_blksize;
 8007a7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a80:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007a8c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	f892 24a1 	ldrb.w	r2, [r2, #1185]	; 0x4a1
 8007a96:	71da      	strb	r2, [r3, #7]
                SDO_C->block_timeoutTimer = 0;
 8007a98:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007a9c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007aa8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007aac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007ab8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f00b fa18 	bl	8012ef8 <CO_CANsend>
                break;
 8007ac8:	e02d      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                SDO_C->CANtxBuff->data[0] = 0xA1;
 8007aca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007ace:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	22a1      	movs	r2, #161	; 0xa1
 8007ad8:	715a      	strb	r2, [r3, #5]
                (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007ada:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007ade:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007aea:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f00b f9ff 	bl	8012ef8 <CO_CANsend>
                SDO_C->state = CO_SDO_ST_IDLE;
 8007afa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007afe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                ret = CO_SDO_RT_ok_communicationEnd;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
                break;
 8007b10:	e009      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
                break;
 8007b12:	bf00      	nop
 8007b14:	e007      	b.n	8007b26 <CO_SDOclientUpload+0x1536>
 8007b16:	bf00      	nop
 8007b18:	24924925 	.word	0x24924925
 8007b1c:	05040005 	.word	0x05040005
 8007b20:	06070012 	.word	0x06070012
                        break;
 8007b24:	bf00      	nop
            }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8007b26:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d176      	bne.n	8007c1c <CO_SDOclientUpload+0x162c>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 8007b2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b32:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d15f      	bne.n	8007c02 <CO_SDOclientUpload+0x1612>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8007b42:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8007b46:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8007b4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b4e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8007b5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b5e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b6c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8007b78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b7c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b8e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8007b9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b9e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8007baa:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8007bb4:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO_C->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8007bb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007bba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	3309      	adds	r3, #9
 8007bc4:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8007bc8:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8007bca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007bce:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007bda:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f00b f987 	bl	8012ef8 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 8007bea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007bee:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            ret = CO_SDO_RT_endedWithClientAbort;
 8007bfa:	23f7      	movs	r3, #247	; 0xf7
 8007bfc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8007c00:	e00c      	b.n	8007c1c <CO_SDOclientUpload+0x162c>
        }
#if (CO_CONFIG_SDO_CLI&CO_CONFIG_SDO_CLI_BLOCK) != 0
        else if (SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 8007c02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007c06:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b64      	cmp	r3, #100	; 0x64
 8007c14:	d102      	bne.n	8007c1c <CO_SDOclientUpload+0x162c>
            ret = CO_SDO_RT_blockUploadInProgress;
 8007c16:	2302      	movs	r3, #2
 8007c18:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
        } else { /* MISRA C 2004 14.10 */
        }
#endif
    }

    if (sizeIndicated != NULL) {
 8007c1c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <CO_SDOclientUpload+0x1646>
        *sizeIndicated = SDO_C->sizeInd;
 8007c24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007c28:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c30:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8007c34:	601a      	str	r2, [r3, #0]
    }
    if (sizeTransferred != NULL) {
 8007c36:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <CO_SDOclientUpload+0x1660>
        *sizeTransferred = SDO_C->sizeTran;
 8007c3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007c42:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007c4a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8007c4e:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 8007c50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007c54:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <CO_SDOclientUpload+0x167e>
        *SDOabortCode = abortCode;
 8007c5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007c62:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8007c6c:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8007c6e:	f997 346f 	ldrsb.w	r3, [r7, #1135]	; 0x46f
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	f207 4774 	addw	r7, r7, #1140	; 0x474
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd90      	pop	{r4, r7, pc}

08007c7c <CO_SDOclientUploadBufRead>:

size_t
CO_SDOclientUploadBufRead(CO_SDOclient_t* SDO_C, uint8_t* buf, size_t count)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
size_t ret = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]

if ( (SDO_C != NULL) && (buf != NULL) )
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <CO_SDOclientUploadBufRead+0x2e>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <CO_SDOclientUploadBufRead+0x2e>
	{
	ret = CO_fifo_read(&SDO_C->bufFifo, buf, count, NULL);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	f002 f90a 	bl	8009ebc <CO_fifo_read>
 8007ca8:	6178      	str	r0, [r7, #20]
	}

return ret;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8007cc0:	73fb      	strb	r3, [r7, #15]
    return value;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8007cdc:	60fb      	str	r3, [r7, #12]
    return value;
 8007cde:	68fb      	ldr	r3, [r7, #12]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <OD_getIndex>:
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <OD_getIndex+0x14>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	e000      	b.n	8007d02 <OD_getIndex+0x16>
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <OD_extension_init>:
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <OD_extension_init+0x14>
 8007d1e:	2305      	movs	r3, #5
 8007d20:	e003      	b.n	8007d2a <OD_extension_init+0x1c>
    entry->extension = extension;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af02      	add	r7, sp, #8
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	460b      	mov	r3, r1
 8007d44:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8007d46:	7af9      	ldrb	r1, [r7, #11]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7fa ff9b 	bl	8002c8c <OD_get_value>
 8007d56:	4603      	mov	r3, r0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8007d70:	7af9      	ldrb	r1, [r7, #11]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	2304      	movs	r3, #4
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7fa ff86 	bl	8002c8c <OD_get_value>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af02      	add	r7, sp, #8
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	460b      	mov	r3, r1
 8007d98:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8007d9a:	1d3a      	adds	r2, r7, #4
 8007d9c:	7af9      	ldrb	r1, [r7, #11]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	2304      	movs	r3, #4
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7fa ffae 	bl	8002d06 <OD_set_value>
 8007daa:	4603      	mov	r3, r0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3305      	adds	r3, #5
 8007dcc:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8007dce:	7cfb      	ldrb	r3, [r7, #19]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d115      	bne.n	8007e00 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b80      	cmp	r3, #128	; 0x80
 8007dda:	d103      	bne.n	8007de4 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2200      	movs	r2, #0
 8007de0:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8007de2:	e00d      	b.n	8007e00 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	3340      	adds	r3, #64	; 0x40
 8007df0:	7cfa      	ldrb	r2, [r7, #19]
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f017 fcbd 	bl	801f774 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e00:	bf00      	nop
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	460b      	mov	r3, r1
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d106      	bne.n	8007e36 <CO_SDOserver_init_canRxTx+0x2e>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d101      	bne.n	8007e36 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e04e      	b.n	8007ed4 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a3a      	ldr	r2, [r7, #32]
 8007e3a:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e40:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db02      	blt.n	8007e4e <CO_SDOserver_init_canRxTx+0x46>
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	e000      	b.n	8007e50 <CO_SDOserver_init_canRxTx+0x48>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	db02      	blt.n	8007e5e <CO_SDOserver_init_canRxTx+0x56>
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	e000      	b.n	8007e60 <CO_SDOserver_init_canRxTx+0x58>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8007e62:	8afb      	ldrh	r3, [r7, #22]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <CO_SDOserver_init_canRxTx+0x6e>
 8007e68:	8abb      	ldrh	r3, [r7, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	e006      	b.n	8007e84 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8007e84:	8afa      	ldrh	r2, [r7, #22]
 8007e86:	88f9      	ldrh	r1, [r7, #6]
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <CO_SDOserver_init_canRxTx+0xd4>)
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	2300      	movs	r3, #0
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007e98:	68b8      	ldr	r0, [r7, #8]
 8007e9a:	f00a ff55 	bl	8012d48 <CO_CANrxBufferInit>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	8aba      	ldrh	r2, [r7, #20]
 8007ea8:	88b9      	ldrh	r1, [r7, #4]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2308      	movs	r3, #8
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f00a ffa6 	bl	8012e04 <CO_CANtxBufferInit>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007ec6:	23ff      	movs	r3, #255	; 0xff
 8007ec8:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8007ed0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	08007db5 	.word	0x08007db5

08007ee0 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b08f      	sub	sp, #60	; 0x3c
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <OD_write_1201_additional+0x20>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <OD_write_1201_additional+0x20>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8007f00:	2309      	movs	r3, #9
 8007f02:	e0f9      	b.n	80080f8 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	7d1b      	ldrb	r3, [r3, #20]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	f200 80e8 	bhi.w	80080e4 <OD_write_1201_additional+0x204>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <OD_write_1201_additional+0x3c>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007ff5 	.word	0x08007ff5
 8007f28:	080080bb 	.word	0x080080bb
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	e0e3      	b.n	80080f8 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8007f30:	68b8      	ldr	r0, [r7, #8]
 8007f32:	f7ff fecd 	bl	8007cd0 <CO_getUint32>
 8007f36:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f40:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f4c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	43db      	mvns	r3, r3
 8007f52:	0fdb      	lsrs	r3, r3, #31
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4b69      	ldr	r3, [pc, #420]	; (8008100 <OD_write_1201_additional+0x220>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d134      	bne.n	8007fcc <OD_write_1201_additional+0xec>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <OD_write_1201_additional+0x98>
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <OD_write_1201_additional+0x98>
 8007f70:	8afa      	ldrh	r2, [r7, #22]
 8007f72:	8abb      	ldrh	r3, [r7, #20]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d129      	bne.n	8007fcc <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d028      	beq.n	8007fd0 <OD_write_1201_additional+0xf0>
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	2b7f      	cmp	r3, #127	; 0x7f
 8007f82:	d923      	bls.n	8007fcc <OD_write_1201_additional+0xec>
 8007f84:	8afb      	ldrh	r3, [r7, #22]
 8007f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8a:	d903      	bls.n	8007f94 <OD_write_1201_additional+0xb4>
 8007f8c:	8afb      	ldrh	r3, [r7, #22]
 8007f8e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007f92:	d91b      	bls.n	8007fcc <OD_write_1201_additional+0xec>
 8007f94:	8afb      	ldrh	r3, [r7, #22]
 8007f96:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007f9a:	d903      	bls.n	8007fa4 <OD_write_1201_additional+0xc4>
 8007f9c:	8afb      	ldrh	r3, [r7, #22]
 8007f9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007fa2:	d313      	bcc.n	8007fcc <OD_write_1201_additional+0xec>
 8007fa4:	8afb      	ldrh	r3, [r7, #22]
 8007fa6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007faa:	d903      	bls.n	8007fb4 <OD_write_1201_additional+0xd4>
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007fb2:	d30b      	bcc.n	8007fcc <OD_write_1201_additional+0xec>
 8007fb4:	8afb      	ldrh	r3, [r7, #22]
 8007fb6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8007fba:	d303      	bcc.n	8007fc4 <OD_write_1201_additional+0xe4>
 8007fbc:	8afb      	ldrh	r3, [r7, #22]
 8007fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fc2:	d303      	bcc.n	8007fcc <OD_write_1201_additional+0xec>
 8007fc4:	8afb      	ldrh	r3, [r7, #22]
 8007fc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fca:	d901      	bls.n	8007fd0 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8007fcc:	230f      	movs	r3, #15
 8007fce:	e093      	b.n	80080f8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	4603      	mov	r3, r0
 8007fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fee:	f7ff ff0b 	bl	8007e08 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8007ff2:	e07a      	b.n	80080ea <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f7ff fe6b 	bl	8007cd0 <CO_getUint32>
 8007ffa:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008004:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	b29b      	uxth	r3, r3
 800800c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008010:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	43db      	mvns	r3, r3
 8008016:	0fdb      	lsrs	r3, r3, #31
 8008018:	b2db      	uxtb	r3, r3
 800801a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	4b38      	ldr	r3, [pc, #224]	; (8008100 <OD_write_1201_additional+0x220>)
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d134      	bne.n	8008090 <OD_write_1201_additional+0x1b0>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d007      	beq.n	800803c <OD_write_1201_additional+0x15c>
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <OD_write_1201_additional+0x15c>
 8008034:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008036:	8c3b      	ldrh	r3, [r7, #32]
 8008038:	429a      	cmp	r2, r3
 800803a:	d129      	bne.n	8008090 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d028      	beq.n	8008094 <OD_write_1201_additional+0x1b4>
 8008042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008044:	2b7f      	cmp	r3, #127	; 0x7f
 8008046:	d923      	bls.n	8008090 <OD_write_1201_additional+0x1b0>
 8008048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800804a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804e:	d903      	bls.n	8008058 <OD_write_1201_additional+0x178>
 8008050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008052:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008056:	d91b      	bls.n	8008090 <OD_write_1201_additional+0x1b0>
 8008058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800805a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800805e:	d903      	bls.n	8008068 <OD_write_1201_additional+0x188>
 8008060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008062:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008066:	d313      	bcc.n	8008090 <OD_write_1201_additional+0x1b0>
 8008068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800806a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800806e:	d903      	bls.n	8008078 <OD_write_1201_additional+0x198>
 8008070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008072:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8008076:	d30b      	bcc.n	8008090 <OD_write_1201_additional+0x1b0>
 8008078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800807a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800807e:	d303      	bcc.n	8008088 <OD_write_1201_additional+0x1a8>
 8008080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008086:	d303      	bcc.n	8008090 <OD_write_1201_additional+0x1b0>
 8008088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800808a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800808e:	d901      	bls.n	8008094 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8008090:	230f      	movs	r3, #15
 8008092:	e031      	b.n	80080f8 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	9201      	str	r2, [sp, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4623      	mov	r3, r4
 80080b0:	4602      	mov	r2, r0
 80080b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080b4:	f7ff fea8 	bl	8007e08 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 80080b8:	e017      	b.n	80080ea <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d001      	beq.n	80080c4 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80080c0:	230b      	movs	r3, #11
 80080c2:	e019      	b.n	80080f8 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80080c4:	68b8      	ldr	r0, [r7, #8]
 80080c6:	f7ff fdf5 	bl	8007cb4 <CO_getUint8>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80080d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <OD_write_1201_additional+0x200>
 80080d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da03      	bge.n	80080e8 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80080e0:	230f      	movs	r3, #15
 80080e2:	e009      	b.n	80080f8 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 80080e4:	230e      	movs	r3, #14
 80080e6:	e007      	b.n	80080f8 <OD_write_1201_additional+0x218>
            break;
 80080e8:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7fa fbd0 	bl	8002896 <OD_writeOriginal>
 80080f6:	4603      	mov	r3, r0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3734      	adds	r7, #52	; 0x34
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd90      	pop	{r4, r7, pc}
 8008100:	3ffff800 	.word	0x3ffff800

08008104 <CO_SDOserver_init>:
					uint16_t CANdevRxIdx,
					CO_CANmodule_t* CANdevTx,
					uint16_t CANdevTxIdx,
					uint32_t* errInfo
					)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08c      	sub	sp, #48	; 0x30
 8008108:	af02      	add	r7, sp, #8
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <CO_SDOserver_init+0x26>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <CO_SDOserver_init+0x26>
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <CO_SDOserver_init+0x26>
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <CO_SDOserver_init+0x2c>
        { return CO_ERROR_ILLEGAL_ARGUMENT; }
 800812a:	f04f 33ff 	mov.w	r3, #4294967295
 800812e:	e0f5      	b.n	800831c <CO_SDOserver_init+0x218>


    /* Configure object variables */
    SDO->OD = OD;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	731a      	strb	r2, [r3, #12]

#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 800813c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800813e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008142:	fb03 f202 	mul.w	r2, r3, r2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	679a      	str	r2, [r3, #120]	; 0x78

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif

    SDO->state = CO_SDO_ST_IDLE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d117      	bne.n	8008186 <CO_SDOserver_init+0x82>
    {
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U))
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <CO_SDOserver_init+0x60>
 800815c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008160:	2b00      	cmp	r3, #0
 8008162:	da02      	bge.n	800816a <CO_SDOserver_init+0x66>
        	{  return CO_ERROR_ILLEGAL_ARGUMENT; }
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	e0d8      	b.n	800831c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008172:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	b29b      	uxth	r3, r3
 8008178:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800817c:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	611a      	str	r2, [r3, #16]
 8008184:	e0a4      	b.n	80082d0 <CO_SDOserver_init+0x1cc>
    } else {
        	uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fdb0 	bl	8007cec <OD_getIndex>
 800818c:	4603      	mov	r3, r0
 800818e:	847b      	strh	r3, [r7, #34]	; 0x22

        	if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8008190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008192:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8008196:	d123      	bne.n	80081e0 <CO_SDOserver_init+0xdc>
        	{
            /* configure default SDO channel and SDO server parameters for it */
        		if ((nodeId < 1U) || (nodeId > 127U)) {  return CO_ERROR_ILLEGAL_ARGUMENT;  }
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <CO_SDOserver_init+0xa2>
 800819e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da02      	bge.n	80081ac <CO_SDOserver_init+0xa8>
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	e0b7      	b.n	800831c <CO_SDOserver_init+0x218>

				CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80081b4:	84fb      	strh	r3, [r7, #38]	; 0x26
				CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80081be:	84bb      	strh	r3, [r7, #36]	; 0x24
				SDO->valid = true;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	611a      	str	r2, [r3, #16]

				(void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80081c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081c8:	2301      	movs	r3, #1
 80081ca:	2101      	movs	r1, #1
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fddc 	bl	8007d8a <OD_set_u32>
				(void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80081d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081d4:	2301      	movs	r3, #1
 80081d6:	2102      	movs	r1, #2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fdd6 	bl	8007d8a <OD_set_u32>
 80081de:	e077      	b.n	80082d0 <CO_SDOserver_init+0x1cc>

        	} else if (
 80081e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081e2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80081e6:	d96f      	bls.n	80082c8 <CO_SDOserver_init+0x1c4>
        				 (OD_SDOsrvParIdx >   (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
                      && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))
 80081e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081ea:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80081ee:	d26b      	bcs.n	80082c8 <CO_SDOserver_init+0x1c4>
							/* configure additional SDO channel and SDO server parameters for it */
						uint8_t maxSubIndex;
						uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

						/* get and verify parameters from Object Dictionary (initial values) */
						ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 80081f0:	f107 021d 	add.w	r2, r7, #29
 80081f4:	2301      	movs	r3, #1
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fd9c 	bl	8007d36 <OD_get_u8>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8008204:	f107 0218 	add.w	r2, r7, #24
 8008208:	2301      	movs	r3, #1
 800820a:	2101      	movs	r1, #1
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff fda7 	bl	8007d60 <OD_get_u32>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3020 	strb.w	r3, [r7, #32]
						ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8008218:	f107 0214 	add.w	r2, r7, #20
 800821c:	2301      	movs	r3, #1
 800821e:	2102      	movs	r1, #2
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fd9d 	bl	8007d60 <OD_get_u32>
 8008226:	4603      	mov	r3, r0
 8008228:	77fb      	strb	r3, [r7, #31]

						 if (
 800822a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <CO_SDOserver_init+0x14a>
								(odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U))
 8008232:	7f7b      	ldrb	r3, [r7, #29]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d002      	beq.n	800823e <CO_SDOserver_init+0x13a>
 8008238:	7f7b      	ldrb	r3, [r7, #29]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d107      	bne.n	800824e <CO_SDOserver_init+0x14a>
							 || (odRet1 != ODR_OK)|| (odRet2 != ODR_OK)
 800823e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <CO_SDOserver_init+0x14a>
 8008246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <CO_SDOserver_init+0x15c>
							) {
								if (errInfo != NULL) {*errInfo = OD_SDOsrvParIdx; }
 800824e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <CO_SDOserver_init+0x156>
 8008254:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008258:	601a      	str	r2, [r3, #0]
								return CO_ERROR_OD_PARAMETERS;
 800825a:	f06f 030b 	mvn.w	r3, #11
 800825e:	e05d      	b.n	800831c <CO_SDOserver_init+0x218>
							  }



						CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2b00      	cmp	r3, #0
 8008264:	db05      	blt.n	8008272 <CO_SDOserver_init+0x16e>
												   ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	b29b      	uxth	r3, r3
						CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 800826a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800826e:	b29b      	uxth	r3, r3
 8008270:	e000      	b.n	8008274 <CO_SDOserver_init+0x170>
 8008272:	2300      	movs	r3, #0
 8008274:	84fb      	strh	r3, [r7, #38]	; 0x26
												   : 0U;
						CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db05      	blt.n	8008288 <CO_SDOserver_init+0x184>
												   ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	b29b      	uxth	r3, r3
						CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8008280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008284:	b29b      	uxth	r3, r3
 8008286:	e000      	b.n	800828a <CO_SDOserver_init+0x186>
 8008288:	2300      	movs	r3, #0
 800828a:	84bb      	strh	r3, [r7, #36]	; 0x24
												   : 0U;


#if ( (CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0

            SDO->OD_1200_extension.object = SDO;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <CO_SDOserver_init+0x220>)
 8008296:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4a23      	ldr	r2, [pc, #140]	; (8008328 <CO_SDOserver_init+0x224>)
 800829c:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3358      	adds	r3, #88	; 0x58
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff fd32 	bl	8007d0e <OD_extension_init>
 80082aa:	4603      	mov	r3, r0
 80082ac:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK)
 80082ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <CO_SDOserver_init+0x1ca>
            	{
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 80082b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <CO_SDOserver_init+0x1be>
 80082bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80082be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c0:	601a      	str	r2, [r3, #0]
                  return CO_ERROR_OD_PARAMETERS;
 80082c2:	f06f 030b 	mvn.w	r3, #11
 80082c6:	e029      	b.n	800831c <CO_SDOserver_init+0x218>
                }


#endif
        } else { return CO_ERROR_ILLEGAL_ARGUMENT; }
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	e026      	b.n	800831c <CO_SDOserver_init+0x218>
					  ) {
 80082ce:	bf00      	nop


    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082da:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80082e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80082ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082fe:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8008300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008304:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8008308:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800830a:	9201      	str	r2, [sp, #4]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4603      	mov	r3, r0
 8008310:	460a      	mov	r2, r1
 8008312:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff fd77 	bl	8007e08 <CO_SDOserver_init_canRxTx>
 800831a:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 800831c:	4618      	mov	r0, r3
 800831e:	3728      	adds	r7, #40	; 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	080027e7 	.word	0x080027e7
 8008328:	08007ee1 	.word	0x08007ee1

0800832c <validateAndWriteToOD>:
validateAndWriteToOD ( 	CO_SDOserver_t* SDO,
						CO_SDO_abortCode_t* abortCode,
						uint8_t crcOperation,
						uint16_t crcClient
					 )
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b08b      	sub	sp, #44	; 0x2c
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4611      	mov	r1, r2
 8008338:	461a      	mov	r2, r3
 800833a:	460b      	mov	r3, r1
 800833c:	71fb      	strb	r3, [r7, #7]
 800833e:	4613      	mov	r3, r2
 8008340:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008348:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8082 	beq.w	8008458 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008358:	2b00      	cmp	r3, #0
 800835a:	d015      	beq.n	8008388 <validateAndWriteToOD+0x5c>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008364:	429a      	cmp	r2, r3
 8008366:	d00f      	beq.n	8008388 <validateAndWriteToOD+0x5c>
        {
         *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008370:	429a      	cmp	r2, r3
 8008372:	d901      	bls.n	8008378 <validateAndWriteToOD+0x4c>
 8008374:	4a73      	ldr	r2, [pc, #460]	; (8008544 <validateAndWriteToOD+0x218>)
 8008376:	e000      	b.n	800837a <validateAndWriteToOD+0x4e>
 8008378:	4a73      	ldr	r2, [pc, #460]	; (8008548 <validateAndWriteToOD+0x21c>)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	601a      	str	r2, [r3, #0]
          SDO->state = CO_SDO_ST_ABORT;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	751a      	strb	r2, [r3, #20]
          return false;
 8008384:	2300      	movs	r3, #0
 8008386:	e0d8      	b.n	800853a <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008394:	b25b      	sxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	da42      	bge.n	8008420 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <validateAndWriteToOD+0x7e>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a4:	6a3a      	ldr	r2, [r7, #32]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d93a      	bls.n	8008420 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083b0:	3302      	adds	r3, #2
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d834      	bhi.n	8008420 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <validateAndWriteToOD+0xc2>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e8:	6a3a      	ldr	r2, [r7, #32]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d913      	bls.n	8008416 <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	621a      	str	r2, [r3, #32]
 800841e:	e02d      	b.n	800847c <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	621a      	str	r2, [r3, #32]
 800842e:	e025      	b.n	800847c <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008434:	6a3a      	ldr	r2, [r7, #32]
 8008436:	429a      	cmp	r2, r3
 8008438:	d020      	beq.n	800847c <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	429a      	cmp	r2, r3
 8008442:	d201      	bcs.n	8008448 <validateAndWriteToOD+0x11c>
 8008444:	4a3f      	ldr	r2, [pc, #252]	; (8008544 <validateAndWriteToOD+0x218>)
 8008446:	e000      	b.n	800844a <validateAndWriteToOD+0x11e>
 8008448:	4a3f      	ldr	r2, [pc, #252]	; (8008548 <validateAndWriteToOD+0x21c>)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	751a      	strb	r2, [r3, #20]
            return false;
 8008454:	2300      	movs	r3, #0
 8008456:	e070      	b.n	800853a <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00d      	beq.n	800847c <validateAndWriteToOD+0x150>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008468:	429a      	cmp	r2, r3
 800846a:	d907      	bls.n	800847c <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4a35      	ldr	r2, [pc, #212]	; (8008544 <validateAndWriteToOD+0x218>)
 8008470:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	751a      	strb	r2, [r3, #20]
            return false;
 8008478:	2300      	movs	r3, #0
 800847a:	e05e      	b.n	800853a <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008484:	f3ef 8210 	mrs	r2, PRIMASK
 8008488:	617a      	str	r2, [r7, #20]
  return(result);
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800848e:	b672      	cpsid	i
}
 8008490:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f103 0018 	add.w	r0, r3, #24
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	47a0      	blx	r4
 80084ae:	4603      	mov	r3, r0
 80084b0:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f383 8810 	msr	PRIMASK, r3
}
 80084c0:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80084ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d011      	beq.n	80084f6 <validateAndWriteToOD+0x1ca>
 80084d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d00c      	beq.n	80084f6 <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80084dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fa fbb5 	bl	8002c50 <OD_getSDOabCode>
 80084e6:	4602      	mov	r2, r0
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	751a      	strb	r2, [r3, #20]
        return false;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e021      	b.n	800853a <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <validateAndWriteToOD+0x1ec>
 80084fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d107      	bne.n	8008518 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4a0f      	ldr	r2, [pc, #60]	; (8008548 <validateAndWriteToOD+0x21c>)
 800850c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	751a      	strb	r2, [r3, #20]
        return false;
 8008514:	2300      	movs	r3, #0
 8008516:	e010      	b.n	800853a <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10b      	bne.n	8008538 <validateAndWriteToOD+0x20c>
 8008520:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d107      	bne.n	8008538 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a06      	ldr	r2, [pc, #24]	; (8008544 <validateAndWriteToOD+0x218>)
 800852c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	751a      	strb	r2, [r3, #20]
        return false;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	372c      	adds	r7, #44	; 0x2c
 800853e:	46bd      	mov	sp, r7
 8008540:	bd90      	pop	{r4, r7, pc}
 8008542:	bf00      	nop
 8008544:	06070012 	.word	0x06070012
 8008548:	06070013 	.word	0x06070013

0800854c <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b08d      	sub	sp, #52	; 0x34
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	2b00      	cmp	r3, #0
 8008570:	f040 80ab 	bne.w	80086ca <readFromOd+0x17e>
 8008574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	f080 80a6 	bcs.w	80086ca <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008590:	4413      	add	r3, r2
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	4619      	mov	r1, r3
 8008596:	f017 f837 	bl	801f608 <memmove>
        SDO->bufOffsetRd = 0;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	f1c3 0320 	rsb	r3, r3, #32
 80085b0:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ba:	f3ef 8210 	mrs	r2, PRIMASK
 80085be:	617a      	str	r2, [r7, #20]
  return(result);
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80085c4:	b672      	cpsid	i
}
 80085c6:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f103 0018 	add.w	r0, r3, #24
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	3380      	adds	r3, #128	; 0x80
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	18d1      	adds	r1, r2, r3
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	6a3a      	ldr	r2, [r7, #32]
 80085e0:	47a0      	blx	r4
 80085e2:	4603      	mov	r3, r0
 80085e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f383 8810 	msr	PRIMASK, r3
}
 80085f6:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80085f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d011      	beq.n	8008624 <readFromOd+0xd8>
 8008600:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d00c      	beq.n	8008624 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800860a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800860e:	4618      	mov	r0, r3
 8008610:	f7fa fb1e 	bl	8002c50 <OD_getSDOabCode>
 8008614:	4602      	mov	r2, r0
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	751a      	strb	r2, [r3, #20]
            return false;
 8008620:	2300      	movs	r3, #0
 8008622:	e053      	b.n	80086cc <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	4413      	add	r3, r2
 800862a:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d027      	beq.n	8008682 <readFromOd+0x136>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008638:	b25b      	sxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	da21      	bge.n	8008682 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	3380      	adds	r3, #128	; 0x80
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	3380      	adds	r3, #128	; 0x80
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	4618      	mov	r0, r3
 8008654:	f7f7 fe1c 	bl	8000290 <strlen>
 8008658:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <readFromOd+0x118>
                countStr = 1;
 8008660:	2301      	movs	r3, #1
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008668:	429a      	cmp	r2, r3
 800866a:	d20a      	bcs.n	8008682 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	441a      	add	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	441a      	add	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <readFromOd+0x156>
 8008698:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d110      	bne.n	80086c4 <readFromOd+0x178>
            SDO->finished = false;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d90a      	bls.n	80086ca <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4a07      	ldr	r2, [pc, #28]	; (80086d4 <readFromOd+0x188>)
 80086b8:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	751a      	strb	r2, [r3, #20]
                return false;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e003      	b.n	80086cc <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 80086ca:	2301      	movs	r3, #1
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3734      	adds	r7, #52	; 0x34
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd90      	pop	{r4, r7, pc}
 80086d4:	06040047 	.word	0x06040047

080086d8 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b09b      	sub	sp, #108	; 0x6c
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 80086ec:	f06f 0301 	mvn.w	r3, #1
 80086f0:	f000 bd00 	b.w	80090f4 <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	7d1b      	ldrb	r3, [r3, #20]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <CO_SDOserver_process+0x56>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d006      	beq.n	800872e <CO_SDOserver_process+0x56>
 8008720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8008726:	2300      	movs	r3, #0
 8008728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800872c:	e2d7      	b.n	8008cde <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <CO_SDOserver_process+0x64>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8008748:	2300      	movs	r3, #0
 800874a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800874e:	e2c6      	b.n	8008cde <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8008750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 82c3 	beq.w	8008cde <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	7d1b      	ldrb	r3, [r3, #20]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 80cc 	bne.w	80088fc <CO_SDOserver_process+0x224>
            bool_t upload = false;
 8008764:	2300      	movs	r3, #0
 8008766:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800876e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008772:	2b20      	cmp	r3, #32
 8008774:	d103      	bne.n	800877e <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2211      	movs	r2, #17
 800877a:	751a      	strb	r2, [r3, #20]
 800877c:	e00f      	b.n	800879e <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008784:	2b40      	cmp	r3, #64	; 0x40
 8008786:	d105      	bne.n	8008794 <CO_SDOserver_process+0xbc>
                upload = true;
 8008788:	2301      	movs	r3, #1
 800878a:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2221      	movs	r2, #33	; 0x21
 8008790:	751a      	strb	r2, [r3, #20]
 8008792:	e004      	b.n	800879e <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8008794:	4ba7      	ldr	r3, [pc, #668]	; (8008a34 <CO_SDOserver_process+0x35c>)
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d162      	bne.n	800886a <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087b4:	b21b      	sxth	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b21b      	sxth	r3, r3
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fa f8e6 	bl	80029a8 <OD_find>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f103 0218 	add.w	r2, r3, #24
 80087e8:	2300      	movs	r3, #0
 80087ea:	f7fa f939 	bl	8002a60 <OD_getSub>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 80087f4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80087fc:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8008800:	4618      	mov	r0, r3
 8008802:	f7fa fa25 	bl	8002c50 <OD_getSDOabCode>
 8008806:	4603      	mov	r3, r0
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	751a      	strb	r2, [r3, #20]
 8008810:	e02b      	b.n	800886a <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d105      	bne.n	800882c <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8008820:	4b85      	ldr	r3, [pc, #532]	; (8008a38 <CO_SDOserver_process+0x360>)
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	751a      	strb	r2, [r3, #20]
 800882a:	e01e      	b.n	800886a <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 800882c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <CO_SDOserver_process+0x174>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d105      	bne.n	800884c <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8008840:	4b7e      	ldr	r3, [pc, #504]	; (8008a3c <CO_SDOserver_process+0x364>)
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	751a      	strb	r2, [r3, #20]
 800884a:	e00e      	b.n	800886a <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 800884c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <CO_SDOserver_process+0x192>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 8008860:	4b77      	ldr	r3, [pc, #476]	; (8008a40 <CO_SDOserver_process+0x368>)
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 800886a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800886c:	2b00      	cmp	r3, #0
 800886e:	d045      	beq.n	80088fc <CO_SDOserver_process+0x224>
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d142      	bne.n	80088fc <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8008892:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008896:	2300      	movs	r3, #0
 8008898:	2207      	movs	r2, #7
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fe56 	bl	800854c <readFromOd>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d02a      	beq.n	80088fc <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01a      	beq.n	80088e4 <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68
 80088c8:	e018      	b.n	80088fc <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d011      	beq.n	80088fc <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80088d8:	4b5a      	ldr	r3, [pc, #360]	; (8008a44 <CO_SDOserver_process+0x36c>)
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	751a      	strb	r2, [r3, #20]
 80088e2:	e00b      	b.n	80088fc <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ea:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db02      	blt.n	80088f6 <CO_SDOserver_process+0x21e>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	e000      	b.n	80088f8 <CO_SDOserver_process+0x220>
 80088f6:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	7d1b      	ldrb	r3, [r3, #20]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	bf14      	ite	ne
 8008906:	2301      	movne	r3, #1
 8008908:	2300      	moveq	r3, #0
 800890a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	7d1b      	ldrb	r3, [r3, #20]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	d005      	beq.n	8008924 <CO_SDOserver_process+0x24c>
 8008918:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <CO_SDOserver_process+0x24c>
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <CO_SDOserver_process+0x24e>
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800892a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 8008936:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 81c7 	beq.w	8008cce <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	7d1b      	ldrb	r3, [r3, #20]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	3b11      	subs	r3, #17
 8008948:	2b12      	cmp	r3, #18
 800894a:	f200 81b1 	bhi.w	8008cb0 <CO_SDOserver_process+0x5d8>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <CO_SDOserver_process+0x27c>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	080089a1 	.word	0x080089a1
 8008958:	08008cb1 	.word	0x08008cb1
 800895c:	08008b69 	.word	0x08008b69
 8008960:	08008cb1 	.word	0x08008cb1
 8008964:	08008cb1 	.word	0x08008cb1
 8008968:	08008cb1 	.word	0x08008cb1
 800896c:	08008cb1 	.word	0x08008cb1
 8008970:	08008cb1 	.word	0x08008cb1
 8008974:	08008cb1 	.word	0x08008cb1
 8008978:	08008cb1 	.word	0x08008cb1
 800897c:	08008cb1 	.word	0x08008cb1
 8008980:	08008cb1 	.word	0x08008cb1
 8008984:	08008cb1 	.word	0x08008cb1
 8008988:	08008cb1 	.word	0x08008cb1
 800898c:	08008cb1 	.word	0x08008cb1
 8008990:	08008cb1 	.word	0x08008cb1
 8008994:	08008c5f 	.word	0x08008c5f
 8008998:	08008cb1 	.word	0x08008cb1
 800899c:	08008c67 	.word	0x08008c67
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80a2 	beq.w	8008af4 <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 80089b6:	2304      	movs	r3, #4
 80089b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089dc:	e007      	b.n	80089ee <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 80089de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <CO_SDOserver_process+0x316>
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d801      	bhi.n	80089ee <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 80089ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ec:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 80089ee:	2300      	movs	r3, #0
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
 80089f2:	2300      	movs	r3, #0
 80089f4:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80089fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a02:	4618      	mov	r0, r3
 8008a04:	f016 feb6 	bl	801f774 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a0e:	b25b      	sxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da21      	bge.n	8008a58 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8008a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <CO_SDOserver_process+0x34a>
 8008a1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d21a      	bcs.n	8008a58 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8008a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8008a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d10b      	bne.n	8008a48 <CO_SDOserver_process+0x370>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e00a      	b.n	8008a4a <CO_SDOserver_process+0x372>
 8008a34:	05040001 	.word	0x05040001
 8008a38:	06010000 	.word	0x06010000
 8008a3c:	06010001 	.word	0x06010001
 8008a40:	06010002 	.word	0x06010002
 8008a44:	06040047 	.word	0x06040047
 8008a48:	2302      	movs	r3, #2
 8008a4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a4c:	4413      	add	r3, r2
 8008a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a54:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8008a56:	e016      	b.n	8008a86 <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 8008a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a62:	621a      	str	r2, [r3, #32]
 8008a64:	e00f      	b.n	8008a86 <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8008a66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d00b      	beq.n	8008a86 <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8008a6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d901      	bls.n	8008a7a <CO_SDOserver_process+0x3a2>
 8008a76:	4b91      	ldr	r3, [pc, #580]	; (8008cbc <CO_SDOserver_process+0x5e4>)
 8008a78:	e000      	b.n	8008a7c <CO_SDOserver_process+0x3a4>
 8008a7a:	4b91      	ldr	r3, [pc, #580]	; (8008cc0 <CO_SDOserver_process+0x5e8>)
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	751a      	strb	r2, [r3, #20]
                            break;
 8008a84:	e123      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8e:	f3ef 8210 	mrs	r2, PRIMASK
 8008a92:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8008a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a96:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8008a98:	b672      	cpsid	i
}
 8008a9a:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f103 0018 	add.w	r0, r3, #24
 8008aa6:	f107 0320 	add.w	r3, r7, #32
 8008aaa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008aae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ab0:	47a0      	blx	r4
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	f383 8810 	msr	PRIMASK, r3
}
 8008ac6:	bf00      	nop

                        if (odRet != ODR_OK) {
 8008ac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8008ad0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fa f8bb 	bl	8002c50 <OD_getSDOabCode>
 8008ada:	4603      	mov	r3, r0
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	751a      	strb	r2, [r3, #20]
                            break;
 8008ae4:	e0f3      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2212      	movs	r2, #18
 8008aea:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8008af2:	e0ec      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d028      	beq.n	8008b54 <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3344      	adds	r3, #68	; 0x44
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 8008b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01e      	beq.n	8008b5a <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d205      	bcs.n	8008b32 <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 8008b26:	4b65      	ldr	r3, [pc, #404]	; (8008cbc <CO_SDOserver_process+0x5e4>)
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	751a      	strb	r2, [r3, #20]
                                    break;
 8008b30:	e0cd      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d90e      	bls.n	8008b5a <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db08      	blt.n	8008b5a <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8008b48:	4b5d      	ldr	r3, [pc, #372]	; (8008cc0 <CO_SDOserver_process+0x5e8>)
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	751a      	strb	r2, [r3, #20]
                                    break;
 8008b52:	e0bc      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2212      	movs	r2, #18
 8008b5e:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 8008b66:	e0b2      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b6e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d16d      	bne.n	8008c52 <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ba4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d005      	beq.n	8008bb8 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8008bac:	4b45      	ldr	r3, [pc, #276]	; (8008cc4 <CO_SDOserver_process+0x5ec>)
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	751a      	strb	r2, [r3, #20]
                            break;
 8008bb6:	e08a      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bbe:	085b      	lsrs	r3, r3, #1
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bd6:	18d0      	adds	r0, r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3341      	adds	r3, #65	; 0x41
 8008bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bde:	4619      	mov	r1, r3
 8008be0:	f016 fdc8 	bl	801f774 <memcpy>
                        SDO->bufOffsetWr += count;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfa:	441a      	add	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <CO_SDOserver_process+0x548>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d905      	bls.n	8008c20 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8008c14:	4b29      	ldr	r3, [pc, #164]	; (8008cbc <CO_SDOserver_process+0x5e4>)
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	751a      	strb	r2, [r3, #20]
                            break;
 8008c1e:	e056      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <CO_SDOserver_process+0x55e>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c2e:	f1c3 0320 	rsb	r3, r3, #32
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d809      	bhi.n	8008c4a <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8008c36:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fb74 	bl	800832c <validateAndWriteToOD>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d040      	beq.n	8008ccc <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2214      	movs	r2, #20
 8008c4e:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8008c50:	e03d      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <CO_SDOserver_process+0x5f0>)
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	751a      	strb	r2, [r3, #20]
                    break;
 8008c5c:	e037      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2222      	movs	r2, #34	; 0x22
 8008c62:	751a      	strb	r2, [r3, #20]
                    break;
 8008c64:	e033      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c6c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8008c70:	2b60      	cmp	r3, #96	; 0x60
 8008c72:	d117      	bne.n	8008ca4 <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c7a:	f003 0310 	and.w	r3, r3, #16
 8008c7e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008c88:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8008c90:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <CO_SDOserver_process+0x5ec>)
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	751a      	strb	r2, [r3, #20]
                            break;
 8008c9a:	e018      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2224      	movs	r2, #36	; 0x24
 8008ca0:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8008ca2:	e014      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <CO_SDOserver_process+0x5f0>)
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	751a      	strb	r2, [r3, #20]
                    break;
 8008cae:	e00e      	b.n	8008cce <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <CO_SDOserver_process+0x5f0>)
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	751a      	strb	r2, [r3, #20]
                    break;
 8008cba:	e008      	b.n	8008cce <CO_SDOserver_process+0x5f6>
 8008cbc:	06070012 	.word	0x06070012
 8008cc0:	06070013 	.word	0x06070013
 8008cc4:	05030000 	.word	0x05030000
 8008cc8:	05040001 	.word	0x05040001
                                break;
 8008ccc:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8008cde:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d11e      	bne.n	8008d24 <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d205      	bcs.n	8008cfe <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d304      	bcc.n	8008d14 <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 8008d0a:	4b9c      	ldr	r3, [pc, #624]	; (8008f7c <CO_SDOserver_process+0x8a4>)
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 8008d1e:	2304      	movs	r3, #4
 8008d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8008d24:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 81ab 	bne.w	8009084 <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	3305      	adds	r3, #5
 8008d34:	2208      	movs	r2, #8
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f016 fc7f 	bl	801f63c <memset>

        switch (SDO->state) {
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7d1b      	ldrb	r3, [r3, #20]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	3b12      	subs	r3, #18
 8008d46:	2b12      	cmp	r3, #18
 8008d48:	f200 8199 	bhi.w	800907e <CO_SDOserver_process+0x9a6>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <CO_SDOserver_process+0x67c>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008da1 	.word	0x08008da1
 8008d58:	0800907f 	.word	0x0800907f
 8008d5c:	08008e23 	.word	0x08008e23
 8008d60:	0800907f 	.word	0x0800907f
 8008d64:	0800907f 	.word	0x0800907f
 8008d68:	0800907f 	.word	0x0800907f
 8008d6c:	0800907f 	.word	0x0800907f
 8008d70:	0800907f 	.word	0x0800907f
 8008d74:	0800907f 	.word	0x0800907f
 8008d78:	0800907f 	.word	0x0800907f
 8008d7c:	0800907f 	.word	0x0800907f
 8008d80:	0800907f 	.word	0x0800907f
 8008d84:	0800907f 	.word	0x0800907f
 8008d88:	0800907f 	.word	0x0800907f
 8008d8c:	0800907f 	.word	0x0800907f
 8008d90:	0800907f 	.word	0x0800907f
 8008d94:	08008e7f 	.word	0x08008e7f
 8008d98:	0800907f 	.word	0x0800907f
 8008d9c:	08008f4d 	.word	0x08008f4d
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2260      	movs	r2, #96	; 0x60
 8008da6:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	b2d2      	uxtb	r2, r2
 8008dc2:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8008dce:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f00a f889 	bl	8012ef8 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d006      	beq.n	8008dfc <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8008dfa:	e143      	b.n	8009084 <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2213      	movs	r2, #19
 8008e1e:	751a      	strb	r2, [r3, #20]
                break;
 8008e20:	e130      	b.n	8009084 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f042 0220 	orr.w	r2, r2, #32
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <CO_SDOserver_process+0x76a>
 8008e3e:	2210      	movs	r2, #16
 8008e40:	e000      	b.n	8008e44 <CO_SDOserver_process+0x76c>
 8008e42:	2200      	movs	r2, #0
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f00a f84c 	bl	8012ef8 <CO_CANsend>
                if (SDO->finished) {
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d006      	beq.n	8008e76 <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8008e74:	e106      	b.n	8009084 <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2213      	movs	r2, #19
 8008e7a:	751a      	strb	r2, [r3, #20]
                break;
 8008e7c:	e102      	b.n	8009084 <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d024      	beq.n	8008ed0 <CO_SDOserver_process+0x7f8>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d820      	bhi.n	8008ed0 <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f1c3 0304 	rsb	r3, r3, #4
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f103 0009 	add.w	r0, r3, #9
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f016 fc59 	bl	801f774 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008ece:	e020      	b.n	8008f12 <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008edc:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2241      	movs	r2, #65	; 0x41
 8008ee8:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	3309      	adds	r3, #9
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	e003      	b.n	8008efe <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2240      	movs	r2, #64	; 0x40
 8008efc:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2223      	movs	r2, #35	; 0x23
 8008f10:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8008f38:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f009 ffd7 	bl	8012ef8 <CO_CANsend>
                break;
 8008f4a:	e09b      	b.n	8009084 <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8008f4c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008f50:	2300      	movs	r3, #0
 8008f52:	2207      	movs	r2, #7
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff faf9 	bl	800854c <readFromOd>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8090 	beq.w	8009082 <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008f6c:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <CO_SDOserver_process+0x8a8>
 8008f78:	2210      	movs	r2, #16
 8008f7a:	e002      	b.n	8008f82 <CO_SDOserver_process+0x8aa>
 8008f7c:	05040000 	.word	0x05040000
 8008f80:	2200      	movs	r2, #0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8008f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f9a:	2b06      	cmp	r3, #6
 8008f9c:	d906      	bls.n	8008fac <CO_SDOserver_process+0x8d4>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01b      	beq.n	8008fde <CO_SDOserver_process+0x906>
 8008fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fa8:	2b07      	cmp	r3, #7
 8008faa:	d118      	bne.n	8008fde <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	795a      	ldrb	r2, [r3, #5]
 8008fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f1c3 0307 	rsb	r3, r3, #7
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f042 0201 	orr.w	r2, r2, #1
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008fdc:	e007      	b.n	8008fee <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2223      	movs	r2, #35	; 0x23
 8008fe8:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8008fea:	2307      	movs	r3, #7
 8008fec:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	1d98      	adds	r0, r3, #6
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009000:	4413      	add	r3, r2
 8009002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009004:	4619      	mov	r1, r3
 8009006:	f016 fbb5 	bl	801f774 <memcpy>
                SDO->bufOffsetRd += count;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009012:	441a      	add	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800901e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01e      	beq.n	800906c <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009036:	429a      	cmp	r2, r3
 8009038:	d905      	bls.n	8009046 <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 800903a:	4b30      	ldr	r3, [pc, #192]	; (80090fc <CO_SDOserver_process+0xa24>)
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	751a      	strb	r2, [r3, #20]
                        break;
 8009044:	e01e      	b.n	8009084 <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8009046:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10e      	bne.n	800906c <CO_SDOserver_process+0x994>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	429a      	cmp	r2, r3
 8009058:	d208      	bcs.n	800906c <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 800905a:	4b29      	ldr	r3, [pc, #164]	; (8009100 <CO_SDOserver_process+0xa28>)
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	751a      	strb	r2, [r3, #20]
                        break;
 800906a:	e00b      	b.n	8009084 <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f009 ff3e 	bl	8012ef8 <CO_CANsend>
                break;
 800907c:	e002      	b.n	8009084 <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <CO_SDOserver_process+0x9ac>
                    break;
 8009082:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8009084:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009088:	2b01      	cmp	r3, #1
 800908a:	d131      	bne.n	80090f0 <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	7d1b      	ldrb	r3, [r3, #20]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d12c      	bne.n	80090f0 <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2280      	movs	r2, #128	; 0x80
 80090a0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b2d2      	uxtb	r2, r2
 80090ac:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80090c8:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	3309      	adds	r3, #9
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f009 ff0a 	bl	8012ef8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 80090ea:	23f6      	movs	r3, #246	; 0xf6
 80090ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80090f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	376c      	adds	r7, #108	; 0x6c
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}
 80090fc:	06070012 	.word	0x06070012
 8009100:	06070013 	.word	0x06070013

08009104 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8009110:	73fb      	strb	r3, [r7, #15]
    return value;
 8009112:	7bfb      	ldrb	r3, [r7, #15]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800912c:	60fb      	str	r3, [r7, #12]
    return value;
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <OD_getIndex>:
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <OD_getIndex+0x14>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	e000      	b.n	8009152 <OD_getIndex+0x16>
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <OD_extension_init>:
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <OD_extension_init+0x14>
 800916e:	2305      	movs	r3, #5
 8009170:	e003      	b.n	800917a <OD_extension_init+0x1c>
    entry->extension = extension;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af02      	add	r7, sp, #8
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	460b      	mov	r3, r1
 8009194:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8009196:	7af9      	ldrb	r1, [r7, #11]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2301      	movs	r3, #1
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7f9 fd73 	bl	8002c8c <OD_get_value>
 80091a6:	4603      	mov	r3, r0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	460b      	mov	r3, r1
 80091be:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80091c0:	7af9      	ldrb	r1, [r7, #11]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2304      	movs	r3, #4
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7f9 fd5e 	bl	8002c8c <OD_get_value>
 80091d0:	4603      	mov	r3, r0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7c9b      	ldrb	r3, [r3, #18]
 80091e6:	3301      	adds	r3, #1
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	749a      	strb	r2, [r3, #18]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	7c9a      	ldrb	r2, [r3, #18]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7c5b      	ldrb	r3, [r3, #17]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d902      	bls.n	8009200 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	7c92      	ldrb	r2, [r2, #18]
 8009222:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f009 fe62 	bl	8012ef8 <CO_CANsend>
 8009234:	4603      	mov	r3, r0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 800923e:	b480      	push	{r7}
 8009240:	b087      	sub	sp, #28
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	791b      	ldrb	r3, [r3, #4]
 8009250:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	7c5b      	ldrb	r3, [r3, #17]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10c      	bne.n	8009278 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e019      	b.n	800929e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	b2da      	uxtb	r2, r3
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	721a      	strb	r2, [r3, #8]
 8009276:	e012      	b.n	800929e <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d109      	bne.n	8009292 <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	3305      	adds	r3, #5
 8009282:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e005      	b.n	800929e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009298:	b2da      	uxtb	r2, r3
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00c      	beq.n	80092be <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bf0c      	ite	eq
 80092ac:	2301      	moveq	r3, #1
 80092ae:	2300      	movne	r3, #0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2201      	movs	r2, #1
 80092bc:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80092cc:	b590      	push	{r4, r7, lr}
 80092ce:	b08f      	sub	sp, #60	; 0x3c
 80092d0:	af04      	add	r7, sp, #16
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <OD_write_1005+0x2e>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	7d1b      	ldrb	r3, [r3, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d108      	bne.n	80092fa <OD_write_1005+0x2e>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <OD_write_1005+0x2e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d102      	bne.n	80092fa <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 80092fa:	2309      	movs	r3, #9
 80092fc:	e0a2      	b.n	8009444 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8009304:	68b8      	ldr	r0, [r7, #8]
 8009306:	f7ff ff0b 	bl	8009120 <CO_getUint32>
 800930a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	b29b      	uxth	r3, r3
 8009310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009314:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	bf14      	ite	ne
 8009320:	2301      	movne	r3, #1
 8009322:	2300      	moveq	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8009328:	6a3a      	ldr	r2, [r7, #32]
 800932a:	4b48      	ldr	r3, [pc, #288]	; (800944c <OD_write_1005+0x180>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d133      	bne.n	800939a <OD_write_1005+0xce>
 8009332:	8bfb      	ldrh	r3, [r7, #30]
 8009334:	2b7f      	cmp	r3, #127	; 0x7f
 8009336:	d930      	bls.n	800939a <OD_write_1005+0xce>
 8009338:	8bfb      	ldrh	r3, [r7, #30]
 800933a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800933e:	d903      	bls.n	8009348 <OD_write_1005+0x7c>
 8009340:	8bfb      	ldrh	r3, [r7, #30]
 8009342:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009346:	d928      	bls.n	800939a <OD_write_1005+0xce>
 8009348:	8bfb      	ldrh	r3, [r7, #30]
 800934a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800934e:	d903      	bls.n	8009358 <OD_write_1005+0x8c>
 8009350:	8bfb      	ldrh	r3, [r7, #30]
 8009352:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009356:	d320      	bcc.n	800939a <OD_write_1005+0xce>
 8009358:	8bfb      	ldrh	r3, [r7, #30]
 800935a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800935e:	d903      	bls.n	8009368 <OD_write_1005+0x9c>
 8009360:	8bfb      	ldrh	r3, [r7, #30]
 8009362:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8009366:	d318      	bcc.n	800939a <OD_write_1005+0xce>
 8009368:	8bfb      	ldrh	r3, [r7, #30]
 800936a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800936e:	d303      	bcc.n	8009378 <OD_write_1005+0xac>
 8009370:	8bfb      	ldrh	r3, [r7, #30]
 8009372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009376:	d310      	bcc.n	800939a <OD_write_1005+0xce>
 8009378:	8bfb      	ldrh	r3, [r7, #30]
 800937a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800937e:	d80c      	bhi.n	800939a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00a      	beq.n	800939e <OD_write_1005+0xd2>
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <OD_write_1005+0xd2>
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009394:	8bfa      	ldrh	r2, [r7, #30]
 8009396:	429a      	cmp	r2, r3
 8009398:	d001      	beq.n	800939e <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 800939a:	230f      	movs	r3, #15
 800939c:	e052      	b.n	8009444 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80093a4:	8bfa      	ldrh	r2, [r7, #30]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d039      	beq.n	800941e <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80093b2:	8bfa      	ldrh	r2, [r7, #30]
 80093b4:	4b26      	ldr	r3, [pc, #152]	; (8009450 <OD_write_1005+0x184>)
 80093b6:	9302      	str	r3, [sp, #8]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	2300      	movs	r3, #0
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80093c4:	f009 fcc0 	bl	8012d48 <CO_CANrxBufferInit>
 80093c8:	4603      	mov	r3, r0
 80093ca:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 80093cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80093d4:	2309      	movs	r3, #9
 80093d6:	e035      	b.n	8009444 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <OD_write_1005+0x122>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <OD_write_1005+0x124>
 80093ee:	2300      	movs	r3, #0
 80093f0:	8bfa      	ldrh	r2, [r7, #30]
 80093f2:	2400      	movs	r4, #0
 80093f4:	9401      	str	r4, [sp, #4]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	2300      	movs	r3, #0
 80093fa:	f009 fd03 	bl	8012e04 <CO_CANtxBufferInit>
 80093fe:	4602      	mov	r2, r0
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	2200      	movs	r2, #0
 8009410:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8009412:	2309      	movs	r3, #9
 8009414:	e016      	b.n	8009444 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	8bfa      	ldrh	r2, [r7, #30]
 800941a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	2200      	movs	r2, #0
 800942e:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	2200      	movs	r2, #0
 8009434:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7f9 fa2a 	bl	8002896 <OD_writeOriginal>
 8009442:	4603      	mov	r3, r0
}
 8009444:	4618      	mov	r0, r3
 8009446:	372c      	adds	r7, #44	; 0x2c
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}
 800944c:	bffff800 	.word	0xbffff800
 8009450:	0800923f 	.word	0x0800923f

08009454 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	af02      	add	r7, sp, #8
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <OD_write_1019+0x2e>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	7d1b      	ldrb	r3, [r3, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d108      	bne.n	8009482 <OD_write_1019+0x2e>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <OD_write_1019+0x2e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d102      	bne.n	8009482 <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 8009482:	2309      	movs	r3, #9
 8009484:	e040      	b.n	8009508 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f7ff fe39 	bl	8009104 <CO_getUint8>
 8009492:	4603      	mov	r3, r0
 8009494:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8009496:	7cfb      	ldrb	r3, [r7, #19]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d002      	beq.n	80094a2 <OD_write_1019+0x4e>
 800949c:	7cfb      	ldrb	r3, [r7, #19]
 800949e:	2bf0      	cmp	r3, #240	; 0xf0
 80094a0:	d901      	bls.n	80094a6 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80094a2:	230f      	movs	r3, #15
 80094a4:	e030      	b.n	8009508 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80094b0:	2317      	movs	r3, #23
 80094b2:	e029      	b.n	8009508 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094c4:	7cfb      	ldrb	r3, [r7, #19]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <OD_write_1019+0x7a>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <OD_write_1019+0x7c>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2400      	movs	r4, #0
 80094d2:	9401      	str	r4, [sp, #4]
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	2300      	movs	r3, #0
 80094d8:	f009 fc94 	bl	8012e04 <CO_CANtxBufferInit>
 80094dc:	4602      	mov	r2, r0
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2200      	movs	r2, #0
 80094ee:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80094f0:	2309      	movs	r3, #9
 80094f2:	e009      	b.n	8009508 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	7cfa      	ldrb	r2, [r7, #19]
 80094f8:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7f9 f9c8 	bl	8002896 <OD_writeOriginal>
 8009506:	4603      	mov	r3, r0
}
 8009508:	4618      	mov	r0, r3
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd90      	pop	{r4, r7, pc}

08009510 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af04      	add	r7, sp, #16
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00e      	beq.n	8009542 <CO_SYNC_init+0x32>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00b      	beq.n	8009542 <CO_SYNC_init+0x32>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <CO_SYNC_init+0x32>
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009542:	f04f 33ff 	mov.w	r3, #4294967295
 8009546:	e0fd      	b.n	8009744 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8009548:	225c      	movs	r2, #92	; 0x5c
 800954a:	2100      	movs	r1, #0
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f016 f875 	bl	801f63c <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8009552:	2380      	movs	r3, #128	; 0x80
 8009554:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8009556:	f107 0218 	add.w	r2, r7, #24
 800955a:	2301      	movs	r3, #1
 800955c:	2100      	movs	r1, #0
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff fe26 	bl	80091b0 <OD_get_u32>
 8009564:	4603      	mov	r3, r0
 8009566:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8009568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00c      	beq.n	800958a <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8009570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d006      	beq.n	8009584 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fde0 	bl	800913c <OD_getIndex>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009582:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8009584:	f06f 030b 	mvn.w	r3, #11
 8009588:	e0dc      	b.n	8009744 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a6e      	ldr	r2, [pc, #440]	; (800974c <CO_SYNC_init+0x23c>)
 8009594:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4a6d      	ldr	r2, [pc, #436]	; (8009750 <CO_SYNC_init+0x240>)
 800959a:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3338      	adds	r3, #56	; 0x38
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff fddb 	bl	800915e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 80095a8:	2300      	movs	r3, #0
 80095aa:	2204      	movs	r2, #4
 80095ac:	2100      	movs	r1, #0
 80095ae:	6838      	ldr	r0, [r7, #0]
 80095b0:	f7f9 fbe6 	bl	8002d80 <OD_getPtr>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10c      	bne.n	80095dc <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 80095c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80095c8:	6838      	ldr	r0, [r7, #0]
 80095ca:	f7ff fdb7 	bl	800913c <OD_getIndex>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095d4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80095d6:	f06f 030b 	mvn.w	r3, #11
 80095da:	e0b3      	b.n	8009744 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 80095dc:	2300      	movs	r3, #0
 80095de:	2204      	movs	r2, #4
 80095e0:	2100      	movs	r1, #0
 80095e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e4:	f7f9 fbcc 	bl	8002d80 <OD_getPtr>
 80095e8:	4602      	mov	r2, r0
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d010      	beq.n	8009616 <CO_SYNC_init+0x106>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 80095fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8009602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009604:	f7ff fd9a 	bl	800913c <OD_getIndex>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800960e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8009610:	f06f 030b 	mvn.w	r3, #11
 8009614:	e096      	b.n	8009744 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d033      	beq.n	8009688 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8009620:	f107 0217 	add.w	r2, r7, #23
 8009624:	2301      	movs	r3, #1
 8009626:	2100      	movs	r1, #0
 8009628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800962a:	f7ff fdac 	bl	8009186 <OD_get_u8>
 800962e:	4603      	mov	r3, r0
 8009630:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8009632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00c      	beq.n	8009654 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 800963a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963c:	2b00      	cmp	r3, #0
 800963e:	d006      	beq.n	800964e <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8009640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009642:	f7ff fd7b 	bl	800913c <OD_getIndex>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964c:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800964e:	f06f 030b 	mvn.w	r3, #11
 8009652:	e077      	b.n	8009744 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d102      	bne.n	8009660 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 800965a:	2302      	movs	r3, #2
 800965c:	75fb      	strb	r3, [r7, #23]
 800965e:	e004      	b.n	800966a <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	2bf0      	cmp	r3, #240	; 0xf0
 8009664:	d901      	bls.n	800966a <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8009666:	23f0      	movs	r3, #240	; 0xf0
 8009668:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4a36      	ldr	r2, [pc, #216]	; (800974c <CO_SYNC_init+0x23c>)
 8009674:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4a36      	ldr	r2, [pc, #216]	; (8009754 <CO_SYNC_init+0x244>)
 800967a:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	334c      	adds	r3, #76	; 0x4c
 8009680:	4619      	mov	r1, r3
 8009682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009684:	f7ff fd6b 	bl	800915e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8009688:	7dfa      	ldrb	r2, [r7, #23]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800969a:	2b00      	cmp	r3, #0
 800969c:	bf14      	ite	ne
 800969e:	2301      	movne	r3, #1
 80096a0:	2300      	moveq	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	461a      	mov	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c4:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80096ca:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80096d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096dc:	b29a      	uxth	r2, r3
 80096de:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80096e0:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <CO_SYNC_init+0x248>)
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80096f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096f2:	f009 fb29 	bl	8012d48 <CO_CANrxBufferInit>
 80096f6:	4603      	mov	r3, r0
 80096f8:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 80096fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <CO_SYNC_init+0x1f8>
        return ret;
 8009702:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009706:	e01d      	b.n	8009744 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	b29b      	uxth	r3, r3
 800970c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009710:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 8009712:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <CO_SYNC_init+0x20c>
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <CO_SYNC_init+0x20e>
 800971c:	2300      	movs	r3, #0
 800971e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8009720:	2000      	movs	r0, #0
 8009722:	9001      	str	r0, [sp, #4]
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800972a:	f009 fb6b 	bl	8012e04 <CO_CANtxBufferInit>
 800972e:	4602      	mov	r2, r0
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800973c:	f04f 33ff 	mov.w	r3, #4294967295
 8009740:	e000      	b.n	8009744 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	080027e7 	.word	0x080027e7
 8009750:	080092cd 	.word	0x080092cd
 8009754:	08009455 	.word	0x08009455
 8009758:	0800923f 	.word	0x0800923f

0800975c <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800976a:	2300      	movs	r3, #0
 800976c:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 8088 	beq.w	8009886 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	429a      	cmp	r2, r3
 8009788:	d902      	bls.n	8009790 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800979e:	2301      	movs	r3, #1
 80097a0:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <CO_SYNC_process+0x5c>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	e000      	b.n	80097ba <CO_SYNC_process+0x5e>
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d031      	beq.n	8009826 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d828      	bhi.n	8009826 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80097d4:	2301      	movs	r3, #1
 80097d6:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff fcfe 	bl	80091da <CO_SYNCsend>
 80097de:	e022      	b.n	8009826 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	7c1b      	ldrb	r3, [r3, #16]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d11e      	bne.n	8009826 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4413      	add	r3, r2
 80097f0:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d202      	bcs.n	8009800 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295
 80097fe:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	429a      	cmp	r2, r3
 8009808:	d20d      	bcs.n	8009826 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8009818:	2218      	movs	r2, #24
 800981a:	2101      	movs	r1, #1
 800981c:	f7f8 f90a 	bl	8001a34 <CO_error>
                        SYNC->timeoutError = 2;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2202      	movs	r2, #2
 8009824:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d015      	beq.n	800985a <CO_SYNC_process+0xfe>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d010      	beq.n	800985a <CO_SYNC_process+0xfe>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	699a      	ldr	r2, [r3, #24]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d909      	bls.n	800985a <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800984e:	2302      	movs	r3, #2
 8009850:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	615a      	str	r2, [r3, #20]
 8009858:	e002      	b.n	8009860 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	7a1b      	ldrb	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d01a      	beq.n	800989e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	7a1b      	ldrb	r3, [r3, #8]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	f248 2340 	movw	r3, #33344	; 0x8240
 8009876:	2219      	movs	r2, #25
 8009878:	2101      	movs	r1, #1
 800987a:	f7f8 f8db 	bl	8001a34 <CO_error>
            SYNC->receiveError = 0;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	721a      	strb	r2, [r3, #8]
 8009884:	e00b      	b.n	800989e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800989e:	7ffb      	ldrb	r3, [r7, #31]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d10f      	bne.n	80098c4 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	7c1b      	ldrb	r3, [r3, #16]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d108      	bne.n	80098be <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	2218      	movs	r2, #24
 80098b8:	2100      	movs	r1, #0
 80098ba:	f7f8 f8bb 	bl	8001a34 <CO_error>
        }
        SYNC->timeoutError = 1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80098c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3720      	adds	r7, #32
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <CO_getUint16>:
CO_getUint16(const void* buf) {
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 80098dc:	81fb      	strh	r3, [r7, #14]
    return value;
 80098de:	89fb      	ldrh	r3, [r7, #14]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <CO_getUint32>:
CO_getUint32(const void* buf) {
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80098f8:	60fb      	str	r3, [r7, #12]
    return value;
 80098fa:	68fb      	ldr	r3, [r7, #12]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <OD_getIndex>:
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	return (entry != NULL) ? entry->index : 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <OD_getIndex+0x14>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	e000      	b.n	800991e <OD_getIndex+0x16>
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <OD_extension_init>:
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST;  }
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <OD_extension_init+0x14>
 800993a:	2305      	movs	r3, #5
 800993c:	e003      	b.n	8009946 <OD_extension_init+0x1c>
    entry->extension = extension;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8009952:	b580      	push	{r7, lr}
 8009954:	b086      	sub	sp, #24
 8009956:	af02      	add	r7, sp, #8
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	460b      	mov	r3, r1
 8009960:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8009962:	7af9      	ldrb	r1, [r7, #11]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2304      	movs	r3, #4
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7f9 f98d 	bl	8002c8c <OD_get_value>
 8009972:	4603      	mov	r3, r0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	791b      	ldrb	r3, [r3, #4]
 800998e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	3305      	adds	r3, #5
 8009994:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8009996:	7cfb      	ldrb	r3, [r7, #19]
 8009998:	2b06      	cmp	r3, #6
 800999a:	d108      	bne.n	80099ae <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2206      	movs	r2, #6
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f015 fee6 	bl	801f774 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2201      	movs	r2, #1
 80099ac:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00c      	beq.n	80099e6 <OD_write_1012+0x2e>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	7d1b      	ldrb	r3, [r3, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d108      	bne.n	80099e6 <OD_write_1012+0x2e>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <OD_write_1012+0x2e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d102      	bne.n	80099e6 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 80099e6:	2309      	movs	r3, #9
 80099e8:	e051      	b.n	8009a8e <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f7ff ff7b 	bl	80098ec <CO_getUint32>
 80099f6:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a00:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <OD_write_1012+0xe0>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d126      	bne.n	8009a5a <OD_write_1012+0xa2>
 8009a0c:	8afb      	ldrh	r3, [r7, #22]
 8009a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a10:	d923      	bls.n	8009a5a <OD_write_1012+0xa2>
 8009a12:	8afb      	ldrh	r3, [r7, #22]
 8009a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a18:	d903      	bls.n	8009a22 <OD_write_1012+0x6a>
 8009a1a:	8afb      	ldrh	r3, [r7, #22]
 8009a1c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009a20:	d91b      	bls.n	8009a5a <OD_write_1012+0xa2>
 8009a22:	8afb      	ldrh	r3, [r7, #22]
 8009a24:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8009a28:	d903      	bls.n	8009a32 <OD_write_1012+0x7a>
 8009a2a:	8afb      	ldrh	r3, [r7, #22]
 8009a2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a30:	d313      	bcc.n	8009a5a <OD_write_1012+0xa2>
 8009a32:	8afb      	ldrh	r3, [r7, #22]
 8009a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a38:	d903      	bls.n	8009a42 <OD_write_1012+0x8a>
 8009a3a:	8afb      	ldrh	r3, [r7, #22]
 8009a3c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8009a40:	d30b      	bcc.n	8009a5a <OD_write_1012+0xa2>
 8009a42:	8afb      	ldrh	r3, [r7, #22]
 8009a44:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8009a48:	d303      	bcc.n	8009a52 <OD_write_1012+0x9a>
 8009a4a:	8afb      	ldrh	r3, [r7, #22]
 8009a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a50:	d303      	bcc.n	8009a5a <OD_write_1012+0xa2>
 8009a52:	8afb      	ldrh	r3, [r7, #22]
 8009a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a58:	d901      	bls.n	8009a5e <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	e017      	b.n	8009a8e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	0fdb      	lsrs	r3, r3, #31
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bf14      	ite	ne
 8009a74:	2301      	movne	r3, #1
 8009a76:	2300      	moveq	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	68b9      	ldr	r1, [r7, #8]
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7f8 ff05 	bl	8002896 <OD_writeOriginal>
 8009a8c:	4603      	mov	r3, r0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	3ffff800 	.word	0x3ffff800

08009a9c <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08c      	sub	sp, #48	; 0x30
 8009aa0:	af04      	add	r7, sp, #16
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <CO_TIME_init+0x20>
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <CO_TIME_init+0x20>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	e061      	b.n	8009b86 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8009ac2:	222c      	movs	r2, #44	; 0x2c
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f015 fdb8 	bl	801f63c <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8009acc:	f107 0214 	add.w	r2, r7, #20
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	68b8      	ldr	r0, [r7, #8]
 8009ad6:	f7ff ff3c 	bl	8009952 <OD_get_u32>
 8009ada:	4603      	mov	r3, r0
 8009adc:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8009ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00c      	beq.n	8009b00 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d006      	beq.n	8009afa <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f7ff ff0b 	bl	8009908 <OD_getIndex>
 8009af2:	4603      	mov	r3, r0
 8009af4:	461a      	mov	r2, r3
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8009afa:	f06f 030b 	mvn.w	r3, #11
 8009afe:	e042      	b.n	8009b86 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4a21      	ldr	r2, [pc, #132]	; (8009b90 <CO_TIME_init+0xf4>)
 8009b0a:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a21      	ldr	r2, [pc, #132]	; (8009b94 <CO_TIME_init+0xf8>)
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	331c      	adds	r3, #28
 8009b16:	4619      	mov	r1, r3
 8009b18:	68b8      	ldr	r0, [r7, #8]
 8009b1a:	f7ff ff06 	bl	800992a <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b26:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	0fdb      	lsrs	r3, r3, #31
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf14      	ite	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	2300      	moveq	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d015      	beq.n	8009b84 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8009b58:	8bba      	ldrh	r2, [r7, #28]
 8009b5a:	8879      	ldrh	r1, [r7, #2]
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <CO_TIME_init+0xfc>)
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	2300      	movs	r3, #0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f009 f8eb 	bl	8012d48 <CO_CANrxBufferInit>
 8009b72:	4603      	mov	r3, r0
 8009b74:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8009b76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <CO_TIME_init+0xe8>
            return ret;
 8009b7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b82:	e000      	b.n	8009b86 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	080027e7 	.word	0x080027e7
 8009b94:	080099b9 	.word	0x080099b9
 8009b98:	0800997d 	.word	0x0800997d

08009b9c <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d024      	beq.n	8009bfc <CO_TIME_process+0x60>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d020      	beq.n	8009bfc <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01f      	beq.n	8009c02 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff fe91 	bl	80098ec <CO_getUint32>
 8009bca:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fe7c 	bl	80098ce <CO_getUint16>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8bfa      	ldrh	r2, [r7, #30]
 8009be8:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8009bfa:	e002      	b.n	8009c02 <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d132      	bne.n	8009c72 <CO_TIME_process+0xd6>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d02f      	beq.n	8009c72 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	89db      	ldrh	r3, [r3, #14]
 8009c16:	461a      	mov	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	4a16      	ldr	r2, [pc, #88]	; (8009c7c <CO_TIME_process+0xe0>)
 8009c22:	fba2 2303 	umull	r2, r3, r2, r3
 8009c26:	099b      	lsrs	r3, r3, #6
 8009c28:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <CO_TIME_process+0xe0>)
 8009c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c32:	099b      	lsrs	r3, r3, #6
 8009c34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	441a      	add	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <CO_TIME_process+0xe4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d90b      	bls.n	8009c72 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <CO_TIME_process+0xe8>)
 8009c60:	4413      	add	r3, r2
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	899b      	ldrh	r3, [r3, #12]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3728      	adds	r7, #40	; 0x28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	10624dd3 	.word	0x10624dd3
 8009c80:	05265bff 	.word	0x05265bff
 8009c84:	fad9a400 	.word	0xfad9a400

08009c88 <CO_fifo_getSpace>:
CO_fifo_getSpace(CO_fifo_t* fifo) {
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
    int sizeLeft = (int)fifo->readPtr - (int)fifo->writePtr - 1;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	461a      	mov	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
    if (sizeLeft < 0) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da05      	bge.n	8009cb2 <CO_fifo_getSpace+0x2a>
        sizeLeft += (int)fifo->bufSize;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	461a      	mov	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeLeft;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <CO_fifo_getOccupied>:
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	da05      	bge.n	8009ce8 <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeOccupied;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <CO_fifo_putc>:
CO_fifo_putc(CO_fifo_t* fifo, const uint8_t c) {
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
    if (fifo != NULL && fifo->buf != NULL) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d028      	beq.n	8009d5a <CO_fifo_putc+0x64>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d024      	beq.n	8009d5a <CO_fifo_putc+0x64>
        size_t writePtrNext = fifo->writePtr + 1;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
        if (writePtrNext != fifo->readPtr && !(writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d01b      	beq.n	8009d5a <CO_fifo_putc+0x64>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d103      	bne.n	8009d34 <CO_fifo_putc+0x3e>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d012      	beq.n	8009d5a <CO_fifo_putc+0x64>
            fifo->buf[fifo->writePtr] = c;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	701a      	strb	r2, [r3, #0]
            fifo->writePtr = (writePtrNext == fifo->bufSize) ? 0 : writePtrNext;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <CO_fifo_putc+0x5a>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	e000      	b.n	8009d52 <CO_fifo_putc+0x5c>
 8009d50:	2300      	movs	r3, #0
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6093      	str	r3, [r2, #8]
            return true;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e000      	b.n	8009d5c <CO_fifo_putc+0x66>
    return false;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <CO_fifo_getc>:
CO_fifo_getc(CO_fifo_t* fifo, uint8_t* buf) {
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
    if (fifo != NULL && buf != NULL && fifo->readPtr != fifo->writePtr) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d020      	beq.n	8009dba <CO_fifo_getc+0x52>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01d      	beq.n	8009dba <CO_fifo_getc+0x52>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d017      	beq.n	8009dba <CO_fifo_getc+0x52>
        *buf = fifo->buf[fifo->readPtr];
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	701a      	strb	r2, [r3, #0]
        if (++fifo->readPtr == fifo->bufSize) {
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68da      	ldr	r2, [r3, #12]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d102      	bne.n	8009db6 <CO_fifo_getc+0x4e>
            fifo->readPtr = 0;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	60da      	str	r2, [r3, #12]
        return true;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <CO_fifo_getc+0x54>
    return false;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <CO_fifo_init>:
#error CO_CONFIG_CRC16_ENABLE must be enabled.
#endif
#endif

void
CO_fifo_init(CO_fifo_t* fifo, uint8_t* buf, size_t bufSize) {
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]

    if ((fifo == NULL) || (buf == NULL) || (bufSize < 2U)) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d012      	beq.n	8009e00 <CO_fifo_init+0x38>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00f      	beq.n	8009e00 <CO_fifo_init+0x38>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d90c      	bls.n	8009e00 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	605a      	str	r2, [r3, #4]

    return;
 8009dfe:	e000      	b.n	8009e02 <CO_fifo_init+0x3a>
        return;
 8009e00:	bf00      	nop
}
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <CO_fifo_write>:
 *                                                                            *
 *        empty       3 bytes       4 bytes       buffer                      *
 *        buffer      in buff       in buff       full                        *
 ******************************************************************************/
size_t
CO_fifo_write(CO_fifo_t* fifo, const uint8_t* buf, size_t count, uint16_t* crc) {
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t* bufDest;

    if ((fifo == NULL) || (fifo->buf == NULL) || (buf == NULL)) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <CO_fifo_write+0x22>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <CO_fifo_write+0x22>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <CO_fifo_write+0x26>
        return 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e03e      	b.n	8009eb0 <CO_fifo_write+0xa4>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e02f      	b.n	8009ea4 <CO_fifo_write+0x98>
        size_t writePtrNext = fifo->writePtr + 1U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if ((writePtrNext == fifo->readPtr) || ((writePtrNext == fifo->bufSize) && (fifo->readPtr == 0U))) {
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d029      	beq.n	8009eaa <CO_fifo_write+0x9e>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d103      	bne.n	8009e68 <CO_fifo_write+0x5c>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d020      	beq.n	8009eaa <CO_fifo_write+0x9e>
            break;
        }

        *bufDest = *buf;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	701a      	strb	r2, [r3, #0]
            crc16_ccitt_single(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d106      	bne.n	8009e88 <CO_fifo_write+0x7c>
            fifo->writePtr = 0;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	61bb      	str	r3, [r7, #24]
 8009e86:	e007      	b.n	8009e98 <CO_fifo_write+0x8c>
        } else {
            fifo->writePtr++;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	609a      	str	r2, [r3, #8]
            bufDest++;
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	3301      	adds	r3, #1
 8009e96:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0U; i--) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1cc      	bne.n	8009e44 <CO_fifo_write+0x38>
    }

    return count - i;
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	1ad3      	subs	r3, r2, r3
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3724      	adds	r7, #36	; 0x24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <CO_fifo_read>:

size_t
CO_fifo_read(CO_fifo_t* fifo, uint8_t* buf, size_t count, bool_t* eof) {
 8009ebc:	b480      	push	{r7}
 8009ebe:	b089      	sub	sp, #36	; 0x24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
    size_t i;
    const uint8_t* bufSrc;
    bool_t alive_cycle = true;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]

    if (eof != NULL) {
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <CO_fifo_read+0x1e>
        *eof = false;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    }
    if ((fifo == NULL) || (buf == NULL) || (fifo->readPtr == fifo->writePtr)) {
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <CO_fifo_read+0x36>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <CO_fifo_read+0x36>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d101      	bne.n	8009ef6 <CO_fifo_read+0x3a>
        return 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e046      	b.n	8009f84 <CO_fifo_read+0xc8>
    }

    bufSrc = &fifo->buf[fifo->readPtr];
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	61bb      	str	r3, [r7, #24]
    for (i = count; (i > 0U) && alive_cycle;) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	61fb      	str	r3, [r7, #28]
 8009f06:	e034      	b.n	8009f72 <CO_fifo_read+0xb6>
        const uint8_t c = *bufSrc;
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	74fb      	strb	r3, [r7, #19]

        /* is circular buffer empty */
        if (fifo->readPtr == fifo->writePtr) {
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d102      	bne.n	8009f20 <CO_fifo_read+0x64>
            alive_cycle = false;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e028      	b.n	8009f72 <CO_fifo_read+0xb6>
        } else {
            *buf = c;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	7cfa      	ldrb	r2, [r7, #19]
 8009f24:	701a      	strb	r2, [r3, #0]
            buf++;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60bb      	str	r3, [r7, #8]

            /* increment variables */
            if (++fifo->readPtr == fifo->bufSize) {
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d106      	bne.n	8009f50 <CO_fifo_read+0x94>
                fifo->readPtr = 0;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	e002      	b.n	8009f56 <CO_fifo_read+0x9a>
            } else {
                bufSrc++;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	3301      	adds	r3, #1
 8009f54:	61bb      	str	r3, [r7, #24]
            }
            i--;
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	61fb      	str	r3, [r7, #28]

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_COMMANDS) != 0
            /* is delimiter? */
            if ((eof != NULL) && (c == DELIM_COMMAND))
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <CO_fifo_read+0xb6>
 8009f62:	7cfb      	ldrb	r3, [r7, #19]
 8009f64:	2b0a      	cmp	r3, #10
 8009f66:	d104      	bne.n	8009f72 <CO_fifo_read+0xb6>
            {
                *eof = true;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
                alive_cycle = false;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
    for (i = count; (i > 0U) && alive_cycle;) {
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <CO_fifo_read+0xc2>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1c4      	bne.n	8009f08 <CO_fifo_read+0x4c>
            }
#endif
        }
    }

    return count - i;
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	1ad3      	subs	r3, r2, r3
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3724      	adds	r7, #36	; 0x24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <CO_fifo_altBegin>:

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ALT_READ) != 0
size_t
CO_fifo_altBegin(CO_fifo_t* fifo, size_t offset) {
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
    size_t i;

    if (fifo == NULL) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <CO_fifo_altBegin+0x14>
        return 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	e025      	b.n	8009ff0 <CO_fifo_altBegin+0x60>
    }

    fifo->altReadPtr = fifo->readPtr;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0U; i--) {
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e016      	b.n	8009fe0 <CO_fifo_altBegin+0x50>
        /* is circular buffer empty */
        if (fifo->altReadPtr == fifo->writePtr) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691a      	ldr	r2, [r3, #16]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d014      	beq.n	8009fe8 <CO_fifo_altBegin+0x58>
            break;
        }

        /* increment variable */
        if (++fifo->altReadPtr == fifo->bufSize) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	611a      	str	r2, [r3, #16]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d102      	bne.n	8009fda <CO_fifo_altBegin+0x4a>
            fifo->altReadPtr = 0;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0U; i--) {
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <CO_fifo_altBegin+0x22>
 8009fe6:	e000      	b.n	8009fea <CO_fifo_altBegin+0x5a>
            break;
 8009fe8:	bf00      	nop
        }
    }

    return offset - i;
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	1ad3      	subs	r3, r2, r3
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <CO_fifo_altFinish>:

void
CO_fifo_altFinish(CO_fifo_t* fifo, uint16_t* crc) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]

    if (fifo == NULL) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d030      	beq.n	800a06e <CO_fifo_altFinish+0x72>
        return;
    }

    if (crc == NULL) {
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <CO_fifo_altFinish+0x20>
        fifo->readPtr = fifo->altReadPtr;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60da      	str	r2, [r3, #12]
 800a01a:	e029      	b.n	800a070 <CO_fifo_altFinish+0x74>
    } else {
        const uint8_t* bufSrc = &fifo->buf[fifo->readPtr];
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	4413      	add	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800a028:	e01a      	b.n	800a060 <CO_fifo_altFinish+0x64>
#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_CRC16_CCITT) != 0
            crc16_ccitt_single(crc, *bufSrc);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	4619      	mov	r1, r3
 800a030:	6838      	ldr	r0, [r7, #0]
 800a032:	f001 ff11 	bl	800be58 <crc16_ccitt_single>
#endif
            /* increment variable */
            if (++fifo->readPtr == fifo->bufSize) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60da      	str	r2, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d106      	bne.n	800a05a <CO_fifo_altFinish+0x5e>
                fifo->readPtr = 0;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e002      	b.n	800a060 <CO_fifo_altFinish+0x64>
            } else {
                bufSrc++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d1de      	bne.n	800a02a <CO_fifo_altFinish+0x2e>
 800a06c:	e000      	b.n	800a070 <CO_fifo_altFinish+0x74>
        return;
 800a06e:	bf00      	nop
            }
        }
    }
}
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <CO_fifo_altRead>:

size_t
CO_fifo_altRead(CO_fifo_t* fifo, uint8_t* buf, size_t count) {
 800a076:	b480      	push	{r7}
 800a078:	b089      	sub	sp, #36	; 0x24
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	607a      	str	r2, [r7, #4]
    size_t i;
    const uint8_t* bufSrc;

    bufSrc = &fifo->buf[fifo->altReadPtr];
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	4413      	add	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	e026      	b.n	800a0e2 <CO_fifo_altRead+0x6c>
        const uint8_t c = *bufSrc;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	75fb      	strb	r3, [r7, #23]

        /* is there no more data */
        if (fifo->altReadPtr == fifo->writePtr) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d021      	beq.n	800a0ea <CO_fifo_altRead+0x74>
            break;
        }

        *buf = c;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	7dfa      	ldrb	r2, [r7, #23]
 800a0aa:	701a      	strb	r2, [r3, #0]
        buf++;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60bb      	str	r3, [r7, #8]

        /* increment variables */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	611a      	str	r2, [r3, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d106      	bne.n	800a0d6 <CO_fifo_altRead+0x60>
            fifo->altReadPtr = 0;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	611a      	str	r2, [r3, #16]
            bufSrc = &fifo->buf[0];
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	61bb      	str	r3, [r7, #24]
 800a0d4:	e002      	b.n	800a0dc <CO_fifo_altRead+0x66>
        } else {
            bufSrc++;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0U; i--) {
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1d5      	bne.n	800a094 <CO_fifo_altRead+0x1e>
 800a0e8:	e000      	b.n	800a0ec <CO_fifo_altRead+0x76>
            break;
 800a0ea:	bf00      	nop
        }
    }

    return count - i;
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	1ad3      	subs	r3, r2, r3
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3724      	adds	r7, #36	; 0x24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <CO_fifo_CommSearch>:
#endif /* (CO_CONFIG_FIFO) & CO_CONFIG_FIFO_ALT_READ */

#if (CO_CONFIG_FIFO&&CO_CONFIG_FIFO_ASCII_COMMANDS) != 0
bool_t
CO_fifo_CommSearch(CO_fifo_t* fifo, bool_t clear) {
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
    bool_t newCommand = false;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
    size_t count;
    uint8_t* commandEnd;

    if ((fifo == NULL) || (fifo->readPtr == fifo->writePtr)) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <CO_fifo_CommSearch+0x20>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d101      	bne.n	800a122 <CO_fifo_CommSearch+0x24>
        return false;
 800a11e:	2300      	movs	r3, #0
 800a120:	e068      	b.n	800a1f4 <CO_fifo_CommSearch+0xf6>
    }

    /* search delimiter until writePtr or until end of buffer */
    if (fifo->readPtr < fifo->writePtr) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d206      	bcs.n	800a13c <CO_fifo_CommSearch+0x3e>
        count = fifo->writePtr - fifo->readPtr;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	e005      	b.n	800a148 <CO_fifo_CommSearch+0x4a>
    } else {
        count = fifo->bufSize - fifo->readPtr;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	613b      	str	r3, [r7, #16]
    }
    commandEnd = (uint8_t*)memchr((const void*)&fifo->buf[fifo->readPtr], (int32_t)DELIM_COMMAND, count);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4413      	add	r3, r2
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	210a      	movs	r1, #10
 800a156:	4618      	mov	r0, r3
 800a158:	f7f6 f84a 	bl	80001f0 <memchr>
 800a15c:	60f8      	str	r0, [r7, #12]
    if (commandEnd != NULL) {
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <CO_fifo_CommSearch+0x6c>
        newCommand = true;
 800a164:	2301      	movs	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e028      	b.n	800a1bc <CO_fifo_CommSearch+0xbe>
    } else if (fifo->readPtr > fifo->writePtr) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	429a      	cmp	r2, r3
 800a174:	d915      	bls.n	800a1a2 <CO_fifo_CommSearch+0xa4>
        /* not found, search in the beginning of the circular buffer */
        commandEnd = (uint8_t*)memchr((const void*)&fifo->buf[0], (int32_t)DELIM_COMMAND, fifo->writePtr);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	461a      	mov	r2, r3
 800a180:	210a      	movs	r1, #10
 800a182:	f7f6 f835 	bl	80001f0 <memchr>
 800a186:	60f8      	str	r0, [r7, #12]
        if ((commandEnd != NULL) || (fifo->readPtr == (fifo->writePtr + 1U))) {
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <CO_fifo_CommSearch+0x9e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	3301      	adds	r3, #1
 800a198:	429a      	cmp	r2, r3
 800a19a:	d10f      	bne.n	800a1bc <CO_fifo_CommSearch+0xbe>
            /* command delimiter found or buffer full */
            newCommand = true;
 800a19c:	2301      	movs	r3, #1
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e00c      	b.n	800a1bc <CO_fifo_CommSearch+0xbe>
        }
    } else if ((fifo->readPtr == 0U) && (fifo->writePtr == (fifo->bufSize - 1U))) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d108      	bne.n	800a1bc <CO_fifo_CommSearch+0xbe>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689a      	ldr	r2, [r3, #8]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d101      	bne.n	800a1bc <CO_fifo_CommSearch+0xbe>
        /* buffer full */
        newCommand = true;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear buffer if set so */
    if (clear) {
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d017      	beq.n	800a1f2 <CO_fifo_CommSearch+0xf4>
        if (commandEnd != NULL) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d010      	beq.n	800a1ea <CO_fifo_CommSearch+0xec>
            fifo->readPtr = ((size_t)commandEnd - (size_t)fifo->buf) + 1U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6812      	ldr	r2, [r2, #0]
 800a1ce:	1a9b      	subs	r3, r3, r2
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60da      	str	r2, [r3, #12]
            if (fifo->readPtr == fifo->bufSize) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d107      	bne.n	800a1f2 <CO_fifo_CommSearch+0xf4>
                fifo->readPtr = 0;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	60da      	str	r2, [r3, #12]
 800a1e8:	e003      	b.n	800a1f2 <CO_fifo_CommSearch+0xf4>
            }
        } else {
            fifo->readPtr = fifo->writePtr;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60da      	str	r2, [r3, #12]
        }
    }

    return newCommand;
 800a1f2:	697b      	ldr	r3, [r7, #20]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <CO_fifo_trimSpaces>:

bool_t
CO_fifo_trimSpaces(CO_fifo_t* fifo, bool_t* insideComment) {
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
    bool_t delimCommandFound = false;
 800a206:	2300      	movs	r3, #0
 800a208:	617b      	str	r3, [r7, #20]
    bool_t alive_cycle = true;
 800a20a:	2301      	movs	r3, #1
 800a20c:	613b      	str	r3, [r7, #16]

    if ((fifo != NULL) && (insideComment != NULL)) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d044      	beq.n	800a29e <CO_fifo_trimSpaces+0xa2>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d041      	beq.n	800a29e <CO_fifo_trimSpaces+0xa2>
        while ((fifo->readPtr != fifo->writePtr) && alive_cycle) {
 800a21a:	e037      	b.n	800a28c <CO_fifo_trimSpaces+0x90>
            uint8_t c = fifo->buf[fifo->readPtr];
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	4413      	add	r3, r2
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	73fb      	strb	r3, [r7, #15]

            if (c == DELIM_COMMENT) {
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	2b23      	cmp	r3, #35	; 0x23
 800a22e:	d103      	bne.n	800a238 <CO_fifo_trimSpaces+0x3c>
                *insideComment = true;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e00e      	b.n	800a256 <CO_fifo_trimSpaces+0x5a>
            } else if ((isgraph((int)c) != 0) && !(*insideComment)) {
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	3301      	adds	r3, #1
 800a23c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <CO_fifo_trimSpaces+0xb0>)
 800a23e:	4413      	add	r3, r2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	f003 0317 	and.w	r3, r3, #23
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <CO_fifo_trimSpaces+0x5a>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <CO_fifo_trimSpaces+0x5a>
                alive_cycle = false;
 800a252:	2300      	movs	r3, #0
 800a254:	613b      	str	r3, [r7, #16]
            } else { /* MISRA C 2004 14.10 */
            }

            if (alive_cycle) {
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d017      	beq.n	800a28c <CO_fifo_trimSpaces+0x90>
                if (++fifo->readPtr == fifo->bufSize) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d102      	bne.n	800a278 <CO_fifo_trimSpaces+0x7c>
                    fifo->readPtr = 0;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	60da      	str	r2, [r3, #12]
                }
                if (c == DELIM_COMMAND) {
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	2b0a      	cmp	r3, #10
 800a27c:	d106      	bne.n	800a28c <CO_fifo_trimSpaces+0x90>
                    delimCommandFound = true;
 800a27e:	2301      	movs	r3, #1
 800a280:	617b      	str	r3, [r7, #20]
                    *insideComment = false;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]
                    alive_cycle = false;
 800a288:	2300      	movs	r3, #0
 800a28a:	613b      	str	r3, [r7, #16]
        while ((fifo->readPtr != fifo->writePtr) && alive_cycle) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d002      	beq.n	800a29e <CO_fifo_trimSpaces+0xa2>
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1be      	bne.n	800a21c <CO_fifo_trimSpaces+0x20>
                }
            }
        }
    }
    return delimCommandFound;
 800a29e:	697b      	ldr	r3, [r7, #20]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	08024078 	.word	0x08024078

0800a2b0 <CO_fifo_readToken>:

size_t
CO_fifo_readToken(CO_fifo_t* fifo, char* buf, size_t count, uint8_t* closed, bool_t* err) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08c      	sub	sp, #48	; 0x30
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
    bool_t delimCommandFound = false;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t delimCommentFound = false;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t tokenSize = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24

    if ((fifo != NULL) && (buf != NULL) && (count > 1U) && ((err == NULL) || (*err == false))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80eb 	beq.w	800a4a8 <CO_fifo_readToken+0x1f8>
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80e7 	beq.w	800a4a8 <CO_fifo_readToken+0x1f8>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f240 80e3 	bls.w	800a4a8 <CO_fifo_readToken+0x1f8>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <CO_fifo_readToken+0x42>
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f040 80db 	bne.w	800a4a8 <CO_fifo_readToken+0x1f8>
        && (fifo->readPtr != fifo->writePtr)) {
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f000 80d4 	beq.w	800a4a8 <CO_fifo_readToken+0x1f8>
        bool_t finished = false;
 800a300:	2300      	movs	r3, #0
 800a302:	623b      	str	r3, [r7, #32]
        uint8_t step = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	77fb      	strb	r3, [r7, #31]
        size_t ptr = fifo->readPtr;   /* current pointer (integer, 0 based) */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	61bb      	str	r3, [r7, #24]
        uint8_t* c = &fifo->buf[ptr]; /* current character */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	4413      	add	r3, r2
 800a316:	617b      	str	r3, [r7, #20]
        do {
            switch (step) {
 800a318:	7ffb      	ldrb	r3, [r7, #31]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d054      	beq.n	800a3c8 <CO_fifo_readToken+0x118>
 800a31e:	2b02      	cmp	r3, #2
 800a320:	dc70      	bgt.n	800a404 <CO_fifo_readToken+0x154>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <CO_fifo_readToken+0x7c>
 800a326:	2b01      	cmp	r3, #1
 800a328:	d025      	beq.n	800a376 <CO_fifo_readToken+0xc6>
                    } else { /* MISRA C 2004 14.10 */
                    }
                    break;
                default:
                    /* MISRA C 2004 15.3 */
                    break;
 800a32a:	e06b      	b.n	800a404 <CO_fifo_readToken+0x154>
                    if (isgraph((int)*c) != 0) {
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	4a81      	ldr	r2, [pc, #516]	; (800a538 <CO_fifo_readToken+0x288>)
 800a334:	4413      	add	r3, r2
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	f003 0317 	and.w	r3, r3, #23
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d013      	beq.n	800a368 <CO_fifo_readToken+0xb8>
                        if (*c == DELIM_COMMENT) {
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b23      	cmp	r3, #35	; 0x23
 800a346:	d102      	bne.n	800a34e <CO_fifo_readToken+0x9e>
                            delimCommentFound = true;
 800a348:	2301      	movs	r3, #1
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 800a34c:	e05c      	b.n	800a408 <CO_fifo_readToken+0x158>
                            buf[tokenSize] = (char)*c;
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	4413      	add	r3, r2
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	701a      	strb	r2, [r3, #0]
                            tokenSize++;
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	3301      	adds	r3, #1
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
                            step++;
 800a360:	7ffb      	ldrb	r3, [r7, #31]
 800a362:	3301      	adds	r3, #1
 800a364:	77fb      	strb	r3, [r7, #31]
                    break;
 800a366:	e04f      	b.n	800a408 <CO_fifo_readToken+0x158>
                    } else if (*c == DELIM_COMMAND) {
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b0a      	cmp	r3, #10
 800a36e:	d14b      	bne.n	800a408 <CO_fifo_readToken+0x158>
                        delimCommandFound = true;
 800a370:	2301      	movs	r3, #1
 800a372:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800a374:	e048      	b.n	800a408 <CO_fifo_readToken+0x158>
                    if (isgraph((int)*c) != 0) {
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	4a6e      	ldr	r2, [pc, #440]	; (800a538 <CO_fifo_readToken+0x288>)
 800a37e:	4413      	add	r3, r2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	f003 0317 	and.w	r3, r3, #23
 800a386:	2b00      	cmp	r3, #0
 800a388:	d014      	beq.n	800a3b4 <CO_fifo_readToken+0x104>
                        if (*c == DELIM_COMMENT) {
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b23      	cmp	r3, #35	; 0x23
 800a390:	d102      	bne.n	800a398 <CO_fifo_readToken+0xe8>
                            delimCommentFound = true;
 800a392:	2301      	movs	r3, #1
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 800a396:	e039      	b.n	800a40c <CO_fifo_readToken+0x15c>
                        } else if (tokenSize < count) {
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d235      	bcs.n	800a40c <CO_fifo_readToken+0x15c>
                            buf[tokenSize] = (char)*c;
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	4413      	add	r3, r2
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	701a      	strb	r2, [r3, #0]
                            tokenSize++;
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 800a3b2:	e02b      	b.n	800a40c <CO_fifo_readToken+0x15c>
                        if (*c == DELIM_COMMAND) {
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b0a      	cmp	r3, #10
 800a3ba:	d101      	bne.n	800a3c0 <CO_fifo_readToken+0x110>
                            delimCommandFound = true;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
                        step++;
 800a3c0:	7ffb      	ldrb	r3, [r7, #31]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	77fb      	strb	r3, [r7, #31]
                    break;
 800a3c6:	e021      	b.n	800a40c <CO_fifo_readToken+0x15c>
                    if (isgraph((int)*c) != 0) {
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a5a      	ldr	r2, [pc, #360]	; (800a538 <CO_fifo_readToken+0x288>)
 800a3d0:	4413      	add	r3, r2
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 0317 	and.w	r3, r3, #23
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00c      	beq.n	800a3f6 <CO_fifo_readToken+0x146>
                        if (*c == DELIM_COMMENT) {
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b23      	cmp	r3, #35	; 0x23
 800a3e2:	d102      	bne.n	800a3ea <CO_fifo_readToken+0x13a>
                            delimCommentFound = true;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
                    break;
 800a3e8:	e012      	b.n	800a410 <CO_fifo_readToken+0x160>
                            fifo->readPtr = ptr;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	60da      	str	r2, [r3, #12]
                            finished = true;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	623b      	str	r3, [r7, #32]
                    break;
 800a3f4:	e00c      	b.n	800a410 <CO_fifo_readToken+0x160>
                    } else if (*c == DELIM_COMMAND) {
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b0a      	cmp	r3, #10
 800a3fc:	d108      	bne.n	800a410 <CO_fifo_readToken+0x160>
                        delimCommandFound = true;
 800a3fe:	2301      	movs	r3, #1
 800a400:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800a402:	e005      	b.n	800a410 <CO_fifo_readToken+0x160>
                    break;
 800a404:	bf00      	nop
 800a406:	e004      	b.n	800a412 <CO_fifo_readToken+0x162>
                    break;
 800a408:	bf00      	nop
 800a40a:	e002      	b.n	800a412 <CO_fifo_readToken+0x162>
                    break;
 800a40c:	bf00      	nop
 800a40e:	e000      	b.n	800a412 <CO_fifo_readToken+0x162>
                    break;
 800a410:	bf00      	nop
            }
            if (delimCommentFound == true) {
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	2b01      	cmp	r3, #1
 800a416:	d10a      	bne.n	800a42e <CO_fifo_readToken+0x17e>
                /* Comment delimiter found, clear all till end of the line. */
                fifo->readPtr = ptr;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	60da      	str	r2, [r3, #12]
                delimCommandFound = CO_fifo_CommSearch(fifo, true);
 800a41e:	2101      	movs	r1, #1
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fe6c 	bl	800a0fe <CO_fifo_CommSearch>
 800a426:	62f8      	str	r0, [r7, #44]	; 0x2c
                finished = true;
 800a428:	2301      	movs	r3, #1
 800a42a:	623b      	str	r3, [r7, #32]
 800a42c:	e038      	b.n	800a4a0 <CO_fifo_readToken+0x1f0>
            } else if (delimCommandFound) {
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00f      	beq.n	800a454 <CO_fifo_readToken+0x1a4>
                /* command delimiter found, set readPtr behind it. */
                if (++ptr == fifo->bufSize) {
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	3301      	adds	r3, #1
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	429a      	cmp	r2, r3
 800a442:	d101      	bne.n	800a448 <CO_fifo_readToken+0x198>
                    ptr = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	61bb      	str	r3, [r7, #24]
                }
                fifo->readPtr = ptr;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	60da      	str	r2, [r3, #12]
                finished = true;
 800a44e:	2301      	movs	r3, #1
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	e025      	b.n	800a4a0 <CO_fifo_readToken+0x1f0>
            } else if (!finished) {
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d122      	bne.n	800a4a0 <CO_fifo_readToken+0x1f0>
                /* find next character in the circular buffer */
                if (++ptr == fifo->bufSize) {
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	3301      	adds	r3, #1
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	429a      	cmp	r2, r3
 800a468:	d107      	bne.n	800a47a <CO_fifo_readToken+0x1ca>
                    ptr = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61bb      	str	r3, [r7, #24]
                    c = &fifo->buf[ptr];
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	4413      	add	r3, r2
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e002      	b.n	800a480 <CO_fifo_readToken+0x1d0>
                } else {
                    c++;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	3301      	adds	r3, #1
 800a47e:	617b      	str	r3, [r7, #20]
                }
                /* end, if buffer is now empty */
                if (ptr == fifo->writePtr) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	429a      	cmp	r2, r3
 800a488:	d10a      	bne.n	800a4a0 <CO_fifo_readToken+0x1f0>
                    if (step == 2U) {
 800a48a:	7ffb      	ldrb	r3, [r7, #31]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d103      	bne.n	800a498 <CO_fifo_readToken+0x1e8>
                        fifo->readPtr = ptr;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	60da      	str	r2, [r3, #12]
 800a496:	e001      	b.n	800a49c <CO_fifo_readToken+0x1ec>
                    } else {
                        tokenSize = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                    finished = true;
 800a49c:	2301      	movs	r3, #1
 800a49e:	623b      	str	r3, [r7, #32]
                }
            } else { /* MISRA C 2004 14.10 */
            }
        } while (!finished);
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f43f af38 	beq.w	800a318 <CO_fifo_readToken+0x68>
    }

    /* set 'err' return value */
    if ((err != NULL) && (*err == false)) {
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d021      	beq.n	800a4f2 <CO_fifo_readToken+0x242>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d11d      	bne.n	800a4f2 <CO_fifo_readToken+0x242>
        if ((tokenSize == count)
 800a4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d016      	beq.n	800a4ec <CO_fifo_readToken+0x23c>
            || ((closed != NULL)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d016      	beq.n	800a4f2 <CO_fifo_readToken+0x242>
                && (((*closed == 1U) && (!delimCommandFound || (tokenSize == 0U)))
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d105      	bne.n	800a4d8 <CO_fifo_readToken+0x228>
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00c      	beq.n	800a4ec <CO_fifo_readToken+0x23c>
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d009      	beq.n	800a4ec <CO_fifo_readToken+0x23c>
                    || ((*closed == 0U) && (delimCommandFound || (tokenSize == 0U)))))) {
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d108      	bne.n	800a4f2 <CO_fifo_readToken+0x242>
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d102      	bne.n	800a4ec <CO_fifo_readToken+0x23c>
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <CO_fifo_readToken+0x242>
            *err = true;
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	601a      	str	r2, [r3, #0]
        }
    }
    /* set 'closed' return value */
    if (closed != NULL) {
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <CO_fifo_readToken+0x258>
        *closed = delimCommandFound ? 1U : 0U;
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <CO_fifo_readToken+0x252>
 800a4fe:	2201      	movs	r2, #1
 800a500:	e000      	b.n	800a504 <CO_fifo_readToken+0x254>
 800a502:	2200      	movs	r2, #0
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	701a      	strb	r2, [r3, #0]
    }

    /* token was larger then size of the buffer, all was cleaned, return empty */
    if (tokenSize == count) {
 800a508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d101      	bne.n	800a514 <CO_fifo_readToken+0x264>
        tokenSize = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* write string terminator character */
    if ((buf != NULL) && (count > tokenSize)) {
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <CO_fifo_readToken+0x27c>
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	429a      	cmp	r2, r3
 800a520:	d904      	bls.n	800a52c <CO_fifo_readToken+0x27c>
        buf[tokenSize] = '\0';
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	4413      	add	r3, r2
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
    }

    return tokenSize;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3730      	adds	r7, #48	; 0x30
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	08024078 	.word	0x08024078

0800a53c <CO_fifo_readU82a>:
    1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,
    23,  24,  25,  255, 255, 255, 255, 255, 255, 26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
    39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  255, 255, 255, 255, 255};

size_t
CO_fifo_readU82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
    uint8_t n = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <CO_fifo_readU82a+0x1c>
        return 0;
 800a554:	2300      	movs	r3, #0
 800a556:	e01e      	b.n	800a596 <CO_fifo_readU82a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7ff fbb1 	bl	8009cc0 <CO_fifo_getOccupied>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b01      	cmp	r3, #1
 800a562:	d111      	bne.n	800a588 <CO_fifo_readU82a+0x4c>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b05      	cmp	r3, #5
 800a568:	d90e      	bls.n	800a588 <CO_fifo_readU82a+0x4c>
        (void)CO_fifo_read(fifo, &n, sizeof(n), NULL);
 800a56a:	f107 0117 	add.w	r1, r7, #23
 800a56e:	2300      	movs	r3, #0
 800a570:	2201      	movs	r2, #1
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fca2 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu8, n);
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	461a      	mov	r2, r3
 800a57c:	4908      	ldr	r1, [pc, #32]	; (800a5a0 <CO_fifo_readU82a+0x64>)
 800a57e:	68b8      	ldr	r0, [r7, #8]
 800a580:	f014 ff4a 	bl	801f418 <siprintf>
 800a584:	4603      	mov	r3, r0
 800a586:	e006      	b.n	800a596 <CO_fifo_readU82a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 fac0 	bl	800ab14 <CO_fifo_readHex2a>
 800a594:	4603      	mov	r3, r0
    }
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08021370 	.word	0x08021370

0800a5a4 <CO_fifo_readU162a>:

size_t
CO_fifo_readU162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]
    uint16_t n = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <CO_fifo_readU162a+0x1c>
        return 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e01e      	b.n	800a5fe <CO_fifo_readU162a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff fb7d 	bl	8009cc0 <CO_fifo_getOccupied>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d111      	bne.n	800a5f0 <CO_fifo_readU162a+0x4c>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b07      	cmp	r3, #7
 800a5d0:	d90e      	bls.n	800a5f0 <CO_fifo_readU162a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a5d2:	f107 0116 	add.w	r1, r7, #22
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2202      	movs	r2, #2
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fc6e 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu16, CO_SWAP_16(n));
 800a5e0:	8afb      	ldrh	r3, [r7, #22]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4908      	ldr	r1, [pc, #32]	; (800a608 <CO_fifo_readU162a+0x64>)
 800a5e6:	68b8      	ldr	r0, [r7, #8]
 800a5e8:	f014 ff16 	bl	801f418 <siprintf>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	e006      	b.n	800a5fe <CO_fifo_readU162a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fa8c 	bl	800ab14 <CO_fifo_readHex2a>
 800a5fc:	4603      	mov	r3, r0
    }
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	08021378 	.word	0x08021378

0800a60c <CO_fifo_readU322a>:

size_t
CO_fifo_readU322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
    uint32_t n = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <CO_fifo_readU322a+0x1c>
        return 0;
 800a624:	2300      	movs	r3, #0
 800a626:	e01e      	b.n	800a666 <CO_fifo_readU322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 12U)) {
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7ff fb49 	bl	8009cc0 <CO_fifo_getOccupied>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b04      	cmp	r3, #4
 800a632:	d111      	bne.n	800a658 <CO_fifo_readU322a+0x4c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b0b      	cmp	r3, #11
 800a638:	d90e      	bls.n	800a658 <CO_fifo_readU322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a63a:	f107 0114 	add.w	r1, r7, #20
 800a63e:	2300      	movs	r3, #0
 800a640:	2204      	movs	r2, #4
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f7ff fc3a 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu32, CO_SWAP_32(n));
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	461a      	mov	r2, r3
 800a64c:	4908      	ldr	r1, [pc, #32]	; (800a670 <CO_fifo_readU322a+0x64>)
 800a64e:	68b8      	ldr	r0, [r7, #8]
 800a650:	f014 fee2 	bl	801f418 <siprintf>
 800a654:	4603      	mov	r3, r0
 800a656:	e006      	b.n	800a666 <CO_fifo_readU322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 fa58 	bl	800ab14 <CO_fifo_readHex2a>
 800a664:	4603      	mov	r3, r0
    }
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	0802137c 	.word	0x0802137c

0800a674 <CO_fifo_readU642a>:

size_t
CO_fifo_readU642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
    uint64_t n = 0;
 800a682:	f04f 0200 	mov.w	r2, #0
 800a686:	f04f 0300 	mov.w	r3, #0
 800a68a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <CO_fifo_readU642a+0x24>
        return 0;
 800a694:	2300      	movs	r3, #0
 800a696:	e01e      	b.n	800a6d6 <CO_fifo_readU642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff fb11 	bl	8009cc0 <CO_fifo_getOccupied>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d111      	bne.n	800a6c8 <CO_fifo_readU642a+0x54>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b13      	cmp	r3, #19
 800a6a8:	d90e      	bls.n	800a6c8 <CO_fifo_readU642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a6aa:	f107 0110 	add.w	r1, r7, #16
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fc02 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRIu64, CO_SWAP_64(n));
 800a6b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6bc:	4908      	ldr	r1, [pc, #32]	; (800a6e0 <CO_fifo_readU642a+0x6c>)
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f014 feaa 	bl	801f418 <siprintf>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	e006      	b.n	800a6d6 <CO_fifo_readU642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fa20 	bl	800ab14 <CO_fifo_readHex2a>
 800a6d4:	4603      	mov	r3, r0
    }
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	08021380 	.word	0x08021380

0800a6e4 <CO_fifo_readX82a>:

size_t
CO_fifo_readX82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
    uint8_t n = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <CO_fifo_readX82a+0x1c>
        return 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e01e      	b.n	800a73e <CO_fifo_readX82a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff fadd 	bl	8009cc0 <CO_fifo_getOccupied>
 800a706:	4603      	mov	r3, r0
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d111      	bne.n	800a730 <CO_fifo_readX82a+0x4c>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b05      	cmp	r3, #5
 800a710:	d90e      	bls.n	800a730 <CO_fifo_readX82a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a712:	f107 0117 	add.w	r1, r7, #23
 800a716:	2300      	movs	r3, #0
 800a718:	2201      	movs	r2, #1
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff fbce 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%02" PRIX8, (uint32_t)n);
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	461a      	mov	r2, r3
 800a724:	4908      	ldr	r1, [pc, #32]	; (800a748 <CO_fifo_readX82a+0x64>)
 800a726:	68b8      	ldr	r0, [r7, #8]
 800a728:	f014 fe76 	bl	801f418 <siprintf>
 800a72c:	4603      	mov	r3, r0
 800a72e:	e006      	b.n	800a73e <CO_fifo_readX82a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 f9ec 	bl	800ab14 <CO_fifo_readHex2a>
 800a73c:	4603      	mov	r3, r0
    }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	08021388 	.word	0x08021388

0800a74c <CO_fifo_readX162a>:

size_t
CO_fifo_readX162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
    uint16_t n = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <CO_fifo_readX162a+0x1c>
        return 0;
 800a764:	2300      	movs	r3, #0
 800a766:	e01e      	b.n	800a7a6 <CO_fifo_readX162a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff faa9 	bl	8009cc0 <CO_fifo_getOccupied>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b02      	cmp	r3, #2
 800a772:	d111      	bne.n	800a798 <CO_fifo_readX162a+0x4c>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b07      	cmp	r3, #7
 800a778:	d90e      	bls.n	800a798 <CO_fifo_readX162a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a77a:	f107 0116 	add.w	r1, r7, #22
 800a77e:	2300      	movs	r3, #0
 800a780:	2202      	movs	r2, #2
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f7ff fb9a 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%04" PRIX16, (uint32_t)CO_SWAP_16(n));
 800a788:	8afb      	ldrh	r3, [r7, #22]
 800a78a:	461a      	mov	r2, r3
 800a78c:	4908      	ldr	r1, [pc, #32]	; (800a7b0 <CO_fifo_readX162a+0x64>)
 800a78e:	68b8      	ldr	r0, [r7, #8]
 800a790:	f014 fe42 	bl	801f418 <siprintf>
 800a794:	4603      	mov	r3, r0
 800a796:	e006      	b.n	800a7a6 <CO_fifo_readX162a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f9b8 	bl	800ab14 <CO_fifo_readHex2a>
 800a7a4:	4603      	mov	r3, r0
    }
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	08021394 	.word	0x08021394

0800a7b4 <CO_fifo_readX322a>:

size_t
CO_fifo_readX322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
    uint32_t n = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <CO_fifo_readX322a+0x1c>
        return 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e01e      	b.n	800a80e <CO_fifo_readX322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 12U)) {
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fa75 	bl	8009cc0 <CO_fifo_getOccupied>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d111      	bne.n	800a800 <CO_fifo_readX322a+0x4c>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b0b      	cmp	r3, #11
 800a7e0:	d90e      	bls.n	800a800 <CO_fifo_readX322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a7e2:	f107 0114 	add.w	r1, r7, #20
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fb66 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%08" PRIX32, CO_SWAP_32(n));
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4908      	ldr	r1, [pc, #32]	; (800a818 <CO_fifo_readX322a+0x64>)
 800a7f6:	68b8      	ldr	r0, [r7, #8]
 800a7f8:	f014 fe0e 	bl	801f418 <siprintf>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	e006      	b.n	800a80e <CO_fifo_readX322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f984 	bl	800ab14 <CO_fifo_readHex2a>
 800a80c:	4603      	mov	r3, r0
    }
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	0802139c 	.word	0x0802139c

0800a81c <CO_fifo_readX642a>:

size_t
CO_fifo_readX642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
    uint64_t n = 0;
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	f04f 0300 	mov.w	r3, #0
 800a832:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <CO_fifo_readX642a+0x24>
        return 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	e01e      	b.n	800a87e <CO_fifo_readX642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff fa3d 	bl	8009cc0 <CO_fifo_getOccupied>
 800a846:	4603      	mov	r3, r0
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d111      	bne.n	800a870 <CO_fifo_readX642a+0x54>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b13      	cmp	r3, #19
 800a850:	d90e      	bls.n	800a870 <CO_fifo_readX642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a852:	f107 0110 	add.w	r1, r7, #16
 800a856:	2300      	movs	r3, #0
 800a858:	2208      	movs	r2, #8
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7ff fb2e 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "0x%016" PRIX64, CO_SWAP_64(n));
 800a860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a864:	4908      	ldr	r1, [pc, #32]	; (800a888 <CO_fifo_readX642a+0x6c>)
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f014 fdd6 	bl	801f418 <siprintf>
 800a86c:	4603      	mov	r3, r0
 800a86e:	e006      	b.n	800a87e <CO_fifo_readX642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 f94c 	bl	800ab14 <CO_fifo_readHex2a>
 800a87c:	4603      	mov	r3, r0
    }
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	080213a4 	.word	0x080213a4

0800a88c <CO_fifo_readI82a>:

size_t
CO_fifo_readI82a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
    int8_t n = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]

    if (fifo == NULL) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <CO_fifo_readI82a+0x1c>
        return 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e01f      	b.n	800a8e8 <CO_fifo_readI82a+0x5c>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 6U)) {
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7ff fa09 	bl	8009cc0 <CO_fifo_getOccupied>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d112      	bne.n	800a8da <CO_fifo_readI82a+0x4e>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d90f      	bls.n	800a8da <CO_fifo_readI82a+0x4e>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a8ba:	f107 0117 	add.w	r1, r7, #23
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff fafa 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId8, n);
 800a8c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	4908      	ldr	r1, [pc, #32]	; (800a8f0 <CO_fifo_readI82a+0x64>)
 800a8d0:	68b8      	ldr	r0, [r7, #8]
 800a8d2:	f014 fda1 	bl	801f418 <siprintf>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	e006      	b.n	800a8e8 <CO_fifo_readI82a+0x5c>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f917 	bl	800ab14 <CO_fifo_readHex2a>
 800a8e6:	4603      	mov	r3, r0
    }
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	080213b0 	.word	0x080213b0

0800a8f4 <CO_fifo_readI162a>:

size_t
CO_fifo_readI162a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
    int16_t n = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	82fb      	strh	r3, [r7, #22]

    if (fifo == NULL) {
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <CO_fifo_readI162a+0x1c>
        return 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	e01f      	b.n	800a950 <CO_fifo_readI162a+0x5c>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 8U)) {
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7ff f9d5 	bl	8009cc0 <CO_fifo_getOccupied>
 800a916:	4603      	mov	r3, r0
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d112      	bne.n	800a942 <CO_fifo_readI162a+0x4e>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b07      	cmp	r3, #7
 800a920:	d90f      	bls.n	800a942 <CO_fifo_readI162a+0x4e>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a922:	f107 0116 	add.w	r1, r7, #22
 800a926:	2300      	movs	r3, #0
 800a928:	2202      	movs	r2, #2
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fac6 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId16, CO_SWAP_16(n));
 800a930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a934:	461a      	mov	r2, r3
 800a936:	4908      	ldr	r1, [pc, #32]	; (800a958 <CO_fifo_readI162a+0x64>)
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f014 fd6d 	bl	801f418 <siprintf>
 800a93e:	4603      	mov	r3, r0
 800a940:	e006      	b.n	800a950 <CO_fifo_readI162a+0x5c>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 f8e3 	bl	800ab14 <CO_fifo_readHex2a>
 800a94e:	4603      	mov	r3, r0
    }
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	080213b8 	.word	0x080213b8

0800a95c <CO_fifo_readI322a>:

size_t
CO_fifo_readI322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
    int32_t n = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <CO_fifo_readI322a+0x1c>
        return 0;
 800a974:	2300      	movs	r3, #0
 800a976:	e01e      	b.n	800a9b6 <CO_fifo_readI322a+0x5a>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 13U)) {
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff f9a1 	bl	8009cc0 <CO_fifo_getOccupied>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b04      	cmp	r3, #4
 800a982:	d111      	bne.n	800a9a8 <CO_fifo_readI322a+0x4c>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b0c      	cmp	r3, #12
 800a988:	d90e      	bls.n	800a9a8 <CO_fifo_readI322a+0x4c>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a98a:	f107 0114 	add.w	r1, r7, #20
 800a98e:	2300      	movs	r3, #0
 800a990:	2204      	movs	r2, #4
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff fa92 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId32, CO_SWAP_32(n));
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	461a      	mov	r2, r3
 800a99c:	4908      	ldr	r1, [pc, #32]	; (800a9c0 <CO_fifo_readI322a+0x64>)
 800a99e:	68b8      	ldr	r0, [r7, #8]
 800a9a0:	f014 fd3a 	bl	801f418 <siprintf>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	e006      	b.n	800a9b6 <CO_fifo_readI322a+0x5a>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 f8b0 	bl	800ab14 <CO_fifo_readHex2a>
 800a9b4:	4603      	mov	r3, r0
    }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	080213bc 	.word	0x080213bc

0800a9c4 <CO_fifo_readI642a>:

size_t
CO_fifo_readI642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]
    int64_t n = 0;
 800a9d2:	f04f 0200 	mov.w	r2, #0
 800a9d6:	f04f 0300 	mov.w	r3, #0
 800a9da:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <CO_fifo_readI642a+0x24>
        return 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e01e      	b.n	800aa26 <CO_fifo_readI642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 23U)) {
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff f969 	bl	8009cc0 <CO_fifo_getOccupied>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d111      	bne.n	800aa18 <CO_fifo_readI642a+0x54>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b16      	cmp	r3, #22
 800a9f8:	d90e      	bls.n	800aa18 <CO_fifo_readI642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800a9fa:	f107 0110 	add.w	r1, r7, #16
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2208      	movs	r2, #8
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff fa5a 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%" PRId64, CO_SWAP_64(n));
 800aa08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa0c:	4908      	ldr	r1, [pc, #32]	; (800aa30 <CO_fifo_readI642a+0x6c>)
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	f014 fd02 	bl	801f418 <siprintf>
 800aa14:	4603      	mov	r3, r0
 800aa16:	e006      	b.n	800aa26 <CO_fifo_readI642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f878 	bl	800ab14 <CO_fifo_readHex2a>
 800aa24:	4603      	mov	r3, r0
    }
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	080213c0 	.word	0x080213c0

0800aa34 <CO_fifo_readR322a>:

size_t
CO_fifo_readR322a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]
    float32_t n = (float32_t)0;
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]

    if (fifo == NULL) {
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <CO_fifo_readR322a+0x1e>
        return 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e022      	b.n	800aa98 <CO_fifo_readR322a+0x64>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 20U)) {
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff f934 	bl	8009cc0 <CO_fifo_getOccupied>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d115      	bne.n	800aa8a <CO_fifo_readR322a+0x56>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b13      	cmp	r3, #19
 800aa62:	d912      	bls.n	800aa8a <CO_fifo_readR322a+0x56>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800aa64:	f107 0114 	add.w	r1, r7, #20
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7ff fa25 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%g", (float32_t)CO_SWAP_32(n));
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7f5 fd77 	bl	8000568 <__aeabi_f2d>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4908      	ldr	r1, [pc, #32]	; (800aaa0 <CO_fifo_readR322a+0x6c>)
 800aa80:	68b8      	ldr	r0, [r7, #8]
 800aa82:	f014 fcc9 	bl	801f418 <siprintf>
 800aa86:	4603      	mov	r3, r0
 800aa88:	e006      	b.n	800aa98 <CO_fifo_readR322a+0x64>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 f83f 	bl	800ab14 <CO_fifo_readHex2a>
 800aa96:	4603      	mov	r3, r0
    }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	080213c8 	.word	0x080213c8

0800aaa4 <CO_fifo_readR642a>:

size_t
CO_fifo_readR642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	603b      	str	r3, [r7, #0]
    float64_t n = (float64_t)0;
 800aab2:	f04f 0200 	mov.w	r2, #0
 800aab6:	f04f 0300 	mov.w	r3, #0
 800aaba:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (fifo == NULL) {
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <CO_fifo_readR642a+0x24>
        return 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e01e      	b.n	800ab06 <CO_fifo_readR642a+0x62>
    }

    if ((CO_fifo_getOccupied(fifo) == sizeof(n)) && (count >= 30U)) {
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff f8f9 	bl	8009cc0 <CO_fifo_getOccupied>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d111      	bne.n	800aaf8 <CO_fifo_readR642a+0x54>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b1d      	cmp	r3, #29
 800aad8:	d90e      	bls.n	800aaf8 <CO_fifo_readR642a+0x54>
        (void)CO_fifo_read(fifo, (uint8_t*)&n, sizeof(n), NULL);
 800aada:	f107 0110 	add.w	r1, r7, #16
 800aade:	2300      	movs	r3, #0
 800aae0:	2208      	movs	r2, #8
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff f9ea 	bl	8009ebc <CO_fifo_read>
        return (size_t)sprintf(buf, "%g", (float64_t)CO_SWAP_64(n));
 800aae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aaec:	4908      	ldr	r1, [pc, #32]	; (800ab10 <CO_fifo_readR642a+0x6c>)
 800aaee:	68b8      	ldr	r0, [r7, #8]
 800aaf0:	f014 fc92 	bl	801f418 <siprintf>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	e006      	b.n	800ab06 <CO_fifo_readR642a+0x62>
    } else {
        return CO_fifo_readHex2a(fifo, buf, count, end);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	68b9      	ldr	r1, [r7, #8]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f808 	bl	800ab14 <CO_fifo_readHex2a>
 800ab04:	4603      	mov	r3, r0
    }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	080213c8 	.word	0x080213c8

0800ab14 <CO_fifo_readHex2a>:

size_t
CO_fifo_readHex2a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
    (void)end; /* unused */

    size_t len = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]

    if ((fifo != NULL) && (count > 3U)) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d038      	beq.n	800ab9e <CO_fifo_readHex2a+0x8a>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d935      	bls.n	800ab9e <CO_fifo_readHex2a+0x8a>
        /* Very first write is without leading space */
        if (!fifo->started) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d12a      	bne.n	800ab90 <CO_fifo_readHex2a+0x7c>
            uint8_t c;
            if (CO_fifo_getc(fifo, &c)) {
 800ab3a:	f107 0313 	add.w	r3, r7, #19
 800ab3e:	4619      	mov	r1, r3
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7ff f911 	bl	8009d68 <CO_fifo_getc>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d021      	beq.n	800ab90 <CO_fifo_readHex2a+0x7c>
                len = (size_t)sprintf(&buf[0], "%02" PRIX8, (uint32_t)c);
 800ab4c:	7cfb      	ldrb	r3, [r7, #19]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4915      	ldr	r1, [pc, #84]	; (800aba8 <CO_fifo_readHex2a+0x94>)
 800ab52:	68b8      	ldr	r0, [r7, #8]
 800ab54:	f014 fc60 	bl	801f418 <siprintf>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	617b      	str	r3, [r7, #20]
                fifo->started = true;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	615a      	str	r2, [r3, #20]
            }
        }

        while ((len + 3U) < count) {
 800ab62:	e015      	b.n	800ab90 <CO_fifo_readHex2a+0x7c>
            uint8_t c;
            if (!CO_fifo_getc(fifo, &c)) {
 800ab64:	f107 0312 	add.w	r3, r7, #18
 800ab68:	4619      	mov	r1, r3
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff f8fc 	bl	8009d68 <CO_fifo_getc>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d012      	beq.n	800ab9c <CO_fifo_readHex2a+0x88>
                break;
            }
            len += (size_t)sprintf(&buf[len], " %02" PRIX8, (uint32_t)c);
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	7cba      	ldrb	r2, [r7, #18]
 800ab7e:	490b      	ldr	r1, [pc, #44]	; (800abac <CO_fifo_readHex2a+0x98>)
 800ab80:	4618      	mov	r0, r3
 800ab82:	f014 fc49 	bl	801f418 <siprintf>
 800ab86:	4603      	mov	r3, r0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]
        while ((len + 3U) < count) {
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	3303      	adds	r3, #3
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d8e4      	bhi.n	800ab64 <CO_fifo_readHex2a+0x50>
 800ab9a:	e000      	b.n	800ab9e <CO_fifo_readHex2a+0x8a>
                break;
 800ab9c:	bf00      	nop
        }
    }

    return len;
 800ab9e:	697b      	ldr	r3, [r7, #20]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	080213cc 	.word	0x080213cc
 800abac:	080213d4 	.word	0x080213d4

0800abb0 <CO_fifo_readVs2a>:

size_t
CO_fifo_readVs2a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
    size_t len = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]

    if ((fifo != NULL) && (count > 3U)) {
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d047      	beq.n	800ac58 <CO_fifo_readVs2a+0xa8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d944      	bls.n	800ac58 <CO_fifo_readVs2a+0xa8>
        /* Start with '"' */
        if (!fifo->started) {
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d139      	bne.n	800ac4a <CO_fifo_readVs2a+0x9a>
            buf[len] = '"';
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	4413      	add	r3, r2
 800abdc:	2222      	movs	r2, #34	; 0x22
 800abde:	701a      	strb	r2, [r3, #0]
            len++;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	3301      	adds	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
            fifo->started = true;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	615a      	str	r2, [r3, #20]
        }

        while ((len + 2U) < count) {
 800abec:	e02d      	b.n	800ac4a <CO_fifo_readVs2a+0x9a>
            uint8_t c;
            if (!CO_fifo_getc(fifo, &c)) {
 800abee:	f107 0313 	add.w	r3, r7, #19
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff f8b7 	bl	8009d68 <CO_fifo_getc>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10b      	bne.n	800ac18 <CO_fifo_readVs2a+0x68>
                if (end) {
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d027      	beq.n	800ac56 <CO_fifo_readVs2a+0xa6>
                    buf[len] = '"';
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	2222      	movs	r2, #34	; 0x22
 800ac0e:	701a      	strb	r2, [r3, #0]
                    len++;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	3301      	adds	r3, #1
 800ac14:	617b      	str	r3, [r7, #20]
 800ac16:	e01f      	b.n	800ac58 <CO_fifo_readVs2a+0xa8>
                }
                break;
            } else if ((c != 0U) && (c != (uint8_t)'\r')) {
 800ac18:	7cfb      	ldrb	r3, [r7, #19]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <CO_fifo_readVs2a+0x9a>
 800ac1e:	7cfb      	ldrb	r3, [r7, #19]
 800ac20:	2b0d      	cmp	r3, #13
 800ac22:	d012      	beq.n	800ac4a <CO_fifo_readVs2a+0x9a>
                /* skip null and CR inside string */
                buf[len] = (char)c;
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	4413      	add	r3, r2
 800ac2a:	7cfa      	ldrb	r2, [r7, #19]
 800ac2c:	701a      	strb	r2, [r3, #0]
                len++;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	3301      	adds	r3, #1
 800ac32:	617b      	str	r3, [r7, #20]
                if (c == DELIM_DQUOTE) {
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	2b22      	cmp	r3, #34	; 0x22
 800ac38:	d107      	bne.n	800ac4a <CO_fifo_readVs2a+0x9a>
                    buf[len] = '"';
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	2222      	movs	r2, #34	; 0x22
 800ac42:	701a      	strb	r2, [r3, #0]
                    len++;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	3301      	adds	r3, #1
 800ac48:	617b      	str	r3, [r7, #20]
        while ((len + 2U) < count) {
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d8cc      	bhi.n	800abee <CO_fifo_readVs2a+0x3e>
 800ac54:	e000      	b.n	800ac58 <CO_fifo_readVs2a+0xa8>
                break;
 800ac56:	bf00      	nop
            } else { /* MISRA C 2004 14.10 */
            }
        }
    }

    return len;
 800ac58:	697b      	ldr	r3, [r7, #20]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <CO_fifo_readB642a>:

size_t
CO_fifo_readB642a(CO_fifo_t* fifo, char* buf, size_t count, bool_t end) {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
    /* mime-base64 encoding, see description above base64EncTable */

    size_t len = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61fb      	str	r3, [r7, #28]

    if ((fifo != NULL) && (count >= 4U)) {
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 80ba 	beq.w	800adf2 <CO_fifo_readB642a+0x18e>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	f240 80b6 	bls.w	800adf2 <CO_fifo_readB642a+0x18e>
        uint8_t step;
        uint16_t word;

        if (!fifo->started) {
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d107      	bne.n	800ac9e <CO_fifo_readB642a+0x3a>
            fifo->started = true;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	615a      	str	r2, [r3, #20]
            step = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	76fb      	strb	r3, [r7, #27]
            word = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	833b      	strh	r3, [r7, #24]
 800ac9c:	e09b      	b.n	800add6 <CO_fifo_readB642a+0x172>
        } else {
            /* get memorized variables from previous function calls */
            step = (uint8_t)(fifo->aux >> 16);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	0c1b      	lsrs	r3, r3, #16
 800aca4:	76fb      	strb	r3, [r7, #27]
            word = (uint16_t)fifo->aux;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	833b      	strh	r3, [r7, #24]
        }

        while ((len + 3U) <= count) {
 800acac:	e093      	b.n	800add6 <CO_fifo_readB642a+0x172>
            uint8_t c;

            if (!CO_fifo_getc(fifo, &c)) {
 800acae:	f107 0317 	add.w	r3, r7, #23
 800acb2:	4619      	mov	r1, r3
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7ff f857 	bl	8009d68 <CO_fifo_getc>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d13f      	bne.n	800ad40 <CO_fifo_readB642a+0xdc>
                /* buffer is empty, is also SDO communication finished? */
                if (end) {
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 808e 	beq.w	800ade4 <CO_fifo_readB642a+0x180>
                    /* add padding if necessary */
                    switch (step) {
 800acc8:	7efb      	ldrb	r3, [r7, #27]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d002      	beq.n	800acd4 <CO_fifo_readB642a+0x70>
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d01f      	beq.n	800ad12 <CO_fifo_readB642a+0xae>
                            buf[len] = '=';
                            len++;
                            break;
                        default:
                            /* MISRA C 2004 15.3 */
                            break;
 800acd2:	e088      	b.n	800ade6 <CO_fifo_readB642a+0x182>
                            buf[len] = base64EncTable[(word >> 4) & 0x3FU];
 800acd4:	8b3b      	ldrh	r3, [r7, #24]
 800acd6:	091b      	lsrs	r3, r3, #4
 800acd8:	b29b      	uxth	r3, r3
 800acda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	440b      	add	r3, r1
 800ace4:	4945      	ldr	r1, [pc, #276]	; (800adfc <CO_fifo_readB642a+0x198>)
 800ace6:	5c8a      	ldrb	r2, [r1, r2]
 800ace8:	701a      	strb	r2, [r3, #0]
                            len++;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	3301      	adds	r3, #1
 800acee:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	223d      	movs	r2, #61	; 0x3d
 800acf8:	701a      	strb	r2, [r3, #0]
                            len++;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	223d      	movs	r2, #61	; 0x3d
 800ad08:	701a      	strb	r2, [r3, #0]
                            len++;
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	61fb      	str	r3, [r7, #28]
                            break;
 800ad10:	e069      	b.n	800ade6 <CO_fifo_readB642a+0x182>
                            buf[len] = base64EncTable[(word >> 6) & 0x3FU];
 800ad12:	8b3b      	ldrh	r3, [r7, #24]
 800ad14:	099b      	lsrs	r3, r3, #6
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad1c:	68b9      	ldr	r1, [r7, #8]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	440b      	add	r3, r1
 800ad22:	4936      	ldr	r1, [pc, #216]	; (800adfc <CO_fifo_readB642a+0x198>)
 800ad24:	5c8a      	ldrb	r2, [r1, r2]
 800ad26:	701a      	strb	r2, [r3, #0]
                            len++;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	61fb      	str	r3, [r7, #28]
                            buf[len] = '=';
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	4413      	add	r3, r2
 800ad34:	223d      	movs	r2, #61	; 0x3d
 800ad36:	701a      	strb	r2, [r3, #0]
                            len++;
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	61fb      	str	r3, [r7, #28]
                            break;
 800ad3e:	e052      	b.n	800ade6 <CO_fifo_readB642a+0x182>
                    }
                }
                break;
            }

            word |= c;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	8b3b      	ldrh	r3, [r7, #24]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	833b      	strh	r3, [r7, #24]

            switch (step++) {
 800ad4a:	7efb      	ldrb	r3, [r7, #27]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	76fa      	strb	r2, [r7, #27]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <CO_fifo_readB642a+0xf6>
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d00f      	beq.n	800ad78 <CO_fifo_readB642a+0x114>
 800ad58:	e01d      	b.n	800ad96 <CO_fifo_readB642a+0x132>
                case 0:
                    buf[len] = base64EncTable[(word >> 2) & 0x3FU];
 800ad5a:	8b3b      	ldrh	r3, [r7, #24]
 800ad5c:	089b      	lsrs	r3, r3, #2
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	440b      	add	r3, r1
 800ad6a:	4924      	ldr	r1, [pc, #144]	; (800adfc <CO_fifo_readB642a+0x198>)
 800ad6c:	5c8a      	ldrb	r2, [r1, r2]
 800ad6e:	701a      	strb	r2, [r3, #0]
                    len++;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	3301      	adds	r3, #1
 800ad74:	61fb      	str	r3, [r7, #28]
                    break;
 800ad76:	e02b      	b.n	800add0 <CO_fifo_readB642a+0x16c>
                case 1:
                    buf[len] = base64EncTable[(word >> 4) & 0x3FU];
 800ad78:	8b3b      	ldrh	r3, [r7, #24]
 800ad7a:	091b      	lsrs	r3, r3, #4
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	440b      	add	r3, r1
 800ad88:	491c      	ldr	r1, [pc, #112]	; (800adfc <CO_fifo_readB642a+0x198>)
 800ad8a:	5c8a      	ldrb	r2, [r1, r2]
 800ad8c:	701a      	strb	r2, [r3, #0]
                    len++;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	3301      	adds	r3, #1
 800ad92:	61fb      	str	r3, [r7, #28]
                    break;
 800ad94:	e01c      	b.n	800add0 <CO_fifo_readB642a+0x16c>
                default:
                    buf[len] = base64EncTable[(word >> 6) & 0x3FU];
 800ad96:	8b3b      	ldrh	r3, [r7, #24]
 800ad98:	099b      	lsrs	r3, r3, #6
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	440b      	add	r3, r1
 800ada6:	4915      	ldr	r1, [pc, #84]	; (800adfc <CO_fifo_readB642a+0x198>)
 800ada8:	5c8a      	ldrb	r2, [r1, r2]
 800adaa:	701a      	strb	r2, [r3, #0]
                    len++;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	3301      	adds	r3, #1
 800adb0:	61fb      	str	r3, [r7, #28]
                    buf[len] = base64EncTable[word & 0x3FU];
 800adb2:	8b3b      	ldrh	r3, [r7, #24]
 800adb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	440b      	add	r3, r1
 800adbe:	490f      	ldr	r1, [pc, #60]	; (800adfc <CO_fifo_readB642a+0x198>)
 800adc0:	5c8a      	ldrb	r2, [r1, r2]
 800adc2:	701a      	strb	r2, [r3, #0]
                    len++;
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	3301      	adds	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
                    step = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	76fb      	strb	r3, [r7, #27]
                    break;
 800adce:	bf00      	nop
            }
            word <<= 8;
 800add0:	8b3b      	ldrh	r3, [r7, #24]
 800add2:	021b      	lsls	r3, r3, #8
 800add4:	833b      	strh	r3, [r7, #24]
        while ((len + 3U) <= count) {
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	3303      	adds	r3, #3
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	f4bf af66 	bcs.w	800acae <CO_fifo_readB642a+0x4a>
 800ade2:	e000      	b.n	800ade6 <CO_fifo_readB642a+0x182>
                break;
 800ade4:	bf00      	nop
        }

        /* memorize variables for next iteration */
        fifo->aux = ((uint32_t)step << 16) | word;
 800ade6:	7efb      	ldrb	r3, [r7, #27]
 800ade8:	041a      	lsls	r2, r3, #16
 800adea:	8b3b      	ldrh	r3, [r7, #24]
 800adec:	431a      	orrs	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	619a      	str	r2, [r3, #24]
    }

    return len;
 800adf2:	69fb      	ldr	r3, [r7, #28]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3720      	adds	r7, #32
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	080221e4 	.word	0x080221e4

0800ae00 <CO_fifo_cpyTok2U8>:

size_t
CO_fifo_cpyTok2U8(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b092      	sub	sp, #72	; 0x48
 800ae04:	af02      	add	r7, sp, #8
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800ae0c:	23ff      	movs	r3, #255	; 0xff
 800ae0e:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800ae18:	f107 021f 	add.w	r2, r7, #31
 800ae1c:	f107 0120 	add.w	r1, r7, #32
 800ae20:	f107 0318 	add.w	r3, r7, #24
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	220f      	movs	r2, #15
 800ae2a:	68b8      	ldr	r0, [r7, #8]
 800ae2c:	f7ff fa40 	bl	800a2b0 <CO_fifo_readToken>
 800ae30:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800ae32:	7ffb      	ldrb	r3, [r7, #31]
 800ae34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <CO_fifo_cpyTok2U8+0x44>
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <CO_fifo_cpyTok2U8+0x52>
        st |= CO_fifo_st_errTok;
 800ae44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae48:	f043 0310 	orr.w	r3, r3, #16
 800ae4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ae50:	e033      	b.n	800aeba <CO_fifo_cpyTok2U8+0xba>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800ae52:	f107 0114 	add.w	r1, r7, #20
 800ae56:	f107 0320 	add.w	r3, r7, #32
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f013 ff7f 	bl	801ed60 <strtoul>
 800ae62:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (u32 > (uint32_t)UINT8_MAX)) {
 800ae64:	f107 0320 	add.w	r3, r7, #32
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f5 fa11 	bl	8000290 <strlen>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	f107 0320 	add.w	r3, r7, #32
 800ae76:	441a      	add	r2, r3
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d102      	bne.n	800ae84 <CO_fifo_cpyTok2U8+0x84>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	2bff      	cmp	r3, #255	; 0xff
 800ae82:	d906      	bls.n	800ae92 <CO_fifo_cpyTok2U8+0x92>
            st |= CO_fifo_st_errVal;
 800ae84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae88:	f043 0320 	orr.w	r3, r3, #32
 800ae8c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ae90:	e013      	b.n	800aeba <CO_fifo_cpyTok2U8+0xba>
        } else {
            uint8_t num = (uint8_t)u32;
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	74fb      	strb	r3, [r7, #19]
            nWr = CO_fifo_write(dest, &num, sizeof(num), NULL);
 800ae98:	f107 0113 	add.w	r1, r7, #19
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2201      	movs	r2, #1
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7fe ffb3 	bl	8009e0c <CO_fifo_write>
 800aea6:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800aea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d005      	beq.n	800aeba <CO_fifo_cpyTok2U8+0xba>
                st |= CO_fifo_st_errBuf;
 800aeae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aeb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d003      	beq.n	800aec8 <CO_fifo_cpyTok2U8+0xc8>
        *status = st;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800aec6:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3740      	adds	r7, #64	; 0x40
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <CO_fifo_cpyTok2U16>:

size_t
CO_fifo_cpyTok2U16(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b092      	sub	sp, #72	; 0x48
 800aed6:	af02      	add	r7, sp, #8
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800aede:	23ff      	movs	r3, #255	; 0xff
 800aee0:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800aeea:	f107 021f 	add.w	r2, r7, #31
 800aeee:	f107 0120 	add.w	r1, r7, #32
 800aef2:	f107 0318 	add.w	r3, r7, #24
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	220f      	movs	r2, #15
 800aefc:	68b8      	ldr	r0, [r7, #8]
 800aefe:	f7ff f9d7 	bl	800a2b0 <CO_fifo_readToken>
 800af02:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800af04:	7ffb      	ldrb	r3, [r7, #31]
 800af06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <CO_fifo_cpyTok2U16+0x44>
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <CO_fifo_cpyTok2U16+0x52>
        st |= CO_fifo_st_errTok;
 800af16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af1a:	f043 0310 	orr.w	r3, r3, #16
 800af1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800af22:	e034      	b.n	800af8e <CO_fifo_cpyTok2U16+0xbc>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800af24:	f107 0114 	add.w	r1, r7, #20
 800af28:	f107 0320 	add.w	r3, r7, #32
 800af2c:	2200      	movs	r2, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f013 ff16 	bl	801ed60 <strtoul>
 800af34:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (u32 > (uint32_t)UINT16_MAX)) {
 800af36:	f107 0320 	add.w	r3, r7, #32
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f5 f9a8 	bl	8000290 <strlen>
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	f107 0320 	add.w	r3, r7, #32
 800af48:	441a      	add	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d103      	bne.n	800af58 <CO_fifo_cpyTok2U16+0x86>
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af56:	d306      	bcc.n	800af66 <CO_fifo_cpyTok2U16+0x94>
            st |= CO_fifo_st_errVal;
 800af58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af5c:	f043 0320 	orr.w	r3, r3, #32
 800af60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800af64:	e013      	b.n	800af8e <CO_fifo_cpyTok2U16+0xbc>
        } else {
            uint16_t num = CO_SWAP_16((uint16_t)u32);
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	b29b      	uxth	r3, r3
 800af6a:	827b      	strh	r3, [r7, #18]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800af6c:	f107 0112 	add.w	r1, r7, #18
 800af70:	2300      	movs	r3, #0
 800af72:	2202      	movs	r2, #2
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7fe ff49 	bl	8009e0c <CO_fifo_write>
 800af7a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800af7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d005      	beq.n	800af8e <CO_fifo_cpyTok2U16+0xbc>
                st |= CO_fifo_st_errBuf;
 800af82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <CO_fifo_cpyTok2U16+0xca>
        *status = st;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800af9a:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3740      	adds	r7, #64	; 0x40
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <CO_fifo_cpyTok2U32>:

size_t
CO_fifo_cpyTok2U32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b092      	sub	sp, #72	; 0x48
 800afaa:	af02      	add	r7, sp, #8
 800afac:	60f8      	str	r0, [r7, #12]
 800afae:	60b9      	str	r1, [r7, #8]
 800afb0:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800afb2:	23ff      	movs	r3, #255	; 0xff
 800afb4:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800afbe:	f107 021f 	add.w	r2, r7, #31
 800afc2:	f107 0120 	add.w	r1, r7, #32
 800afc6:	f107 0318 	add.w	r3, r7, #24
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	220f      	movs	r2, #15
 800afd0:	68b8      	ldr	r0, [r7, #8]
 800afd2:	f7ff f96d 	bl	800a2b0 <CO_fifo_readToken>
 800afd6:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <CO_fifo_cpyTok2U32+0x44>
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d006      	beq.n	800aff8 <CO_fifo_cpyTok2U32+0x52>
        st |= CO_fifo_st_errTok;
 800afea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800afee:	f043 0310 	orr.w	r3, r3, #16
 800aff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800aff6:	e02f      	b.n	800b058 <CO_fifo_cpyTok2U32+0xb2>
    } else {
        char* sRet;
        uint32_t u32 = strtoul(buf, &sRet, 0);
 800aff8:	f107 0114 	add.w	r1, r7, #20
 800affc:	f107 0320 	add.w	r3, r7, #32
 800b000:	2200      	movs	r2, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f013 feac 	bl	801ed60 <strtoul>
 800b008:	6338      	str	r0, [r7, #48]	; 0x30
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b00a:	f107 0320 	add.w	r3, r7, #32
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f5 f93e 	bl	8000290 <strlen>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	f107 0320 	add.w	r3, r7, #32
 800b01c:	441a      	add	r2, r3
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	429a      	cmp	r2, r3
 800b022:	d006      	beq.n	800b032 <CO_fifo_cpyTok2U32+0x8c>
            st |= CO_fifo_st_errVal;
 800b024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b028:	f043 0320 	orr.w	r3, r3, #32
 800b02c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b030:	e012      	b.n	800b058 <CO_fifo_cpyTok2U32+0xb2>
        } else {
            uint32_t num = CO_SWAP_32(u32);
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b036:	f107 0110 	add.w	r1, r7, #16
 800b03a:	2300      	movs	r3, #0
 800b03c:	2204      	movs	r2, #4
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7fe fee4 	bl	8009e0c <CO_fifo_write>
 800b044:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800b046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d005      	beq.n	800b058 <CO_fifo_cpyTok2U32+0xb2>
                st |= CO_fifo_st_errBuf;
 800b04c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b054:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <CO_fifo_cpyTok2U32+0xc0>
        *status = st;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b064:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3740      	adds	r7, #64	; 0x40
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <CO_fifo_cpyTok2U64>:

size_t
CO_fifo_cpyTok2U64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b098      	sub	sp, #96	; 0x60
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
    char buf[25];
    uint8_t closed = 0xFFU;
 800b07c:	23ff      	movs	r3, #255	; 0xff
 800b07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t err = false;
 800b082:	2300      	movs	r3, #0
 800b084:	61fb      	str	r3, [r7, #28]
    size_t nWr = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	657b      	str	r3, [r7, #84]	; 0x54
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b08a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800b08e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b092:	f107 031c 	add.w	r3, r7, #28
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	4613      	mov	r3, r2
 800b09a:	2219      	movs	r2, #25
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f7ff f907 	bl	800a2b0 <CO_fifo_readToken>
 800b0a2:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint8_t st = closed;
 800b0a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0a8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if ((nRd == 0U) || err) {
 800b0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <CO_fifo_cpyTok2U64+0x48>
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d006      	beq.n	800b0c6 <CO_fifo_cpyTok2U64+0x56>
        st |= CO_fifo_st_errTok;
 800b0b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b0bc:	f043 0310 	orr.w	r3, r3, #16
 800b0c0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b0c4:	e032      	b.n	800b12c <CO_fifo_cpyTok2U64+0xbc>
    } else {
        char* sRet;
        uint64_t u64 = strtoull(buf, &sRet, 0);
 800b0c6:	f107 0118 	add.w	r1, r7, #24
 800b0ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f013 ff83 	bl	801efdc <strtoull>
 800b0d6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f5 f8d6 	bl	8000290 <strlen>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ec:	441a      	add	r2, r3
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d006      	beq.n	800b102 <CO_fifo_cpyTok2U64+0x92>
            st |= CO_fifo_st_errVal;
 800b0f4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b0f8:	f043 0320 	orr.w	r3, r3, #32
 800b0fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b100:	e014      	b.n	800b12c <CO_fifo_cpyTok2U64+0xbc>
        } else {
            uint64_t num = CO_SWAP_64(u64);
 800b102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b106:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b10a:	f107 0110 	add.w	r1, r7, #16
 800b10e:	2300      	movs	r3, #0
 800b110:	2208      	movs	r2, #8
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7fe fe7a 	bl	8009e0c <CO_fifo_write>
 800b118:	6578      	str	r0, [r7, #84]	; 0x54
            if (nWr != sizeof(num)) {
 800b11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	d005      	beq.n	800b12c <CO_fifo_cpyTok2U64+0xbc>
                st |= CO_fifo_st_errBuf;
 800b120:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b128:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            }
        }
    }
    if (status != NULL) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <CO_fifo_cpyTok2U64+0xca>
        *status = (uint8_t)st;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b138:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3758      	adds	r7, #88	; 0x58
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <CO_fifo_cpyTok2I8>:

size_t
CO_fifo_cpyTok2I8(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b092      	sub	sp, #72	; 0x48
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800b150:	23ff      	movs	r3, #255	; 0xff
 800b152:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800b154:	2300      	movs	r3, #0
 800b156:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b15c:	f107 021f 	add.w	r2, r7, #31
 800b160:	f107 0120 	add.w	r1, r7, #32
 800b164:	f107 0318 	add.w	r3, r7, #24
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	4613      	mov	r3, r2
 800b16c:	220f      	movs	r2, #15
 800b16e:	68b8      	ldr	r0, [r7, #8]
 800b170:	f7ff f89e 	bl	800a2b0 <CO_fifo_readToken>
 800b174:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800b176:	7ffb      	ldrb	r3, [r7, #31]
 800b178:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800b17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <CO_fifo_cpyTok2I8+0x44>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d006      	beq.n	800b196 <CO_fifo_cpyTok2I8+0x52>
        st |= CO_fifo_st_errTok;
 800b188:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b18c:	f043 0310 	orr.w	r3, r3, #16
 800b190:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b194:	e037      	b.n	800b206 <CO_fifo_cpyTok2I8+0xc2>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800b196:	f107 0114 	add.w	r1, r7, #20
 800b19a:	f107 0320 	add.w	r3, r7, #32
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f013 fd61 	bl	801ec68 <strtol>
 800b1a6:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (i32 < INT8_MIN) || (i32 > INT8_MAX)) {
 800b1a8:	f107 0320 	add.w	r3, r7, #32
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7f5 f86f 	bl	8000290 <strlen>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f107 0320 	add.w	r3, r7, #32
 800b1ba:	441a      	add	r2, r3
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d106      	bne.n	800b1d0 <CO_fifo_cpyTok2I8+0x8c>
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800b1c8:	db02      	blt.n	800b1d0 <CO_fifo_cpyTok2I8+0x8c>
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	2b7f      	cmp	r3, #127	; 0x7f
 800b1ce:	dd06      	ble.n	800b1de <CO_fifo_cpyTok2I8+0x9a>
            st |= CO_fifo_st_errVal;
 800b1d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1d4:	f043 0320 	orr.w	r3, r3, #32
 800b1d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b1dc:	e013      	b.n	800b206 <CO_fifo_cpyTok2I8+0xc2>
        } else {
            int8_t num = (int8_t)i32;
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	74fb      	strb	r3, [r7, #19]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b1e4:	f107 0113 	add.w	r1, r7, #19
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7fe fe0d 	bl	8009e0c <CO_fifo_write>
 800b1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800b1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d005      	beq.n	800b206 <CO_fifo_cpyTok2I8+0xc2>
                st |= CO_fifo_st_errBuf;
 800b1fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <CO_fifo_cpyTok2I8+0xd0>
        *status = st;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b212:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b216:	4618      	mov	r0, r3
 800b218:	3740      	adds	r7, #64	; 0x40
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <CO_fifo_cpyTok2I16>:

size_t
CO_fifo_cpyTok2I16(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b21e:	b580      	push	{r7, lr}
 800b220:	b092      	sub	sp, #72	; 0x48
 800b222:	af02      	add	r7, sp, #8
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800b22a:	23ff      	movs	r3, #255	; 0xff
 800b22c:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800b22e:	2300      	movs	r3, #0
 800b230:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b236:	f107 021f 	add.w	r2, r7, #31
 800b23a:	f107 0120 	add.w	r1, r7, #32
 800b23e:	f107 0318 	add.w	r3, r7, #24
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4613      	mov	r3, r2
 800b246:	220f      	movs	r2, #15
 800b248:	68b8      	ldr	r0, [r7, #8]
 800b24a:	f7ff f831 	bl	800a2b0 <CO_fifo_readToken>
 800b24e:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800b250:	7ffb      	ldrb	r3, [r7, #31]
 800b252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800b256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <CO_fifo_cpyTok2I16+0x44>
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d006      	beq.n	800b270 <CO_fifo_cpyTok2I16+0x52>
        st |= CO_fifo_st_errTok;
 800b262:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b266:	f043 0310 	orr.w	r3, r3, #16
 800b26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b26e:	e038      	b.n	800b2e2 <CO_fifo_cpyTok2I16+0xc4>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800b270:	f107 0114 	add.w	r1, r7, #20
 800b274:	f107 0320 	add.w	r3, r7, #32
 800b278:	2200      	movs	r2, #0
 800b27a:	4618      	mov	r0, r3
 800b27c:	f013 fcf4 	bl	801ec68 <strtol>
 800b280:	6338      	str	r0, [r7, #48]	; 0x30
        if ((sRet != strchr(buf, (int32_t)('\0'))) || (i32 < INT16_MIN) || (i32 > INT16_MAX)) {
 800b282:	f107 0320 	add.w	r3, r7, #32
 800b286:	4618      	mov	r0, r3
 800b288:	f7f5 f802 	bl	8000290 <strlen>
 800b28c:	4603      	mov	r3, r0
 800b28e:	461a      	mov	r2, r3
 800b290:	f107 0320 	add.w	r3, r7, #32
 800b294:	441a      	add	r2, r3
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d107      	bne.n	800b2ac <CO_fifo_cpyTok2I16+0x8e>
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b2a2:	db03      	blt.n	800b2ac <CO_fifo_cpyTok2I16+0x8e>
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2aa:	db06      	blt.n	800b2ba <CO_fifo_cpyTok2I16+0x9c>
            st |= CO_fifo_st_errVal;
 800b2ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2b0:	f043 0320 	orr.w	r3, r3, #32
 800b2b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b2b8:	e013      	b.n	800b2e2 <CO_fifo_cpyTok2I16+0xc4>
        } else {
            int16_t num = CO_SWAP_16((int16_t)i32);
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	b21b      	sxth	r3, r3
 800b2be:	827b      	strh	r3, [r7, #18]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b2c0:	f107 0112 	add.w	r1, r7, #18
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7fe fd9f 	bl	8009e0c <CO_fifo_write>
 800b2ce:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d005      	beq.n	800b2e2 <CO_fifo_cpyTok2I16+0xc4>
                st |= CO_fifo_st_errBuf;
 800b2d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <CO_fifo_cpyTok2I16+0xd2>
        *status = st;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b2ee:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3740      	adds	r7, #64	; 0x40
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <CO_fifo_cpyTok2I32>:

size_t
CO_fifo_cpyTok2I32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b092      	sub	sp, #72	; 0x48
 800b2fe:	af02      	add	r7, sp, #8
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	607a      	str	r2, [r7, #4]
    char buf[15];
    uint8_t closed = 0xFFU;
 800b306:	23ff      	movs	r3, #255	; 0xff
 800b308:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800b30a:	2300      	movs	r3, #0
 800b30c:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b312:	f107 021f 	add.w	r2, r7, #31
 800b316:	f107 0120 	add.w	r1, r7, #32
 800b31a:	f107 0318 	add.w	r3, r7, #24
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	220f      	movs	r2, #15
 800b324:	68b8      	ldr	r0, [r7, #8]
 800b326:	f7fe ffc3 	bl	800a2b0 <CO_fifo_readToken>
 800b32a:	6378      	str	r0, [r7, #52]	; 0x34
    uint8_t st = closed;
 800b32c:	7ffb      	ldrb	r3, [r7, #31]
 800b32e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if ((nRd == 0U) || err) {
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <CO_fifo_cpyTok2I32+0x44>
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <CO_fifo_cpyTok2I32+0x52>
        st |= CO_fifo_st_errTok;
 800b33e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b342:	f043 0310 	orr.w	r3, r3, #16
 800b346:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b34a:	e02f      	b.n	800b3ac <CO_fifo_cpyTok2I32+0xb2>
    } else {
        char* sRet;
        int32_t i32 = strtol(buf, &sRet, 0);
 800b34c:	f107 0114 	add.w	r1, r7, #20
 800b350:	f107 0320 	add.w	r3, r7, #32
 800b354:	2200      	movs	r2, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f013 fc86 	bl	801ec68 <strtol>
 800b35c:	6338      	str	r0, [r7, #48]	; 0x30
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b35e:	f107 0320 	add.w	r3, r7, #32
 800b362:	4618      	mov	r0, r3
 800b364:	f7f4 ff94 	bl	8000290 <strlen>
 800b368:	4603      	mov	r3, r0
 800b36a:	461a      	mov	r2, r3
 800b36c:	f107 0320 	add.w	r3, r7, #32
 800b370:	441a      	add	r2, r3
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	429a      	cmp	r2, r3
 800b376:	d006      	beq.n	800b386 <CO_fifo_cpyTok2I32+0x8c>
            st |= CO_fifo_st_errVal;
 800b378:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b37c:	f043 0320 	orr.w	r3, r3, #32
 800b380:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b384:	e012      	b.n	800b3ac <CO_fifo_cpyTok2I32+0xb2>
        } else {
            int32_t num = CO_SWAP_32(i32);
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b38a:	f107 0110 	add.w	r1, r7, #16
 800b38e:	2300      	movs	r3, #0
 800b390:	2204      	movs	r2, #4
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7fe fd3a 	bl	8009e0c <CO_fifo_write>
 800b398:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (nWr != sizeof(num)) {
 800b39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d005      	beq.n	800b3ac <CO_fifo_cpyTok2I32+0xb2>
                st |= CO_fifo_st_errBuf;
 800b3a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            }
        }
    }
    if (status != NULL) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <CO_fifo_cpyTok2I32+0xc0>
        *status = st;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b3b8:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3740      	adds	r7, #64	; 0x40
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <CO_fifo_cpyTok2I64>:

size_t
CO_fifo_cpyTok2I64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b098      	sub	sp, #96	; 0x60
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
    char buf[25];
    uint8_t closed = 0xFFU;
 800b3d0:	23ff      	movs	r3, #255	; 0xff
 800b3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t err = false;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
    size_t nWr = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	657b      	str	r3, [r7, #84]	; 0x54
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b3de:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800b3e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b3e6:	f107 031c 	add.w	r3, r7, #28
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	2219      	movs	r2, #25
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	f7fe ff5d 	bl	800a2b0 <CO_fifo_readToken>
 800b3f6:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint8_t st = closed;
 800b3f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if ((nRd == 0U) || err) {
 800b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <CO_fifo_cpyTok2I64+0x48>
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d006      	beq.n	800b41a <CO_fifo_cpyTok2I64+0x56>
        st |= CO_fifo_st_errTok;
 800b40c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b410:	f043 0310 	orr.w	r3, r3, #16
 800b414:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b418:	e032      	b.n	800b480 <CO_fifo_cpyTok2I64+0xbc>
    } else {
        char* sRet;
        int64_t i64 = strtoll(buf, &sRet, 0);
 800b41a:	f107 0118 	add.w	r1, r7, #24
 800b41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b422:	2200      	movs	r2, #0
 800b424:	4618      	mov	r0, r3
 800b426:	f013 fd37 	bl	801ee98 <strtoll>
 800b42a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b42e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b432:	4618      	mov	r0, r3
 800b434:	f7f4 ff2c 	bl	8000290 <strlen>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b440:	441a      	add	r2, r3
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	429a      	cmp	r2, r3
 800b446:	d006      	beq.n	800b456 <CO_fifo_cpyTok2I64+0x92>
            st |= CO_fifo_st_errVal;
 800b448:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b44c:	f043 0320 	orr.w	r3, r3, #32
 800b450:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b454:	e014      	b.n	800b480 <CO_fifo_cpyTok2I64+0xbc>
        } else {
            int64_t num = CO_SWAP_64(i64);
 800b456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b45a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b45e:	f107 0110 	add.w	r1, r7, #16
 800b462:	2300      	movs	r3, #0
 800b464:	2208      	movs	r2, #8
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7fe fcd0 	bl	8009e0c <CO_fifo_write>
 800b46c:	6578      	str	r0, [r7, #84]	; 0x54
            if (nWr != sizeof(num)) {
 800b46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b470:	2b08      	cmp	r3, #8
 800b472:	d005      	beq.n	800b480 <CO_fifo_cpyTok2I64+0xbc>
                st |= CO_fifo_st_errBuf;
 800b474:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b47c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            }
        }
    }
    if (status != NULL) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <CO_fifo_cpyTok2I64+0xca>
        *status = (uint8_t)st;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b48c:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b490:	4618      	mov	r0, r3
 800b492:	3758      	adds	r7, #88	; 0x58
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <CO_fifo_cpyTok2R32>:

size_t
CO_fifo_cpyTok2R32(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b096      	sub	sp, #88	; 0x58
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
    char buf[30];
    uint8_t closed = 0xFFU;
 800b4a4:	23ff      	movs	r3, #255	; 0xff
 800b4a6:	77fb      	strb	r3, [r7, #31]
    bool_t err = false;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61bb      	str	r3, [r7, #24]
    size_t nWr = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b4b0:	f107 021f 	add.w	r2, r7, #31
 800b4b4:	f107 0120 	add.w	r1, r7, #32
 800b4b8:	f107 0318 	add.w	r3, r7, #24
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	221e      	movs	r2, #30
 800b4c2:	68b8      	ldr	r0, [r7, #8]
 800b4c4:	f7fe fef4 	bl	800a2b0 <CO_fifo_readToken>
 800b4c8:	6478      	str	r0, [r7, #68]	; 0x44
    uint8_t st = closed;
 800b4ca:	7ffb      	ldrb	r3, [r7, #31]
 800b4cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if ((nRd == 0U) || err) {
 800b4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <CO_fifo_cpyTok2R32+0x44>
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d006      	beq.n	800b4ea <CO_fifo_cpyTok2R32+0x52>
        st |= CO_fifo_st_errTok;
 800b4dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b4e0:	f043 0310 	orr.w	r3, r3, #16
 800b4e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b4e8:	e030      	b.n	800b54c <CO_fifo_cpyTok2R32+0xb4>
    } else {
        char* sRet;
        float32_t f32 = strtof(buf, &sRet);
 800b4ea:	f107 0214 	add.w	r2, r7, #20
 800b4ee:	f107 0320 	add.w	r3, r7, #32
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f013 facf 	bl	801ea98 <strtof>
 800b4fa:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b4fe:	f107 0320 	add.w	r3, r7, #32
 800b502:	4618      	mov	r0, r3
 800b504:	f7f4 fec4 	bl	8000290 <strlen>
 800b508:	4603      	mov	r3, r0
 800b50a:	461a      	mov	r2, r3
 800b50c:	f107 0320 	add.w	r3, r7, #32
 800b510:	441a      	add	r2, r3
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	429a      	cmp	r2, r3
 800b516:	d006      	beq.n	800b526 <CO_fifo_cpyTok2R32+0x8e>
            st |= CO_fifo_st_errVal;
 800b518:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b51c:	f043 0320 	orr.w	r3, r3, #32
 800b520:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b524:	e012      	b.n	800b54c <CO_fifo_cpyTok2R32+0xb4>
        } else {
            float32_t num = CO_SWAP_32(f32);
 800b526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b528:	613b      	str	r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b52a:	f107 0110 	add.w	r1, r7, #16
 800b52e:	2300      	movs	r3, #0
 800b530:	2204      	movs	r2, #4
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7fe fc6a 	bl	8009e0c <CO_fifo_write>
 800b538:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (nWr != sizeof(num)) {
 800b53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d005      	beq.n	800b54c <CO_fifo_cpyTok2R32+0xb4>
                st |= CO_fifo_st_errBuf;
 800b540:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b548:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
        }
    }
    if (status != NULL) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <CO_fifo_cpyTok2R32+0xc2>
        *status = st;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800b558:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3750      	adds	r7, #80	; 0x50
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <CO_fifo_cpyTok2R64>:

size_t
CO_fifo_cpyTok2R64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b09c      	sub	sp, #112	; 0x70
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
    char buf[40];
    uint8_t closed = 0xFFU;
 800b570:	23ff      	movs	r3, #255	; 0xff
 800b572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool_t err = false;
 800b576:	2300      	movs	r3, #0
 800b578:	623b      	str	r3, [r7, #32]
    size_t nWr = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	667b      	str	r3, [r7, #100]	; 0x64
    size_t nRd = CO_fifo_readToken(src, buf, sizeof(buf), &closed, &err);
 800b57e:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800b582:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b586:	f107 0320 	add.w	r3, r7, #32
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	2228      	movs	r2, #40	; 0x28
 800b590:	68b8      	ldr	r0, [r7, #8]
 800b592:	f7fe fe8d 	bl	800a2b0 <CO_fifo_readToken>
 800b596:	65f8      	str	r0, [r7, #92]	; 0x5c
    uint8_t st = closed;
 800b598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b59c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if ((nRd == 0U) || err) {
 800b5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <CO_fifo_cpyTok2R64+0x48>
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d006      	beq.n	800b5ba <CO_fifo_cpyTok2R64+0x56>
        st |= CO_fifo_st_errTok;
 800b5ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b5b0:	f043 0310 	orr.w	r3, r3, #16
 800b5b4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b5b8:	e039      	b.n	800b62e <CO_fifo_cpyTok2R64+0xca>
    } else {
        char* sRet;
        float64_t f64 = strtof(buf, &sRet);
 800b5ba:	f107 021c 	add.w	r2, r7, #28
 800b5be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f013 fa67 	bl	801ea98 <strtof>
 800b5ca:	ee10 3a10 	vmov	r3, s0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f4 ffca 	bl	8000568 <__aeabi_f2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        if (sRet != strchr(buf, (int32_t)('\0'))) {
 800b5dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f4 fe55 	bl	8000290 <strlen>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5ee:	441a      	add	r2, r3
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d006      	beq.n	800b604 <CO_fifo_cpyTok2R64+0xa0>
            st |= CO_fifo_st_errVal;
 800b5f6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b5fa:	f043 0320 	orr.w	r3, r3, #32
 800b5fe:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b602:	e014      	b.n	800b62e <CO_fifo_cpyTok2R64+0xca>
        } else {
            float64_t num = CO_SWAP_64(f64);
 800b604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b608:	e9c7 2304 	strd	r2, r3, [r7, #16]
            nWr = CO_fifo_write(dest, (uint8_t*)&num, sizeof(num), NULL);
 800b60c:	f107 0110 	add.w	r1, r7, #16
 800b610:	2300      	movs	r3, #0
 800b612:	2208      	movs	r2, #8
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7fe fbf9 	bl	8009e0c <CO_fifo_write>
 800b61a:	6678      	str	r0, [r7, #100]	; 0x64
            if (nWr != sizeof(num)) {
 800b61c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d005      	beq.n	800b62e <CO_fifo_cpyTok2R64+0xca>
                st |= CO_fifo_st_errBuf;
 800b622:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            }
        }
    }
    if (status != NULL) {
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <CO_fifo_cpyTok2R64+0xd8>
        *status = st;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800b63a:	701a      	strb	r2, [r3, #0]
    }
    return nWr;
 800b63c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3768      	adds	r7, #104	; 0x68
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <CO_fifo_cpyTok2Hex>:

size_t
CO_fifo_cpyTok2Hex(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b648:	b580      	push	{r7, lr}
 800b64a:	b090      	sub	sp, #64	; 0x40
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800b654:	2300      	movs	r3, #0
 800b656:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t step;
    uint8_t firstChar;
    uint8_t st = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    if ((dest == NULL) || (src == NULL)) {
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <CO_fifo_cpyTok2Hex+0x22>
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <CO_fifo_cpyTok2Hex+0x26>
        return 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	e109      	b.n	800b882 <CO_fifo_cpyTok2Hex+0x23a>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7fe fb0a 	bl	8009c88 <CO_fifo_getSpace>
 800b674:	6338      	str	r0, [r7, #48]	; 0x30
    destSpace = destSpaceStart;
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* is this the first write into dest? */
    if (!dest->started) {
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d11d      	bne.n	800b6be <CO_fifo_cpyTok2Hex+0x76>
        bool_t insideComment = false;
 800b682:	2300      	movs	r3, #0
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800b686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b68a:	4619      	mov	r1, r3
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	f7fe fdb5 	bl	800a1fc <CO_fifo_trimSpaces>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <CO_fifo_cpyTok2Hex+0x56>
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d005      	beq.n	800b6aa <CO_fifo_cpyTok2Hex+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800b69e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b6a2:	f043 0310 	orr.w	r3, r3, #16
 800b6a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        }
        dest->started = true;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	615a      	str	r2, [r3, #20]
        step = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        firstChar = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800b6bc:	e0b7      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)(dest->aux >> 8);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        firstChar = (uint8_t)(dest->aux & 0xFFU);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    /* repeat until destination space available and no error and not finished
     * and source characters available */
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b6d0:	e0ad      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800b6d2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	68b8      	ldr	r0, [r7, #8]
 800b6da:	f7fe fb45 	bl	8009d68 <CO_fifo_getc>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80b2 	beq.w	800b84a <CO_fifo_cpyTok2Hex+0x202>
            break;
        }

        if (step == 6U) {
 800b6e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6ea:	2b06      	cmp	r3, #6
 800b6ec:	d118      	bne.n	800b720 <CO_fifo_cpyTok2Hex+0xd8>
            /* command is inside comment, waiting for command delimiter */
            bool_t insideComment = true;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	61fb      	str	r3, [r7, #28]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b6f2:	f107 031c 	add.w	r3, r7, #28
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	68b8      	ldr	r0, [r7, #8]
 800b6fa:	f7fe fd7f 	bl	800a1fc <CO_fifo_trimSpaces>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <CO_fifo_cpyTok2Hex+0xc4>
 800b704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b708:	2b0a      	cmp	r3, #10
 800b70a:	d107      	bne.n	800b71c <CO_fifo_cpyTok2Hex+0xd4>
                st |= CO_fifo_st_closed;
 800b70c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                finished = true;
 800b718:	2301      	movs	r3, #1
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            continue;
 800b71c:	bf00      	nop
 800b71e:	e086      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
        }

        if ((int32_t)(isxdigit((int32_t)c)) != 0) {
 800b720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b724:	3301      	adds	r3, #1
 800b726:	4a59      	ldr	r2, [pc, #356]	; (800b88c <CO_fifo_cpyTok2Hex+0x244>)
 800b728:	4413      	add	r3, r2
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b730:	2b00      	cmp	r3, #0
 800b732:	d028      	beq.n	800b786 <CO_fifo_cpyTok2Hex+0x13e>
            /* first or second hex digit */
            if (step == 0U) {
 800b734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d107      	bne.n	800b74c <CO_fifo_cpyTok2Hex+0x104>
                firstChar = c;
 800b73c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b740:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                step = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b74a:	e070      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
            } else {
                /* write the byte */
                uint8_t s[3];
                int32_t num;
                s[0] = firstChar;
 800b74c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b750:	763b      	strb	r3, [r7, #24]
                s[1] = c;
 800b752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b756:	767b      	strb	r3, [r7, #25]
                s[2] = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	76bb      	strb	r3, [r7, #26]
                num = strtol((char*)&s[0], NULL, 16);
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	2210      	movs	r2, #16
 800b762:	2100      	movs	r1, #0
 800b764:	4618      	mov	r0, r3
 800b766:	f013 fa7f 	bl	801ec68 <strtol>
 800b76a:	62b8      	str	r0, [r7, #40]	; 0x28
                (void)CO_fifo_putc(dest, (uint8_t)num);
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	4619      	mov	r1, r3
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7fe fabf 	bl	8009cf6 <CO_fifo_putc>
                destSpace--;
 800b778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b77a:	3b01      	subs	r3, #1
 800b77c:	63fb      	str	r3, [r7, #60]	; 0x3c
                step = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b784:	e053      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
            }
        } else if ((int32_t)(isgraph((int32_t)c)) != 0) {
 800b786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b78a:	3301      	adds	r3, #1
 800b78c:	4a3f      	ldr	r2, [pc, #252]	; (800b88c <CO_fifo_cpyTok2Hex+0x244>)
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	f003 0317 	and.w	r3, r3, #23
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <CO_fifo_cpyTok2Hex+0x170>
            /* printable character, not hex digit */
            if (c == DELIM_COMMENT) { /* comment start */
 800b79a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b79e:	2b23      	cmp	r3, #35	; 0x23
 800b7a0:	d103      	bne.n	800b7aa <CO_fifo_cpyTok2Hex+0x162>
                step = 6;
 800b7a2:	2306      	movs	r3, #6
 800b7a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b7a8:	e041      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
            } else { /* syntax error */
                st |= CO_fifo_st_errTok;
 800b7aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b7ae:	f043 0310 	orr.w	r3, r3, #16
 800b7b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800b7b6:	e03a      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
            }
        } else {
            /* this is space or delimiter */
            if (step == 1U) {
 800b7b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d118      	bne.n	800b7f2 <CO_fifo_cpyTok2Hex+0x1aa>
                /* write the byte */
                uint8_t s[2];
                int32_t num;
                s[0] = firstChar;
 800b7c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b7c4:	743b      	strb	r3, [r7, #16]
                s[1] = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	747b      	strb	r3, [r7, #17]
                num = strtol((char*)&s[0], NULL, 16);
 800b7ca:	f107 0310 	add.w	r3, r7, #16
 800b7ce:	2210      	movs	r2, #16
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f013 fa48 	bl	801ec68 <strtol>
 800b7d8:	62f8      	str	r0, [r7, #44]	; 0x2c
                (void)CO_fifo_putc(dest, (uint8_t)num);
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f7fe fa88 	bl	8009cf6 <CO_fifo_putc>
                destSpace--;
 800b7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                step = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
            bool_t insideComment = false;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b7f6:	f107 0314 	add.w	r3, r7, #20
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68b8      	ldr	r0, [r7, #8]
 800b7fe:	f7fe fcfd 	bl	800a1fc <CO_fifo_trimSpaces>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <CO_fifo_cpyTok2Hex+0x1c8>
 800b808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b80c:	2b0a      	cmp	r3, #10
 800b80e:	d108      	bne.n	800b822 <CO_fifo_cpyTok2Hex+0x1da>
                /* newline found, finish */
                st |= CO_fifo_st_closed;
 800b810:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b814:	f043 0301 	orr.w	r3, r3, #1
 800b818:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                finished = true;
 800b81c:	2301      	movs	r3, #1
 800b81e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b820:	e005      	b.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
            } else if (insideComment) {
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <CO_fifo_cpyTok2Hex+0x1e6>
                step = 6;
 800b828:	2306      	movs	r3, #6
 800b82a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <CO_fifo_cpyTok2Hex+0x204>
 800b834:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d105      	bne.n	800b84c <CO_fifo_cpyTok2Hex+0x204>
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	2b00      	cmp	r3, #0
 800b844:	f43f af45 	beq.w	800b6d2 <CO_fifo_cpyTok2Hex+0x8a>
 800b848:	e000      	b.n	800b84c <CO_fifo_cpyTok2Hex+0x204>
            break;
 800b84a:	bf00      	nop
            } else { /* MISRA C 2004 14.10 */
            }
        }
    } /* while ... */

    if (!finished) {
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10d      	bne.n	800b86e <CO_fifo_cpyTok2Hex+0x226>
        st |= CO_fifo_st_partial;
 800b852:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b856:	f043 0302 	orr.w	r3, r3, #2
 800b85a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        /* memorize variables for next iteration */
        dest->aux = ((uint32_t)step << 8) | firstChar;
 800b85e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b862:	021a      	lsls	r2, r3, #8
 800b864:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b868:	431a      	orrs	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <CO_fifo_cpyTok2Hex+0x234>
        *status = st;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800b87a:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800b87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b880:	1ad3      	subs	r3, r2, r3
}
 800b882:	4618      	mov	r0, r3
 800b884:	3740      	adds	r7, #64	; 0x40
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	08024078 	.word	0x08024078

0800b890 <CO_fifo_cpyTok2Vs>:

size_t
CO_fifo_cpyTok2Vs(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800b890:	b580      	push	{r7, lr}
 800b892:	b08e      	sub	sp, #56	; 0x38
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800b89c:	2300      	movs	r3, #0
 800b89e:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t step;
    uint8_t st = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if ((dest == NULL) || (src == NULL)) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <CO_fifo_cpyTok2Vs+0x22>
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <CO_fifo_cpyTok2Vs+0x26>
        return 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e17e      	b.n	800bbb4 <CO_fifo_cpyTok2Vs+0x324>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7fe f9e6 	bl	8009c88 <CO_fifo_getSpace>
 800b8bc:	62b8      	str	r0, [r7, #40]	; 0x28
    destSpace = destSpaceStart;
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* is this the first write into dest? */
    if (!dest->started) {
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d11a      	bne.n	800b900 <CO_fifo_cpyTok2Vs+0x70>
        bool_t insideComment = false;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800b8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68b8      	ldr	r0, [r7, #8]
 800b8d6:	f7fe fc91 	bl	800a1fc <CO_fifo_trimSpaces>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <CO_fifo_cpyTok2Vs+0x56>
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <CO_fifo_cpyTok2Vs+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800b8e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b8ea:	f043 0310 	orr.w	r3, r3, #16
 800b8ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        dest->started = true;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	615a      	str	r2, [r3, #20]
        step = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b8fe:	e133      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)dest->aux;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    /* repeat until destination space available and no error and not finished and source characters available */
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800b908:	e12e      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800b90a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800b90e:	4619      	mov	r1, r3
 800b910:	68b8      	ldr	r0, [r7, #8]
 800b912:	f7fe fa29 	bl	8009d68 <CO_fifo_getc>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 8133 	beq.w	800bb84 <CO_fifo_cpyTok2Vs+0x2f4>
            break;
        }

        switch (step) {
 800b91e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b922:	2b06      	cmp	r3, #6
 800b924:	f200 8116 	bhi.w	800bb54 <CO_fifo_cpyTok2Vs+0x2c4>
 800b928:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <CO_fifo_cpyTok2Vs+0xa0>)
 800b92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92e:	bf00      	nop
 800b930:	0800b94d 	.word	0x0800b94d
 800b934:	0800b977 	.word	0x0800b977
 800b938:	0800b977 	.word	0x0800b977
 800b93c:	0800ba15 	.word	0x0800ba15
 800b940:	0800ba15 	.word	0x0800ba15
 800b944:	0800bab5 	.word	0x0800bab5
 800b948:	0800bb25 	.word	0x0800bb25
            case 0: /* beginning of the string, first write into dest */
                if (c == DELIM_DQUOTE) {
 800b94c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b950:	2b22      	cmp	r3, #34	; 0x22
 800b952:	d103      	bne.n	800b95c <CO_fifo_cpyTok2Vs+0xcc>
                    /* Indicated beginning of the string, skip this character. */
                    step = 1;
 800b954:	2301      	movs	r3, #1
 800b956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    /* copy the character */
                    (void)CO_fifo_putc(dest, c);
                    destSpace--;
                    step = 2;
                }
                break;
 800b95a:	e105      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                    (void)CO_fifo_putc(dest, c);
 800b95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b960:	4619      	mov	r1, r3
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7fe f9c7 	bl	8009cf6 <CO_fifo_putc>
                    destSpace--;
 800b968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96a:	3b01      	subs	r3, #1
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
                    step = 2;
 800b96e:	2302      	movs	r3, #2
 800b970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800b974:	e0f8      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>

            case 1: /* inside string, quoted string */
            case 2: /* inside string, single word, no quotes */
                if (c == DELIM_DQUOTE) {
 800b976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b97a:	2b22      	cmp	r3, #34	; 0x22
 800b97c:	d105      	bne.n	800b98a <CO_fifo_cpyTok2Vs+0xfa>
                    /* double quote found, this may be end of the string or escaped
                     * double quote (with two double quotes) */
                    step += 2U;
 800b97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b982:	3302      	adds	r3, #2
 800b984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                } else {
                    /* copy the character */
                    (void)CO_fifo_putc(dest, c);
                    destSpace--;
                }
                break;
 800b988:	e0ee      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b98a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b98e:	3301      	adds	r3, #1
 800b990:	4a8a      	ldr	r2, [pc, #552]	; (800bbbc <CO_fifo_cpyTok2Vs+0x32c>)
 800b992:	4413      	add	r3, r2
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	f003 0317 	and.w	r3, r3, #23
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d124      	bne.n	800b9e8 <CO_fifo_cpyTok2Vs+0x158>
 800b99e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d120      	bne.n	800b9e8 <CO_fifo_cpyTok2Vs+0x158>
                    bool_t insideComment = false;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61fb      	str	r3, [r7, #28]
                    if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800b9aa:	f107 031c 	add.w	r3, r7, #28
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f7fe fc23 	bl	800a1fc <CO_fifo_trimSpaces>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d103      	bne.n	800b9c4 <CO_fifo_cpyTok2Vs+0x134>
 800b9bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9c0:	2b0a      	cmp	r3, #10
 800b9c2:	d108      	bne.n	800b9d6 <CO_fifo_cpyTok2Vs+0x146>
                        st |= CO_fifo_st_closed;
 800b9c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9c8:	f043 0301 	orr.w	r3, r3, #1
 800b9cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                        finished = true;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	633b      	str	r3, [r7, #48]	; 0x30
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b9d4:	e01d      	b.n	800ba12 <CO_fifo_cpyTok2Vs+0x182>
                        step = insideComment ? 6U : 5U;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <CO_fifo_cpyTok2Vs+0x150>
 800b9dc:	2306      	movs	r3, #6
 800b9de:	e000      	b.n	800b9e2 <CO_fifo_cpyTok2Vs+0x152>
 800b9e0:	2305      	movs	r3, #5
 800b9e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                } else if ((isgraph((int)c) == 0) && (step == 2U)) {
 800b9e6:	e014      	b.n	800ba12 <CO_fifo_cpyTok2Vs+0x182>
                } else if (c == DELIM_COMMAND) {
 800b9e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9ec:	2b0a      	cmp	r3, #10
 800b9ee:	d106      	bne.n	800b9fe <CO_fifo_cpyTok2Vs+0x16e>
                    st |= CO_fifo_st_errTok;
 800b9f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9f4:	f043 0310 	orr.w	r3, r3, #16
 800b9f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800b9fc:	e0b4      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                    (void)CO_fifo_putc(dest, c);
 800b9fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7fe f976 	bl	8009cf6 <CO_fifo_putc>
                    destSpace--;
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ba10:	e0aa      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
 800ba12:	e0a9      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>

            case 3: /* previous was double quote, parsing quoted string */
            case 4: /* previous was double quote, parsing no quoted word */
                if (c == DELIM_DQUOTE) {
 800ba14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba18:	2b22      	cmp	r3, #34	; 0x22
 800ba1a:	d10e      	bne.n	800ba3a <CO_fifo_cpyTok2Vs+0x1aa>
                    /* escaped double quote, copy the character and continue */
                    (void)CO_fifo_putc(dest, c);
 800ba1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba20:	4619      	mov	r1, r3
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7fe f967 	bl	8009cf6 <CO_fifo_putc>
                    destSpace--;
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	637b      	str	r3, [r7, #52]	; 0x34
                    step -= 2U;
 800ba2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba32:	3b02      	subs	r3, #2
 800ba34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            /* space must follow closing double quote, error */
                            st |= CO_fifo_st_errTok;
                        }
                    }
                }
                break;
 800ba38:	e096      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                    if (step == 4U) {
 800ba3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d106      	bne.n	800ba50 <CO_fifo_cpyTok2Vs+0x1c0>
                        st |= CO_fifo_st_errTok;
 800ba42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba46:	f043 0310 	orr.w	r3, r3, #16
 800ba4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800ba4e:	e08b      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                        if (isgraph((int)c) == 0) {
 800ba50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba54:	3301      	adds	r3, #1
 800ba56:	4a59      	ldr	r2, [pc, #356]	; (800bbbc <CO_fifo_cpyTok2Vs+0x32c>)
 800ba58:	4413      	add	r3, r2
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	f003 0317 	and.w	r3, r3, #23
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d120      	bne.n	800baa6 <CO_fifo_cpyTok2Vs+0x216>
                            bool_t insideComment = false;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61bb      	str	r3, [r7, #24]
                            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800ba68:	f107 0318 	add.w	r3, r7, #24
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	68b8      	ldr	r0, [r7, #8]
 800ba70:	f7fe fbc4 	bl	800a1fc <CO_fifo_trimSpaces>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <CO_fifo_cpyTok2Vs+0x1f2>
 800ba7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba7e:	2b0a      	cmp	r3, #10
 800ba80:	d108      	bne.n	800ba94 <CO_fifo_cpyTok2Vs+0x204>
                                st |= CO_fifo_st_closed;
 800ba82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba86:	f043 0301 	orr.w	r3, r3, #1
 800ba8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                finished = true;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800ba92:	e069      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                                step = insideComment ? 6U : 5U;
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <CO_fifo_cpyTok2Vs+0x20e>
 800ba9a:	2306      	movs	r3, #6
 800ba9c:	e000      	b.n	800baa0 <CO_fifo_cpyTok2Vs+0x210>
 800ba9e:	2305      	movs	r3, #5
 800baa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800baa4:	e060      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                            st |= CO_fifo_st_errTok;
 800baa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800baaa:	f043 0310 	orr.w	r3, r3, #16
 800baae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800bab2:	e059      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>

            case 5: { /* String token is finished, waiting for command delimiter */
                bool_t insideComment = false;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]
                if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800bab8:	f107 0314 	add.w	r3, r7, #20
 800babc:	4619      	mov	r1, r3
 800babe:	68b8      	ldr	r0, [r7, #8]
 800bac0:	f7fe fb9c 	bl	800a1fc <CO_fifo_trimSpaces>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <CO_fifo_cpyTok2Vs+0x242>
 800baca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bace:	2b0a      	cmp	r3, #10
 800bad0:	d108      	bne.n	800bae4 <CO_fifo_cpyTok2Vs+0x254>
                    st |= CO_fifo_st_closed;
 800bad2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bad6:	f043 0301 	orr.w	r3, r3, #1
 800bada:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    finished = true;
 800bade:	2301      	movs	r3, #1
 800bae0:	633b      	str	r3, [r7, #48]	; 0x30
                    } else { /* syntax error */
                        st |= CO_fifo_st_errTok;
                    }
                } else { /* MISRA C 2004 14.10 */
                }
                break;
 800bae2:	e03e      	b.n	800bb62 <CO_fifo_cpyTok2Vs+0x2d2>
                } else if (insideComment) {
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <CO_fifo_cpyTok2Vs+0x262>
                    step = 6;
 800baea:	2306      	movs	r3, #6
 800baec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800baf0:	e037      	b.n	800bb62 <CO_fifo_cpyTok2Vs+0x2d2>
                } else if (isgraph((int)c) != 0) {
 800baf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800baf6:	3301      	adds	r3, #1
 800baf8:	4a30      	ldr	r2, [pc, #192]	; (800bbbc <CO_fifo_cpyTok2Vs+0x32c>)
 800bafa:	4413      	add	r3, r2
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	f003 0317 	and.w	r3, r3, #23
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d02d      	beq.n	800bb62 <CO_fifo_cpyTok2Vs+0x2d2>
                    if (c == DELIM_COMMENT) { /* comment start */
 800bb06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb0a:	2b23      	cmp	r3, #35	; 0x23
 800bb0c:	d103      	bne.n	800bb16 <CO_fifo_cpyTok2Vs+0x286>
                        step = 6;
 800bb0e:	2306      	movs	r3, #6
 800bb10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                break;
 800bb14:	e025      	b.n	800bb62 <CO_fifo_cpyTok2Vs+0x2d2>
                        st |= CO_fifo_st_errTok;
 800bb16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb1a:	f043 0310 	orr.w	r3, r3, #16
 800bb1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800bb22:	e01e      	b.n	800bb62 <CO_fifo_cpyTok2Vs+0x2d2>
            }
            case 6: { /* String token is finished, waiting for command delimiter */
                bool_t insideComment = true;
 800bb24:	2301      	movs	r3, #1
 800bb26:	613b      	str	r3, [r7, #16]
                if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800bb28:	f107 0310 	add.w	r3, r7, #16
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	68b8      	ldr	r0, [r7, #8]
 800bb30:	f7fe fb64 	bl	800a1fc <CO_fifo_trimSpaces>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d103      	bne.n	800bb42 <CO_fifo_cpyTok2Vs+0x2b2>
 800bb3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb3e:	2b0a      	cmp	r3, #10
 800bb40:	d111      	bne.n	800bb66 <CO_fifo_cpyTok2Vs+0x2d6>
                    st |= CO_fifo_st_closed;
 800bb42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    finished = true;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	633b      	str	r3, [r7, #48]	; 0x30
                }
                break;
 800bb52:	e008      	b.n	800bb66 <CO_fifo_cpyTok2Vs+0x2d6>
            }
            default: /* internal error */ st |= CO_fifo_st_errInt; break;
 800bb54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800bb60:	e002      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                break;
 800bb62:	bf00      	nop
 800bb64:	e000      	b.n	800bb68 <CO_fifo_cpyTok2Vs+0x2d8>
                break;
 800bb66:	bf00      	nop
    while ((destSpace > 0U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800bb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00b      	beq.n	800bb86 <CO_fifo_cpyTok2Vs+0x2f6>
 800bb6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d105      	bne.n	800bb86 <CO_fifo_cpyTok2Vs+0x2f6>
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f43f aec4 	beq.w	800b90a <CO_fifo_cpyTok2Vs+0x7a>
 800bb82:	e000      	b.n	800bb86 <CO_fifo_cpyTok2Vs+0x2f6>
            break;
 800bb84:	bf00      	nop
        }
    }

    if (!finished) {
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <CO_fifo_cpyTok2Vs+0x310>
        st |= CO_fifo_st_partial;
 800bb8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb90:	f043 0302 	orr.w	r3, r3, #2
 800bb94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        /* memorize variables for next iteration */
        dest->aux = step;
 800bb98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <CO_fifo_cpyTok2Vs+0x31e>
        *status = st;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bbac:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800bbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb2:	1ad3      	subs	r3, r2, r3
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3738      	adds	r7, #56	; 0x38
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	08024078 	.word	0x08024078

0800bbc0 <CO_fifo_cpyTok2B64>:

size_t
CO_fifo_cpyTok2B64(CO_fifo_t* dest, CO_fifo_t* src, uint8_t* status) {
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b090      	sub	sp, #64	; 0x40
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
    /* mime-base64 decoding, see description above base64EncTable */

    size_t destSpace, destSpaceStart;
    bool_t finished = false;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t step;
    uint32_t dword;
    uint8_t st = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if ((dest == NULL) || (src == NULL)) {
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <CO_fifo_cpyTok2B64+0x22>
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <CO_fifo_cpyTok2B64+0x26>
        return 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e130      	b.n	800be48 <CO_fifo_cpyTok2B64+0x288>
    }

    /* get free space of the dest fifo */
    destSpaceStart = CO_fifo_getSpace(dest);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7fe f84e 	bl	8009c88 <CO_fifo_getSpace>
 800bbec:	62b8      	str	r0, [r7, #40]	; 0x28
    destSpace = destSpaceStart;
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* is this the first write into dest? */
    if (!dest->started) {
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d11c      	bne.n	800bc34 <CO_fifo_cpyTok2B64+0x74>
        bool_t insideComment = false;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	623b      	str	r3, [r7, #32]
        if (CO_fifo_trimSpaces(src, &insideComment) || insideComment) {
 800bbfe:	f107 0320 	add.w	r3, r7, #32
 800bc02:	4619      	mov	r1, r3
 800bc04:	68b8      	ldr	r0, [r7, #8]
 800bc06:	f7fe faf9 	bl	800a1fc <CO_fifo_trimSpaces>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d102      	bne.n	800bc16 <CO_fifo_cpyTok2B64+0x56>
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d005      	beq.n	800bc22 <CO_fifo_cpyTok2B64+0x62>
            /* command delimiter found without string, this is an error */
            st |= CO_fifo_st_errTok;
 800bc16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc1a:	f043 0310 	orr.w	r3, r3, #16
 800bc1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        dest->started = true;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2201      	movs	r2, #1
 800bc26:	615a      	str	r2, [r3, #20]
        step = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        dword = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	633b      	str	r3, [r7, #48]	; 0x30
 800bc32:	e0de      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
    } else {
        /* get memorized variables from previous function calls */
        step = (uint8_t)(dest->aux >> 24);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	0e1b      	lsrs	r3, r3, #24
 800bc3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        dword = dest->aux & 0xFFFFFFU;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bc46:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /* repeat until destination space available and no error and not finished and source characters available */
    while ((destSpace >= 3U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800bc48:	e0d3      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
        uint8_t c;
        if (!CO_fifo_getc(src, &c)) {
 800bc4a:	f107 031f 	add.w	r3, r7, #31
 800bc4e:	4619      	mov	r1, r3
 800bc50:	68b8      	ldr	r0, [r7, #8]
 800bc52:	f7fe f889 	bl	8009d68 <CO_fifo_getc>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 80d8 	beq.w	800be0e <CO_fifo_cpyTok2B64+0x24e>
            break;
        }

        if (step >= 5U) {
 800bc5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc62:	2b04      	cmp	r3, #4
 800bc64:	d93e      	bls.n	800bce4 <CO_fifo_cpyTok2B64+0x124>
            /* String token is finished, waiting for command delimiter */
            bool_t insideComment = step > 5U;
 800bc66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc6a:	2b05      	cmp	r3, #5
 800bc6c:	bf8c      	ite	hi
 800bc6e:	2301      	movhi	r3, #1
 800bc70:	2300      	movls	r3, #0
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	61bb      	str	r3, [r7, #24]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800bc76:	f107 0318 	add.w	r3, r7, #24
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	68b8      	ldr	r0, [r7, #8]
 800bc7e:	f7fe fabd 	bl	800a1fc <CO_fifo_trimSpaces>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <CO_fifo_cpyTok2B64+0xce>
 800bc88:	7ffb      	ldrb	r3, [r7, #31]
 800bc8a:	2b0a      	cmp	r3, #10
 800bc8c:	d108      	bne.n	800bca0 <CO_fifo_cpyTok2B64+0xe0>
                st |= CO_fifo_st_closed;
 800bc8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                finished = true;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
                } else { /* syntax error */
                    st |= CO_fifo_st_errTok;
                }
            } else { /* MISRA C 2004 14.10 */
            }
            continue;
 800bc9e:	e01f      	b.n	800bce0 <CO_fifo_cpyTok2B64+0x120>
            } else if (insideComment) {
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <CO_fifo_cpyTok2B64+0xee>
                step = 6;
 800bca6:	2306      	movs	r3, #6
 800bca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            continue;
 800bcac:	e018      	b.n	800bce0 <CO_fifo_cpyTok2B64+0x120>
            } else if ((isgraph((int)c) != 0) && (c != (uint8_t)'=')) {
 800bcae:	7ffb      	ldrb	r3, [r7, #31]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	4a67      	ldr	r2, [pc, #412]	; (800be50 <CO_fifo_cpyTok2B64+0x290>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	f003 0317 	and.w	r3, r3, #23
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00f      	beq.n	800bce0 <CO_fifo_cpyTok2B64+0x120>
 800bcc0:	7ffb      	ldrb	r3, [r7, #31]
 800bcc2:	2b3d      	cmp	r3, #61	; 0x3d
 800bcc4:	d00c      	beq.n	800bce0 <CO_fifo_cpyTok2B64+0x120>
                if (c == DELIM_COMMENT) { /* comment start */
 800bcc6:	7ffb      	ldrb	r3, [r7, #31]
 800bcc8:	2b23      	cmp	r3, #35	; 0x23
 800bcca:	d103      	bne.n	800bcd4 <CO_fifo_cpyTok2B64+0x114>
                    step = 6;
 800bccc:	2306      	movs	r3, #6
 800bcce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            continue;
 800bcd2:	e005      	b.n	800bce0 <CO_fifo_cpyTok2B64+0x120>
                    st |= CO_fifo_st_errTok;
 800bcd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcd8:	f043 0310 	orr.w	r3, r3, #16
 800bcdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            continue;
 800bce0:	bf00      	nop
 800bce2:	e086      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
        }

        uint8_t code = base64DecTable[c & 0x7FU];
 800bce4:	7ffb      	ldrb	r3, [r7, #31]
 800bce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcea:	4a5a      	ldr	r2, [pc, #360]	; (800be54 <CO_fifo_cpyTok2B64+0x294>)
 800bcec:	5cd3      	ldrb	r3, [r2, r3]
 800bcee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (((c & 0x80U) != 0U) || ((code & 0x80U) != 0U)) {
 800bcf2:	7ffb      	ldrb	r3, [r7, #31]
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	db03      	blt.n	800bd02 <CO_fifo_cpyTok2B64+0x142>
 800bcfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	da06      	bge.n	800bd10 <CO_fifo_cpyTok2B64+0x150>
            st |= CO_fifo_st_errTok;
 800bd02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd06:	f043 0310 	orr.w	r3, r3, #16
 800bd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bd0e:	e070      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
        } else if (code >= 64U /* '=' (pad) or DELIM_COMMAND or space */) {
 800bd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd14:	2b3f      	cmp	r3, #63	; 0x3f
 800bd16:	d943      	bls.n	800bda0 <CO_fifo_cpyTok2B64+0x1e0>
            /* base64 string finished, write remaining bytes */
            switch (step) {
 800bd18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d002      	beq.n	800bd26 <CO_fifo_cpyTok2B64+0x166>
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d00b      	beq.n	800bd3c <CO_fifo_cpyTok2B64+0x17c>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 2));
                    destSpace -= 2U;
                    break;
                default:
                    /* MISRA C 2004 15.3 */
                    break;
 800bd24:	e01c      	b.n	800bd60 <CO_fifo_cpyTok2B64+0x1a0>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 4));
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	091b      	lsrs	r3, r3, #4
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7fd ffe1 	bl	8009cf6 <CO_fifo_putc>
                    destSpace--;
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	3b01      	subs	r3, #1
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800bd3a:	e011      	b.n	800bd60 <CO_fifo_cpyTok2B64+0x1a0>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 10));
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3e:	0a9b      	lsrs	r3, r3, #10
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	4619      	mov	r1, r3
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7fd ffd6 	bl	8009cf6 <CO_fifo_putc>
                    (void)CO_fifo_putc(dest, (uint8_t)(dword >> 2));
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	089b      	lsrs	r3, r3, #2
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7fd ffcf 	bl	8009cf6 <CO_fifo_putc>
                    destSpace -= 2U;
 800bd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5a:	3b02      	subs	r3, #2
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800bd5e:	bf00      	nop
            }

            bool_t insideComment = false;
 800bd60:	2300      	movs	r3, #0
 800bd62:	617b      	str	r3, [r7, #20]
            if (CO_fifo_trimSpaces(src, &insideComment) || (c == DELIM_COMMAND)) {
 800bd64:	f107 0314 	add.w	r3, r7, #20
 800bd68:	4619      	mov	r1, r3
 800bd6a:	68b8      	ldr	r0, [r7, #8]
 800bd6c:	f7fe fa46 	bl	800a1fc <CO_fifo_trimSpaces>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d102      	bne.n	800bd7c <CO_fifo_cpyTok2B64+0x1bc>
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b0a      	cmp	r3, #10
 800bd7a:	d108      	bne.n	800bd8e <CO_fifo_cpyTok2B64+0x1ce>
                st |= CO_fifo_st_closed;
 800bd7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd80:	f043 0301 	orr.w	r3, r3, #1
 800bd84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                finished = true;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd8c:	e031      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
            } else {
                step = insideComment ? 6U : 5U;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <CO_fifo_cpyTok2B64+0x1d8>
 800bd94:	2306      	movs	r3, #6
 800bd96:	e000      	b.n	800bd9a <CO_fifo_cpyTok2B64+0x1da>
 800bd98:	2305      	movs	r3, #5
 800bd9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd9e:	e028      	b.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
            }
        } else {
            dword = (dword << 6) | code;
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	019a      	lsls	r2, r3, #6
 800bda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	633b      	str	r3, [r7, #48]	; 0x30
            if (step++ == 3U) {
 800bdac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d11b      	bne.n	800bdf2 <CO_fifo_cpyTok2B64+0x232>
                (void)CO_fifo_putc(dest, (uint8_t)((dword >> 16) & 0xFFU));
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	0c1b      	lsrs	r3, r3, #16
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7fd ff97 	bl	8009cf6 <CO_fifo_putc>
                (void)CO_fifo_putc(dest, (uint8_t)((dword >> 8) & 0xFFU));
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7fd ff90 	bl	8009cf6 <CO_fifo_putc>
                (void)CO_fifo_putc(dest, (uint8_t)(dword & 0xFFU));
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	4619      	mov	r1, r3
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7fd ff8a 	bl	8009cf6 <CO_fifo_putc>
                destSpace -= 3U;
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	3b03      	subs	r3, #3
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
                dword = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	633b      	str	r3, [r7, #48]	; 0x30
                step = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while ((destSpace >= 3U) && ((st & CO_fifo_st_errMask) == 0U) && !finished) {
 800bdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d90b      	bls.n	800be10 <CO_fifo_cpyTok2B64+0x250>
 800bdf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d105      	bne.n	800be10 <CO_fifo_cpyTok2B64+0x250>
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	2b00      	cmp	r3, #0
 800be08:	f43f af1f 	beq.w	800bc4a <CO_fifo_cpyTok2B64+0x8a>
 800be0c:	e000      	b.n	800be10 <CO_fifo_cpyTok2B64+0x250>
            break;
 800be0e:	bf00      	nop
            }
        }
    } /* while ... */

    if (!finished) {
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10e      	bne.n	800be34 <CO_fifo_cpyTok2B64+0x274>
        st |= CO_fifo_st_partial;
 800be16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be1a:	f043 0302 	orr.w	r3, r3, #2
 800be1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* memorize variables for next iteration */
        dest->aux = ((uint32_t)step << 24) | (dword & 0xFFFFFFU);
 800be22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be26:	061a      	lsls	r2, r3, #24
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be2e:	431a      	orrs	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	619a      	str	r2, [r3, #24]
    }

    if (status != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <CO_fifo_cpyTok2B64+0x282>
        *status = st;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be40:	701a      	strb	r2, [r3, #0]
    }

    return destSpaceStart - destSpace;
 800be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be46:	1ad3      	subs	r3, r2, r3
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3740      	adds	r7, #64	; 0x40
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	08024078 	.word	0x08024078
 800be54:	08022228 	.word	0x08022228

0800be58 <crc16_ccitt_single>:
    0x1AD0U, 0x2AB3U, 0x3A92U, 0xFD2EU, 0xED0FU, 0xDD6CU, 0xCD4DU, 0xBDAAU, 0xAD8BU, 0x9DE8U, 0x8DC9U, 0x7C26U, 0x6C07U,
    0x5C64U, 0x4C45U, 0x3CA2U, 0x2C83U, 0x1CE0U, 0x0CC1U, 0xEF1FU, 0xFF3EU, 0xCF5DU, 0xDF7CU, 0xAF9BU, 0xBFBAU, 0x8FD9U,
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U};

void
crc16_ccitt_single(uint16_t* crc, const uint8_t chr) {
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp = (uint8_t)(*crc >> 8U) ^ chr;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	0a1b      	lsrs	r3, r3, #8
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	4053      	eors	r3, r2
 800be72:	73fb      	strb	r3, [r7, #15]
    *crc = (uint16_t)((*crc << 8U) ^ crc16_ccitt_table[tmp]);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	021b      	lsls	r3, r3, #8
 800be7a:	b21a      	sxth	r2, r3
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	4907      	ldr	r1, [pc, #28]	; (800be9c <crc16_ccitt_single+0x44>)
 800be80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be84:	b21b      	sxth	r3, r3
 800be86:	4053      	eors	r3, r2
 800be88:	b21b      	sxth	r3, r3
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	801a      	strh	r2, [r3, #0]
}
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	080222a8 	.word	0x080222a8

0800bea0 <CO_LEDs_init>:

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {return CO_ERROR_ILLEGAL_ARGUMENT;}
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <CO_LEDs_init+0x18>
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295
 800beb6:	e006      	b.n	800bec6 <CO_LEDs_init+0x26>

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 800beb8:	220c      	movs	r2, #12
 800beba:	2100      	movs	r1, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f013 fbbd 	bl	801f63c <memset>
    return ret;
 800bec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <CO_LEDs_process>:
				bool_t ErrHbCons,
                bool_t ErrOther,
				bool_t firmwareDownload,
				uint32_t* timerNext_us
			   )
{
 800bed0:	b480      	push	{r7}
 800bed2:	b089      	sub	sp, #36	; 0x24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	4613      	mov	r3, r2
 800bede:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 800bee8:	2300      	movs	r3, #0
 800beea:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	441a      	add	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U)
 800bef8:	e112      	b.n	800c120 <CO_LEDs_process+0x250>
    {
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	7a5b      	ldrb	r3, [r3, #9]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	bf0c      	ite	eq
 800bf06:	2301      	moveq	r3, #1
 800bf08:	2300      	movne	r3, #0
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	613b      	str	r3, [r7, #16]

        tick = true;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800bf1a:	3b50      	subs	r3, #80	; 0x50
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	791b      	ldrb	r3, [r3, #4]
 800bf24:	3301      	adds	r3, #1
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	711a      	strb	r2, [r3, #4]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	791b      	ldrb	r3, [r3, #4]
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	f240 80dd 	bls.w	800c0f0 <CO_LEDs_process+0x220>
        {
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	711a      	strb	r2, [r3, #4]
            rd = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7a5b      	ldrb	r3, [r3, #9]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 800bf50:	7ffb      	ldrb	r3, [r7, #31]
 800bf52:	f043 0302 	orr.w	r3, r3, #2
 800bf56:	77fb      	strb	r3, [r7, #31]
 800bf58:	e003      	b.n	800bf62 <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 800bf5a:	7fbb      	ldrb	r3, [r7, #30]
 800bf5c:	f043 0302 	orr.w	r3, r3, #2
 800bf60:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	795b      	ldrb	r3, [r3, #5]
 800bf66:	3301      	adds	r3, #1
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	715a      	strb	r2, [r3, #5]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	795b      	ldrb	r3, [r3, #5]
 800bf72:	2b06      	cmp	r3, #6
 800bf74:	d010      	beq.n	800bf98 <CO_LEDs_process+0xc8>
 800bf76:	2b06      	cmp	r3, #6
 800bf78:	dc12      	bgt.n	800bfa0 <CO_LEDs_process+0xd0>
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d002      	beq.n	800bf84 <CO_LEDs_process+0xb4>
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d005      	beq.n	800bf8e <CO_LEDs_process+0xbe>
            {
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 800bf82:	e00d      	b.n	800bfa0 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	f043 0304 	orr.w	r3, r3, #4
 800bf8a:	77fb      	strb	r3, [r7, #31]
 800bf8c:	e009      	b.n	800bfa2 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 800bf8e:	7fbb      	ldrb	r3, [r7, #30]
 800bf90:	f043 0304 	orr.w	r3, r3, #4
 800bf94:	77bb      	strb	r3, [r7, #30]
 800bf96:	e004      	b.n	800bfa2 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	715a      	strb	r2, [r3, #5]
 800bf9e:	e000      	b.n	800bfa2 <CO_LEDs_process+0xd2>
                default: /* none */ break;
 800bfa0:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_2)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	799b      	ldrb	r3, [r3, #6]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	719a      	strb	r2, [r3, #6]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	799b      	ldrb	r3, [r3, #6]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	2b07      	cmp	r3, #7
 800bfb6:	d821      	bhi.n	800bffc <CO_LEDs_process+0x12c>
 800bfb8:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <CO_LEDs_process+0xf0>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800bfe1 	.word	0x0800bfe1
 800bfc4:	0800bfeb 	.word	0x0800bfeb
 800bfc8:	0800bfe1 	.word	0x0800bfe1
 800bfcc:	0800bfeb 	.word	0x0800bfeb
 800bfd0:	0800bffd 	.word	0x0800bffd
 800bfd4:	0800bffd 	.word	0x0800bffd
 800bfd8:	0800bffd 	.word	0x0800bffd
 800bfdc:	0800bff5 	.word	0x0800bff5
            {
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 800bfe0:	7ffb      	ldrb	r3, [r7, #31]
 800bfe2:	f043 0308 	orr.w	r3, r3, #8
 800bfe6:	77fb      	strb	r3, [r7, #31]
 800bfe8:	e009      	b.n	800bffe <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 800bfea:	7fbb      	ldrb	r3, [r7, #30]
 800bfec:	f043 0308 	orr.w	r3, r3, #8
 800bff0:	77bb      	strb	r3, [r7, #30]
 800bff2:	e004      	b.n	800bffe <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	719a      	strb	r2, [r3, #6]
 800bffa:	e000      	b.n	800bffe <CO_LEDs_process+0x12e>
                default: /* none */ break;
 800bffc:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_3)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	79db      	ldrb	r3, [r3, #7]
 800c002:	3301      	adds	r3, #1
 800c004:	b2da      	uxtb	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	71da      	strb	r2, [r3, #7]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	79db      	ldrb	r3, [r3, #7]
 800c00e:	2b0a      	cmp	r3, #10
 800c010:	bf8c      	ite	hi
 800c012:	2201      	movhi	r2, #1
 800c014:	2200      	movls	r2, #0
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	2a00      	cmp	r2, #0
 800c01a:	d12c      	bne.n	800c076 <CO_LEDs_process+0x1a6>
 800c01c:	2201      	movs	r2, #1
 800c01e:	fa02 f303 	lsl.w	r3, r2, r3
 800c022:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800c026:	2a00      	cmp	r2, #0
 800c028:	bf14      	ite	ne
 800c02a:	2201      	movne	r2, #1
 800c02c:	2200      	moveq	r2, #0
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	2a00      	cmp	r2, #0
 800c032:	d117      	bne.n	800c064 <CO_LEDs_process+0x194>
 800c034:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 800c038:	2a00      	cmp	r2, #0
 800c03a:	bf14      	ite	ne
 800c03c:	2201      	movne	r2, #1
 800c03e:	2200      	moveq	r2, #0
 800c040:	b2d2      	uxtb	r2, r2
 800c042:	2a00      	cmp	r2, #0
 800c044:	d109      	bne.n	800c05a <CO_LEDs_process+0x18a>
 800c046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bf14      	ite	ne
 800c04e:	2301      	movne	r3, #1
 800c050:	2300      	moveq	r3, #0
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 800c058:	e00d      	b.n	800c076 <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 800c05a:	7ffb      	ldrb	r3, [r7, #31]
 800c05c:	f043 0310 	orr.w	r3, r3, #16
 800c060:	77fb      	strb	r3, [r7, #31]
 800c062:	e009      	b.n	800c078 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 800c064:	7fbb      	ldrb	r3, [r7, #30]
 800c066:	f043 0310 	orr.w	r3, r3, #16
 800c06a:	77bb      	strb	r3, [r7, #30]
 800c06c:	e004      	b.n	800c078 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	71da      	strb	r2, [r3, #7]
 800c074:	e000      	b.n	800c078 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 800c076:	bf00      	nop
            }


            switch (++LEDs->LEDtmrflash_4)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	7a1b      	ldrb	r3, [r3, #8]
 800c07c:	3301      	adds	r3, #1
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	721a      	strb	r2, [r3, #8]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	7a1b      	ldrb	r3, [r3, #8]
 800c088:	2b0c      	cmp	r3, #12
 800c08a:	bf8c      	ite	hi
 800c08c:	2201      	movhi	r2, #1
 800c08e:	2200      	movls	r2, #0
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	2a00      	cmp	r2, #0
 800c094:	d137      	bne.n	800c106 <CO_LEDs_process+0x236>
 800c096:	2201      	movs	r2, #1
 800c098:	fa02 f303 	lsl.w	r3, r2, r3
 800c09c:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	bf14      	ite	ne
 800c0a4:	2201      	movne	r2, #1
 800c0a6:	2200      	moveq	r2, #0
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	d117      	bne.n	800c0de <CO_LEDs_process+0x20e>
 800c0ae:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	bf14      	ite	ne
 800c0b6:	2201      	movne	r2, #1
 800c0b8:	2200      	moveq	r2, #0
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d109      	bne.n	800c0d4 <CO_LEDs_process+0x204>
 800c0c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bf14      	ite	ne
 800c0c8:	2301      	movne	r3, #1
 800c0ca:	2300      	moveq	r3, #0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10a      	bne.n	800c0e8 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 800c0d2:	e018      	b.n	800c106 <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 800c0d4:	7ffb      	ldrb	r3, [r7, #31]
 800c0d6:	f043 0320 	orr.w	r3, r3, #32
 800c0da:	77fb      	strb	r3, [r7, #31]
 800c0dc:	e014      	b.n	800c108 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 800c0de:	7fbb      	ldrb	r3, [r7, #30]
 800c0e0:	f043 0320 	orr.w	r3, r3, #32
 800c0e4:	77bb      	strb	r3, [r7, #30]
 800c0e6:	e00f      	b.n	800c108 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	721a      	strb	r2, [r3, #8]
 800c0ee:	e00b      	b.n	800c108 <CO_LEDs_process+0x238>
            }


        } else 	{
					/* clear flicker and CANopen bits, keep others */
					rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	7a5b      	ldrb	r3, [r3, #9]
 800c0f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c0f8:	77fb      	strb	r3, [r7, #31]
					gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	7a9b      	ldrb	r3, [r3, #10]
 800c0fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c102:	77bb      	strb	r3, [r7, #30]
 800c104:	e000      	b.n	800c108 <CO_LEDs_process+0x238>
                default: /* none */ break;
 800c106:	bf00      	nop
				}


        /* calculate 10Hz flickering */
        if (rdFlickerNext)
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <CO_LEDs_process+0x248>
        {
            rd |= CO_LED_flicker;
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	77fb      	strb	r3, [r7, #31]
 800c116:	e003      	b.n	800c120 <CO_LEDs_process+0x250>
        } else 	{
            	gr |= CO_LED_flicker;
 800c118:	7fbb      	ldrb	r3, [r7, #30]
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800c128:	4293      	cmp	r3, r2
 800c12a:	f63f aee6 	bhi.w	800befa <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */



    if (tick) {
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d077      	beq.n	800c224 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <CO_LEDs_process+0x270>
            rd_co = 1;
 800c13a:	2301      	movs	r3, #1
 800c13c:	75fb      	strb	r3, [r7, #23]
 800c13e:	e032      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 800c140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d104      	bne.n	800c152 <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 800c148:	7ffb      	ldrb	r3, [r7, #31]
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	75fb      	strb	r3, [r7, #23]
 800c150:	e029      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 800c158:	7ffb      	ldrb	r3, [r7, #31]
 800c15a:	f003 0320 	and.w	r3, r3, #32
 800c15e:	75fb      	strb	r3, [r7, #23]
 800c160:	e021      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 800c168:	7ffb      	ldrb	r3, [r7, #31]
 800c16a:	f003 0310 	and.w	r3, r3, #16
 800c16e:	75fb      	strb	r3, [r7, #23]
 800c170:	e019      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	2b00      	cmp	r3, #0
 800c176:	d004      	beq.n	800c182 <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 800c178:	7ffb      	ldrb	r3, [r7, #31]
 800c17a:	f003 0308 	and.w	r3, r3, #8
 800c17e:	75fb      	strb	r3, [r7, #23]
 800c180:	e011      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d004      	beq.n	800c192 <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 800c188:	7ffb      	ldrb	r3, [r7, #31]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	75fb      	strb	r3, [r7, #23]
 800c190:	e009      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 800c192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 800c198:	7ffb      	ldrb	r3, [r7, #31]
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	75fb      	strb	r3, [r7, #23]
 800c1a0:	e001      	b.n	800c1a6 <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 800c1ac:	7fbb      	ldrb	r3, [r7, #30]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	75bb      	strb	r3, [r7, #22]
 800c1b4:	e022      	b.n	800c1fc <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 800c1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d004      	beq.n	800c1c6 <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 800c1bc:	7fbb      	ldrb	r3, [r7, #30]
 800c1be:	f003 0310 	and.w	r3, r3, #16
 800c1c2:	75bb      	strb	r3, [r7, #22]
 800c1c4:	e01a      	b.n	800c1fc <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 800c1c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d104      	bne.n	800c1d8 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 800c1ce:	7fbb      	ldrb	r3, [r7, #30]
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	75bb      	strb	r3, [r7, #22]
 800c1d6:	e011      	b.n	800c1fc <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 800c1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1dc:	2b7f      	cmp	r3, #127	; 0x7f
 800c1de:	d104      	bne.n	800c1ea <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 800c1e0:	7fbb      	ldrb	r3, [r7, #30]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	75bb      	strb	r3, [r7, #22]
 800c1e8:	e008      	b.n	800c1fc <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 800c1ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ee:	2b05      	cmp	r3, #5
 800c1f0:	d102      	bne.n	800c1f8 <CO_LEDs_process+0x328>
            gr_co = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	75bb      	strb	r3, [r7, #22]
 800c1f6:	e001      	b.n	800c1fc <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 800c202:	7ffb      	ldrb	r3, [r7, #31]
 800c204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c208:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 800c20a:	7dbb      	ldrb	r3, [r7, #22]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 800c210:	7fbb      	ldrb	r3, [r7, #30]
 800c212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c216:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	7ffa      	ldrb	r2, [r7, #31]
 800c21c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	7fba      	ldrb	r2, [r7, #30]
 800c222:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 800c224:	bf00      	nop
 800c226:	3724      	adds	r7, #36	; 0x24
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <CO_getUint32>:
CO_getUint32(const void* buf) {
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 800c23c:	60fb      	str	r3, [r7, #12]
    return value;
 800c23e:	68fb      	ldr	r3, [r7, #12]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <CO_setUint16>:
CO_setUint16(void* buf, uint16_t value) {
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	807b      	strh	r3, [r7, #2]
 800c258:	887a      	ldrh	r2, [r7, #2]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	801a      	strh	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800c25e:	2302      	movs	r3, #2
}
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
 800c276:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800c27c:	2304      	movs	r3, #4
}
 800c27e:	4618      	mov	r0, r3
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <CO_LSSmaster_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSmaster_receive(void* object, void* msg) {
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b086      	sub	sp, #24
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_t* LSSmaster;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	791b      	ldrb	r3, [r3, #4]
 800c298:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	3305      	adds	r3, #5
 800c29e:	613b      	str	r3, [r7, #16]

    LSSmaster = (CO_LSSmaster_t*)object; /* this is the correct pointer type of the first argument */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	60fb      	str	r3, [r7, #12]

    /* verify message length and message overflow (previous message was not processed yet). */
    if ((DLC == 8U) && !CO_FLAG_READ(LSSmaster->CANrxNew) && (LSSmaster->command != CO_LSSmaster_COMMAND_WAITING)) {
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	2b08      	cmp	r3, #8
 800c2a8:	d111      	bne.n	800c2ce <CO_LSSmaster_receive+0x44>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10d      	bne.n	800c2ce <CO_LSSmaster_receive+0x44>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	795b      	ldrb	r3, [r3, #5]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <CO_LSSmaster_receive+0x44>

        /* copy data and set 'new message' flag */
        (void)memcpy(LSSmaster->CANrxData, data, sizeof(LSSmaster->CANrxData));
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3318      	adds	r3, #24
 800c2be:	2208      	movs	r2, #8
 800c2c0:	6939      	ldr	r1, [r7, #16]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f013 fa56 	bl	801f774 <memcpy>

        CO_FLAG_SET(LSSmaster->CANrxNew);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	615a      	str	r2, [r3, #20]
        if (LSSmaster->pFunctSignal != NULL) {
            LSSmaster->pFunctSignal(LSSmaster->functSignalObject);
        }
#endif
    }
}
 800c2ce:	bf00      	nop
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <CO_LSSmaster_check_timeout>:
 *
 * Generally, we do not really care if the message has been received before or after the timeout
 * expired. Only if no message has been received we have to check for timeouts.
 */
static inline CO_LSSmaster_return_t
CO_LSSmaster_check_timeout(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c2d6:	b480      	push	{r7}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret = CO_LSSmaster_WAIT_SLAVE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]

    LSSmaster->timeoutTimer += timeDifference_us;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	441a      	add	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	609a      	str	r2, [r3, #8]
    if (LSSmaster->timeoutTimer >= LSSmaster->timeout_us) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d304      	bcc.n	800c306 <CO_LSSmaster_check_timeout+0x30>
        LSSmaster->timeoutTimer = 0;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	609a      	str	r2, [r3, #8]
        ret = CO_LSSmaster_TIMEOUT;
 800c302:	23ff      	movs	r3, #255	; 0xff
 800c304:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800c306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
	...

0800c318 <CO_LSSmaster_init>:

CO_ReturnError_t
CO_LSSmaster_init(CO_LSSmaster_t* LSSmaster, uint16_t timeout_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
                  uint16_t CANidLssSlave, CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssMaster) {
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af04      	add	r7, sp, #16
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	607a      	str	r2, [r7, #4]
 800c322:	461a      	mov	r2, r3
 800c324:	460b      	mov	r3, r1
 800c326:	817b      	strh	r3, [r7, #10]
 800c328:	4613      	mov	r3, r2
 800c32a:	813b      	strh	r3, [r7, #8]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800c32c:	2300      	movs	r3, #0
 800c32e:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSmaster == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d005      	beq.n	800c342 <CO_LSSmaster_init+0x2a>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <CO_LSSmaster_init+0x2a>
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d102      	bne.n	800c348 <CO_LSSmaster_init+0x30>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800c342:	f04f 33ff 	mov.w	r3, #4294967295
 800c346:	e040      	b.n	800c3ca <CO_LSSmaster_init+0xb2>
    }

    LSSmaster->timeout_us = (uint32_t)timeout_ms * 1000U;
 800c348:	897b      	ldrh	r3, [r7, #10]
 800c34a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c34e:	fb03 f202 	mul.w	r2, r3, r2
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	601a      	str	r2, [r3, #0]
    LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	711a      	strb	r2, [r3, #4]
    LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	715a      	strb	r2, [r3, #5]
    LSSmaster->timeoutTimer = 0;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	609a      	str	r2, [r3, #8]
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	615a      	str	r2, [r3, #20]
    (void)memset(LSSmaster->CANrxData, 0, sizeof(LSSmaster->CANrxData));
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3318      	adds	r3, #24
 800c372:	2208      	movs	r2, #8
 800c374:	2100      	movs	r1, #0
 800c376:	4618      	mov	r0, r3
 800c378:	f013 f960 	bl	801f63c <memset>
    LSSmaster->pFunctSignal = NULL;
    LSSmaster->functSignalObject = NULL;
#endif

    /* configure LSS CAN Slave response message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssSlave, 0x7FF, false, (void*)LSSmaster,
 800c37c:	8c3a      	ldrh	r2, [r7, #32]
 800c37e:	8939      	ldrh	r1, [r7, #8]
 800c380:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <CO_LSSmaster_init+0xbc>)
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	2300      	movs	r3, #0
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f006 fcd9 	bl	8012d48 <CO_CANrxBufferInit>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]
                             CO_LSSmaster_receive);

    /* configure LSS CAN Master message transmission */
    LSSmaster->CANdevTx = CANdevTx;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39e:	621a      	str	r2, [r3, #32]
    LSSmaster->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssMaster, false, 8, false);
 800c3a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c3a2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3b0:	f006 fd28 	bl	8012e04 <CO_CANtxBufferInit>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	625a      	str	r2, [r3, #36]	; 0x24

    if (LSSmaster->TXbuff == NULL) {
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <CO_LSSmaster_init+0xae>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800c3c2:	23ff      	movs	r3, #255	; 0xff
 800c3c4:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800c3c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	0800c28b 	.word	0x0800c28b

0800c3d8 <CO_LSSmaster_changeTimeout>:

void
CO_LSSmaster_changeTimeout(CO_LSSmaster_t* LSSmaster, uint16_t timeout_ms) {
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	807b      	strh	r3, [r7, #2]
    if (LSSmaster != NULL) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d006      	beq.n	800c3f8 <CO_LSSmaster_changeTimeout+0x20>
        LSSmaster->timeout_us = (uint32_t)timeout_ms * 1000U;
 800c3ea:	887b      	ldrh	r3, [r7, #2]
 800c3ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3f0:	fb03 f202 	mul.w	r2, r3, r2
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]
    }
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <CO_LSSmaster_switchStateSelectInitiate>:

/*
 * Helper function - initiate switch state
 */
static CO_LSSmaster_return_t
CO_LSSmaster_switchStateSelectInitiate(CO_LSSmaster_t* LSSmaster, CO_LSS_address_t* lssAddress) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    if (lssAddress != NULL) {
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d06a      	beq.n	800c4ea <CO_LSSmaster_switchStateSelectInitiate+0xe6>
        /* switch state select specific using LSS address */
        LSSmaster->state = CO_LSSmaster_STATE_CFG_SLECTIVE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	711a      	strb	r2, [r3, #4]
        LSSmaster->command = CO_LSSmaster_COMMAND_SWITCH_STATE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	615a      	str	r2, [r3, #20]
        (void)memset(&LSSmaster->TXbuff->data[6], 0, sizeof(LSSmaster->TXbuff->data) - 6U);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	330b      	adds	r3, #11
 800c432:	2202      	movs	r2, #2
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f013 f900 	bl	801f63c <memset>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_VENDOR;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2240      	movs	r2, #64	; 0x40
 800c442:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.vendorID);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	1d9a      	adds	r2, r3, #6
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7ff ff0b 	bl	800c26c <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1a      	ldr	r2, [r3, #32]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45e:	4619      	mov	r1, r3
 800c460:	4610      	mov	r0, r2
 800c462:	f006 fd49 	bl	8012ef8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_PRODUCT;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	2241      	movs	r2, #65	; 0x41
 800c46c:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.productCode);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c472:	1d9a      	adds	r2, r3, #6
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4619      	mov	r1, r3
 800c47a:	4610      	mov	r0, r2
 800c47c:	f7ff fef6 	bl	800c26c <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a1a      	ldr	r2, [r3, #32]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f006 fd34 	bl	8012ef8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_REV;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	2242      	movs	r2, #66	; 0x42
 800c496:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.revisionNumber);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	1d9a      	adds	r2, r3, #6
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7ff fee1 	bl	800c26c <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a1a      	ldr	r2, [r3, #32]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	f006 fd1f 	bl	8012ef8 <CO_CANsend>
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL_SERIAL;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4be:	2243      	movs	r2, #67	; 0x43
 800c4c0:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint32(&LSSmaster->TXbuff->data[1], lssAddress->identity.serialNumber);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	1d9a      	adds	r2, r3, #6
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	f7ff fecc 	bl	800c26c <CO_setUint32>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a1a      	ldr	r2, [r3, #32]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f006 fd0a 	bl	8012ef8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	e01f      	b.n	800c52a <CO_LSSmaster_switchStateSelectInitiate+0x126>
    } else {
        /* switch state global */
        LSSmaster->state = CO_LSSmaster_STATE_CFG_GLOBAL;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	711a      	strb	r2, [r3, #4]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_GLOBAL;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	2204      	movs	r2, #4
 800c4fc:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = CO_LSS_STATE_CONFIGURATION;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	2201      	movs	r2, #1
 800c504:	719a      	strb	r2, [r3, #6]
        (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50a:	3307      	adds	r3, #7
 800c50c:	2206      	movs	r2, #6
 800c50e:	2100      	movs	r1, #0
 800c510:	4618      	mov	r0, r3
 800c512:	f013 f893 	bl	801f63c <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1a      	ldr	r2, [r3, #32]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	4619      	mov	r1, r3
 800c520:	4610      	mov	r0, r2
 800c522:	f006 fce9 	bl	8012ef8 <CO_CANsend>

        /* This is non-confirmed service! */
        ret = CO_LSSmaster_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800c52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <CO_LSSmaster_switchStateSelectWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_switchStateSelectWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d012      	beq.n	800c56e <CO_LSSmaster_switchStateSelectWait+0x38>
        uint8_t cs = LSSmaster->CANrxData[0];
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	7e1b      	ldrb	r3, [r3, #24]
 800c54c:	73bb      	strb	r3, [r7, #14]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	615a      	str	r2, [r3, #20]

        if (cs == CO_LSS_SWITCH_STATE_SEL) {
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b44      	cmp	r3, #68	; 0x44
 800c558:	d102      	bne.n	800c560 <CO_LSSmaster_switchStateSelectWait+0x2a>
            /* confirmation received */
            ret = CO_LSSmaster_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	e00c      	b.n	800c57a <CO_LSSmaster_switchStateSelectWait+0x44>
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff feb7 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]
 800c56c:	e005      	b.n	800c57a <CO_LSSmaster_switchStateSelectWait+0x44>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff feb0 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <CO_LSSmaster_swStateSelect>:

CO_LSSmaster_return_t
CO_LSSmaster_swStateSelect(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSS_address_t* lssAddress) {
 800c586:	b580      	push	{r7, lr}
 800c588:	b086      	sub	sp, #24
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c592:	23fd      	movs	r3, #253	; 0xfd
 800c594:	75fb      	strb	r3, [r7, #23]

    if (LSSmaster == NULL) {
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <CO_LSSmaster_swStateSelect+0x1c>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c59c:	f06f 0301 	mvn.w	r3, #1
 800c5a0:	e030      	b.n	800c604 <CO_LSSmaster_swStateSelect+0x7e>
    }

    /* Initiate select */
    if ((LSSmaster->state == CO_LSSmaster_STATE_WAITING) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	791b      	ldrb	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10a      	bne.n	800c5c0 <CO_LSSmaster_swStateSelect+0x3a>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	795b      	ldrb	r3, [r3, #5]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <CO_LSSmaster_swStateSelect+0x3a>

        ret = CO_LSSmaster_switchStateSelectInitiate(LSSmaster, lssAddress);
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff ff25 	bl	800c404 <CO_LSSmaster_switchStateSelectInitiate>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
 800c5be:	e009      	b.n	800c5d4 <CO_LSSmaster_swStateSelect+0x4e>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_SWITCH_STATE) {
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	795b      	ldrb	r3, [r3, #5]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d105      	bne.n	800c5d4 <CO_LSSmaster_swStateSelect+0x4e>
        ret = CO_LSSmaster_switchStateSelectWait(LSSmaster, timeDifference_us);
 800c5c8:	68b9      	ldr	r1, [r7, #8]
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff ffb3 	bl	800c536 <CO_LSSmaster_switchStateSelectWait>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5d8:	f113 0f03 	cmn.w	r3, #3
 800c5dc:	d006      	beq.n	800c5ec <CO_LSSmaster_swStateSelect+0x66>
 800c5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d002      	beq.n	800c5ec <CO_LSSmaster_swStateSelect+0x66>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	715a      	strb	r2, [r3, #5]
    }
    if (ret < CO_LSSmaster_OK) {
 800c5ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	da05      	bge.n	800c600 <CO_LSSmaster_swStateSelect+0x7a>
        /* switching failed, go back to waiting */
        LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	711a      	strb	r2, [r3, #4]
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <CO_LSSmaster_swStateDeselect>:

CO_LSSmaster_return_t
CO_LSSmaster_swStateDeselect(CO_LSSmaster_t* LSSmaster) {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c614:	23fd      	movs	r3, #253	; 0xfd
 800c616:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <CO_LSSmaster_swStateDeselect+0x18>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c61e:	f06f 0301 	mvn.w	r3, #1
 800c622:	e027      	b.n	800c674 <CO_LSSmaster_swStateDeselect+0x68>
    }

    /* We can always send this command to get into a clean state on the network.
     * If no slave is selected, this command is ignored. */
    LSSmaster->state = CO_LSSmaster_STATE_WAITING;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	711a      	strb	r2, [r3, #4]
    LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	715a      	strb	r2, [r3, #5]
    LSSmaster->timeoutTimer = 0;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	609a      	str	r2, [r3, #8]

    /* switch state global */
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = CO_LSS_SWITCH_STATE_GLOBAL;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	2204      	movs	r2, #4
 800c642:	715a      	strb	r2, [r3, #5]
    LSSmaster->TXbuff->data[1] = CO_LSS_STATE_WAITING;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c648:	2200      	movs	r2, #0
 800c64a:	719a      	strb	r2, [r3, #6]
    (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	3307      	adds	r3, #7
 800c652:	2206      	movs	r2, #6
 800c654:	2100      	movs	r1, #0
 800c656:	4618      	mov	r0, r3
 800c658:	f012 fff0 	bl	801f63c <memset>
    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a1a      	ldr	r2, [r3, #32]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f006 fc46 	bl	8012ef8 <CO_CANsend>

    /* This is non-confirmed service! */
    ret = CO_LSSmaster_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73fb      	strb	r3, [r7, #15]

    return ret;
 800c670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <CO_LSSmaster_configureCheckWait>:
 * - CO_LSS_CFG_NODE_ID_status
 * - CO_LSS_CFG_BIT_TIMING
 * - CO_LSS_CFG_STORE_status
 */
static CO_LSSmaster_return_t
CO_LSSmaster_configureCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t csWait) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d022      	beq.n	800c6d8 <CO_LSSmaster_configureCheckWait+0x5c>
        uint8_t cs = LSSmaster->CANrxData[0];
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	7e1b      	ldrb	r3, [r3, #24]
 800c696:	75bb      	strb	r3, [r7, #22]
        uint8_t errorCode = LSSmaster->CANrxData[1];
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	7e5b      	ldrb	r3, [r3, #25]
 800c69c:	757b      	strb	r3, [r7, #21]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	615a      	str	r2, [r3, #20]

        if (cs == csWait) {
 800c6a4:	7dba      	ldrb	r2, [r7, #22]
 800c6a6:	79fb      	ldrb	r3, [r7, #7]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d10e      	bne.n	800c6ca <CO_LSSmaster_configureCheckWait+0x4e>
            if (errorCode == 0U) {
 800c6ac:	7d7b      	ldrb	r3, [r7, #21]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d102      	bne.n	800c6b8 <CO_LSSmaster_configureCheckWait+0x3c>
                ret = CO_LSSmaster_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	75fb      	strb	r3, [r7, #23]
 800c6b6:	e015      	b.n	800c6e4 <CO_LSSmaster_configureCheckWait+0x68>
            } else if (errorCode == 0xFFU) {
 800c6b8:	7d7b      	ldrb	r3, [r7, #21]
 800c6ba:	2bff      	cmp	r3, #255	; 0xff
 800c6bc:	d102      	bne.n	800c6c4 <CO_LSSmaster_configureCheckWait+0x48>
                ret = CO_LSSmaster_OK_MANUFACTURER;
 800c6be:	239a      	movs	r3, #154	; 0x9a
 800c6c0:	75fb      	strb	r3, [r7, #23]
 800c6c2:	e00f      	b.n	800c6e4 <CO_LSSmaster_configureCheckWait+0x68>
            } else {
                ret = CO_LSSmaster_OK_ILLEGAL_ARGUMENT;
 800c6c4:	239b      	movs	r3, #155	; 0x9b
 800c6c6:	75fb      	strb	r3, [r7, #23]
 800c6c8:	e00c      	b.n	800c6e4 <CO_LSSmaster_configureCheckWait+0x68>
            }
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff fe02 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]
 800c6d6:	e005      	b.n	800c6e4 <CO_LSSmaster_configureCheckWait+0x68>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800c6d8:	68b9      	ldr	r1, [r7, #8]
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f7ff fdfb 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c6e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6e8:	f113 0f03 	cmn.w	r3, #3
 800c6ec:	d006      	beq.n	800c6fc <CO_LSSmaster_configureCheckWait+0x80>
 800c6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d002      	beq.n	800c6fc <CO_LSSmaster_configureCheckWait+0x80>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c6fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <CO_LSSmaster_configureBitTiming>:

CO_LSSmaster_return_t
CO_LSSmaster_configureBitTiming(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint16_t bit) {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	80fb      	strh	r3, [r7, #6]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c716:	23fd      	movs	r3, #253	; 0xfd
 800c718:	75fb      	strb	r3, [r7, #23]
    uint8_t bitTiming;

    if (LSSmaster == NULL) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <CO_LSSmaster_configureBitTiming+0x1e>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c720:	f06f 0301 	mvn.w	r3, #1
 800c724:	e08e      	b.n	800c844 <CO_LSSmaster_configureBitTiming+0x13c>
    }

    switch (bit) {
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c72c:	d023      	beq.n	800c776 <CO_LSSmaster_configureBitTiming+0x6e>
 800c72e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c732:	dc3b      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c734:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c738:	d020      	beq.n	800c77c <CO_LSSmaster_configureBitTiming+0x74>
 800c73a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c73e:	dc35      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c740:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c744:	d01d      	beq.n	800c782 <CO_LSSmaster_configureBitTiming+0x7a>
 800c746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c74a:	dc2f      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c74c:	2bfa      	cmp	r3, #250	; 0xfa
 800c74e:	d01b      	beq.n	800c788 <CO_LSSmaster_configureBitTiming+0x80>
 800c750:	2bfa      	cmp	r3, #250	; 0xfa
 800c752:	dc2b      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c754:	2b7d      	cmp	r3, #125	; 0x7d
 800c756:	d01a      	beq.n	800c78e <CO_LSSmaster_configureBitTiming+0x86>
 800c758:	2b7d      	cmp	r3, #125	; 0x7d
 800c75a:	dc27      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c75c:	2b32      	cmp	r3, #50	; 0x32
 800c75e:	d019      	beq.n	800c794 <CO_LSSmaster_configureBitTiming+0x8c>
 800c760:	2b32      	cmp	r3, #50	; 0x32
 800c762:	dc23      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c764:	2b14      	cmp	r3, #20
 800c766:	d018      	beq.n	800c79a <CO_LSSmaster_configureBitTiming+0x92>
 800c768:	2b14      	cmp	r3, #20
 800c76a:	dc1f      	bgt.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01a      	beq.n	800c7a6 <CO_LSSmaster_configureBitTiming+0x9e>
 800c770:	2b0a      	cmp	r3, #10
 800c772:	d015      	beq.n	800c7a0 <CO_LSSmaster_configureBitTiming+0x98>
 800c774:	e01a      	b.n	800c7ac <CO_LSSmaster_configureBitTiming+0xa4>
        case 1000: bitTiming = CO_LSS_BIT_TIMING_1000; break;
 800c776:	2300      	movs	r3, #0
 800c778:	75bb      	strb	r3, [r7, #22]
 800c77a:	e01a      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 800: bitTiming = CO_LSS_BIT_TIMING_800; break;
 800c77c:	2301      	movs	r3, #1
 800c77e:	75bb      	strb	r3, [r7, #22]
 800c780:	e017      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 500: bitTiming = CO_LSS_BIT_TIMING_500; break;
 800c782:	2302      	movs	r3, #2
 800c784:	75bb      	strb	r3, [r7, #22]
 800c786:	e014      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 250: bitTiming = CO_LSS_BIT_TIMING_250; break;
 800c788:	2303      	movs	r3, #3
 800c78a:	75bb      	strb	r3, [r7, #22]
 800c78c:	e011      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 125: bitTiming = CO_LSS_BIT_TIMING_125; break;
 800c78e:	2304      	movs	r3, #4
 800c790:	75bb      	strb	r3, [r7, #22]
 800c792:	e00e      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 50: bitTiming = CO_LSS_BIT_TIMING_50; break;
 800c794:	2306      	movs	r3, #6
 800c796:	75bb      	strb	r3, [r7, #22]
 800c798:	e00b      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 20: bitTiming = CO_LSS_BIT_TIMING_20; break;
 800c79a:	2307      	movs	r3, #7
 800c79c:	75bb      	strb	r3, [r7, #22]
 800c79e:	e008      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 10: bitTiming = CO_LSS_BIT_TIMING_10; break;
 800c7a0:	2308      	movs	r3, #8
 800c7a2:	75bb      	strb	r3, [r7, #22]
 800c7a4:	e005      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        case 0: bitTiming = CO_LSS_BIT_TIMING_AUTO; break;
 800c7a6:	2309      	movs	r3, #9
 800c7a8:	75bb      	strb	r3, [r7, #22]
 800c7aa:	e002      	b.n	800c7b2 <CO_LSSmaster_configureBitTiming+0xaa>
        default: return CO_LSSmaster_ILLEGAL_ARGUMENT; break;
 800c7ac:	f06f 0301 	mvn.w	r3, #1
 800c7b0:	e048      	b.n	800c844 <CO_LSSmaster_configureBitTiming+0x13c>
    }

    /* Initiate config bit */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	791b      	ldrb	r3, [r3, #4]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d12b      	bne.n	800c812 <CO_LSSmaster_configureBitTiming+0x10a>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	795b      	ldrb	r3, [r3, #5]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d127      	bne.n	800c812 <CO_LSSmaster_configureBitTiming+0x10a>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_BIT_TIMING;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_BIT_TIMING;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d8:	2213      	movs	r2, #19
 800c7da:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = 0;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	719a      	strb	r2, [r3, #6]
        LSSmaster->TXbuff->data[2] = bitTiming;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	7dba      	ldrb	r2, [r7, #22]
 800c7ea:	71da      	strb	r2, [r3, #7]
        (void)memset(&LSSmaster->TXbuff->data[3], 0, sizeof(LSSmaster->TXbuff->data) - 3U);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f012 ff20 	bl	801f63c <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6a1a      	ldr	r2, [r3, #32]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f006 fb76 	bl	8012ef8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c80c:	2301      	movs	r3, #1
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	e00a      	b.n	800c828 <CO_LSSmaster_configureBitTiming+0x120>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_BIT_TIMING) {
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	795b      	ldrb	r3, [r3, #5]
 800c816:	2b02      	cmp	r3, #2
 800c818:	d106      	bne.n	800c828 <CO_LSSmaster_configureBitTiming+0x120>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_BIT_TIMING);
 800c81a:	2213      	movs	r2, #19
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7ff ff2c 	bl	800c67c <CO_LSSmaster_configureCheckWait>
 800c824:	4603      	mov	r3, r0
 800c826:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c82c:	f113 0f03 	cmn.w	r3, #3
 800c830:	d006      	beq.n	800c840 <CO_LSSmaster_configureBitTiming+0x138>
 800c832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d002      	beq.n	800c840 <CO_LSSmaster_configureBitTiming+0x138>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c840:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <CO_LSSmaster_configureNodeId>:

CO_LSSmaster_return_t
CO_LSSmaster_configureNodeId(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t nodeId) {
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c85a:	23fd      	movs	r3, #253	; 0xfd
 800c85c:	75fb      	strb	r3, [r7, #23]

    if ((LSSmaster == NULL) || !CO_LSS_NODE_ID_VALID(nodeId)) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d009      	beq.n	800c878 <CO_LSSmaster_configureNodeId+0x2c>
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <CO_LSSmaster_configureNodeId+0x26>
 800c86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da05      	bge.n	800c87e <CO_LSSmaster_configureNodeId+0x32>
 800c872:	79fb      	ldrb	r3, [r7, #7]
 800c874:	2bff      	cmp	r3, #255	; 0xff
 800c876:	d002      	beq.n	800c87e <CO_LSSmaster_configureNodeId+0x32>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c878:	f06f 0301 	mvn.w	r3, #1
 800c87c:	e04b      	b.n	800c916 <CO_LSSmaster_configureNodeId+0xca>
    }

    /* Initiate config node ID */
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) ||
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	791b      	ldrb	r3, [r3, #4]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d006      	beq.n	800c894 <CO_LSSmaster_configureNodeId+0x48>
         /* Let un-config node ID also be run in global mode for unconfiguring all nodes */
         ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	791b      	ldrb	r3, [r3, #4]
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) ||
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d12a      	bne.n	800c8e4 <CO_LSSmaster_configureNodeId+0x98>
         ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)))
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	2bff      	cmp	r3, #255	; 0xff
 800c892:	d127      	bne.n	800c8e4 <CO_LSSmaster_configureNodeId+0x98>
        && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	795b      	ldrb	r3, [r3, #5]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d123      	bne.n	800c8e4 <CO_LSSmaster_configureNodeId+0x98>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_NODE_ID;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2203      	movs	r2, #3
 800c8a0:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_NODE_ID;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b2:	2211      	movs	r2, #17
 800c8b4:	715a      	strb	r2, [r3, #5]
        LSSmaster->TXbuff->data[1] = nodeId;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ba:	79fa      	ldrb	r2, [r7, #7]
 800c8bc:	719a      	strb	r2, [r3, #6]
        (void)memset(&LSSmaster->TXbuff->data[2], 0, sizeof(LSSmaster->TXbuff->data) - 2U);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	3307      	adds	r3, #7
 800c8c4:	2206      	movs	r2, #6
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f012 feb7 	bl	801f63c <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6a1a      	ldr	r2, [r3, #32]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f006 fb0d 	bl	8012ef8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	75fb      	strb	r3, [r7, #23]
 800c8e2:	e00a      	b.n	800c8fa <CO_LSSmaster_configureNodeId+0xae>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_NODE_ID) {
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	795b      	ldrb	r3, [r3, #5]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d106      	bne.n	800c8fa <CO_LSSmaster_configureNodeId+0xae>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_NODE_ID);
 800c8ec:	2211      	movs	r2, #17
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7ff fec3 	bl	800c67c <CO_LSSmaster_configureCheckWait>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8fe:	f113 0f03 	cmn.w	r3, #3
 800c902:	d006      	beq.n	800c912 <CO_LSSmaster_configureNodeId+0xc6>
 800c904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d002      	beq.n	800c912 <CO_LSSmaster_configureNodeId+0xc6>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <CO_LSSmaster_configureStore>:

CO_LSSmaster_return_t
CO_LSSmaster_configureStore(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c928:	23fd      	movs	r3, #253	; 0xfd
 800c92a:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d102      	bne.n	800c938 <CO_LSSmaster_configureStore+0x1a>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c932:	f06f 0301 	mvn.w	r3, #1
 800c936:	e040      	b.n	800c9ba <CO_LSSmaster_configureStore+0x9c>
    }

    /* Initiate config store */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	791b      	ldrb	r3, [r3, #4]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d123      	bne.n	800c988 <CO_LSSmaster_configureStore+0x6a>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	795b      	ldrb	r3, [r3, #5]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d11f      	bne.n	800c988 <CO_LSSmaster_configureStore+0x6a>

        LSSmaster->command = CO_LSSmaster_COMMAND_CFG_STORE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2204      	movs	r2, #4
 800c94c:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	609a      	str	r2, [r3, #8]

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_STORE;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	2217      	movs	r2, #23
 800c960:	715a      	strb	r2, [r3, #5]
        (void)memset(&LSSmaster->TXbuff->data[1], 0, sizeof(LSSmaster->TXbuff->data) - 1U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c966:	3306      	adds	r3, #6
 800c968:	2207      	movs	r2, #7
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f012 fe65 	bl	801f63c <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1a      	ldr	r2, [r3, #32]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	f006 fabb 	bl	8012ef8 <CO_CANsend>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800c982:	2301      	movs	r3, #1
 800c984:	73fb      	strb	r3, [r7, #15]
 800c986:	e00a      	b.n	800c99e <CO_LSSmaster_configureStore+0x80>
    }
    /* Wait for confirmation */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_CFG_STORE) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	795b      	ldrb	r3, [r3, #5]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d106      	bne.n	800c99e <CO_LSSmaster_configureStore+0x80>

        ret = CO_LSSmaster_configureCheckWait(LSSmaster, timeDifference_us, CO_LSS_CFG_STORE);
 800c990:	2217      	movs	r2, #23
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff fe71 	bl	800c67c <CO_LSSmaster_configureCheckWait>
 800c99a:	4603      	mov	r3, r0
 800c99c:	73fb      	strb	r3, [r7, #15]
    } else { /* MISRA C 2004 14.10 */
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800c99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a2:	f113 0f03 	cmn.w	r3, #3
 800c9a6:	d006      	beq.n	800c9b6 <CO_LSSmaster_configureStore+0x98>
 800c9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d002      	beq.n	800c9b6 <CO_LSSmaster_configureStore+0x98>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800c9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <CO_LSSmaster_ActivateBit>:

CO_LSSmaster_return_t
CO_LSSmaster_ActivateBit(CO_LSSmaster_t* LSSmaster, uint16_t switchDelay_ms) {
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	807b      	strh	r3, [r7, #2]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800c9ce:	23fd      	movs	r3, #253	; 0xfd
 800c9d0:	73fb      	strb	r3, [r7, #15]

    if (LSSmaster == NULL) {
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <CO_LSSmaster_ActivateBit+0x1c>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800c9d8:	f06f 0301 	mvn.w	r3, #1
 800c9dc:	e02a      	b.n	800ca34 <CO_LSSmaster_ActivateBit+0x72>
    }

    /* for activating bit timing, we need to have all slaves set to config
     * state. This check makes it a bit harder to shoot ourselves in the foot */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL) && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	791b      	ldrb	r3, [r3, #4]
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d124      	bne.n	800ca30 <CO_LSSmaster_ActivateBit+0x6e>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	795b      	ldrb	r3, [r3, #5]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d120      	bne.n	800ca30 <CO_LSSmaster_ActivateBit+0x6e>

        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	615a      	str	r2, [r3, #20]
        LSSmaster->TXbuff->data[0] = CO_LSS_CFG_ACTIVATE_BIT_TIMING;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f8:	2215      	movs	r2, #21
 800c9fa:	715a      	strb	r2, [r3, #5]
        (void)CO_setUint16(&LSSmaster->TXbuff->data[1], switchDelay_ms);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	3306      	adds	r3, #6
 800ca02:	887a      	ldrh	r2, [r7, #2]
 800ca04:	4611      	mov	r1, r2
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff fc20 	bl	800c24c <CO_setUint16>
        (void)memset(&LSSmaster->TXbuff->data[3], 0, sizeof(LSSmaster->TXbuff->data) - 3U);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	3308      	adds	r3, #8
 800ca12:	2205      	movs	r2, #5
 800ca14:	2100      	movs	r1, #0
 800ca16:	4618      	mov	r0, r3
 800ca18:	f012 fe10 	bl	801f63c <memset>
        (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1a      	ldr	r2, [r3, #32]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	4619      	mov	r1, r3
 800ca26:	4610      	mov	r0, r2
 800ca28:	f006 fa66 	bl	8012ef8 <CO_CANsend>

        /* This is non-confirmed service! */
        ret = CO_LSSmaster_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800ca30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <CO_LSSmaster_inquireInitiate>:

/*
 * Helper function - send request
 */
static CO_LSSmaster_return_t
CO_LSSmaster_inquireInitiate(CO_LSSmaster_t* LSSmaster, uint8_t cs) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = cs;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca52:	78fa      	ldrb	r2, [r7, #3]
 800ca54:	715a      	strb	r2, [r3, #5]
    (void)memset(&LSSmaster->TXbuff->data[1], 0, sizeof(LSSmaster->TXbuff->data) - 1U);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	3306      	adds	r3, #6
 800ca5c:	2207      	movs	r2, #7
 800ca5e:	2100      	movs	r1, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f012 fdeb 	bl	801f63c <memset>
    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a1a      	ldr	r2, [r3, #32]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4610      	mov	r0, r2
 800ca72:	f006 fa41 	bl	8012ef8 <CO_CANsend>

    return CO_LSSmaster_WAIT_SLAVE;
 800ca76:	2301      	movs	r3, #1
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <CO_LSSmaster_inquireCheckWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_inquireCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t csWait, uint32_t* value) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01b      	beq.n	800cad0 <CO_LSSmaster_inquireCheckWait+0x50>
        uint8_t cs = LSSmaster->CANrxData[0];
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	7e1b      	ldrb	r3, [r3, #24]
 800ca9c:	75bb      	strb	r3, [r7, #22]
        *value = CO_getUint32(&LSSmaster->CANrxData[1]);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3319      	adds	r3, #25
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff fbc4 	bl	800c230 <CO_getUint32>
 800caa8:	4602      	mov	r2, r0
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	601a      	str	r2, [r3, #0]
        CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	615a      	str	r2, [r3, #20]

        if (cs == csWait) {
 800cab4:	7dba      	ldrb	r2, [r7, #22]
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d102      	bne.n	800cac2 <CO_LSSmaster_inquireCheckWait+0x42>
            ret = CO_LSSmaster_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	75fb      	strb	r3, [r7, #23]
 800cac0:	e00c      	b.n	800cadc <CO_LSSmaster_inquireCheckWait+0x5c>
        } else {
            ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800cac2:	68b9      	ldr	r1, [r7, #8]
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff fc06 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800caca:	4603      	mov	r3, r0
 800cacc:	75fb      	strb	r3, [r7, #23]
 800cace:	e005      	b.n	800cadc <CO_LSSmaster_inquireCheckWait+0x5c>
        }
    } else {
        ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7ff fbff 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800cad8:	4603      	mov	r3, r0
 800cada:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800cadc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <CO_LSSmaster_InquireLssAddress>:

CO_LSSmaster_return_t
CO_LSSmaster_InquireLssAddress(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSS_address_t* lssAddress) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800caf4:	23fd      	movs	r3, #253	; 0xfd
 800caf6:	75fb      	strb	r3, [r7, #23]
    uint8_t next = CO_LSSmaster_COMMAND_WAITING;
 800caf8:	2300      	movs	r3, #0
 800cafa:	75bb      	strb	r3, [r7, #22]

    if ((LSSmaster == NULL) || (lssAddress == NULL)) {
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <CO_LSSmaster_InquireLssAddress+0x20>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <CO_LSSmaster_InquireLssAddress+0x26>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cb08:	f06f 0301 	mvn.w	r3, #1
 800cb0c:	e0a3      	b.n	800cc56 <CO_LSSmaster_InquireLssAddress+0x16e>
    }

    /* Check for reply */
    if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_VENDOR) {
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	795b      	ldrb	r3, [r3, #5]
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	d110      	bne.n	800cb38 <CO_LSSmaster_InquireLssAddress+0x50>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_VENDOR,
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	225a      	movs	r2, #90	; 0x5a
 800cb1a:	68b9      	ldr	r1, [r7, #8]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff ffaf 	bl	800ca80 <CO_LSSmaster_inquireCheckWait>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.vendorID);
        if (ret == CO_LSSmaster_OK) {
 800cb26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d13d      	bne.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_PRODUCT;
 800cb2e:	2306      	movs	r3, #6
 800cb30:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800cb32:	2301      	movs	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]
 800cb36:	e038      	b.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_PRODUCT) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	795b      	ldrb	r3, [r3, #5]
 800cb3c:	2b06      	cmp	r3, #6
 800cb3e:	d111      	bne.n	800cb64 <CO_LSSmaster_InquireLssAddress+0x7c>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_PRODUCT,
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3304      	adds	r3, #4
 800cb44:	225b      	movs	r2, #91	; 0x5b
 800cb46:	68b9      	ldr	r1, [r7, #8]
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff ff99 	bl	800ca80 <CO_LSSmaster_inquireCheckWait>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.productCode);
        if (ret == CO_LSSmaster_OK) {
 800cb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d127      	bne.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_REV;
 800cb5a:	2307      	movs	r3, #7
 800cb5c:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
 800cb62:	e022      	b.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_REV) {
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	795b      	ldrb	r3, [r3, #5]
 800cb68:	2b07      	cmp	r3, #7
 800cb6a:	d111      	bne.n	800cb90 <CO_LSSmaster_InquireLssAddress+0xa8>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_REV,
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3308      	adds	r3, #8
 800cb70:	225c      	movs	r2, #92	; 0x5c
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff ff83 	bl	800ca80 <CO_LSSmaster_inquireCheckWait>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.revisionNumber);
        if (ret == CO_LSSmaster_OK) {
 800cb7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d111      	bne.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
            /* Start next request */
            next = CO_LSSmaster_COMMAND_INQUIRE_SERIAL;
 800cb86:	2308      	movs	r3, #8
 800cb88:	75bb      	strb	r3, [r7, #22]
            ret = CO_LSSmaster_WAIT_SLAVE;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	75fb      	strb	r3, [r7, #23]
 800cb8e:	e00c      	b.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>
        }
    } else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE_SERIAL) {
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	795b      	ldrb	r3, [r3, #5]
 800cb94:	2b08      	cmp	r3, #8
 800cb96:	d108      	bne.n	800cbaa <CO_LSSmaster_InquireLssAddress+0xc2>

        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, CO_LSS_INQUIRE_SERIAL,
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	330c      	adds	r3, #12
 800cb9c:	225d      	movs	r2, #93	; 0x5d
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff ff6d 	bl	800ca80 <CO_LSSmaster_inquireCheckWait>
 800cba6:	4603      	mov	r3, r0
 800cba8:	75fb      	strb	r3, [r7, #23]
                                            &lssAddress->identity.serialNumber);
    } else { /* MISRA C 2004 14.10 */
    }

    /* Check for next request */
    if ((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) || (LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL)) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	791b      	ldrb	r3, [r3, #4]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d003      	beq.n	800cbba <CO_LSSmaster_InquireLssAddress+0xd2>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	791b      	ldrb	r3, [r3, #4]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d13f      	bne.n	800cc3a <CO_LSSmaster_InquireLssAddress+0x152>
        if (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING) {
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	795b      	ldrb	r3, [r3, #5]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10c      	bne.n	800cbdc <CO_LSSmaster_InquireLssAddress+0xf4>

            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_VENDOR;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2205      	movs	r2, #5
 800cbc6:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_VENDOR);
 800cbce:	215a      	movs	r1, #90	; 0x5a
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff ff33 	bl	800ca3c <CO_LSSmaster_inquireInitiate>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	75fb      	strb	r3, [r7, #23]
 800cbda:	e02e      	b.n	800cc3a <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_PRODUCT) {
 800cbdc:	7dbb      	ldrb	r3, [r7, #22]
 800cbde:	2b06      	cmp	r3, #6
 800cbe0:	d10c      	bne.n	800cbfc <CO_LSSmaster_InquireLssAddress+0x114>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_PRODUCT;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2206      	movs	r2, #6
 800cbe6:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_PRODUCT);
 800cbee:	215b      	movs	r1, #91	; 0x5b
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff ff23 	bl	800ca3c <CO_LSSmaster_inquireInitiate>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	75fb      	strb	r3, [r7, #23]
 800cbfa:	e01e      	b.n	800cc3a <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_REV) {
 800cbfc:	7dbb      	ldrb	r3, [r7, #22]
 800cbfe:	2b07      	cmp	r3, #7
 800cc00:	d10c      	bne.n	800cc1c <CO_LSSmaster_InquireLssAddress+0x134>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_REV;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2207      	movs	r2, #7
 800cc06:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_REV);
 800cc0e:	215c      	movs	r1, #92	; 0x5c
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff ff13 	bl	800ca3c <CO_LSSmaster_inquireInitiate>
 800cc16:	4603      	mov	r3, r0
 800cc18:	75fb      	strb	r3, [r7, #23]
 800cc1a:	e00e      	b.n	800cc3a <CO_LSSmaster_InquireLssAddress+0x152>
        } else if (next == CO_LSSmaster_COMMAND_INQUIRE_SERIAL) {
 800cc1c:	7dbb      	ldrb	r3, [r7, #22]
 800cc1e:	2b08      	cmp	r3, #8
 800cc20:	d10b      	bne.n	800cc3a <CO_LSSmaster_InquireLssAddress+0x152>
            LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE_SERIAL;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2208      	movs	r2, #8
 800cc26:	715a      	strb	r2, [r3, #5]
            LSSmaster->timeoutTimer = 0;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]

            ret = CO_LSSmaster_inquireInitiate(LSSmaster, CO_LSS_INQUIRE_SERIAL);
 800cc2e:	215d      	movs	r1, #93	; 0x5d
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff ff03 	bl	800ca3c <CO_LSSmaster_inquireInitiate>
 800cc36:	4603      	mov	r3, r0
 800cc38:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if ((ret != CO_LSSmaster_INVALID_STATE) && (ret != CO_LSSmaster_WAIT_SLAVE)) {
 800cc3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc3e:	f113 0f03 	cmn.w	r3, #3
 800cc42:	d006      	beq.n	800cc52 <CO_LSSmaster_InquireLssAddress+0x16a>
 800cc44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d002      	beq.n	800cc52 <CO_LSSmaster_InquireLssAddress+0x16a>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800cc52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <CO_LSSmaster_Inquire>:

CO_LSSmaster_return_t
CO_LSSmaster_Inquire(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, uint8_t lssInquireCs, uint32_t* value) {
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b086      	sub	sp, #24
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	603b      	str	r3, [r7, #0]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800cc6e:	23fd      	movs	r3, #253	; 0xfd
 800cc70:	75fb      	strb	r3, [r7, #23]

    if ((LSSmaster == NULL) || (value == NULL)) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <CO_LSSmaster_Inquire+0x20>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <CO_LSSmaster_Inquire+0x26>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cc7e:	f06f 0301 	mvn.w	r3, #1
 800cc82:	e02e      	b.n	800cce2 <CO_LSSmaster_Inquire+0x84>
    }

    /* send request */
    if (((LSSmaster->state == CO_LSSmaster_STATE_CFG_SLECTIVE) || (LSSmaster->state == CO_LSSmaster_STATE_CFG_GLOBAL))
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	791b      	ldrb	r3, [r3, #4]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d003      	beq.n	800cc94 <CO_LSSmaster_Inquire+0x36>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	791b      	ldrb	r3, [r3, #4]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d111      	bne.n	800ccb8 <CO_LSSmaster_Inquire+0x5a>
        && (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING)) {
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	795b      	ldrb	r3, [r3, #5]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10d      	bne.n	800ccb8 <CO_LSSmaster_Inquire+0x5a>

        LSSmaster->command = CO_LSSmaster_COMMAND_INQUIRE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2209      	movs	r2, #9
 800cca0:	715a      	strb	r2, [r3, #5]
        LSSmaster->timeoutTimer = 0;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	609a      	str	r2, [r3, #8]

        ret = CO_LSSmaster_inquireInitiate(LSSmaster, lssInquireCs);
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff fec5 	bl	800ca3c <CO_LSSmaster_inquireInitiate>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	75fb      	strb	r3, [r7, #23]
 800ccb6:	e00b      	b.n	800ccd0 <CO_LSSmaster_Inquire+0x72>
    }
    /* Check for reply */
    else if (LSSmaster->command == CO_LSSmaster_COMMAND_INQUIRE) {
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	795b      	ldrb	r3, [r3, #5]
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	d107      	bne.n	800ccd0 <CO_LSSmaster_Inquire+0x72>
        ret = CO_LSSmaster_inquireCheckWait(LSSmaster, timeDifference_us, lssInquireCs, value);
 800ccc0:	79fa      	ldrb	r2, [r7, #7]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f7ff feda 	bl	800ca80 <CO_LSSmaster_inquireCheckWait>
 800cccc:	4603      	mov	r3, r0
 800ccce:	75fb      	strb	r3, [r7, #23]
    } else { /* MISRA C 2004 14.10 */
    }

    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 800ccd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d002      	beq.n	800ccde <CO_LSSmaster_Inquire+0x80>
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800ccde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <CO_LSSmaster_FsSendMsg>:
/*
 * Helper function - send request
 */
static void
CO_LSSmaster_FsSendMsg(CO_LSSmaster_t* LSSmaster, uint32_t idNumber, uint8_t bitCheck, uint8_t lssSub,
                       uint8_t lssNext) {
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	71fb      	strb	r3, [r7, #7]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	71bb      	strb	r3, [r7, #6]
    LSSmaster->timeoutTimer = 0;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	609a      	str	r2, [r3, #8]

    CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	615a      	str	r2, [r3, #20]
    LSSmaster->TXbuff->data[0] = CO_LSS_IDENT_FASTSCAN;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	2251      	movs	r2, #81	; 0x51
 800cd12:	715a      	strb	r2, [r3, #5]
    (void)CO_setUint32(&LSSmaster->TXbuff->data[1], idNumber);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	3306      	adds	r3, #6
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff faa5 	bl	800c26c <CO_setUint32>
    LSSmaster->TXbuff->data[5] = bitCheck;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd26:	79fa      	ldrb	r2, [r7, #7]
 800cd28:	729a      	strb	r2, [r3, #10]
    LSSmaster->TXbuff->data[6] = lssSub;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2e:	79ba      	ldrb	r2, [r7, #6]
 800cd30:	72da      	strb	r2, [r3, #11]
    LSSmaster->TXbuff->data[7] = lssNext;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd36:	7e3a      	ldrb	r2, [r7, #24]
 800cd38:	731a      	strb	r2, [r3, #12]

    (void)CO_CANsend(LSSmaster->CANdevTx, LSSmaster->TXbuff);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6a1a      	ldr	r2, [r3, #32]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f006 f8d7 	bl	8012ef8 <CO_CANsend>
}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <CO_LSSmaster_FsCheckWait>:

/*
 * Helper function - wait for confirmation
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsCheckWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us) {
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b084      	sub	sp, #16
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
    CO_LSSmaster_return_t ret;

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fab9 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800cd68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d110      	bne.n	800cd94 <CO_LSSmaster_FsCheckWait+0x42>
        ret = CO_LSSmaster_SCAN_NOACK;
 800cd72:	23fc      	movs	r3, #252	; 0xfc
 800cd74:	73fb      	strb	r3, [r7, #15]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00a      	beq.n	800cd94 <CO_LSSmaster_FsCheckWait+0x42>
            uint8_t cs = LSSmaster->CANrxData[0];
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7e1b      	ldrb	r3, [r3, #24]
 800cd82:	73bb      	strb	r3, [r7, #14]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	615a      	str	r2, [r3, #20]

            if (cs == CO_LSS_IDENT_SLAVE) {
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	2b4f      	cmp	r3, #79	; 0x4f
 800cd8e:	d101      	bne.n	800cd94 <CO_LSSmaster_FsCheckWait+0x42>
                /* At least one node is waiting for fastscan */
                ret = CO_LSSmaster_SCAN_FINISHED;
 800cd90:	2302      	movs	r3, #2
 800cd92:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return ret;
 800cd94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <CO_LSSmaster_FsScanInitiate>:
/*
 * Helper function - initiate scan for 32 bit part of LSS address
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsScanInitiate(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                            uint8_t lssSub) {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	461a      	mov	r2, r3
 800cdae:	460b      	mov	r3, r1
 800cdb0:	71fb      	strb	r3, [r7, #7]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71bb      	strb	r3, [r7, #6]
    (void)timeDifference_us; /* unused */

    LSSmaster->fsLssSub = lssSub;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	79ba      	ldrb	r2, [r7, #6]
 800cdba:	735a      	strb	r2, [r3, #13]
    LSSmaster->fsIdNumber = 0;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	611a      	str	r2, [r3, #16]

    switch (scan) {
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <CO_LSSmaster_FsScanInitiate+0x36>
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d101      	bne.n	800cdd0 <CO_LSSmaster_FsScanInitiate+0x30>
        case CO_LSSmaster_FS_SCAN: break;
        case CO_LSSmaster_FS_MATCH:
            /* No scanning requested */
            return CO_LSSmaster_SCAN_FINISHED;
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e014      	b.n	800cdfa <CO_LSSmaster_FsScanInitiate+0x5a>
            break;
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800cdd0:	f06f 0304 	mvn.w	r3, #4
 800cdd4:	e011      	b.n	800cdfa <CO_LSSmaster_FsScanInitiate+0x5a>
        case CO_LSSmaster_FS_SCAN: break;
 800cdd6:	bf00      	nop
    }

    LSSmaster->fsBitChecked = CO_LSS_FASTSCAN_BIT31;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	221f      	movs	r2, #31
 800cddc:	739a      	strb	r2, [r3, #14]

    /* trigger scan procedure by sending first message */
    CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub,
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6919      	ldr	r1, [r3, #16]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	7b9a      	ldrb	r2, [r3, #14]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	7b58      	ldrb	r0, [r3, #13]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7b5b      	ldrb	r3, [r3, #13]
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f7ff ff79 	bl	800ccea <CO_LSSmaster_FsSendMsg>
                           LSSmaster->fsLssSub);

    return CO_LSSmaster_WAIT_SLAVE;
 800cdf8:	2301      	movs	r3, #1
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <CO_LSSmaster_FsScanWait>:

/*
 * Helper function - scan for 32 bits of LSS address, one by one
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsScanWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan) {
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b088      	sub	sp, #32
 800ce06:	af02      	add	r7, sp, #8
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    switch (scan) {
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d006      	beq.n	800ce24 <CO_LSSmaster_FsScanWait+0x22>
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d101      	bne.n	800ce1e <CO_LSSmaster_FsScanWait+0x1c>
        case CO_LSSmaster_FS_SCAN: break;
        case CO_LSSmaster_FS_MATCH:
            /* No scanning requested */
            return CO_LSSmaster_SCAN_FINISHED;
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e046      	b.n	800ceac <CO_LSSmaster_FsScanWait+0xaa>
            break;
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800ce1e:	f06f 0304 	mvn.w	r3, #4
 800ce22:	e043      	b.n	800ceac <CO_LSSmaster_FsScanWait+0xaa>
        case CO_LSSmaster_FS_SCAN: break;
 800ce24:	bf00      	nop
    }

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7ff fa54 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800ce32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d135      	bne.n	800cea8 <CO_LSSmaster_FsScanWait+0xa6>

        ret = CO_LSSmaster_WAIT_SLAVE;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	75fb      	strb	r3, [r7, #23]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <CO_LSSmaster_FsScanWait+0x5e>
            uint8_t cs = LSSmaster->CANrxData[0];
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	7e1b      	ldrb	r3, [r3, #24]
 800ce4c:	75bb      	strb	r3, [r7, #22]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	615a      	str	r2, [r3, #20]

            if (cs != CO_LSS_IDENT_SLAVE) {
 800ce54:	7dbb      	ldrb	r3, [r7, #22]
 800ce56:	2b4f      	cmp	r3, #79	; 0x4f
 800ce58:	d00c      	beq.n	800ce74 <CO_LSSmaster_FsScanWait+0x72>
                /* wrong response received. Can not continue */
                return CO_LSSmaster_SCAN_FAILED;
 800ce5a:	f06f 0304 	mvn.w	r3, #4
 800ce5e:	e025      	b.n	800ceac <CO_LSSmaster_FsScanWait+0xaa>
            }
        } else {
            /* no response received, assumption is wrong */
            LSSmaster->fsIdNumber |= 1UL << LSSmaster->fsBitChecked;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	7b9b      	ldrb	r3, [r3, #14]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	408b      	lsls	r3, r1
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	611a      	str	r2, [r3, #16]
        }

        if (LSSmaster->fsBitChecked == CO_LSS_FASTSCAN_BIT0) {
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	7b9b      	ldrb	r3, [r3, #14]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <CO_LSSmaster_FsScanWait+0x80>
            /* Scanning cycle is finished, we now have 32 bit address data */
            ret = CO_LSSmaster_SCAN_FINISHED;
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	75fb      	strb	r3, [r7, #23]
 800ce80:	e012      	b.n	800cea8 <CO_LSSmaster_FsScanWait+0xa6>
        } else {
            LSSmaster->fsBitChecked--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	7b9b      	ldrb	r3, [r3, #14]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	739a      	strb	r2, [r3, #14]

            CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub,
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6919      	ldr	r1, [r3, #16]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	7b9a      	ldrb	r2, [r3, #14]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	7b58      	ldrb	r0, [r3, #13]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	7b5b      	ldrb	r3, [r3, #13]
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4603      	mov	r3, r0
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7ff ff21 	bl	800ccea <CO_LSSmaster_FsSendMsg>
                                   LSSmaster->fsLssSub);
        }
    }

    return ret;
 800cea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <CO_LSSmaster_FsVerifyInitiate>:
/*
 * Helper function - initiate check for 32 bit part of LSS address
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsVerifyInitiate(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                              uint32_t idNumberCheck, uint8_t lssNext) {
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4613      	mov	r3, r2
 800cec2:	71fb      	strb	r3, [r7, #7]
    (void)timeDifference_us; /* unused */

    switch (scan) {
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d008      	beq.n	800cedc <CO_LSSmaster_FsVerifyInitiate+0x28>
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d103      	bne.n	800ced6 <CO_LSSmaster_FsVerifyInitiate+0x22>
        case CO_LSSmaster_FS_SCAN:
            /* ID obtained by scan */
            break;
        case CO_LSSmaster_FS_MATCH:
            /* ID given by user */
            LSSmaster->fsIdNumber = idNumberCheck;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	611a      	str	r2, [r3, #16]
            break;
 800ced4:	e003      	b.n	800cede <CO_LSSmaster_FsVerifyInitiate+0x2a>
        case CO_LSSmaster_FS_SKIP:
        default: return CO_LSSmaster_SCAN_FAILED; break;
 800ced6:	f06f 0304 	mvn.w	r3, #4
 800ceda:	e010      	b.n	800cefe <CO_LSSmaster_FsVerifyInitiate+0x4a>
            break;
 800cedc:	bf00      	nop
    }

    LSSmaster->fsBitChecked = CO_LSS_FASTSCAN_BIT0;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	739a      	strb	r2, [r3, #14]

    /* send request */
    CO_LSSmaster_FsSendMsg(LSSmaster, LSSmaster->fsIdNumber, LSSmaster->fsBitChecked, LSSmaster->fsLssSub, lssNext);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6919      	ldr	r1, [r3, #16]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	7b9a      	ldrb	r2, [r3, #14]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	7b58      	ldrb	r0, [r3, #13]
 800cef0:	7e3b      	ldrb	r3, [r7, #24]
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	4603      	mov	r3, r0
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f7ff fef7 	bl	800ccea <CO_LSSmaster_FsSendMsg>

    return CO_LSSmaster_WAIT_SLAVE;
 800cefc:	2301      	movs	r3, #1
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <CO_LSSmaster_FsVerifyWait>:
/*
 * Helper function - verify 32 bit LSS address, request node(s) to switch their state machine to the next state
 */
static CO_LSSmaster_return_t
CO_LSSmaster_FsVerifyWait(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us, CO_LSSmaster_scantype_t scan,
                          uint32_t* idNumberRet) {
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b086      	sub	sp, #24
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	603b      	str	r3, [r7, #0]
 800cf12:	4613      	mov	r3, r2
 800cf14:	71fb      	strb	r3, [r7, #7]
    CO_LSSmaster_return_t ret;

    if (scan == CO_LSSmaster_FS_SKIP) {
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d102      	bne.n	800cf22 <CO_LSSmaster_FsVerifyWait+0x1c>
        return CO_LSSmaster_SCAN_FAILED;
 800cf1c:	f06f 0304 	mvn.w	r3, #4
 800cf20:	e027      	b.n	800cf72 <CO_LSSmaster_FsVerifyWait+0x6c>
    }

    ret = CO_LSSmaster_check_timeout(LSSmaster, timeDifference_us);
 800cf22:	68b9      	ldr	r1, [r7, #8]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff f9d6 	bl	800c2d6 <CO_LSSmaster_check_timeout>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	75fb      	strb	r3, [r7, #23]
    if (ret == CO_LSSmaster_TIMEOUT) {
 800cf2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf36:	d11a      	bne.n	800cf6e <CO_LSSmaster_FsVerifyWait+0x68>

        *idNumberRet = 0;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
        ret = CO_LSSmaster_SCAN_NOACK;
 800cf3e:	23fc      	movs	r3, #252	; 0xfc
 800cf40:	75fb      	strb	r3, [r7, #23]

        if (CO_FLAG_READ(LSSmaster->CANrxNew)) {
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d011      	beq.n	800cf6e <CO_LSSmaster_FsVerifyWait+0x68>
            uint8_t cs = LSSmaster->CANrxData[0];
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	7e1b      	ldrb	r3, [r3, #24]
 800cf4e:	75bb      	strb	r3, [r7, #22]
            CO_FLAG_CLEAR(LSSmaster->CANrxNew);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	615a      	str	r2, [r3, #20]

            if (cs == CO_LSS_IDENT_SLAVE) {
 800cf56:	7dbb      	ldrb	r3, [r7, #22]
 800cf58:	2b4f      	cmp	r3, #79	; 0x4f
 800cf5a:	d106      	bne.n	800cf6a <CO_LSSmaster_FsVerifyWait+0x64>
                *idNumberRet = LSSmaster->fsIdNumber;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	601a      	str	r2, [r3, #0]
                ret = CO_LSSmaster_SCAN_FINISHED;
 800cf64:	2302      	movs	r3, #2
 800cf66:	75fb      	strb	r3, [r7, #23]
 800cf68:	e001      	b.n	800cf6e <CO_LSSmaster_FsVerifyWait+0x68>
            } else {
                ret = CO_LSSmaster_SCAN_FAILED;
 800cf6a:	23fb      	movs	r3, #251	; 0xfb
 800cf6c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return ret;
 800cf6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <CO_LSSmaster_FsSearchNext>:

/*
 * Helper function - check which 32 bit to scan for next, if any
 */
static uint8_t
CO_LSSmaster_FsSearchNext(CO_LSSmaster_t* LSSmaster, const CO_LSSmaster_fastscan_t* fastscan) {
 800cf7a:	b480      	push	{r7}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
    uint8_t i;

    /* we search for the next LSS address part to scan for, beginning with the
     * one after the current one. If there is none remaining, scanning is finished */
    for (i = LSSmaster->fsLssSub + 1U; i <= CO_LSS_FASTSCAN_SERIAL; i++) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7b5b      	ldrb	r3, [r3, #13]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	73fb      	strb	r3, [r7, #15]
 800cf8c:	e009      	b.n	800cfa2 <CO_LSSmaster_FsSearchNext+0x28>
        if (fastscan->scan[i] != CO_LSSmaster_FS_SKIP) {
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	5cd3      	ldrb	r3, [r2, r3]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d001      	beq.n	800cf9c <CO_LSSmaster_FsSearchNext+0x22>
            return i;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	e006      	b.n	800cfaa <CO_LSSmaster_FsSearchNext+0x30>
    for (i = LSSmaster->fsLssSub + 1U; i <= CO_LSS_FASTSCAN_SERIAL; i++) {
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	73fb      	strb	r3, [r7, #15]
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d9f2      	bls.n	800cf8e <CO_LSSmaster_FsSearchNext+0x14>
        }
    }
    /* node selection is triggered by switching node state machine back to initial state */
    return CO_LSS_FASTSCAN_VENDOR_ID;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <CO_LSSmaster_IdentifyFastscan>:

CO_LSSmaster_return_t
CO_LSSmaster_IdentifyFastscan(CO_LSSmaster_t* LSSmaster, uint32_t timeDifference_us,
                              CO_LSSmaster_fastscan_t* fastscan) {
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b088      	sub	sp, #32
 800cfba:	af02      	add	r7, sp, #8
 800cfbc:	60f8      	str	r0, [r7, #12]
 800cfbe:	60b9      	str	r1, [r7, #8]
 800cfc0:	607a      	str	r2, [r7, #4]
    uint8_t i;
    uint8_t count;
    CO_LSSmaster_return_t ret = CO_LSSmaster_INVALID_STATE;
 800cfc2:	23fd      	movs	r3, #253	; 0xfd
 800cfc4:	757b      	strb	r3, [r7, #21]
    uint8_t next;

    /* parameter validation */
    if ((LSSmaster == NULL) || (fastscan == NULL)) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <CO_LSSmaster_IdentifyFastscan+0x1c>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d102      	bne.n	800cfd8 <CO_LSSmaster_IdentifyFastscan+0x22>
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cfd2:	f06f 0301 	mvn.w	r3, #1
 800cfd6:	e0e3      	b.n	800d1a0 <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }
    if (fastscan->scan[0] == CO_LSSmaster_FS_SKIP) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d102      	bne.n	800cfe6 <CO_LSSmaster_IdentifyFastscan+0x30>
        /* vendor ID scan cannot be skipped */
        return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800cfe0:	f06f 0301 	mvn.w	r3, #1
 800cfe4:	e0dc      	b.n	800d1a0 <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }
    count = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75bb      	strb	r3, [r7, #22]
    for (i = 0; i < (sizeof(fastscan->scan) / sizeof(fastscan->scan[0])); i++) {
 800cfea:	2300      	movs	r3, #0
 800cfec:	75fb      	strb	r3, [r7, #23]
 800cfee:	e010      	b.n	800d012 <CO_LSSmaster_IdentifyFastscan+0x5c>
        if (fastscan->scan[i] == CO_LSSmaster_FS_SKIP) {
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	5cd3      	ldrb	r3, [r2, r3]
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d102      	bne.n	800d000 <CO_LSSmaster_IdentifyFastscan+0x4a>
            count++;
 800cffa:	7dbb      	ldrb	r3, [r7, #22]
 800cffc:	3301      	adds	r3, #1
 800cffe:	75bb      	strb	r3, [r7, #22]
        }
        if (count > 2U) {
 800d000:	7dbb      	ldrb	r3, [r7, #22]
 800d002:	2b02      	cmp	r3, #2
 800d004:	d902      	bls.n	800d00c <CO_LSSmaster_IdentifyFastscan+0x56>
            /* Node selection needs the Vendor ID and at least one other value */
            return CO_LSSmaster_ILLEGAL_ARGUMENT;
 800d006:	f06f 0301 	mvn.w	r3, #1
 800d00a:	e0c9      	b.n	800d1a0 <CO_LSSmaster_IdentifyFastscan+0x1ea>
    for (i = 0; i < (sizeof(fastscan->scan) / sizeof(fastscan->scan[0])); i++) {
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	3301      	adds	r3, #1
 800d010:	75fb      	strb	r3, [r7, #23]
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	2b03      	cmp	r3, #3
 800d016:	d9eb      	bls.n	800cff0 <CO_LSSmaster_IdentifyFastscan+0x3a>
        }
    }

    /* state machine validation */
    if ((LSSmaster->state != CO_LSSmaster_STATE_WAITING)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d107      	bne.n	800d030 <CO_LSSmaster_IdentifyFastscan+0x7a>
        || ((LSSmaster->command != CO_LSSmaster_COMMAND_WAITING)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	795b      	ldrb	r3, [r3, #5]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d006      	beq.n	800d036 <CO_LSSmaster_IdentifyFastscan+0x80>
            && (LSSmaster->command != CO_LSSmaster_COMMAND_IDENTIFY_FASTSCAN))) {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	795b      	ldrb	r3, [r3, #5]
 800d02c:	2b0a      	cmp	r3, #10
 800d02e:	d002      	beq.n	800d036 <CO_LSSmaster_IdentifyFastscan+0x80>
        /* state machine not ready, other command is already processed */
        return CO_LSSmaster_INVALID_STATE;
 800d030:	f06f 0302 	mvn.w	r3, #2
 800d034:	e0b4      	b.n	800d1a0 <CO_LSSmaster_IdentifyFastscan+0x1ea>
    }

    /* evaluate LSS state machine */
    if (LSSmaster->command == CO_LSSmaster_COMMAND_WAITING) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	795b      	ldrb	r3, [r3, #5]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10f      	bne.n	800d05e <CO_LSSmaster_IdentifyFastscan+0xa8>
        /* start fastscan */
        LSSmaster->command = CO_LSSmaster_COMMAND_IDENTIFY_FASTSCAN;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	220a      	movs	r2, #10
 800d042:	715a      	strb	r2, [r3, #5]

        /* check if any nodes are waiting, if yes fastscan is reset */
        LSSmaster->fsState = CO_LSSmaster_FS_STATE_CHECK;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	731a      	strb	r2, [r3, #12]
        CO_LSSmaster_FsSendMsg(LSSmaster, 0, CO_LSS_FASTSCAN_CONFIRM, 0, 0);
 800d04a:	2300      	movs	r3, #0
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	2300      	movs	r3, #0
 800d050:	2280      	movs	r2, #128	; 0x80
 800d052:	2100      	movs	r1, #0
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f7ff fe48 	bl	800ccea <CO_LSSmaster_FsSendMsg>

        return CO_LSSmaster_WAIT_SLAVE;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e0a0      	b.n	800d1a0 <CO_LSSmaster_IdentifyFastscan+0x1ea>
     * - scan for serial number
     * - verify serial number, switch node to LSS configuration mode
     * Certain steps can be skipped as mentioned in the function description. If one step is
     * not ack'ed by a node, the scanning process is terminated and the correspondign error is returned.
     */
    switch (LSSmaster->fsState) {
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	7b1b      	ldrb	r3, [r3, #12]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d054      	beq.n	800d110 <CO_LSSmaster_IdentifyFastscan+0x15a>
 800d066:	2b02      	cmp	r3, #2
 800d068:	f300 808a 	bgt.w	800d180 <CO_LSSmaster_IdentifyFastscan+0x1ca>
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <CO_LSSmaster_IdentifyFastscan+0xc0>
 800d070:	2b01      	cmp	r3, #1
 800d072:	d01e      	beq.n	800d0b2 <CO_LSSmaster_IdentifyFastscan+0xfc>
                }
            }
            break;
        default:
            /* none */
            break;
 800d074:	e084      	b.n	800d180 <CO_LSSmaster_IdentifyFastscan+0x1ca>
            ret = CO_LSSmaster_FsCheckWait(LSSmaster, timeDifference_us);
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f7ff fe6a 	bl	800cd52 <CO_LSSmaster_FsCheckWait>
 800d07e:	4603      	mov	r3, r0
 800d080:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800d082:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d086:	2b02      	cmp	r3, #2
 800d088:	d17c      	bne.n	800d184 <CO_LSSmaster_IdentifyFastscan+0x1ce>
                (void)memset(&fastscan->found, 0, sizeof(fastscan->found));
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3314      	adds	r3, #20
 800d08e:	2210      	movs	r2, #16
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f012 fad2 	bl	801f63c <memset>
                (void)CO_LSSmaster_FsScanInitiate(LSSmaster, timeDifference_us,
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	781a      	ldrb	r2, [r3, #0]
 800d09c:	2300      	movs	r3, #0
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff fe7d 	bl	800cda0 <CO_LSSmaster_FsScanInitiate>
                ret = CO_LSSmaster_WAIT_SLAVE;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	757b      	strb	r3, [r7, #21]
                LSSmaster->fsState = CO_LSSmaster_FS_STATE_SCAN;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	731a      	strb	r2, [r3, #12]
            break;
 800d0b0:	e068      	b.n	800d184 <CO_LSSmaster_IdentifyFastscan+0x1ce>
            ret = CO_LSSmaster_FsScanWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub]);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	7b5b      	ldrb	r3, [r3, #13]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	5c9b      	ldrb	r3, [r3, r2]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68b9      	ldr	r1, [r7, #8]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7ff fe9e 	bl	800ce02 <CO_LSSmaster_FsScanWait>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800d0ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d15a      	bne.n	800d188 <CO_LSSmaster_IdentifyFastscan+0x1d2>
                next = CO_LSSmaster_FsSearchNext(LSSmaster, fastscan);
 800d0d2:	6879      	ldr	r1, [r7, #4]
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f7ff ff50 	bl	800cf7a <CO_LSSmaster_FsSearchNext>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	753b      	strb	r3, [r7, #20]
                ret = CO_LSSmaster_FsVerifyInitiate(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	7b5b      	ldrb	r3, [r3, #13]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	5c99      	ldrb	r1, [r3, r2]
                                                    fastscan->match.addr[LSSmaster->fsLssSub], next);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	7b5b      	ldrb	r3, [r3, #13]
                ret = CO_LSSmaster_FsVerifyInitiate(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	7d3b      	ldrb	r3, [r7, #20]
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	460a      	mov	r2, r1
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff fed8 	bl	800ceb4 <CO_LSSmaster_FsVerifyInitiate>
 800d104:	4603      	mov	r3, r0
 800d106:	757b      	strb	r3, [r7, #21]
                LSSmaster->fsState = CO_LSSmaster_FS_STATE_VERIFY;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2202      	movs	r2, #2
 800d10c:	731a      	strb	r2, [r3, #12]
            break;
 800d10e:	e03b      	b.n	800d188 <CO_LSSmaster_IdentifyFastscan+0x1d2>
            ret = CO_LSSmaster_FsVerifyWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	7b5b      	ldrb	r3, [r3, #13]
 800d114:	461a      	mov	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	5c99      	ldrb	r1, [r3, r2]
                                            &fastscan->found.addr[LSSmaster->fsLssSub]);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	7b5b      	ldrb	r3, [r3, #13]
            ret = CO_LSSmaster_FsVerifyWait(LSSmaster, timeDifference_us, fastscan->scan[LSSmaster->fsLssSub],
 800d11e:	3304      	adds	r3, #4
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	4413      	add	r3, r2
 800d126:	3304      	adds	r3, #4
 800d128:	460a      	mov	r2, r1
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f7ff feea 	bl	800cf06 <CO_LSSmaster_FsVerifyWait>
 800d132:	4603      	mov	r3, r0
 800d134:	757b      	strb	r3, [r7, #21]
            if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800d136:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d126      	bne.n	800d18c <CO_LSSmaster_IdentifyFastscan+0x1d6>
                next = CO_LSSmaster_FsSearchNext(LSSmaster, fastscan);
 800d13e:	6879      	ldr	r1, [r7, #4]
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7ff ff1a 	bl	800cf7a <CO_LSSmaster_FsSearchNext>
 800d146:	4603      	mov	r3, r0
 800d148:	753b      	strb	r3, [r7, #20]
                if (next == CO_LSS_FASTSCAN_VENDOR_ID) {
 800d14a:	7d3b      	ldrb	r3, [r7, #20]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d103      	bne.n	800d158 <CO_LSSmaster_IdentifyFastscan+0x1a2>
                    LSSmaster->state = CO_LSSmaster_STATE_CFG_SLECTIVE;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2201      	movs	r2, #1
 800d154:	711a      	strb	r2, [r3, #4]
            break;
 800d156:	e019      	b.n	800d18c <CO_LSSmaster_IdentifyFastscan+0x1d6>
                    ret = CO_LSSmaster_FsScanInitiate(LSSmaster, timeDifference_us, fastscan->scan[next], next);
 800d158:	7d3b      	ldrb	r3, [r7, #20]
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	5cd2      	ldrb	r2, [r2, r3]
 800d15e:	7d3b      	ldrb	r3, [r7, #20]
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f7ff fe1c 	bl	800cda0 <CO_LSSmaster_FsScanInitiate>
 800d168:	4603      	mov	r3, r0
 800d16a:	757b      	strb	r3, [r7, #21]
                    if (ret == CO_LSSmaster_SCAN_FINISHED) {
 800d16c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d170:	2b02      	cmp	r3, #2
 800d172:	d101      	bne.n	800d178 <CO_LSSmaster_IdentifyFastscan+0x1c2>
                        ret = CO_LSSmaster_WAIT_SLAVE;
 800d174:	2301      	movs	r3, #1
 800d176:	757b      	strb	r3, [r7, #21]
                    LSSmaster->fsState = CO_LSSmaster_FS_STATE_SCAN;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	731a      	strb	r2, [r3, #12]
            break;
 800d17e:	e005      	b.n	800d18c <CO_LSSmaster_IdentifyFastscan+0x1d6>
            break;
 800d180:	bf00      	nop
 800d182:	e004      	b.n	800d18e <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800d184:	bf00      	nop
 800d186:	e002      	b.n	800d18e <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800d188:	bf00      	nop
 800d18a:	e000      	b.n	800d18e <CO_LSSmaster_IdentifyFastscan+0x1d8>
            break;
 800d18c:	bf00      	nop
    }

    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 800d18e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d002      	beq.n	800d19c <CO_LSSmaster_IdentifyFastscan+0x1e6>
        /* finished */
        LSSmaster->command = CO_LSSmaster_COMMAND_WAITING;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	715a      	strb	r2, [r3, #5]
    }
    return ret;
 800d19c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b090      	sub	sp, #64	; 0x40
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	791b      	ldrb	r3, [r3, #4]
 800d1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800d1be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1c2:	2b08      	cmp	r3, #8
 800d1c4:	f040 814f 	bne.w	800d466 <CO_LSSslave_receive+0x2be>
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 814a 	bne.w	800d466 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	3305      	adds	r3, #5
 800d1da:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 800d1e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d12d      	bne.n	800d248 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 800d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 800d1f4:	7ffb      	ldrb	r3, [r7, #31]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d002      	beq.n	800d200 <CO_LSSslave_receive+0x58>
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d020      	beq.n	800d240 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 800d1fe:	e12c      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	7c1b      	ldrb	r3, [r3, #16]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d110      	bne.n	800d22a <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800d208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d20e:	2bff      	cmp	r3, #255	; 0xff
 800d210:	d10b      	bne.n	800d22a <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2bff      	cmp	r3, #255	; 0xff
 800d21a:	d006      	beq.n	800d22a <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 800d21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 800d226:	2301      	movs	r3, #1
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800d22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22c:	2200      	movs	r2, #0
 800d22e:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 800d230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d232:	3314      	adds	r3, #20
 800d234:	2210      	movs	r2, #16
 800d236:	2100      	movs	r1, #0
 800d238:	4618      	mov	r0, r3
 800d23a:	f012 f9ff 	bl	801f63c <memset>
                    break;
 800d23e:	e10c      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 800d240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d242:	2201      	movs	r2, #1
 800d244:	741a      	strb	r2, [r3, #16]
 800d246:	e108      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24a:	7c1b      	ldrb	r3, [r3, #16]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f040 80f0 	bne.w	800d432 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 800d252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d256:	3b40      	subs	r3, #64	; 0x40
 800d258:	2b11      	cmp	r3, #17
 800d25a:	f200 80f9 	bhi.w	800d450 <CO_LSSslave_receive+0x2a8>
 800d25e:	a201      	add	r2, pc, #4	; (adr r2, 800d264 <CO_LSSslave_receive+0xbc>)
 800d260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d264:	0800d2ad 	.word	0x0800d2ad
 800d268:	0800d2bd 	.word	0x0800d2bd
 800d26c:	0800d2cd 	.word	0x0800d2cd
 800d270:	0800d2dd 	.word	0x0800d2dd
 800d274:	0800d451 	.word	0x0800d451
 800d278:	0800d451 	.word	0x0800d451
 800d27c:	0800d451 	.word	0x0800d451
 800d280:	0800d451 	.word	0x0800d451
 800d284:	0800d451 	.word	0x0800d451
 800d288:	0800d451 	.word	0x0800d451
 800d28c:	0800d451 	.word	0x0800d451
 800d290:	0800d451 	.word	0x0800d451
 800d294:	0800d451 	.word	0x0800d451
 800d298:	0800d451 	.word	0x0800d451
 800d29c:	0800d451 	.word	0x0800d451
 800d2a0:	0800d451 	.word	0x0800d451
 800d2a4:	0800d451 	.word	0x0800d451
 800d2a8:	0800d339 	.word	0x0800d339
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b8:	615a      	str	r2, [r3, #20]
                    break;
 800d2ba:	e0ce      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	3301      	adds	r3, #1
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c8:	619a      	str	r2, [r3, #24]
                    break;
 800d2ca:	e0c6      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	61da      	str	r2, [r3, #28]
                    break;
 800d2da:	e0be      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	3301      	adds	r3, #1
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e8:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 800d2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	f040 80ae 	bne.w	800d454 <CO_LSSslave_receive+0x2ac>
 800d2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fa:	689a      	ldr	r2, [r3, #8]
 800d2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	429a      	cmp	r2, r3
 800d302:	f040 80a7 	bne.w	800d454 <CO_LSSslave_receive+0x2ac>
 800d306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	429a      	cmp	r2, r3
 800d310:	f040 80a0 	bne.w	800d454 <CO_LSSslave_receive+0x2ac>
 800d314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	f040 8099 	bne.w	800d454 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	2201      	movs	r2, #1
 800d326:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d32e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 800d332:	2301      	movs	r3, #1
 800d334:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 800d336:	e08d      	b.n	800d454 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2bff      	cmp	r3, #255	; 0xff
 800d340:	f040 808a 	bne.w	800d458 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d34a:	2bff      	cmp	r3, #255	; 0xff
 800d34c:	f040 8084 	bne.w	800d458 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	3305      	adds	r3, #5
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	3306      	adds	r3, #6
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	3307      	adds	r3, #7
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 800d36e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d372:	2b1f      	cmp	r3, #31
 800d374:	d903      	bls.n	800d37e <CO_LSSslave_receive+0x1d6>
 800d376:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d37a:	2b80      	cmp	r3, #128	; 0x80
 800d37c:	d16d      	bne.n	800d45a <CO_LSSslave_receive+0x2b2>
 800d37e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d382:	2b03      	cmp	r3, #3
 800d384:	d869      	bhi.n	800d45a <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800d386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d38a:	2b03      	cmp	r3, #3
 800d38c:	d865      	bhi.n	800d45a <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	3301      	adds	r3, #1
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 800d39a:	2300      	movs	r3, #0
 800d39c:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800d39e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d3a2:	2b80      	cmp	r3, #128	; 0x80
 800d3a4:	d10d      	bne.n	800d3c2 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800d3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	3324      	adds	r3, #36	; 0x24
 800d3b6:	2210      	movs	r2, #16
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f012 f93e 	bl	801f63c <memset>
 800d3c0:	e02c      	b.n	800d41c <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3c8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d125      	bne.n	800d41c <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 800d3d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3dc:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 800d3de:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	405a      	eors	r2, r3
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d113      	bne.n	800d41c <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 800d3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 800d402:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d406:	2b00      	cmp	r3, #0
 800d408:	d108      	bne.n	800d41c <CO_LSSslave_receive+0x274>
 800d40a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d40e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d412:	429a      	cmp	r2, r3
 800d414:	d202      	bcs.n	800d41c <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d418:	2201      	movs	r2, #1
 800d41a:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d01a      	beq.n	800d458 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 800d422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d424:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 800d42c:	2301      	movs	r3, #1
 800d42e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 800d430:	e012      	b.n	800d458 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 800d432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d434:	3349      	adds	r3, #73	; 0x49
 800d436:	2208      	movs	r2, #8
 800d438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d43a:	4618      	mov	r0, r3
 800d43c:	f012 f99a 	bl	801f774 <memcpy>
            LSSslave->service = cs;
 800d440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d442:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 800d44a:	2301      	movs	r3, #1
 800d44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d44e:	e004      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                    break;
 800d450:	bf00      	nop
 800d452:	e002      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                    break;
 800d454:	bf00      	nop
 800d456:	e000      	b.n	800d45a <CO_LSSslave_receive+0x2b2>
                    break;
 800d458:	bf00      	nop
        }

        if (request_LSSslave_process) {
 800d45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	2201      	movs	r2, #1
 800d464:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 800d466:	bf00      	nop
 800d468:	3740      	adds	r7, #64	; 0x40
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop

0800d470 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 800d470:	b580      	push	{r7, lr}
 800d472:	b08a      	sub	sp, #40	; 0x28
 800d474:	af04      	add	r7, sp, #16
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800d47e:	2300      	movs	r3, #0
 800d480:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d018      	beq.n	800d4ba <CO_LSSslave_init+0x4a>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d015      	beq.n	800d4ba <CO_LSSslave_init+0x4a>
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d012      	beq.n	800d4ba <CO_LSSslave_init+0x4a>
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00f      	beq.n	800d4ba <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00c      	beq.n	800d4ba <CO_LSSslave_init+0x4a>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <CO_LSSslave_init+0x42>
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	b25b      	sxtb	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da06      	bge.n	800d4c0 <CO_LSSslave_init+0x50>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2bff      	cmp	r3, #255	; 0xff
 800d4b8:	d002      	beq.n	800d4c0 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	e046      	b.n	800d54e <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800d4c0:	2274      	movs	r2, #116	; 0x74
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f012 f8b9 	bl	801f63c <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2210      	movs	r2, #16
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f012 f94f 	bl	801f774 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	781a      	ldrb	r2, [r3, #0]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 800d500:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d502:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d504:	4b14      	ldr	r3, [pc, #80]	; (800d558 <CO_LSSslave_init+0xe8>)
 800d506:	9302      	str	r3, [sp, #8]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	2300      	movs	r3, #0
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d514:	6a38      	ldr	r0, [r7, #32]
 800d516:	f005 fc17 	bl	8012d48 <CO_CANrxBufferInit>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d522:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 800d524:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d526:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800d528:	2300      	movs	r3, #0
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	2308      	movs	r3, #8
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	2300      	movs	r3, #0
 800d532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d534:	f005 fc66 	bl	8012e04 <CO_CANtxBufferInit>
 800d538:	4602      	mov	r2, r0
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800d54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	0800d1a9 	.word	0x0800d1a9

0800d55c <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08c      	sub	sp, #48	; 0x30
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 800d564:	2300      	movs	r3, #0
 800d566:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8203 	beq.w	800d978 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800d572:	2300      	movs	r3, #0
 800d574:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57a:	3305      	adds	r3, #5
 800d57c:	2208      	movs	r2, #8
 800d57e:	2100      	movs	r1, #0
 800d580:	4618      	mov	r0, r3
 800d582:	f012 f85b 	bl	801f63c <memset>

        switch (LSSslave->service) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d58c:	3b04      	subs	r3, #4
 800d58e:	2b5a      	cmp	r3, #90	; 0x5a
 800d590:	f200 81dd 	bhi.w	800d94e <CO_LSSslave_process+0x3f2>
 800d594:	a201      	add	r2, pc, #4	; (adr r2, 800d59c <CO_LSSslave_process+0x40>)
 800d596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59a:	bf00      	nop
 800d59c:	0800d709 	.word	0x0800d709
 800d5a0:	0800d94f 	.word	0x0800d94f
 800d5a4:	0800d94f 	.word	0x0800d94f
 800d5a8:	0800d94f 	.word	0x0800d94f
 800d5ac:	0800d94f 	.word	0x0800d94f
 800d5b0:	0800d94f 	.word	0x0800d94f
 800d5b4:	0800d94f 	.word	0x0800d94f
 800d5b8:	0800d94f 	.word	0x0800d94f
 800d5bc:	0800d94f 	.word	0x0800d94f
 800d5c0:	0800d94f 	.word	0x0800d94f
 800d5c4:	0800d94f 	.word	0x0800d94f
 800d5c8:	0800d94f 	.word	0x0800d94f
 800d5cc:	0800d94f 	.word	0x0800d94f
 800d5d0:	0800d71d 	.word	0x0800d71d
 800d5d4:	0800d94f 	.word	0x0800d94f
 800d5d8:	0800d76b 	.word	0x0800d76b
 800d5dc:	0800d94f 	.word	0x0800d94f
 800d5e0:	0800d807 	.word	0x0800d807
 800d5e4:	0800d94f 	.word	0x0800d94f
 800d5e8:	0800d845 	.word	0x0800d845
 800d5ec:	0800d94f 	.word	0x0800d94f
 800d5f0:	0800d94f 	.word	0x0800d94f
 800d5f4:	0800d94f 	.word	0x0800d94f
 800d5f8:	0800d94f 	.word	0x0800d94f
 800d5fc:	0800d94f 	.word	0x0800d94f
 800d600:	0800d94f 	.word	0x0800d94f
 800d604:	0800d94f 	.word	0x0800d94f
 800d608:	0800d94f 	.word	0x0800d94f
 800d60c:	0800d94f 	.word	0x0800d94f
 800d610:	0800d94f 	.word	0x0800d94f
 800d614:	0800d94f 	.word	0x0800d94f
 800d618:	0800d94f 	.word	0x0800d94f
 800d61c:	0800d94f 	.word	0x0800d94f
 800d620:	0800d94f 	.word	0x0800d94f
 800d624:	0800d94f 	.word	0x0800d94f
 800d628:	0800d94f 	.word	0x0800d94f
 800d62c:	0800d94f 	.word	0x0800d94f
 800d630:	0800d94f 	.word	0x0800d94f
 800d634:	0800d94f 	.word	0x0800d94f
 800d638:	0800d94f 	.word	0x0800d94f
 800d63c:	0800d94f 	.word	0x0800d94f
 800d640:	0800d94f 	.word	0x0800d94f
 800d644:	0800d94f 	.word	0x0800d94f
 800d648:	0800d94f 	.word	0x0800d94f
 800d64c:	0800d94f 	.word	0x0800d94f
 800d650:	0800d94f 	.word	0x0800d94f
 800d654:	0800d94f 	.word	0x0800d94f
 800d658:	0800d94f 	.word	0x0800d94f
 800d65c:	0800d94f 	.word	0x0800d94f
 800d660:	0800d94f 	.word	0x0800d94f
 800d664:	0800d94f 	.word	0x0800d94f
 800d668:	0800d94f 	.word	0x0800d94f
 800d66c:	0800d94f 	.word	0x0800d94f
 800d670:	0800d94f 	.word	0x0800d94f
 800d674:	0800d94f 	.word	0x0800d94f
 800d678:	0800d94f 	.word	0x0800d94f
 800d67c:	0800d94f 	.word	0x0800d94f
 800d680:	0800d94f 	.word	0x0800d94f
 800d684:	0800d94f 	.word	0x0800d94f
 800d688:	0800d94f 	.word	0x0800d94f
 800d68c:	0800d94f 	.word	0x0800d94f
 800d690:	0800d94f 	.word	0x0800d94f
 800d694:	0800d94f 	.word	0x0800d94f
 800d698:	0800d70f 	.word	0x0800d70f
 800d69c:	0800d94f 	.word	0x0800d94f
 800d6a0:	0800d94f 	.word	0x0800d94f
 800d6a4:	0800d94f 	.word	0x0800d94f
 800d6a8:	0800d94f 	.word	0x0800d94f
 800d6ac:	0800d94f 	.word	0x0800d94f
 800d6b0:	0800d94f 	.word	0x0800d94f
 800d6b4:	0800d94f 	.word	0x0800d94f
 800d6b8:	0800d94f 	.word	0x0800d94f
 800d6bc:	0800d94f 	.word	0x0800d94f
 800d6c0:	0800d94f 	.word	0x0800d94f
 800d6c4:	0800d94f 	.word	0x0800d94f
 800d6c8:	0800d94f 	.word	0x0800d94f
 800d6cc:	0800d94f 	.word	0x0800d94f
 800d6d0:	0800d941 	.word	0x0800d941
 800d6d4:	0800d94f 	.word	0x0800d94f
 800d6d8:	0800d94f 	.word	0x0800d94f
 800d6dc:	0800d94f 	.word	0x0800d94f
 800d6e0:	0800d94f 	.word	0x0800d94f
 800d6e4:	0800d94f 	.word	0x0800d94f
 800d6e8:	0800d94f 	.word	0x0800d94f
 800d6ec:	0800d94f 	.word	0x0800d94f
 800d6f0:	0800d94f 	.word	0x0800d94f
 800d6f4:	0800d89b 	.word	0x0800d89b
 800d6f8:	0800d8bd 	.word	0x0800d8bd
 800d6fc:	0800d8df 	.word	0x0800d8df
 800d700:	0800d901 	.word	0x0800d901
 800d704:	0800d923 	.word	0x0800d923
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 800d708:	2301      	movs	r3, #1
 800d70a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800d70c:	e126      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d712:	2244      	movs	r2, #68	; 0x44
 800d714:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800d716:	2301      	movs	r3, #1
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d71a:	e11f      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d722:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 800d72a:	7cfb      	ldrb	r3, [r7, #19]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <CO_LSSslave_process+0x1dc>
 800d730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d734:	2b00      	cmp	r3, #0
 800d736:	da02      	bge.n	800d73e <CO_LSSslave_process+0x1e2>
 800d738:	7cfb      	ldrb	r3, [r7, #19]
 800d73a:	2bff      	cmp	r3, #255	; 0xff
 800d73c:	d104      	bne.n	800d748 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d742:	7cfa      	ldrb	r2, [r7, #19]
 800d744:	701a      	strb	r2, [r3, #0]
 800d746:	e002      	b.n	800d74e <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 800d748:	2301      	movs	r3, #1
 800d74a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d758:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d75e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d762:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800d764:	2301      	movs	r3, #1
 800d766:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d768:	e0f8      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 80ef 	beq.w	800d952 <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d77a:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d782:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d790:	7f7b      	ldrb	r3, [r7, #29]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d121      	bne.n	800d7da <CO_LSSslave_process+0x27e>
 800d796:	7f3b      	ldrb	r3, [r7, #28]
 800d798:	2b05      	cmp	r3, #5
 800d79a:	d01e      	beq.n	800d7da <CO_LSSslave_process+0x27e>
 800d79c:	7f3b      	ldrb	r3, [r7, #28]
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d81b      	bhi.n	800d7da <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 800d7a2:	7f3b      	ldrb	r3, [r7, #28]
 800d7a4:	4a77      	ldr	r2, [pc, #476]	; (800d984 <CO_LSSslave_process+0x428>)
 800d7a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7aa:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d7b4:	8b79      	ldrh	r1, [r7, #26]
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	4798      	blx	r3
 800d7ba:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d004      	beq.n	800d7cc <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	8b7a      	ldrh	r2, [r7, #26]
 800d7c8:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d7ca:	e009      	b.n	800d7e0 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800d7cc:	23ff      	movs	r3, #255	; 0xff
 800d7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800d7d8:	e002      	b.n	800d7e0 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d7ea:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d7f4:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7fa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800d7fe:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 800d800:	2301      	movs	r3, #1
 800d802:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d804:	e0aa      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80a3 	beq.w	800d956 <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 80a0 	beq.w	800d95a <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d820:	b29b      	uxth	r3, r3
 800d822:	021b      	lsls	r3, r3, #8
 800d824:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	8bfb      	ldrh	r3, [r7, #30]
 800d830:	4313      	orrs	r3, r2
 800d832:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800d83c:	8bf9      	ldrh	r1, [r7, #30]
 800d83e:	4610      	mov	r0, r2
 800d840:	4798      	blx	r3
                }
                break;
 800d842:	e08a      	b.n	800d95a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d103      	bne.n	800d85a <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800d852:	2301      	movs	r3, #1
 800d854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d858:	e011      	b.n	800d87e <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d866:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800d86c:	8812      	ldrh	r2, [r2, #0]
 800d86e:	4798      	blx	r3
 800d870:	6238      	str	r0, [r7, #32]
                    if (!result) {
 800d872:	6a3b      	ldr	r3, [r7, #32]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d102      	bne.n	800d87e <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 800d878:	2302      	movs	r3, #2
 800d87a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d888:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800d892:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800d894:	2301      	movs	r3, #1
 800d896:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d898:	e060      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d8a4:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b0:	3306      	adds	r3, #6
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d8ba:	e04f      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d8c6:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d2:	3306      	adds	r3, #6
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d8dc:	e03e      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d8e8:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f4:	3306      	adds	r3, #6
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d8fe:	e02d      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d90a:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	3306      	adds	r3, #6
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800d91c:	2301      	movs	r3, #1
 800d91e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d920:	e01c      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800d92c:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800d938:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 800d93a:	2301      	movs	r3, #1
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d93e:	e00d      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d944:	224f      	movs	r2, #79	; 0x4f
 800d946:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800d948:	2301      	movs	r3, #1
 800d94a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d94c:	e006      	b.n	800d95c <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 800d94e:	bf00      	nop
 800d950:	e004      	b.n	800d95c <CO_LSSslave_process+0x400>
                    break;
 800d952:	bf00      	nop
 800d954:	e002      	b.n	800d95c <CO_LSSslave_process+0x400>
                    break;
 800d956:	bf00      	nop
 800d958:	e000      	b.n	800d95c <CO_LSSslave_process+0x400>
                break;
 800d95a:	bf00      	nop
            }
        }

        if (CANsend) {
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96a:	4619      	mov	r1, r3
 800d96c:	4610      	mov	r0, r2
 800d96e:	f005 fac3 	bl	8012ef8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3730      	adds	r7, #48	; 0x30
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	080224a8 	.word	0x080224a8

0800d988 <CO_fifo_reset>:
CO_fifo_reset(CO_fifo_t* fifo) {
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d009      	beq.n	800d9aa <CO_fifo_reset+0x22>
        fifo->readPtr = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	609a      	str	r2, [r3, #8]
        fifo->started = false;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	615a      	str	r2, [r3, #20]
    return;
 800d9a8:	bf00      	nop
 800d9aa:	bf00      	nop
}
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <CO_fifo_purge>:
CO_fifo_purge(CO_fifo_t* fifo) {
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
    if (fifo != NULL && fifo->readPtr != fifo->writePtr) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00d      	beq.n	800d9e0 <CO_fifo_purge+0x2a>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68da      	ldr	r2, [r3, #12]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d007      	beq.n	800d9e0 <CO_fifo_purge+0x2a>
        fifo->readPtr = 0;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	609a      	str	r2, [r3, #8]
        return true;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e000      	b.n	800d9e2 <CO_fifo_purge+0x2c>
    return false;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <CO_fifo_getOccupied>:
CO_fifo_getOccupied(CO_fifo_t* fifo) {
 800d9ee:	b480      	push	{r7}
 800d9f0:	b085      	sub	sp, #20
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	da05      	bge.n	800da16 <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	461a      	mov	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]
    return (size_t)sizeOccupied;
 800da16:	68fb      	ldr	r3, [r7, #12]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <CO_GTWA_init>:
			CO_LSSmaster_t* LSSmaster,
#endif
#if (((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0) || defined CO_DOXYGEN
			CO_LEDs_t* LEDs,
#endif
			uint8_t dummy) {
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	4613      	mov	r3, r2
 800da32:	80fb      	strh	r3, [r7, #6]
    						(void)dummy;
    /* verify arguments */
    if ((gtwa == NULL)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00e      	beq.n	800da58 <CO_GTWA_init+0x34>
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        || (SDO_C == NULL) || (SDOclientTimeoutTime_ms == 0U)
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <CO_GTWA_init+0x34>
 800da40:	88fb      	ldrh	r3, [r7, #6]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        || (NMT == NULL)
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d005      	beq.n	800da58 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        || (LSSmaster == NULL)
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <CO_GTWA_init+0x34>
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        || (LEDs == NULL)
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d102      	bne.n	800da5e <CO_GTWA_init+0x3a>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800da58:	f04f 33ff 	mov.w	r3, #4294967295
 800da5c:	e037      	b.n	800dace <CO_GTWA_init+0xaa>
    }

    /* clear the object */
    (void)memset(gtwa, 0, sizeof(CO_GTWA_t));
 800da5e:	f44f 7215 	mov.w	r2, #596	; 0x254
 800da62:	2100      	movs	r1, #0
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f011 fde9 	bl	801f63c <memset>

    /* initialize variables */
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
    gtwa->SDO_C = SDO_C;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    gtwa->SDOtimeoutTime = SDOclientTimeoutTime_ms;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	88fa      	ldrh	r2, [r7, #6]
 800da76:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
    gtwa->SDOblockTransferEnable = SDOclientBlockTransfer;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
    gtwa->NMT = NMT;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	69ba      	ldr	r2, [r7, #24]
 800da86:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
    gtwa->LSSmaster = LSSmaster;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	69fa      	ldr	r2, [r7, #28]
 800da8e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
    gtwa->LEDs = LEDs;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a3a      	ldr	r2, [r7, #32]
 800da96:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
#endif
    gtwa->net_default = -1;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f04f 32ff 	mov.w	r2, #4294967295
 800daa0:	60da      	str	r2, [r3, #12]
    gtwa->node_default = -1;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daa8:	821a      	strh	r2, [r3, #16]
    gtwa->state = CO_GTWA_ST_IDLE;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
    gtwa->respHold = false;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

    CO_fifo_init(&gtwa->commFifo, &gtwa->commBuf[0], CO_CONFIG_GTWA_COMM_BUF_SIZE + 1);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f103 0018 	add.w	r0, r3, #24
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3334      	adds	r3, #52	; 0x34
 800dac4:	22c9      	movs	r2, #201	; 0xc9
 800dac6:	4619      	mov	r1, r3
 800dac8:	f7fc f97e 	bl	8009dc8 <CO_fifo_init>

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LOG) != 0
    CO_fifo_init(&gtwa->logFifo, &gtwa->logBuf[0], CO_CONFIG_GTWA_LOG_BUF_SIZE + 1);
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG) */

    return CO_ERROR_NO;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <getU32>:
    "                                   \r"};
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

/* Get uint32 number from token, verify limits and set *err if necessary */
static inline uint32_t
getU32(char* token, uint32_t min, uint32_t max, bool_t* err) {
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b086      	sub	sp, #24
 800dada:	af00      	add	r7, sp, #0
 800dadc:	60f8      	str	r0, [r7, #12]
 800dade:	60b9      	str	r1, [r7, #8]
 800dae0:	607a      	str	r2, [r7, #4]
 800dae2:	603b      	str	r3, [r7, #0]
    char* sRet;
    uint32_t num = strtoul(token, &sRet, 0);
 800dae4:	f107 0310 	add.w	r3, r7, #16
 800dae8:	2200      	movs	r2, #0
 800daea:	4619      	mov	r1, r3
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f011 f937 	bl	801ed60 <strtoul>
 800daf2:	6178      	str	r0, [r7, #20]

    if ((sRet != strchr(token, (int32_t)'\0')) || (num < min) || (num > max)) {
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7f2 fbcb 	bl	8000290 <strlen>
 800dafa:	4603      	mov	r3, r0
 800dafc:	461a      	mov	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	441a      	add	r2, r3
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	429a      	cmp	r2, r3
 800db06:	d107      	bne.n	800db18 <getU32+0x42>
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d303      	bcc.n	800db18 <getU32+0x42>
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d902      	bls.n	800db1e <getU32+0x48>
        *err = true;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2201      	movs	r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
    }

    return num;
 800db1e:	697b      	ldr	r3, [r7, #20]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <checkNetNode>:

/* Verify net and node, return true on error */
static bool_t
checkNetNode(CO_GTWA_t* gtwa, int32_t net, int16_t node, uint8_t NodeMin, CO_GTWA_respErrorCode_t* errCode) {
 800db28:	b480      	push	{r7}
 800db2a:	b087      	sub	sp, #28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	4611      	mov	r1, r2
 800db34:	461a      	mov	r2, r3
 800db36:	460b      	mov	r3, r1
 800db38:	80fb      	strh	r3, [r7, #6]
 800db3a:	4613      	mov	r3, r2
 800db3c:	717b      	strb	r3, [r7, #5]
    bool_t e = false;
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]
    CO_GTWA_respErrorCode_t eCode;

    if (node == -1) {
 800db42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4a:	d104      	bne.n	800db56 <checkNetNode+0x2e>
        eCode = CO_GTWA_respErrorNoDefaultNodeSet;
 800db4c:	2369      	movs	r3, #105	; 0x69
 800db4e:	827b      	strh	r3, [r7, #18]
        e = true;
 800db50:	2301      	movs	r3, #1
 800db52:	617b      	str	r3, [r7, #20]
 800db54:	e015      	b.n	800db82 <checkNetNode+0x5a>
    } else if ((node < (int16_t)NodeMin) || (node > (int16_t)127)) {
 800db56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800db5a:	797b      	ldrb	r3, [r7, #5]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	db03      	blt.n	800db68 <checkNetNode+0x40>
 800db60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db64:	2b7f      	cmp	r3, #127	; 0x7f
 800db66:	dd04      	ble.n	800db72 <checkNetNode+0x4a>
        eCode = CO_GTWA_respErrorUnsupportedNode;
 800db68:	236b      	movs	r3, #107	; 0x6b
 800db6a:	827b      	strh	r3, [r7, #18]
        e = true;
 800db6c:	2301      	movs	r3, #1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e007      	b.n	800db82 <checkNetNode+0x5a>
        eCode = CO_GTWA_respErrorUnsupportedNet;
        e = true;
    }
#endif
    else {
        gtwa->net = (uint16_t)net;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	b29a      	uxth	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	825a      	strh	r2, [r3, #18]
        gtwa->node = (uint8_t)node;
 800db7a:	88fb      	ldrh	r3, [r7, #6]
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	751a      	strb	r2, [r3, #20]
    }
    if (e) {
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <checkNetNode+0x66>
        *errCode = eCode;
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	8a7a      	ldrh	r2, [r7, #18]
 800db8c:	801a      	strh	r2, [r3, #0]
    }
    return e;
 800db8e:	697b      	ldr	r3, [r7, #20]
}
 800db90:	4618      	mov	r0, r3
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <checkNet>:

/* Verify net, return true on error */
static bool_t
checkNet(CO_GTWA_t* gtwa, int32_t net, CO_GTWA_respErrorCode_t* errCode) {
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
    return e;
#else
    (void)errCode; /* unused */
#define CO_CONFIG_GTW_NET_MIN 0
#define CO_CONFIG_GTW_NET_MAX 0xFFFF
    gtwa->net = (uint16_t)net;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	825a      	strh	r2, [r3, #18]
    return false;
 800dbb0:	2300      	movs	r3, #0
#endif
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
	...

0800dbc0 <CO_GTWA_getDataType>:
};

/* get data type from token */
static const CO_GTWA_dataType_t*
CO_GTWA_getDataType(char* token, bool_t* err)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
    if ((token != NULL) && (*err == false))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d01f      	beq.n	800dc10 <CO_GTWA_getDataType+0x50>
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d11b      	bne.n	800dc10 <CO_GTWA_getDataType+0x50>
    {
        uint32_t i;
        uint32_t len = sizeof(dataTypes) / sizeof(CO_GTWA_dataType_t);
 800dbd8:	2314      	movs	r3, #20
 800dbda:	613b      	str	r3, [r7, #16]

        for (i = 0; i < len; i++)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	617b      	str	r3, [r7, #20]
 800dbe0:	e012      	b.n	800dc08 <CO_GTWA_getDataType+0x48>
        {
        const CO_GTWA_dataType_t* dt = &dataTypes[i];
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	011b      	lsls	r3, r3, #4
 800dbe6:	4a0e      	ldr	r2, [pc, #56]	; (800dc20 <CO_GTWA_getDataType+0x60>)
 800dbe8:	4413      	add	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]
        if (strcmp(token, dt->syntax) == 0) {return dt;}
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7f2 faec 	bl	80001d0 <strcmp>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <CO_GTWA_getDataType+0x42>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	e00a      	b.n	800dc18 <CO_GTWA_getDataType+0x58>
        for (i = 0; i < len; i++)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	3301      	adds	r3, #1
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	697a      	ldr	r2, [r7, #20]
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d3e8      	bcc.n	800dbe2 <CO_GTWA_getDataType+0x22>
        }
    }
    *err = true;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2201      	movs	r2, #1
 800dc14:	601a      	str	r2, [r3, #0]
    return NULL;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	08023224 	.word	0x08023224

0800dc24 <respBufTransfer>:


/* transfer response buffer and verify if all bytes was read. Return true on
 * success, or false, if communication is broken. */
static bool_t
respBufTransfer(CO_GTWA_t* gtwa) {
 800dc24:	b590      	push	{r4, r7, lr}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    uint8_t connectionOK = 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	72fb      	strb	r3, [r7, #11]

    if (gtwa->readCallback == NULL) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10c      	bne.n	800dc52 <respBufTransfer+0x2e>
        /* no callback registered, just purge the response */
        gtwa->respBufOffset = 0;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
        gtwa->respBufCount = 0;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
        gtwa->respHold = false;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800dc50:	e038      	b.n	800dcc4 <respBufTransfer+0xa0>
    } else {
        /* transfer response to the application */
        size_t countRead = gtwa->readCallback(gtwa->readCallbackObject,
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681c      	ldr	r4, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6858      	ldr	r0, [r3, #4]
                                              (const char*)&gtwa->respBuf[gtwa->respBufOffset], gtwa->respBufCount,
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800dc60:	33f8      	adds	r3, #248	; 0xf8
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	1d59      	adds	r1, r3, #5
        size_t countRead = gtwa->readCallback(gtwa->readCallbackObject,
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800dc6e:	f107 030b 	add.w	r3, r7, #11
 800dc72:	47a0      	blx	r4
 800dc74:	60f8      	str	r0, [r7, #12]
                                              &connectionOK);

        if (countRead < gtwa->respBufCount) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d214      	bcs.n	800dcac <respBufTransfer+0x88>
            gtwa->respBufOffset += countRead;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	441a      	add	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            gtwa->respBufCount -= countRead;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	1ad2      	subs	r2, r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            gtwa->respHold = true;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800dcaa:	e00b      	b.n	800dcc4 <respBufTransfer+0xa0>
        } else {
            gtwa->respBufOffset = 0;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            gtwa->respBufCount = 0;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
            gtwa->respHold = false;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        }
    }
    return connectionOK != 0U;
 800dcc4:	7afb      	ldrb	r3, [r7, #11]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	bf14      	ite	ne
 800dcca:	2301      	movne	r3, #1
 800dccc:	2300      	moveq	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd90      	pop	{r4, r7, pc}

0800dcd8 <responseWithError>:
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
#endif /* CO_CONFIG_GTW_ASCII_ERROR_DESC_STRINGS */

static void
responseWithError(CO_GTWA_t* gtwa, CO_GTWA_respErrorCode_t respErrorCode)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	807b      	strh	r3, [r7, #2]
    uint32_t i;
    uint32_t len = sizeof(errorDescs) / sizeof(errorDescs_t);
 800dce4:	231b      	movs	r3, #27
 800dce6:	60fb      	str	r3, [r7, #12]
    const char* desc = "-";
 800dce8:	4b1a      	ldr	r3, [pc, #104]	; (800dd54 <responseWithError+0x7c>)
 800dcea:	613b      	str	r3, [r7, #16]

    for (i = 0; i < len; i++)
 800dcec:	2300      	movs	r3, #0
 800dcee:	617b      	str	r3, [r7, #20]
 800dcf0:	e010      	b.n	800dd14 <responseWithError+0x3c>
    {
        const errorDescs_t* ed = &errorDescs[i];
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	00db      	lsls	r3, r3, #3
 800dcf6:	4a18      	ldr	r2, [pc, #96]	; (800dd58 <responseWithError+0x80>)
 800dcf8:	4413      	add	r3, r2
 800dcfa:	60bb      	str	r3, [r7, #8]
        if ((CO_GTWA_respErrorCode_t)ed->code == respErrorCode) { desc = ed->desc;}
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	887a      	ldrh	r2, [r7, #2]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d102      	bne.n	800dd0e <responseWithError+0x36>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++)
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	3301      	adds	r3, #1
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d3ea      	bcc.n	800dcf2 <responseWithError+0x1a>

    }

    gtwa->respBufCount = (size_t)snprintf (	gtwa->respBuf,
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
    										CO_GTWA_RESP_BUF_SIZE,
											"[%" PRId32 "] ERROR:%d #%s\r\n",
                                          (int32_t)gtwa->sequence,
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689b      	ldr	r3, [r3, #8]
    gtwa->respBufCount = (size_t)snprintf (	gtwa->respBuf,
 800dd26:	4619      	mov	r1, r3
 800dd28:	887b      	ldrh	r3, [r7, #2]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	9201      	str	r2, [sp, #4]
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	460b      	mov	r3, r1
 800dd32:	4a0a      	ldr	r2, [pc, #40]	; (800dd5c <responseWithError+0x84>)
 800dd34:	21c8      	movs	r1, #200	; 0xc8
 800dd36:	f011 fb3b 	bl	801f3b0 <sniprintf>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
										  (int32_t)respErrorCode,
										  desc);
    (void)respBufTransfer(gtwa);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff ff6d 	bl	800dc24 <respBufTransfer>
}
 800dd4a:	bf00      	nop
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	08021cd0 	.word	0x08021cd0
 800dd58:	08023364 	.word	0x08023364
 800dd5c:	08021cd4 	.word	0x08021cd4

0800dd60 <responseWithErrorSDO>:
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
static void
responseWithErrorSDO (	CO_GTWA_t* gtwa,
						CO_SDO_abortCode_t abortCode,
						bool_t postponed)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	; 0x28
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t len = sizeof(errorDescsSDO) / sizeof(errorDescs_t);
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	617b      	str	r3, [r7, #20]
    const char* desc = "-";
 800dd70:	4b23      	ldr	r3, [pc, #140]	; (800de00 <responseWithErrorSDO+0xa0>)
 800dd72:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < len; i++)
 800dd74:	2300      	movs	r3, #0
 800dd76:	61fb      	str	r3, [r7, #28]
 800dd78:	e00f      	b.n	800dd9a <responseWithErrorSDO+0x3a>
    {
      const errorDescs_t* ed = &errorDescsSDO[i];
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	00db      	lsls	r3, r3, #3
 800dd7e:	4a21      	ldr	r2, [pc, #132]	; (800de04 <responseWithErrorSDO+0xa4>)
 800dd80:	4413      	add	r3, r2
 800dd82:	613b      	str	r3, [r7, #16]
      if ((CO_SDO_abortCode_t)ed->code == abortCode) { desc = ed->desc; }
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d102      	bne.n	800dd94 <responseWithErrorSDO+0x34>
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++)
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	3301      	adds	r3, #1
 800dd98:	61fb      	str	r3, [r7, #28]
 800dd9a:	69fa      	ldr	r2, [r7, #28]
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d3eb      	bcc.n	800dd7a <responseWithErrorSDO+0x1a>
    }

    if (!postponed)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d114      	bne.n	800ddd2 <responseWithErrorSDO+0x72>
    {
        gtwa->respBufCount = (size_t)snprintf( gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                               "[%" PRId32 "] ERROR:0x%08X #%s\r\n",
											   (int32_t)gtwa->sequence,
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	689b      	ldr	r3, [r3, #8]
        gtwa->respBufCount = (size_t)snprintf( gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	9301      	str	r3, [sp, #4]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	4a12      	ldr	r2, [pc, #72]	; (800de08 <responseWithErrorSDO+0xa8>)
 800ddc0:	21c8      	movs	r1, #200	; 0xc8
 800ddc2:	f011 faf5 	bl	801f3b0 <sniprintf>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800ddd0:	e00e      	b.n	800ddf0 <responseWithErrorSDO+0x90>
                                               (uint32_t)abortCode,
											   desc);
    } else {
            gtwa->respBufCount = (size_t)snprintf ( gtwa->respBuf,
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	4a0b      	ldr	r2, [pc, #44]	; (800de0c <responseWithErrorSDO+0xac>)
 800dde0:	21c8      	movs	r1, #200	; 0xc8
 800dde2:	f011 fae5 	bl	801f3b0 <sniprintf>
 800dde6:	4603      	mov	r3, r0
 800dde8:	461a      	mov	r2, r3
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
													"\n...ERROR:0x%08X #%s\r\n",
													(uint32_t)abortCode,
													desc);
    	   }

    (void)respBufTransfer(gtwa);
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f7ff ff17 	bl	800dc24 <respBufTransfer>
}
 800ddf6:	bf00      	nop
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	08021cd0 	.word	0x08021cd0
 800de04:	0802343c 	.word	0x0802343c
 800de08:	08021cec 	.word	0x08021cec
 800de0c:	08021d08 	.word	0x08021d08

0800de10 <responseWithOK>:
}
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_ERROR_DESC */

static inline void
responseWithOK(CO_GTWA_t* gtwa) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "[%" PRId32 "] OK\r\n",
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                          (int32_t)gtwa->sequence);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	689b      	ldr	r3, [r3, #8]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "[%" PRId32 "] OK\r\n",
 800de22:	4a08      	ldr	r2, [pc, #32]	; (800de44 <responseWithOK+0x34>)
 800de24:	21c8      	movs	r1, #200	; 0xc8
 800de26:	f011 fac3 	bl	801f3b0 <sniprintf>
 800de2a:	4603      	mov	r3, r0
 800de2c:	461a      	mov	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    (void)respBufTransfer(gtwa);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff fef5 	bl	800dc24 <respBufTransfer>
}
 800de3a:	bf00      	nop
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	08021d20 	.word	0x08021d20

0800de48 <responseWithEmpty>:

static inline void
responseWithEmpty(CO_GTWA_t* gtwa) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "\r\n");
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	33fd      	adds	r3, #253	; 0xfd
 800de54:	4a08      	ldr	r2, [pc, #32]	; (800de78 <responseWithEmpty+0x30>)
 800de56:	21c8      	movs	r1, #200	; 0xc8
 800de58:	4618      	mov	r0, r3
 800de5a:	f011 faa9 	bl	801f3b0 <sniprintf>
 800de5e:	4603      	mov	r3, r0
 800de60:	461a      	mov	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    (void)respBufTransfer(gtwa);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fedb 	bl	800dc24 <respBufTransfer>
}
 800de6e:	bf00      	nop
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	08021d2c 	.word	0x08021d2c

0800de7c <responseLSS>:

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
static void
responseLSS(CO_GTWA_t* gtwa, CO_LSSmaster_return_t lss_ret) {
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	460b      	mov	r3, r1
 800de86:	70fb      	strb	r3, [r7, #3]
    if (lss_ret == CO_LSSmaster_OK) {
 800de88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d103      	bne.n	800de98 <responseLSS+0x1c>
        responseWithOK(gtwa);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ffbd 	bl	800de10 <responseWithOK>
        } else {
            respErrorCode = CO_GTWA_respErrorInternalState;
        }
        responseWithError(gtwa, respErrorCode);
    }
}
 800de96:	e01c      	b.n	800ded2 <responseLSS+0x56>
        if ((lss_ret == CO_LSSmaster_TIMEOUT) || (lss_ret == CO_LSSmaster_SCAN_NOACK)) {
 800de98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea0:	d004      	beq.n	800deac <responseLSS+0x30>
 800dea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dea6:	f113 0f04 	cmn.w	r3, #4
 800deaa:	d102      	bne.n	800deb2 <responseLSS+0x36>
            respErrorCode = CO_GTWA_respErrorTimeOut;
 800deac:	2367      	movs	r3, #103	; 0x67
 800deae:	81fb      	strh	r3, [r7, #14]
 800deb0:	e00a      	b.n	800dec8 <responseLSS+0x4c>
        } else if (lss_ret == CO_LSSmaster_OK_MANUFACTURER) {
 800deb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800deb6:	f113 0f66 	cmn.w	r3, #102	; 0x66
 800deba:	d103      	bne.n	800dec4 <responseLSS+0x48>
            respErrorCode = CO_GTWA_respErrorLSSmanufacturer;
 800debc:	f240 13f5 	movw	r3, #501	; 0x1f5
 800dec0:	81fb      	strh	r3, [r7, #14]
 800dec2:	e001      	b.n	800dec8 <responseLSS+0x4c>
            respErrorCode = CO_GTWA_respErrorInternalState;
 800dec4:	2366      	movs	r3, #102	; 0x66
 800dec6:	81fb      	strh	r3, [r7, #14]
        responseWithError(gtwa, respErrorCode);
 800dec8:	89fb      	ldrh	r3, [r7, #14]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ff03 	bl	800dcd8 <responseWithError>
}
 800ded2:	bf00      	nop
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <convertToLower>:
#endif

static inline void
convertToLower(char* token, size_t maxCount) {
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
    size_t i;
    char* c = &token[0];
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	613b      	str	r3, [r7, #16]

    for (i = 0; i < maxCount; i++) {
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e01c      	b.n	800df2a <convertToLower+0x4e>
        if (*c == '\0') {
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01d      	beq.n	800df34 <convertToLower+0x58>
            break;
        } else {
            *c = (char)tolower((int32_t)*c);
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3301      	adds	r3, #1
 800df02:	4a10      	ldr	r2, [pc, #64]	; (800df44 <convertToLower+0x68>)
 800df04:	4413      	add	r3, r2
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	f003 0303 	and.w	r3, r3, #3
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d102      	bne.n	800df16 <convertToLower+0x3a>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3320      	adds	r3, #32
 800df14:	e000      	b.n	800df18 <convertToLower+0x3c>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	701a      	strb	r2, [r3, #0]
        }
        c++;
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	3301      	adds	r3, #1
 800df22:	613b      	str	r3, [r7, #16]
    for (i = 0; i < maxCount; i++) {
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3301      	adds	r3, #1
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	697a      	ldr	r2, [r7, #20]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d3de      	bcc.n	800def0 <convertToLower+0x14>
    }
}
 800df32:	e000      	b.n	800df36 <convertToLower+0x5a>
            break;
 800df34:	bf00      	nop
}
 800df36:	bf00      	nop
 800df38:	371c      	adds	r7, #28
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	08024078 	.word	0x08024078

0800df48 <CO_GTWA_process>:

/*******************************************************************************
 * PROCESS FUNCTION
 ******************************************************************************/
void
CO_GTWA_process(CO_GTWA_t* gtwa, bool_t enable, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800df48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df4a:	b0f9      	sub	sp, #484	; 0x1e4
 800df4c:	af06      	add	r7, sp, #24
 800df4e:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 800df52:	f5a4 74de 	sub.w	r4, r4, #444	; 0x1bc
 800df56:	6020      	str	r0, [r4, #0]
 800df58:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 800df5c:	f5a0 70e0 	sub.w	r0, r0, #448	; 0x1c0
 800df60:	6001      	str	r1, [r0, #0]
 800df62:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 800df66:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 800df6a:	600a      	str	r2, [r1, #0]
 800df6c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800df70:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800df74:	6013      	str	r3, [r2, #0]
    (void)timerNext_us; /* may be unused */

    bool_t err = false; /* syntax or other error, true or false, I/O variable */
 800df76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
    uint8_t closed;     /* indication of command delimiter, I/O variable */
    CO_GTWA_respErrorCode_t respErrorCode = CO_GTWA_respErrorNone;
 800df82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800df8a:	2200      	movs	r2, #0
 800df8c:	801a      	strh	r2, [r3, #0]

    if (gtwa == NULL) {
 800df8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800df92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f003 84fb 	beq.w	8011994 <CO_GTWA_process+0x3a4c>
        return;
    }

    if (!enable) {
 800df9e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dfa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d112      	bne.n	800dfd2 <CO_GTWA_process+0x8a>
        gtwa->state = CO_GTWA_ST_IDLE;
 800dfac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dfb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
        CO_fifo_reset(&gtwa->commFifo);
 800dfbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dfc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3318      	adds	r3, #24
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff fcdd 	bl	800d988 <CO_fifo_reset>
        return;
 800dfce:	f003 bce4 	b.w	801199a <CO_GTWA_process+0x3a52>
    }

    /* If there is some more output data for application, read them first. Hold on this state, if necessary. */
    if (gtwa->respHold) {
 800dfd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dfd6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f002 8181 	beq.w	80102e8 <CO_GTWA_process+0x23a0>
        timeDifference_us += gtwa->timeDifference_us_cumulative;
 800dfe6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dfea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800dff4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dff8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800dffc:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 800e000:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 800e004:	6809      	ldr	r1, [r1, #0]
 800e006:	440a      	add	r2, r1
 800e008:	601a      	str	r2, [r3, #0]

        (void)respBufTransfer(gtwa);
 800e00a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e00e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	f7ff fe06 	bl	800dc24 <respBufTransfer>
        if (gtwa->respHold) {
 800e018:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e01c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00d      	beq.n	800e046 <CO_GTWA_process+0xfe>
            gtwa->timeDifference_us_cumulative = timeDifference_us;
 800e02a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e02e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800e038:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800e03c:	6812      	ldr	r2, [r2, #0]
 800e03e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            return;
 800e042:	f003 bcaa 	b.w	801199a <CO_GTWA_process+0x3a52>
        } else {
            gtwa->timeDifference_us_cumulative = 0;
 800e046:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e04a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2200      	movs	r2, #0
 800e052:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    /***************************************************************************
     * COMMAND PARSER
     ***************************************************************************/
    /* if idle, search for new command, skip comments or empty lines */
    while (CO_fifo_CommSearch(&gtwa->commFifo, false) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 800e056:	f002 b947 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        char tok[20];
        size_t n;
        uint32_t ui[3];
        int32_t i;
        int32_t net = gtwa->net_default;
 800e05a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e05e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        int16_t node = gtwa->node_default;
 800e06a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e06e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	8a1b      	ldrh	r3, [r3, #16]
 800e076:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be

        /* parse mandatory token '"["<sequence>"]"' */
        closed = 0xFFU;
 800e07a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e07e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e082:	22ff      	movs	r2, #255	; 0xff
 800e084:	701a      	strb	r2, [r3, #0]
        n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e086:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e08a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f103 0018 	add.w	r0, r3, #24
 800e094:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e098:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e09c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	2214      	movs	r2, #20
 800e0a6:	f7fc f903 	bl	800a2b0 <CO_fifo_readToken>
 800e0aa:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
        /* Break if error in token or token was found, but closed with command delimiter. */
        if (err || ((n > 0U) && (closed != 0U))) {
 800e0ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e0b2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <CO_GTWA_process+0x18a>
 800e0bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00e      	beq.n	800e0e2 <CO_GTWA_process+0x19a>
 800e0c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e0c8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d007      	beq.n	800e0e2 <CO_GTWA_process+0x19a>
            err = true;
 800e0d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e0d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e0da:	2201      	movs	r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]
            break;
 800e0de:	f002 b95a 	b.w	8010396 <CO_GTWA_process+0x244e>
        }
        /* If empty line or just comment, continue with next command */
        else if ((n == 0U) && (closed != 0U)) {
 800e0e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10f      	bne.n	800e10a <CO_GTWA_process+0x1c2>
 800e0ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e0ee:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d008      	beq.n	800e10a <CO_GTWA_process+0x1c2>
            responseWithEmpty(gtwa);
 800e0f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e0fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	f7ff fea1 	bl	800de48 <responseWithEmpty>
 800e106:	f002 b8ef 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            continue;
        } else { /* MISRA C 2004 14.10 */
        }

        if (tok[0] != '[') {
 800e10a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e10e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	2b5b      	cmp	r3, #91	; 0x5b
 800e116:	d007      	beq.n	800e128 <CO_GTWA_process+0x1e0>
            err = true;
 800e118:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e11c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e120:	2201      	movs	r2, #1
 800e122:	601a      	str	r2, [r3, #0]
            break;
 800e124:	f002 b937 	b.w	8010396 <CO_GTWA_process+0x244e>
        }
        if (tok[strlen(tok) - 1U] != ']') {
 800e128:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f2 f8af 	bl	8000290 <strlen>
 800e132:	4603      	mov	r3, r0
 800e134:	3b01      	subs	r3, #1
 800e136:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800e13a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800e13e:	5cd3      	ldrb	r3, [r2, r3]
 800e140:	2b5d      	cmp	r3, #93	; 0x5d
 800e142:	d007      	beq.n	800e154 <CO_GTWA_process+0x20c>
            err = true;
 800e144:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e148:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e14c:	2201      	movs	r2, #1
 800e14e:	601a      	str	r2, [r3, #0]
            break;
 800e150:	f002 b921 	b.w	8010396 <CO_GTWA_process+0x244e>
        }
        tok[strlen(tok) - 1U] = '\0';
 800e154:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f2 f899 	bl	8000290 <strlen>
 800e15e:	4603      	mov	r3, r0
 800e160:	3b01      	subs	r3, #1
 800e162:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800e166:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800e16a:	2100      	movs	r1, #0
 800e16c:	54d1      	strb	r1, [r2, r3]
        gtwa->sequence = getU32(tok + 1, 0, 0xFFFFFFFFU, &err);
 800e16e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e172:	3001      	adds	r0, #1
 800e174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e178:	f04f 32ff 	mov.w	r2, #4294967295
 800e17c:	2100      	movs	r1, #0
 800e17e:	f7ff fcaa 	bl	800dad6 <getU32>
 800e182:	4602      	mov	r2, r0
 800e184:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e188:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	609a      	str	r2, [r3, #8]
        if (err) {
 800e190:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e194:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f042 80bc 	bne.w	8010318 <CO_GTWA_process+0x23d0>
            break;
        }

        /* parse optional tokens '[[<net>] <node>]', both numerical. Then
         * follows mandatory token <command>, which is not numerical. */
        for (i = 0; i < 3; i++) {
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800e1a6:	e064      	b.n	800e272 <CO_GTWA_process+0x32a>
            closed = 0xFFU;
 800e1a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e1ac:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e1b0:	22ff      	movs	r2, #255	; 0xff
 800e1b2:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e1b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e1b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f103 0018 	add.w	r0, r3, #24
 800e1c2:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e1c6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e1ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	2214      	movs	r2, #20
 800e1d4:	f7fc f86c 	bl	800a2b0 <CO_fifo_readToken>
 800e1d8:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            if (err || (n == 0U)) {
 800e1dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e1e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <CO_GTWA_process+0x2aa>
 800e1ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <CO_GTWA_process+0x2b8>
                /* empty token, break on error */
                err = true;
 800e1f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e1f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]
                break;
 800e1fe:	e040      	b.n	800e282 <CO_GTWA_process+0x33a>
            } else if ((int32_t)isdigit((int)tok[0]) == 0) {
 800e200:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e204:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	3301      	adds	r3, #1
 800e20c:	4aa1      	ldr	r2, [pc, #644]	; (800e494 <CO_GTWA_process+0x54c>)
 800e20e:	4413      	add	r3, r2
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	f003 0304 	and.w	r3, r3, #4
 800e216:	2b00      	cmp	r3, #0
 800e218:	d030      	beq.n	800e27c <CO_GTWA_process+0x334>
                /* <command> found */
                break;
            } else if (closed != 0U) {
 800e21a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e21e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <CO_GTWA_process+0x2ee>
                /* numerical value must not be closed */
                err = true;
 800e228:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e22c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e230:	2201      	movs	r2, #1
 800e232:	601a      	str	r2, [r3, #0]
                break;
 800e234:	e025      	b.n	800e282 <CO_GTWA_process+0x33a>
            } else { /* MISRA C 2004 14.10 */
            }

            ui[i] = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800e236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e23a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	2100      	movs	r1, #0
 800e244:	f7ff fc47 	bl	800dad6 <getU32>
 800e248:	4601      	mov	r1, r0
 800e24a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e24e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e252:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800e256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (err) {
 800e25a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e25e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <CO_GTWA_process+0x338>
        for (i = 0; i < 3; i++) {
 800e268:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e26c:	3301      	adds	r3, #1
 800e26e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800e272:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e276:	2b02      	cmp	r3, #2
 800e278:	dd96      	ble.n	800e1a8 <CO_GTWA_process+0x260>
 800e27a:	e002      	b.n	800e282 <CO_GTWA_process+0x33a>
                break;
 800e27c:	bf00      	nop
 800e27e:	e000      	b.n	800e282 <CO_GTWA_process+0x33a>
                break;
 800e280:	bf00      	nop
            }
        }
        if (err) {
 800e282:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e286:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f042 8045 	bne.w	801031c <CO_GTWA_process+0x23d4>
            break;
        }

        switch (i) {
 800e292:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e296:	2b03      	cmp	r3, #3
 800e298:	d865      	bhi.n	800e366 <CO_GTWA_process+0x41e>
 800e29a:	a201      	add	r2, pc, #4	; (adr r2, 800e2a0 <CO_GTWA_process+0x358>)
 800e29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a0:	0800e367 	.word	0x0800e367
 800e2a4:	0800e2b1 	.word	0x0800e2b1
 800e2a8:	0800e2e9 	.word	0x0800e2e9
 800e2ac:	0800e359 	.word	0x0800e359
            case 0: /* only <command> (pointed by token) */ break;
            case 1: /* <node> and <command> tokens */
                if (ui[0] > 127U) {
 800e2b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b7f      	cmp	r3, #127	; 0x7f
 800e2bc:	d90c      	bls.n	800e2d8 <CO_GTWA_process+0x390>
                    err = true;
 800e2be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
 800e2ca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e2d2:	226b      	movs	r2, #107	; 0x6b
 800e2d4:	801a      	strh	r2, [r3, #0]
                } else {
                    node = (int16_t)ui[0];
                }
                break;
 800e2d6:	e047      	b.n	800e368 <CO_GTWA_process+0x420>
                    node = (int16_t)ui[0];
 800e2d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
                break;
 800e2e6:	e03f      	b.n	800e368 <CO_GTWA_process+0x420>
            case 2: /* <net>, <node> and <command> tokens */
                if (ui[0] > 0xFFFFU) {
 800e2e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f6:	d30c      	bcc.n	800e312 <CO_GTWA_process+0x3ca>
                    err = true;
 800e2f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e2fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e300:	2201      	movs	r2, #1
 800e302:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNet;
 800e304:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e308:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e30c:	226a      	movs	r2, #106	; 0x6a
 800e30e:	801a      	strh	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
                } else {
                    net = (int32_t)ui[0];
                    node = (int16_t)ui[1];
                }
                break;
 800e310:	e02a      	b.n	800e368 <CO_GTWA_process+0x420>
                } else if (ui[1] > 127U) {
 800e312:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e316:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	2b7f      	cmp	r3, #127	; 0x7f
 800e31e:	d90c      	bls.n	800e33a <CO_GTWA_process+0x3f2>
                    err = true;
 800e320:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e324:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e328:	2201      	movs	r2, #1
 800e32a:	601a      	str	r2, [r3, #0]
                    respErrorCode = CO_GTWA_respErrorUnsupportedNode;
 800e32c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e330:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e334:	226b      	movs	r2, #107	; 0x6b
 800e336:	801a      	strh	r2, [r3, #0]
                break;
 800e338:	e016      	b.n	800e368 <CO_GTWA_process+0x420>
                    net = (int32_t)ui[0];
 800e33a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e33e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                    node = (int16_t)ui[1];
 800e348:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e34c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
                break;
 800e356:	e007      	b.n	800e368 <CO_GTWA_process+0x420>
            case 3: /* <command> token contains digit */ err = true; break;
 800e358:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e35c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e360:	2201      	movs	r2, #1
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	e000      	b.n	800e368 <CO_GTWA_process+0x420>
            default:
                /* MISRA C 2004 15.3 */
                break;
 800e366:	bf00      	nop
        }
        if (err) {
 800e368:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e36c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	f041 87d4 	bne.w	8010320 <CO_GTWA_process+0x23d8>
            break;
        }

        /* command is case insensitive */
        convertToLower(tok, sizeof(tok));
 800e378:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e37c:	2114      	movs	r1, #20
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fdac 	bl	800dedc <convertToLower>

        bool_t tok_is_set = strcmp(tok, "set") == 0;
 800e384:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e388:	4943      	ldr	r1, [pc, #268]	; (800e498 <CO_GTWA_process+0x550>)
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7f1 ff20 	bl	80001d0 <strcmp>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	bf0c      	ite	eq
 800e396:	2301      	moveq	r3, #1
 800e398:	2300      	movne	r3, #0
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        bool_t tok_is_read = strcmp(tok, "r") == 0;
 800e3a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e3a4:	493d      	ldr	r1, [pc, #244]	; (800e49c <CO_GTWA_process+0x554>)
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f1 ff12 	bl	80001d0 <strcmp>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	bf0c      	ite	eq
 800e3b2:	2301      	moveq	r3, #1
 800e3b4:	2300      	movne	r3, #0
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        tok_is_read = (strcmp(tok, "read") == 0) || tok_is_read;
 800e3bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e3c0:	4937      	ldr	r1, [pc, #220]	; (800e4a0 <CO_GTWA_process+0x558>)
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7f1 ff04 	bl	80001d0 <strcmp>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <CO_GTWA_process+0x48e>
 800e3ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <CO_GTWA_process+0x492>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e000      	b.n	800e3dc <CO_GTWA_process+0x494>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        bool_t tok_is_write = strcmp(tok, "w") == 0;
 800e3e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e3e4:	492f      	ldr	r1, [pc, #188]	; (800e4a4 <CO_GTWA_process+0x55c>)
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f1 fef2 	bl	80001d0 <strcmp>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	bf0c      	ite	eq
 800e3f2:	2301      	moveq	r3, #1
 800e3f4:	2300      	movne	r3, #0
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
        tok_is_write = (strcmp(tok, "write") == 0) || tok_is_write;
 800e3fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e400:	4929      	ldr	r1, [pc, #164]	; (800e4a8 <CO_GTWA_process+0x560>)
 800e402:	4618      	mov	r0, r3
 800e404:	f7f1 fee4 	bl	80001d0 <strcmp>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <CO_GTWA_process+0x4ce>
 800e40e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <CO_GTWA_process+0x4d2>
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <CO_GTWA_process+0x4d4>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        bool_t tok_is_start = strcmp(tok, "start") == 0;
 800e420:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e424:	4921      	ldr	r1, [pc, #132]	; (800e4ac <CO_GTWA_process+0x564>)
 800e426:	4618      	mov	r0, r3
 800e428:	f7f1 fed2 	bl	80001d0 <strcmp>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bf0c      	ite	eq
 800e432:	2301      	moveq	r3, #1
 800e434:	2300      	movne	r3, #0
 800e436:	b2db      	uxtb	r3, r3
 800e438:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
        bool_t tok_is_stop = strcmp(tok, "stop") == 0;
 800e43c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e440:	491b      	ldr	r1, [pc, #108]	; (800e4b0 <CO_GTWA_process+0x568>)
 800e442:	4618      	mov	r0, r3
 800e444:	f7f1 fec4 	bl	80001d0 <strcmp>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bf0c      	ite	eq
 800e44e:	2301      	moveq	r3, #1
 800e450:	2300      	movne	r3, #0
 800e452:	b2db      	uxtb	r3, r3
 800e454:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
        bool_t tok_is_preop = strcmp(tok, "preop") == 0;
 800e458:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e45c:	4915      	ldr	r1, [pc, #84]	; (800e4b4 <CO_GTWA_process+0x56c>)
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f1 feb6 	bl	80001d0 <strcmp>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	bf0c      	ite	eq
 800e46a:	2301      	moveq	r3, #1
 800e46c:	2300      	movne	r3, #0
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        tok_is_preop = (strcmp(tok, "preoperational") == 0) || tok_is_preop;
 800e474:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e478:	490f      	ldr	r1, [pc, #60]	; (800e4b8 <CO_GTWA_process+0x570>)
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f1 fea8 	bl	80001d0 <strcmp>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d003      	beq.n	800e48e <CO_GTWA_process+0x546>
 800e486:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d016      	beq.n	800e4bc <CO_GTWA_process+0x574>
 800e48e:	2301      	movs	r3, #1
 800e490:	e015      	b.n	800e4be <CO_GTWA_process+0x576>
 800e492:	bf00      	nop
 800e494:	08024078 	.word	0x08024078
 800e498:	08021d30 	.word	0x08021d30
 800e49c:	08021d34 	.word	0x08021d34
 800e4a0:	08021d38 	.word	0x08021d38
 800e4a4:	08021d40 	.word	0x08021d40
 800e4a8:	08021d44 	.word	0x08021d44
 800e4ac:	08021d4c 	.word	0x08021d4c
 800e4b0:	08021d54 	.word	0x08021d54
 800e4b4:	08021d5c 	.word	0x08021d5c
 800e4b8:	08021d64 	.word	0x08021d64
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        bool_t tok_is_reset = strcmp(tok, "reset") == 0;
 800e4c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e4c6:	49b9      	ldr	r1, [pc, #740]	; (800e7ac <CO_GTWA_process+0x864>)
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f1 fe81 	bl	80001d0 <strcmp>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bf0c      	ite	eq
 800e4d4:	2301      	moveq	r3, #1
 800e4d6:	2300      	movne	r3, #0
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        bool_t tok_is_lss_switch_glob = strcmp(tok, "lss_switch_glob") == 0;
 800e4de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e4e2:	49b3      	ldr	r1, [pc, #716]	; (800e7b0 <CO_GTWA_process+0x868>)
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7f1 fe73 	bl	80001d0 <strcmp>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bf0c      	ite	eq
 800e4f0:	2301      	moveq	r3, #1
 800e4f2:	2300      	movne	r3, #0
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        bool_t tok_is_lss_switch_sel = strcmp(tok, "lss_switch_sel") == 0;
 800e4fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e4fe:	49ad      	ldr	r1, [pc, #692]	; (800e7b4 <CO_GTWA_process+0x86c>)
 800e500:	4618      	mov	r0, r3
 800e502:	f7f1 fe65 	bl	80001d0 <strcmp>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bf0c      	ite	eq
 800e50c:	2301      	moveq	r3, #1
 800e50e:	2300      	movne	r3, #0
 800e510:	b2db      	uxtb	r3, r3
 800e512:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        bool_t tok_is_lss_set_node = strcmp(tok, "lss_set_node") == 0;
 800e516:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e51a:	49a7      	ldr	r1, [pc, #668]	; (800e7b8 <CO_GTWA_process+0x870>)
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f1 fe57 	bl	80001d0 <strcmp>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	bf0c      	ite	eq
 800e528:	2301      	moveq	r3, #1
 800e52a:	2300      	movne	r3, #0
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        bool_t tok_is_lss_conf_bitrate = strcmp(tok, "lss_conf_bitrate") == 0;
 800e532:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e536:	49a1      	ldr	r1, [pc, #644]	; (800e7bc <CO_GTWA_process+0x874>)
 800e538:	4618      	mov	r0, r3
 800e53a:	f7f1 fe49 	bl	80001d0 <strcmp>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	bf0c      	ite	eq
 800e544:	2301      	moveq	r3, #1
 800e546:	2300      	movne	r3, #0
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        bool_t tok_is_lss_activate_bitrate = strcmp(tok, "lss_activate_bitrate") == 0;
 800e54e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e552:	499b      	ldr	r1, [pc, #620]	; (800e7c0 <CO_GTWA_process+0x878>)
 800e554:	4618      	mov	r0, r3
 800e556:	f7f1 fe3b 	bl	80001d0 <strcmp>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bf0c      	ite	eq
 800e560:	2301      	moveq	r3, #1
 800e562:	2300      	movne	r3, #0
 800e564:	b2db      	uxtb	r3, r3
 800e566:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        bool_t tok_is_lss_store = strcmp(tok, "lss_store") == 0;
 800e56a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e56e:	4995      	ldr	r1, [pc, #596]	; (800e7c4 <CO_GTWA_process+0x87c>)
 800e570:	4618      	mov	r0, r3
 800e572:	f7f1 fe2d 	bl	80001d0 <strcmp>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	bf0c      	ite	eq
 800e57c:	2301      	moveq	r3, #1
 800e57e:	2300      	movne	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        bool_t tok_is_lss_inquire_addr = strcmp(tok, "lss_inquire_addr") == 0;
 800e586:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e58a:	498f      	ldr	r1, [pc, #572]	; (800e7c8 <CO_GTWA_process+0x880>)
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f1 fe1f 	bl	80001d0 <strcmp>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	bf0c      	ite	eq
 800e598:	2301      	moveq	r3, #1
 800e59a:	2300      	movne	r3, #0
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        bool_t tok_is_lss_get_node = strcmp(tok, "lss_get_node") == 0;
 800e5a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e5a6:	4989      	ldr	r1, [pc, #548]	; (800e7cc <CO_GTWA_process+0x884>)
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7f1 fe11 	bl	80001d0 <strcmp>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	bf0c      	ite	eq
 800e5b4:	2301      	moveq	r3, #1
 800e5b6:	2300      	movne	r3, #0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        bool_t tok_is__lss_fastscan = strcmp(tok, "_lss_fastscan") == 0;
 800e5be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e5c2:	4983      	ldr	r1, [pc, #524]	; (800e7d0 <CO_GTWA_process+0x888>)
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7f1 fe03 	bl	80001d0 <strcmp>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	bf0c      	ite	eq
 800e5d0:	2301      	moveq	r3, #1
 800e5d2:	2300      	movne	r3, #0
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        bool_t tok_is_lss_allnodes = strcmp(tok, "lss_allnodes") == 0;
 800e5da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e5de:	497d      	ldr	r1, [pc, #500]	; (800e7d4 <CO_GTWA_process+0x88c>)
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7f1 fdf5 	bl	80001d0 <strcmp>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	bf0c      	ite	eq
 800e5ec:	2301      	moveq	r3, #1
 800e5ee:	2300      	movne	r3, #0
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LOG) != 0
        bool_t tok_is_log = strcmp(tok, "log") == 0;
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
        bool_t tok_is_help = strcmp(tok, "help") == 0;
 800e5f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e5fa:	4977      	ldr	r1, [pc, #476]	; (800e7d8 <CO_GTWA_process+0x890>)
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f1 fde7 	bl	80001d0 <strcmp>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	bf0c      	ite	eq
 800e608:	2301      	moveq	r3, #1
 800e60a:	2300      	movne	r3, #0
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        bool_t tok_is_led = strcmp(tok, "led") == 0;
 800e612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e616:	4971      	ldr	r1, [pc, #452]	; (800e7dc <CO_GTWA_process+0x894>)
 800e618:	4618      	mov	r0, r3
 800e61a:	f7f1 fdd9 	bl	80001d0 <strcmp>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	bf0c      	ite	eq
 800e624:	2301      	moveq	r3, #1
 800e626:	2300      	movne	r3, #0
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
#endif
        /* set command - multiple sub commands */
        if (tok_is_set) {
 800e62e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 81f6 	beq.w	800ea24 <CO_GTWA_process+0xadc>
            if (closed != 0U) {
 800e638:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e63c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d007      	beq.n	800e656 <CO_GTWA_process+0x70e>
                err = true;
 800e646:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e64a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e64e:	2201      	movs	r2, #1
 800e650:	601a      	str	r2, [r3, #0]
                break;
 800e652:	f001 bea0 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* command 2 */
            closed = 0xFFU;
 800e656:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e65a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e65e:	22ff      	movs	r2, #255	; 0xff
 800e660:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e662:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e666:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f103 0018 	add.w	r0, r3, #24
 800e670:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e674:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	4613      	mov	r3, r2
 800e680:	2214      	movs	r2, #20
 800e682:	f7fb fe15 	bl	800a2b0 <CO_fifo_readToken>
            if (err) {
 800e686:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e68a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	f041 8647 	bne.w	8010324 <CO_GTWA_process+0x23dc>
                break;
            }

            convertToLower(tok, sizeof(tok));
 800e696:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e69a:	2114      	movs	r1, #20
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff fc1d 	bl	800dedc <convertToLower>
            /* 'set network <value>' */
            if (strcmp(tok, "network") == 0) {
 800e6a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e6a6:	494e      	ldr	r1, [pc, #312]	; (800e7e0 <CO_GTWA_process+0x898>)
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f1 fd91 	bl	80001d0 <strcmp>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d151      	bne.n	800e758 <CO_GTWA_process+0x810>
                uint16_t value;

                if (closed != 0U) {
 800e6b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6b8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d007      	beq.n	800e6d2 <CO_GTWA_process+0x78a>
                    err = true;
 800e6c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	601a      	str	r2, [r3, #0]
                    break;
 800e6ce:	f001 be62 	b.w	8010396 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e6d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6d6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e6da:	2201      	movs	r2, #1
 800e6dc:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e6de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e6e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f103 0018 	add.w	r0, r3, #24
 800e6ec:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e6f0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e6f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	2214      	movs	r2, #20
 800e6fe:	f7fb fdd7 	bl	800a2b0 <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, CO_CONFIG_GTW_NET_MIN, CO_CONFIG_GTW_NET_MAX, &err);
 800e702:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e706:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e70a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e70e:	2100      	movs	r1, #0
 800e710:	f7ff f9e1 	bl	800dad6 <getU32>
 800e714:	4602      	mov	r2, r0
 800e716:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e71a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e71e:	801a      	strh	r2, [r3, #0]
                if (err) {
 800e720:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e724:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f041 85fc 	bne.w	8010328 <CO_GTWA_process+0x23e0>
                    break;
                }

                gtwa->net_default = (int32_t)value;
 800e730:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e734:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e738:	881a      	ldrh	r2, [r3, #0]
 800e73a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e73e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	60da      	str	r2, [r3, #12]
                responseWithOK(gtwa);
 800e746:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e74a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	f7ff fb5e 	bl	800de10 <responseWithOK>
 800e754:	f001 bdc8 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            }
            /* 'set node <value>' */
            else if (strcmp(tok, "node") == 0) {
 800e758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e75c:	4921      	ldr	r1, [pc, #132]	; (800e7e4 <CO_GTWA_process+0x89c>)
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f1 fd36 	bl	80001d0 <strcmp>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d17b      	bne.n	800e862 <CO_GTWA_process+0x91a>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e76a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e76e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e772:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e776:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e77a:	6818      	ldr	r0, [r3, #0]
 800e77c:	f7ff fa0e 	bl	800db9c <checkNet>
 800e780:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
                uint8_t value;

                if ((closed != 0U) || NodeErr) {
 800e784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e788:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <CO_GTWA_process+0x852>
 800e792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e796:	2b00      	cmp	r3, #0
 800e798:	d026      	beq.n	800e7e8 <CO_GTWA_process+0x8a0>
                    err = true;
 800e79a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e79e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	601a      	str	r2, [r3, #0]
                    break;
 800e7a6:	f001 bdf6 	b.w	8010396 <CO_GTWA_process+0x244e>
 800e7aa:	bf00      	nop
 800e7ac:	08021d74 	.word	0x08021d74
 800e7b0:	08021d7c 	.word	0x08021d7c
 800e7b4:	08021d8c 	.word	0x08021d8c
 800e7b8:	08021d9c 	.word	0x08021d9c
 800e7bc:	08021dac 	.word	0x08021dac
 800e7c0:	08021dc0 	.word	0x08021dc0
 800e7c4:	08021dd8 	.word	0x08021dd8
 800e7c8:	08021de4 	.word	0x08021de4
 800e7cc:	08021df8 	.word	0x08021df8
 800e7d0:	08021e08 	.word	0x08021e08
 800e7d4:	08021e18 	.word	0x08021e18
 800e7d8:	08021e28 	.word	0x08021e28
 800e7dc:	08021e30 	.word	0x08021e30
 800e7e0:	08021e34 	.word	0x08021e34
 800e7e4:	08021e3c 	.word	0x08021e3c
                }

                /* value */
                closed = 1U;
 800e7e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7ec:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e7f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e7f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f103 0018 	add.w	r0, r3, #24
 800e802:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e806:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e80a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	4613      	mov	r3, r2
 800e812:	2214      	movs	r2, #20
 800e814:	f7fb fd4c 	bl	800a2b0 <CO_fifo_readToken>
                value = (uint8_t)getU32(tok, 1, 127, &err);
 800e818:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e81c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e820:	227f      	movs	r2, #127	; 0x7f
 800e822:	2101      	movs	r1, #1
 800e824:	f7ff f957 	bl	800dad6 <getU32>
 800e828:	4603      	mov	r3, r0
 800e82a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
                if (err) {
 800e82e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e832:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f041 8577 	bne.w	801032c <CO_GTWA_process+0x23e4>
                    break;
                }

                gtwa->node_default = (int16_t)value;
 800e83e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e842:	b21a      	sxth	r2, r3
 800e844:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e848:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	821a      	strh	r2, [r3, #16]
                responseWithOK(gtwa);
 800e850:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e854:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	f7ff fad9 	bl	800de10 <responseWithOK>
 800e85e:	f001 bd43 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            }
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
            /* 'set sdo_timeout <value_ms>' */
            else if (strcmp(tok, "sdo_timeout") == 0) {
 800e862:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e866:	49d5      	ldr	r1, [pc, #852]	; (800ebbc <CO_GTWA_process+0xc74>)
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f1 fcb1 	bl	80001d0 <strcmp>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d15d      	bne.n	800e930 <CO_GTWA_process+0x9e8>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e874:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e878:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e87c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e880:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	f7ff f989 	bl	800db9c <checkNet>
 800e88a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
                uint16_t value;

                if ((closed != 0U) || NodeErr) {
 800e88e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e892:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d103      	bne.n	800e8a4 <CO_GTWA_process+0x95c>
 800e89c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d007      	beq.n	800e8b4 <CO_GTWA_process+0x96c>
                    err = true;
 800e8a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	601a      	str	r2, [r3, #0]
                    break;
 800e8b0:	f001 bd71 	b.w	8010396 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e8b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8b8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e8bc:	2201      	movs	r2, #1
 800e8be:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e8c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e8c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f103 0018 	add.w	r0, r3, #24
 800e8ce:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e8d2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e8d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	2214      	movs	r2, #20
 800e8e0:	f7fb fce6 	bl	800a2b0 <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, 1, 0xFFFF, &err);
 800e8e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e8e8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e8ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8f0:	2101      	movs	r1, #1
 800e8f2:	f7ff f8f0 	bl	800dad6 <getU32>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                if (err) {
 800e8fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e900:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f041 8512 	bne.w	8010330 <CO_GTWA_process+0x23e8>
                    break;
                }

                gtwa->SDOtimeoutTime = value;
 800e90c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e910:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800e91a:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
                responseWithOK(gtwa);
 800e91e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e922:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e926:	6818      	ldr	r0, [r3, #0]
 800e928:	f7ff fa72 	bl	800de10 <responseWithOK>
 800e92c:	f001 bcdc 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            }
            /* 'set sdo_timeout <0|1>' */
            else if (strcmp(tok, "sdo_block") == 0) {
 800e930:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e934:	49a2      	ldr	r1, [pc, #648]	; (800ebc0 <CO_GTWA_process+0xc78>)
 800e936:	4618      	mov	r0, r3
 800e938:	f7f1 fc4a 	bl	80001d0 <strcmp>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d162      	bne.n	800ea08 <CO_GTWA_process+0xac0>
                bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800e942:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e946:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e94a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e94e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	f7ff f922 	bl	800db9c <checkNet>
 800e958:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                uint16_t value;

                if ((closed != 0U) || NodeErr) {
 800e95c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e960:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d103      	bne.n	800e972 <CO_GTWA_process+0xa2a>
 800e96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d007      	beq.n	800e982 <CO_GTWA_process+0xa3a>
                    err = true;
 800e972:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e976:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e97a:	2201      	movs	r2, #1
 800e97c:	601a      	str	r2, [r3, #0]
                    break;
 800e97e:	f001 bd0a 	b.w	8010396 <CO_GTWA_process+0x244e>
                }

                /* value */
                closed = 1U;
 800e982:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e986:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e98a:	2201      	movs	r2, #1
 800e98c:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800e98e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e992:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f103 0018 	add.w	r0, r3, #24
 800e99c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800e9a0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e9a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	2214      	movs	r2, #20
 800e9ae:	f7fb fc7f 	bl	800a2b0 <CO_fifo_readToken>
                value = (uint16_t)getU32(tok, 0, 1, &err);
 800e9b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e9b6:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f7ff f88a 	bl	800dad6 <getU32>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
                if (err) {
 800e9c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f041 84ae 	bne.w	8010334 <CO_GTWA_process+0x23ec>
                    break;
                }

                gtwa->SDOblockTransferEnable = (value == 1U) ? true : false;
 800e9d8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	bf0c      	ite	eq
 800e9e0:	2301      	moveq	r3, #1
 800e9e2:	2300      	movne	r3, #0
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
                responseWithOK(gtwa);
 800e9f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e9fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e9fe:	6818      	ldr	r0, [r3, #0]
 800ea00:	f7ff fa06 	bl	800de10 <responseWithOK>
 800ea04:	f001 bc70 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */
            else {
                respErrorCode = CO_GTWA_respErrorReqNotSupported;
 800ea08:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ea10:	2264      	movs	r2, #100	; 0x64
 800ea12:	801a      	strh	r2, [r3, #0]
                err = true;
 800ea14:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	601a      	str	r2, [r3, #0]
                break;
 800ea20:	f001 bcb9 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
        }

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_SDO) != 0
        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        else if (tok_is_read) {
 800ea24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f000 8151 	beq.w	800ecd0 <CO_GTWA_process+0xd88>
            uint16_t idx;
            uint8_t subidx;
            CO_SDO_return_t SDO_ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 1, &respErrorCode);
 800ea2e:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800ea32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea36:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800ea3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	2301      	movs	r3, #1
 800ea42:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ea46:	6800      	ldr	r0, [r0, #0]
 800ea48:	f7ff f86e 	bl	800db28 <checkNetNode>
 800ea4c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

            if ((closed != 0U) || NodeErr) {
 800ea50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea54:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d103      	bne.n	800ea66 <CO_GTWA_process+0xb1e>
 800ea5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d007      	beq.n	800ea76 <CO_GTWA_process+0xb2e>
                err = true;
 800ea66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea6a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
                break;
 800ea72:	f001 bc90 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* index */
            closed = 0U;
 800ea76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea7a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ea7e:	2200      	movs	r2, #0
 800ea80:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ea82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ea86:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f103 0018 	add.w	r0, r3, #24
 800ea90:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ea94:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ea98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	2214      	movs	r2, #20
 800eaa2:	f7fb fc05 	bl	800a2b0 <CO_fifo_readToken>
            idx = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800eaa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eaaa:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800eaae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eab2:	2100      	movs	r1, #0
 800eab4:	f7ff f80f 	bl	800dad6 <getU32>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            if (err) {
 800eabe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eac2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f041 8435 	bne.w	8010338 <CO_GTWA_process+0x23f0>
                break;
            }

            /* subindex */
            closed = 0xFFU;
 800eace:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ead2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ead6:	22ff      	movs	r2, #255	; 0xff
 800ead8:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800eada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eade:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f103 0018 	add.w	r0, r3, #24
 800eae8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800eaec:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800eaf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	2214      	movs	r2, #20
 800eafa:	f7fb fbd9 	bl	800a2b0 <CO_fifo_readToken>
 800eafe:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            subidx = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800eb02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eb06:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800eb0a:	22ff      	movs	r2, #255	; 0xff
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	f7fe ffe2 	bl	800dad6 <getU32>
 800eb12:	4603      	mov	r3, r0
 800eb14:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
            if (err || (n == 0U)) {
 800eb18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d103      	bne.n	800eb2e <CO_GTWA_process+0xbe6>
 800eb26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d107      	bne.n	800eb3e <CO_GTWA_process+0xbf6>
                err = true;
 800eb2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb32:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eb36:	2201      	movs	r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
                break;
 800eb3a:	f001 bc2c 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* optional data type */
            if (closed == 0U) {
 800eb3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb42:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d13b      	bne.n	800ebc4 <CO_GTWA_process+0xc7c>
                closed = 1U;
 800eb4c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb50:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eb54:	2201      	movs	r2, #1
 800eb56:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800eb58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f103 0018 	add.w	r0, r3, #24
 800eb66:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800eb6a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800eb6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eb72:	9300      	str	r3, [sp, #0]
 800eb74:	4613      	mov	r3, r2
 800eb76:	2214      	movs	r2, #20
 800eb78:	f7fb fb9a 	bl	800a2b0 <CO_fifo_readToken>
                convertToLower(tok, sizeof(tok));
 800eb7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800eb80:	2114      	movs	r1, #20
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff f9aa 	bl	800dedc <convertToLower>
                gtwa->SDOdataType = CO_GTWA_getDataType(tok, &err);
 800eb88:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800eb8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800eb90:	4611      	mov	r1, r2
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff f814 	bl	800dbc0 <CO_GTWA_getDataType>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eb9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
                if (err) {
 800eba8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00e      	beq.n	800ebd4 <CO_GTWA_process+0xc8c>
                    break;
 800ebb6:	f001 bbee 	b.w	8010396 <CO_GTWA_process+0x244e>
 800ebba:	bf00      	nop
 800ebbc:	08021e44 	.word	0x08021e44
 800ebc0:	08021e50 	.word	0x08021e50
                }
            } else {
                gtwa->SDOdataType = &dataTypes[0]; /* use generic data type */
 800ebc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4ad3      	ldr	r2, [pc, #844]	; (800ef1c <CO_GTWA_process+0xfd4>)
 800ebd0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
            }

            /* setup client */
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ebd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800ebe2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebe6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	7d1b      	ldrb	r3, [r3, #20]
 800ebee:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
                                         (uint32_t)CO_CAN_ID_SDO_SRV + gtwa->node, gtwa->node);
 800ebf2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ebf6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	7d1b      	ldrb	r3, [r3, #20]
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ebfe:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800ec02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	7d1b      	ldrb	r3, [r3, #20]
 800ec0e:	f7f6 f845 	bl	8004c9c <CO_SDOclient_setup>
 800ec12:	4603      	mov	r3, r0
 800ec14:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800ec18:	f997 30e0 	ldrsb.w	r3, [r7, #224]	; 0xe0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00d      	beq.n	800ec3c <CO_GTWA_process+0xcf4>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ec20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ec28:	2266      	movs	r2, #102	; 0x66
 800ec2a:	801a      	strh	r2, [r3, #0]
                err = true;
 800ec2c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ec34:	2201      	movs	r2, #1
 800ec36:	601a      	str	r2, [r3, #0]
                break;
 800ec38:	f001 bbad 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* initiate upload */
            SDO_ret = CO_SDOclientUploadInitiate(gtwa->SDO_C, idx, subidx, gtwa->SDOtimeoutTime,
 800ec3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800ec4a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f8b3 41e4 	ldrh.w	r4, [r3, #484]	; 0x1e4
 800ec58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800ec66:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
 800ec6a:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	4623      	mov	r3, r4
 800ec72:	f7f7 fc51 	bl	8006518 <CO_SDOclientUploadInitiate>
 800ec76:	4603      	mov	r3, r0
 800ec78:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
                                                 gtwa->SDOblockTransferEnable);
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800ec7c:	f997 30e0 	ldrsb.w	r3, [r7, #224]	; 0xe0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00d      	beq.n	800eca0 <CO_GTWA_process+0xd58>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ec84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ec8c:	2266      	movs	r2, #102	; 0x66
 800ec8e:	801a      	strh	r2, [r3, #0]
                err = true;
 800ec90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ec94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ec98:	2201      	movs	r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]
                break;
 800ec9c:	f001 bb7b 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* indicate that gateway response didn't start yet */
            gtwa->SDOdataCopyStatus = false;
 800eca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eca4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            /* continue with state machine */
            timeDifference_us = 0;
 800ecb0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ecb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
            gtwa->state = CO_GTWA_ST_READ;
 800ecbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ecc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2210      	movs	r2, #16
 800ecc8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800eccc:	f001 bb0c 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        }

        /* Download SDO comm. - w[rite] <index> <subindex> <datatype> <value> */
        else if (tok_is_write) {
 800ecd0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 81ca 	beq.w	800f06e <CO_GTWA_process+0x1126>
            uint16_t idx;
            uint8_t subidx;
            uint8_t status;
            CO_SDO_return_t SDO_ret;
            size_t size;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 1, &respErrorCode);
 800ecda:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800ecde:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ece2:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800ece6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	2301      	movs	r3, #1
 800ecee:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800ecf2:	6800      	ldr	r0, [r0, #0]
 800ecf4:	f7fe ff18 	bl	800db28 <checkNetNode>
 800ecf8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

            if ((closed != 0U) || NodeErr) {
 800ecfc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed00:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d103      	bne.n	800ed12 <CO_GTWA_process+0xdca>
 800ed0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d007      	beq.n	800ed22 <CO_GTWA_process+0xdda>
                err = true;
 800ed12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
                break;
 800ed1e:	f001 bb3a 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* index */
            closed = 0U;
 800ed22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed26:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ed2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed32:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f103 0018 	add.w	r0, r3, #24
 800ed3c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ed40:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ed44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	2214      	movs	r2, #20
 800ed4e:	f7fb faaf 	bl	800a2b0 <CO_fifo_readToken>
            idx = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800ed52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ed56:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800ed5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed5e:	2100      	movs	r1, #0
 800ed60:	f7fe feb9 	bl	800dad6 <getU32>
 800ed64:	4603      	mov	r3, r0
 800ed66:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
            if (err) {
 800ed6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed6e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f040 8171 	bne.w	800f05c <CO_GTWA_process+0x1114>
                break;
            }

            /* subindex */
            closed = 0U;
 800ed7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed7e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ed82:	2200      	movs	r2, #0
 800ed84:	701a      	strb	r2, [r3, #0]
            n = CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ed86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ed8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f103 0018 	add.w	r0, r3, #24
 800ed94:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ed98:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ed9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	4613      	mov	r3, r2
 800eda4:	2214      	movs	r2, #20
 800eda6:	f7fb fa83 	bl	800a2b0 <CO_fifo_readToken>
 800edaa:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
            subidx = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800edae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800edb2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800edb6:	22ff      	movs	r2, #255	; 0xff
 800edb8:	2100      	movs	r1, #0
 800edba:	f7fe fe8c 	bl	800dad6 <getU32>
 800edbe:	4603      	mov	r3, r0
 800edc0:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
            if (err) {
 800edc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800edc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 8147 	bne.w	800f062 <CO_GTWA_process+0x111a>
                break;
            }

            /* data type */
            closed = 0U;
 800edd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800edd8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eddc:	2200      	movs	r2, #0
 800edde:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ede0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ede4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f103 0018 	add.w	r0, r3, #24
 800edee:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800edf2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800edf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	4613      	mov	r3, r2
 800edfe:	2214      	movs	r2, #20
 800ee00:	f7fb fa56 	bl	800a2b0 <CO_fifo_readToken>
            convertToLower(tok, sizeof(tok));
 800ee04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ee08:	2114      	movs	r1, #20
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff f866 	bl	800dedc <convertToLower>
            gtwa->SDOdataType = CO_GTWA_getDataType(tok, &err);
 800ee10:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800ee14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe fed0 	bl	800dbc0 <CO_GTWA_getDataType>
 800ee20:	4602      	mov	r2, r0
 800ee22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
            if (err) {
 800ee30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f040 8114 	bne.w	800f068 <CO_GTWA_process+0x1120>
                break;
            }

            /* setup client */
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ee40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee44:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800ee4e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee52:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	7d1b      	ldrb	r3, [r3, #20]
 800ee5a:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
                                         (uint32_t)CO_CAN_ID_SDO_SRV + gtwa->node, gtwa->node);
 800ee5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	7d1b      	ldrb	r3, [r3, #20]
            SDO_ret = CO_SDOclient_setup(gtwa->SDO_C, (uint32_t)CO_CAN_ID_SDO_CLI + gtwa->node,
 800ee6a:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 800ee6e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee72:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	7d1b      	ldrb	r3, [r3, #20]
 800ee7a:	f7f5 ff0f 	bl	8004c9c <CO_SDOclient_setup>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800ee84:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00c      	beq.n	800eea6 <CO_GTWA_process+0xf5e>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ee8c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ee94:	2266      	movs	r2, #102	; 0x66
 800ee96:	801a      	strh	r2, [r3, #0]
                err = true;
 800ee98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ee9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800eea0:	2201      	movs	r2, #1
 800eea2:	601a      	str	r2, [r3, #0]
                break;
 800eea4:	e0e1      	b.n	800f06a <CO_GTWA_process+0x1122>
            }

            /* initiate download */
            SDO_ret = CO_SDOclientDownloadInitiate(gtwa->SDO_C, idx, subidx, gtwa->SDOdataType->length,
 800eea6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eeaa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800eeb4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eeb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800eec2:	685d      	ldr	r5, [r3, #4]
 800eec4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eec8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
 800eed2:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800eed6:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800eeda:	6812      	ldr	r2, [r2, #0]
 800eedc:	f8d2 21e8 	ldr.w	r2, [r2, #488]	; 0x1e8
 800eee0:	f897 40ed 	ldrb.w	r4, [r7, #237]	; 0xed
 800eee4:	f8b7 10ee 	ldrh.w	r1, [r7, #238]	; 0xee
 800eee8:	9201      	str	r2, [sp, #4]
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	462b      	mov	r3, r5
 800eeee:	4622      	mov	r2, r4
 800eef0:	f7f5 ff5c 	bl	8004dac <CO_SDOclientDownloadInitiate>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
                                                   gtwa->SDOtimeoutTime, gtwa->SDOblockTransferEnable);
            if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800eefa:	f997 30ec 	ldrsb.w	r3, [r7, #236]	; 0xec
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00e      	beq.n	800ef20 <CO_GTWA_process+0xfd8>
                respErrorCode = CO_GTWA_respErrorInternalState;
 800ef02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ef0a:	2266      	movs	r2, #102	; 0x66
 800ef0c:	801a      	strh	r2, [r3, #0]
                err = true;
 800ef0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ef16:	2201      	movs	r2, #1
 800ef18:	601a      	str	r2, [r3, #0]
                break;
 800ef1a:	e0a6      	b.n	800f06a <CO_GTWA_process+0x1122>
 800ef1c:	08023224 	.word	0x08023224
            }

            /* copy data from comm to the SDO buffer, according to data type */
            size = gtwa->SDOdataType->dataTypeScan(&gtwa->SDO_C->bufFifo, &gtwa->commFifo, &status);
 800ef20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800ef34:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800ef38:	6812      	ldr	r2, [r2, #0]
 800ef3a:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 800ef3e:	f102 0078 	add.w	r0, r2, #120	; 0x78
 800ef42:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800ef46:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800ef4a:	6812      	ldr	r2, [r2, #0]
 800ef4c:	f102 0118 	add.w	r1, r2, #24
 800ef50:	f107 027f 	add.w	r2, r7, #127	; 0x7f
 800ef54:	4798      	blx	r3
 800ef56:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            /* set to true, if command delimiter was found */
            closed = ((status & CO_fifo_st_closed) == 0U) ? 0U : 1U;
 800ef5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef5e:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f003 0301 	and.w	r3, r3, #1
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	bf14      	ite	ne
 800ef6c:	2301      	movne	r3, #1
 800ef6e:	2300      	moveq	r3, #0
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	461a      	mov	r2, r3
 800ef74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef78:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ef7c:	701a      	strb	r2, [r3, #0]
            /* set to true, if data are copied only partially */
            gtwa->SDOdataCopyStatus = (status & CO_fifo_st_partial) != 0U;
 800ef7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef82:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 0302 	and.w	r3, r3, #2
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	bf14      	ite	ne
 800ef90:	2301      	movne	r3, #1
 800ef92:	2300      	moveq	r3, #0
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	461a      	mov	r2, r3
 800ef98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ef9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

            /* is syntax error in command or size is zero or not the last token
             * in command */
            if (((status & CO_fifo_st_errMask) != 0U) || (size == 0U)
 800efa6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efaa:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d113      	bne.n	800efe0 <CO_GTWA_process+0x1098>
 800efb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00f      	beq.n	800efe0 <CO_GTWA_process+0x1098>
                || ((gtwa->SDOdataCopyStatus == false) && (closed != 1U))) {
 800efc0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10d      	bne.n	800efee <CO_GTWA_process+0x10a6>
 800efd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efd6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d006      	beq.n	800efee <CO_GTWA_process+0x10a6>
                err = true;
 800efe0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800efe4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800efe8:	2201      	movs	r2, #1
 800efea:	601a      	str	r2, [r3, #0]
                break;
 800efec:	e03d      	b.n	800f06a <CO_GTWA_process+0x1122>
            }

            /* if data size was not known before and is known now, update SDO */
            if ((gtwa->SDOdataType->length == 0U) && !gtwa->SDOdataCopyStatus) {
 800efee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800eff2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d114      	bne.n	800f02c <CO_GTWA_process+0x10e4>
 800f002:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f006:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10b      	bne.n	800f02c <CO_GTWA_process+0x10e4>
                CO_SDOclientDownloadInitSize(gtwa->SDO_C, size);
 800f014:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f018:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f022:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800f026:	4618      	mov	r0, r3
 800f028:	f7f5 ff25 	bl	8004e76 <CO_SDOclientDownloadInitSize>
            }

            /* continue with state machine */
            gtwa->stateTimeoutTmr = 0;
 800f02c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f030:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2200      	movs	r2, #0
 800f038:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            timeDifference_us = 0;
 800f03c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f040:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800f044:	2200      	movs	r2, #0
 800f046:	601a      	str	r2, [r3, #0]
            gtwa->state = CO_GTWA_ST_WRITE;
 800f048:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f04c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2211      	movs	r2, #17
 800f054:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f058:	f001 b946 	b.w	80102e8 <CO_GTWA_process+0x23a0>
                break;
 800f05c:	bf00      	nop
 800f05e:	f001 b99a 	b.w	8010396 <CO_GTWA_process+0x244e>
                break;
 800f062:	bf00      	nop
 800f064:	f001 b997 	b.w	8010396 <CO_GTWA_process+0x244e>
                break;
 800f068:	bf00      	nop
            break;
 800f06a:	f001 b994 	b.w	8010396 <CO_GTWA_process+0x244e>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_NMT) != 0
        /* NMT start node - 'start' */
        else if (tok_is_start) {
 800f06e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800f072:	2b00      	cmp	r3, #0
 800f074:	d056      	beq.n	800f124 <CO_GTWA_process+0x11dc>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800f076:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800f07a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f07e:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800f082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	2300      	movs	r3, #0
 800f08a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f08e:	6800      	ldr	r0, [r0, #0]
 800f090:	f7fe fd4a 	bl	800db28 <checkNetNode>
 800f094:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            CO_NMT_command_t command2 = CO_NMT_ENTER_OPERATIONAL;
 800f098:	2301      	movs	r3, #1
 800f09a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

            if ((closed != 1U) || NodeErr) {
 800f09e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0a2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d103      	bne.n	800f0b4 <CO_GTWA_process+0x116c>
 800f0ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d007      	beq.n	800f0c4 <CO_GTWA_process+0x117c>
                err = true;
 800f0b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f0bc:	2201      	movs	r2, #1
 800f0be:	601a      	str	r2, [r3, #0]
                break;
 800f0c0:	f001 b969 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800f0c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800f0d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	7d1a      	ldrb	r2, [r3, #20]
 800f0de:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	f7f3 fb51 	bl	800278a <CO_NMT_sendCommand>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

            if (ret == CO_ERROR_NO) {
 800f0ee:	f997 30f6 	ldrsb.w	r3, [r7, #246]	; 0xf6
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d108      	bne.n	800f108 <CO_GTWA_process+0x11c0>
                responseWithOK(gtwa);
 800f0f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f0fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	f7fe fe86 	bl	800de10 <responseWithOK>
 800f104:	f001 b8f0 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f108:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f10c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f110:	2266      	movs	r2, #102	; 0x66
 800f112:	801a      	strh	r2, [r3, #0]
                err = true;
 800f114:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f118:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f11c:	2201      	movs	r2, #1
 800f11e:	601a      	str	r2, [r3, #0]
                break;
 800f120:	f001 b939 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT stop node - 'stop' */
        else if (tok_is_stop) {
 800f124:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d056      	beq.n	800f1da <CO_GTWA_process+0x1292>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800f12c:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800f130:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f134:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800f138:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	2300      	movs	r3, #0
 800f140:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f144:	6800      	ldr	r0, [r0, #0]
 800f146:	f7fe fcef 	bl	800db28 <checkNetNode>
 800f14a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
            CO_NMT_command_t command2 = CO_NMT_ENTER_STOPPED;
 800f14e:	2302      	movs	r3, #2
 800f150:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

            if ((closed != 1U) || NodeErr) {
 800f154:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f158:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d103      	bne.n	800f16a <CO_GTWA_process+0x1222>
 800f162:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f166:	2b00      	cmp	r3, #0
 800f168:	d007      	beq.n	800f17a <CO_GTWA_process+0x1232>
                err = true;
 800f16a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f16e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f172:	2201      	movs	r2, #1
 800f174:	601a      	str	r2, [r3, #0]
                break;
 800f176:	f001 b90e 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800f17a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f17e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800f188:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f18c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	7d1a      	ldrb	r2, [r3, #20]
 800f194:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800f198:	4619      	mov	r1, r3
 800f19a:	f7f3 faf6 	bl	800278a <CO_NMT_sendCommand>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

            if (ret == CO_ERROR_NO) {
 800f1a4:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d108      	bne.n	800f1be <CO_GTWA_process+0x1276>
                responseWithOK(gtwa);
 800f1ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f1b4:	6818      	ldr	r0, [r3, #0]
 800f1b6:	f7fe fe2b 	bl	800de10 <responseWithOK>
 800f1ba:	f001 b895 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f1be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f1c6:	2266      	movs	r2, #102	; 0x66
 800f1c8:	801a      	strh	r2, [r3, #0]
                err = true;
 800f1ca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	601a      	str	r2, [r3, #0]
                break;
 800f1d6:	f001 b8de 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT Set node to pre-operational - 'preop[erational]' */
        else if (tok_is_preop) {
 800f1da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d056      	beq.n	800f290 <CO_GTWA_process+0x1348>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800f1e2:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800f1e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f1ea:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800f1ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f1fa:	6800      	ldr	r0, [r0, #0]
 800f1fc:	f7fe fc94 	bl	800db28 <checkNetNode>
 800f200:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
            CO_NMT_command_t command2 = CO_NMT_ENTER_PRE_OPERATIONAL;
 800f204:	2380      	movs	r3, #128	; 0x80
 800f206:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

            if ((closed != 1U) || NodeErr) {
 800f20a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f20e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d103      	bne.n	800f220 <CO_GTWA_process+0x12d8>
 800f218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d007      	beq.n	800f230 <CO_GTWA_process+0x12e8>
                err = true;
 800f220:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f228:	2201      	movs	r2, #1
 800f22a:	601a      	str	r2, [r3, #0]
                break;
 800f22c:	f001 b8b3 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800f230:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f234:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800f23e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f242:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	7d1a      	ldrb	r2, [r3, #20]
 800f24a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f24e:	4619      	mov	r1, r3
 800f250:	f7f3 fa9b 	bl	800278a <CO_NMT_sendCommand>
 800f254:	4603      	mov	r3, r0
 800f256:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

            if (ret == CO_ERROR_NO) {
 800f25a:	f997 3106 	ldrsb.w	r3, [r7, #262]	; 0x106
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d108      	bne.n	800f274 <CO_GTWA_process+0x132c>
                responseWithOK(gtwa);
 800f262:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f266:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f26a:	6818      	ldr	r0, [r3, #0]
 800f26c:	f7fe fdd0 	bl	800de10 <responseWithOK>
 800f270:	f001 b83a 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f274:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f278:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f27c:	2266      	movs	r2, #102	; 0x66
 800f27e:	801a      	strh	r2, [r3, #0]
                err = true;
 800f280:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f284:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f288:	2201      	movs	r2, #1
 800f28a:	601a      	str	r2, [r3, #0]
                break;
 800f28c:	f001 b883 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
        }

        /* NMT reset (node or communication) - 'reset <node|comm[unication]>' */
        else if (tok_is_reset) {
 800f290:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 80a9 	beq.w	800f3ec <CO_GTWA_process+0x14a4>
            CO_ReturnError_t ret;
            bool_t NodeErr = checkNetNode(gtwa, net, node, 0, &respErrorCode);
 800f29a:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 800f29e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2a2:	f5a3 70de 	sub.w	r0, r3, #444	; 0x1bc
 800f2a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800f2aa:	9300      	str	r3, [sp, #0]
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f2b2:	6800      	ldr	r0, [r0, #0]
 800f2b4:	f7fe fc38 	bl	800db28 <checkNetNode>
 800f2b8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
            CO_NMT_command_t command2;

            if ((closed != 0U) || NodeErr) {
 800f2bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2c0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d103      	bne.n	800f2d2 <CO_GTWA_process+0x138a>
 800f2ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d007      	beq.n	800f2e2 <CO_GTWA_process+0x139a>
                err = true;
 800f2d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f2da:	2201      	movs	r2, #1
 800f2dc:	601a      	str	r2, [r3, #0]
                break;
 800f2de:	f001 b85a 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* command 2 */
            closed = 1U;
 800f2e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2e6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f2ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f103 0018 	add.w	r0, r3, #24
 800f2fc:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f300:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f304:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	4613      	mov	r3, r2
 800f30c:	2214      	movs	r2, #20
 800f30e:	f7fa ffcf 	bl	800a2b0 <CO_fifo_readToken>
            if (err) {
 800f312:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f316:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f041 800d 	bne.w	801033c <CO_GTWA_process+0x23f4>
                break;
            }

            convertToLower(tok, sizeof(tok));
 800f322:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f326:	2114      	movs	r1, #20
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe fdd7 	bl	800dedc <convertToLower>
            if (strcmp(tok, "node") == 0) {
 800f32e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f332:	4988      	ldr	r1, [pc, #544]	; (800f554 <CO_GTWA_process+0x160c>)
 800f334:	4618      	mov	r0, r3
 800f336:	f7f0 ff4b 	bl	80001d0 <strcmp>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d103      	bne.n	800f348 <CO_GTWA_process+0x1400>
                command2 = CO_NMT_RESET_NODE;
 800f340:	2381      	movs	r3, #129	; 0x81
 800f342:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800f346:	e021      	b.n	800f38c <CO_GTWA_process+0x1444>
            } else if (strcmp(tok, "comm") == 0) {
 800f348:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f34c:	4982      	ldr	r1, [pc, #520]	; (800f558 <CO_GTWA_process+0x1610>)
 800f34e:	4618      	mov	r0, r3
 800f350:	f7f0 ff3e 	bl	80001d0 <strcmp>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d103      	bne.n	800f362 <CO_GTWA_process+0x141a>
                command2 = CO_NMT_RESET_COMMUNICATION;
 800f35a:	2382      	movs	r3, #130	; 0x82
 800f35c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800f360:	e014      	b.n	800f38c <CO_GTWA_process+0x1444>
            } else if (strcmp(tok, "communication") == 0) {
 800f362:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f366:	497d      	ldr	r1, [pc, #500]	; (800f55c <CO_GTWA_process+0x1614>)
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f0 ff31 	bl	80001d0 <strcmp>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d103      	bne.n	800f37c <CO_GTWA_process+0x1434>
                command2 = CO_NMT_RESET_COMMUNICATION;
 800f374:	2382      	movs	r3, #130	; 0x82
 800f376:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800f37a:	e007      	b.n	800f38c <CO_GTWA_process+0x1444>
            } else {
                err = true;
 800f37c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f384:	2201      	movs	r2, #1
 800f386:	601a      	str	r2, [r3, #0]
                break;
 800f388:	f001 b805 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            ret = CO_NMT_sendCommand(gtwa->NMT, command2, gtwa->node);
 800f38c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f390:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800f39a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f39e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	7d1a      	ldrb	r2, [r3, #20]
 800f3a6:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	f7f3 f9ed 	bl	800278a <CO_NMT_sendCommand>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            if (ret == CO_ERROR_NO) {
 800f3b6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d108      	bne.n	800f3d0 <CO_GTWA_process+0x1488>
                responseWithOK(gtwa);
 800f3be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	f7fe fd22 	bl	800de10 <responseWithOK>
 800f3cc:	f000 bf8c 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f3d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f3d8:	2266      	movs	r2, #102	; 0x66
 800f3da:	801a      	strh	r2, [r3, #0]
                err = true;
 800f3dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	601a      	str	r2, [r3, #0]
                break;
 800f3e8:	f000 bfd5 	b.w	8010396 <CO_GTWA_process+0x244e>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_NMT */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
        /* Switch state global command - 'lss_switch_glob <0|1>' */
        else if (tok_is_lss_switch_glob) {
 800f3ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f000 8081 	beq.w	800f4f8 <CO_GTWA_process+0x15b0>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f3f6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f3fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f3fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f402:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f406:	6818      	ldr	r0, [r3, #0]
 800f408:	f7fe fbc8 	bl	800db9c <checkNet>
 800f40c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
            uint8_t select;

            if ((closed != 0U) || NodeErr) {
 800f410:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f414:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d103      	bne.n	800f426 <CO_GTWA_process+0x14de>
 800f41e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f422:	2b00      	cmp	r3, #0
 800f424:	d007      	beq.n	800f436 <CO_GTWA_process+0x14ee>
                err = true;
 800f426:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f42a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f42e:	2201      	movs	r2, #1
 800f430:	601a      	str	r2, [r3, #0]
                break;
 800f432:	f000 bfb0 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f436:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f43a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f43e:	2201      	movs	r2, #1
 800f440:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f442:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f446:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f103 0018 	add.w	r0, r3, #24
 800f450:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f454:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f458:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	4613      	mov	r3, r2
 800f460:	2214      	movs	r2, #20
 800f462:	f7fa ff25 	bl	800a2b0 <CO_fifo_readToken>
            select = (uint8_t)getU32(tok, 0, 1, &err);
 800f466:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f46a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f46e:	2201      	movs	r2, #1
 800f470:	2100      	movs	r1, #0
 800f472:	f7fe fb30 	bl	800dad6 <getU32>
 800f476:	4603      	mov	r3, r0
 800f478:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            if (err) {
 800f47c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f480:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f040 875a 	bne.w	8010340 <CO_GTWA_process+0x23f8>
                break;
            }

            if (select == 0U) {
 800f48c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800f490:	2b00      	cmp	r3, #0
 800f492:	d127      	bne.n	800f4e4 <CO_GTWA_process+0x159c>
                /* send non-confirmed message */
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateDeselect(gtwa->LSSmaster);
 800f494:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f498:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd f8b2 	bl	800c60c <CO_LSSmaster_swStateDeselect>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
                if (ret == CO_LSSmaster_OK) {
 800f4ae:	f997 3116 	ldrsb.w	r3, [r7, #278]	; 0x116
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d108      	bne.n	800f4c8 <CO_GTWA_process+0x1580>
                    responseWithOK(gtwa);
 800f4b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	f7fe fca6 	bl	800de10 <responseWithOK>
 800f4c4:	f000 bf10 	b.w	80102e8 <CO_GTWA_process+0x23a0>
                } else {
                    respErrorCode = CO_GTWA_respErrorInternalState;
 800f4c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f4d0:	2266      	movs	r2, #102	; 0x66
 800f4d2:	801a      	strh	r2, [r3, #0]
                    err = true;
 800f4d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f4dc:	2201      	movs	r2, #1
 800f4de:	601a      	str	r2, [r3, #0]
                    break;
 800f4e0:	f000 bf59 	b.w	8010396 <CO_GTWA_process+0x244e>
                }
            } else {
                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_SWITCH_GLOB;
 800f4e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f4e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2220      	movs	r2, #32
 800f4f0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f4f4:	f000 bef8 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            }
        }
        /* Switch state selective command -
         * 'lss_switch_sel <vendorID> <product code> <revisionNo> <serialNo>' */
        else if (tok_is_lss_switch_sel) {
 800f4f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f000 80e1 	beq.w	800f6c4 <CO_GTWA_process+0x177c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f502:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f506:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f50a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f50e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f512:	6818      	ldr	r0, [r3, #0]
 800f514:	f7fe fb42 	bl	800db9c <checkNet>
 800f518:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            CO_LSS_address_t* addr = &gtwa->lssAddress;
 800f51c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f520:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800f52a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            if ((closed != 0U) || NodeErr) {
 800f52e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f532:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d103      	bne.n	800f544 <CO_GTWA_process+0x15fc>
 800f53c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00d      	beq.n	800f560 <CO_GTWA_process+0x1618>
                err = true;
 800f544:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f548:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f54c:	2201      	movs	r2, #1
 800f54e:	601a      	str	r2, [r3, #0]
                break;
 800f550:	f000 bf21 	b.w	8010396 <CO_GTWA_process+0x244e>
 800f554:	08021e3c 	.word	0x08021e3c
 800f558:	08021e5c 	.word	0x08021e5c
 800f55c:	08021e64 	.word	0x08021e64
            }

            /* get values */
            closed = 0U;
 800f560:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f564:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f568:	2200      	movs	r2, #0
 800f56a:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f56c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f570:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f103 0018 	add.w	r0, r3, #24
 800f57a:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f57e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f582:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	4613      	mov	r3, r2
 800f58a:	2214      	movs	r2, #20
 800f58c:	f7fa fe90 	bl	800a2b0 <CO_fifo_readToken>
            addr->identity.vendorID = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f590:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f594:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f598:	f04f 32ff 	mov.w	r2, #4294967295
 800f59c:	2100      	movs	r1, #0
 800f59e:	f7fe fa9a 	bl	800dad6 <getU32>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f5a8:	601a      	str	r2, [r3, #0]
            if (err) {
 800f5aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f040 86c5 	bne.w	8010344 <CO_GTWA_process+0x23fc>
                break;
            }

            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f5ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f103 0018 	add.w	r0, r3, #24
 800f5c8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f5cc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f5d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	2214      	movs	r2, #20
 800f5da:	f7fa fe69 	bl	800a2b0 <CO_fifo_readToken>
            addr->identity.productCode = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f5de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f5e2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	f7fe fa73 	bl	800dad6 <getU32>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f5f6:	605a      	str	r2, [r3, #4]
            if (err) {
 800f5f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f5fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	f040 86a0 	bne.w	8010348 <CO_GTWA_process+0x2400>
                break;
            }

            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f608:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f60c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f103 0018 	add.w	r0, r3, #24
 800f616:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f61a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f61e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	4613      	mov	r3, r2
 800f626:	2214      	movs	r2, #20
 800f628:	f7fa fe42 	bl	800a2b0 <CO_fifo_readToken>
            addr->identity.revisionNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f62c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f630:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f634:	f04f 32ff 	mov.w	r2, #4294967295
 800f638:	2100      	movs	r1, #0
 800f63a:	f7fe fa4c 	bl	800dad6 <getU32>
 800f63e:	4602      	mov	r2, r0
 800f640:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f644:	609a      	str	r2, [r3, #8]
            if (err) {
 800f646:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f64a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	f040 867b 	bne.w	801034c <CO_GTWA_process+0x2404>
                break;
            }

            closed = 1U;
 800f656:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f65a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f65e:	2201      	movs	r2, #1
 800f660:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f662:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f666:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f103 0018 	add.w	r0, r3, #24
 800f670:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f674:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4613      	mov	r3, r2
 800f680:	2214      	movs	r2, #20
 800f682:	f7fa fe15 	bl	800a2b0 <CO_fifo_readToken>
            addr->identity.serialNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800f686:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f68a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f68e:	f04f 32ff 	mov.w	r2, #4294967295
 800f692:	2100      	movs	r1, #0
 800f694:	f7fe fa1f 	bl	800dad6 <getU32>
 800f698:	4602      	mov	r2, r0
 800f69a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f69e:	60da      	str	r2, [r3, #12]
            if (err) {
 800f6a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f040 8650 	bne.w	8010350 <CO_GTWA_process+0x2408>
                break;
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_SWITCH_SEL;
 800f6b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2221      	movs	r2, #33	; 0x21
 800f6bc:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f6c0:	f000 be12 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* LSS configure node-ID command - 'lss_set_node <node>' */
        else if (tok_is_lss_set_node) {
 800f6c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d073      	beq.n	800f7b4 <CO_GTWA_process+0x186c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f6cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f6d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f6d8:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f7fe fa5d 	bl	800db9c <checkNet>
 800f6e2:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

            if ((closed != 0U) || NodeErr) {
 800f6e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f6ea:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d103      	bne.n	800f6fc <CO_GTWA_process+0x17b4>
 800f6f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d007      	beq.n	800f70c <CO_GTWA_process+0x17c4>
                err = true;
 800f6fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f700:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f704:	2201      	movs	r2, #1
 800f706:	601a      	str	r2, [r3, #0]
                break;
 800f708:	f000 be45 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f70c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f710:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f714:	2201      	movs	r2, #1
 800f716:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f718:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f71c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f103 0018 	add.w	r0, r3, #24
 800f726:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f72a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f72e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	4613      	mov	r3, r2
 800f736:	2214      	movs	r2, #20
 800f738:	f7fa fdba 	bl	800a2b0 <CO_fifo_readToken>
            gtwa->lssNID = (uint8_t)getU32(tok, 0, 0xFF, &err);
 800f73c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f740:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f744:	22ff      	movs	r2, #255	; 0xff
 800f746:	2100      	movs	r1, #0
 800f748:	f7fe f9c5 	bl	800dad6 <getU32>
 800f74c:	4603      	mov	r3, r0
 800f74e:	b2da      	uxtb	r2, r3
 800f750:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f754:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
            if ((gtwa->lssNID > 0x7FU) && (gtwa->lssNID < 0xFFU)) {
 800f75e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f762:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800f76c:	b25b      	sxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	da0e      	bge.n	800f790 <CO_GTWA_process+0x1848>
 800f772:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f776:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800f780:	2bff      	cmp	r3, #255	; 0xff
 800f782:	d005      	beq.n	800f790 <CO_GTWA_process+0x1848>
                err = true;
 800f784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f78c:	2201      	movs	r2, #1
 800f78e:	601a      	str	r2, [r3, #0]
            }
            if (err) {
 800f790:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f040 85da 	bne.w	8010354 <CO_GTWA_process+0x240c>
                break;
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_SET_NODE;
 800f7a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2222      	movs	r2, #34	; 0x22
 800f7ac:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f7b0:	f000 bd9a 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* LSS configure bit-rate command -
         * 'lss_conf_bitrate <table_selector=0> <table_index>'
         * table_index: 0=1000 kbit/s, 1=800 kbit/s, 2=500 kbit/s, 3=250 kbit/s,
         *   4=125 kbit/s, 6=50 kbit/s, 7=20 kbit/s, 8=10 kbit/s, 9=auto */
        else if (tok_is_lss_conf_bitrate) {
 800f7b4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 808f 	beq.w	800f8dc <CO_GTWA_process+0x1994>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f7be:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f7c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f7ca:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f7ce:	6818      	ldr	r0, [r3, #0]
 800f7d0:	f7fe f9e4 	bl	800db9c <checkNet>
 800f7d4:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            uint8_t tableIndex;
            uint32_t maxIndex = (sizeof(CO_LSS_bitTimingTableLookup) / sizeof(CO_LSS_bitTimingTableLookup[0])) - 1U;
 800f7d8:	2309      	movs	r3, #9
 800f7da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if ((closed != 0U) || NodeErr) {
 800f7de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7e2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d103      	bne.n	800f7f4 <CO_GTWA_process+0x18ac>
 800f7ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d007      	beq.n	800f804 <CO_GTWA_process+0x18bc>
                err = true;
 800f7f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f7f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	601a      	str	r2, [r3, #0]
                break;
 800f800:	f000 bdc9 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* First parameter is table selector. We only support the CiA bit timing table from CiA301 ("0") */
            closed = 0U;
 800f804:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f808:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f80c:	2200      	movs	r2, #0
 800f80e:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f810:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f814:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f103 0018 	add.w	r0, r3, #24
 800f81e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f822:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f826:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	4613      	mov	r3, r2
 800f82e:	2214      	movs	r2, #20
 800f830:	f7fa fd3e 	bl	800a2b0 <CO_fifo_readToken>
            (void)getU32(tok, 0, 0, &err);
 800f834:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f838:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f83c:	2200      	movs	r2, #0
 800f83e:	2100      	movs	r1, #0
 800f840:	f7fe f949 	bl	800dad6 <getU32>

            /* get value */
            closed = 1U;
 800f844:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f848:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f84c:	2201      	movs	r2, #1
 800f84e:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f850:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f854:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f103 0018 	add.w	r0, r3, #24
 800f85e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f862:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f866:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	4613      	mov	r3, r2
 800f86e:	2214      	movs	r2, #20
 800f870:	f7fa fd1e 	bl	800a2b0 <CO_fifo_readToken>
            tableIndex = (uint8_t)getU32(tok, 0, maxIndex, &err);
 800f874:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f878:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f87c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800f880:	2100      	movs	r1, #0
 800f882:	f7fe f928 	bl	800dad6 <getU32>
 800f886:	4603      	mov	r3, r0
 800f888:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            if (tableIndex == 5U) {
 800f88c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f890:	2b05      	cmp	r3, #5
 800f892:	d105      	bne.n	800f8a0 <CO_GTWA_process+0x1958>
                err = true;
 800f894:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f89c:	2201      	movs	r2, #1
 800f89e:	601a      	str	r2, [r3, #0]
            }
            if (err) {
 800f8a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f040 8554 	bne.w	8010358 <CO_GTWA_process+0x2410>
                break;
            }
            gtwa->lssBitrate = CO_LSS_bitTimingTableLookup[tableIndex];
 800f8b0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f8b4:	4ad0      	ldr	r2, [pc, #832]	; (800fbf8 <CO_GTWA_process+0x1cb0>)
 800f8b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f8ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8be:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_CONF_BITRATE;
 800f8c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2223      	movs	r2, #35	; 0x23
 800f8d4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800f8d8:	f000 bd06 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* LSS activate new bit-rate command -
         * 'lss_activate_bitrate <switch_delay_ms>' */
        else if (tok_is_lss_activate_bitrate) {
 800f8dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d076      	beq.n	800f9d2 <CO_GTWA_process+0x1a8a>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f8e4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f8e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f8ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f8f0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f8f4:	6818      	ldr	r0, [r3, #0]
 800f8f6:	f7fe f951 	bl	800db9c <checkNet>
 800f8fa:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
            uint16_t switchDelay;
            CO_LSSmaster_return_t ret;

            if ((closed != 0U) || NodeErr) {
 800f8fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f902:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d103      	bne.n	800f914 <CO_GTWA_process+0x19cc>
 800f90c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f910:	2b00      	cmp	r3, #0
 800f912:	d007      	beq.n	800f924 <CO_GTWA_process+0x19dc>
                err = true;
 800f914:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f918:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f91c:	2201      	movs	r2, #1
 800f91e:	601a      	str	r2, [r3, #0]
                break;
 800f920:	f000 bd39 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* get value */
            closed = 1U;
 800f924:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f928:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f92c:	2201      	movs	r2, #1
 800f92e:	701a      	strb	r2, [r3, #0]
            (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800f930:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f934:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f103 0018 	add.w	r0, r3, #24
 800f93e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800f942:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	4613      	mov	r3, r2
 800f94e:	2214      	movs	r2, #20
 800f950:	f7fa fcae 	bl	800a2b0 <CO_fifo_readToken>
            switchDelay = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800f954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f958:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f95c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f960:	2100      	movs	r1, #0
 800f962:	f7fe f8b8 	bl	800dad6 <getU32>
 800f966:	4603      	mov	r3, r0
 800f968:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if (err) {
 800f96c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f970:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	f040 84f0 	bne.w	801035c <CO_GTWA_process+0x2414>
                break;
            }

            /* send non-confirmed message */
            ret = CO_LSSmaster_ActivateBit(gtwa->LSSmaster, switchDelay);
 800f97c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f980:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f98a:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800f98e:	4611      	mov	r1, r2
 800f990:	4618      	mov	r0, r3
 800f992:	f7fd f816 	bl	800c9c2 <CO_LSSmaster_ActivateBit>
 800f996:	4603      	mov	r3, r0
 800f998:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
            if (ret == CO_LSSmaster_OK) {
 800f99c:	f997 3135 	ldrsb.w	r3, [r7, #309]	; 0x135
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d108      	bne.n	800f9b6 <CO_GTWA_process+0x1a6e>
                responseWithOK(gtwa);
 800f9a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9ac:	6818      	ldr	r0, [r3, #0]
 800f9ae:	f7fe fa2f 	bl	800de10 <responseWithOK>
 800f9b2:	f000 bc99 	b.w	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                respErrorCode = CO_GTWA_respErrorInternalState;
 800f9b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f9be:	2266      	movs	r2, #102	; 0x66
 800f9c0:	801a      	strh	r2, [r3, #0]
                err = true;
 800f9c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	601a      	str	r2, [r3, #0]
                break;
 800f9ce:	f000 bce2 	b.w	8010396 <CO_GTWA_process+0x244e>
            }
        }
        /* LSS store configuration command - 'lss_store' */
        else if (tok_is_lss_store) {
 800f9d2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d029      	beq.n	800fa2e <CO_GTWA_process+0x1ae6>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800f9da:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f9de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f9e6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800f9ea:	6818      	ldr	r0, [r3, #0]
 800f9ec:	f7fe f8d6 	bl	800db9c <checkNet>
 800f9f0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

            if ((closed != 1U) || NodeErr) {
 800f9f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f9f8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d103      	bne.n	800fa0a <CO_GTWA_process+0x1ac2>
 800fa02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d007      	beq.n	800fa1a <CO_GTWA_process+0x1ad2>
                err = true;
 800fa0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fa12:	2201      	movs	r2, #1
 800fa14:	601a      	str	r2, [r3, #0]
                break;
 800fa16:	f000 bcbe 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_STORE;
 800fa1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa1e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2224      	movs	r2, #36	; 0x24
 800fa26:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fa2a:	f000 bc5d 	b.w	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* Inquire LSS address command - 'lss_inquire_addr [<LSSSUB=0..3>]' */
        else if (tok_is_lss_inquire_addr) {
 800fa2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f000 808c 	beq.w	800fb50 <CO_GTWA_process+0x1c08>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800fa38:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800fa3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa44:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800fa48:	6818      	ldr	r0, [r3, #0]
 800fa4a:	f7fe f8a7 	bl	800db9c <checkNet>
 800fa4e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144

            if (NodeErr) {
 800fa52:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d007      	beq.n	800fa6a <CO_GTWA_process+0x1b22>
                err = true;
 800fa5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa5e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fa62:	2201      	movs	r2, #1
 800fa64:	601a      	str	r2, [r3, #0]
                break;
 800fa66:	f000 bc96 	b.w	8010396 <CO_GTWA_process+0x244e>
            }

            if (closed == 0U) {
 800fa6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa6e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d162      	bne.n	800fb3e <CO_GTWA_process+0x1bf6>
                uint8_t lsssub;
                /* get value */
                closed = 1U;
 800fa78:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa7c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fa80:	2201      	movs	r2, #1
 800fa82:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fa84:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fa88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f103 0018 	add.w	r0, r3, #24
 800fa92:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fa96:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fa9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	4613      	mov	r3, r2
 800faa2:	2214      	movs	r2, #20
 800faa4:	f7fa fc04 	bl	800a2b0 <CO_fifo_readToken>
                lsssub = (uint8_t)getU32(tok, 0, 3, &err);
 800faa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800faac:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fab0:	2203      	movs	r2, #3
 800fab2:	2100      	movs	r1, #0
 800fab4:	f7fe f80f 	bl	800dad6 <getU32>
 800fab8:	4603      	mov	r3, r0
 800faba:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
                if (err) {
 800fabe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fac2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f040 8449 	bne.w	8010360 <CO_GTWA_process+0x2418>
                    break;
                }
                switch (lsssub) {
 800face:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d018      	beq.n	800fb08 <CO_GTWA_process+0x1bc0>
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	dc1f      	bgt.n	800fb1a <CO_GTWA_process+0x1bd2>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <CO_GTWA_process+0x1b9c>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d009      	beq.n	800faf6 <CO_GTWA_process+0x1bae>
 800fae2:	e01a      	b.n	800fb1a <CO_GTWA_process+0x1bd2>
                    case 0: gtwa->lssInquireCs = CO_LSS_INQUIRE_VENDOR; break;
 800fae4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fae8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	225a      	movs	r2, #90	; 0x5a
 800faf0:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800faf4:	e01a      	b.n	800fb2c <CO_GTWA_process+0x1be4>
                    case 1: gtwa->lssInquireCs = CO_LSS_INQUIRE_PRODUCT; break;
 800faf6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fafa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	225b      	movs	r2, #91	; 0x5b
 800fb02:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800fb06:	e011      	b.n	800fb2c <CO_GTWA_process+0x1be4>
                    case 2: gtwa->lssInquireCs = CO_LSS_INQUIRE_REV; break;
 800fb08:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	225c      	movs	r2, #92	; 0x5c
 800fb14:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800fb18:	e008      	b.n	800fb2c <CO_GTWA_process+0x1be4>
                    default: gtwa->lssInquireCs = CO_LSS_INQUIRE_SERIAL; break;
 800fb1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb1e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	225d      	movs	r2, #93	; 0x5d
 800fb26:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800fb2a:	bf00      	nop
                }

                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_INQUIRE;
 800fb2c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2225      	movs	r2, #37	; 0x25
 800fb38:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fb3c:	e3d4      	b.n	80102e8 <CO_GTWA_process+0x23a0>
            } else {
                /* continue with state machine */
                gtwa->state = CO_GTWA_ST_LSS_INQUIRE_ADDR_ALL;
 800fb3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2226      	movs	r2, #38	; 0x26
 800fb4a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fb4e:	e3cb      	b.n	80102e8 <CO_GTWA_process+0x23a0>
            }
        }
        /* LSS inquire node-ID command - 'lss_get_node' */
        else if (tok_is_lss_get_node) {
 800fb50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d02f      	beq.n	800fbb8 <CO_GTWA_process+0x1c70>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800fb58:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800fb5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb64:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800fb68:	6818      	ldr	r0, [r3, #0]
 800fb6a:	f7fe f817 	bl	800db9c <checkNet>
 800fb6e:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148

            if ((closed != 1U) || NodeErr) {
 800fb72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb76:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d103      	bne.n	800fb88 <CO_GTWA_process+0x1c40>
 800fb80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d006      	beq.n	800fb96 <CO_GTWA_process+0x1c4e>
                err = true;
 800fb88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fb90:	2201      	movs	r2, #1
 800fb92:	601a      	str	r2, [r3, #0]
                break;
 800fb94:	e3ff      	b.n	8010396 <CO_GTWA_process+0x244e>
            }

            /* continue with state machine */
            gtwa->lssInquireCs = CO_LSS_INQUIRE_NODE_ID;
 800fb96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fb9a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	225e      	movs	r2, #94	; 0x5e
 800fba2:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
            gtwa->state = CO_GTWA_ST_LSS_INQUIRE;
 800fba6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fbaa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2225      	movs	r2, #37	; 0x25
 800fbb2:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fbb6:	e397      	b.n	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* LSS identify fastscan. This is a manufacturer specific command as
         * the one in DSP309 is quite useless - '_lss_fastscan [<timeout_ms>]' */
        else if (tok_is__lss_fastscan) {
 800fbb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d079      	beq.n	800fcb4 <CO_GTWA_process+0x1d6c>
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800fbc0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800fbc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fbc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fbcc:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800fbd0:	6818      	ldr	r0, [r3, #0]
 800fbd2:	f7fd ffe3 	bl	800db9c <checkNet>
 800fbd6:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            uint16_t timeout_ms = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba

            if (NodeErr) {
 800fbe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d009      	beq.n	800fbfc <CO_GTWA_process+0x1cb4>
                err = true;
 800fbe8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fbec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	601a      	str	r2, [r3, #0]
                break;
 800fbf4:	e3cf      	b.n	8010396 <CO_GTWA_process+0x244e>
 800fbf6:	bf00      	nop
 800fbf8:	080224bc 	.word	0x080224bc
            }

            if (closed == 0U) {
 800fbfc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc00:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d12b      	bne.n	800fc62 <CO_GTWA_process+0x1d1a>
                /* get value */
                closed = 1U;
 800fc0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc0e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fc12:	2201      	movs	r2, #1
 800fc14:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fc16:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc1a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f103 0018 	add.w	r0, r3, #24
 800fc24:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fc28:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fc2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	4613      	mov	r3, r2
 800fc34:	2214      	movs	r2, #20
 800fc36:	f7fa fb3b 	bl	800a2b0 <CO_fifo_readToken>
                timeout_ms = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800fc3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc3e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc46:	2100      	movs	r1, #0
 800fc48:	f7fd ff45 	bl	800dad6 <getU32>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
                if (err) {
 800fc52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f040 8381 	bne.w	8010364 <CO_GTWA_process+0x241c>
                    break;
                }
            }

            /* If timeout not specified, use 100ms. Should work in most cases */
            if (timeout_ms == 0U) {
 800fc62:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d102      	bne.n	800fc70 <CO_GTWA_process+0x1d28>
                timeout_ms = 100;
 800fc6a:	2364      	movs	r3, #100	; 0x64
 800fc6c:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
            }
            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, timeout_ms);
 800fc70:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800fc7e:	f8b7 21ba 	ldrh.w	r2, [r7, #442]	; 0x1ba
 800fc82:	4611      	mov	r1, r2
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fc fba7 	bl	800c3d8 <CO_LSSmaster_changeTimeout>

            /* prepare lssFastscan, all zero */
            (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800fc8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fc8e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fc98:	2224      	movs	r2, #36	; 0x24
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f00f fccd 	bl	801f63c <memset>

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST__LSS_FASTSCAN;
 800fca2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fca6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2230      	movs	r2, #48	; 0x30
 800fcae:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800fcb2:	e319      	b.n	80102e8 <CO_GTWA_process+0x23a0>
        }
        /* LSS complete node-ID configuration command - 'lss_allnodes
         * [<timeout_ms> [<nodeStart=1..127> <store=0|1>
         * <scanType0=0..2> <vendorId> <scanType1=0..2> <productCode>
         * <scanType2=0..2> <revisionNo> <scanType3=0..2> <serialNo>]]' */
        else if (tok_is_lss_allnodes) {
 800fcb4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 826f 	beq.w	801019c <CO_GTWA_process+0x2254>
             * If 127 is reached, the process is stopped, no matter if there are nodes remaining or not.
             * - No IDs are assigned because:
             *   - the given criteria do not match any node,
             *   - all nodes are already configured.
             * This function needs that no node is selected when starting the scan process. */
            bool_t NodeErr = checkNet(gtwa, net, &respErrorCode);
 800fcbe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800fcc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fcc6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fcca:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800fcce:	6818      	ldr	r0, [r3, #0]
 800fcd0:	f7fd ff64 	bl	800db9c <checkNet>
 800fcd4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
            uint16_t timeout_ms = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8

            if (NodeErr) {
 800fcde:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d006      	beq.n	800fcf4 <CO_GTWA_process+0x1dac>
                err = true;
 800fce6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fcea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fcee:	2201      	movs	r2, #1
 800fcf0:	601a      	str	r2, [r3, #0]
                break;
 800fcf2:	e350      	b.n	8010396 <CO_GTWA_process+0x244e>
            }

            if (closed == 0U) {
 800fcf4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fcf8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d12b      	bne.n	800fd5a <CO_GTWA_process+0x1e12>
                /* get optional token timeout (non standard) */
                closed = 0xFFU;
 800fd02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd06:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fd0a:	22ff      	movs	r2, #255	; 0xff
 800fd0c:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fd0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f103 0018 	add.w	r0, r3, #24
 800fd1c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fd20:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fd24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	2214      	movs	r2, #20
 800fd2e:	f7fa fabf 	bl	800a2b0 <CO_fifo_readToken>
                timeout_ms = (uint16_t)getU32(tok, 0, 0xFFFF, &err);
 800fd32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd36:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fd3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd3e:	2100      	movs	r1, #0
 800fd40:	f7fd fec9 	bl	800dad6 <getU32>
 800fd44:	4603      	mov	r3, r0
 800fd46:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
                if (err) {
 800fd4a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f040 8307 	bne.w	8010368 <CO_GTWA_process+0x2420>
                    break;
                }
            }
            /* If timeout not specified, use 100ms. Should work in most cases */
            gtwa->lssTimeout_ms = (timeout_ms == 0U) ? 100U : timeout_ms;
 800fd5a:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d002      	beq.n	800fd68 <CO_GTWA_process+0x1e20>
 800fd62:	f8b7 21b8 	ldrh.w	r2, [r7, #440]	; 0x1b8
 800fd66:	e000      	b.n	800fd6a <CO_GTWA_process+0x1e22>
 800fd68:	2264      	movs	r2, #100	; 0x64
 800fd6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, gtwa->lssTimeout_ms);
 800fd78:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 800fd86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fd8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7fc fb1e 	bl	800c3d8 <CO_LSSmaster_changeTimeout>
            gtwa->lssNodeCount = 0;
 800fd9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fda0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            gtwa->lssSubState = 0;
 800fdac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238

            if (closed == 1U) {
 800fdbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdc0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d11b      	bne.n	800fe02 <CO_GTWA_process+0x1eba>
                /* No other arguments, as by CiA specification for this command. Do full scan. */
                /* use start node ID 2. Should work in most cases */
                gtwa->lssNID = 2;
 800fdca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2202      	movs	r2, #2
 800fdd6:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                /* store node ID in node's NVM */
                gtwa->lssStore = true;
 800fdda:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdde:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2201      	movs	r2, #1
 800fde6:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
                /* prepare lssFastscan, all zero */
                (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800fdea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fdee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fdf8:	2224      	movs	r2, #36	; 0x24
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f00f fc1d 	bl	801f63c <memset>
            }
            if (closed == 0U) {
 800fe02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe06:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d16d      	bne.n	800feec <CO_GTWA_process+0x1fa4>
                /* more arguments follow */
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fe10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f103 0018 	add.w	r0, r3, #24
 800fe1e:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fe22:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fe26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	2214      	movs	r2, #20
 800fe30:	f7fa fa3e 	bl	800a2b0 <CO_fifo_readToken>
                gtwa->lssNID = (uint8_t)getU32(tok, 1, 127, &err);
 800fe34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe38:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fe3c:	227f      	movs	r2, #127	; 0x7f
 800fe3e:	2101      	movs	r1, #1
 800fe40:	f7fd fe49 	bl	800dad6 <getU32>
 800fe44:	4603      	mov	r3, r0
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                if (err) {
 800fe56:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f040 8283 	bne.w	801036c <CO_GTWA_process+0x2424>
                    break;
                }

                closed = 0xFFU;
 800fe66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe6a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fe6e:	22ff      	movs	r2, #255	; 0xff
 800fe70:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fe72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fe76:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f103 0018 	add.w	r0, r3, #24
 800fe80:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800fe84:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800fe88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	2214      	movs	r2, #20
 800fe92:	f7fa fa0d 	bl	800a2b0 <CO_fifo_readToken>
                gtwa->lssStore = (bool_t)getU32(tok, 0, 1, &err);
 800fe96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe9a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800fe9e:	2201      	movs	r2, #1
 800fea0:	2100      	movs	r1, #0
 800fea2:	f7fd fe18 	bl	800dad6 <getU32>
 800fea6:	4602      	mov	r2, r0
 800fea8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800feac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
                if (err) {
 800feb6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800feba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f040 8255 	bne.w	8010370 <CO_GTWA_process+0x2428>
                    break;
                }

                if (closed == 1U) {
 800fec6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800feca:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d10b      	bne.n	800feec <CO_GTWA_process+0x1fa4>
                    /* No other arguments, prepare lssFastscan, all zero */
                    (void)memset(&gtwa->lssFastscan, 0, sizeof(gtwa->lssFastscan));
 800fed4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fed8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fee2:	2224      	movs	r2, #36	; 0x24
 800fee4:	2100      	movs	r1, #0
 800fee6:	4618      	mov	r0, r3
 800fee8:	f00f fba8 	bl	801f63c <memset>
                }
            }
            if (closed == 0U) {
 800feec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fef0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f040 8147 	bne.w	801018a <CO_GTWA_process+0x2242>
                /* more arguments follow */
                CO_LSSmaster_fastscan_t* fs = &gtwa->lssFastscan;
 800fefc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ff0a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ff0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f103 0018 	add.w	r0, r3, #24
 800ff1c:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ff20:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ff24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	2214      	movs	r2, #20
 800ff2e:	f7fa f9bf 	bl	800a2b0 <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_VENDOR_ID] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800ff32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ff36:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	f7fd fdca 	bl	800dad6 <getU32>
 800ff42:	4603      	mov	r3, r0
 800ff44:	b2da      	uxtb	r2, r3
 800ff46:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff4a:	701a      	strb	r2, [r3, #0]
                if (err) {
 800ff4c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f040 820c 	bne.w	8010374 <CO_GTWA_process+0x242c>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ff5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f103 0018 	add.w	r0, r3, #24
 800ff6a:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ff6e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ff72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	2214      	movs	r2, #20
 800ff7c:	f7fa f998 	bl	800a2b0 <CO_fifo_readToken>
                fs->match.identity.vendorID = getU32(tok, 0, 0xFFFFFFFFU, &err);
 800ff80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ff84:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800ff88:	f04f 32ff 	mov.w	r2, #4294967295
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	f7fd fda2 	bl	800dad6 <getU32>
 800ff92:	4602      	mov	r2, r0
 800ff94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff98:	605a      	str	r2, [r3, #4]
                if (err) {
 800ff9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ff9e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f040 81e7 	bne.w	8010378 <CO_GTWA_process+0x2430>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800ffaa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f103 0018 	add.w	r0, r3, #24
 800ffb8:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 800ffbc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800ffc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ffc4:	9300      	str	r3, [sp, #0]
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	2214      	movs	r2, #20
 800ffca:	f7fa f971 	bl	800a2b0 <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_PRODUCT] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 800ffce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ffd2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	2100      	movs	r1, #0
 800ffda:	f7fd fd7c 	bl	800dad6 <getU32>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	b2da      	uxtb	r2, r3
 800ffe2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ffe6:	705a      	strb	r2, [r3, #1]
                if (err) {
 800ffe8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800ffec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f040 81c2 	bne.w	801037c <CO_GTWA_process+0x2434>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 800fff8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fffc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f103 0018 	add.w	r0, r3, #24
 8010006:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 801000a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801000e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	4613      	mov	r3, r2
 8010016:	2214      	movs	r2, #20
 8010018:	f7fa f94a 	bl	800a2b0 <CO_fifo_readToken>
                fs->match.identity.productCode = getU32(tok, 0, 0xFFFFFFFFU, &err);
 801001c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010020:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8010024:	f04f 32ff 	mov.w	r2, #4294967295
 8010028:	2100      	movs	r1, #0
 801002a:	f7fd fd54 	bl	800dad6 <getU32>
 801002e:	4602      	mov	r2, r0
 8010030:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010034:	609a      	str	r2, [r3, #8]
                if (err) {
 8010036:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801003a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	f040 819d 	bne.w	8010380 <CO_GTWA_process+0x2438>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 8010046:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801004a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f103 0018 	add.w	r0, r3, #24
 8010054:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 8010058:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801005c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	4613      	mov	r3, r2
 8010064:	2214      	movs	r2, #20
 8010066:	f7fa f923 	bl	800a2b0 <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_REV] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 801006a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801006e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8010072:	2202      	movs	r2, #2
 8010074:	2100      	movs	r1, #0
 8010076:	f7fd fd2e 	bl	800dad6 <getU32>
 801007a:	4603      	mov	r3, r0
 801007c:	b2da      	uxtb	r2, r3
 801007e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010082:	709a      	strb	r2, [r3, #2]
                if (err) {
 8010084:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010088:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	f040 8178 	bne.w	8010384 <CO_GTWA_process+0x243c>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 8010094:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010098:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f103 0018 	add.w	r0, r3, #24
 80100a2:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 80100a6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80100aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	4613      	mov	r3, r2
 80100b2:	2214      	movs	r2, #20
 80100b4:	f7fa f8fc 	bl	800a2b0 <CO_fifo_readToken>
                fs->match.identity.revisionNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 80100b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80100bc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80100c0:	f04f 32ff 	mov.w	r2, #4294967295
 80100c4:	2100      	movs	r1, #0
 80100c6:	f7fd fd06 	bl	800dad6 <getU32>
 80100ca:	4602      	mov	r2, r0
 80100cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80100d0:	60da      	str	r2, [r3, #12]
                if (err) {
 80100d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80100d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f040 8153 	bne.w	8010388 <CO_GTWA_process+0x2440>
                    break;
                }

                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 80100e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80100e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f103 0018 	add.w	r0, r3, #24
 80100f0:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 80100f4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80100f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80100fc:	9300      	str	r3, [sp, #0]
 80100fe:	4613      	mov	r3, r2
 8010100:	2214      	movs	r2, #20
 8010102:	f7fa f8d5 	bl	800a2b0 <CO_fifo_readToken>
                fs->scan[CO_LSS_FASTSCAN_SERIAL] = (CO_LSSmaster_scantype_t)getU32(tok, 0, 2, &err);
 8010106:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801010a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 801010e:	2202      	movs	r2, #2
 8010110:	2100      	movs	r1, #0
 8010112:	f7fd fce0 	bl	800dad6 <getU32>
 8010116:	4603      	mov	r3, r0
 8010118:	b2da      	uxtb	r2, r3
 801011a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801011e:	70da      	strb	r2, [r3, #3]
                if (err) {
 8010120:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010124:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f040 812e 	bne.w	801038c <CO_GTWA_process+0x2444>
                    break;
                }

                closed = 1U;
 8010130:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010134:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8010138:	2201      	movs	r2, #1
 801013a:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 801013c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010140:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f103 0018 	add.w	r0, r3, #24
 801014a:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 801014e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8010152:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	4613      	mov	r3, r2
 801015a:	2214      	movs	r2, #20
 801015c:	f7fa f8a8 	bl	800a2b0 <CO_fifo_readToken>
                fs->match.identity.serialNumber = getU32(tok, 0, 0xFFFFFFFFU, &err);
 8010160:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010164:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8010168:	f04f 32ff 	mov.w	r2, #4294967295
 801016c:	2100      	movs	r1, #0
 801016e:	f7fd fcb2 	bl	800dad6 <getU32>
 8010172:	4602      	mov	r2, r0
 8010174:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010178:	611a      	str	r2, [r3, #16]
                if (err) {
 801017a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801017e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	f040 8103 	bne.w	8010390 <CO_GTWA_process+0x2448>
                    break;
                }
            }

            /* continue with state machine */
            gtwa->state = CO_GTWA_ST_LSS_ALLNODES;
 801018a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801018e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2231      	movs	r2, #49	; 0x31
 8010196:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 801019a:	e0a5      	b.n	80102e8 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
        /* Print help */
        else if (tok_is_help) {
 801019c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d071      	beq.n	8010288 <CO_GTWA_process+0x2340>
            if (closed == 1U) {
 80101a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101a8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d108      	bne.n	80101c4 <CO_GTWA_process+0x227c>
                gtwa->helpString = CO_GTWA_helpString;
 80101b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a94      	ldr	r2, [pc, #592]	; (8010410 <CO_GTWA_process+0x24c8>)
 80101be:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80101c2:	e050      	b.n	8010266 <CO_GTWA_process+0x231e>
            } else {
                /* get second token */
                closed = 1U;
 80101c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101c8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80101cc:	2201      	movs	r2, #1
 80101ce:	701a      	strb	r2, [r3, #0]
                (void)CO_fifo_readToken(&gtwa->commFifo, tok, sizeof(tok), &closed, &err);
 80101d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f103 0018 	add.w	r0, r3, #24
 80101de:	f107 02a3 	add.w	r2, r7, #163	; 0xa3
 80101e2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80101e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	4613      	mov	r3, r2
 80101ee:	2214      	movs	r2, #20
 80101f0:	f7fa f85e 	bl	800a2b0 <CO_fifo_readToken>
                if (err) {
 80101f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80101f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f040 80c8 	bne.w	8010394 <CO_GTWA_process+0x244c>
                    break;
                }

                convertToLower(tok, sizeof(tok));
 8010204:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010208:	2114      	movs	r1, #20
 801020a:	4618      	mov	r0, r3
 801020c:	f7fd fe66 	bl	800dedc <convertToLower>
                if (strcmp(tok, "datatype") == 0) {
 8010210:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010214:	497f      	ldr	r1, [pc, #508]	; (8010414 <CO_GTWA_process+0x24cc>)
 8010216:	4618      	mov	r0, r3
 8010218:	f7ef ffda 	bl	80001d0 <strcmp>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d108      	bne.n	8010234 <CO_GTWA_process+0x22ec>
                    gtwa->helpString = CO_GTWA_helpStringDatatypes;
 8010222:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010226:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a7a      	ldr	r2, [pc, #488]	; (8010418 <CO_GTWA_process+0x24d0>)
 801022e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8010232:	e018      	b.n	8010266 <CO_GTWA_process+0x231e>
                } else if (strcmp(tok, "lss") == 0) {
 8010234:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010238:	4978      	ldr	r1, [pc, #480]	; (801041c <CO_GTWA_process+0x24d4>)
 801023a:	4618      	mov	r0, r3
 801023c:	f7ef ffc8 	bl	80001d0 <strcmp>
 8010240:	4603      	mov	r3, r0
 8010242:	2b00      	cmp	r3, #0
 8010244:	d108      	bne.n	8010258 <CO_GTWA_process+0x2310>
                    gtwa->helpString = CO_GTWA_helpStringLss;
 8010246:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801024a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a73      	ldr	r2, [pc, #460]	; (8010420 <CO_GTWA_process+0x24d8>)
 8010252:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8010256:	e006      	b.n	8010266 <CO_GTWA_process+0x231e>
                } else {
                    err = true;
 8010258:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801025c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010260:	2201      	movs	r2, #1
 8010262:	601a      	str	r2, [r3, #0]
                    break;
 8010264:	e097      	b.n	8010396 <CO_GTWA_process+0x244e>
                }
            }
            /* continue with state machine */
            gtwa->helpStringOffset = 0;
 8010266:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801026a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2200      	movs	r2, #0
 8010272:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
            gtwa->state = CO_GTWA_ST_HELP;
 8010276:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801027a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2281      	movs	r2, #129	; 0x81
 8010282:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8010286:	e02f      	b.n	80102e8 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_HELP */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
        /* Print status led diodes */
        else if (tok_is_led) {
 8010288:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801028c:	2b00      	cmp	r3, #0
 801028e:	d01e      	beq.n	80102ce <CO_GTWA_process+0x2386>
            if (closed == 0U) {
 8010290:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010294:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d106      	bne.n	80102ac <CO_GTWA_process+0x2364>
                err = true;
 801029e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80102a6:	2201      	movs	r2, #1
 80102a8:	601a      	str	r2, [r3, #0]
                break;
 80102aa:	e074      	b.n	8010396 <CO_GTWA_process+0x244e>
            }
            gtwa->ledStringPreviousIndex = 0xFF;
 80102ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	22ff      	movs	r2, #255	; 0xff
 80102b8:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
            gtwa->state = CO_GTWA_ST_LED;
 80102bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2282      	movs	r2, #130	; 0x82
 80102c8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80102cc:	e00c      	b.n	80102e8 <CO_GTWA_process+0x23a0>
        }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

        /* Unrecognized command */
        else {
            respErrorCode = CO_GTWA_respErrorReqNotSupported;
 80102ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80102d6:	2264      	movs	r2, #100	; 0x64
 80102d8:	801a      	strh	r2, [r3, #0]
            err = true;
 80102da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80102e2:	2201      	movs	r2, #1
 80102e4:	601a      	str	r2, [r3, #0]
            break;
 80102e6:	e056      	b.n	8010396 <CO_GTWA_process+0x244e>
    while (CO_fifo_CommSearch(&gtwa->commFifo, false) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 80102e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80102ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	3318      	adds	r3, #24
 80102f4:	2100      	movs	r1, #0
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7f9 ff01 	bl	800a0fe <CO_fifo_CommSearch>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d049      	beq.n	8010396 <CO_GTWA_process+0x244e>
 8010302:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010306:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8010310:	2b00      	cmp	r3, #0
 8010312:	f43d aea2 	beq.w	800e05a <CO_GTWA_process+0x112>
 8010316:	e03e      	b.n	8010396 <CO_GTWA_process+0x244e>
            break;
 8010318:	bf00      	nop
 801031a:	e03c      	b.n	8010396 <CO_GTWA_process+0x244e>
            break;
 801031c:	bf00      	nop
 801031e:	e03a      	b.n	8010396 <CO_GTWA_process+0x244e>
            break;
 8010320:	bf00      	nop
 8010322:	e038      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010324:	bf00      	nop
 8010326:	e036      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010328:	bf00      	nop
 801032a:	e034      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 801032c:	bf00      	nop
 801032e:	e032      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010330:	bf00      	nop
 8010332:	e030      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010334:	bf00      	nop
 8010336:	e02e      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010338:	bf00      	nop
 801033a:	e02c      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 801033c:	bf00      	nop
 801033e:	e02a      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010340:	bf00      	nop
 8010342:	e028      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010344:	bf00      	nop
 8010346:	e026      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010348:	bf00      	nop
 801034a:	e024      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 801034c:	bf00      	nop
 801034e:	e022      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010350:	bf00      	nop
 8010352:	e020      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010354:	bf00      	nop
 8010356:	e01e      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 8010358:	bf00      	nop
 801035a:	e01c      	b.n	8010396 <CO_GTWA_process+0x244e>
                break;
 801035c:	bf00      	nop
 801035e:	e01a      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010360:	bf00      	nop
 8010362:	e018      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010364:	bf00      	nop
 8010366:	e016      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010368:	bf00      	nop
 801036a:	e014      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 801036c:	bf00      	nop
 801036e:	e012      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010370:	bf00      	nop
 8010372:	e010      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010374:	bf00      	nop
 8010376:	e00e      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010378:	bf00      	nop
 801037a:	e00c      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 801037c:	bf00      	nop
 801037e:	e00a      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010380:	bf00      	nop
 8010382:	e008      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010384:	bf00      	nop
 8010386:	e006      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010388:	bf00      	nop
 801038a:	e004      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 801038c:	bf00      	nop
 801038e:	e002      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010390:	bf00      	nop
 8010392:	e000      	b.n	8010396 <CO_GTWA_process+0x244e>
                    break;
 8010394:	bf00      	nop

    /***************************************************************************
     * STATE MACHINE
     ***************************************************************************/
    /* If error, generate error response */
    if (err) {
 8010396:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801039a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d03f      	beq.n	8010424 <CO_GTWA_process+0x24dc>
        if (respErrorCode == CO_GTWA_respErrorNone) {
 80103a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80103ac:	881b      	ldrh	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d105      	bne.n	80103be <CO_GTWA_process+0x2476>
            respErrorCode = CO_GTWA_respErrorSyntax;
 80103b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80103ba:	2265      	movs	r2, #101	; 0x65
 80103bc:	801a      	strh	r2, [r3, #0]
        }
        responseWithError(gtwa, respErrorCode);
 80103be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80103c6:	881a      	ldrh	r2, [r3, #0]
 80103c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80103d0:	4611      	mov	r1, r2
 80103d2:	6818      	ldr	r0, [r3, #0]
 80103d4:	f7fd fc80 	bl	800dcd8 <responseWithError>

        /* delete command, if it was only partially read */
        if (closed == 0U) {
 80103d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103dc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d109      	bne.n	80103fa <CO_GTWA_process+0x24b2>
            (void)CO_fifo_CommSearch(&gtwa->commFifo, true);
 80103e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3318      	adds	r3, #24
 80103f2:	2101      	movs	r1, #1
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f9 fe82 	bl	800a0fe <CO_fifo_CommSearch>
        }
        gtwa->state = CO_GTWA_ST_IDLE;
 80103fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80103fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2200      	movs	r2, #0
 8010406:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 801040a:	f001 ba9e 	b.w	801194a <CO_GTWA_process+0x3a02>
 801040e:	bf00      	nop
 8010410:	080224d0 	.word	0x080224d0
 8010414:	08021e74 	.word	0x08021e74
 8010418:	08022b38 	.word	0x08022b38
 801041c:	08021e80 	.word	0x08021e80
 8010420:	08022d58 	.word	0x08022d58
    }

    else {
        switch (gtwa->state) {
 8010424:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010428:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8010432:	2b82      	cmp	r3, #130	; 0x82
 8010434:	f001 81dd 	beq.w	80117f2 <CO_GTWA_process+0x38aa>
 8010438:	2b82      	cmp	r3, #130	; 0x82
 801043a:	f301 8251 	bgt.w	80118e0 <CO_GTWA_process+0x3998>
 801043e:	2b31      	cmp	r3, #49	; 0x31
 8010440:	dc6c      	bgt.n	801051c <CO_GTWA_process+0x25d4>
 8010442:	2b00      	cmp	r3, #0
 8010444:	f2c1 824c 	blt.w	80118e0 <CO_GTWA_process+0x3998>
 8010448:	2b31      	cmp	r3, #49	; 0x31
 801044a:	f201 8249 	bhi.w	80118e0 <CO_GTWA_process+0x3998>
 801044e:	a201      	add	r2, pc, #4	; (adr r2, 8010454 <CO_GTWA_process+0x250c>)
 8010450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010454:	08011999 	.word	0x08011999
 8010458:	080118e1 	.word	0x080118e1
 801045c:	080118e1 	.word	0x080118e1
 8010460:	080118e1 	.word	0x080118e1
 8010464:	080118e1 	.word	0x080118e1
 8010468:	080118e1 	.word	0x080118e1
 801046c:	080118e1 	.word	0x080118e1
 8010470:	080118e1 	.word	0x080118e1
 8010474:	080118e1 	.word	0x080118e1
 8010478:	080118e1 	.word	0x080118e1
 801047c:	080118e1 	.word	0x080118e1
 8010480:	080118e1 	.word	0x080118e1
 8010484:	080118e1 	.word	0x080118e1
 8010488:	080118e1 	.word	0x080118e1
 801048c:	080118e1 	.word	0x080118e1
 8010490:	080118e1 	.word	0x080118e1
 8010494:	08010527 	.word	0x08010527
 8010498:	080107d3 	.word	0x080107d3
 801049c:	080107d3 	.word	0x080107d3
 80104a0:	080118e1 	.word	0x080118e1
 80104a4:	080118e1 	.word	0x080118e1
 80104a8:	080118e1 	.word	0x080118e1
 80104ac:	080118e1 	.word	0x080118e1
 80104b0:	080118e1 	.word	0x080118e1
 80104b4:	080118e1 	.word	0x080118e1
 80104b8:	080118e1 	.word	0x080118e1
 80104bc:	080118e1 	.word	0x080118e1
 80104c0:	080118e1 	.word	0x080118e1
 80104c4:	080118e1 	.word	0x080118e1
 80104c8:	080118e1 	.word	0x080118e1
 80104cc:	080118e1 	.word	0x080118e1
 80104d0:	080118e1 	.word	0x080118e1
 80104d4:	08010adb 	.word	0x08010adb
 80104d8:	08010b47 	.word	0x08010b47
 80104dc:	08010bbf 	.word	0x08010bbf
 80104e0:	08010c7d 	.word	0x08010c7d
 80104e4:	08010d31 	.word	0x08010d31
 80104e8:	08010dd9 	.word	0x08010dd9
 80104ec:	08010f13 	.word	0x08010f13
 80104f0:	080118e1 	.word	0x080118e1
 80104f4:	080118e1 	.word	0x080118e1
 80104f8:	080118e1 	.word	0x080118e1
 80104fc:	080118e1 	.word	0x080118e1
 8010500:	080118e1 	.word	0x080118e1
 8010504:	080118e1 	.word	0x080118e1
 8010508:	080118e1 	.word	0x080118e1
 801050c:	080118e1 	.word	0x080118e1
 8010510:	080118e1 	.word	0x080118e1
 8010514:	08011025 	.word	0x08011025
 8010518:	08011169 	.word	0x08011169
 801051c:	2b81      	cmp	r3, #129	; 0x81
 801051e:	f001 80c8 	beq.w	80116b2 <CO_GTWA_process+0x376a>
 8010522:	f001 b9dd 	b.w	80118e0 <CO_GTWA_process+0x3998>
            case CO_GTWA_ST_READ: {
                CO_SDO_abortCode_t abortCode;
                size_t sizeTransferred;
                CO_SDO_return_t ret;

                ret = CO_SDOclientUpload(gtwa->SDO_C, timeDifference_us, false, &abortCode, NULL, &sizeTransferred,
 8010526:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801052a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8010534:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010538:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 801053c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010540:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010544:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010548:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801054c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	9302      	str	r3, [sp, #8]
 8010554:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	2300      	movs	r3, #0
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	4613      	mov	r3, r2
 8010560:	2200      	movs	r2, #0
 8010562:	6809      	ldr	r1, [r1, #0]
 8010564:	f7f6 f844 	bl	80065f0 <CO_SDOclientUpload>
 8010568:	4603      	mov	r3, r0
 801056a:	7023      	strb	r3, [r4, #0]
                                         timerNext_us);

                if (ret < CO_SDO_RT_ok_communicationEnd) {
 801056c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010570:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010574:	f993 3000 	ldrsb.w	r3, [r3]
 8010578:	2b00      	cmp	r3, #0
 801057a:	da1c      	bge.n	80105b6 <CO_GTWA_process+0x266e>
                    responseWithErrorSDO(gtwa, abortCode, gtwa->SDOdataCopyStatus);
 801057c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010580:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010584:	6819      	ldr	r1, [r3, #0]
 8010586:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801058a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8010594:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010598:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801059c:	6818      	ldr	r0, [r3, #0]
 801059e:	f7fd fbdf 	bl	800dd60 <responseWithErrorSDO>
                    gtwa->state = CO_GTWA_ST_IDLE;
 80105a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                            break;
                        }
                    } while ((gtwa->respHold == false) && (fifoRemain > 0U));
                } else { /* MISRA C 2004 14.10 */
                }
                break;
 80105b2:	f001 b9b1 	b.w	8011918 <CO_GTWA_process+0x39d0>
                else if ((ret == CO_SDO_RT_uploadDataBufferFull) || (ret == CO_SDO_RT_ok_communicationEnd)) {
 80105b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80105be:	f993 3000 	ldrsb.w	r3, [r3]
 80105c2:	2b05      	cmp	r3, #5
 80105c4:	d008      	beq.n	80105d8 <CO_GTWA_process+0x2690>
 80105c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80105ce:	f993 3000 	ldrsb.w	r3, [r3]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f041 81a0 	bne.w	8011918 <CO_GTWA_process+0x39d0>
                    if (!gtwa->SDOdataCopyStatus) {
 80105d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d121      	bne.n	801062e <CO_GTWA_process+0x26e6>
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE - 2U,
 80105ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                              "[%" PRId32 "] ", (int32_t)gtwa->sequence);
 80105f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80105fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE - 2U,
 8010604:	4ac9      	ldr	r2, [pc, #804]	; (801092c <CO_GTWA_process+0x29e4>)
 8010606:	21c6      	movs	r1, #198	; 0xc6
 8010608:	f00e fed2 	bl	801f3b0 <sniprintf>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010614:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        gtwa->SDOdataCopyStatus = true;
 801061e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010622:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2201      	movs	r2, #1
 801062a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801062e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010632:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 801063c:	689c      	ldr	r4, [r3, #8]
                            &gtwa->SDO_C->bufFifo, &gtwa->respBuf[gtwa->respBufCount],
 801063e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010642:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801064c:	f103 0078 	add.w	r0, r3, #120	; 0x78
                            &gtwa->SDO_C->bufFifo, &gtwa->respBuf[gtwa->respBufCount],
 8010650:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010654:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801065e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010662:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010666:	33f8      	adds	r3, #248	; 0xf8
 8010668:	6812      	ldr	r2, [r2, #0]
 801066a:	4413      	add	r3, r2
 801066c:	1d59      	adds	r1, r3, #5
                            (CO_GTWA_RESP_BUF_SIZE - 2U) - gtwa->respBufCount, ret == CO_SDO_RT_ok_communicationEnd);
 801066e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010672:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
                        gtwa->respBufCount += gtwa->SDOdataType->dataTypePrint(
 801067c:	f1c3 02c6 	rsb	r2, r3, #198	; 0xc6
 8010680:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010684:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010688:	f993 3000 	ldrsb.w	r3, [r3]
 801068c:	2b00      	cmp	r3, #0
 801068e:	bf0c      	ite	eq
 8010690:	2301      	moveq	r3, #1
 8010692:	2300      	movne	r3, #0
 8010694:	b2db      	uxtb	r3, r3
 8010696:	47a0      	blx	r4
 8010698:	4602      	mov	r2, r0
 801069a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801069e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80106a8:	441a      	add	r2, r3
 80106aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106ae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        fifoRemain = CO_fifo_getOccupied(&gtwa->SDO_C->bufFifo);
 80106b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80106c6:	3378      	adds	r3, #120	; 0x78
 80106c8:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80106cc:	f5a2 7490 	sub.w	r4, r2, #288	; 0x120
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fd f98c 	bl	800d9ee <CO_fifo_getOccupied>
 80106d6:	6020      	str	r0, [r4, #0]
                        if ((ret == CO_SDO_RT_ok_communicationEnd) && (fifoRemain == 0U)) {
 80106d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80106e0:	f993 3000 	ldrsb.w	r3, [r3]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d132      	bne.n	801074e <CO_GTWA_process+0x2806>
 80106e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d12b      	bne.n	801074e <CO_GTWA_process+0x2806>
                            gtwa->respBufCount += (size_t)sprintf(&gtwa->respBuf[gtwa->respBufCount], "\r\n");
 80106f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80106fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8010704:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010708:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 801070c:	33f8      	adds	r3, #248	; 0xf8
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	4413      	add	r3, r2
 8010712:	3305      	adds	r3, #5
 8010714:	4986      	ldr	r1, [pc, #536]	; (8010930 <CO_GTWA_process+0x29e8>)
 8010716:	4618      	mov	r0, r3
 8010718:	f00e fe7e 	bl	801f418 <siprintf>
 801071c:	4603      	mov	r3, r0
 801071e:	461a      	mov	r2, r3
 8010720:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010724:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801072e:	441a      	add	r2, r3
 8010730:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010734:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->state = CO_GTWA_ST_IDLE;
 801073e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010742:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2200      	movs	r2, #0
 801074a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        if (respBufTransfer(gtwa) == false) {
 801074e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010752:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010756:	6818      	ldr	r0, [r3, #0]
 8010758:	f7fd fa64 	bl	800dc24 <respBufTransfer>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d123      	bne.n	80107aa <CO_GTWA_process+0x2862>
                            abortCode = CO_SDO_AB_DATA_TRANSF;
 8010762:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010766:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801076a:	4a72      	ldr	r2, [pc, #456]	; (8010934 <CO_GTWA_process+0x29ec>)
 801076c:	601a      	str	r2, [r3, #0]
                            (void)CO_SDOclientUpload(gtwa->SDO_C, 0, true, &abortCode, NULL, NULL, NULL);
 801076e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010772:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801077c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010780:	2200      	movs	r2, #0
 8010782:	9202      	str	r2, [sp, #8]
 8010784:	2200      	movs	r2, #0
 8010786:	9201      	str	r2, [sp, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	9200      	str	r2, [sp, #0]
 801078c:	2201      	movs	r2, #1
 801078e:	2100      	movs	r1, #0
 8010790:	f7f5 ff2e 	bl	80065f0 <CO_SDOclientUpload>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010794:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010798:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                            break;
 80107a4:	bf00      	nop
                break;
 80107a6:	f001 b8b7 	b.w	8011918 <CO_GTWA_process+0x39d0>
                    } while ((gtwa->respHold == false) && (fifoRemain > 0U));
 80107aa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107ae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f041 80ad 	bne.w	8011918 <CO_GTWA_process+0x39d0>
 80107be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f47f af30 	bne.w	801062e <CO_GTWA_process+0x26e6>
                break;
 80107ce:	f001 b8a3 	b.w	8011918 <CO_GTWA_process+0x39d0>
            /* SDO download state */
            case CO_GTWA_ST_WRITE:
            case CO_GTWA_ST_WRITE_ABORTED: {
                CO_SDO_abortCode_t abortCode;
                size_t sizeTransferred;
                bool_t abort_comm = false;
 80107d2:	2300      	movs	r3, #0
 80107d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                bool_t hold = false;
 80107d8:	2300      	movs	r3, #0
 80107da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                CO_SDO_return_t ret;

                /* copy data to the SDO buffer if previous dataTypeScan was partial */
                if (gtwa->SDOdataCopyStatus) {
 80107de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 80a5 	beq.w	801093c <CO_GTWA_process+0x29f4>
                    uint8_t status;
                    gtwa->SDOdataType->dataTypeScan(&gtwa->SDO_C->bufFifo, &gtwa->commFifo, &status);
 80107f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80107f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010806:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 801080a:	6812      	ldr	r2, [r2, #0]
 801080c:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 8010810:	f102 0078 	add.w	r0, r2, #120	; 0x78
 8010814:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010818:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 801081c:	6812      	ldr	r2, [r2, #0]
 801081e:	f102 0118 	add.w	r1, r2, #24
 8010822:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 8010826:	4798      	blx	r3
                    /* set to true, if command delimiter was found */
                    closed = ((status & CO_fifo_st_closed) == 0U) ? 0U : 1U;
 8010828:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801082c:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	bf14      	ite	ne
 801083a:	2301      	movne	r3, #1
 801083c:	2300      	moveq	r3, #0
 801083e:	b2db      	uxtb	r3, r3
 8010840:	461a      	mov	r2, r3
 8010842:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010846:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 801084a:	701a      	strb	r2, [r3, #0]
                    /* set to true, if data are copied only partially */
                    gtwa->SDOdataCopyStatus = (status & CO_fifo_st_partial) != 0U;
 801084c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010850:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	f003 0302 	and.w	r3, r3, #2
 801085a:	2b00      	cmp	r3, #0
 801085c:	bf14      	ite	ne
 801085e:	2301      	movne	r3, #1
 8010860:	2300      	moveq	r3, #0
 8010862:	b2db      	uxtb	r3, r3
 8010864:	461a      	mov	r2, r3
 8010866:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801086a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

                    /* is syntax error in command or not the last token in command */
                    if (((status & CO_fifo_st_errMask) != 0U)
 8010874:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010878:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10f      	bne.n	80108a6 <CO_GTWA_process+0x295e>
                        || ((gtwa->SDOdataCopyStatus == false) && (closed != 1U))) {
 8010886:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801088a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8010894:	2b00      	cmp	r3, #0
 8010896:	d120      	bne.n	80108da <CO_GTWA_process+0x2992>
 8010898:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801089c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d019      	beq.n	80108da <CO_GTWA_process+0x2992>
                        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80108a6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108aa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80108ae:	4a22      	ldr	r2, [pc, #136]	; (8010938 <CO_GTWA_process+0x29f0>)
 80108b0:	601a      	str	r2, [r3, #0]
                        abort_comm = true; /* abort SDO communication */
 80108b2:	2301      	movs	r3, #1
 80108b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                        /* clear the rest of the command, if necessary */
                        if (closed != 1U) {
 80108b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108bc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d009      	beq.n	80108da <CO_GTWA_process+0x2992>
                            (void)CO_fifo_CommSearch(&gtwa->commFifo, true);
 80108c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	3318      	adds	r3, #24
 80108d2:	2101      	movs	r1, #1
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7f9 fc12 	bl	800a0fe <CO_fifo_CommSearch>
                        }
                    }
                    if (gtwa->state == CO_GTWA_ST_WRITE_ABORTED) {
 80108da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80108e8:	2b12      	cmp	r3, #18
 80108ea:	d127      	bne.n	801093c <CO_GTWA_process+0x29f4>
                        /* Stay in this state, until all data transferred via commFifo will be purged. */
                        if (!CO_fifo_purge(&gtwa->SDO_C->bufFifo) || (closed == 1U)) {
 80108ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80108f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80108fa:	3378      	adds	r3, #120	; 0x78
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fd f85a 	bl	800d9b6 <CO_fifo_purge>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d007      	beq.n	8010918 <CO_GTWA_process+0x29d0>
 8010908:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801090c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	2b01      	cmp	r3, #1
 8010914:	f041 8002 	bne.w	801191c <CO_GTWA_process+0x39d4>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8010918:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801091c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8010928:	f001 b80f 	b.w	801194a <CO_GTWA_process+0x3a02>
 801092c:	08021e84 	.word	0x08021e84
 8010930:	08021d2c 	.word	0x08021d2c
 8010934:	08000020 	.word	0x08000020
 8010938:	06040047 	.word	0x06040047
                        break;
                    }
                }
                /* If not all data were transferred, make sure, there is enough data in
                 * SDO buffer, to continue communication. Otherwise wait and check for timeout */
                if (gtwa->SDOdataCopyStatus) {
 801093c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010940:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 801094a:	2b00      	cmp	r3, #0
 801094c:	d038      	beq.n	80109c0 <CO_GTWA_process+0x2a78>
                    if (CO_fifo_getOccupied(&gtwa->SDO_C->bufFifo) < (CO_CONFIG_GTW_BLOCK_DL_LOOP * 7U)) {
 801094e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010952:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801095c:	3378      	adds	r3, #120	; 0x78
 801095e:	4618      	mov	r0, r3
 8010960:	f7fd f845 	bl	800d9ee <CO_fifo_getOccupied>
 8010964:	4603      	mov	r3, r0
 8010966:	2b06      	cmp	r3, #6
 8010968:	d82a      	bhi.n	80109c0 <CO_GTWA_process+0x2a78>
                        if (gtwa->stateTimeoutTmr > CO_GTWA_STATE_TIMEOUT_TIME_US) {
 801096a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801096e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010978:	4abe      	ldr	r2, [pc, #760]	; (8010c74 <CO_GTWA_process+0x2d2c>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d909      	bls.n	8010992 <CO_GTWA_process+0x2a4a>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 801097e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010982:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010986:	4abc      	ldr	r2, [pc, #752]	; (8010c78 <CO_GTWA_process+0x2d30>)
 8010988:	601a      	str	r2, [r3, #0]
                            abort_comm = true;
 801098a:	2301      	movs	r3, #1
 801098c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010990:	e016      	b.n	80109c0 <CO_GTWA_process+0x2a78>
                        } else {
                            gtwa->stateTimeoutTmr += timeDifference_us;
 8010992:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010996:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80109a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	441a      	add	r2, r3
 80109ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
                            hold = true;
 80109ba:	2301      	movs	r3, #1
 80109bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                        }
                    }
                }
                if (!hold || abort_comm) {
 80109c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d004      	beq.n	80109d2 <CO_GTWA_process+0x2a8a>
 80109c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f000 87a7 	beq.w	8011920 <CO_GTWA_process+0x39d8>
                    /* if OS has CANtx queue, speedup block transfer */
                    uint32_t loop = 0;
 80109d2:	2300      	movs	r3, #0
 80109d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
                    do {
                        ret = CO_SDOclientDownload(gtwa->SDO_C, timeDifference_us, abort_comm, gtwa->SDOdataCopyStatus,
 80109d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80109e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80109f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80109f8:	f2a3 141b 	subw	r4, r3, #283	; 0x11b
 80109fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a00:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010a04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a08:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	9302      	str	r3, [sp, #8]
 8010a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8010a22:	6809      	ldr	r1, [r1, #0]
 8010a24:	f7f4 fa64 	bl	8004ef0 <CO_SDOclientDownload>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	7023      	strb	r3, [r4, #0]
                                                   &abortCode, &sizeTransferred, timerNext_us);
                        if (++loop >= CO_CONFIG_GTW_BLOCK_DL_LOOP) {
 8010a2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010a30:	3301      	adds	r3, #1
 8010a32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010a36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d108      	bne.n	8010a50 <CO_GTWA_process+0x2b08>
                            break;
                        }
                    } while (ret == CO_SDO_RT_blockDownldInProgress);
 8010a3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a42:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 8010a46:	f993 3000 	ldrsb.w	r3, [r3]
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d0c4      	beq.n	80109d8 <CO_GTWA_process+0x2a90>
 8010a4e:	e000      	b.n	8010a52 <CO_GTWA_process+0x2b0a>
                            break;
 8010a50:	bf00      	nop

                    /* send response in case of error or finish */
                    if (ret < CO_SDO_RT_ok_communicationEnd) {
 8010a52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a56:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 8010a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	da21      	bge.n	8010aa6 <CO_GTWA_process+0x2b5e>
                        responseWithErrorSDO(gtwa, abortCode, false);
 8010a62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a66:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010a6a:	6819      	ldr	r1, [r3, #0]
 8010a6c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a74:	2200      	movs	r2, #0
 8010a76:	6818      	ldr	r0, [r3, #0]
 8010a78:	f7fd f972 	bl	800dd60 <responseWithErrorSDO>
                        /* purge remaining data if necessary */
                        gtwa->state = gtwa->SDOdataCopyStatus ? CO_GTWA_ST_WRITE_ABORTED : CO_GTWA_ST_IDLE;
 8010a7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <CO_GTWA_process+0x2b4a>
 8010a8e:	2212      	movs	r2, #18
 8010a90:	e000      	b.n	8010a94 <CO_GTWA_process+0x2b4c>
 8010a92:	2200      	movs	r2, #0
 8010a94:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010a98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        responseWithOK(gtwa);
                        gtwa->state = CO_GTWA_ST_IDLE;
                    } else { /* MISRA C 2004 14.10 */
                    }
                }
                break;
 8010aa2:	f000 bf3d 	b.w	8011920 <CO_GTWA_process+0x39d8>
                    } else if (ret == CO_SDO_RT_ok_communicationEnd) {
 8010aa6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010aaa:	f2a3 131b 	subw	r3, r3, #283	; 0x11b
 8010aae:	f993 3000 	ldrsb.w	r3, [r3]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f040 8734 	bne.w	8011920 <CO_GTWA_process+0x39d8>
                        responseWithOK(gtwa);
 8010ab8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010abc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ac0:	6818      	ldr	r0, [r3, #0]
 8010ac2:	f7fd f9a5 	bl	800de10 <responseWithOK>
                        gtwa->state = CO_GTWA_ST_IDLE;
 8010ac6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010aca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                break;
 8010ad6:	f000 bf23 	b.w	8011920 <CO_GTWA_process+0x39d8>
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_SDO */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_LSS) != 0
            case CO_GTWA_ST_LSS_SWITCH_GLOB: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateSelect(gtwa->LSSmaster, timeDifference_us, NULL);
 8010ada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ade:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010ae8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010aec:	f5a3 748d 	sub.w	r4, r3, #282	; 0x11a
 8010af0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010af4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010af8:	2200      	movs	r2, #0
 8010afa:	6819      	ldr	r1, [r3, #0]
 8010afc:	f7fb fd43 	bl	800c586 <CO_LSSmaster_swStateSelect>
 8010b00:	4603      	mov	r3, r0
 8010b02:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010b04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b08:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	f000 8707 	beq.w	8011924 <CO_GTWA_process+0x39dc>
                    responseLSS(gtwa, ret);
 8010b16:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b1a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010b1e:	f993 2000 	ldrsb.w	r2, [r3]
 8010b22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	6818      	ldr	r0, [r3, #0]
 8010b2e:	f7fd f9a5 	bl	800de7c <responseLSS>
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010b32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b36:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010b42:	f000 beef 	b.w	8011924 <CO_GTWA_process+0x39dc>
            }
            case CO_GTWA_ST_LSS_SWITCH_SEL: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_swStateSelect(gtwa->LSSmaster, timeDifference_us, &gtwa->lssAddress);
 8010b46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b4a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010b54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8010b62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b66:	f2a3 1419 	subw	r4, r3, #281	; 0x119
 8010b6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010b72:	6819      	ldr	r1, [r3, #0]
 8010b74:	f7fb fd07 	bl	800c586 <CO_LSSmaster_swStateSelect>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010b7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b80:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8010b84:	f993 3000 	ldrsb.w	r3, [r3]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	f000 86cd 	beq.w	8011928 <CO_GTWA_process+0x39e0>
                    responseLSS(gtwa, ret);
 8010b8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b92:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8010b96:	f993 2000 	ldrsb.w	r2, [r3]
 8010b9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010b9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ba2:	4611      	mov	r1, r2
 8010ba4:	6818      	ldr	r0, [r3, #0]
 8010ba6:	f7fd f969 	bl	800de7c <responseLSS>
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010baa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010bba:	f000 beb5 	b.w	8011928 <CO_GTWA_process+0x39e0>
            }
            case CO_GTWA_ST_LSS_SET_NODE: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_configureNodeId(gtwa->LSSmaster, timeDifference_us, gtwa->lssNID);
 8010bbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bc2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010bcc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bd0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f893 220c 	ldrb.w	r2, [r3, #524]	; 0x20c
 8010bda:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bde:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8010be2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010be6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010bea:	6819      	ldr	r1, [r3, #0]
 8010bec:	f7fb fe2e 	bl	800c84c <CO_LSSmaster_configureNodeId>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010bf4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010bf8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	f000 8693 	beq.w	801192c <CO_GTWA_process+0x39e4>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8010c06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8010c12:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8010c16:	d114      	bne.n	8010c42 <CO_GTWA_process+0x2cfa>
                        respErrorCode = CO_GTWA_respErrorLSSnodeIdNotSupported;
 8010c18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c20:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8010c24:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 8010c26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c2e:	881a      	ldrh	r2, [r3, #0]
 8010c30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c38:	4611      	mov	r1, r2
 8010c3a:	6818      	ldr	r0, [r3, #0]
 8010c3c:	f7fd f84c 	bl	800dcd8 <responseWithError>
 8010c40:	e00d      	b.n	8010c5e <CO_GTWA_process+0x2d16>
                    } else {
                        responseLSS(gtwa, ret);
 8010c42:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010c4a:	f993 2000 	ldrsb.w	r2, [r3]
 8010c4e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c52:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c56:	4611      	mov	r1, r2
 8010c58:	6818      	ldr	r0, [r3, #0]
 8010c5a:	f7fd f90f 	bl	800de7c <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010c5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010c6e:	f000 be5d 	b.w	801192c <CO_GTWA_process+0x39e4>
 8010c72:	bf00      	nop
 8010c74:	00124f80 	.word	0x00124f80
 8010c78:	06040047 	.word	0x06040047
            }
            case CO_GTWA_ST_LSS_CONF_BITRATE: {
                CO_LSSmaster_return_t ret;
                ret = CO_LSSmaster_configureBitTiming(gtwa->LSSmaster, timeDifference_us, gtwa->lssBitrate);
 8010c7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010c8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c8e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8010c98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010c9c:	f2a3 1417 	subw	r4, r3, #279	; 0x117
 8010ca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ca4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010ca8:	6819      	ldr	r1, [r3, #0]
 8010caa:	f7fb fd2d 	bl	800c708 <CO_LSSmaster_configureBitTiming>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010cb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cb6:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8010cba:	f993 3000 	ldrsb.w	r3, [r3]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	f000 8636 	beq.w	8011930 <CO_GTWA_process+0x39e8>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8010cc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cc8:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8010ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8010cd0:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8010cd4:	d114      	bne.n	8010d00 <CO_GTWA_process+0x2db8>
                        respErrorCode = CO_GTWA_respErrorLSSbitRateNotSupported;
 8010cd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010cde:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010ce2:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 8010ce4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ce8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010cec:	881a      	ldrh	r2, [r3, #0]
 8010cee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010cf2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	f7fc ffed 	bl	800dcd8 <responseWithError>
 8010cfe:	e00d      	b.n	8010d1c <CO_GTWA_process+0x2dd4>
                    } else {
                        responseLSS(gtwa, ret);
 8010d00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d04:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8010d08:	f993 2000 	ldrsb.w	r2, [r3]
 8010d0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d14:	4611      	mov	r1, r2
 8010d16:	6818      	ldr	r0, [r3, #0]
 8010d18:	f7fd f8b0 	bl	800de7c <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010d1c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010d2c:	f000 be00 	b.w	8011930 <CO_GTWA_process+0x39e8>
            }
            case CO_GTWA_ST_LSS_STORE: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_configureStore(gtwa->LSSmaster, timeDifference_us);
 8010d30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8010d3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d42:	f5a3 748b 	sub.w	r4, r3, #278	; 0x116
 8010d46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010d4e:	6819      	ldr	r1, [r3, #0]
 8010d50:	4610      	mov	r0, r2
 8010d52:	f7fb fde4 	bl	800c91e <CO_LSSmaster_configureStore>
 8010d56:	4603      	mov	r3, r0
 8010d58:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010d5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d5e:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8010d62:	f993 3000 	ldrsb.w	r3, [r3]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	f000 85e4 	beq.w	8011934 <CO_GTWA_process+0x39ec>
                    if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8010d6c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d70:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8010d74:	f993 3000 	ldrsb.w	r3, [r3]
 8010d78:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8010d7c:	d114      	bne.n	8010da8 <CO_GTWA_process+0x2e60>
                        respErrorCode = CO_GTWA_respErrorLSSparameterStoringFailed;
 8010d7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010d86:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010d8a:	801a      	strh	r2, [r3, #0]
                        responseWithError(gtwa, respErrorCode);
 8010d8c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010d94:	881a      	ldrh	r2, [r3, #0]
 8010d96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d9a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010d9e:	4611      	mov	r1, r2
 8010da0:	6818      	ldr	r0, [r3, #0]
 8010da2:	f7fc ff99 	bl	800dcd8 <responseWithError>
 8010da6:	e00d      	b.n	8010dc4 <CO_GTWA_process+0x2e7c>
                    } else {
                        responseLSS(gtwa, ret);
 8010da8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dac:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8010db0:	f993 2000 	ldrsb.w	r2, [r3]
 8010db4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010db8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	6818      	ldr	r0, [r3, #0]
 8010dc0:	f7fd f85c 	bl	800de7c <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010dc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010dd4:	f000 bdae 	b.w	8011934 <CO_GTWA_process+0x39ec>
            }
            case CO_GTWA_ST_LSS_INQUIRE: {
                CO_LSSmaster_return_t ret;
                uint32_t value;

                ret = CO_LSSmaster_Inquire(gtwa->LSSmaster, timeDifference_us, gtwa->lssInquireCs, &value);
 8010dd8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ddc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010de6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8010df4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010df8:	f2a3 1415 	subw	r4, r3, #277	; 0x115
 8010dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010e00:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8010e04:	f5a1 71e2 	sub.w	r1, r1, #452	; 0x1c4
 8010e08:	6809      	ldr	r1, [r1, #0]
 8010e0a:	f7fb ff28 	bl	800cc5e <CO_LSSmaster_Inquire>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010e12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e16:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010e1a:	f993 3000 	ldrsb.w	r3, [r3]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	f000 858a 	beq.w	8011938 <CO_GTWA_process+0x39f0>
                    if (ret == CO_LSSmaster_OK) {
 8010e24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e28:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d156      	bne.n	8010ee2 <CO_GTWA_process+0x2f9a>
                        if (gtwa->lssInquireCs == CO_LSS_INQUIRE_NODE_ID) {
 8010e34:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8010e42:	2b5e      	cmp	r3, #94	; 0x5e
 8010e44:	d123      	bne.n	8010e8e <CO_GTWA_process+0x2f46>
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010e46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e4a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "[%" PRId32 "] 0x%02" PRIX32 "\r\n",
                                                                  (int32_t)gtwa->sequence, value & 0xFFU);
 8010e54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010e60:	461a      	mov	r2, r3
 8010e62:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e66:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	4613      	mov	r3, r2
 8010e72:	4aba      	ldr	r2, [pc, #744]	; (801115c <CO_GTWA_process+0x3214>)
 8010e74:	21c8      	movs	r1, #200	; 0xc8
 8010e76:	f00e fa9b 	bl	801f3b0 <sniprintf>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8010e8c:	e021      	b.n	8010ed2 <CO_GTWA_process+0x2f8a>
                        } else {
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010e8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010e92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "[%" PRId32 "] 0x%08" PRIX32 "\r\n",
                                                                  (int32_t)gtwa->sequence, value);
 8010e9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ea0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010eae:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	4aa9      	ldr	r2, [pc, #676]	; (8011160 <CO_GTWA_process+0x3218>)
 8010eba:	21c8      	movs	r1, #200	; 0xc8
 8010ebc:	f00e fa78 	bl	801f3b0 <sniprintf>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ec8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        }
                        (void)respBufTransfer(gtwa);
 8010ed2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ed6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010eda:	6818      	ldr	r0, [r3, #0]
 8010edc:	f7fc fea2 	bl	800dc24 <respBufTransfer>
 8010ee0:	e00d      	b.n	8010efe <CO_GTWA_process+0x2fb6>
                    } else {
                        responseLSS(gtwa, ret);
 8010ee2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ee6:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8010eea:	f993 2000 	ldrsb.w	r2, [r3]
 8010eee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ef2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	6818      	ldr	r0, [r3, #0]
 8010efa:	f7fc ffbf 	bl	800de7c <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8010efe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8010f0e:	f000 bd13 	b.w	8011938 <CO_GTWA_process+0x39f0>
            }
            case CO_GTWA_ST_LSS_INQUIRE_ADDR_ALL: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_InquireLssAddress(gtwa->LSSmaster, timeDifference_us, &gtwa->lssAddress);
 8010f12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f16:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8010f20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8010f2e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f32:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8010f36:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010f3e:	6819      	ldr	r1, [r3, #0]
 8010f40:	f7fb fdd2 	bl	800cae8 <CO_LSSmaster_InquireLssAddress>
 8010f44:	4603      	mov	r3, r0
 8010f46:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8010f48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010f50:	f993 3000 	ldrsb.w	r3, [r3]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	f000 84f1 	beq.w	801193c <CO_GTWA_process+0x39f4>
                    if (ret == CO_LSSmaster_OK) {
 8010f5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010f62:	f993 3000 	ldrsb.w	r3, [r3]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d144      	bne.n	8010ff4 <CO_GTWA_process+0x30ac>
                        gtwa->respBufCount = (size_t)snprintf(
                            gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8010f6a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f103 04fd 	add.w	r4, r3, #253	; 0xfd
                            "[%" PRId32 "] 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 "\r\n",
                            (int32_t)gtwa->sequence, gtwa->lssAddress.identity.vendorID,
 8010f78:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(
 8010f84:	461d      	mov	r5, r3
 8010f86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010f8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8010f94:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8010f98:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8010f9c:	6812      	ldr	r2, [r2, #0]
 8010f9e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010fa2:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8010fa6:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8010faa:	6809      	ldr	r1, [r1, #0]
 8010fac:	f8d1 1204 	ldr.w	r1, [r1, #516]	; 0x204
 8010fb0:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8010fb4:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 8010fb8:	6800      	ldr	r0, [r0, #0]
 8010fba:	f8d0 0208 	ldr.w	r0, [r0, #520]	; 0x208
 8010fbe:	9003      	str	r0, [sp, #12]
 8010fc0:	9102      	str	r1, [sp, #8]
 8010fc2:	9201      	str	r2, [sp, #4]
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	4a66      	ldr	r2, [pc, #408]	; (8011164 <CO_GTWA_process+0x321c>)
 8010fca:	21c8      	movs	r1, #200	; 0xc8
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f00e f9ef 	bl	801f3b0 <sniprintf>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->lssAddress.identity.productCode, gtwa->lssAddress.identity.revisionNumber,
                            gtwa->lssAddress.identity.serialNumber);
                        (void)respBufTransfer(gtwa);
 8010fe4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010fe8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	f7fc fe19 	bl	800dc24 <respBufTransfer>
 8010ff2:	e00d      	b.n	8011010 <CO_GTWA_process+0x30c8>
                    } else {
                        responseLSS(gtwa, ret);
 8010ff4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010ff8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010ffc:	f993 2000 	ldrsb.w	r2, [r3]
 8011000:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011004:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011008:	4611      	mov	r1, r2
 801100a:	6818      	ldr	r0, [r3, #0]
 801100c:	f7fc ff36 	bl	800de7c <responseLSS>
                    }
                    gtwa->state = CO_GTWA_ST_IDLE;
 8011010:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011014:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2200      	movs	r2, #0
 801101c:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 8011020:	f000 bc8c 	b.w	801193c <CO_GTWA_process+0x39f4>
            }
            case CO_GTWA_ST__LSS_FASTSCAN: {
                CO_LSSmaster_return_t ret;

                ret = CO_LSSmaster_IdentifyFastscan(gtwa->LSSmaster, timeDifference_us, &gtwa->lssFastscan);
 8011024:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011028:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 8011032:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011036:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8011040:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011044:	f2a3 1413 	subw	r4, r3, #275	; 0x113
 8011048:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801104c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011050:	6819      	ldr	r1, [r3, #0]
 8011052:	f7fb ffb0 	bl	800cfb6 <CO_LSSmaster_IdentifyFastscan>
 8011056:	4603      	mov	r3, r0
 8011058:	7023      	strb	r3, [r4, #0]
                if (ret != CO_LSSmaster_WAIT_SLAVE) {
 801105a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801105e:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8011062:	f993 3000 	ldrsb.w	r3, [r3]
 8011066:	2b01      	cmp	r3, #1
 8011068:	f000 846a 	beq.w	8011940 <CO_GTWA_process+0x39f8>
                    if ((ret == CO_LSSmaster_OK) || (ret == CO_LSSmaster_SCAN_FINISHED)) {
 801106c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011070:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8011074:	f993 3000 	ldrsb.w	r3, [r3]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d007      	beq.n	801108c <CO_GTWA_process+0x3144>
 801107c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011080:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8011084:	f993 3000 	ldrsb.w	r3, [r3]
 8011088:	2b02      	cmp	r3, #2
 801108a:	d144      	bne.n	8011116 <CO_GTWA_process+0x31ce>
                        gtwa->respBufCount = (size_t)snprintf(
                            gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 801108c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011090:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f103 04fd 	add.w	r4, r3, #253	; 0xfd
                            "[%" PRId32 "] 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 " 0x%08" PRIX32 "\r\n",
                            (int32_t)gtwa->sequence, gtwa->lssFastscan.found.identity.vendorID,
 801109a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801109e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
                        gtwa->respBufCount = (size_t)snprintf(
 80110a6:	461d      	mov	r5, r3
 80110a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80110b6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80110ba:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80110be:	6812      	ldr	r2, [r2, #0]
 80110c0:	f8d2 222c 	ldr.w	r2, [r2, #556]	; 0x22c
 80110c4:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80110c8:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 80110cc:	6809      	ldr	r1, [r1, #0]
 80110ce:	f8d1 1230 	ldr.w	r1, [r1, #560]	; 0x230
 80110d2:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 80110d6:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 80110da:	6800      	ldr	r0, [r0, #0]
 80110dc:	f8d0 0234 	ldr.w	r0, [r0, #564]	; 0x234
 80110e0:	9003      	str	r0, [sp, #12]
 80110e2:	9102      	str	r1, [sp, #8]
 80110e4:	9201      	str	r2, [sp, #4]
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	462b      	mov	r3, r5
 80110ea:	4a1e      	ldr	r2, [pc, #120]	; (8011164 <CO_GTWA_process+0x321c>)
 80110ec:	21c8      	movs	r1, #200	; 0xc8
 80110ee:	4620      	mov	r0, r4
 80110f0:	f00e f95e 	bl	801f3b0 <sniprintf>
 80110f4:	4603      	mov	r3, r0
 80110f6:	461a      	mov	r2, r3
 80110f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80110fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            gtwa->lssFastscan.found.identity.productCode,
                            gtwa->lssFastscan.found.identity.revisionNumber,
                            gtwa->lssFastscan.found.identity.serialNumber);
                        (void)respBufTransfer(gtwa);
 8011106:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801110a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	f7fc fd88 	bl	800dc24 <respBufTransfer>
 8011114:	e00d      	b.n	8011132 <CO_GTWA_process+0x31ea>
                    } else {
                        responseLSS(gtwa, ret);
 8011116:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801111a:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 801111e:	f993 2000 	ldrsb.w	r2, [r3]
 8011122:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011126:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801112a:	4611      	mov	r1, r2
 801112c:	6818      	ldr	r0, [r3, #0]
 801112e:	f7fc fea5 	bl	800de7c <responseLSS>
                    }
                    CO_LSSmaster_changeTimeout(gtwa->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT);
 8011132:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011136:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8011140:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011144:	4618      	mov	r0, r3
 8011146:	f7fb f947 	bl	800c3d8 <CO_LSSmaster_changeTimeout>
                    gtwa->state = CO_GTWA_ST_IDLE;
 801114a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801114e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2200      	movs	r2, #0
 8011156:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                }
                break;
 801115a:	e3f1      	b.n	8011940 <CO_GTWA_process+0x39f8>
 801115c:	08021e8c 	.word	0x08021e8c
 8011160:	08021e9c 	.word	0x08021e9c
 8011164:	08021eac 	.word	0x08021eac
            }
            case CO_GTWA_ST_LSS_ALLNODES: {
                CO_LSSmaster_return_t ret;
                if (gtwa->lssSubState == 0U) { /* _lss_fastscan */
 8011168:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801116c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8011176:	2b00      	cmp	r3, #0
 8011178:	f040 80a3 	bne.w	80112c2 <CO_GTWA_process+0x337a>
                    ret = CO_LSSmaster_IdentifyFastscan(gtwa->LSSmaster, timeDifference_us, &gtwa->lssFastscan);
 801117c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011180:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 801118a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801118e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8011198:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801119c:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 80111a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80111a8:	6819      	ldr	r1, [r3, #0]
 80111aa:	f7fb ff04 	bl	800cfb6 <CO_LSSmaster_IdentifyFastscan>
 80111ae:	4603      	mov	r3, r0
 80111b0:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 80111b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111b6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80111ba:	f993 3000 	ldrsb.w	r3, [r3]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d07f      	beq.n	80112c2 <CO_GTWA_process+0x337a>
                        CO_LSSmaster_changeTimeout(gtwa->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT);
 80111c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80111d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fb f8ff 	bl	800c3d8 <CO_LSSmaster_changeTimeout>

                        if ((ret == CO_LSSmaster_OK) || (ret == CO_LSSmaster_SCAN_NOACK)) {
 80111da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111de:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80111e2:	f993 3000 	ldrsb.w	r3, [r3]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d008      	beq.n	80111fc <CO_GTWA_process+0x32b4>
 80111ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80111ee:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80111f2:	f993 3000 	ldrsb.w	r3, [r3]
 80111f6:	f113 0f04 	cmn.w	r3, #4
 80111fa:	d133      	bne.n	8011264 <CO_GTWA_process+0x331c>
                            /* no (more) nodes found, send report sum and finish */
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 80111fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011200:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
                                                                  "# Found %d nodes, search finished.\n"
                                                                  "[%" PRId32 "] OK\r\n",
                                                                  gtwa->lssNodeCount, (int32_t)gtwa->sequence);
 801120a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801120e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8011218:	461a      	mov	r2, r3
                                                                  gtwa->lssNodeCount, (int32_t)gtwa->sequence);
 801121a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801121e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	689b      	ldr	r3, [r3, #8]
                            gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	4613      	mov	r3, r2
 801122a:	4abe      	ldr	r2, [pc, #760]	; (8011524 <CO_GTWA_process+0x35dc>)
 801122c:	21c8      	movs	r1, #200	; 0xc8
 801122e:	f00e f8bf 	bl	801f3b0 <sniprintf>
 8011232:	4603      	mov	r3, r0
 8011234:	461a      	mov	r2, r3
 8011236:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801123a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                            (void)respBufTransfer(gtwa);
 8011244:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011248:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	f7fc fce9 	bl	800dc24 <respBufTransfer>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8011252:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011256:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2200      	movs	r2, #0
 801125e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8011262:	e02e      	b.n	80112c2 <CO_GTWA_process+0x337a>
                        } else if (ret == CO_LSSmaster_SCAN_FINISHED) {
 8011264:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011268:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801126c:	f993 3000 	ldrsb.w	r3, [r3]
 8011270:	2b02      	cmp	r3, #2
 8011272:	d110      	bne.n	8011296 <CO_GTWA_process+0x334e>
                            /* next sub-step */
                            gtwa->lssSubState++;
 8011274:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011278:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8011282:	3301      	adds	r3, #1
 8011284:	b2da      	uxtb	r2, r3
 8011286:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801128a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8011294:	e015      	b.n	80112c2 <CO_GTWA_process+0x337a>
                        } else {
                            /* error occurred */
                            responseLSS(gtwa, ret);
 8011296:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801129a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801129e:	f993 2000 	ldrsb.w	r2, [r3]
 80112a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112aa:	4611      	mov	r1, r2
 80112ac:	6818      	ldr	r0, [r3, #0]
 80112ae:	f7fc fde5 	bl	800de7c <responseLSS>
                            gtwa->state = CO_GTWA_ST_IDLE;
 80112b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2200      	movs	r2, #0
 80112be:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState == 1U) { /* lss_set_node */
 80112c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d17b      	bne.n	80113cc <CO_GTWA_process+0x3484>
                    ret = CO_LSSmaster_configureNodeId(gtwa->LSSmaster, timeDifference_us, gtwa->lssNID);
 80112d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f8d3 01f8 	ldr.w	r0, [r3, #504]	; 0x1f8
 80112e2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f893 220c 	ldrb.w	r2, [r3, #524]	; 0x20c
 80112f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112f4:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 80112f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80112fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011300:	6819      	ldr	r1, [r3, #0]
 8011302:	f7fb faa3 	bl	800c84c <CO_LSSmaster_configureNodeId>
 8011306:	4603      	mov	r3, r0
 8011308:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 801130a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801130e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8011312:	f993 3000 	ldrsb.w	r3, [r3]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d058      	beq.n	80113cc <CO_GTWA_process+0x3484>
                        if (ret == CO_LSSmaster_OK) {
 801131a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801131e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8011322:	f993 3000 	ldrsb.w	r3, [r3]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d11c      	bne.n	8011364 <CO_GTWA_process+0x341c>
                            /* next sub-step */
                            gtwa->lssSubState += gtwa->lssStore ? 1U : 2U;
 801132a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801132e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8011338:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801133c:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8011340:	6812      	ldr	r2, [r2, #0]
 8011342:	f8d2 223c 	ldr.w	r2, [r2, #572]	; 0x23c
 8011346:	2a00      	cmp	r2, #0
 8011348:	d001      	beq.n	801134e <CO_GTWA_process+0x3406>
 801134a:	2201      	movs	r2, #1
 801134c:	e000      	b.n	8011350 <CO_GTWA_process+0x3408>
 801134e:	2202      	movs	r2, #2
 8011350:	4413      	add	r3, r2
 8011352:	b2da      	uxtb	r2, r3
 8011354:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011358:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8011362:	e033      	b.n	80113cc <CO_GTWA_process+0x3484>
                        } else {
                            /* error occurred */
                            if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 8011364:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011368:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801136c:	f993 3000 	ldrsb.w	r3, [r3]
 8011370:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8011374:	d114      	bne.n	80113a0 <CO_GTWA_process+0x3458>
                                respErrorCode = CO_GTWA_respErrorLSSnodeIdNotSupported;
 8011376:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801137a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801137e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8011382:	801a      	strh	r2, [r3, #0]
                                responseWithError(gtwa, respErrorCode);
 8011384:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011388:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801138c:	881a      	ldrh	r2, [r3, #0]
 801138e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011392:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011396:	4611      	mov	r1, r2
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	f7fc fc9d 	bl	800dcd8 <responseWithError>
 801139e:	e00d      	b.n	80113bc <CO_GTWA_process+0x3474>
                            } else {
                                responseLSS(gtwa, ret);
 80113a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113a4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80113a8:	f993 2000 	ldrsb.w	r2, [r3]
 80113ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113b4:	4611      	mov	r1, r2
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	f7fc fd60 	bl	800de7c <responseLSS>
                            }
                            gtwa->state = CO_GTWA_ST_IDLE;
 80113bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState == 2U) { /* lss_store */
 80113cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d169      	bne.n	80114b2 <CO_GTWA_process+0x356a>
                    ret = CO_LSSmaster_configureStore(gtwa->LSSmaster, timeDifference_us);
 80113de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80113ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113f0:	f2a3 1411 	subw	r4, r3, #273	; 0x111
 80113f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80113f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80113fc:	6819      	ldr	r1, [r3, #0]
 80113fe:	4610      	mov	r0, r2
 8011400:	f7fb fa8d 	bl	800c91e <CO_LSSmaster_configureStore>
 8011404:	4603      	mov	r3, r0
 8011406:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_WAIT_SLAVE) {
 8011408:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801140c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8011410:	f993 3000 	ldrsb.w	r3, [r3]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d04c      	beq.n	80114b2 <CO_GTWA_process+0x356a>
                        if (ret == CO_LSSmaster_OK) {
 8011418:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801141c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8011420:	f993 3000 	ldrsb.w	r3, [r3]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d110      	bne.n	801144a <CO_GTWA_process+0x3502>
                            /* next sub-step */
                            gtwa->lssSubState++;
 8011428:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801142c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8011436:	3301      	adds	r3, #1
 8011438:	b2da      	uxtb	r2, r3
 801143a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801143e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8011448:	e033      	b.n	80114b2 <CO_GTWA_process+0x356a>
                        } else {
                            /* error occurred */
                            if (ret == CO_LSSmaster_OK_ILLEGAL_ARGUMENT) {
 801144a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801144e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8011452:	f993 3000 	ldrsb.w	r3, [r3]
 8011456:	f113 0f65 	cmn.w	r3, #101	; 0x65
 801145a:	d114      	bne.n	8011486 <CO_GTWA_process+0x353e>
                                respErrorCode = CO_GTWA_respErrorLSSparameterStoringFailed;
 801145c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011460:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011464:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011468:	801a      	strh	r2, [r3, #0]
                                responseWithError(gtwa, respErrorCode);
 801146a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801146e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011472:	881a      	ldrh	r2, [r3, #0]
 8011474:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011478:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801147c:	4611      	mov	r1, r2
 801147e:	6818      	ldr	r0, [r3, #0]
 8011480:	f7fc fc2a 	bl	800dcd8 <responseWithError>
 8011484:	e00d      	b.n	80114a2 <CO_GTWA_process+0x355a>
                            } else {
                                responseLSS(gtwa, ret);
 8011486:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801148a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801148e:	f993 2000 	ldrsb.w	r2, [r3]
 8011492:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011496:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801149a:	4611      	mov	r1, r2
 801149c:	6818      	ldr	r0, [r3, #0]
 801149e:	f7fc fced 	bl	800de7c <responseLSS>
                            }
                            gtwa->state = CO_GTWA_ST_IDLE;
 80114a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        }
                    }
                }
                if (gtwa->lssSubState >= 3U) { /* lss_switch_glob 0 */
 80114b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80114c0:	2b02      	cmp	r3, #2
 80114c2:	f240 823f 	bls.w	8011944 <CO_GTWA_process+0x39fc>
                    /* send non-confirmed message */
                    ret = CO_LSSmaster_swStateDeselect(gtwa->LSSmaster);
 80114c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80114d4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80114d8:	f2a2 1411 	subw	r4, r2, #273	; 0x111
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fb f895 	bl	800c60c <CO_LSSmaster_swStateDeselect>
 80114e2:	4603      	mov	r3, r0
 80114e4:	7023      	strb	r3, [r4, #0]
                    if (ret != CO_LSSmaster_OK) {
 80114e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114ea:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80114ee:	f993 3000 	ldrsb.w	r3, [r3]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d018      	beq.n	8011528 <CO_GTWA_process+0x35e0>
                        /* error occurred */
                        responseLSS(gtwa, ret);
 80114f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80114fa:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80114fe:	f993 2000 	ldrsb.w	r2, [r3]
 8011502:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011506:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801150a:	4611      	mov	r1, r2
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f7fc fcb5 	bl	800de7c <responseLSS>
                        gtwa->state = CO_GTWA_ST_IDLE;
 8011512:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011516:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2200      	movs	r2, #0
 801151e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                                                              gtwa->lssFastscan.found.identity.revisionNumber,
                                                              gtwa->lssFastscan.found.identity.serialNumber, msg2);
                        (void)respBufTransfer(gtwa);
                    }
                }
                break;
 8011522:	e20f      	b.n	8011944 <CO_GTWA_process+0x39fc>
 8011524:	08021ed4 	.word	0x08021ed4
                        uint8_t lssNidAssigned = gtwa->lssNID;
 8011528:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801152c:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8011530:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8011534:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8011538:	6812      	ldr	r2, [r2, #0]
 801153a:	f892 220c 	ldrb.w	r2, [r2, #524]	; 0x20c
 801153e:	701a      	strb	r2, [r3, #0]
                        const char msg2Fmt[] = "# Not all nodes scanned!\n"
 8011540:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011544:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011548:	4ab6      	ldr	r2, [pc, #728]	; (8011824 <CO_GTWA_process+0x38dc>)
 801154a:	461c      	mov	r4, r3
 801154c:	4615      	mov	r5, r2
 801154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011556:	682b      	ldr	r3, [r5, #0]
 8011558:	6023      	str	r3, [r4, #0]
                        char msg2[sizeof(msg2Fmt) + 10U] = {0};
 801155a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801155e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	3304      	adds	r3, #4
 8011568:	222a      	movs	r2, #42	; 0x2a
 801156a:	2100      	movs	r1, #0
 801156c:	4618      	mov	r0, r3
 801156e:	f00e f865 	bl	801f63c <memset>
                        gtwa->lssNodeCount++;
 8011572:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011576:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8011580:	3301      	adds	r3, #1
 8011582:	b2da      	uxtb	r2, r3
 8011584:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011588:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
                        if (gtwa->lssNID < 127U) {
 8011592:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011596:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 80115a0:	2b7e      	cmp	r3, #126	; 0x7e
 80115a2:	d82a      	bhi.n	80115fa <CO_GTWA_process+0x36b2>
                            gtwa->lssNID++;
 80115a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 80115b2:	3301      	adds	r3, #1
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
                            CO_LSSmaster_changeTimeout(gtwa->LSSmaster, gtwa->lssTimeout_ms);
 80115c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80115d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115d6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f7fa fef8 	bl	800c3d8 <CO_LSSmaster_changeTimeout>
                            gtwa->lssSubState = 0;
 80115e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80115f8:	e015      	b.n	8011626 <CO_GTWA_process+0x36de>
                            sprintf(msg2, msg2Fmt, (int32_t)gtwa->sequence);
 80115fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80115fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	461a      	mov	r2, r3
 8011608:	f107 0110 	add.w	r1, r7, #16
 801160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011610:	4618      	mov	r0, r3
 8011612:	f00d ff01 	bl	801f418 <siprintf>
                            gtwa->state = CO_GTWA_ST_IDLE;
 8011616:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801161a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE,
 8011626:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801162a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f103 05fd 	add.w	r5, r3, #253	; 0xfd
 8011634:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011638:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 801163c:	781e      	ldrb	r6, [r3, #0]
 801163e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011642:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801164c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8011650:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8011654:	6812      	ldr	r2, [r2, #0]
 8011656:	f8d2 222c 	ldr.w	r2, [r2, #556]	; 0x22c
 801165a:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 801165e:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8011662:	6809      	ldr	r1, [r1, #0]
 8011664:	f8d1 1230 	ldr.w	r1, [r1, #560]	; 0x230
 8011668:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 801166c:	f5a0 70de 	sub.w	r0, r0, #444	; 0x1bc
 8011670:	6800      	ldr	r0, [r0, #0]
 8011672:	f8d0 0234 	ldr.w	r0, [r0, #564]	; 0x234
 8011676:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801167a:	9404      	str	r4, [sp, #16]
 801167c:	9003      	str	r0, [sp, #12]
 801167e:	9102      	str	r1, [sp, #8]
 8011680:	9201      	str	r2, [sp, #4]
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	4633      	mov	r3, r6
 8011686:	4a68      	ldr	r2, [pc, #416]	; (8011828 <CO_GTWA_process+0x38e0>)
 8011688:	21c8      	movs	r1, #200	; 0xc8
 801168a:	4628      	mov	r0, r5
 801168c:	f00d fe90 	bl	801f3b0 <sniprintf>
 8011690:	4603      	mov	r3, r0
 8011692:	461a      	mov	r2, r3
 8011694:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011698:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                        (void)respBufTransfer(gtwa);
 80116a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80116a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	f7fc faba 	bl	800dc24 <respBufTransfer>
                break;
 80116b0:	e148      	b.n	8011944 <CO_GTWA_process+0x39fc>
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_LOG */

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_HELP) != 0
            /* Print help string (in multiple segments if necessary) */
            case CO_GTWA_ST_HELP: {
                size_t lenBuf = CO_GTWA_RESP_BUF_SIZE;
 80116b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80116b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ba:	22c8      	movs	r2, #200	; 0xc8
 80116bc:	601a      	str	r2, [r3, #0]
                size_t lenHelp = strlen(gtwa->helpString);
 80116be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80116c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80116cc:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80116d0:	f5a2 7484 	sub.w	r4, r2, #264	; 0x108
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7ee fddb 	bl	8000290 <strlen>
 80116da:	6020      	str	r0, [r4, #0]

                do {
                    size_t lenHelpRemain = lenHelp - gtwa->helpStringOffset;
 80116dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80116e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 80116ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80116ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116f2:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80116f6:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 80116fa:	6809      	ldr	r1, [r1, #0]
 80116fc:	1a8a      	subs	r2, r1, r2
 80116fe:	601a      	str	r2, [r3, #0]
                    size_t lenCopied = (lenBuf < lenHelpRemain) ? lenBuf : lenHelpRemain;
 8011700:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011704:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011708:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801170c:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8011710:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8011714:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8011718:	6809      	ldr	r1, [r1, #0]
 801171a:	6812      	ldr	r2, [r2, #0]
 801171c:	428a      	cmp	r2, r1
 801171e:	bf28      	it	cs
 8011720:	460a      	movcs	r2, r1
 8011722:	601a      	str	r2, [r3, #0]

                    (void)memcpy(gtwa->respBuf, &gtwa->helpString[gtwa->helpStringOffset], lenCopied);
 8011724:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011728:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 8011732:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011736:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8011740:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011744:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 801174e:	18d1      	adds	r1, r2, r3
 8011750:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	f00e f80b 	bl	801f774 <memcpy>

                    gtwa->respBufCount = lenCopied;
 801175e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011762:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801176c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011770:	6812      	ldr	r2, [r2, #0]
 8011772:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                    gtwa->helpStringOffset += lenCopied;
 8011776:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801177a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 8011784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011788:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	441a      	add	r2, r3
 8011790:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011794:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
                    (void)respBufTransfer(gtwa);
 801179e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80117a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	f7fc fa3c 	bl	800dc24 <respBufTransfer>

                    if (gtwa->helpStringOffset == lenHelp) {
 80117ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80117b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80117ba:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80117be:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80117c2:	6812      	ldr	r2, [r2, #0]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d109      	bne.n	80117dc <CO_GTWA_process+0x3894>
                        gtwa->state = CO_GTWA_ST_IDLE;
 80117c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80117cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                        break;
 80117d8:	bf00      	nop
                    }
                } while (gtwa->respHold == false);
                break;
 80117da:	e0b6      	b.n	801194a <CO_GTWA_process+0x3a02>
                } while (gtwa->respHold == false);
 80117dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80117e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f43f af76 	beq.w	80116dc <CO_GTWA_process+0x3794>
                break;
 80117f0:	e0ab      	b.n	801194a <CO_GTWA_process+0x3a02>
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
            /* print CANopen status LED diodes */
            case CO_GTWA_ST_LED: {
                uint8_t i;

                if (CO_fifo_CommSearch(&gtwa->commFifo, false)) {
 80117f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80117f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3318      	adds	r3, #24
 80117fe:	2100      	movs	r1, #0
 8011800:	4618      	mov	r0, r3
 8011802:	f7f8 fc7c 	bl	800a0fe <CO_fifo_CommSearch>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00f      	beq.n	801182c <CO_GTWA_process+0x38e4>
                    gtwa->state = CO_GTWA_ST_IDLE;
 801180c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011810:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2200      	movs	r2, #0
 8011818:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                    i = 4;
 801181c:	2304      	movs	r3, #4
 801181e:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8011822:	e021      	b.n	8011868 <CO_GTWA_process+0x3920>
 8011824:	08021f48 	.word	0x08021f48
 8011828:	08021f04 	.word	0x08021f04
                } else {
                    i = (CO_LED_RED(gtwa->LEDs, CO_LED_CANopen) * 2U) + CO_LED_GREEN(gtwa->LEDs, CO_LED_CANopen);
 801182c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011830:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 801183a:	7a5b      	ldrb	r3, [r3, #9]
 801183c:	b25b      	sxtb	r3, r3
 801183e:	11db      	asrs	r3, r3, #7
 8011840:	b25b      	sxtb	r3, r3
 8011842:	b2db      	uxtb	r3, r3
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	b2db      	uxtb	r3, r3
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	b2da      	uxtb	r2, r3
 801184e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011852:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 801185c:	7a9b      	ldrb	r3, [r3, #10]
 801185e:	09db      	lsrs	r3, r3, #7
 8011860:	b2db      	uxtb	r3, r3
 8011862:	4413      	add	r3, r2
 8011864:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
                }
                if (i > (CO_GTWA_LED_PRINTOUTS_SIZE - 1U)) {
 8011868:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 801186c:	2b04      	cmp	r3, #4
 801186e:	d902      	bls.n	8011876 <CO_GTWA_process+0x392e>
                    i = CO_GTWA_LED_PRINTOUTS_SIZE - 1U;
 8011870:	2304      	movs	r3, #4
 8011872:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
                }

                if (i != gtwa->ledStringPreviousIndex) {
 8011876:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801187a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8011884:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8011888:	429a      	cmp	r2, r3
 801188a:	d05d      	beq.n	8011948 <CO_GTWA_process+0x3a00>
                    gtwa->respBufCount = (size_t)snprintf(gtwa->respBuf, CO_GTWA_RESP_BUF_SIZE, "%s",
 801188c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011890:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f103 00fd 	add.w	r0, r3, #253	; 0xfd
 801189a:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 801189e:	4a41      	ldr	r2, [pc, #260]	; (80119a4 <CO_GTWA_process+0x3a5c>)
 80118a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118a4:	4a40      	ldr	r2, [pc, #256]	; (80119a8 <CO_GTWA_process+0x3a60>)
 80118a6:	21c8      	movs	r1, #200	; 0xc8
 80118a8:	f00d fd82 	bl	801f3b0 <sniprintf>
 80118ac:	4603      	mov	r3, r0
 80118ae:	461a      	mov	r2, r3
 80118b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
                                                          CO_GTWA_LED_PRINTOUTS[i]);
                    (void)respBufTransfer(gtwa);
 80118be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80118c6:	6818      	ldr	r0, [r3, #0]
 80118c8:	f7fc f9ac 	bl	800dc24 <respBufTransfer>
                    gtwa->ledStringPreviousIndex = i;
 80118cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80118da:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
                }
                break;
 80118de:	e033      	b.n	8011948 <CO_GTWA_process+0x3a00>
            }
#endif /* (CO_CONFIG_GTW) & CO_CONFIG_GTW_ASCII_PRINT_LEDS */

            /* illegal state */
            default: {
                respErrorCode = CO_GTWA_respErrorInternalState;
 80118e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80118e8:	2266      	movs	r2, #102	; 0x66
 80118ea:	801a      	strh	r2, [r3, #0]
                responseWithError(gtwa, respErrorCode);
 80118ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80118f4:	881a      	ldrh	r2, [r3, #0]
 80118f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80118fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80118fe:	4611      	mov	r1, r2
 8011900:	6818      	ldr	r0, [r3, #0]
 8011902:	f7fc f9e9 	bl	800dcd8 <responseWithError>
                gtwa->state = CO_GTWA_ST_IDLE;
 8011906:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801190a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2200      	movs	r2, #0
 8011912:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
                break;
 8011916:	e018      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011918:	bf00      	nop
 801191a:	e016      	b.n	801194a <CO_GTWA_process+0x3a02>
                        break;
 801191c:	bf00      	nop
 801191e:	e014      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011920:	bf00      	nop
 8011922:	e012      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011924:	bf00      	nop
 8011926:	e010      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011928:	bf00      	nop
 801192a:	e00e      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 801192c:	bf00      	nop
 801192e:	e00c      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011930:	bf00      	nop
 8011932:	e00a      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011934:	bf00      	nop
 8011936:	e008      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011938:	bf00      	nop
 801193a:	e006      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 801193c:	bf00      	nop
 801193e:	e004      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011940:	bf00      	nop
 8011942:	e002      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011944:	bf00      	nop
 8011946:	e000      	b.n	801194a <CO_GTWA_process+0x3a02>
                break;
 8011948:	bf00      	nop
            }
        } /* switch (gtwa->state) */
    }

    /* execute next CANopen processing immediately, if idle and more commands available */
    if ((timerNext_us != NULL) && (gtwa->state == CO_GTWA_ST_IDLE)) {
 801194a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801194e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d020      	beq.n	801199a <CO_GTWA_process+0x3a52>
 8011958:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801195c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8011966:	2b00      	cmp	r3, #0
 8011968:	d117      	bne.n	801199a <CO_GTWA_process+0x3a52>
        if (CO_fifo_CommSearch(&gtwa->commFifo, false)) {
 801196a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801196e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3318      	adds	r3, #24
 8011976:	2100      	movs	r1, #0
 8011978:	4618      	mov	r0, r3
 801197a:	f7f8 fbc0 	bl	800a0fe <CO_fifo_CommSearch>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <CO_GTWA_process+0x3a52>
            *timerNext_us = 0;
 8011984:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011988:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
 8011992:	e002      	b.n	801199a <CO_GTWA_process+0x3a52>
        return;
 8011994:	bf00      	nop
 8011996:	e000      	b.n	801199a <CO_GTWA_process+0x3a52>
                return; /* skip timerNext_us calculation */
 8011998:	bf00      	nop
        }
    }
}
 801199a:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 801199e:	46bd      	mov	sp, r7
 80119a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a2:	bf00      	nop
 80119a4:	20000000 	.word	0x20000000
 80119a8:	08021f44 	.word	0x08021f44

080119ac <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	460b      	mov	r3, r1
 80119b6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80119b8:	78fb      	ldrb	r3, [r7, #3]
 80119ba:	08db      	lsrs	r3, r3, #3
 80119bc:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80119be:	78fb      	ldrb	r3, [r7, #3]
 80119c0:	f003 0307 	and.w	r3, r3, #7
 80119c4:	2201      	movs	r2, #1
 80119c6:	fa02 f303 	lsl.w	r3, r2, r3
 80119ca:	73bb      	strb	r3, [r7, #14]
               : false;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80119d2:	7bfb      	ldrb	r3, [r7, #15]
 80119d4:	2b09      	cmp	r3, #9
 80119d6:	d807      	bhi.n	80119e8 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80119d8:	7bfb      	ldrb	r3, [r7, #15]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	5cd2      	ldrb	r2, [r2, r3]
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	4013      	ands	r3, r2
 80119e2:	b2db      	uxtb	r3, r3
               : false;
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d001      	beq.n	80119ec <CO_isError+0x40>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <CO_isError+0x42>
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3714      	adds	r7, #20
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80119fa:	b480      	push	{r7}
 80119fc:	b083      	sub	sp, #12
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d007      	beq.n	8011a18 <CO_getErrorRegister+0x1e>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d003      	beq.n	8011a18 <CO_getErrorRegister+0x1e>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	e000      	b.n	8011a1a <CO_getErrorRegister+0x20>
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	370c      	adds	r7, #12
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr

08011a26 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8011a26:	b480      	push	{r7}
 8011a28:	b083      	sub	sp, #12
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d003      	beq.n	8011a3c <CO_NMT_getInternalState+0x16>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f993 3000 	ldrsb.w	r3, [r3]
 8011a3a:	e000      	b.n	8011a3e <CO_NMT_getInternalState+0x18>
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <CO_LSSslave_getState+0x14>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	7c1b      	ldrb	r3, [r3, #16]
 8011a5c:	e000      	b.n	8011a60 <CO_LSSslave_getState+0x16>
 8011a5e:	2300      	movs	r3, #0
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 8011a76:	2300      	movs	r3, #0
 8011a78:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8011a82:	214c      	movs	r1, #76	; 0x4c
 8011a84:	2001      	movs	r0, #1
 8011a86:	f00c f921 	bl	801dccc <calloc>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f000 813b 	beq.w	8011d0c <CO_new+0x2a0>
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	334c      	adds	r3, #76	; 0x4c
 8011a9a:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8011a9c:	2138      	movs	r1, #56	; 0x38
 8011a9e:	2001      	movs	r0, #1
 8011aa0:	f00c f914 	bl	801dccc <calloc>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	611a      	str	r2, [r3, #16]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f000 812b 	beq.w	8011d0c <CO_new+0x2a0>
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	3338      	adds	r3, #56	; 0x38
 8011aba:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8011abc:	2308      	movs	r3, #8
 8011abe:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8011ac0:	2138      	movs	r1, #56	; 0x38
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	f00c f902 	bl	801dccc <calloc>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	461a      	mov	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	615a      	str	r2, [r3, #20]
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f000 8119 	beq.w	8011d0c <CO_new+0x2a0>
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	3338      	adds	r3, #56	; 0x38
 8011ade:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8011ae0:	7afb      	ldrb	r3, [r7, #11]
 8011ae2:	2114      	movs	r1, #20
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f00c f8f1 	bl	801dccc <calloc>
 8011aea:	4603      	mov	r3, r0
 8011aec:	461a      	mov	r2, r3
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	619a      	str	r2, [r3, #24]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	699b      	ldr	r3, [r3, #24]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f000 8108 	beq.w	8011d0c <CO_new+0x2a0>
 8011afc:	7afa      	ldrb	r2, [r7, #11]
 8011afe:	4613      	mov	r3, r2
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	4413      	add	r3, r2
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	461a      	mov	r2, r3
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8011b0e:	2168      	movs	r1, #104	; 0x68
 8011b10:	2001      	movs	r0, #1
 8011b12:	f00c f8db 	bl	801dccc <calloc>
 8011b16:	4603      	mov	r3, r0
 8011b18:	461a      	mov	r2, r3
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	61da      	str	r2, [r3, #28]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	69db      	ldr	r3, [r3, #28]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f000 80f2 	beq.w	8011d0c <CO_new+0x2a0>
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	3368      	adds	r3, #104	; 0x68
 8011b2c:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8011b2e:	2311      	movs	r3, #17
 8011b30:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8011b32:	7abb      	ldrb	r3, [r7, #10]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d912      	bls.n	8011b5e <CO_new+0xf2>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8011b38:	7abb      	ldrb	r3, [r7, #10]
 8011b3a:	2108      	movs	r1, #8
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f00c f8c5 	bl	801dccc <calloc>
 8011b42:	4603      	mov	r3, r0
 8011b44:	461a      	mov	r2, r3
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	621a      	str	r2, [r3, #32]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6a1b      	ldr	r3, [r3, #32]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 80dc 	beq.w	8011d0c <CO_new+0x2a0>
 8011b54:	7abb      	ldrb	r3, [r7, #10]
 8011b56:	00db      	lsls	r3, r3, #3
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8011b5e:	21ac      	movs	r1, #172	; 0xac
 8011b60:	2001      	movs	r0, #1
 8011b62:	f00c f8b3 	bl	801dccc <calloc>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461a      	mov	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 80ca 	beq.w	8011d0c <CO_new+0x2a0>
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	33ac      	adds	r3, #172	; 0xac
 8011b7c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0U) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8011b7e:	f240 41b4 	movw	r1, #1204	; 0x4b4
 8011b82:	2001      	movs	r0, #1
 8011b84:	f00c f8a2 	bl	801dccc <calloc>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f000 80b9 	beq.w	8011d0c <CO_new+0x2a0>
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8011ba0:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8011ba2:	212c      	movs	r1, #44	; 0x2c
 8011ba4:	2001      	movs	r0, #1
 8011ba6:	f00c f891 	bl	801dccc <calloc>
 8011baa:	4603      	mov	r3, r0
 8011bac:	461a      	mov	r2, r3
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 80a8 	beq.w	8011d0c <CO_new+0x2a0>
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	332c      	adds	r3, #44	; 0x2c
 8011bc0:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8011bc2:	215c      	movs	r1, #92	; 0x5c
 8011bc4:	2001      	movs	r0, #1
 8011bc6:	f00c f881 	bl	801dccc <calloc>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	461a      	mov	r2, r3
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 8098 	beq.w	8011d0c <CO_new+0x2a0>
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	335c      	adds	r3, #92	; 0x5c
 8011be0:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8011be2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8011be6:	2001      	movs	r0, #1
 8011be8:	f00c f870 	bl	801dccc <calloc>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f000 8087 	beq.w	8011d0c <CO_new+0x2a0>
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8011c04:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8011c06:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8011c0a:	200c      	movs	r0, #12
 8011c0c:	f00c f85e 	bl	801dccc <calloc>
 8011c10:	4603      	mov	r3, r0
 8011c12:	461a      	mov	r2, r3
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	639a      	str	r2, [r3, #56]	; 0x38
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d075      	beq.n	8011d0c <CO_new+0x2a0>
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8011c26:	3310      	adds	r3, #16
 8011c28:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8011c2a:	210c      	movs	r1, #12
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	f00c f84d 	bl	801dccc <calloc>
 8011c32:	4603      	mov	r3, r0
 8011c34:	461a      	mov	r2, r3
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d064      	beq.n	8011d0c <CO_new+0x2a0>
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	330c      	adds	r3, #12
 8011c46:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8011c48:	2174      	movs	r1, #116	; 0x74
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	f00c f83e 	bl	801dccc <calloc>
 8011c50:	4603      	mov	r3, r0
 8011c52:	461a      	mov	r2, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	641a      	str	r2, [r3, #64]	; 0x40
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d055      	beq.n	8011d0c <CO_new+0x2a0>
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	3374      	adds	r3, #116	; 0x74
 8011c64:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_MST = 0);
        if (CO_GET_CNT(LSS_MST) == 1U) {
            CO_alloc_break_on_fail(co->LSSmaster, CO_GET_CNT(LSS_MST), sizeof(*co->LSSmaster));
 8011c66:	2128      	movs	r1, #40	; 0x28
 8011c68:	2001      	movs	r0, #1
 8011c6a:	f00c f82f 	bl	801dccc <calloc>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	461a      	mov	r2, r3
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	645a      	str	r2, [r3, #68]	; 0x44
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d046      	beq.n	8011d0c <CO_new+0x2a0>
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	3328      	adds	r3, #40	; 0x28
 8011c82:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
        if (CO_GET_CNT(GTWA) == 1U) {
            CO_alloc_break_on_fail(co->gtwa, CO_GET_CNT(GTWA), sizeof(*co->gtwa));
 8011c84:	f44f 7115 	mov.w	r1, #596	; 0x254
 8011c88:	2001      	movs	r0, #1
 8011c8a:	f00c f81f 	bl	801dccc <calloc>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	461a      	mov	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	649a      	str	r2, [r3, #72]	; 0x48
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d036      	beq.n	8011d0c <CO_new+0x2a0>
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011ca4:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8011ca6:	2138      	movs	r1, #56	; 0x38
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f00c f80f 	bl	801dccc <calloc>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	605a      	str	r2, [r3, #4]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d026      	beq.n	8011d0c <CO_new+0x2a0>
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	3338      	adds	r3, #56	; 0x38
 8011cc2:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8011cc4:	210c      	movs	r1, #12
 8011cc6:	2011      	movs	r0, #17
 8011cc8:	f00c f800 	bl	801dccc <calloc>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	461a      	mov	r2, r3
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	609a      	str	r2, [r3, #8]
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	689b      	ldr	r3, [r3, #8]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d017      	beq.n	8011d0c <CO_new+0x2a0>
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	33cc      	adds	r3, #204	; 0xcc
 8011ce0:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8011ce2:	2118      	movs	r1, #24
 8011ce4:	2014      	movs	r0, #20
 8011ce6:	f00b fff1 	bl	801dccc <calloc>
 8011cea:	4603      	mov	r3, r0
 8011cec:	461a      	mov	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	60da      	str	r2, [r3, #12]
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d008      	beq.n	8011d0c <CO_new+0x2a0>
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011d00:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2201      	movs	r2, #1
 8011d06:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d102      	bne.n	8011d18 <CO_new+0x2ac>
        CO_delete(co);
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f000 f80b 	bl	8011d2e <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d002      	beq.n	8011d24 <CO_new+0x2b8>
        *heapMemoryUsed = mem;
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	693a      	ldr	r2, [r7, #16]
 8011d22:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8011d24:	697b      	ldr	r3, [r7, #20]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3718      	adds	r7, #24
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <CO_delete>:

void
CO_delete(CO_t* co) {
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b082      	sub	sp, #8
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d062      	beq.n	8011e02 <CO_delete+0xd4>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 ffeb 	bl	8012d1c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f00b ffe4 	bl	801dd18 <free>
    CO_free(co->CANrx);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f00b ffdf 	bl	801dd18 <free>
    CO_free(co->CANmodule);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f00b ffda 	bl	801dd18 <free>
#if (CO_CONFIG_TRACE) & CO_CONFIG_TRACE_ENABLE
    CO_free(co->trace);
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    CO_free(co->gtwa);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f00b ffd5 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d72:	4618      	mov	r0, r3
 8011d74:	f00b ffd0 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f00b ffcb 	bl	801dd18 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d86:	4618      	mov	r0, r3
 8011d88:	f00b ffc6 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d90:	4618      	mov	r0, r3
 8011d92:	f00b ffc1 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f00b ffbc 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da4:	4618      	mov	r0, r3
 8011da6:	f00b ffb7 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dae:	4618      	mov	r0, r3
 8011db0:	f00b ffb2 	bl	801dd18 <free>
#endif

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011db8:	4618      	mov	r0, r3
 8011dba:	f00b ffad 	bl	801dd18 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f00b ffa8 	bl	801dd18 <free>

    /* Emergency */
    CO_free(co->em);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	69db      	ldr	r3, [r3, #28]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f00b ffa3 	bl	801dd18 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a1b      	ldr	r3, [r3, #32]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f00b ff9e 	bl	801dd18 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	699b      	ldr	r3, [r3, #24]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f00b ff99 	bl	801dd18 <free>
    CO_free(co->HBcons);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	695b      	ldr	r3, [r3, #20]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f00b ff94 	bl	801dd18 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f00b ff8f 	bl	801dd18 <free>

    /* CANopen object */
    CO_free(co);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f00b ff8c 	bl	801dd18 <free>
 8011e00:	e000      	b.n	8011e04 <CO_delete+0xd6>
        return;
 8011e02:	bf00      	nop
}
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b08a      	sub	sp, #40	; 0x28
 8011e0e:	af04      	add	r7, sp, #16
 8011e10:	60f8      	str	r0, [r7, #12]
 8011e12:	60b9      	str	r1, [r7, #8]
 8011e14:	4613      	mov	r3, r2
 8011e16:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d102      	bne.n	8011e24 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8011e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e22:	e01a      	b.n	8011e5a <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8011e2c:	68b8      	ldr	r0, [r7, #8]
 8011e2e:	f000 fe85 	bl	8012b3c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6858      	ldr	r0, [r3, #4]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	6899      	ldr	r1, [r3, #8]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	68db      	ldr	r3, [r3, #12]
 8011e3e:	88fa      	ldrh	r2, [r7, #6]
 8011e40:	9202      	str	r2, [sp, #8]
 8011e42:	2214      	movs	r2, #20
 8011e44:	9201      	str	r2, [sp, #4]
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	2311      	movs	r3, #17
 8011e4a:	460a      	mov	r2, r1
 8011e4c:	68b9      	ldr	r1, [r7, #8]
 8011e4e:	f000 fe9d 	bl	8012b8c <CO_CANmodule_init>
 8011e52:	4603      	mov	r3, r0
 8011e54:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8011e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3718      	adds	r7, #24
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}

08011e62 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b08c      	sub	sp, #48	; 0x30
 8011e66:	af06      	add	r7, sp, #24
 8011e68:	60f8      	str	r0, [r7, #12]
 8011e6a:	60b9      	str	r1, [r7, #8]
 8011e6c:	607a      	str	r2, [r7, #4]
 8011e6e:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d102      	bne.n	8011e7c <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7a:	e01a      	b.n	8011eb2 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	6852      	ldr	r2, [r2, #4]
 8011e88:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8011e8c:	9105      	str	r1, [sp, #20]
 8011e8e:	2112      	movs	r1, #18
 8011e90:	9104      	str	r1, [sp, #16]
 8011e92:	9203      	str	r2, [sp, #12]
 8011e94:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8011e98:	9202      	str	r2, [sp, #8]
 8011e9a:	220f      	movs	r2, #15
 8011e9c:	9201      	str	r2, [sp, #4]
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	683a      	ldr	r2, [r7, #0]
 8011ea4:	68b9      	ldr	r1, [r7, #8]
 8011ea6:	f7fb fae3 	bl	800d470 <CO_LSSslave_init>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8011eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3718      	adds	r7, #24
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <CO_CANopenInit>:
				uint16_t SDOserverTimeoutTime_ms,
				uint16_t SDOclientTimeoutTime_ms,
                bool_t SDOclientBlockTransfer,
				uint8_t nodeId,
				uint32_t* errInfo)
{
 8011ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ebe:	b097      	sub	sp, #92	; 0x5c
 8011ec0:	af0c      	add	r7, sp, #48	; 0x30
 8011ec2:	6178      	str	r0, [r7, #20]
 8011ec4:	6139      	str	r1, [r7, #16]
 8011ec6:	60fa      	str	r2, [r7, #12]
 8011ec8:	60bb      	str	r3, [r7, #8]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL)))
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <CO_CANopenInit+0x1a>
    {
     return CO_ERROR_ILLEGAL_ARGUMENT;
 8011ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed4:	e1ba      	b.n	801224c <CO_CANopenInit+0x390>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {co->NMT = NMT; }


    if (em == NULL) { em = co->em; }
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d102      	bne.n	8011ee2 <CO_CANopenInit+0x26>
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	69db      	ldr	r3, [r3, #28]
 8011ee0:	60fb      	str	r3, [r7, #12]



    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0

    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT))
 8011ee8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8011eec:	2bff      	cmp	r3, #255	; 0xff
 8011eee:	d103      	bne.n	8011ef8 <CO_CANopenInit+0x3c>
    {
     co->nodeIdUnconfigured = true;
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	601a      	str	r2, [r3, #0]
 8011ef6:	e00a      	b.n	8011f0e <CO_CANopenInit+0x52>

    } else

#endif
        if ((nodeId < 1U) || (nodeId > 127U))
 8011ef8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d003      	beq.n	8011f08 <CO_CANopenInit+0x4c>
 8011f00:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	da02      	bge.n	8011f0e <CO_CANopenInit+0x52>
        {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8011f08:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0c:	e19e      	b.n	801224c <CO_CANopenInit+0x390>

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

    if (CO_GET_CNT(LEDS) == 1U)
    {
      err = CO_LEDs_init(co->LEDs);
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7f9 ffc4 	bl	800bea0 <CO_LEDs_init>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	767b      	strb	r3, [r7, #25]
      if (err != CO_ERROR_NO) { return err; }
 8011f1c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <CO_CANopenInit+0x6e>
 8011f24:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011f28:	e190      	b.n	801224c <CO_CANopenInit+0x390>
    }

#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if ( co->nodeIdUnconfigured ) { return CO_ERROR_NODE_ID_UNCONFIGURED_LSS; }
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <CO_CANopenInit+0x7c>
 8011f32:	f06f 0312 	mvn.w	r3, #18
 8011f36:	e189      	b.n	801224c <CO_CANopenInit+0x390>


    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
    {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	69dc      	ldr	r4, [r3, #28]
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	685d      	ldr	r5, [r3, #4]
 8011f40:	4b8a      	ldr	r3, [pc, #552]	; (801216c <CO_CANopenInit+0x2b0>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	f103 060c 	add.w	r6, r3, #12
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	6a1b      	ldr	r3, [r3, #32]
 8011f4e:	607b      	str	r3, [r7, #4]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8011f50:	4b86      	ldr	r3, [pc, #536]	; (801216c <CO_CANopenInit+0x2b0>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011f56:	336c      	adds	r3, #108	; 0x6c

#endif

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0

      OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8011f58:	4a84      	ldr	r2, [pc, #528]	; (801216c <CO_CANopenInit+0x2b0>)
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8011f5e:	3218      	adds	r2, #24
 8011f60:	6979      	ldr	r1, [r7, #20]
 8011f62:	6849      	ldr	r1, [r1, #4]
 8011f64:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011f66:	9008      	str	r0, [sp, #32]
 8011f68:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
 8011f6c:	9007      	str	r0, [sp, #28]
 8011f6e:	2002      	movs	r0, #2
 8011f70:	9006      	str	r0, [sp, #24]
 8011f72:	9105      	str	r1, [sp, #20]
 8011f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f76:	9104      	str	r1, [sp, #16]
 8011f78:	9203      	str	r2, [sp, #12]
 8011f7a:	2202      	movs	r2, #2
 8011f7c:	9202      	str	r2, [sp, #8]
 8011f7e:	9301      	str	r3, [sp, #4]
 8011f80:	2311      	movs	r3, #17
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	4632      	mov	r2, r6
 8011f88:	4629      	mov	r1, r5
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f7ef fac8 	bl	8001520 <CO_EM_init>
 8011f90:	4603      	mov	r3, r0
 8011f92:	767b      	strb	r3, [r7, #25]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
      co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
      nodeId, errInfo);

        if (err != CO_ERROR_NO) {  return err;  }
 8011f94:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d002      	beq.n	8011fa2 <CO_CANopenInit+0xe6>
 8011f9c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011fa0:	e154      	b.n	801224c <CO_CANopenInit+0x390>


    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
    {
       err = CO_NMT_init (	co->NMT,
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	691d      	ldr	r5, [r3, #16]
    		   	   	   	   	OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8011fa6:	4b71      	ldr	r3, [pc, #452]	; (801216c <CO_CANopenInit+0x2b0>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	685b      	ldr	r3, [r3, #4]
       err = CO_NMT_init (	co->NMT,
 8011fac:	f103 0690 	add.w	r6, r3, #144	; 0x90
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	697a      	ldr	r2, [r7, #20]
 8011fb6:	6852      	ldr	r2, [r2, #4]
 8011fb8:	6979      	ldr	r1, [r7, #20]
 8011fba:	6849      	ldr	r1, [r1, #4]
 8011fbc:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
 8011fc0:	b280      	uxth	r0, r0
 8011fc2:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 8011fc6:	b280      	uxth	r0, r0
 8011fc8:	f897 c058 	ldrb.w	ip, [r7, #88]	; 0x58
 8011fcc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8011fce:	940b      	str	r4, [sp, #44]	; 0x2c
 8011fd0:	900a      	str	r0, [sp, #40]	; 0x28
 8011fd2:	2011      	movs	r0, #17
 8011fd4:	9009      	str	r0, [sp, #36]	; 0x24
 8011fd6:	9108      	str	r1, [sp, #32]
 8011fd8:	2100      	movs	r1, #0
 8011fda:	9107      	str	r1, [sp, #28]
 8011fdc:	2100      	movs	r1, #0
 8011fde:	9106      	str	r1, [sp, #24]
 8011fe0:	9205      	str	r2, [sp, #20]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	9204      	str	r2, [sp, #16]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	9203      	str	r2, [sp, #12]
 8011fea:	9302      	str	r3, [sp, #8]
 8011fec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011ff0:	9301      	str	r3, [sp, #4]
 8011ff2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	4663      	mov	r3, ip
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	4631      	mov	r1, r6
 8011ffe:	4628      	mov	r0, r5
 8012000:	f7f0 f9be 	bl	8002380 <CO_NMT_init>
 8012004:	4603      	mov	r3, r0
 8012006:	767b      	strb	r3, [r7, #25]
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
							co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
							co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);

        if (err != CO_ERROR_NO) { return err; }
 8012008:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <CO_CANopenInit+0x15a>
 8012010:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012014:	e11a      	b.n	801224c <CO_CANopenInit+0x390>

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0

    if (CO_GET_CNT(HB_CONS) == 1U)
    {
       err = CO_HBconsumer_init	( co->HBcons,
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	6958      	ldr	r0, [r3, #20]
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	699c      	ldr	r4, [r3, #24]
    		   	   	   	   	   	  em,
								  co->HBconsMonitoredNodes,
								  CO_GET_CNT(ARR_1016),
                                  OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 801201e:	4b53      	ldr	r3, [pc, #332]	; (801216c <CO_CANopenInit+0x2b0>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
       err = CO_HBconsumer_init	( co->HBcons,
 8012024:	3384      	adds	r3, #132	; 0x84
 8012026:	697a      	ldr	r2, [r7, #20]
 8012028:	6852      	ldr	r2, [r2, #4]
 801202a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801202c:	9103      	str	r1, [sp, #12]
 801202e:	2107      	movs	r1, #7
 8012030:	9102      	str	r1, [sp, #8]
 8012032:	9201      	str	r2, [sp, #4]
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	2308      	movs	r3, #8
 8012038:	4622      	mov	r2, r4
 801203a:	68f9      	ldr	r1, [r7, #12]
 801203c:	f7ef fe64 	bl	8001d08 <CO_HBconsumer_init>
 8012040:	4603      	mov	r3, r0
 8012042:	767b      	strb	r3, [r7, #25]
								  co->CANmodule,
								  CO_GET_CO(RX_IDX_HB_CONS),
								  errInfo
								 );

        if (err != CO_ERROR_NO) {  return err; }
 8012044:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <CO_CANopenInit+0x196>
 801204c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012050:	e0fc      	b.n	801224c <CO_CANopenInit+0x390>
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U)
    			{
    				OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8012052:	4b46      	ldr	r3, [pc, #280]	; (801216c <CO_CANopenInit+0x2b0>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	33b4      	adds	r3, #180	; 0xb4
 801205a:	627b      	str	r3, [r7, #36]	; 0x24

    				for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 801205c:	2300      	movs	r3, #0
 801205e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012060:	e030      	b.n	80120c4 <CO_CANopenInit+0x208>
    						{ err = CO_SDOserver_init ( &co->SDOserver[i],
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012068:	21ac      	movs	r1, #172	; 0xac
 801206a:	fb01 f303 	mul.w	r3, r1, r3
 801206e:	18d5      	adds	r5, r2, r3
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012076:	3205      	adds	r2, #5
 8012078:	b292      	uxth	r2, r2
 801207a:	6979      	ldr	r1, [r7, #20]
 801207c:	6849      	ldr	r1, [r1, #4]
 801207e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8012080:	300f      	adds	r0, #15
 8012082:	b280      	uxth	r0, r0
 8012084:	f897 6058 	ldrb.w	r6, [r7, #88]	; 0x58
 8012088:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801208a:	9405      	str	r4, [sp, #20]
 801208c:	9004      	str	r0, [sp, #16]
 801208e:	9103      	str	r1, [sp, #12]
 8012090:	9202      	str	r2, [sp, #8]
 8012092:	9301      	str	r3, [sp, #4]
 8012094:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	4633      	mov	r3, r6
 801209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801209e:	68b9      	ldr	r1, [r7, #8]
 80120a0:	4628      	mov	r0, r5
 80120a2:	f7f6 f82f 	bl	8008104 <CO_SDOserver_init>
 80120a6:	4603      	mov	r3, r0
 80120a8:	767b      	strb	r3, [r7, #25]
														co->CANmodule,
														CO_GET_CO(TX_IDX_SDO_SRV) + i,
														errInfo
													  );

    						if (err != CO_ERROR_NO) {  return err;  }
 80120aa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <CO_CANopenInit+0x1fc>
 80120b2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80120b6:	e0c9      	b.n	801224c <CO_CANopenInit+0x390>
    						SDOsrvPar++;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	330c      	adds	r3, #12
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24
    				for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 80120be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120c0:	3301      	adds	r3, #1
 80120c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80120c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d0cb      	beq.n	8012062 <CO_CANopenInit+0x1a6>

#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0

    if (CO_GET_CNT(SDO_CLI) > 0U)
    		{
        	OD_entry_t* SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 80120ca:	4b28      	ldr	r3, [pc, #160]	; (801216c <CO_CANopenInit+0x2b0>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	33c0      	adds	r3, #192	; 0xc0
 80120d2:	61fb      	str	r3, [r7, #28]
        		for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++)
 80120d4:	2300      	movs	r3, #0
 80120d6:	837b      	strh	r3, [r7, #26]
 80120d8:	e02e      	b.n	8012138 <CO_CANopenInit+0x27c>
        				{
        				err = CO_SDOclient_init(&co->SDOclient[i], od, SDOcliPar, nodeId, co->CANmodule,
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120de:	8b7b      	ldrh	r3, [r7, #26]
 80120e0:	f240 41b4 	movw	r1, #1204	; 0x4b4
 80120e4:	fb01 f303 	mul.w	r3, r1, r3
 80120e8:	18d5      	adds	r5, r2, r3
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	8b7a      	ldrh	r2, [r7, #26]
 80120f0:	3206      	adds	r2, #6
 80120f2:	b292      	uxth	r2, r2
 80120f4:	6979      	ldr	r1, [r7, #20]
 80120f6:	6849      	ldr	r1, [r1, #4]
 80120f8:	8b78      	ldrh	r0, [r7, #26]
 80120fa:	3010      	adds	r0, #16
 80120fc:	b280      	uxth	r0, r0
 80120fe:	f897 6058 	ldrb.w	r6, [r7, #88]	; 0x58
 8012102:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8012104:	9404      	str	r4, [sp, #16]
 8012106:	9003      	str	r0, [sp, #12]
 8012108:	9102      	str	r1, [sp, #8]
 801210a:	9201      	str	r2, [sp, #4]
 801210c:	9300      	str	r3, [sp, #0]
 801210e:	4633      	mov	r3, r6
 8012110:	69fa      	ldr	r2, [r7, #28]
 8012112:	68b9      	ldr	r1, [r7, #8]
 8012114:	4628      	mov	r0, r5
 8012116:	f7f2 fce3 	bl	8004ae0 <CO_SDOclient_init>
 801211a:	4603      	mov	r3, r0
 801211c:	767b      	strb	r3, [r7, #25]
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
        				SDOcliPar++;
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	330c      	adds	r3, #12
 8012122:	61fb      	str	r3, [r7, #28]
        				if (err != CO_ERROR_NO) { return err; }
 8012124:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d002      	beq.n	8012132 <CO_CANopenInit+0x276>
 801212c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012130:	e08c      	b.n	801224c <CO_CANopenInit+0x390>
        		for (uint16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++)
 8012132:	8b7b      	ldrh	r3, [r7, #26]
 8012134:	3301      	adds	r3, #1
 8012136:	837b      	strh	r3, [r7, #26]
 8012138:	8b7b      	ldrh	r3, [r7, #26]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0cd      	beq.n	80120da <CO_CANopenInit+0x21e>

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0

    if (CO_GET_CNT(TIME) == 1U)
    {
        err = CO_TIME_init ( co->TIME,
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        					 OD_GET(H1012, OD_H1012_COBID_TIME),
 8012142:	4b0a      	ldr	r3, [pc, #40]	; (801216c <CO_CANopenInit+0x2b0>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init ( co->TIME,
 8012148:	f103 0160 	add.w	r1, r3, #96	; 0x60
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	685a      	ldr	r2, [r3, #4]
 8012150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	2303      	movs	r3, #3
 8012156:	f7f7 fca1 	bl	8009a9c <CO_TIME_init>
 801215a:	4603      	mov	r3, r0
 801215c:	767b      	strb	r3, [r7, #25]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {  return err; }
 801215e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d004      	beq.n	8012170 <CO_CANopenInit+0x2b4>
 8012166:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801216a:	e06f      	b.n	801224c <CO_CANopenInit+0x390>
 801216c:	20000634 	.word	0x20000634

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0

    if (CO_GET_CNT(SYNC) == 1U)
    {
        err = CO_SYNC_init ( co->SYNC,
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	6b1d      	ldr	r5, [r3, #48]	; 0x30
        					 em,
							 OD_GET(H1005, OD_H1005_COBID_SYNC),
 8012174:	4b37      	ldr	r3, [pc, #220]	; (8012254 <CO_CANopenInit+0x398>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 801217a:	f103 0624 	add.w	r6, r3, #36	; 0x24
							 OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 801217e:	4b35      	ldr	r3, [pc, #212]	; (8012254 <CO_CANopenInit+0x398>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 8012184:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                             OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8012188:	4b32      	ldr	r3, [pc, #200]	; (8012254 <CO_CANopenInit+0x398>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init ( co->SYNC,
 801218e:	333c      	adds	r3, #60	; 0x3c
							 OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8012190:	4a30      	ldr	r2, [pc, #192]	; (8012254 <CO_CANopenInit+0x398>)
 8012192:	6812      	ldr	r2, [r2, #0]
 8012194:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init ( co->SYNC,
 8012196:	32a8      	adds	r2, #168	; 0xa8
 8012198:	6979      	ldr	r1, [r7, #20]
 801219a:	6849      	ldr	r1, [r1, #4]
 801219c:	6978      	ldr	r0, [r7, #20]
 801219e:	6840      	ldr	r0, [r0, #4]
 80121a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80121a2:	9406      	str	r4, [sp, #24]
 80121a4:	2401      	movs	r4, #1
 80121a6:	9405      	str	r4, [sp, #20]
 80121a8:	9004      	str	r0, [sp, #16]
 80121aa:	2001      	movs	r0, #1
 80121ac:	9003      	str	r0, [sp, #12]
 80121ae:	9102      	str	r1, [sp, #8]
 80121b0:	9201      	str	r2, [sp, #4]
 80121b2:	9300      	str	r3, [sp, #0]
 80121b4:	4663      	mov	r3, ip
 80121b6:	4632      	mov	r2, r6
 80121b8:	68f9      	ldr	r1, [r7, #12]
 80121ba:	4628      	mov	r0, r5
 80121bc:	f7f7 f9a8 	bl	8009510 <CO_SYNC_init>
 80121c0:	4603      	mov	r3, r0
 80121c2:	767b      	strb	r3, [r7, #25]
							 co->CANmodule,
							 CO_GET_CO(TX_IDX_SYNC),
#endif
							 errInfo);

        if (err != CO_ERROR_NO) { return err; }
 80121c4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <CO_CANopenInit+0x316>
 80121cc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80121d0:	e03c      	b.n	801224c <CO_CANopenInit+0x390>
    }
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    if (CO_GET_CNT(LSS_MST) == 1U) {
        err = CO_LSSmaster_init(co->LSSmaster, CO_LSSmaster_DEFAULT_TIMEOUT, co->CANmodule, CO_GET_CO(RX_IDX_LSS_MST),
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	685a      	ldr	r2, [r3, #4]
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	f240 71e5 	movw	r1, #2021	; 0x7e5
 80121e2:	9103      	str	r1, [sp, #12]
 80121e4:	2113      	movs	r1, #19
 80121e6:	9102      	str	r1, [sp, #8]
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	2310      	movs	r3, #16
 80121f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121f6:	f7fa f88f 	bl	800c318 <CO_LSSmaster_init>
 80121fa:	4603      	mov	r3, r0
 80121fc:	767b      	strb	r3, [r7, #25]
                                CO_CAN_ID_LSS_SLV, co->CANmodule, CO_GET_CO(TX_IDX_LSS_MST), CO_CAN_ID_LSS_MST);
        if (err != CO_ERROR_NO) {
 80121fe:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <CO_CANopenInit+0x350>
            return err;
 8012206:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801220a:	e01f      	b.n	801224c <CO_CANopenInit+0x390>
    }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    if (CO_GET_CNT(GTWA) == 1U) {
        err = CO_GTWA_init(co->gtwa,
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	691b      	ldr	r3, [r3, #16]
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801221c:	6979      	ldr	r1, [r7, #20]
 801221e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8012220:	f8b7 5050 	ldrh.w	r5, [r7, #80]	; 0x50
 8012224:	2600      	movs	r6, #0
 8012226:	9603      	str	r6, [sp, #12]
 8012228:	9102      	str	r1, [sp, #8]
 801222a:	9201      	str	r2, [sp, #4]
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012230:	462a      	mov	r2, r5
 8012232:	4621      	mov	r1, r4
 8012234:	f7fb fbf6 	bl	800da24 <CO_GTWA_init>
 8012238:	4603      	mov	r3, r0
 801223a:	767b      	strb	r3, [r7, #25]
#endif
#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII_PRINT_LEDS) != 0
                           co->LEDs,
#endif
                           0);
        if (err != CO_ERROR_NO) {
 801223c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <CO_CANopenInit+0x38e>
            return err;
 8012244:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8012248:	e000      	b.n	801224c <CO_CANopenInit+0x390>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	372c      	adds	r7, #44	; 0x2c
 8012250:	46bd      	mov	sp, r7
 8012252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012254:	20000634 	.word	0x20000634

08012258 <CO_CANopenInitPDO>:
CO_CANopenInitPDO (	CO_t* 		co,
					CO_EM_t* 	em,
					OD_t* 		od,
					uint8_t 	nodeId,
					uint32_t* 	errInfo )
{
 8012258:	b590      	push	{r4, r7, lr}
 801225a:	b093      	sub	sp, #76	; 0x4c
 801225c:	af06      	add	r7, sp, #24
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
 8012264:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d102      	bne.n	8012272 <CO_CANopenInitPDO+0x1a>
 801226c:	f04f 33ff 	mov.w	r3, #4294967295
 8012270:	e0b3      	b.n	80123da <CO_CANopenInitPDO+0x182>


    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured)
 8012272:	78fb      	ldrb	r3, [r7, #3]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d007      	beq.n	8012288 <CO_CANopenInitPDO+0x30>
 8012278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801227c:	2b00      	cmp	r3, #0
 801227e:	db03      	blt.n	8012288 <CO_CANopenInitPDO+0x30>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d009      	beq.n	801229c <CO_CANopenInitPDO+0x44>
    {
     return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <CO_CANopenInitPDO+0x3e>
 8012290:	f06f 0312 	mvn.w	r3, #18
 8012294:	e0a1      	b.n	80123da <CO_CANopenInitPDO+0x182>
 8012296:	f04f 33ff 	mov.w	r3, #4294967295
 801229a:	e09e      	b.n	80123da <CO_CANopenInitPDO+0x182>

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0

    if (CO_GET_CNT(RPDO) > 0U)
    {
     OD_entry_t* RPDOcomm 	= OD_GET(H1400, OD_H1400_RXPDO_1_PARAM  );
 801229c:	4b51      	ldr	r3, [pc, #324]	; (80123e4 <CO_CANopenInitPDO+0x18c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	33cc      	adds	r3, #204	; 0xcc
 80122a4:	62fb      	str	r3, [r7, #44]	; 0x2c
     OD_entry_t* RPDOmap 	= OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80122a6:	4b4f      	ldr	r3, [pc, #316]	; (80123e4 <CO_CANopenInitPDO+0x18c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	33d8      	adds	r3, #216	; 0xd8
 80122ae:	62bb      	str	r3, [r7, #40]	; 0x28
     for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 80122b0:	2300      	movs	r3, #0
 80122b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122b4:	e03d      	b.n	8012332 <CO_CANopenInitPDO+0xda>
     	 {
    	 CO_ReturnError_t err;
    	 uint16_t preDefinedCanId = 0;
 80122b6:	2300      	movs	r3, #0
 80122b8:	84bb      	strh	r3, [r7, #36]	; 0x24
    	 if (i < CO_RPDO_DEFAULT_CANID_COUNT)
 80122ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122bc:	2b03      	cmp	r3, #3
 80122be:	d808      	bhi.n	80122d2 <CO_CANopenInitPDO+0x7a>
    	 	 {

#if CO_RPDO_DEFAULT_CANID_COUNT <= 4

    		 preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 80122c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122c2:	3302      	adds	r3, #2
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	021b      	lsls	r3, r3, #8
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	78fb      	ldrb	r3, [r7, #3]
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	4413      	add	r3, r2
 80122d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    		 uint16_t pdoOffset = i % 4;
    		 uint16_t nodeIdOffset = i / 4;
    		 preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init (&co->RPDO[i],
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122d8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80122dc:	fb01 f303 	mul.w	r3, r1, r3
 80122e0:	18d0      	adds	r0, r2, r3
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80122ec:	3204      	adds	r2, #4
 80122ee:	b292      	uxth	r2, r2
 80122f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122f2:	9105      	str	r1, [sp, #20]
 80122f4:	9204      	str	r2, [sp, #16]
 80122f6:	9303      	str	r3, [sp, #12]
 80122f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fa:	9302      	str	r3, [sp, #8]
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	9301      	str	r3, [sp, #4]
 8012300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	4623      	mov	r3, r4
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	6879      	ldr	r1, [r7, #4]
 801230a:	f7f1 fa23 	bl	8003754 <CO_RPDO_init>
 801230e:	4603      	mov	r3, r0
 8012310:	75bb      	strb	r3, [r7, #22]
								RPDOmap,
								co->CANmodule,
								CO_GET_CO(RX_IDX_RPDO) + i,
								errInfo
							  );
            if (err != CO_ERROR_NO) { return err; }
 8012312:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <CO_CANopenInitPDO+0xc8>
 801231a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801231e:	e05c      	b.n	80123da <CO_CANopenInitPDO+0x182>


            RPDOcomm++;
 8012320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012322:	330c      	adds	r3, #12
 8012324:	62fb      	str	r3, [r7, #44]	; 0x2c
            RPDOmap++;
 8012326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012328:	330c      	adds	r3, #12
 801232a:	62bb      	str	r3, [r7, #40]	; 0x28
     for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 801232c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801232e:	3301      	adds	r3, #1
 8012330:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012334:	2b00      	cmp	r3, #0
 8012336:	d0be      	beq.n	80122b6 <CO_CANopenInitPDO+0x5e>

#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8012338:	4b2a      	ldr	r3, [pc, #168]	; (80123e4 <CO_CANopenInitPDO+0x18c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	33e4      	adds	r3, #228	; 0xe4
 8012340:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8012342:	4b28      	ldr	r3, [pc, #160]	; (80123e4 <CO_CANopenInitPDO+0x18c>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801234c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 801234e:	2300      	movs	r3, #0
 8012350:	837b      	strh	r3, [r7, #26]
 8012352:	e03e      	b.n	80123d2 <CO_CANopenInitPDO+0x17a>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8012354:	2300      	movs	r3, #0
 8012356:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8012358:	8b7b      	ldrh	r3, [r7, #26]
 801235a:	2b03      	cmp	r3, #3
 801235c:	d809      	bhi.n	8012372 <CO_CANopenInitPDO+0x11a>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 801235e:	8b7b      	ldrh	r3, [r7, #26]
 8012360:	021b      	lsls	r3, r3, #8
 8012362:	b29a      	uxth	r2, r3
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	b29b      	uxth	r3, r3
 8012368:	4413      	add	r3, r2
 801236a:	b29b      	uxth	r3, r3
 801236c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012370:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012376:	8b7b      	ldrh	r3, [r7, #26]
 8012378:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 801237c:	fb01 f303 	mul.w	r3, r1, r3
 8012380:	18d0      	adds	r0, r2, r3
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	8b7a      	ldrh	r2, [r7, #26]
 801238c:	3203      	adds	r2, #3
 801238e:	b292      	uxth	r2, r2
 8012390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012392:	9105      	str	r1, [sp, #20]
 8012394:	9204      	str	r2, [sp, #16]
 8012396:	9303      	str	r3, [sp, #12]
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	9302      	str	r3, [sp, #8]
 801239c:	6a3b      	ldr	r3, [r7, #32]
 801239e:	9301      	str	r3, [sp, #4]
 80123a0:	8b3b      	ldrh	r3, [r7, #24]
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	4623      	mov	r3, r4
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	6879      	ldr	r1, [r7, #4]
 80123aa:	f7f1 fdb3 	bl	8003f14 <CO_TPDO_init>
 80123ae:	4603      	mov	r3, r0
 80123b0:	75fb      	strb	r3, [r7, #23]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 80123b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d002      	beq.n	80123c0 <CO_CANopenInitPDO+0x168>
                return err;
 80123ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123be:	e00c      	b.n	80123da <CO_CANopenInitPDO+0x182>
            }
            TPDOcomm++;
 80123c0:	6a3b      	ldr	r3, [r7, #32]
 80123c2:	330c      	adds	r3, #12
 80123c4:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	330c      	adds	r3, #12
 80123ca:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80123cc:	8b7b      	ldrh	r3, [r7, #26]
 80123ce:	3301      	adds	r3, #1
 80123d0:	837b      	strh	r3, [r7, #26]
 80123d2:	8b7b      	ldrh	r3, [r7, #26]
 80123d4:	2b0b      	cmp	r3, #11
 80123d6:	d9bd      	bls.n	8012354 <CO_CANopenInitPDO+0xfc>
        }
    }
#endif

    return CO_ERROR_NO;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3734      	adds	r7, #52	; 0x34
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd90      	pop	{r4, r7, pc}
 80123e2:	bf00      	nop
 80123e4:	20000634 	.word	0x20000634

080123e8 <CO_process>:
CO_NMT_reset_cmd_t
CO_process(	CO_t* co,
			bool_t enableGateway,
			uint32_t timeDifference_us,
			uint32_t* timerNext_us )
{
 80123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ea:	b09b      	sub	sp, #108	; 0x6c
 80123ec:	af08      	add	r7, sp, #32
 80123ee:	61f8      	str	r0, [r7, #28]
 80123f0:	61b9      	str	r1, [r7, #24]
 80123f2:	617a      	str	r2, [r7, #20]
 80123f4:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t 		reset 	= CO_RESET_NOT;
 80123f6:	2300      	movs	r3, #0
 80123f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t 	NMTstate = CO_NMT_getInternalState(co->NMT);
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	4618      	mov	r0, r3
 8012402:	f7ff fb10 	bl	8011a26 <CO_NMT_getInternalState>
 8012406:	4603      	mov	r3, r0
 8012408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t 					NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 801240c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012410:	2b7f      	cmp	r3, #127	; 0x7f
 8012412:	d003      	beq.n	801241c <CO_process+0x34>
 8012414:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012418:	2b05      	cmp	r3, #5
 801241a:	d101      	bne.n	8012420 <CO_process+0x38>
 801241c:	2301      	movs	r3, #1
 801241e:	e000      	b.n	8012422 <CO_process+0x3a>
 8012420:	2300      	movs	r3, #0
 8012422:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	4618      	mov	r0, r3
 801242a:	f000 fe0e 	bl	801304a <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)

    if (CO_GET_CNT(LSS_SLV) == 1U)
    {
      if (CO_LSSslave_process(co->LSSslave)) { reset = CO_RESET_COMM; }
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012432:	4618      	mov	r0, r3
 8012434:	f7fb f892 	bl	800d55c <CO_LSSslave_process>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d002      	beq.n	8012444 <CO_process+0x5c>
 801243e:	2301      	movs	r3, #1
 8012440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE)!= 0
    bool_t 		unc 			= co->nodeIdUnconfigured;
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t 	CANerrorStatus 	= co->CANmodule->CANerrorStatus;
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	8a5b      	ldrh	r3, [r3, #18]
 8012450:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t 		LSSslave_configuration = false;
 8012452:	2300      	movs	r3, #0
 8012454:	643b      	str	r3, [r7, #64]	; 0x40

	#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0

		if (CO_GET_CNT(LSS_SLV) == 1U)
		{
			if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION)
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245a:	4618      	mov	r0, r3
 801245c:	f7ff faf5 	bl	8011a4a <CO_LSSslave_getState>
 8012460:	4603      	mov	r3, r0
 8012462:	2b01      	cmp	r3, #1
 8012464:	d101      	bne.n	801246a <CO_process+0x82>
					{ LSSslave_configuration = true; }
 8012466:	2301      	movs	r3, #1
 8012468:	643b      	str	r3, [r7, #64]	; 0x40
		#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
		#endif

		if (CO_GET_CNT(LEDS) == 1U)
		{
			bool_t ErrSync 	     	= CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	2118      	movs	r1, #24
 8012470:	4618      	mov	r0, r3
 8012472:	f7ff fa9b 	bl	80119ac <CO_isError>
 8012476:	62f8      	str	r0, [r7, #44]	; 0x2c
			bool_t ErrHbCons 		= CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	69db      	ldr	r3, [r3, #28]
 801247c:	211b      	movs	r1, #27
 801247e:	4618      	mov	r0, r3
 8012480:	f7ff fa94 	bl	80119ac <CO_isError>
 8012484:	62b8      	str	r0, [r7, #40]	; 0x28
			bool_t ErrHbConsRemote 	= CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	69db      	ldr	r3, [r3, #28]
 801248a:	211c      	movs	r1, #28
 801248c:	4618      	mov	r0, r3
 801248e:	f7ff fa8d 	bl	80119ac <CO_isError>
 8012492:	6278      	str	r0, [r7, #36]	; 0x24
			CO_LEDs_process(co->LEDs,
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8012498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249a:	2b00      	cmp	r3, #0
 801249c:	d102      	bne.n	80124a4 <CO_process+0xbc>
 801249e:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 80124a2:	e000      	b.n	80124a6 <CO_process+0xbe>
 80124a4:	2500      	movs	r5, #0
							timeDifference_us,
							unc ? CO_NMT_INITIALIZING : NMTstate,
							LSSslave_configuration,
							(CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) 	!= 0U,
 80124a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80124a8:	f003 0304 	and.w	r3, r3, #4
			CO_LEDs_process(co->LEDs,
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	bf14      	ite	ne
 80124b0:	2301      	movne	r3, #1
 80124b2:	2300      	moveq	r3, #0
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	60fb      	str	r3, [r7, #12]
							(CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) 	!= 0U,
 80124b8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80124ba:	f240 3303 	movw	r3, #771	; 0x303
 80124be:	4013      	ands	r3, r2
			CO_LEDs_process(co->LEDs,
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	bf14      	ite	ne
 80124c4:	2301      	movne	r3, #1
 80124c6:	2300      	moveq	r3, #0
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	60bb      	str	r3, [r7, #8]
 80124cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <CO_process+0xee>
 80124d2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80124d4:	e000      	b.n	80124d8 <CO_process+0xf0>
 80124d6:	2400      	movs	r4, #0
							false, /* RPDO event timer timeout */
							unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 80124d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d107      	bne.n	80124ee <CO_process+0x106>
 80124de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d102      	bne.n	80124ea <CO_process+0x102>
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <CO_process+0x106>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e000      	b.n	80124f0 <CO_process+0x108>
 80124ee:	2300      	movs	r3, #0
			CO_LEDs_process(co->LEDs,
 80124f0:	607b      	str	r3, [r7, #4]
							CO_getErrorRegister(co->em) != 0U,
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	69db      	ldr	r3, [r3, #28]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ff fa7f 	bl	80119fa <CO_getErrorRegister>
 80124fc:	4603      	mov	r3, r0
			CO_LEDs_process(co->LEDs,
 80124fe:	2b00      	cmp	r3, #0
 8012500:	bf14      	ite	ne
 8012502:	2301      	movne	r3, #1
 8012504:	2300      	moveq	r3, #0
 8012506:	b2db      	uxtb	r3, r3
 8012508:	461a      	mov	r2, r3
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	9307      	str	r3, [sp, #28]
 801250e:	2300      	movs	r3, #0
 8012510:	9306      	str	r3, [sp, #24]
 8012512:	9205      	str	r2, [sp, #20]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	9304      	str	r3, [sp, #16]
 8012518:	9403      	str	r4, [sp, #12]
 801251a:	2300      	movs	r3, #0
 801251c:	9302      	str	r3, [sp, #8]
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	9301      	str	r3, [sp, #4]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012528:	462a      	mov	r2, r5
 801252a:	6979      	ldr	r1, [r7, #20]
 801252c:	4630      	mov	r0, r6
 801252e:	f7f9 fccf 	bl	800bed0 <CO_LEDs_process>
		}

#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) { return reset;}
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d002      	beq.n	8012540 <CO_process+0x158>
 801253a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801253e:	e04e      	b.n	80125de <CO_process+0x1f6>


    /* Emergency */
    if (CO_GET_CNT(EM) == 1U)
    {
    	CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	69d8      	ldr	r0, [r3, #28]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	697a      	ldr	r2, [r7, #20]
 8012548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801254a:	f7ef f909 	bl	8001760 <CO_EM_process>


    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U)
    {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	6918      	ldr	r0, [r3, #16]
 8012552:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	697a      	ldr	r2, [r7, #20]
 801255a:	f7ef ffeb 	bl	8002534 <CO_NMT_process>
 801255e:	4603      	mov	r3, r0
 8012560:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8012564:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012568:	2b7f      	cmp	r3, #127	; 0x7f
 801256a:	d003      	beq.n	8012574 <CO_process+0x18c>
 801256c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012570:	2b05      	cmp	r3, #5
 8012572:	d101      	bne.n	8012578 <CO_process+0x190>
 8012574:	2301      	movs	r3, #1
 8012576:	e000      	b.n	801257a <CO_process+0x192>
 8012578:	2300      	movs	r3, #0
 801257a:	63bb      	str	r3, [r7, #56]	; 0x38


    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 801257c:	2300      	movs	r3, #0
 801257e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012582:	e011      	b.n	80125a8 <CO_process+0x1c0>
    {
        (void)CO_SDOserver_process (
        							&co->SDOserver[i],
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801258c:	21ac      	movs	r1, #172	; 0xac
 801258e:	fb01 f303 	mul.w	r3, r1, r3
        (void)CO_SDOserver_process (
 8012592:	18d0      	adds	r0, r2, r3
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	697a      	ldr	r2, [r7, #20]
 8012598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801259a:	f7f6 f89d 	bl	80086d8 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++)
 801259e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125a2:	3301      	adds	r3, #1
 80125a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80125a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d0e9      	beq.n	8012584 <CO_process+0x19c>
								   );
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	6958      	ldr	r0, [r3, #20]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	697a      	ldr	r2, [r7, #20]
 80125b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125ba:	f7ef fcff 	bl	8001fbc <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c2:	697a      	ldr	r2, [r7, #20]
 80125c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7f7 fae8 	bl	8009b9c <CO_TIME_process>
    }
#endif

#if ((CO_CONFIG_GTW)&CO_CONFIG_GTW_ASCII) != 0
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	697a      	ldr	r2, [r7, #20]
 80125d4:	69b9      	ldr	r1, [r7, #24]
 80125d6:	f7fb fcb7 	bl	800df48 <CO_GTWA_process>
    }
#endif

    return reset;
 80125da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80125de:	4618      	mov	r0, r3
 80125e0:	374c      	adds	r7, #76	; 0x4c
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125e6 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b088      	sub	sp, #32
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	60f8      	str	r0, [r7, #12]
 80125ee:	60b9      	str	r1, [r7, #8]
 80125f0:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80125f2:	2300      	movs	r3, #0
 80125f4:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d131      	bne.n	8012662 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff fa0f 	bl	8011a26 <CO_NMT_getInternalState>
 8012608:	4603      	mov	r3, r0
 801260a:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 801260c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012610:	2b7f      	cmp	r3, #127	; 0x7f
 8012612:	d003      	beq.n	801261c <CO_process_SYNC+0x36>
 8012614:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012618:	2b05      	cmp	r3, #5
 801261a:	d101      	bne.n	8012620 <CO_process_SYNC+0x3a>
 801261c:	2301      	movs	r3, #1
 801261e:	e000      	b.n	8012622 <CO_process_SYNC+0x3c>
 8012620:	2300      	movs	r3, #0
 8012622:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	6979      	ldr	r1, [r7, #20]
 801262e:	f7f7 f895 	bl	800975c <CO_SYNC_process>
 8012632:	4603      	mov	r3, r0
 8012634:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8012636:	7cfb      	ldrb	r3, [r7, #19]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d009      	beq.n	8012650 <CO_process_SYNC+0x6a>
 801263c:	2b02      	cmp	r3, #2
 801263e:	dc0d      	bgt.n	801265c <CO_process_SYNC+0x76>
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00d      	beq.n	8012660 <CO_process_SYNC+0x7a>
 8012644:	2b01      	cmp	r3, #1
 8012646:	d000      	beq.n	801264a <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8012648:	e008      	b.n	801265c <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 801264a:	2301      	movs	r3, #1
 801264c:	61fb      	str	r3, [r7, #28]
 801264e:	e008      	b.n	8012662 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	f000 fc92 	bl	8012f7e <CO_CANclearPendingSyncPDOs>
 801265a:	e002      	b.n	8012662 <CO_process_SYNC+0x7c>
                break;
 801265c:	bf00      	nop
 801265e:	e000      	b.n	8012662 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8012660:	bf00      	nop
        }
    }

    return syncWas;
 8012662:	69fb      	ldr	r3, [r7, #28]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3720      	adds	r7, #32
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <CO_process_RPDO>:
void
CO_process_RPDO (	CO_t* 		co,
					bool_t 		syncWas,
					uint32_t 	timeDifference_us,
					uint32_t* 	timerNext_us )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b088      	sub	sp, #32
 8012670:	af02      	add	r7, sp, #8
 8012672:	60f8      	str	r0, [r7, #12]
 8012674:	60b9      	str	r1, [r7, #8]
 8012676:	607a      	str	r2, [r7, #4]
 8012678:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {  return; }
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d124      	bne.n	80126cc <CO_process_RPDO+0x60>

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	691b      	ldr	r3, [r3, #16]
 8012686:	4618      	mov	r0, r3
 8012688:	f7ff f9cd 	bl	8011a26 <CO_NMT_getInternalState>
 801268c:	4603      	mov	r3, r0
 801268e:	2b05      	cmp	r3, #5
 8012690:	bf0c      	ite	eq
 8012692:	2301      	moveq	r3, #1
 8012694:	2300      	movne	r3, #0
 8012696:	b2db      	uxtb	r3, r3
 8012698:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 801269a:	2300      	movs	r3, #0
 801269c:	82fb      	strh	r3, [r7, #22]
 801269e:	e011      	b.n	80126c4 <CO_process_RPDO+0x58>
    {
        CO_RPDO_process (	&co->RPDO[i],
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126a4:	8afb      	ldrh	r3, [r7, #22]
 80126a6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80126aa:	fb01 f303 	mul.w	r3, r1, r3
 80126ae:	18d0      	adds	r0, r2, r3
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	6879      	ldr	r1, [r7, #4]
 80126ba:	f7f1 f98d 	bl	80039d8 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++)
 80126be:	8afb      	ldrh	r3, [r7, #22]
 80126c0:	3301      	adds	r3, #1
 80126c2:	82fb      	strh	r3, [r7, #22]
 80126c4:	8afb      	ldrh	r3, [r7, #22]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d0ea      	beq.n	80126a0 <CO_process_RPDO+0x34>
 80126ca:	e000      	b.n	80126ce <CO_process_RPDO+0x62>
    if (co->nodeIdUnconfigured) {  return; }
 80126cc:	bf00      	nop
							timerNext_us,
#endif
							NMTisOperational,
							syncWas );
    }
}
 80126ce:	3718      	adds	r7, #24
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <CO_process_TPDO>:



#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b088      	sub	sp, #32
 80126d8:	af02      	add	r7, sp, #8
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
 80126e0:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d124      	bne.n	8012734 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff f999 	bl	8011a26 <CO_NMT_getInternalState>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b05      	cmp	r3, #5
 80126f8:	bf0c      	ite	eq
 80126fa:	2301      	moveq	r3, #1
 80126fc:	2300      	movne	r3, #0
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8012702:	2300      	movs	r3, #0
 8012704:	82fb      	strh	r3, [r7, #22]
 8012706:	e011      	b.n	801272c <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801270c:	8afb      	ldrh	r3, [r7, #22]
 801270e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8012712:	fb01 f303 	mul.w	r3, r1, r3
 8012716:	18d0      	adds	r0, r2, r3
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	f7f1 fe2b 	bl	800437c <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8012726:	8afb      	ldrh	r3, [r7, #22]
 8012728:	3301      	adds	r3, #1
 801272a:	82fb      	strh	r3, [r7, #22]
 801272c:	8afb      	ldrh	r3, [r7, #22]
 801272e:	2b0b      	cmp	r3, #11
 8012730:	d9ea      	bls.n	8012708 <CO_process_TPDO+0x34>
 8012732:	e000      	b.n	8012736 <CO_process_TPDO+0x62>
        return;
 8012734:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8012744:	4a13      	ldr	r2, [pc, #76]	; (8012794 <canopen_app_init+0x58>)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 801274e:	f107 0308 	add.w	r3, r7, #8
 8012752:	4619      	mov	r1, r3
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f7ff f989 	bl	8011a6c <CO_new>
 801275a:	4603      	mov	r3, r0
 801275c:	4a0e      	ldr	r2, [pc, #56]	; (8012798 <canopen_app_init+0x5c>)
 801275e:	6013      	str	r3, [r2, #0]
    if (CO == NULL)
 8012760:	4b0d      	ldr	r3, [pc, #52]	; (8012798 <canopen_app_init+0x5c>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d104      	bne.n	8012772 <canopen_app_init+0x36>
    {
     log_printf("Error: Can't allocate memory\n");
 8012768:	480c      	ldr	r0, [pc, #48]	; (801279c <canopen_app_init+0x60>)
 801276a:	f00c fe19 	bl	801f3a0 <puts>
     return 1;
 801276e:	2301      	movs	r3, #1
 8012770:	e00c      	b.n	801278c <canopen_app_init+0x50>

    } else { log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed); }
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	4619      	mov	r1, r3
 8012776:	480a      	ldr	r0, [pc, #40]	; (80127a0 <canopen_app_init+0x64>)
 8012778:	f00c fdac 	bl	801f2d4 <iprintf>



    canopenNodeSTM32->canOpenStack = CO;
 801277c:	4b05      	ldr	r3, [pc, #20]	; (8012794 <canopen_app_init+0x58>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a05      	ldr	r2, [pc, #20]	; (8012798 <canopen_app_init+0x5c>)
 8012782:	6812      	ldr	r2, [r2, #0]
 8012784:	615a      	str	r2, [r3, #20]
     return 2;
    }

#endif

    canopen_app_resetCommunication();
 8012786:	f000 f80d 	bl	80127a4 <canopen_app_resetCommunication>
    return 0;
 801278a:	2300      	movs	r3, #0
}
 801278c:	4618      	mov	r0, r3
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	2000092c 	.word	0x2000092c
 8012798:	20000930 	.word	0x20000930
 801279c:	08021f6c 	.word	0x08021f6c
 80127a0:	08021f8c 	.word	0x08021f8c

080127a4 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication()
{
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b08f      	sub	sp, #60	; 0x3c
 80127a8:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80127aa:	487d      	ldr	r0, [pc, #500]	; (80129a0 <canopen_app_resetCommunication+0x1fc>)
 80127ac:	f00c fdf8 	bl	801f3a0 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80127b0:	4b7c      	ldr	r3, [pc, #496]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80127ba:	4b7b      	ldr	r3, [pc, #492]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4618      	mov	r0, r3
 80127c0:	f000 f9bc 	bl	8012b3c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80127c4:	4b77      	ldr	r3, [pc, #476]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f000 faa6 	bl	8012d1c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80127d0:	4b74      	ldr	r3, [pc, #464]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4a74      	ldr	r2, [pc, #464]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 80127d6:	6811      	ldr	r1, [r2, #0]
 80127d8:	2200      	movs	r2, #0
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fb15 	bl	8011e0a <CO_CANinit>
 80127e0:	4603      	mov	r3, r0
 80127e2:	461a      	mov	r2, r3
 80127e4:	4b71      	ldr	r3, [pc, #452]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80127e6:	701a      	strb	r2, [r3, #0]

    if (err != CO_ERROR_NO)
 80127e8:	4b70      	ldr	r3, [pc, #448]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80127ea:	f993 3000 	ldrsb.w	r3, [r3]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d008      	beq.n	8012804 <canopen_app_resetCommunication+0x60>
    {
     log_printf("Error: CAN initialization failed: %d\n", err);
 80127f2:	4b6e      	ldr	r3, [pc, #440]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80127f4:	f993 3000 	ldrsb.w	r3, [r3]
 80127f8:	4619      	mov	r1, r3
 80127fa:	486d      	ldr	r0, [pc, #436]	; (80129b0 <canopen_app_resetCommunication+0x20c>)
 80127fc:	f00c fd6a 	bl	801f2d4 <iprintf>
     return 1;
 8012800:	2301      	movs	r3, #1
 8012802:	e0c8      	b.n	8012996 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8012804:	4b6b      	ldr	r3, [pc, #428]	; (80129b4 <canopen_app_resetCommunication+0x210>)
 8012806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012808:	60bb      	str	r3, [r7, #8]
                                                 .productCode    = OD_PERSIST_COMM.x1018_identity.productCode,
 801280a:	4b6a      	ldr	r3, [pc, #424]	; (80129b4 <canopen_app_resetCommunication+0x210>)
 801280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 801280e:	60fb      	str	r3, [r7, #12]
                                                 .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8012810:	4b68      	ldr	r3, [pc, #416]	; (80129b4 <canopen_app_resetCommunication+0x210>)
 8012812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8012814:	613b      	str	r3, [r7, #16]
                                                 .serialNumber   = OD_PERSIST_COMM.x1018_identity.serialNumber   }
 8012816:	4b67      	ldr	r3, [pc, #412]	; (80129b4 <canopen_app_resetCommunication+0x210>)
 8012818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = { .vendorID       = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 801281a:	617b      	str	r3, [r7, #20]
    							  };


    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 801281c:	4b61      	ldr	r3, [pc, #388]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	4b61      	ldr	r3, [pc, #388]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	461a      	mov	r2, r3
 8012826:	4b60      	ldr	r3, [pc, #384]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	3302      	adds	r3, #2
 801282c:	f107 0108 	add.w	r1, r7, #8
 8012830:	f7ff fb17 	bl	8011e62 <CO_LSSinit>
 8012834:	4603      	mov	r3, r0
 8012836:	461a      	mov	r2, r3
 8012838:	4b5c      	ldr	r3, [pc, #368]	; (80129ac <canopen_app_resetCommunication+0x208>)
 801283a:	701a      	strb	r2, [r3, #0]


    if (err != CO_ERROR_NO)
 801283c:	4b5b      	ldr	r3, [pc, #364]	; (80129ac <canopen_app_resetCommunication+0x208>)
 801283e:	f993 3000 	ldrsb.w	r3, [r3]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d008      	beq.n	8012858 <canopen_app_resetCommunication+0xb4>
    {
     log_printf("Error: LSS slave initialization failed: %d\n", err);
 8012846:	4b59      	ldr	r3, [pc, #356]	; (80129ac <canopen_app_resetCommunication+0x208>)
 8012848:	f993 3000 	ldrsb.w	r3, [r3]
 801284c:	4619      	mov	r1, r3
 801284e:	485a      	ldr	r0, [pc, #360]	; (80129b8 <canopen_app_resetCommunication+0x214>)
 8012850:	f00c fd40 	bl	801f2d4 <iprintf>
     return 2;
 8012854:	2302      	movs	r3, #2
 8012856:	e09e      	b.n	8012996 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8012858:	4b53      	ldr	r3, [pc, #332]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	4b52      	ldr	r3, [pc, #328]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	7812      	ldrb	r2, [r2, #0]
 8012862:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8012864:	2300      	movs	r3, #0
 8012866:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object 			*/
 8012868:	4b4e      	ldr	r3, [pc, #312]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 801286a:	6818      	ldr	r0, [r3, #0]
 801286c:	4b53      	ldr	r3, [pc, #332]	; (80129bc <canopen_app_resetCommunication+0x218>)
 801286e:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t 			*/
                         FIRST_HB_TIME,        /* firstHBTime_ms 			*/
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms 	*/
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms 	*/
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer 	*/
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8012870:	4b4d      	ldr	r3, [pc, #308]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 8012872:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object 			*/
 8012874:	785b      	ldrb	r3, [r3, #1]
 8012876:	1d3a      	adds	r2, r7, #4
 8012878:	9207      	str	r2, [sp, #28]
 801287a:	9306      	str	r3, [sp, #24]
 801287c:	2300      	movs	r3, #0
 801287e:	9305      	str	r3, [sp, #20]
 8012880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012884:	9304      	str	r3, [sp, #16]
 8012886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801288a:	9303      	str	r3, [sp, #12]
 801288c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012890:	9302      	str	r3, [sp, #8]
 8012892:	f242 1311 	movw	r3, #8465	; 0x2111
 8012896:	9301      	str	r3, [sp, #4]
 8012898:	2300      	movs	r3, #0
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	460b      	mov	r3, r1
 801289e:	2200      	movs	r2, #0
 80128a0:	2100      	movs	r1, #0
 80128a2:	f7ff fb0b 	bl	8011ebc <CO_CANopenInit>
 80128a6:	4603      	mov	r3, r0
 80128a8:	461a      	mov	r2, r3
 80128aa:	4b40      	ldr	r3, [pc, #256]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80128ac:	701a      	strb	r2, [r3, #0]


    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS)
 80128ae:	4b3f      	ldr	r3, [pc, #252]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80128b0:	f993 3000 	ldrsb.w	r3, [r3]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d01a      	beq.n	80128ee <canopen_app_resetCommunication+0x14a>
 80128b8:	4b3c      	ldr	r3, [pc, #240]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80128ba:	f993 3000 	ldrsb.w	r3, [r3]
 80128be:	f113 0f13 	cmn.w	r3, #19
 80128c2:	d014      	beq.n	80128ee <canopen_app_resetCommunication+0x14a>
    {
      if (err == CO_ERROR_OD_PARAMETERS)
 80128c4:	4b39      	ldr	r3, [pc, #228]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80128c6:	f993 3000 	ldrsb.w	r3, [r3]
 80128ca:	f113 0f0c 	cmn.w	r3, #12
 80128ce:	d105      	bne.n	80128dc <canopen_app_resetCommunication+0x138>
            {
       		        log_printf ( "Error: Object Dictionary entry 0x%X\n"     , errInfo );
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4619      	mov	r1, r3
 80128d4:	483a      	ldr	r0, [pc, #232]	; (80129c0 <canopen_app_resetCommunication+0x21c>)
 80128d6:	f00c fcfd 	bl	801f2d4 <iprintf>
 80128da:	e006      	b.n	80128ea <canopen_app_resetCommunication+0x146>
            } else {log_printf ( "Error: CANopen initialization failed: %d\n", err     ); }
 80128dc:	4b33      	ldr	r3, [pc, #204]	; (80129ac <canopen_app_resetCommunication+0x208>)
 80128de:	f993 3000 	ldrsb.w	r3, [r3]
 80128e2:	4619      	mov	r1, r3
 80128e4:	4837      	ldr	r0, [pc, #220]	; (80129c4 <canopen_app_resetCommunication+0x220>)
 80128e6:	f00c fcf5 	bl	801f2d4 <iprintf>
     return 3;
 80128ea:	2303      	movs	r3, #3
 80128ec:	e053      	b.n	8012996 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO,
 80128ee:	4b2d      	ldr	r3, [pc, #180]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 80128f0:	6818      	ldr	r0, [r3, #0]
    						CO->em,
 80128f2:	4b2c      	ldr	r3, [pc, #176]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 80128f4:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInitPDO(CO,
 80128f6:	69d9      	ldr	r1, [r3, #28]
 80128f8:	4b30      	ldr	r3, [pc, #192]	; (80129bc <canopen_app_resetCommunication+0x218>)
 80128fa:	681a      	ldr	r2, [r3, #0]
							OD,
							canopenNodeSTM32->activeNodeID,
 80128fc:	4b2a      	ldr	r3, [pc, #168]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 80128fe:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInitPDO(CO,
 8012900:	785c      	ldrb	r4, [r3, #1]
 8012902:	1d3b      	adds	r3, r7, #4
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	4623      	mov	r3, r4
 8012908:	f7ff fca6 	bl	8012258 <CO_CANopenInitPDO>
 801290c:	4603      	mov	r3, r0
 801290e:	461a      	mov	r2, r3
 8012910:	4b26      	ldr	r3, [pc, #152]	; (80129ac <canopen_app_resetCommunication+0x208>)
 8012912:	701a      	strb	r2, [r3, #0]
							&errInfo);

    if (err != CO_ERROR_NO)
 8012914:	4b25      	ldr	r3, [pc, #148]	; (80129ac <canopen_app_resetCommunication+0x208>)
 8012916:	f993 3000 	ldrsb.w	r3, [r3]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d014      	beq.n	8012948 <canopen_app_resetCommunication+0x1a4>
		{
		if (err == CO_ERROR_OD_PARAMETERS)
 801291e:	4b23      	ldr	r3, [pc, #140]	; (80129ac <canopen_app_resetCommunication+0x208>)
 8012920:	f993 3000 	ldrsb.w	r3, [r3]
 8012924:	f113 0f0c 	cmn.w	r3, #12
 8012928:	d105      	bne.n	8012936 <canopen_app_resetCommunication+0x192>
				{log_printf (     "Error: Object Dictionary entry 0x%X\n",errInfo);}
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4619      	mov	r1, r3
 801292e:	4824      	ldr	r0, [pc, #144]	; (80129c0 <canopen_app_resetCommunication+0x21c>)
 8012930:	f00c fcd0 	bl	801f2d4 <iprintf>
 8012934:	e006      	b.n	8012944 <canopen_app_resetCommunication+0x1a0>
				 else {log_printf("Error: PDO initialization failed: %d\n", err   );}
 8012936:	4b1d      	ldr	r3, [pc, #116]	; (80129ac <canopen_app_resetCommunication+0x208>)
 8012938:	f993 3000 	ldrsb.w	r3, [r3]
 801293c:	4619      	mov	r1, r3
 801293e:	4822      	ldr	r0, [pc, #136]	; (80129c8 <canopen_app_resetCommunication+0x224>)
 8012940:	f00c fcc8 	bl	801f2d4 <iprintf>
		return 4;
 8012944:	2304      	movs	r3, #4
 8012946:	e026      	b.n	8012996 <canopen_app_resetCommunication+0x1f2>
		}

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8012948:	4b17      	ldr	r3, [pc, #92]	; (80129a8 <canopen_app_resetCommunication+0x204>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	4618      	mov	r0, r3
 8012950:	f005 fb04 	bl	8017f5c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured)
 8012954:	4b13      	ldr	r3, [pc, #76]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d002      	beq.n	8012964 <canopen_app_resetCommunication+0x1c0>
													CO_EMC_HARDWARE,
													storageInitError);
        						   }
#endif

    } else {log_printf("CANopenNode - Node-id not initialized\n"); }
 801295e:	481b      	ldr	r0, [pc, #108]	; (80129cc <canopen_app_resetCommunication+0x228>)
 8012960:	f00c fd1e 	bl	801f3a0 <puts>



    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8012964:	4b0f      	ldr	r3, [pc, #60]	; (80129a4 <canopen_app_resetCommunication+0x200>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	4618      	mov	r0, r3
 801296c:	f000 f8f6 	bl	8012b5c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8012970:	4817      	ldr	r0, [pc, #92]	; (80129d0 <canopen_app_resetCommunication+0x22c>)
 8012972:	f00c fd15 	bl	801f3a0 <puts>
    fflush(stdout);
 8012976:	4b17      	ldr	r3, [pc, #92]	; (80129d4 <canopen_app_resetCommunication+0x230>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	689b      	ldr	r3, [r3, #8]
 801297c:	4618      	mov	r0, r3
 801297e:	f00c fbe5 	bl	801f14c <fflush>
    time_old = time_current = HAL_GetTick();
 8012982:	f001 fd57 	bl	8014434 <HAL_GetTick>
 8012986:	4603      	mov	r3, r0
 8012988:	4a13      	ldr	r2, [pc, #76]	; (80129d8 <canopen_app_resetCommunication+0x234>)
 801298a:	6013      	str	r3, [r2, #0]
 801298c:	4b12      	ldr	r3, [pc, #72]	; (80129d8 <canopen_app_resetCommunication+0x234>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a12      	ldr	r2, [pc, #72]	; (80129dc <canopen_app_resetCommunication+0x238>)
 8012992:	6013      	str	r3, [r2, #0]
    return 0;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	371c      	adds	r7, #28
 801299a:	46bd      	mov	sp, r7
 801299c:	bd90      	pop	{r4, r7, pc}
 801299e:	bf00      	nop
 80129a0:	08021fb4 	.word	0x08021fb4
 80129a4:	20000930 	.word	0x20000930
 80129a8:	2000092c 	.word	0x2000092c
 80129ac:	2000093c 	.word	0x2000093c
 80129b0:	08021fdc 	.word	0x08021fdc
 80129b4:	20000018 	.word	0x20000018
 80129b8:	08022004 	.word	0x08022004
 80129bc:	20000634 	.word	0x20000634
 80129c0:	08022030 	.word	0x08022030
 80129c4:	08022058 	.word	0x08022058
 80129c8:	08022084 	.word	0x08022084
 80129cc:	080220ac 	.word	0x080220ac
 80129d0:	080220d4 	.word	0x080220d4
 80129d4:	2000090c 	.word	0x2000090c
 80129d8:	20000938 	.word	0x20000938
 80129dc:	20000934 	.word	0x20000934

080129e0 <canopen_app_process>:

void
canopen_app_process() {
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80129e6:	f001 fd25 	bl	8014434 <HAL_GetTick>
 80129ea:	4603      	mov	r3, r0
 80129ec:	4a2c      	ldr	r2, [pc, #176]	; (8012aa0 <canopen_app_process+0xc0>)
 80129ee:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80129f0:	4b2b      	ldr	r3, [pc, #172]	; (8012aa0 <canopen_app_process+0xc0>)
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	4b2b      	ldr	r3, [pc, #172]	; (8012aa4 <canopen_app_process+0xc4>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d04c      	beq.n	8012a96 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80129fc:	4b28      	ldr	r3, [pc, #160]	; (8012aa0 <canopen_app_process+0xc0>)
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	4b28      	ldr	r3, [pc, #160]	; (8012aa4 <canopen_app_process+0xc4>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	1ad3      	subs	r3, r2, r3
 8012a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012a0a:	fb02 f303 	mul.w	r3, r2, r3
 8012a0e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8012a10:	4b23      	ldr	r3, [pc, #140]	; (8012aa0 <canopen_app_process+0xc0>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4a23      	ldr	r2, [pc, #140]	; (8012aa4 <canopen_app_process+0xc4>)
 8012a16:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8012a18:	4b23      	ldr	r3, [pc, #140]	; (8012aa8 <canopen_app_process+0xc8>)
 8012a1a:	6818      	ldr	r0, [r3, #0]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	2100      	movs	r1, #0
 8012a22:	f7ff fce1 	bl	80123e8 <CO_process>
 8012a26:	4603      	mov	r3, r0
 8012a28:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8012a2a:	4b1f      	ldr	r3, [pc, #124]	; (8012aa8 <canopen_app_process+0xc8>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a30:	7a5a      	ldrb	r2, [r3, #9]
 8012a32:	4b1e      	ldr	r3, [pc, #120]	; (8012aac <canopen_app_process+0xcc>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	09d2      	lsrs	r2, r2, #7
 8012a38:	b2d2      	uxtb	r2, r2
 8012a3a:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8012a3c:	4b1a      	ldr	r3, [pc, #104]	; (8012aa8 <canopen_app_process+0xc8>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a42:	7a9a      	ldrb	r2, [r3, #10]
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <canopen_app_process+0xcc>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	09d2      	lsrs	r2, r2, #7
 8012a4a:	b2d2      	uxtb	r2, r2
 8012a4c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d118      	bne.n	8012a86 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8012a54:	4b15      	ldr	r3, [pc, #84]	; (8012aac <canopen_app_process+0xcc>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f005 faee 	bl	801803c <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8012a60:	4b12      	ldr	r3, [pc, #72]	; (8012aac <canopen_app_process+0xcc>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f000 f869 	bl	8012b3c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8012a6a:	4b0f      	ldr	r3, [pc, #60]	; (8012aa8 <canopen_app_process+0xc8>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff f95d 	bl	8011d2e <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8012a74:	480e      	ldr	r0, [pc, #56]	; (8012ab0 <canopen_app_process+0xd0>)
 8012a76:	f00c fc93 	bl	801f3a0 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8012a7a:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <canopen_app_process+0xcc>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7ff fe5c 	bl	801273c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8012a84:	e007      	b.n	8012a96 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8012a86:	78fb      	ldrb	r3, [r7, #3]
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	d104      	bne.n	8012a96 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8012a8c:	4809      	ldr	r0, [pc, #36]	; (8012ab4 <canopen_app_process+0xd4>)
 8012a8e:	f00c fc87 	bl	801f3a0 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8012a92:	f002 fd2a 	bl	80154ea <HAL_NVIC_SystemReset>
}
 8012a96:	bf00      	nop
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20000938 	.word	0x20000938
 8012aa4:	20000934 	.word	0x20000934
 8012aa8:	20000930 	.word	0x20000930
 8012aac:	2000092c 	.word	0x2000092c
 8012ab0:	080220f0 	.word	0x080220f0
 8012ab4:	08022118 	.word	0x08022118

08012ab8 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8012abe:	4b1e      	ldr	r3, [pc, #120]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ac4:	f3ef 8210 	mrs	r2, PRIMASK
 8012ac8:	607a      	str	r2, [r7, #4]
  return(result);
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8012ace:	b672      	cpsid	i
}
 8012ad0:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8012ad2:	4b19      	ldr	r3, [pc, #100]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d120      	bne.n	8012b1e <canopen_app_interrupt+0x66>
 8012adc:	4b16      	ldr	r3, [pc, #88]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d01a      	beq.n	8012b1e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8012aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012af0:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8012af2:	4b11      	ldr	r3, [pc, #68]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2200      	movs	r2, #0
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f7ff fd73 	bl	80125e6 <CO_process_SYNC>
 8012b00:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8012b02:	4b0d      	ldr	r3, [pc, #52]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	2300      	movs	r3, #0
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	68f9      	ldr	r1, [r7, #12]
 8012b0c:	f7ff fdae 	bl	801266c <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8012b10:	4b09      	ldr	r3, [pc, #36]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012b12:	6818      	ldr	r0, [r3, #0]
 8012b14:	2300      	movs	r3, #0
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	68f9      	ldr	r1, [r7, #12]
 8012b1a:	f7ff fddb 	bl	80126d4 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8012b1e:	4b06      	ldr	r3, [pc, #24]	; (8012b38 <canopen_app_interrupt+0x80>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b26:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	f383 8810 	msr	PRIMASK, r3
}
 8012b2e:	bf00      	nop
}
 8012b30:	bf00      	nop
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	20000930 	.word	0x20000930

08012b3c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d004      	beq.n	8012b54 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f001 ff0a 	bl	8014968 <HAL_CAN_Stop>
#endif
    }
}
 8012b54:	bf00      	nop
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00b      	beq.n	8012b84 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 feb4 	bl	80148e0 <HAL_CAN_Start>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d102      	bne.n	8012b84 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2201      	movs	r2, #1
 8012b82:	615a      	str	r2, [r3, #20]
        }
    }
}
 8012b84:	bf00      	nop
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b090      	sub	sp, #64	; 0x40
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d005      	beq.n	8012bac <CO_CANmodule_init+0x20>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d002      	beq.n	8012bac <CO_CANmodule_init+0x20>
 8012ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d102      	bne.n	8012bb2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8012bac:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb0:	e0ab      	b.n	8012d0a <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	68ba      	ldr	r2, [r7, #8]
 8012bb6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8012bb8:	4a56      	ldr	r2, [pc, #344]	; (8012d14 <CO_CANmodule_init+0x188>)
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	887a      	ldrh	r2, [r7, #2]
 8012bc8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bce:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8012bd6:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2200      	movs	r2, #0
 8012be2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2200      	movs	r2, #0
 8012be8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2200      	movs	r2, #0
 8012bee:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8012c02:	2300      	movs	r3, #0
 8012c04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012c06:	e02b      	b.n	8012c60 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8012c08:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	005b      	lsls	r3, r3, #1
 8012c0e:	4413      	add	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	461a      	mov	r2, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4413      	add	r3, r2
 8012c18:	2200      	movs	r2, #0
 8012c1a:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8012c1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c1e:	4613      	mov	r3, r2
 8012c20:	005b      	lsls	r3, r3, #1
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	461a      	mov	r2, r3
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4413      	add	r3, r2
 8012c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c30:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8012c32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c34:	4613      	mov	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	4413      	add	r3, r2
 8012c42:	2200      	movs	r2, #0
 8012c44:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8012c46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c48:	4613      	mov	r3, r2
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	4413      	add	r3, r2
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	461a      	mov	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4413      	add	r3, r2
 8012c56:	2200      	movs	r2, #0
 8012c58:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8012c5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012c60:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c62:	887b      	ldrh	r3, [r7, #2]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d3cf      	bcc.n	8012c08 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8012c68:	2300      	movs	r3, #0
 8012c6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c6c:	e00c      	b.n	8012c88 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8012c6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012c70:	4613      	mov	r3, r2
 8012c72:	005b      	lsls	r3, r3, #1
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	461a      	mov	r2, r3
 8012c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c7c:	4413      	add	r3, r2
 8012c7e:	2200      	movs	r2, #0
 8012c80:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8012c82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c84:	3301      	adds	r3, #1
 8012c86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c88:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012c8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d3ed      	bcc.n	8012c6e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a1d      	ldr	r2, [pc, #116]	; (8012d18 <CO_CANmodule_init+0x18c>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d102      	bne.n	8012cac <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012caa:	e001      	b.n	8012cb0 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8012cac:	230e      	movs	r3, #14
 8012cae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8012cd0:	230e      	movs	r3, #14
 8012cd2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	f107 0214 	add.w	r2, r7, #20
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f001 fd1e 	bl	8014720 <HAL_CAN_ConfigFilter>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d002      	beq.n	8012cf0 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8012cea:	f04f 33ff 	mov.w	r3, #4294967295
 8012cee:	e00c      	b.n	8012d0a <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	2113      	movs	r1, #19
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f002 f8a1 	bl	8014e3e <HAL_CAN_ActivateNotification>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d002      	beq.n	8012d08 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8012d02:	f04f 33ff 	mov.w	r3, #4294967295
 8012d06:	e000      	b.n	8012d0a <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3740      	adds	r7, #64	; 0x40
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	20000940 	.word	0x20000940
 8012d18:	40006400 	.word	0x40006400

08012d1c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d009      	beq.n	8012d3e <CO_CANmodule_disable+0x22>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d005      	beq.n	8012d3e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	689b      	ldr	r3, [r3, #8]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f001 fe15 	bl	8014968 <HAL_CAN_Stop>
#endif
    }
}
 8012d3e:	bf00      	nop
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
	...

08012d48 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8012d48:	b480      	push	{r7}
 8012d4a:	b087      	sub	sp, #28
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	4608      	mov	r0, r1
 8012d52:	4611      	mov	r1, r2
 8012d54:	461a      	mov	r2, r3
 8012d56:	4603      	mov	r3, r0
 8012d58:	817b      	strh	r3, [r7, #10]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	813b      	strh	r3, [r7, #8]
 8012d5e:	4613      	mov	r3, r2
 8012d60:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8012d62:	2300      	movs	r3, #0
 8012d64:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d03c      	beq.n	8012de6 <CO_CANrxBufferInit+0x9e>
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d039      	beq.n	8012de6 <CO_CANrxBufferInit+0x9e>
 8012d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d036      	beq.n	8012de6 <CO_CANrxBufferInit+0x9e>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	891b      	ldrh	r3, [r3, #8]
 8012d7c:	897a      	ldrh	r2, [r7, #10]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d231      	bcs.n	8012de6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6859      	ldr	r1, [r3, #4]
 8012d86:	897a      	ldrh	r2, [r7, #10]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	4413      	add	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	440b      	add	r3, r1
 8012d92:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d98:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d9e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8012da0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012da8:	b21b      	sxth	r3, r3
 8012daa:	6a3a      	ldr	r2, [r7, #32]
 8012dac:	2a00      	cmp	r2, #0
 8012dae:	d001      	beq.n	8012db4 <CO_CANrxBufferInit+0x6c>
 8012db0:	4a13      	ldr	r2, [pc, #76]	; (8012e00 <CO_CANrxBufferInit+0xb8>)
 8012db2:	e000      	b.n	8012db6 <CO_CANrxBufferInit+0x6e>
 8012db4:	2200      	movs	r2, #0
 8012db6:	4313      	orrs	r3, r2
 8012db8:	b21b      	sxth	r3, r3
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8012dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012dc8:	b21b      	sxth	r3, r3
 8012dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012dd2:	b21b      	sxth	r3, r3
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	699b      	ldr	r3, [r3, #24]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d004      	beq.n	8012dec <CO_CANrxBufferInit+0xa4>
            __NOP();
 8012de2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8012de4:	e002      	b.n	8012dec <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8012de6:	23ff      	movs	r3, #255	; 0xff
 8012de8:	75fb      	strb	r3, [r7, #23]
 8012dea:	e000      	b.n	8012dee <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8012dec:	bf00      	nop
    }

    return ret;
 8012dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	371c      	adds	r7, #28
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	ffff8000 	.word	0xffff8000

08012e04 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8012e04:	b480      	push	{r7}
 8012e06:	b087      	sub	sp, #28
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	607b      	str	r3, [r7, #4]
 8012e0e:	460b      	mov	r3, r1
 8012e10:	817b      	strh	r3, [r7, #10]
 8012e12:	4613      	mov	r3, r2
 8012e14:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8012e16:	2300      	movs	r3, #0
 8012e18:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d024      	beq.n	8012e6a <CO_CANtxBufferInit+0x66>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	8a1b      	ldrh	r3, [r3, #16]
 8012e24:	897a      	ldrh	r2, [r7, #10]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d21f      	bcs.n	8012e6a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	68d9      	ldr	r1, [r3, #12]
 8012e2e:	897a      	ldrh	r2, [r7, #10]
 8012e30:	4613      	mov	r3, r2
 8012e32:	005b      	lsls	r3, r3, #1
 8012e34:	4413      	add	r3, r2
 8012e36:	00db      	lsls	r3, r3, #3
 8012e38:	440b      	add	r3, r1
 8012e3a:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8012e3c:	893b      	ldrh	r3, [r7, #8]
 8012e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e42:	687a      	ldr	r2, [r7, #4]
 8012e44:	2a00      	cmp	r2, #0
 8012e46:	d002      	beq.n	8012e4e <CO_CANtxBufferInit+0x4a>
 8012e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012e4c:	e000      	b.n	8012e50 <CO_CANtxBufferInit+0x4c>
 8012e4e:	2200      	movs	r2, #0
 8012e50:	431a      	orrs	r2, r3
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012e5c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	2200      	movs	r2, #0
 8012e62:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e68:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8012e6a:	697b      	ldr	r3, [r7, #20]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	371c      	adds	r7, #28
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8012e82:	2300      	movs	r3, #0
 8012e84:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	689b      	ldr	r3, [r3, #8]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f001 fe8f 	bl	8014bb0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d028      	beq.n	8012eea <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8012e98:	4b16      	ldr	r3, [pc, #88]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8012e9e:	4b15      	ldr	r3, [pc, #84]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	791b      	ldrb	r3, [r3, #4]
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	4b12      	ldr	r3, [pc, #72]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012eac:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012eb6:	4a0f      	ldr	r2, [pc, #60]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012eb8:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	0b9b      	lsrs	r3, r3, #14
 8012ec0:	f003 0302 	and.w	r3, r3, #2
 8012ec4:	4a0b      	ldr	r2, [pc, #44]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012ec6:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	6898      	ldr	r0, [r3, #8]
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	1d5a      	adds	r2, r3, #5
 8012ed2:	f107 0308 	add.w	r3, r7, #8
 8012ed6:	4907      	ldr	r1, [pc, #28]	; (8012ef4 <prv_send_can_message+0x7c>)
 8012ed8:	f001 fd8f 	bl	80149fa <HAL_CAN_AddTxMessage>
 8012edc:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	bf0c      	ite	eq
 8012ee2:	2301      	moveq	r3, #1
 8012ee4:	2300      	movne	r3, #0
 8012ee6:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8012ee8:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	20000944 	.word	0x20000944

08012ef8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8012f02:	2300      	movs	r3, #0
 8012f04:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00c      	beq.n	8012f28 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d106      	bne.n	8012f24 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	8a5b      	ldrh	r3, [r3, #18]
 8012f1a:	f043 0308 	orr.w	r3, r3, #8
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8012f24:	23f7      	movs	r3, #247	; 0xf7
 8012f26:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f28:	f3ef 8310 	mrs	r3, PRIMASK
 8012f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8012f2e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8012f34:	b672      	cpsid	i
}
 8012f36:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8012f38:	6839      	ldr	r1, [r7, #0]
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff ff9c 	bl	8012e78 <prv_send_can_message>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d004      	beq.n	8012f50 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	695a      	ldr	r2, [r3, #20]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	61da      	str	r2, [r3, #28]
 8012f4e:	e009      	b.n	8012f64 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	2201      	movs	r2, #1
 8012f54:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f383 8810 	msr	PRIMASK, r3
}
 8012f70:	bf00      	nop

    return err;
 8012f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8012f7e:	b480      	push	{r7}
 8012f80:	b087      	sub	sp, #28
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8012f86:	2300      	movs	r3, #0
 8012f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8012f8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f90:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8012f96:	b672      	cpsid	i
}
 8012f98:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	69db      	ldr	r3, [r3, #28]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d004      	beq.n	8012fac <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8012fa8:	2301      	movs	r3, #1
 8012faa:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d032      	beq.n	801301c <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	8a1b      	ldrh	r3, [r3, #16]
 8012fba:	827b      	strh	r3, [r7, #18]
 8012fbc:	e02b      	b.n	8013016 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	68d9      	ldr	r1, [r3, #12]
 8012fc2:	8a7a      	ldrh	r2, [r7, #18]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	005b      	lsls	r3, r3, #1
 8012fc8:	4413      	add	r3, r2
 8012fca:	00db      	lsls	r3, r3, #3
 8012fcc:	440b      	add	r3, r1
 8012fce:	691b      	ldr	r3, [r3, #16]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d01d      	beq.n	8013010 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	68d9      	ldr	r1, [r3, #12]
 8012fd8:	8a7a      	ldrh	r2, [r7, #18]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	005b      	lsls	r3, r3, #1
 8012fde:	4413      	add	r3, r2
 8012fe0:	00db      	lsls	r3, r3, #3
 8012fe2:	440b      	add	r3, r1
 8012fe4:	695b      	ldr	r3, [r3, #20]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d012      	beq.n	8013010 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	68d9      	ldr	r1, [r3, #12]
 8012fee:	8a7a      	ldrh	r2, [r7, #18]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	005b      	lsls	r3, r3, #1
 8012ff4:	4413      	add	r3, r2
 8012ff6:	00db      	lsls	r3, r3, #3
 8012ff8:	440b      	add	r3, r1
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013002:	b29b      	uxth	r3, r3
 8013004:	3b01      	subs	r3, #1
 8013006:	b29a      	uxth	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 801300c:	2302      	movs	r3, #2
 801300e:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8013010:	8a7b      	ldrh	r3, [r7, #18]
 8013012:	3b01      	subs	r3, #1
 8013014:	827b      	strh	r3, [r7, #18]
 8013016:	8a7b      	ldrh	r3, [r7, #18]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1d0      	bne.n	8012fbe <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013020:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	f383 8810 	msr	PRIMASK, r3
}
 8013028:	bf00      	nop
    if (tpdoDeleted) {
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d006      	beq.n	801303e <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8a5b      	ldrh	r3, [r3, #18]
 8013034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013038:	b29a      	uxth	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	825a      	strh	r2, [r3, #18]
    }
}
 801303e:	bf00      	nop
 8013040:	371c      	adds	r7, #28
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 801304a:	b480      	push	{r7}
 801304c:	b085      	sub	sp, #20
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8013052:	2300      	movs	r3, #0
 8013054:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	699b      	ldr	r3, [r3, #24]
 8013060:	f003 0307 	and.w	r3, r3, #7
 8013064:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	429a      	cmp	r2, r3
 801306e:	d02e      	beq.n	80130ce <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	8a5b      	ldrh	r3, [r3, #18]
 8013074:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	f003 0304 	and.w	r3, r3, #4
 8013082:	2b00      	cmp	r3, #0
 8013084:	d004      	beq.n	8013090 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8013086:	89fb      	ldrh	r3, [r7, #14]
 8013088:	f043 0304 	orr.w	r3, r3, #4
 801308c:	81fb      	strh	r3, [r7, #14]
 801308e:	e01b      	b.n	80130c8 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8013090:	89fb      	ldrh	r3, [r7, #14]
 8013092:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8013096:	f023 0303 	bic.w	r3, r3, #3
 801309a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	f003 0301 	and.w	r3, r3, #1
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d005      	beq.n	80130b2 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80130a6:	89fb      	ldrh	r3, [r7, #14]
 80130a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130ac:	f043 0301 	orr.w	r3, r3, #1
 80130b0:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	f003 0302 	and.w	r3, r3, #2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d005      	beq.n	80130c8 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80130bc:	89fb      	ldrh	r3, [r7, #14]
 80130be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80130c2:	f043 0302 	orr.w	r3, r3, #2
 80130c6:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	89fa      	ldrh	r2, [r7, #14]
 80130cc:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 80130ce:	bf00      	nop
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
	...

080130dc <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b08c      	sub	sp, #48	; 0x30
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80130e8:	2300      	movs	r3, #0
 80130ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80130ec:	2300      	movs	r3, #0
 80130ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80130f2:	f107 0314 	add.w	r3, r7, #20
 80130f6:	3305      	adds	r3, #5
 80130f8:	4a2c      	ldr	r2, [pc, #176]	; (80131ac <prv_read_can_received_msg+0xd0>)
 80130fa:	68b9      	ldr	r1, [r7, #8]
 80130fc:	68f8      	ldr	r0, [r7, #12]
 80130fe:	f001 fd8c 	bl	8014c1a <HAL_CAN_GetRxMessage>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d14c      	bne.n	80131a2 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8013108:	4b28      	ldr	r3, [pc, #160]	; (80131ac <prv_read_can_received_msg+0xd0>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a27      	ldr	r2, [pc, #156]	; (80131ac <prv_read_can_received_msg+0xd0>)
 801310e:	68d2      	ldr	r2, [r2, #12]
 8013110:	2a02      	cmp	r2, #2
 8013112:	d102      	bne.n	801311a <prv_read_can_received_msg+0x3e>
 8013114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013118:	e000      	b.n	801311c <prv_read_can_received_msg+0x40>
 801311a:	2200      	movs	r2, #0
 801311c:	4313      	orrs	r3, r2
 801311e:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8013120:	4b22      	ldr	r3, [pc, #136]	; (80131ac <prv_read_can_received_msg+0xd0>)
 8013122:	691b      	ldr	r3, [r3, #16]
 8013124:	b2db      	uxtb	r3, r3
 8013126:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 801312c:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <prv_read_can_received_msg+0xd4>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	699b      	ldr	r3, [r3, #24]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d001      	beq.n	801313a <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8013136:	be00      	bkpt	0x0000
 8013138:	e01f      	b.n	801317a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 801313a:	4b1d      	ldr	r3, [pc, #116]	; (80131b0 <prv_read_can_received_msg+0xd4>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8013142:	4b1b      	ldr	r3, [pc, #108]	; (80131b0 <prv_read_can_received_msg+0xd4>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	891b      	ldrh	r3, [r3, #8]
 8013148:	857b      	strh	r3, [r7, #42]	; 0x2a
 801314a:	e013      	b.n	8013174 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 801314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314e:	881b      	ldrh	r3, [r3, #0]
 8013150:	461a      	mov	r2, r3
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	4053      	eors	r3, r2
 8013156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013158:	8852      	ldrh	r2, [r2, #2]
 801315a:	4013      	ands	r3, r2
 801315c:	2b00      	cmp	r3, #0
 801315e:	d103      	bne.n	8013168 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8013160:	2301      	movs	r3, #1
 8013162:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8013166:	e008      	b.n	801317a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8013168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801316a:	3b01      	subs	r3, #1
 801316c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013170:	330c      	adds	r3, #12
 8013172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013174:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1e8      	bne.n	801314c <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 801317a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801317e:	2b00      	cmp	r3, #0
 8013180:	d010      	beq.n	80131a4 <prv_read_can_received_msg+0xc8>
 8013182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013184:	2b00      	cmp	r3, #0
 8013186:	d00d      	beq.n	80131a4 <prv_read_can_received_msg+0xc8>
 8013188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d009      	beq.n	80131a4 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8013190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013196:	6852      	ldr	r2, [r2, #4]
 8013198:	f107 0114 	add.w	r1, r7, #20
 801319c:	4610      	mov	r0, r2
 801319e:	4798      	blx	r3
 80131a0:	e000      	b.n	80131a4 <prv_read_can_received_msg+0xc8>
        return;
 80131a2:	bf00      	nop
    }
}
 80131a4:	3730      	adds	r7, #48	; 0x30
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	2000095c 	.word	0x2000095c
 80131b0:	20000940 	.word	0x20000940

080131b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80131bc:	2200      	movs	r2, #0
 80131be:	2100      	movs	r1, #0
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7ff ff8b 	bl	80130dc <prv_read_can_received_msg>
}
 80131c6:	bf00      	nop
 80131c8:	3708      	adds	r7, #8
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 80131d6:	2200      	movs	r2, #0
 80131d8:	2101      	movs	r1, #1
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7ff ff7e 	bl	80130dc <prv_read_can_received_msg>
}
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b086      	sub	sp, #24
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2200      	movs	r2, #0
 80131fc:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013202:	b29b      	uxth	r3, r3
 8013204:	2b00      	cmp	r3, #0
 8013206:	d03d      	beq.n	8013284 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801320e:	f3ef 8310 	mrs	r3, PRIMASK
 8013212:	60fb      	str	r3, [r7, #12]
  return(result);
 8013214:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 801321a:	b672      	cpsid	i
}
 801321c:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8a1b      	ldrh	r3, [r3, #16]
 8013222:	827b      	strh	r3, [r7, #18]
 8013224:	e01e      	b.n	8013264 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d014      	beq.n	8013258 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 801322e:	6979      	ldr	r1, [r7, #20]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f7ff fe21 	bl	8012e78 <prv_send_can_message>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00d      	beq.n	8013258 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	2200      	movs	r2, #0
 8013240:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013246:	b29b      	uxth	r3, r3
 8013248:	3b01      	subs	r3, #1
 801324a:	b29a      	uxth	r2, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	695a      	ldr	r2, [r3, #20]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8013258:	8a7b      	ldrh	r3, [r7, #18]
 801325a:	3b01      	subs	r3, #1
 801325c:	827b      	strh	r3, [r7, #18]
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	3318      	adds	r3, #24
 8013262:	617b      	str	r3, [r7, #20]
 8013264:	8a7b      	ldrh	r3, [r7, #18]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d1dd      	bne.n	8013226 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 801326a:	8a7b      	ldrh	r3, [r7, #18]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d102      	bne.n	8013276 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	f383 8810 	msr	PRIMASK, r3
}
 8013282:	bf00      	nop
    }
}
 8013284:	bf00      	nop
 8013286:	3718      	adds	r7, #24
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8013294:	4b04      	ldr	r3, [pc, #16]	; (80132a8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2101      	movs	r1, #1
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff ffa4 	bl	80131e8 <CO_CANinterrupt_TX>
}
 80132a0:	bf00      	nop
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20000940 	.word	0x20000940

080132ac <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80132b4:	4b04      	ldr	r3, [pc, #16]	; (80132c8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2101      	movs	r1, #1
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7ff ff94 	bl	80131e8 <CO_CANinterrupt_TX>
}
 80132c0:	bf00      	nop
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	20000940 	.word	0x20000940

080132cc <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80132d4:	4b04      	ldr	r3, [pc, #16]	; (80132e8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2101      	movs	r1, #1
 80132da:	4618      	mov	r0, r3
 80132dc:	f7ff ff84 	bl	80131e8 <CO_CANinterrupt_TX>
}
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	20000940 	.word	0x20000940

080132ec <CO_TPDOsendRequest>:
 *
 * @param TPDO TPDO object.
 */
static inline void
CO_TPDOsendRequest(CO_TPDO_t* TPDO)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
    if (TPDO != NULL) {TPDO->sendRequest = true; }
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d003      	beq.n	8013302 <CO_TPDOsendRequest+0x16>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2201      	movs	r2, #1
 80132fe:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
}
 8013302:	bf00      	nop
 8013304:	370c      	adds	r7, #12
 8013306:	46bd      	mov	sp, r7
 8013308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330c:	4770      	bx	lr
	...

08013310 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 8013318:	4b05      	ldr	r3, [pc, #20]	; (8013330 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	429a      	cmp	r2, r3
 8013322:	d101      	bne.n	8013328 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 8013324:	f7ff fbc8 	bl	8012ab8 <canopen_app_interrupt>

    }
}
 8013328:	bf00      	nop
 801332a:	3708      	adds	r7, #8
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	2000092c 	.word	0x2000092c

08013334 <read_SDO>:
		  uint8_t subIndex,
		  uint8_t* buf,
		  size_t bufSize,
		  size_t* readSize
		  )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b08a      	sub	sp, #40	; 0x28
 8013338:	af04      	add	r7, sp, #16
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	4608      	mov	r0, r1
 801333e:	4611      	mov	r1, r2
 8013340:	461a      	mov	r2, r3
 8013342:	4603      	mov	r3, r0
 8013344:	70fb      	strb	r3, [r7, #3]
 8013346:	460b      	mov	r3, r1
 8013348:	803b      	strh	r3, [r7, #0]
 801334a:	4613      	mov	r3, r2
 801334c:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;

    // setup client (this can be skipped, if remote device don't change)
    SDO_ret = CO_SDOclient_setup (
 801334e:	78fb      	ldrb	r3, [r7, #3]
    								SDO_C, CO_CAN_ID_SDO_CLI + nodeId,
 8013350:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup (
 8013354:	78fb      	ldrb	r3, [r7, #3]
									CO_CAN_ID_SDO_SRV + nodeId,
 8013356:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup (
 801335a:	78fb      	ldrb	r3, [r7, #3]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7f1 fc9d 	bl	8004c9c <CO_SDOclient_setup>
 8013362:	4603      	mov	r3, r0
 8013364:	75fb      	strb	r3, [r7, #23]
									nodeId);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return CO_SDO_AB_GENERAL; }
 8013366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d002      	beq.n	8013374 <read_SDO+0x40>
 801336e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013372:	e040      	b.n	80133f6 <read_SDO+0xc2>



    // initiate upload
    SDO_ret = CO_SDOclientUploadInitiate ( SDO_C,
 8013374:	78ba      	ldrb	r2, [r7, #2]
 8013376:	8839      	ldrh	r1, [r7, #0]
 8013378:	2300      	movs	r3, #0
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7f3 f8c9 	bl	8006518 <CO_SDOclientUploadInitiate>
 8013386:	4603      	mov	r3, r0
 8013388:	75fb      	strb	r3, [r7, #23]
    										index,
											subIndex,
											1000,
											false);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return CO_SDO_AB_GENERAL; }
 801338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <read_SDO+0x64>
 8013392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013396:	e02e      	b.n	80133f6 <read_SDO+0xc2>



    // upload data
    do 	{
        uint32_t timeDifference_us = 10000;
 8013398:	f242 7310 	movw	r3, #10000	; 0x2710
 801339c:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 801339e:	2300      	movs	r3, #0
 80133a0:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientUpload(SDO_C, timeDifference_us, false, &abortCode, NULL, NULL, NULL);
 80133a2:	f107 030c 	add.w	r3, r7, #12
 80133a6:	2200      	movs	r2, #0
 80133a8:	9202      	str	r2, [sp, #8]
 80133aa:	2200      	movs	r2, #0
 80133ac:	9201      	str	r2, [sp, #4]
 80133ae:	2200      	movs	r2, #0
 80133b0:	9200      	str	r2, [sp, #0]
 80133b2:	2200      	movs	r2, #0
 80133b4:	6939      	ldr	r1, [r7, #16]
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7f3 f91a 	bl	80065f0 <CO_SDOclientUpload>
 80133bc:	4603      	mov	r3, r0
 80133be:	75fb      	strb	r3, [r7, #23]

        if (SDO_ret < 0) {  return abortCode;  }
 80133c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	da01      	bge.n	80133cc <read_SDO+0x98>
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	e014      	b.n	80133f6 <read_SDO+0xc2>

        HAL_Delay(timeDifference_us/1000);// sleep_us(timeDifference_us);
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	4a0c      	ldr	r2, [pc, #48]	; (8013400 <read_SDO+0xcc>)
 80133d0:	fba2 2303 	umull	r2, r3, r2, r3
 80133d4:	099b      	lsrs	r3, r3, #6
 80133d6:	4618      	mov	r0, r3
 80133d8:	f001 f838 	bl	801444c <HAL_Delay>

    	} while (SDO_ret > 0);
 80133dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	dcd9      	bgt.n	8013398 <read_SDO+0x64>


    // copy data to the user buffer (for long data function must be called several times inside the loop)
    *readSize = CO_SDOclientUploadBufRead(SDO_C, buf, bufSize);
 80133e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133e6:	6a39      	ldr	r1, [r7, #32]
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7f4 fc47 	bl	8007c7c <CO_SDOclientUploadBufRead>
 80133ee:	4602      	mov	r2, r0
 80133f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f2:	601a      	str	r2, [r3, #0]

    return CO_SDO_AB_NONE;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3718      	adds	r7, #24
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	10624dd3 	.word	0x10624dd3

08013404 <write_SDO>:
			uint16_t index,
			uint8_t subIndex,
			uint8_t* data,
			size_t dataSize
			)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b08c      	sub	sp, #48	; 0x30
 8013408:	af04      	add	r7, sp, #16
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	4608      	mov	r0, r1
 801340e:	4611      	mov	r1, r2
 8013410:	461a      	mov	r2, r3
 8013412:	4603      	mov	r3, r0
 8013414:	70fb      	strb	r3, [r7, #3]
 8013416:	460b      	mov	r3, r1
 8013418:	803b      	strh	r3, [r7, #0]
 801341a:	4613      	mov	r3, r2
 801341c:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;
    bool_t bufferPartial = false;
 801341e:	2300      	movs	r3, #0
 8013420:	61fb      	str	r3, [r7, #28]

    // setup client (this can be skipped, if remote device is the same)
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 8013422:	78fb      	ldrb	r3, [r7, #3]
    								CO_CAN_ID_SDO_CLI + nodeId,
 8013424:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 8013428:	78fb      	ldrb	r3, [r7, #3]
									CO_CAN_ID_SDO_SRV + nodeId,
 801342a:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup (	SDO_C,
 801342e:	78fb      	ldrb	r3, [r7, #3]
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7f1 fc33 	bl	8004c9c <CO_SDOclient_setup>
 8013436:	4603      	mov	r3, r0
 8013438:	76fb      	strb	r3, [r7, #27]
									nodeId);

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) { return -1; }
 801343a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d002      	beq.n	8013448 <write_SDO+0x44>
 8013442:	f04f 33ff 	mov.w	r3, #4294967295
 8013446:	e046      	b.n	80134d6 <write_SDO+0xd2>



    // initiate download
    SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex, dataSize, 1000, false);
 8013448:	78ba      	ldrb	r2, [r7, #2]
 801344a:	8839      	ldrh	r1, [r7, #0]
 801344c:	2300      	movs	r3, #0
 801344e:	9301      	str	r3, [sp, #4]
 8013450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7f1 fca7 	bl	8004dac <CO_SDOclientDownloadInitiate>
 801345e:	4603      	mov	r3, r0
 8013460:	76fb      	strb	r3, [r7, #27]

    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) /**< Success, end of communication. SDO client: uploaded data must be read. */
 8013462:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d002      	beq.n	8013470 <write_SDO+0x6c>
    	{ return -1; }
 801346a:	f04f 33ff 	mov.w	r3, #4294967295
 801346e:	e032      	b.n	80134d6 <write_SDO+0xd2>



    // fill data
    size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data, dataSize);
 8013470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7f1 fd1f 	bl	8004eb8 <CO_SDOclientDownloadBufWrite>
 801347a:	6178      	str	r0, [r7, #20]

    if (nWritten < dataSize) { bufferPartial = true; } // If SDO Fifo buffer is too small, data can be refilled in the loop.
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013480:	429a      	cmp	r2, r3
 8013482:	d201      	bcs.n	8013488 <write_SDO+0x84>
 8013484:	2301      	movs	r3, #1
 8013486:	61fb      	str	r3, [r7, #28]



    // download data
    do {
        uint32_t timeDifference_us = 10000;
 8013488:	f242 7310 	movw	r3, #10000	; 0x2710
 801348c:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 801348e:	2300      	movs	r3, #0
 8013490:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientDownload (	SDO_C,
 8013492:	2300      	movs	r3, #0
 8013494:	9302      	str	r3, [sp, #8]
 8013496:	2300      	movs	r3, #0
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	f107 030c 	add.w	r3, r7, #12
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	2200      	movs	r2, #0
 80134a4:	6939      	ldr	r1, [r7, #16]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f7f1 fd22 	bl	8004ef0 <CO_SDOclientDownload>
 80134ac:	4603      	mov	r3, r0
 80134ae:	76fb      	strb	r3, [r7, #27]
											&abortCode,
											NULL,
											NULL
										);

        if (SDO_ret < 0) {  return abortCode;}
 80134b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	da01      	bge.n	80134bc <write_SDO+0xb8>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	e00c      	b.n	80134d6 <write_SDO+0xd2>

        HAL_Delay(timeDifference_us/1000); //sleep_us(timeDifference_us);
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	4a08      	ldr	r2, [pc, #32]	; (80134e0 <write_SDO+0xdc>)
 80134c0:	fba2 2303 	umull	r2, r3, r2, r3
 80134c4:	099b      	lsrs	r3, r3, #6
 80134c6:	4618      	mov	r0, r3
 80134c8:	f000 ffc0 	bl	801444c <HAL_Delay>

       } while (SDO_ret > 0);
 80134cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	dcd9      	bgt.n	8013488 <write_SDO+0x84>

    return CO_SDO_AB_NONE;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	10624dd3 	.word	0x10624dd3

080134e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08a      	sub	sp, #40	; 0x28
 80134e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80134ea:	f000 ff3d 	bl	8014368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80134ee:	f000 f8e5 	bl	80136bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80134f2:	f000 fa8f 	bl	8013a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80134f6:	f000 fa47 	bl	8013988 <MX_DMA_Init>
  MX_TIM14_Init();
 80134fa:	f000 f9cd 	bl	8013898 <MX_TIM14_Init>
  MX_CAN1_Init();
 80134fe:	f000 f947 	bl	8013790 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8013502:	f000 f9ed 	bl	80138e0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8013506:	f009 feed 	bl	801d2e4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 801350a:	f000 fa13 	bl	8013934 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 801350e:	f000 f975 	bl	80137fc <MX_TIM4_Init>
  HAL_Delay(33);
  }

#endif

   HAL_TIM_Base_Start_IT(&htim4);
 8013512:	485d      	ldr	r0, [pc, #372]	; (8013688 <main+0x1a4>)
 8013514:	f004 fd22 	bl	8017f5c <HAL_TIM_Base_Start_IT>

   CANopenNodeSTM32 canOpenNodeSTM32;
   canOpenNodeSTM32.CANHandle = &hcan1;
 8013518:	4b5c      	ldr	r3, [pc, #368]	; (801368c <main+0x1a8>)
 801351a:	60bb      	str	r3, [r7, #8]
   canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 801351c:	4b5c      	ldr	r3, [pc, #368]	; (8013690 <main+0x1ac>)
 801351e:	60fb      	str	r3, [r7, #12]
   canOpenNodeSTM32.timerHandle = &htim4;
 8013520:	4b59      	ldr	r3, [pc, #356]	; (8013688 <main+0x1a4>)
 8013522:	607b      	str	r3, [r7, #4]
   canOpenNodeSTM32.desiredNodeID = 0x48;			//072
 8013524:	2348      	movs	r3, #72	; 0x48
 8013526:	703b      	strb	r3, [r7, #0]
   canOpenNodeSTM32.baudrate = 125*4;
 8013528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801352c:	807b      	strh	r3, [r7, #2]
   canopen_app_init(&canOpenNodeSTM32);
 801352e:	463b      	mov	r3, r7
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff f903 	bl	801273c <canopen_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   canopen_app_process();
 8013536:	f7ff fa53 	bl	80129e0 <canopen_app_process>

	  read_SDO (
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 801353a:	697b      	ldr	r3, [r7, #20]
	  read_SDO (
 801353c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801353e:	4b55      	ldr	r3, [pc, #340]	; (8013694 <main+0x1b0>)
 8013540:	9302      	str	r3, [sp, #8]
 8013542:	2304      	movs	r3, #4
 8013544:	9301      	str	r3, [sp, #4]
 8013546:	4b54      	ldr	r3, [pc, #336]	; (8013698 <main+0x1b4>)
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	2300      	movs	r3, #0
 801354c:	f246 0247 	movw	r2, #24647	; 0x6047
 8013550:	2167      	movs	r1, #103	; 0x67
 8013552:	f7ff feef 	bl	8013334 <read_SDO>
				0,											//Sub_Index_of_OD_variable
				Rx_Array,									//Saved_Received_Data
				4,											//Number_of_Byte_to_read
				(size_t*)&Length_of_Ext_Var );

	  HAL_Delay(100);
 8013556:	2064      	movs	r0, #100	; 0x64
 8013558:	f000 ff78 	bl	801444c <HAL_Delay>

	  	TerminalInterface.gState = HAL_UART_STATE_READY;
 801355c:	4b4f      	ldr	r3, [pc, #316]	; (801369c <main+0x1b8>)
 801355e:	2220      	movs	r2, #32
 8013560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Rx_Array, 8);
 8013564:	2208      	movs	r2, #8
 8013566:	494c      	ldr	r1, [pc, #304]	; (8013698 <main+0x1b4>)
 8013568:	484c      	ldr	r0, [pc, #304]	; (801369c <main+0x1b8>)
 801356a:	f005 fa65 	bl	8018a38 <HAL_UART_Transmit_DMA>

	  write_SDO(
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 801356e:	697b      	ldr	r3, [r7, #20]
	  write_SDO(
 8013570:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8013572:	2304      	movs	r3, #4
 8013574:	9301      	str	r3, [sp, #4]
 8013576:	4b4a      	ldr	r3, [pc, #296]	; (80136a0 <main+0x1bc>)
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	2300      	movs	r3, #0
 801357c:	f246 0247 	movw	r2, #24647	; 0x6047
 8013580:	2167      	movs	r1, #103	; 0x67
 8013582:	f7ff ff3f 	bl	8013404 <write_SDO>
				0x6047,										//Index_of_OD_variable_at_remote_NodeID
				0,											//Sub_Index_of_OD_variable
				Array_8u,									//
				4);

	  HAL_Delay(100);
 8013586:	2064      	movs	r0, #100	; 0x64
 8013588:	f000 ff60 	bl	801444c <HAL_Delay>

	  read_SDO (
			    canOpenNodeSTM32.canOpenStack->SDOclient,
 801358c:	697b      	ldr	r3, [r7, #20]
	  read_SDO (
 801358e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8013590:	4b40      	ldr	r3, [pc, #256]	; (8013694 <main+0x1b0>)
 8013592:	9302      	str	r3, [sp, #8]
 8013594:	2304      	movs	r3, #4
 8013596:	9301      	str	r3, [sp, #4]
 8013598:	4b3f      	ldr	r3, [pc, #252]	; (8013698 <main+0x1b4>)
 801359a:	9300      	str	r3, [sp, #0]
 801359c:	2300      	movs	r3, #0
 801359e:	f246 0247 	movw	r2, #24647	; 0x6047
 80135a2:	2167      	movs	r1, #103	; 0x67
 80135a4:	f7ff fec6 	bl	8013334 <read_SDO>
				0,											//Sub_Index_of_OD_variable
				Rx_Array,									//Saved_Received_Data
				4,											//Number_of_Byte_to_read
				(size_t*)&Length_of_Ext_Var );

	  HAL_Delay(100);
 80135a8:	2064      	movs	r0, #100	; 0x64
 80135aa:	f000 ff4f 	bl	801444c <HAL_Delay>

	  TerminalInterface.gState = HAL_UART_STATE_READY;
 80135ae:	4b3b      	ldr	r3, [pc, #236]	; (801369c <main+0x1b8>)
 80135b0:	2220      	movs	r2, #32
 80135b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	  HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Rx_Array, 8);
 80135b6:	2208      	movs	r2, #8
 80135b8:	4937      	ldr	r1, [pc, #220]	; (8013698 <main+0x1b4>)
 80135ba:	4838      	ldr	r0, [pc, #224]	; (801369c <main+0x1b8>)
 80135bc:	f005 fa3c 	bl	8018a38 <HAL_UART_Transmit_DMA>
      HAL_Delay(100);
 80135c0:	2064      	movs	r0, #100	; 0x64
 80135c2:	f000 ff43 	bl	801444c <HAL_Delay>

		Local_Count=0;
 80135c6:	4b37      	ldr	r3, [pc, #220]	; (80136a4 <main+0x1c0>)
 80135c8:	2200      	movs	r2, #0
 80135ca:	701a      	strb	r2, [r3, #0]
		  //OD_PERSIST_COMM.x6000_nucleo_VAR64_6000=0;

		  while (1)
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,  !canOpenNodeSTM32.outStatusLEDGreen);
 80135cc:	7c3b      	ldrb	r3, [r7, #16]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	bf0c      	ite	eq
 80135d2:	2301      	moveq	r3, #1
 80135d4:	2300      	movne	r3, #0
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	461a      	mov	r2, r3
 80135da:	2140      	movs	r1, #64	; 0x40
 80135dc:	4832      	ldr	r0, [pc, #200]	; (80136a8 <main+0x1c4>)
 80135de:	f002 fd33 	bl	8016048 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, canOpenNodeSTM32.outStatusLEDGreen);
 80135e2:	7c3b      	ldrb	r3, [r7, #16]
 80135e4:	461a      	mov	r2, r3
 80135e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80135ea:	4830      	ldr	r0, [pc, #192]	; (80136ac <main+0x1c8>)
 80135ec:	f002 fd2c 	bl	8016048 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,  !canOpenNodeSTM32.outStatusLEDRed  );
 80135f0:	7c7b      	ldrb	r3, [r7, #17]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	bf0c      	ite	eq
 80135f6:	2301      	moveq	r3, #1
 80135f8:	2300      	movne	r3, #0
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	461a      	mov	r2, r3
 80135fe:	2180      	movs	r1, #128	; 0x80
 8013600:	4829      	ldr	r0, [pc, #164]	; (80136a8 <main+0x1c4>)
 8013602:	f002 fd21 	bl	8016048 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, canOpenNodeSTM32.outStatusLEDRed  );
 8013606:	7c7b      	ldrb	r3, [r7, #17]
 8013608:	461a      	mov	r2, r3
 801360a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801360e:	4827      	ldr	r0, [pc, #156]	; (80136ac <main+0x1c8>)
 8013610:	f002 fd1a 	bl	8016048 <HAL_GPIO_WritePin>
//			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, !canOpenNodeSTM32.outStatusLEDRed  );//yellow
//		      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6 );//LED1_Pin___//LED1_GPIO_Port//green

			canopen_app_process();
 8013614:	f7ff f9e4 	bl	80129e0 <canopen_app_process>
//				TerminalInterface.gState = HAL_UART_STATE_READY;
//				HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)(&tmp32u_1), 4);
//				}


			  if(HAL_GetTick() - Ticks>499)
 8013618:	f000 ff0c 	bl	8014434 <HAL_GetTick>
 801361c:	4602      	mov	r2, r0
 801361e:	4b24      	ldr	r3, [pc, #144]	; (80136b0 <main+0x1cc>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013628:	d3d0      	bcc.n	80135cc <main+0xe8>
			  {
				Ticks = HAL_GetTick();
 801362a:	f000 ff03 	bl	8014434 <HAL_GetTick>
 801362e:	4603      	mov	r3, r0
 8013630:	4a1f      	ldr	r2, [pc, #124]	; (80136b0 <main+0x1cc>)
 8013632:	6013      	str	r3, [r2, #0]

				//OD_PERSIST_COMM.x6000_nucleo_VAR32_6000++;

				tmp32u_0 = OD_PERSIST_COMM.x6000_nucleo_VAR64_6000;
 8013634:	4b1f      	ldr	r3, [pc, #124]	; (80136b4 <main+0x1d0>)
 8013636:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 801363a:	4b1f      	ldr	r3, [pc, #124]	; (80136b8 <main+0x1d4>)
 801363c:	601a      	str	r2, [r3, #0]

				CO_TPDOsendRequest(&canOpenNodeSTM32.canOpenStack->TPDO[Local_Count] );
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013642:	4b18      	ldr	r3, [pc, #96]	; (80136a4 <main+0x1c0>)
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	4619      	mov	r1, r3
 8013648:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 801364c:	fb01 f303 	mul.w	r3, r1, r3
 8013650:	4413      	add	r3, r2
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fe4a 	bl	80132ec <CO_TPDOsendRequest>

				TerminalInterface.gState = HAL_UART_STATE_READY;
 8013658:	4b10      	ldr	r3, [pc, #64]	; (801369c <main+0x1b8>)
 801365a:	2220      	movs	r2, #32
 801365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)( &tmp32u_0 ), 4);
 8013660:	2204      	movs	r2, #4
 8013662:	4915      	ldr	r1, [pc, #84]	; (80136b8 <main+0x1d4>)
 8013664:	480d      	ldr	r0, [pc, #52]	; (801369c <main+0x1b8>)
 8013666:	f005 f9e7 	bl	8018a38 <HAL_UART_Transmit_DMA>

				Local_Count++;
 801366a:	4b0e      	ldr	r3, [pc, #56]	; (80136a4 <main+0x1c0>)
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	3301      	adds	r3, #1
 8013670:	b2da      	uxtb	r2, r3
 8013672:	4b0c      	ldr	r3, [pc, #48]	; (80136a4 <main+0x1c0>)
 8013674:	701a      	strb	r2, [r3, #0]
				Local_Count = Local_Count%4;
 8013676:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <main+0x1c0>)
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	b2da      	uxtb	r2, r3
 8013680:	4b08      	ldr	r3, [pc, #32]	; (80136a4 <main+0x1c0>)
 8013682:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,  !canOpenNodeSTM32.outStatusLEDGreen);
 8013684:	e7a2      	b.n	80135cc <main+0xe8>
 8013686:	bf00      	nop
 8013688:	200009dc 	.word	0x200009dc
 801368c:	20000978 	.word	0x20000978
 8013690:	08013791 	.word	0x08013791
 8013694:	20000dbc 	.word	0x20000dbc
 8013698:	20000dac 	.word	0x20000dac
 801369c:	20000b44 	.word	0x20000b44
 80136a0:	20000638 	.word	0x20000638
 80136a4:	20000dbd 	.word	0x20000dbd
 80136a8:	40020000 	.word	0x40020000
 80136ac:	40020c00 	.word	0x40020c00
 80136b0:	20000dc0 	.word	0x20000dc0
 80136b4:	20000018 	.word	0x20000018
 80136b8:	20000648 	.word	0x20000648

080136bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b094      	sub	sp, #80	; 0x50
 80136c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80136c2:	f107 0320 	add.w	r3, r7, #32
 80136c6:	2230      	movs	r2, #48	; 0x30
 80136c8:	2100      	movs	r1, #0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f00b ffb6 	bl	801f63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80136d0:	f107 030c 	add.w	r3, r7, #12
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
 80136d8:	605a      	str	r2, [r3, #4]
 80136da:	609a      	str	r2, [r3, #8]
 80136dc:	60da      	str	r2, [r3, #12]
 80136de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80136e0:	2300      	movs	r3, #0
 80136e2:	60bb      	str	r3, [r7, #8]
 80136e4:	4b28      	ldr	r3, [pc, #160]	; (8013788 <SystemClock_Config+0xcc>)
 80136e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e8:	4a27      	ldr	r2, [pc, #156]	; (8013788 <SystemClock_Config+0xcc>)
 80136ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ee:	6413      	str	r3, [r2, #64]	; 0x40
 80136f0:	4b25      	ldr	r3, [pc, #148]	; (8013788 <SystemClock_Config+0xcc>)
 80136f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136f8:	60bb      	str	r3, [r7, #8]
 80136fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80136fc:	2300      	movs	r3, #0
 80136fe:	607b      	str	r3, [r7, #4]
 8013700:	4b22      	ldr	r3, [pc, #136]	; (801378c <SystemClock_Config+0xd0>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	4a21      	ldr	r2, [pc, #132]	; (801378c <SystemClock_Config+0xd0>)
 8013706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801370a:	6013      	str	r3, [r2, #0]
 801370c:	4b1f      	ldr	r3, [pc, #124]	; (801378c <SystemClock_Config+0xd0>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013714:	607b      	str	r3, [r7, #4]
 8013716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013718:	2301      	movs	r3, #1
 801371a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801371c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013722:	2302      	movs	r3, #2
 8013724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801372a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801372c:	2304      	movs	r3, #4
 801372e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013730:	23a8      	movs	r3, #168	; 0xa8
 8013732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013734:	2302      	movs	r3, #2
 8013736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013738:	2307      	movs	r3, #7
 801373a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801373c:	f107 0320 	add.w	r3, r7, #32
 8013740:	4618      	mov	r0, r3
 8013742:	f003 ff17 	bl	8017574 <HAL_RCC_OscConfig>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 801374c:	f000 fa2c 	bl	8013ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013750:	230f      	movs	r3, #15
 8013752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013754:	2302      	movs	r3, #2
 8013756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013758:	2300      	movs	r3, #0
 801375a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801375c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013768:	f107 030c 	add.w	r3, r7, #12
 801376c:	2105      	movs	r1, #5
 801376e:	4618      	mov	r0, r3
 8013770:	f004 f978 	bl	8017a64 <HAL_RCC_ClockConfig>
 8013774:	4603      	mov	r3, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801377a:	f000 fa15 	bl	8013ba8 <Error_Handler>
  }
}
 801377e:	bf00      	nop
 8013780:	3750      	adds	r7, #80	; 0x50
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	40023800 	.word	0x40023800
 801378c:	40007000 	.word	0x40007000

08013790 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8013794:	4b17      	ldr	r3, [pc, #92]	; (80137f4 <MX_CAN1_Init+0x64>)
 8013796:	4a18      	ldr	r2, [pc, #96]	; (80137f8 <MX_CAN1_Init+0x68>)
 8013798:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 801379a:	4b16      	ldr	r3, [pc, #88]	; (80137f4 <MX_CAN1_Init+0x64>)
 801379c:	2206      	movs	r2, #6
 801379e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80137a0:	4b14      	ldr	r3, [pc, #80]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80137a6:	4b13      	ldr	r3, [pc, #76]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137a8:	2200      	movs	r2, #0
 80137aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80137ac:	4b11      	ldr	r3, [pc, #68]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137ae:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80137b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80137b4:	4b0f      	ldr	r3, [pc, #60]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80137ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80137bc:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137be:	2200      	movs	r2, #0
 80137c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80137c2:	4b0c      	ldr	r3, [pc, #48]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80137c8:	4b0a      	ldr	r3, [pc, #40]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80137ce:	4b09      	ldr	r3, [pc, #36]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80137d4:	4b07      	ldr	r3, [pc, #28]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137d6:	2200      	movs	r2, #0
 80137d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80137da:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137dc:	2200      	movs	r2, #0
 80137de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80137e0:	4804      	ldr	r0, [pc, #16]	; (80137f4 <MX_CAN1_Init+0x64>)
 80137e2:	f000 fe57 	bl	8014494 <HAL_CAN_Init>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d001      	beq.n	80137f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80137ec:	f000 f9dc 	bl	8013ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80137f0:	bf00      	nop
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	20000978 	.word	0x20000978
 80137f8:	40006400 	.word	0x40006400

080137fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b086      	sub	sp, #24
 8013800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013802:	f107 0308 	add.w	r3, r7, #8
 8013806:	2200      	movs	r2, #0
 8013808:	601a      	str	r2, [r3, #0]
 801380a:	605a      	str	r2, [r3, #4]
 801380c:	609a      	str	r2, [r3, #8]
 801380e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013810:	463b      	mov	r3, r7
 8013812:	2200      	movs	r2, #0
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8013818:	4b1d      	ldr	r3, [pc, #116]	; (8013890 <MX_TIM4_Init+0x94>)
 801381a:	4a1e      	ldr	r2, [pc, #120]	; (8013894 <MX_TIM4_Init+0x98>)
 801381c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 801381e:	4b1c      	ldr	r3, [pc, #112]	; (8013890 <MX_TIM4_Init+0x94>)
 8013820:	22a7      	movs	r2, #167	; 0xa7
 8013822:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013824:	4b1a      	ldr	r3, [pc, #104]	; (8013890 <MX_TIM4_Init+0x94>)
 8013826:	2200      	movs	r2, #0
 8013828:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 801382a:	4b19      	ldr	r3, [pc, #100]	; (8013890 <MX_TIM4_Init+0x94>)
 801382c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013830:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013832:	4b17      	ldr	r3, [pc, #92]	; (8013890 <MX_TIM4_Init+0x94>)
 8013834:	2200      	movs	r2, #0
 8013836:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013838:	4b15      	ldr	r3, [pc, #84]	; (8013890 <MX_TIM4_Init+0x94>)
 801383a:	2200      	movs	r2, #0
 801383c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801383e:	4814      	ldr	r0, [pc, #80]	; (8013890 <MX_TIM4_Init+0x94>)
 8013840:	f004 fb30 	bl	8017ea4 <HAL_TIM_Base_Init>
 8013844:	4603      	mov	r3, r0
 8013846:	2b00      	cmp	r3, #0
 8013848:	d001      	beq.n	801384e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 801384a:	f000 f9ad 	bl	8013ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801384e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8013854:	f107 0308 	add.w	r3, r7, #8
 8013858:	4619      	mov	r1, r3
 801385a:	480d      	ldr	r0, [pc, #52]	; (8013890 <MX_TIM4_Init+0x94>)
 801385c:	f004 fd45 	bl	80182ea <HAL_TIM_ConfigClockSource>
 8013860:	4603      	mov	r3, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d001      	beq.n	801386a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8013866:	f000 f99f 	bl	8013ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801386a:	2320      	movs	r3, #32
 801386c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801386e:	2300      	movs	r3, #0
 8013870:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8013872:	463b      	mov	r3, r7
 8013874:	4619      	mov	r1, r3
 8013876:	4806      	ldr	r0, [pc, #24]	; (8013890 <MX_TIM4_Init+0x94>)
 8013878:	f004 ffea 	bl	8018850 <HAL_TIMEx_MasterConfigSynchronization>
 801387c:	4603      	mov	r3, r0
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8013882:	f000 f991 	bl	8013ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8013886:	bf00      	nop
 8013888:	3718      	adds	r7, #24
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	200009dc 	.word	0x200009dc
 8013894:	40000800 	.word	0x40000800

08013898 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 801389c:	4b0e      	ldr	r3, [pc, #56]	; (80138d8 <MX_TIM14_Init+0x40>)
 801389e:	4a0f      	ldr	r2, [pc, #60]	; (80138dc <MX_TIM14_Init+0x44>)
 80138a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 167;
 80138a2:	4b0d      	ldr	r3, [pc, #52]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138a4:	22a7      	movs	r2, #167	; 0xa7
 80138a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80138a8:	4b0b      	ldr	r3, [pc, #44]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138aa:	2200      	movs	r2, #0
 80138ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 80138ae:	4b0a      	ldr	r3, [pc, #40]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80138b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80138b6:	4b08      	ldr	r3, [pc, #32]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138b8:	2200      	movs	r2, #0
 80138ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80138bc:	4b06      	ldr	r3, [pc, #24]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138be:	2200      	movs	r2, #0
 80138c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80138c2:	4805      	ldr	r0, [pc, #20]	; (80138d8 <MX_TIM14_Init+0x40>)
 80138c4:	f004 faee 	bl	8017ea4 <HAL_TIM_Base_Init>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d001      	beq.n	80138d2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80138ce:	f000 f96b 	bl	8013ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80138d2:	bf00      	nop
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	20000a90 	.word	0x20000a90
 80138dc:	40002000 	.word	0x40002000

080138e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80138e4:	4b11      	ldr	r3, [pc, #68]	; (801392c <MX_USART1_UART_Init+0x4c>)
 80138e6:	4a12      	ldr	r2, [pc, #72]	; (8013930 <MX_USART1_UART_Init+0x50>)
 80138e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80138ea:	4b10      	ldr	r3, [pc, #64]	; (801392c <MX_USART1_UART_Init+0x4c>)
 80138ec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80138f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80138f2:	4b0e      	ldr	r3, [pc, #56]	; (801392c <MX_USART1_UART_Init+0x4c>)
 80138f4:	2200      	movs	r2, #0
 80138f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80138f8:	4b0c      	ldr	r3, [pc, #48]	; (801392c <MX_USART1_UART_Init+0x4c>)
 80138fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80138fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013900:	4b0a      	ldr	r3, [pc, #40]	; (801392c <MX_USART1_UART_Init+0x4c>)
 8013902:	2200      	movs	r2, #0
 8013904:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013906:	4b09      	ldr	r3, [pc, #36]	; (801392c <MX_USART1_UART_Init+0x4c>)
 8013908:	220c      	movs	r2, #12
 801390a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801390c:	4b07      	ldr	r3, [pc, #28]	; (801392c <MX_USART1_UART_Init+0x4c>)
 801390e:	2200      	movs	r2, #0
 8013910:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013912:	4b06      	ldr	r3, [pc, #24]	; (801392c <MX_USART1_UART_Init+0x4c>)
 8013914:	2200      	movs	r2, #0
 8013916:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013918:	4804      	ldr	r0, [pc, #16]	; (801392c <MX_USART1_UART_Init+0x4c>)
 801391a:	f005 f833 	bl	8018984 <HAL_UART_Init>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8013924:	f000 f940 	bl	8013ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013928:	bf00      	nop
 801392a:	bd80      	pop	{r7, pc}
 801392c:	20000b44 	.word	0x20000b44
 8013930:	40011000 	.word	0x40011000

08013934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8013938:	4b11      	ldr	r3, [pc, #68]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 801393a:	4a12      	ldr	r2, [pc, #72]	; (8013984 <MX_USART2_UART_Init+0x50>)
 801393c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 801393e:	4b10      	ldr	r3, [pc, #64]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 8013940:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8013944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013946:	4b0e      	ldr	r3, [pc, #56]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 8013948:	2200      	movs	r2, #0
 801394a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 801394c:	4b0c      	ldr	r3, [pc, #48]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 801394e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013952:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8013954:	4b0a      	ldr	r3, [pc, #40]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 8013956:	2200      	movs	r2, #0
 8013958:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801395a:	4b09      	ldr	r3, [pc, #36]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 801395c:	220c      	movs	r2, #12
 801395e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013960:	4b07      	ldr	r3, [pc, #28]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 8013962:	2200      	movs	r2, #0
 8013964:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013966:	4b06      	ldr	r3, [pc, #24]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 8013968:	2200      	movs	r2, #0
 801396a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801396c:	4804      	ldr	r0, [pc, #16]	; (8013980 <MX_USART2_UART_Init+0x4c>)
 801396e:	f005 f809 	bl	8018984 <HAL_UART_Init>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8013978:	f000 f916 	bl	8013ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801397c:	bf00      	nop
 801397e:	bd80      	pop	{r7, pc}
 8013980:	20000bb8 	.word	0x20000bb8
 8013984:	40004400 	.word	0x40004400

08013988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801398e:	2300      	movs	r3, #0
 8013990:	607b      	str	r3, [r7, #4]
 8013992:	4b1f      	ldr	r3, [pc, #124]	; (8013a10 <MX_DMA_Init+0x88>)
 8013994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013996:	4a1e      	ldr	r2, [pc, #120]	; (8013a10 <MX_DMA_Init+0x88>)
 8013998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801399c:	6313      	str	r3, [r2, #48]	; 0x30
 801399e:	4b1c      	ldr	r3, [pc, #112]	; (8013a10 <MX_DMA_Init+0x88>)
 80139a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139a6:	607b      	str	r3, [r7, #4]
 80139a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80139aa:	2300      	movs	r3, #0
 80139ac:	603b      	str	r3, [r7, #0]
 80139ae:	4b18      	ldr	r3, [pc, #96]	; (8013a10 <MX_DMA_Init+0x88>)
 80139b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b2:	4a17      	ldr	r2, [pc, #92]	; (8013a10 <MX_DMA_Init+0x88>)
 80139b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80139b8:	6313      	str	r3, [r2, #48]	; 0x30
 80139ba:	4b15      	ldr	r3, [pc, #84]	; (8013a10 <MX_DMA_Init+0x88>)
 80139bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80139c6:	2200      	movs	r2, #0
 80139c8:	2100      	movs	r1, #0
 80139ca:	2010      	movs	r0, #16
 80139cc:	f001 fd63 	bl	8015496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80139d0:	2010      	movs	r0, #16
 80139d2:	f001 fd7c 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80139d6:	2200      	movs	r2, #0
 80139d8:	2100      	movs	r1, #0
 80139da:	2011      	movs	r0, #17
 80139dc:	f001 fd5b 	bl	8015496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80139e0:	2011      	movs	r0, #17
 80139e2:	f001 fd74 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80139e6:	2200      	movs	r2, #0
 80139e8:	2100      	movs	r1, #0
 80139ea:	203a      	movs	r0, #58	; 0x3a
 80139ec:	f001 fd53 	bl	8015496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80139f0:	203a      	movs	r0, #58	; 0x3a
 80139f2:	f001 fd6c 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80139f6:	2200      	movs	r2, #0
 80139f8:	2100      	movs	r1, #0
 80139fa:	2046      	movs	r0, #70	; 0x46
 80139fc:	f001 fd4b 	bl	8015496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8013a00:	2046      	movs	r0, #70	; 0x46
 8013a02:	f001 fd64 	bl	80154ce <HAL_NVIC_EnableIRQ>

}
 8013a06:	bf00      	nop
 8013a08:	3708      	adds	r7, #8
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	40023800 	.word	0x40023800

08013a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b08c      	sub	sp, #48	; 0x30
 8013a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a1a:	f107 031c 	add.w	r3, r7, #28
 8013a1e:	2200      	movs	r2, #0
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	605a      	str	r2, [r3, #4]
 8013a24:	609a      	str	r2, [r3, #8]
 8013a26:	60da      	str	r2, [r3, #12]
 8013a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	61bb      	str	r3, [r7, #24]
 8013a2e:	4b59      	ldr	r3, [pc, #356]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a32:	4a58      	ldr	r2, [pc, #352]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a34:	f043 0310 	orr.w	r3, r3, #16
 8013a38:	6313      	str	r3, [r2, #48]	; 0x30
 8013a3a:	4b56      	ldr	r3, [pc, #344]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a3e:	f003 0310 	and.w	r3, r3, #16
 8013a42:	61bb      	str	r3, [r7, #24]
 8013a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013a46:	2300      	movs	r3, #0
 8013a48:	617b      	str	r3, [r7, #20]
 8013a4a:	4b52      	ldr	r3, [pc, #328]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a4e:	4a51      	ldr	r2, [pc, #324]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a50:	f043 0304 	orr.w	r3, r3, #4
 8013a54:	6313      	str	r3, [r2, #48]	; 0x30
 8013a56:	4b4f      	ldr	r3, [pc, #316]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a5a:	f003 0304 	and.w	r3, r3, #4
 8013a5e:	617b      	str	r3, [r7, #20]
 8013a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013a62:	2300      	movs	r3, #0
 8013a64:	613b      	str	r3, [r7, #16]
 8013a66:	4b4b      	ldr	r3, [pc, #300]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a6a:	4a4a      	ldr	r2, [pc, #296]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a70:	6313      	str	r3, [r2, #48]	; 0x30
 8013a72:	4b48      	ldr	r3, [pc, #288]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a7a:	613b      	str	r3, [r7, #16]
 8013a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a7e:	2300      	movs	r3, #0
 8013a80:	60fb      	str	r3, [r7, #12]
 8013a82:	4b44      	ldr	r3, [pc, #272]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a86:	4a43      	ldr	r2, [pc, #268]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a88:	f043 0301 	orr.w	r3, r3, #1
 8013a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8013a8e:	4b41      	ldr	r3, [pc, #260]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a92:	f003 0301 	and.w	r3, r3, #1
 8013a96:	60fb      	str	r3, [r7, #12]
 8013a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	60bb      	str	r3, [r7, #8]
 8013a9e:	4b3d      	ldr	r3, [pc, #244]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa2:	4a3c      	ldr	r2, [pc, #240]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013aa4:	f043 0302 	orr.w	r3, r3, #2
 8013aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8013aaa:	4b3a      	ldr	r3, [pc, #232]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aae:	f003 0302 	and.w	r3, r3, #2
 8013ab2:	60bb      	str	r3, [r7, #8]
 8013ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	607b      	str	r3, [r7, #4]
 8013aba:	4b36      	ldr	r3, [pc, #216]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013abe:	4a35      	ldr	r2, [pc, #212]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013ac0:	f043 0308 	orr.w	r3, r3, #8
 8013ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8013ac6:	4b33      	ldr	r3, [pc, #204]	; (8013b94 <MX_GPIO_Init+0x180>)
 8013ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aca:	f003 0308 	and.w	r3, r3, #8
 8013ace:	607b      	str	r3, [r7, #4]
 8013ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	21c0      	movs	r1, #192	; 0xc0
 8013ad6:	4830      	ldr	r0, [pc, #192]	; (8013b98 <MX_GPIO_Init+0x184>)
 8013ad8:	f002 fab6 	bl	8016048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8013adc:	2200      	movs	r2, #0
 8013ade:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8013ae2:	482e      	ldr	r0, [pc, #184]	; (8013b9c <MX_GPIO_Init+0x188>)
 8013ae4:	f002 fab0 	bl	8016048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8013ae8:	2318      	movs	r3, #24
 8013aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013aec:	2300      	movs	r3, #0
 8013aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013af0:	2300      	movs	r3, #0
 8013af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013af4:	f107 031c 	add.w	r3, r7, #28
 8013af8:	4619      	mov	r1, r3
 8013afa:	4829      	ldr	r0, [pc, #164]	; (8013ba0 <MX_GPIO_Init+0x18c>)
 8013afc:	f002 f908 	bl	8015d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8013b00:	2301      	movs	r3, #1
 8013b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013b04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8013b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8013b0e:	f107 031c 	add.w	r3, r7, #28
 8013b12:	4619      	mov	r1, r3
 8013b14:	4820      	ldr	r0, [pc, #128]	; (8013b98 <MX_GPIO_Init+0x184>)
 8013b16:	f002 f8fb 	bl	8015d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8013b1a:	23c0      	movs	r3, #192	; 0xc0
 8013b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b1e:	2301      	movs	r3, #1
 8013b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b26:	2300      	movs	r3, #0
 8013b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b2a:	f107 031c 	add.w	r3, r7, #28
 8013b2e:	4619      	mov	r1, r3
 8013b30:	4819      	ldr	r0, [pc, #100]	; (8013b98 <MX_GPIO_Init+0x184>)
 8013b32:	f002 f8ed 	bl	8015d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8013b36:	2304      	movs	r3, #4
 8013b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8013b42:	f107 031c 	add.w	r3, r7, #28
 8013b46:	4619      	mov	r1, r3
 8013b48:	4816      	ldr	r0, [pc, #88]	; (8013ba4 <MX_GPIO_Init+0x190>)
 8013b4a:	f002 f8e1 	bl	8015d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8013b4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b54:	2301      	movs	r3, #1
 8013b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013b60:	f107 031c 	add.w	r3, r7, #28
 8013b64:	4619      	mov	r1, r3
 8013b66:	480d      	ldr	r0, [pc, #52]	; (8013b9c <MX_GPIO_Init+0x188>)
 8013b68:	f002 f8d2 	bl	8015d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8013b6c:	2320      	movs	r3, #32
 8013b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b70:	2302      	movs	r3, #2
 8013b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b74:	2300      	movs	r3, #0
 8013b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8013b7c:	2309      	movs	r3, #9
 8013b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013b80:	f107 031c 	add.w	r3, r7, #28
 8013b84:	4619      	mov	r1, r3
 8013b86:	4807      	ldr	r0, [pc, #28]	; (8013ba4 <MX_GPIO_Init+0x190>)
 8013b88:	f002 f8c2 	bl	8015d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8013b8c:	bf00      	nop
 8013b8e:	3730      	adds	r7, #48	; 0x30
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	40023800 	.word	0x40023800
 8013b98:	40020000 	.word	0x40020000
 8013b9c:	40020c00 	.word	0x40020c00
 8013ba0:	40021000 	.word	0x40021000
 8013ba4:	40020400 	.word	0x40020400

08013ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013bac:	b672      	cpsid	i
}
 8013bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8013bb0:	e7fe      	b.n	8013bb0 <Error_Handler+0x8>
	...

08013bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013bba:	2300      	movs	r3, #0
 8013bbc:	607b      	str	r3, [r7, #4]
 8013bbe:	4b10      	ldr	r3, [pc, #64]	; (8013c00 <HAL_MspInit+0x4c>)
 8013bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bc2:	4a0f      	ldr	r2, [pc, #60]	; (8013c00 <HAL_MspInit+0x4c>)
 8013bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8013bca:	4b0d      	ldr	r3, [pc, #52]	; (8013c00 <HAL_MspInit+0x4c>)
 8013bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bd2:	607b      	str	r3, [r7, #4]
 8013bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	603b      	str	r3, [r7, #0]
 8013bda:	4b09      	ldr	r3, [pc, #36]	; (8013c00 <HAL_MspInit+0x4c>)
 8013bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bde:	4a08      	ldr	r2, [pc, #32]	; (8013c00 <HAL_MspInit+0x4c>)
 8013be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013be4:	6413      	str	r3, [r2, #64]	; 0x40
 8013be6:	4b06      	ldr	r3, [pc, #24]	; (8013c00 <HAL_MspInit+0x4c>)
 8013be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013bee:	603b      	str	r3, [r7, #0]
 8013bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8013bf2:	2007      	movs	r0, #7
 8013bf4:	f001 fc44 	bl	8015480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	40023800 	.word	0x40023800

08013c04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b08a      	sub	sp, #40	; 0x28
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c0c:	f107 0314 	add.w	r3, r7, #20
 8013c10:	2200      	movs	r2, #0
 8013c12:	601a      	str	r2, [r3, #0]
 8013c14:	605a      	str	r2, [r3, #4]
 8013c16:	609a      	str	r2, [r3, #8]
 8013c18:	60da      	str	r2, [r3, #12]
 8013c1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	4a29      	ldr	r2, [pc, #164]	; (8013cc8 <HAL_CAN_MspInit+0xc4>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d14b      	bne.n	8013cbe <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8013c26:	2300      	movs	r3, #0
 8013c28:	613b      	str	r3, [r7, #16]
 8013c2a:	4b28      	ldr	r3, [pc, #160]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c2e:	4a27      	ldr	r2, [pc, #156]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013c34:	6413      	str	r3, [r2, #64]	; 0x40
 8013c36:	4b25      	ldr	r3, [pc, #148]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c3e:	613b      	str	r3, [r7, #16]
 8013c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013c42:	2300      	movs	r3, #0
 8013c44:	60fb      	str	r3, [r7, #12]
 8013c46:	4b21      	ldr	r3, [pc, #132]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c4a:	4a20      	ldr	r2, [pc, #128]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c4c:	f043 0308 	orr.w	r3, r3, #8
 8013c50:	6313      	str	r3, [r2, #48]	; 0x30
 8013c52:	4b1e      	ldr	r3, [pc, #120]	; (8013ccc <HAL_CAN_MspInit+0xc8>)
 8013c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c56:	f003 0308 	and.w	r3, r3, #8
 8013c5a:	60fb      	str	r3, [r7, #12]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013c5e:	2303      	movs	r3, #3
 8013c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c62:	2302      	movs	r3, #2
 8013c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c66:	2300      	movs	r3, #0
 8013c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c6a:	2303      	movs	r3, #3
 8013c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8013c6e:	2309      	movs	r3, #9
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013c72:	f107 0314 	add.w	r3, r7, #20
 8013c76:	4619      	mov	r1, r3
 8013c78:	4815      	ldr	r0, [pc, #84]	; (8013cd0 <HAL_CAN_MspInit+0xcc>)
 8013c7a:	f002 f849 	bl	8015d10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8013c7e:	2200      	movs	r2, #0
 8013c80:	2100      	movs	r1, #0
 8013c82:	2013      	movs	r0, #19
 8013c84:	f001 fc07 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8013c88:	2013      	movs	r0, #19
 8013c8a:	f001 fc20 	bl	80154ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8013c8e:	2200      	movs	r2, #0
 8013c90:	2100      	movs	r1, #0
 8013c92:	2014      	movs	r0, #20
 8013c94:	f001 fbff 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8013c98:	2014      	movs	r0, #20
 8013c9a:	f001 fc18 	bl	80154ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	2015      	movs	r0, #21
 8013ca4:	f001 fbf7 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8013ca8:	2015      	movs	r0, #21
 8013caa:	f001 fc10 	bl	80154ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8013cae:	2200      	movs	r2, #0
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	2016      	movs	r0, #22
 8013cb4:	f001 fbef 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8013cb8:	2016      	movs	r0, #22
 8013cba:	f001 fc08 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8013cbe:	bf00      	nop
 8013cc0:	3728      	adds	r7, #40	; 0x28
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	40006400 	.word	0x40006400
 8013ccc:	40023800 	.word	0x40023800
 8013cd0:	40020c00 	.word	0x40020c00

08013cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a1c      	ldr	r2, [pc, #112]	; (8013d54 <HAL_TIM_Base_MspInit+0x80>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d116      	bne.n	8013d14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	4b1b      	ldr	r3, [pc, #108]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cee:	4a1a      	ldr	r2, [pc, #104]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013cf0:	f043 0304 	orr.w	r3, r3, #4
 8013cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8013cf6:	4b18      	ldr	r3, [pc, #96]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cfa:	f003 0304 	and.w	r3, r3, #4
 8013cfe:	60fb      	str	r3, [r7, #12]
 8013d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8013d02:	2200      	movs	r2, #0
 8013d04:	2100      	movs	r1, #0
 8013d06:	201e      	movs	r0, #30
 8013d08:	f001 fbc5 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8013d0c:	201e      	movs	r0, #30
 8013d0e:	f001 fbde 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8013d12:	e01a      	b.n	8013d4a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a10      	ldr	r2, [pc, #64]	; (8013d5c <HAL_TIM_Base_MspInit+0x88>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d115      	bne.n	8013d4a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8013d1e:	2300      	movs	r3, #0
 8013d20:	60bb      	str	r3, [r7, #8]
 8013d22:	4b0d      	ldr	r3, [pc, #52]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d26:	4a0c      	ldr	r2, [pc, #48]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8013d2e:	4b0a      	ldr	r3, [pc, #40]	; (8013d58 <HAL_TIM_Base_MspInit+0x84>)
 8013d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d36:	60bb      	str	r3, [r7, #8]
 8013d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	202d      	movs	r0, #45	; 0x2d
 8013d40:	f001 fba9 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8013d44:	202d      	movs	r0, #45	; 0x2d
 8013d46:	f001 fbc2 	bl	80154ce <HAL_NVIC_EnableIRQ>
}
 8013d4a:	bf00      	nop
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	40000800 	.word	0x40000800
 8013d58:	40023800 	.word	0x40023800
 8013d5c:	40002000 	.word	0x40002000

08013d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08c      	sub	sp, #48	; 0x30
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013d68:	f107 031c 	add.w	r3, r7, #28
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	601a      	str	r2, [r3, #0]
 8013d70:	605a      	str	r2, [r3, #4]
 8013d72:	609a      	str	r2, [r3, #8]
 8013d74:	60da      	str	r2, [r3, #12]
 8013d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	4a97      	ldr	r2, [pc, #604]	; (8013fdc <HAL_UART_MspInit+0x27c>)
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	f040 8092 	bne.w	8013ea8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8013d84:	2300      	movs	r3, #0
 8013d86:	61bb      	str	r3, [r7, #24]
 8013d88:	4b95      	ldr	r3, [pc, #596]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d8c:	4a94      	ldr	r2, [pc, #592]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013d8e:	f043 0310 	orr.w	r3, r3, #16
 8013d92:	6453      	str	r3, [r2, #68]	; 0x44
 8013d94:	4b92      	ldr	r3, [pc, #584]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d98:	f003 0310 	and.w	r3, r3, #16
 8013d9c:	61bb      	str	r3, [r7, #24]
 8013d9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013da0:	2300      	movs	r3, #0
 8013da2:	617b      	str	r3, [r7, #20]
 8013da4:	4b8e      	ldr	r3, [pc, #568]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da8:	4a8d      	ldr	r2, [pc, #564]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013daa:	f043 0301 	orr.w	r3, r3, #1
 8013dae:	6313      	str	r3, [r2, #48]	; 0x30
 8013db0:	4b8b      	ldr	r3, [pc, #556]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	617b      	str	r3, [r7, #20]
 8013dba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013dbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013dc2:	2302      	movs	r3, #2
 8013dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013dca:	2303      	movs	r3, #3
 8013dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8013dce:	2307      	movs	r3, #7
 8013dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013dd2:	f107 031c 	add.w	r3, r7, #28
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	4882      	ldr	r0, [pc, #520]	; (8013fe4 <HAL_UART_MspInit+0x284>)
 8013dda:	f001 ff99 	bl	8015d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8013dde:	4b82      	ldr	r3, [pc, #520]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013de0:	4a82      	ldr	r2, [pc, #520]	; (8013fec <HAL_UART_MspInit+0x28c>)
 8013de2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8013de4:	4b80      	ldr	r3, [pc, #512]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013dea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013dec:	4b7e      	ldr	r3, [pc, #504]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013dee:	2200      	movs	r2, #0
 8013df0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013df2:	4b7d      	ldr	r3, [pc, #500]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013df4:	2200      	movs	r2, #0
 8013df6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013df8:	4b7b      	ldr	r3, [pc, #492]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013dfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013e00:	4b79      	ldr	r3, [pc, #484]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e02:	2200      	movs	r2, #0
 8013e04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013e06:	4b78      	ldr	r3, [pc, #480]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8013e0c:	4b76      	ldr	r3, [pc, #472]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e0e:	2200      	movs	r2, #0
 8013e10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013e12:	4b75      	ldr	r3, [pc, #468]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e14:	2200      	movs	r2, #0
 8013e16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013e18:	4b73      	ldr	r3, [pc, #460]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8013e1e:	4872      	ldr	r0, [pc, #456]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e20:	f001 fb74 	bl	801550c <HAL_DMA_Init>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d001      	beq.n	8013e2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8013e2a:	f7ff febd 	bl	8013ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4a6d      	ldr	r2, [pc, #436]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e32:	639a      	str	r2, [r3, #56]	; 0x38
 8013e34:	4a6c      	ldr	r2, [pc, #432]	; (8013fe8 <HAL_UART_MspInit+0x288>)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8013e3a:	4b6d      	ldr	r3, [pc, #436]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e3c:	4a6d      	ldr	r2, [pc, #436]	; (8013ff4 <HAL_UART_MspInit+0x294>)
 8013e3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8013e40:	4b6b      	ldr	r3, [pc, #428]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013e48:	4b69      	ldr	r3, [pc, #420]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e4a:	2240      	movs	r2, #64	; 0x40
 8013e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013e4e:	4b68      	ldr	r3, [pc, #416]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e50:	2200      	movs	r2, #0
 8013e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013e54:	4b66      	ldr	r3, [pc, #408]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013e5c:	4b64      	ldr	r3, [pc, #400]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e5e:	2200      	movs	r2, #0
 8013e60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013e62:	4b63      	ldr	r3, [pc, #396]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8013e68:	4b61      	ldr	r3, [pc, #388]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013e6e:	4b60      	ldr	r3, [pc, #384]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e70:	2200      	movs	r2, #0
 8013e72:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013e74:	4b5e      	ldr	r3, [pc, #376]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e76:	2200      	movs	r2, #0
 8013e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8013e7a:	485d      	ldr	r0, [pc, #372]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e7c:	f001 fb46 	bl	801550c <HAL_DMA_Init>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d001      	beq.n	8013e8a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8013e86:	f7ff fe8f 	bl	8013ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4a58      	ldr	r2, [pc, #352]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8013e90:	4a57      	ldr	r2, [pc, #348]	; (8013ff0 <HAL_UART_MspInit+0x290>)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013e96:	2200      	movs	r2, #0
 8013e98:	2100      	movs	r1, #0
 8013e9a:	2025      	movs	r0, #37	; 0x25
 8013e9c:	f001 fafb 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013ea0:	2025      	movs	r0, #37	; 0x25
 8013ea2:	f001 fb14 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8013ea6:	e095      	b.n	8013fd4 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4a52      	ldr	r2, [pc, #328]	; (8013ff8 <HAL_UART_MspInit+0x298>)
 8013eae:	4293      	cmp	r3, r2
 8013eb0:	f040 8090 	bne.w	8013fd4 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	613b      	str	r3, [r7, #16]
 8013eb8:	4b49      	ldr	r3, [pc, #292]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ebc:	4a48      	ldr	r2, [pc, #288]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8013ec4:	4b46      	ldr	r3, [pc, #280]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ecc:	613b      	str	r3, [r7, #16]
 8013ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60fb      	str	r3, [r7, #12]
 8013ed4:	4b42      	ldr	r3, [pc, #264]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ed8:	4a41      	ldr	r2, [pc, #260]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013eda:	f043 0301 	orr.w	r3, r3, #1
 8013ede:	6313      	str	r3, [r2, #48]	; 0x30
 8013ee0:	4b3f      	ldr	r3, [pc, #252]	; (8013fe0 <HAL_UART_MspInit+0x280>)
 8013ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee4:	f003 0301 	and.w	r3, r3, #1
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8013eec:	230c      	movs	r3, #12
 8013eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ef8:	2303      	movs	r3, #3
 8013efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8013efc:	2307      	movs	r3, #7
 8013efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f00:	f107 031c 	add.w	r3, r7, #28
 8013f04:	4619      	mov	r1, r3
 8013f06:	4837      	ldr	r0, [pc, #220]	; (8013fe4 <HAL_UART_MspInit+0x284>)
 8013f08:	f001 ff02 	bl	8015d10 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8013f0c:	4b3b      	ldr	r3, [pc, #236]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f0e:	4a3c      	ldr	r2, [pc, #240]	; (8014000 <HAL_UART_MspInit+0x2a0>)
 8013f10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8013f12:	4b3a      	ldr	r3, [pc, #232]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013f18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013f1a:	4b38      	ldr	r3, [pc, #224]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f1c:	2240      	movs	r2, #64	; 0x40
 8013f1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013f20:	4b36      	ldr	r3, [pc, #216]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f22:	2200      	movs	r2, #0
 8013f24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013f26:	4b35      	ldr	r3, [pc, #212]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013f2e:	4b33      	ldr	r3, [pc, #204]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f30:	2200      	movs	r2, #0
 8013f32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013f34:	4b31      	ldr	r3, [pc, #196]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f36:	2200      	movs	r2, #0
 8013f38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8013f3a:	4b30      	ldr	r3, [pc, #192]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013f40:	4b2e      	ldr	r3, [pc, #184]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f42:	2200      	movs	r2, #0
 8013f44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013f46:	4b2d      	ldr	r3, [pc, #180]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f48:	2200      	movs	r2, #0
 8013f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8013f4c:	482b      	ldr	r0, [pc, #172]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f4e:	f001 fadd 	bl	801550c <HAL_DMA_Init>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d001      	beq.n	8013f5c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8013f58:	f7ff fe26 	bl	8013ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	4a27      	ldr	r2, [pc, #156]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f60:	635a      	str	r2, [r3, #52]	; 0x34
 8013f62:	4a26      	ldr	r2, [pc, #152]	; (8013ffc <HAL_UART_MspInit+0x29c>)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8013f68:	4b26      	ldr	r3, [pc, #152]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f6a:	4a27      	ldr	r2, [pc, #156]	; (8014008 <HAL_UART_MspInit+0x2a8>)
 8013f6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8013f6e:	4b25      	ldr	r3, [pc, #148]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013f74:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013f76:	4b23      	ldr	r3, [pc, #140]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013f7c:	4b21      	ldr	r3, [pc, #132]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f7e:	2200      	movs	r2, #0
 8013f80:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013f82:	4b20      	ldr	r3, [pc, #128]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f88:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013f8a:	4b1e      	ldr	r3, [pc, #120]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013f90:	4b1c      	ldr	r3, [pc, #112]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f92:	2200      	movs	r2, #0
 8013f94:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8013f96:	4b1b      	ldr	r3, [pc, #108]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f98:	2200      	movs	r2, #0
 8013f9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013f9c:	4b19      	ldr	r3, [pc, #100]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013fa2:	4b18      	ldr	r3, [pc, #96]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8013fa8:	4816      	ldr	r0, [pc, #88]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013faa:	f001 faaf 	bl	801550c <HAL_DMA_Init>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d001      	beq.n	8013fb8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8013fb4:	f7ff fdf8 	bl	8013ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	4a12      	ldr	r2, [pc, #72]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8013fbe:	4a11      	ldr	r2, [pc, #68]	; (8014004 <HAL_UART_MspInit+0x2a4>)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	2026      	movs	r0, #38	; 0x26
 8013fca:	f001 fa64 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8013fce:	2026      	movs	r0, #38	; 0x26
 8013fd0:	f001 fa7d 	bl	80154ce <HAL_NVIC_EnableIRQ>
}
 8013fd4:	bf00      	nop
 8013fd6:	3730      	adds	r7, #48	; 0x30
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	40011000 	.word	0x40011000
 8013fe0:	40023800 	.word	0x40023800
 8013fe4:	40020000 	.word	0x40020000
 8013fe8:	20000c2c 	.word	0x20000c2c
 8013fec:	40026440 	.word	0x40026440
 8013ff0:	20000c8c 	.word	0x20000c8c
 8013ff4:	400264b8 	.word	0x400264b8
 8013ff8:	40004400 	.word	0x40004400
 8013ffc:	20000cec 	.word	0x20000cec
 8014000:	400260a0 	.word	0x400260a0
 8014004:	20000d4c 	.word	0x20000d4c
 8014008:	40026088 	.word	0x40026088

0801400c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801400c:	b480      	push	{r7}
 801400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014010:	e7fe      	b.n	8014010 <NMI_Handler+0x4>

08014012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014012:	b480      	push	{r7}
 8014014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014016:	e7fe      	b.n	8014016 <HardFault_Handler+0x4>

08014018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014018:	b480      	push	{r7}
 801401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801401c:	e7fe      	b.n	801401c <MemManage_Handler+0x4>

0801401e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801401e:	b480      	push	{r7}
 8014020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014022:	e7fe      	b.n	8014022 <BusFault_Handler+0x4>

08014024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014024:	b480      	push	{r7}
 8014026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014028:	e7fe      	b.n	8014028 <UsageFault_Handler+0x4>

0801402a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801402a:	b480      	push	{r7}
 801402c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801402e:	bf00      	nop
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014038:	b480      	push	{r7}
 801403a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801403c:	bf00      	nop
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr

08014046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014046:	b480      	push	{r7}
 8014048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801404a:	bf00      	nop
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr

08014054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014058:	f000 f9d8 	bl	801440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801405c:	bf00      	nop
 801405e:	bd80      	pop	{r7, pc}

08014060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8014064:	4802      	ldr	r0, [pc, #8]	; (8014070 <DMA1_Stream5_IRQHandler+0x10>)
 8014066:	f001 fbe9 	bl	801583c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801406a:	bf00      	nop
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20000d4c 	.word	0x20000d4c

08014074 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8014078:	4802      	ldr	r0, [pc, #8]	; (8014084 <DMA1_Stream6_IRQHandler+0x10>)
 801407a:	f001 fbdf 	bl	801583c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 801407e:	bf00      	nop
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	20000cec 	.word	0x20000cec

08014088 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801408c:	4802      	ldr	r0, [pc, #8]	; (8014098 <CAN1_TX_IRQHandler+0x10>)
 801408e:	f000 fefc 	bl	8014e8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8014092:	bf00      	nop
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20000978 	.word	0x20000978

0801409c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80140a0:	4802      	ldr	r0, [pc, #8]	; (80140ac <CAN1_RX0_IRQHandler+0x10>)
 80140a2:	f000 fef2 	bl	8014e8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80140a6:	bf00      	nop
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	20000978 	.word	0x20000978

080140b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80140b4:	4802      	ldr	r0, [pc, #8]	; (80140c0 <CAN1_RX1_IRQHandler+0x10>)
 80140b6:	f000 fee8 	bl	8014e8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80140ba:	bf00      	nop
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	20000978 	.word	0x20000978

080140c4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80140c8:	4802      	ldr	r0, [pc, #8]	; (80140d4 <CAN1_SCE_IRQHandler+0x10>)
 80140ca:	f000 fede 	bl	8014e8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80140ce:	bf00      	nop
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	20000978 	.word	0x20000978

080140d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80140dc:	4802      	ldr	r0, [pc, #8]	; (80140e8 <TIM4_IRQHandler+0x10>)
 80140de:	f003 ffdc 	bl	801809a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80140e2:	bf00      	nop
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	200009dc 	.word	0x200009dc

080140ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80140f0:	4802      	ldr	r0, [pc, #8]	; (80140fc <USART1_IRQHandler+0x10>)
 80140f2:	f004 fd1f 	bl	8018b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80140f6:	bf00      	nop
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	20000b44 	.word	0x20000b44

08014100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8014104:	4802      	ldr	r0, [pc, #8]	; (8014110 <USART2_IRQHandler+0x10>)
 8014106:	f004 fd15 	bl	8018b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801410a:	bf00      	nop
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	20000bb8 	.word	0x20000bb8

08014114 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8014118:	4802      	ldr	r0, [pc, #8]	; (8014124 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 801411a:	f003 ffbe 	bl	801809a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 801411e:	bf00      	nop
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	20000a90 	.word	0x20000a90

08014128 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 801412c:	4802      	ldr	r0, [pc, #8]	; (8014138 <DMA2_Stream2_IRQHandler+0x10>)
 801412e:	f001 fb85 	bl	801583c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8014132:	bf00      	nop
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	20000c2c 	.word	0x20000c2c

0801413c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8014140:	4802      	ldr	r0, [pc, #8]	; (801414c <OTG_FS_IRQHandler+0x10>)
 8014142:	f002 f8ea 	bl	801631a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8014146:	bf00      	nop
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	200022ac 	.word	0x200022ac

08014150 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8014154:	4802      	ldr	r0, [pc, #8]	; (8014160 <DMA2_Stream7_IRQHandler+0x10>)
 8014156:	f001 fb71 	bl	801583c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 801415a:	bf00      	nop
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	20000c8c 	.word	0x20000c8c

08014164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014164:	b480      	push	{r7}
 8014166:	af00      	add	r7, sp, #0
  return 1;
 8014168:	2301      	movs	r3, #1
}
 801416a:	4618      	mov	r0, r3
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <_kill>:

int _kill(int pid, int sig)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801417e:	f00b facd 	bl	801f71c <__errno>
 8014182:	4603      	mov	r3, r0
 8014184:	2216      	movs	r2, #22
 8014186:	601a      	str	r2, [r3, #0]
  return -1;
 8014188:	f04f 33ff 	mov.w	r3, #4294967295
}
 801418c:	4618      	mov	r0, r3
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <_exit>:

void _exit (int status)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801419c:	f04f 31ff 	mov.w	r1, #4294967295
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f7ff ffe7 	bl	8014174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80141a6:	e7fe      	b.n	80141a6 <_exit+0x12>

080141a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b086      	sub	sp, #24
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141b4:	2300      	movs	r3, #0
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e00a      	b.n	80141d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80141ba:	f3af 8000 	nop.w
 80141be:	4601      	mov	r1, r0
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	1c5a      	adds	r2, r3, #1
 80141c4:	60ba      	str	r2, [r7, #8]
 80141c6:	b2ca      	uxtb	r2, r1
 80141c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	3301      	adds	r3, #1
 80141ce:	617b      	str	r3, [r7, #20]
 80141d0:	697a      	ldr	r2, [r7, #20]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	dbf0      	blt.n	80141ba <_read+0x12>
  }

  return len;
 80141d8:	687b      	ldr	r3, [r7, #4]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80141e2:	b580      	push	{r7, lr}
 80141e4:	b086      	sub	sp, #24
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	60f8      	str	r0, [r7, #12]
 80141ea:	60b9      	str	r1, [r7, #8]
 80141ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141ee:	2300      	movs	r3, #0
 80141f0:	617b      	str	r3, [r7, #20]
 80141f2:	e009      	b.n	8014208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	1c5a      	adds	r2, r3, #1
 80141f8:	60ba      	str	r2, [r7, #8]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	4618      	mov	r0, r3
 80141fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	3301      	adds	r3, #1
 8014206:	617b      	str	r3, [r7, #20]
 8014208:	697a      	ldr	r2, [r7, #20]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	429a      	cmp	r2, r3
 801420e:	dbf1      	blt.n	80141f4 <_write+0x12>
  }
  return len;
 8014210:	687b      	ldr	r3, [r7, #4]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3718      	adds	r7, #24
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <_close>:

int _close(int file)
{
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8014222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014226:	4618      	mov	r0, r3
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr

08014232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014232:	b480      	push	{r7}
 8014234:	b083      	sub	sp, #12
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
 801423a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014242:	605a      	str	r2, [r3, #4]
  return 0;
 8014244:	2300      	movs	r3, #0
}
 8014246:	4618      	mov	r0, r3
 8014248:	370c      	adds	r7, #12
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr

08014252 <_isatty>:

int _isatty(int file)
{
 8014252:	b480      	push	{r7}
 8014254:	b083      	sub	sp, #12
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801425a:	2301      	movs	r3, #1
}
 801425c:	4618      	mov	r0, r3
 801425e:	370c      	adds	r7, #12
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr

08014268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014268:	b480      	push	{r7}
 801426a:	b085      	sub	sp, #20
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8014274:	2300      	movs	r3, #0
}
 8014276:	4618      	mov	r0, r3
 8014278:	3714      	adds	r7, #20
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr
	...

08014284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b086      	sub	sp, #24
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801428c:	4a14      	ldr	r2, [pc, #80]	; (80142e0 <_sbrk+0x5c>)
 801428e:	4b15      	ldr	r3, [pc, #84]	; (80142e4 <_sbrk+0x60>)
 8014290:	1ad3      	subs	r3, r2, r3
 8014292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014298:	4b13      	ldr	r3, [pc, #76]	; (80142e8 <_sbrk+0x64>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d102      	bne.n	80142a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80142a0:	4b11      	ldr	r3, [pc, #68]	; (80142e8 <_sbrk+0x64>)
 80142a2:	4a12      	ldr	r2, [pc, #72]	; (80142ec <_sbrk+0x68>)
 80142a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80142a6:	4b10      	ldr	r3, [pc, #64]	; (80142e8 <_sbrk+0x64>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	4413      	add	r3, r2
 80142ae:	693a      	ldr	r2, [r7, #16]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d207      	bcs.n	80142c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80142b4:	f00b fa32 	bl	801f71c <__errno>
 80142b8:	4603      	mov	r3, r0
 80142ba:	220c      	movs	r2, #12
 80142bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80142be:	f04f 33ff 	mov.w	r3, #4294967295
 80142c2:	e009      	b.n	80142d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80142c4:	4b08      	ldr	r3, [pc, #32]	; (80142e8 <_sbrk+0x64>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80142ca:	4b07      	ldr	r3, [pc, #28]	; (80142e8 <_sbrk+0x64>)
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4413      	add	r3, r2
 80142d2:	4a05      	ldr	r2, [pc, #20]	; (80142e8 <_sbrk+0x64>)
 80142d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80142d6:	68fb      	ldr	r3, [r7, #12]
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3718      	adds	r7, #24
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	20020000 	.word	0x20020000
 80142e4:	00000800 	.word	0x00000800
 80142e8:	20000dc4 	.word	0x20000dc4
 80142ec:	20002b28 	.word	0x20002b28

080142f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80142f0:	b480      	push	{r7}
 80142f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80142f4:	4b06      	ldr	r3, [pc, #24]	; (8014310 <SystemInit+0x20>)
 80142f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142fa:	4a05      	ldr	r2, [pc, #20]	; (8014310 <SystemInit+0x20>)
 80142fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014304:	bf00      	nop
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	e000ed00 	.word	0xe000ed00

08014314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014314:	f8df d034 	ldr.w	sp, [pc, #52]	; 801434c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8014318:	480d      	ldr	r0, [pc, #52]	; (8014350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801431a:	490e      	ldr	r1, [pc, #56]	; (8014354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801431c:	4a0e      	ldr	r2, [pc, #56]	; (8014358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801431e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014320:	e002      	b.n	8014328 <LoopCopyDataInit>

08014322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014326:	3304      	adds	r3, #4

08014328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801432a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801432c:	d3f9      	bcc.n	8014322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801432e:	4a0b      	ldr	r2, [pc, #44]	; (801435c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8014330:	4c0b      	ldr	r4, [pc, #44]	; (8014360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8014332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014334:	e001      	b.n	801433a <LoopFillZerobss>

08014336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014338:	3204      	adds	r2, #4

0801433a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801433a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801433c:	d3fb      	bcc.n	8014336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801433e:	f7ff ffd7 	bl	80142f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014342:	f00b f9f1 	bl	801f728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014346:	f7ff f8cd 	bl	80134e4 <main>
  bx  lr    
 801434a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801434c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8014350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014354:	20000910 	.word	0x20000910
  ldr r2, =_sidata
 8014358:	080243e4 	.word	0x080243e4
  ldr r2, =_sbss
 801435c:	20000910 	.word	0x20000910
  ldr r4, =_ebss
 8014360:	20002b24 	.word	0x20002b24

08014364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014364:	e7fe      	b.n	8014364 <ADC_IRQHandler>
	...

08014368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801436c:	4b0e      	ldr	r3, [pc, #56]	; (80143a8 <HAL_Init+0x40>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4a0d      	ldr	r2, [pc, #52]	; (80143a8 <HAL_Init+0x40>)
 8014372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8014378:	4b0b      	ldr	r3, [pc, #44]	; (80143a8 <HAL_Init+0x40>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4a0a      	ldr	r2, [pc, #40]	; (80143a8 <HAL_Init+0x40>)
 801437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8014384:	4b08      	ldr	r3, [pc, #32]	; (80143a8 <HAL_Init+0x40>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4a07      	ldr	r2, [pc, #28]	; (80143a8 <HAL_Init+0x40>)
 801438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801438e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014390:	2003      	movs	r0, #3
 8014392:	f001 f875 	bl	8015480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8014396:	2000      	movs	r0, #0
 8014398:	f000 f808 	bl	80143ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801439c:	f7ff fc0a 	bl	8013bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	40023c00 	.word	0x40023c00

080143ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80143b4:	4b12      	ldr	r3, [pc, #72]	; (8014400 <HAL_InitTick+0x54>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	4b12      	ldr	r3, [pc, #72]	; (8014404 <HAL_InitTick+0x58>)
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	4619      	mov	r1, r3
 80143be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80143c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80143c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80143ca:	4618      	mov	r0, r3
 80143cc:	f001 f891 	bl	80154f2 <HAL_SYSTICK_Config>
 80143d0:	4603      	mov	r3, r0
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d001      	beq.n	80143da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80143d6:	2301      	movs	r3, #1
 80143d8:	e00e      	b.n	80143f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b0f      	cmp	r3, #15
 80143de:	d80a      	bhi.n	80143f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80143e0:	2200      	movs	r2, #0
 80143e2:	6879      	ldr	r1, [r7, #4]
 80143e4:	f04f 30ff 	mov.w	r0, #4294967295
 80143e8:	f001 f855 	bl	8015496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80143ec:	4a06      	ldr	r2, [pc, #24]	; (8014408 <HAL_InitTick+0x5c>)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80143f2:	2300      	movs	r3, #0
 80143f4:	e000      	b.n	80143f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80143f6:	2301      	movs	r3, #1
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}
 8014400:	2000064c 	.word	0x2000064c
 8014404:	20000654 	.word	0x20000654
 8014408:	20000650 	.word	0x20000650

0801440c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801440c:	b480      	push	{r7}
 801440e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014410:	4b06      	ldr	r3, [pc, #24]	; (801442c <HAL_IncTick+0x20>)
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	461a      	mov	r2, r3
 8014416:	4b06      	ldr	r3, [pc, #24]	; (8014430 <HAL_IncTick+0x24>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	4413      	add	r3, r2
 801441c:	4a04      	ldr	r2, [pc, #16]	; (8014430 <HAL_IncTick+0x24>)
 801441e:	6013      	str	r3, [r2, #0]
}
 8014420:	bf00      	nop
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	20000654 	.word	0x20000654
 8014430:	20000dc8 	.word	0x20000dc8

08014434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014434:	b480      	push	{r7}
 8014436:	af00      	add	r7, sp, #0
  return uwTick;
 8014438:	4b03      	ldr	r3, [pc, #12]	; (8014448 <HAL_GetTick+0x14>)
 801443a:	681b      	ldr	r3, [r3, #0]
}
 801443c:	4618      	mov	r0, r3
 801443e:	46bd      	mov	sp, r7
 8014440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	20000dc8 	.word	0x20000dc8

0801444c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b084      	sub	sp, #16
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014454:	f7ff ffee 	bl	8014434 <HAL_GetTick>
 8014458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014464:	d005      	beq.n	8014472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014466:	4b0a      	ldr	r3, [pc, #40]	; (8014490 <HAL_Delay+0x44>)
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	461a      	mov	r2, r3
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	4413      	add	r3, r2
 8014470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014472:	bf00      	nop
 8014474:	f7ff ffde 	bl	8014434 <HAL_GetTick>
 8014478:	4602      	mov	r2, r0
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	429a      	cmp	r2, r3
 8014482:	d8f7      	bhi.n	8014474 <HAL_Delay+0x28>
  {
  }
}
 8014484:	bf00      	nop
 8014486:	bf00      	nop
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	20000654 	.word	0x20000654

08014494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b084      	sub	sp, #16
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d101      	bne.n	80144a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80144a2:	2301      	movs	r3, #1
 80144a4:	e11c      	b.n	80146e0 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d131      	bne.n	8014516 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	4a8c      	ldr	r2, [pc, #560]	; (80146e8 <HAL_CAN_Init+0x254>)
 80144b6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4a8c      	ldr	r2, [pc, #560]	; (80146ec <HAL_CAN_Init+0x258>)
 80144bc:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	4a8b      	ldr	r2, [pc, #556]	; (80146f0 <HAL_CAN_Init+0x25c>)
 80144c2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4a8b      	ldr	r2, [pc, #556]	; (80146f4 <HAL_CAN_Init+0x260>)
 80144c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4a8a      	ldr	r2, [pc, #552]	; (80146f8 <HAL_CAN_Init+0x264>)
 80144ce:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4a8a      	ldr	r2, [pc, #552]	; (80146fc <HAL_CAN_Init+0x268>)
 80144d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4a89      	ldr	r2, [pc, #548]	; (8014700 <HAL_CAN_Init+0x26c>)
 80144da:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	4a89      	ldr	r2, [pc, #548]	; (8014704 <HAL_CAN_Init+0x270>)
 80144e0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	4a88      	ldr	r2, [pc, #544]	; (8014708 <HAL_CAN_Init+0x274>)
 80144e6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	4a88      	ldr	r2, [pc, #544]	; (801470c <HAL_CAN_Init+0x278>)
 80144ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4a87      	ldr	r2, [pc, #540]	; (8014710 <HAL_CAN_Init+0x27c>)
 80144f2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	4a87      	ldr	r2, [pc, #540]	; (8014714 <HAL_CAN_Init+0x280>)
 80144f8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4a86      	ldr	r2, [pc, #536]	; (8014718 <HAL_CAN_Init+0x284>)
 80144fe:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014504:	2b00      	cmp	r3, #0
 8014506:	d102      	bne.n	801450e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4a84      	ldr	r2, [pc, #528]	; (801471c <HAL_CAN_Init+0x288>)
 801450c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f042 0201 	orr.w	r2, r2, #1
 8014524:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014526:	f7ff ff85 	bl	8014434 <HAL_GetTick>
 801452a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801452c:	e012      	b.n	8014554 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801452e:	f7ff ff81 	bl	8014434 <HAL_GetTick>
 8014532:	4602      	mov	r2, r0
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	1ad3      	subs	r3, r2, r3
 8014538:	2b0a      	cmp	r3, #10
 801453a:	d90b      	bls.n	8014554 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014540:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2205      	movs	r2, #5
 801454c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8014550:	2301      	movs	r3, #1
 8014552:	e0c5      	b.n	80146e0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	2b00      	cmp	r3, #0
 8014560:	d0e5      	beq.n	801452e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f022 0202 	bic.w	r2, r2, #2
 8014570:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014572:	f7ff ff5f 	bl	8014434 <HAL_GetTick>
 8014576:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8014578:	e012      	b.n	80145a0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801457a:	f7ff ff5b 	bl	8014434 <HAL_GetTick>
 801457e:	4602      	mov	r2, r0
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	2b0a      	cmp	r3, #10
 8014586:	d90b      	bls.n	80145a0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2205      	movs	r2, #5
 8014598:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801459c:	2301      	movs	r3, #1
 801459e:	e09f      	b.n	80146e0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	f003 0302 	and.w	r3, r3, #2
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d1e5      	bne.n	801457a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	7e1b      	ldrb	r3, [r3, #24]
 80145b2:	2b01      	cmp	r3, #1
 80145b4:	d108      	bne.n	80145c8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80145c4:	601a      	str	r2, [r3, #0]
 80145c6:	e007      	b.n	80145d8 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	681a      	ldr	r2, [r3, #0]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80145d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	7e5b      	ldrb	r3, [r3, #25]
 80145dc:	2b01      	cmp	r3, #1
 80145de:	d108      	bne.n	80145f2 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	e007      	b.n	8014602 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014600:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	7e9b      	ldrb	r3, [r3, #26]
 8014606:	2b01      	cmp	r3, #1
 8014608:	d108      	bne.n	801461c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	681a      	ldr	r2, [r3, #0]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f042 0220 	orr.w	r2, r2, #32
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	e007      	b.n	801462c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	f022 0220 	bic.w	r2, r2, #32
 801462a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	7edb      	ldrb	r3, [r3, #27]
 8014630:	2b01      	cmp	r3, #1
 8014632:	d108      	bne.n	8014646 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f022 0210 	bic.w	r2, r2, #16
 8014642:	601a      	str	r2, [r3, #0]
 8014644:	e007      	b.n	8014656 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f042 0210 	orr.w	r2, r2, #16
 8014654:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	7f1b      	ldrb	r3, [r3, #28]
 801465a:	2b01      	cmp	r3, #1
 801465c:	d108      	bne.n	8014670 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f042 0208 	orr.w	r2, r2, #8
 801466c:	601a      	str	r2, [r3, #0]
 801466e:	e007      	b.n	8014680 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f022 0208 	bic.w	r2, r2, #8
 801467e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	7f5b      	ldrb	r3, [r3, #29]
 8014684:	2b01      	cmp	r3, #1
 8014686:	d108      	bne.n	801469a <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f042 0204 	orr.w	r2, r2, #4
 8014696:	601a      	str	r2, [r3, #0]
 8014698:	e007      	b.n	80146aa <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f022 0204 	bic.w	r2, r2, #4
 80146a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	689a      	ldr	r2, [r3, #8]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	68db      	ldr	r3, [r3, #12]
 80146b2:	431a      	orrs	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	691b      	ldr	r3, [r3, #16]
 80146b8:	431a      	orrs	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	695b      	ldr	r3, [r3, #20]
 80146be:	ea42 0103 	orr.w	r1, r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	685b      	ldr	r3, [r3, #4]
 80146c6:	1e5a      	subs	r2, r3, #1
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	430a      	orrs	r2, r1
 80146ce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2200      	movs	r2, #0
 80146d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2201      	movs	r2, #1
 80146da:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80146de:	2300      	movs	r3, #0
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3710      	adds	r7, #16
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	080131b5 	.word	0x080131b5
 80146ec:	08015251 	.word	0x08015251
 80146f0:	080131cf 	.word	0x080131cf
 80146f4:	08015265 	.word	0x08015265
 80146f8:	0801328d 	.word	0x0801328d
 80146fc:	080132ad 	.word	0x080132ad
 8014700:	080132cd 	.word	0x080132cd
 8014704:	08015215 	.word	0x08015215
 8014708:	08015229 	.word	0x08015229
 801470c:	0801523d 	.word	0x0801523d
 8014710:	08015279 	.word	0x08015279
 8014714:	0801528d 	.word	0x0801528d
 8014718:	080152a1 	.word	0x080152a1
 801471c:	08013c05 	.word	0x08013c05

08014720 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8014720:	b480      	push	{r7}
 8014722:	b087      	sub	sp, #28
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014736:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8014738:	7cfb      	ldrb	r3, [r7, #19]
 801473a:	2b01      	cmp	r3, #1
 801473c:	d003      	beq.n	8014746 <HAL_CAN_ConfigFilter+0x26>
 801473e:	7cfb      	ldrb	r3, [r7, #19]
 8014740:	2b02      	cmp	r3, #2
 8014742:	f040 80be 	bne.w	80148c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8014746:	4b65      	ldr	r3, [pc, #404]	; (80148dc <HAL_CAN_ConfigFilter+0x1bc>)
 8014748:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014750:	f043 0201 	orr.w	r2, r3, #1
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014760:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014774:	021b      	lsls	r3, r3, #8
 8014776:	431a      	orrs	r2, r3
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	695b      	ldr	r3, [r3, #20]
 8014782:	f003 031f 	and.w	r3, r3, #31
 8014786:	2201      	movs	r2, #1
 8014788:	fa02 f303 	lsl.w	r3, r2, r3
 801478c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	43db      	mvns	r3, r3
 8014798:	401a      	ands	r2, r3
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	69db      	ldr	r3, [r3, #28]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d123      	bne.n	80147f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	43db      	mvns	r3, r3
 80147b2:	401a      	ands	r2, r3
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80147ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	3248      	adds	r2, #72	; 0x48
 80147d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	689b      	ldr	r3, [r3, #8]
 80147d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80147e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80147e6:	6979      	ldr	r1, [r7, #20]
 80147e8:	3348      	adds	r3, #72	; 0x48
 80147ea:	00db      	lsls	r3, r3, #3
 80147ec:	440b      	add	r3, r1
 80147ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	69db      	ldr	r3, [r3, #28]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d122      	bne.n	801483e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	431a      	orrs	r2, r3
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8014818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	3248      	adds	r2, #72	; 0x48
 801481e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	689b      	ldr	r3, [r3, #8]
 8014826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8014832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8014834:	6979      	ldr	r1, [r7, #20]
 8014836:	3348      	adds	r3, #72	; 0x48
 8014838:	00db      	lsls	r3, r3, #3
 801483a:	440b      	add	r3, r1
 801483c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	699b      	ldr	r3, [r3, #24]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d109      	bne.n	801485a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	43db      	mvns	r3, r3
 8014850:	401a      	ands	r2, r3
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8014858:	e007      	b.n	801486a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	431a      	orrs	r2, r3
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d109      	bne.n	8014886 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	43db      	mvns	r3, r3
 801487c:	401a      	ands	r2, r3
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8014884:	e007      	b.n	8014896 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	431a      	orrs	r2, r3
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	6a1b      	ldr	r3, [r3, #32]
 801489a:	2b01      	cmp	r3, #1
 801489c:	d107      	bne.n	80148ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	431a      	orrs	r2, r3
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80148b4:	f023 0201 	bic.w	r2, r3, #1
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	e006      	b.n	80148d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80148ce:	2301      	movs	r3, #1
  }
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	371c      	adds	r7, #28
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr
 80148dc:	40006400 	.word	0x40006400

080148e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d12e      	bne.n	8014952 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2202      	movs	r2, #2
 80148f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f022 0201 	bic.w	r2, r2, #1
 801490a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801490c:	f7ff fd92 	bl	8014434 <HAL_GetTick>
 8014910:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8014912:	e012      	b.n	801493a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014914:	f7ff fd8e 	bl	8014434 <HAL_GetTick>
 8014918:	4602      	mov	r2, r0
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	2b0a      	cmp	r3, #10
 8014920:	d90b      	bls.n	801493a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2205      	movs	r2, #5
 8014932:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8014936:	2301      	movs	r3, #1
 8014938:	e012      	b.n	8014960 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	685b      	ldr	r3, [r3, #4]
 8014940:	f003 0301 	and.w	r3, r3, #1
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1e5      	bne.n	8014914 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801494e:	2300      	movs	r3, #0
 8014950:	e006      	b.n	8014960 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014956:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801495e:	2301      	movs	r3, #1
  }
}
 8014960:	4618      	mov	r0, r3
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b02      	cmp	r3, #2
 801497a:	d133      	bne.n	80149e4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f042 0201 	orr.w	r2, r2, #1
 801498a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801498c:	f7ff fd52 	bl	8014434 <HAL_GetTick>
 8014990:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014992:	e012      	b.n	80149ba <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014994:	f7ff fd4e 	bl	8014434 <HAL_GetTick>
 8014998:	4602      	mov	r2, r0
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	1ad3      	subs	r3, r2, r3
 801499e:	2b0a      	cmp	r3, #10
 80149a0:	d90b      	bls.n	80149ba <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2205      	movs	r2, #5
 80149b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80149b6:	2301      	movs	r3, #1
 80149b8:	e01b      	b.n	80149f2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	f003 0301 	and.w	r3, r3, #1
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d0e5      	beq.n	8014994 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f022 0202 	bic.w	r2, r2, #2
 80149d6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2201      	movs	r2, #1
 80149dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80149e0:	2300      	movs	r3, #0
 80149e2:	e006      	b.n	80149f2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80149f0:	2301      	movs	r3, #1
  }
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}

080149fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80149fa:	b480      	push	{r7}
 80149fc:	b089      	sub	sp, #36	; 0x24
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	60f8      	str	r0, [r7, #12]
 8014a02:	60b9      	str	r1, [r7, #8]
 8014a04:	607a      	str	r2, [r7, #4]
 8014a06:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	689b      	ldr	r3, [r3, #8]
 8014a16:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8014a18:	7ffb      	ldrb	r3, [r7, #31]
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d003      	beq.n	8014a26 <HAL_CAN_AddTxMessage+0x2c>
 8014a1e:	7ffb      	ldrb	r3, [r7, #31]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	f040 80b8 	bne.w	8014b96 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10a      	bne.n	8014a46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d105      	bne.n	8014a46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8014a3a:	69bb      	ldr	r3, [r7, #24]
 8014a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 80a0 	beq.w	8014b86 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	0e1b      	lsrs	r3, r3, #24
 8014a4a:	f003 0303 	and.w	r3, r3, #3
 8014a4e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	2b02      	cmp	r3, #2
 8014a54:	d907      	bls.n	8014a66 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	e09e      	b.n	8014ba4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8014a66:	2201      	movs	r2, #1
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	409a      	lsls	r2, r3
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	689b      	ldr	r3, [r3, #8]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10d      	bne.n	8014a94 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8014a82:	68f9      	ldr	r1, [r7, #12]
 8014a84:	6809      	ldr	r1, [r1, #0]
 8014a86:	431a      	orrs	r2, r3
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	3318      	adds	r3, #24
 8014a8c:	011b      	lsls	r3, r3, #4
 8014a8e:	440b      	add	r3, r1
 8014a90:	601a      	str	r2, [r3, #0]
 8014a92:	e00f      	b.n	8014ab4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014a9e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014aa4:	68f9      	ldr	r1, [r7, #12]
 8014aa6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8014aa8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	3318      	adds	r3, #24
 8014aae:	011b      	lsls	r3, r3, #4
 8014ab0:	440b      	add	r3, r1
 8014ab2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	6819      	ldr	r1, [r3, #0]
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	691a      	ldr	r2, [r3, #16]
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	3318      	adds	r3, #24
 8014ac0:	011b      	lsls	r3, r3, #4
 8014ac2:	440b      	add	r3, r1
 8014ac4:	3304      	adds	r3, #4
 8014ac6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	7d1b      	ldrb	r3, [r3, #20]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d111      	bne.n	8014af4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	3318      	adds	r3, #24
 8014ad8:	011b      	lsls	r3, r3, #4
 8014ada:	4413      	add	r3, r2
 8014adc:	3304      	adds	r3, #4
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	68fa      	ldr	r2, [r7, #12]
 8014ae2:	6811      	ldr	r1, [r2, #0]
 8014ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	3318      	adds	r3, #24
 8014aec:	011b      	lsls	r3, r3, #4
 8014aee:	440b      	add	r3, r1
 8014af0:	3304      	adds	r3, #4
 8014af2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	3307      	adds	r3, #7
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	061a      	lsls	r2, r3, #24
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	3306      	adds	r3, #6
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	041b      	lsls	r3, r3, #16
 8014b04:	431a      	orrs	r2, r3
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3305      	adds	r3, #5
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	021b      	lsls	r3, r3, #8
 8014b0e:	4313      	orrs	r3, r2
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	3204      	adds	r2, #4
 8014b14:	7812      	ldrb	r2, [r2, #0]
 8014b16:	4610      	mov	r0, r2
 8014b18:	68fa      	ldr	r2, [r7, #12]
 8014b1a:	6811      	ldr	r1, [r2, #0]
 8014b1c:	ea43 0200 	orr.w	r2, r3, r0
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	011b      	lsls	r3, r3, #4
 8014b24:	440b      	add	r3, r1
 8014b26:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014b2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3303      	adds	r3, #3
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	061a      	lsls	r2, r3, #24
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	3302      	adds	r3, #2
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	041b      	lsls	r3, r3, #16
 8014b3c:	431a      	orrs	r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	3301      	adds	r3, #1
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	021b      	lsls	r3, r3, #8
 8014b46:	4313      	orrs	r3, r2
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	7812      	ldrb	r2, [r2, #0]
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	6811      	ldr	r1, [r2, #0]
 8014b52:	ea43 0200 	orr.w	r2, r3, r0
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	011b      	lsls	r3, r3, #4
 8014b5a:	440b      	add	r3, r1
 8014b5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8014b60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	3318      	adds	r3, #24
 8014b6a:	011b      	lsls	r3, r3, #4
 8014b6c:	4413      	add	r3, r2
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	6811      	ldr	r1, [r2, #0]
 8014b74:	f043 0201 	orr.w	r2, r3, #1
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	3318      	adds	r3, #24
 8014b7c:	011b      	lsls	r3, r3, #4
 8014b7e:	440b      	add	r3, r1
 8014b80:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	e00e      	b.n	8014ba4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8014b92:	2301      	movs	r3, #1
 8014b94:	e006      	b.n	8014ba4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014ba2:	2301      	movs	r3, #1
  }
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3724      	adds	r7, #36	; 0x24
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr

08014bb0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8014bb0:	b480      	push	{r7}
 8014bb2:	b085      	sub	sp, #20
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bc2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8014bc4:	7afb      	ldrb	r3, [r7, #11]
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d002      	beq.n	8014bd0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8014bca:	7afb      	ldrb	r3, [r7, #11]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d11d      	bne.n	8014c0c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	3301      	adds	r3, #1
 8014be2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d002      	beq.n	8014bf8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	689b      	ldr	r3, [r3, #8]
 8014bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d002      	beq.n	8014c0c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3714      	adds	r7, #20
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr

08014c1a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8014c1a:	b480      	push	{r7}
 8014c1c:	b087      	sub	sp, #28
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	60f8      	str	r0, [r7, #12]
 8014c22:	60b9      	str	r1, [r7, #8]
 8014c24:	607a      	str	r2, [r7, #4]
 8014c26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8014c30:	7dfb      	ldrb	r3, [r7, #23]
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d003      	beq.n	8014c3e <HAL_CAN_GetRxMessage+0x24>
 8014c36:	7dfb      	ldrb	r3, [r7, #23]
 8014c38:	2b02      	cmp	r3, #2
 8014c3a:	f040 80f3 	bne.w	8014e24 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d10e      	bne.n	8014c62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	f003 0303 	and.w	r3, r3, #3
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d116      	bne.n	8014c80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014c5e:	2301      	movs	r3, #1
 8014c60:	e0e7      	b.n	8014e32 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	691b      	ldr	r3, [r3, #16]
 8014c68:	f003 0303 	and.w	r3, r3, #3
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d107      	bne.n	8014c80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e0d8      	b.n	8014e32 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	331b      	adds	r3, #27
 8014c88:	011b      	lsls	r3, r3, #4
 8014c8a:	4413      	add	r3, r2
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f003 0204 	and.w	r2, r3, #4
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	689b      	ldr	r3, [r3, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d10c      	bne.n	8014cb8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	331b      	adds	r3, #27
 8014ca6:	011b      	lsls	r3, r3, #4
 8014ca8:	4413      	add	r3, r2
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	0d5b      	lsrs	r3, r3, #21
 8014cae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	601a      	str	r2, [r3, #0]
 8014cb6:	e00b      	b.n	8014cd0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681a      	ldr	r2, [r3, #0]
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	331b      	adds	r3, #27
 8014cc0:	011b      	lsls	r3, r3, #4
 8014cc2:	4413      	add	r3, r2
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	08db      	lsrs	r3, r3, #3
 8014cc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	331b      	adds	r3, #27
 8014cd8:	011b      	lsls	r3, r3, #4
 8014cda:	4413      	add	r3, r2
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	f003 0202 	and.w	r2, r3, #2
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	331b      	adds	r3, #27
 8014cee:	011b      	lsls	r3, r3, #4
 8014cf0:	4413      	add	r3, r2
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f003 020f 	and.w	r2, r3, #15
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	331b      	adds	r3, #27
 8014d06:	011b      	lsls	r3, r3, #4
 8014d08:	4413      	add	r3, r2
 8014d0a:	3304      	adds	r3, #4
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	0a1b      	lsrs	r3, r3, #8
 8014d10:	b2da      	uxtb	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681a      	ldr	r2, [r3, #0]
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	331b      	adds	r3, #27
 8014d1e:	011b      	lsls	r3, r3, #4
 8014d20:	4413      	add	r3, r2
 8014d22:	3304      	adds	r3, #4
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	0c1b      	lsrs	r3, r3, #16
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	011b      	lsls	r3, r3, #4
 8014d36:	4413      	add	r3, r2
 8014d38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	b2da      	uxtb	r2, r3
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681a      	ldr	r2, [r3, #0]
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	011b      	lsls	r3, r3, #4
 8014d4c:	4413      	add	r3, r2
 8014d4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	0a1a      	lsrs	r2, r3, #8
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	3301      	adds	r3, #1
 8014d5a:	b2d2      	uxtb	r2, r2
 8014d5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	011b      	lsls	r3, r3, #4
 8014d66:	4413      	add	r3, r2
 8014d68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	0c1a      	lsrs	r2, r3, #16
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	3302      	adds	r3, #2
 8014d74:	b2d2      	uxtb	r2, r2
 8014d76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	011b      	lsls	r3, r3, #4
 8014d80:	4413      	add	r3, r2
 8014d82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	0e1a      	lsrs	r2, r3, #24
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	3303      	adds	r3, #3
 8014d8e:	b2d2      	uxtb	r2, r2
 8014d90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	011b      	lsls	r3, r3, #4
 8014d9a:	4413      	add	r3, r2
 8014d9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	3304      	adds	r3, #4
 8014da6:	b2d2      	uxtb	r2, r2
 8014da8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	011b      	lsls	r3, r3, #4
 8014db2:	4413      	add	r3, r2
 8014db4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	0a1a      	lsrs	r2, r3, #8
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	3305      	adds	r3, #5
 8014dc0:	b2d2      	uxtb	r2, r2
 8014dc2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	011b      	lsls	r3, r3, #4
 8014dcc:	4413      	add	r3, r2
 8014dce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	0c1a      	lsrs	r2, r3, #16
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	3306      	adds	r3, #6
 8014dda:	b2d2      	uxtb	r2, r2
 8014ddc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	011b      	lsls	r3, r3, #4
 8014de6:	4413      	add	r3, r2
 8014de8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	0e1a      	lsrs	r2, r3, #24
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	3307      	adds	r3, #7
 8014df4:	b2d2      	uxtb	r2, r2
 8014df6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d108      	bne.n	8014e10 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	68da      	ldr	r2, [r3, #12]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f042 0220 	orr.w	r2, r2, #32
 8014e0c:	60da      	str	r2, [r3, #12]
 8014e0e:	e007      	b.n	8014e20 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	691a      	ldr	r2, [r3, #16]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f042 0220 	orr.w	r2, r2, #32
 8014e1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8014e20:	2300      	movs	r3, #0
 8014e22:	e006      	b.n	8014e32 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014e30:	2301      	movs	r3, #1
  }
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	371c      	adds	r7, #28
 8014e36:	46bd      	mov	sp, r7
 8014e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3c:	4770      	bx	lr

08014e3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8014e3e:	b480      	push	{r7}
 8014e40:	b085      	sub	sp, #20
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	6078      	str	r0, [r7, #4]
 8014e46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8014e50:	7bfb      	ldrb	r3, [r7, #15]
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d002      	beq.n	8014e5c <HAL_CAN_ActivateNotification+0x1e>
 8014e56:	7bfb      	ldrb	r3, [r7, #15]
 8014e58:	2b02      	cmp	r3, #2
 8014e5a:	d109      	bne.n	8014e70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	6959      	ldr	r1, [r3, #20]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	430a      	orrs	r2, r1
 8014e6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e006      	b.n	8014e7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014e7c:	2301      	movs	r3, #1
  }
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3714      	adds	r7, #20
 8014e82:	46bd      	mov	sp, r7
 8014e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e88:	4770      	bx	lr

08014e8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8014e8a:	b580      	push	{r7, lr}
 8014e8c:	b08a      	sub	sp, #40	; 0x28
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8014e92:	2300      	movs	r3, #0
 8014e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	695b      	ldr	r3, [r3, #20]
 8014e9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);   /* CAN transmit status register,  Address offset: 0x08 */
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	691b      	ldr	r3, [r3, #16]
 8014ebc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	699b      	ldr	r3, [r3, #24]
 8014ec4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8014ec6:	6a3b      	ldr	r3, [r7, #32]
 8014ec8:	f003 0301 	and.w	r3, r3, #1
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f000 8083 	beq.w	8014fd8 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)  /*CAN transmit status register  | Request Completed Mailbox0 */
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	f003 0301 	and.w	r3, r3, #1
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d025      	beq.n	8014f28 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)   /*CAN transmit status register  |  Transmission OK of Mailbox0 */ 
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	f003 0302 	and.w	r3, r3, #2
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d004      	beq.n	8014ef8 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	4798      	blx	r3
 8014ef6:	e017      	b.n	8014f28 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)       /*CAN transmit status register  |   Arbitration Lost for Mailbox0 */
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	f003 0304 	and.w	r3, r3, #4
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d004      	beq.n	8014f0c <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8014f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014f08:	627b      	str	r3, [r7, #36]	; 0x24
 8014f0a:	e00d      	b.n	8014f28 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)   /*CAN transmit status register  |  Transmission Error of Mailbox0 */
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	f003 0308 	and.w	r3, r3, #8
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d004      	beq.n	8014f20 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8014f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8014f1e:	e003      	b.n	8014f28 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d026      	beq.n	8014f80 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d004      	beq.n	8014f50 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	4798      	blx	r3
 8014f4e:	e017      	b.n	8014f80 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d004      	beq.n	8014f64 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014f60:	627b      	str	r3, [r7, #36]	; 0x24
 8014f62:	e00d      	b.n	8014f80 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d004      	beq.n	8014f78 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8014f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014f74:	627b      	str	r3, [r7, #36]	; 0x24
 8014f76:	e003      	b.n	8014f80 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d026      	beq.n	8014fd8 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014f92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d004      	beq.n	8014fa8 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	4798      	blx	r3
 8014fa6:	e017      	b.n	8014fd8 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d004      	beq.n	8014fbc <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8014fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8014fba:	e00d      	b.n	8014fd8 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d004      	beq.n	8014fd0 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8014fce:	e003      	b.n	8014fd8 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	f003 0308 	and.w	r3, r3, #8
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d00c      	beq.n	8014ffc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	f003 0310 	and.w	r3, r3, #16
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d007      	beq.n	8014ffc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8014fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014ff2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2210      	movs	r2, #16
 8014ffa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8014ffc:	6a3b      	ldr	r3, [r7, #32]
 8014ffe:	f003 0304 	and.w	r3, r3, #4
 8015002:	2b00      	cmp	r3, #0
 8015004:	d00c      	beq.n	8015020 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	f003 0308 	and.w	r3, r3, #8
 801500c:	2b00      	cmp	r3, #0
 801500e:	d007      	beq.n	8015020 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2208      	movs	r2, #8
 8015016:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8015020:	6a3b      	ldr	r3, [r7, #32]
 8015022:	f003 0302 	and.w	r3, r3, #2
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00a      	beq.n	8015040 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	f003 0303 	and.w	r3, r3, #3
 8015034:	2b00      	cmp	r3, #0
 8015036:	d003      	beq.n	8015040 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8015040:	6a3b      	ldr	r3, [r7, #32]
 8015042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015046:	2b00      	cmp	r3, #0
 8015048:	d00c      	beq.n	8015064 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	f003 0310 	and.w	r3, r3, #16
 8015050:	2b00      	cmp	r3, #0
 8015052:	d007      	beq.n	8015064 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801505a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2210      	movs	r2, #16
 8015062:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	f003 0320 	and.w	r3, r3, #32
 801506a:	2b00      	cmp	r3, #0
 801506c:	d00c      	beq.n	8015088 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	f003 0308 	and.w	r3, r3, #8
 8015074:	2b00      	cmp	r3, #0
 8015076:	d007      	beq.n	8015088 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2208      	movs	r2, #8
 801507e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8015088:	6a3b      	ldr	r3, [r7, #32]
 801508a:	f003 0310 	and.w	r3, r3, #16
 801508e:	2b00      	cmp	r3, #0
 8015090:	d00a      	beq.n	80150a8 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	691b      	ldr	r3, [r3, #16]
 8015098:	f003 0303 	and.w	r3, r3, #3
 801509c:	2b00      	cmp	r3, #0
 801509e:	d003      	beq.n	80150a8 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80150a8:	6a3b      	ldr	r3, [r7, #32]
 80150aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d00c      	beq.n	80150cc <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	f003 0310 	and.w	r3, r3, #16
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d007      	beq.n	80150cc <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2210      	movs	r2, #16
 80150c2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80150cc:	6a3b      	ldr	r3, [r7, #32]
 80150ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d00c      	beq.n	80150f0 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	f003 0308 	and.w	r3, r3, #8
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d007      	beq.n	80150f0 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2208      	movs	r2, #8
 80150e6:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80150f0:	6a3b      	ldr	r3, [r7, #32]
 80150f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d07b      	beq.n	80151f2 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	f003 0304 	and.w	r3, r3, #4
 8015100:	2b00      	cmp	r3, #0
 8015102:	d072      	beq.n	80151ea <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015104:	6a3b      	ldr	r3, [r7, #32]
 8015106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801510a:	2b00      	cmp	r3, #0
 801510c:	d008      	beq.n	8015120 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015114:	2b00      	cmp	r3, #0
 8015116:	d003      	beq.n	8015120 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	f043 0301 	orr.w	r3, r3, #1
 801511e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015120:	6a3b      	ldr	r3, [r7, #32]
 8015122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015126:	2b00      	cmp	r3, #0
 8015128:	d008      	beq.n	801513c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015130:	2b00      	cmp	r3, #0
 8015132:	d003      	beq.n	801513c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8015134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015136:	f043 0302 	orr.w	r3, r3, #2
 801513a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801513c:	6a3b      	ldr	r3, [r7, #32]
 801513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015142:	2b00      	cmp	r3, #0
 8015144:	d008      	beq.n	8015158 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801514c:	2b00      	cmp	r3, #0
 801514e:	d003      	beq.n	8015158 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8015150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015152:	f043 0304 	orr.w	r3, r3, #4
 8015156:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015158:	6a3b      	ldr	r3, [r7, #32]
 801515a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801515e:	2b00      	cmp	r3, #0
 8015160:	d043      	beq.n	80151ea <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015168:	2b00      	cmp	r3, #0
 801516a:	d03e      	beq.n	80151ea <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015172:	2b60      	cmp	r3, #96	; 0x60
 8015174:	d02b      	beq.n	80151ce <HAL_CAN_IRQHandler+0x344>
 8015176:	2b60      	cmp	r3, #96	; 0x60
 8015178:	d82e      	bhi.n	80151d8 <HAL_CAN_IRQHandler+0x34e>
 801517a:	2b50      	cmp	r3, #80	; 0x50
 801517c:	d022      	beq.n	80151c4 <HAL_CAN_IRQHandler+0x33a>
 801517e:	2b50      	cmp	r3, #80	; 0x50
 8015180:	d82a      	bhi.n	80151d8 <HAL_CAN_IRQHandler+0x34e>
 8015182:	2b40      	cmp	r3, #64	; 0x40
 8015184:	d019      	beq.n	80151ba <HAL_CAN_IRQHandler+0x330>
 8015186:	2b40      	cmp	r3, #64	; 0x40
 8015188:	d826      	bhi.n	80151d8 <HAL_CAN_IRQHandler+0x34e>
 801518a:	2b30      	cmp	r3, #48	; 0x30
 801518c:	d010      	beq.n	80151b0 <HAL_CAN_IRQHandler+0x326>
 801518e:	2b30      	cmp	r3, #48	; 0x30
 8015190:	d822      	bhi.n	80151d8 <HAL_CAN_IRQHandler+0x34e>
 8015192:	2b10      	cmp	r3, #16
 8015194:	d002      	beq.n	801519c <HAL_CAN_IRQHandler+0x312>
 8015196:	2b20      	cmp	r3, #32
 8015198:	d005      	beq.n	80151a6 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801519a:	e01d      	b.n	80151d8 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801519e:	f043 0308 	orr.w	r3, r3, #8
 80151a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151a4:	e019      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80151a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a8:	f043 0310 	orr.w	r3, r3, #16
 80151ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151ae:	e014      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	f043 0320 	orr.w	r3, r3, #32
 80151b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151b8:	e00f      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151c2:	e00a      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151cc:	e005      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80151d6:	e000      	b.n	80151da <HAL_CAN_IRQHandler+0x350>
            break;
 80151d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	699a      	ldr	r2, [r3, #24]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80151e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2204      	movs	r2, #4
 80151f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d009      	beq.n	801520c <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fe:	431a      	orrs	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801520c:	bf00      	nop
 801520e:	3728      	adds	r7, #40	; 0x28
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}

08015214 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015214:	b480      	push	{r7}
 8015216:	b083      	sub	sp, #12
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801521c:	bf00      	nop
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8015230:	bf00      	nop
 8015232:	370c      	adds	r7, #12
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr

0801523c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8015244:	bf00      	nop
 8015246:	370c      	adds	r7, #12
 8015248:	46bd      	mov	sp, r7
 801524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524e:	4770      	bx	lr

08015250 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8015250:	b480      	push	{r7}
 8015252:	b083      	sub	sp, #12
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8015258:	bf00      	nop
 801525a:	370c      	adds	r7, #12
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr

08015264 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801526c:	bf00      	nop
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr

08015278 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8015280:	bf00      	nop
 8015282:	370c      	adds	r7, #12
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr

0801528c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8015294:	bf00      	nop
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80152a8:	bf00      	nop
 80152aa:	370c      	adds	r7, #12
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b085      	sub	sp, #20
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f003 0307 	and.w	r3, r3, #7
 80152c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80152c4:	4b0c      	ldr	r3, [pc, #48]	; (80152f8 <__NVIC_SetPriorityGrouping+0x44>)
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80152d0:	4013      	ands	r3, r2
 80152d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80152dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80152e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80152e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80152e6:	4a04      	ldr	r2, [pc, #16]	; (80152f8 <__NVIC_SetPriorityGrouping+0x44>)
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	60d3      	str	r3, [r2, #12]
}
 80152ec:	bf00      	nop
 80152ee:	3714      	adds	r7, #20
 80152f0:	46bd      	mov	sp, r7
 80152f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f6:	4770      	bx	lr
 80152f8:	e000ed00 	.word	0xe000ed00

080152fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80152fc:	b480      	push	{r7}
 80152fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015300:	4b04      	ldr	r3, [pc, #16]	; (8015314 <__NVIC_GetPriorityGrouping+0x18>)
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	0a1b      	lsrs	r3, r3, #8
 8015306:	f003 0307 	and.w	r3, r3, #7
}
 801530a:	4618      	mov	r0, r3
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr
 8015314:	e000ed00 	.word	0xe000ed00

08015318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015326:	2b00      	cmp	r3, #0
 8015328:	db0b      	blt.n	8015342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801532a:	79fb      	ldrb	r3, [r7, #7]
 801532c:	f003 021f 	and.w	r2, r3, #31
 8015330:	4907      	ldr	r1, [pc, #28]	; (8015350 <__NVIC_EnableIRQ+0x38>)
 8015332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015336:	095b      	lsrs	r3, r3, #5
 8015338:	2001      	movs	r0, #1
 801533a:	fa00 f202 	lsl.w	r2, r0, r2
 801533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015342:	bf00      	nop
 8015344:	370c      	adds	r7, #12
 8015346:	46bd      	mov	sp, r7
 8015348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop
 8015350:	e000e100 	.word	0xe000e100

08015354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015354:	b480      	push	{r7}
 8015356:	b083      	sub	sp, #12
 8015358:	af00      	add	r7, sp, #0
 801535a:	4603      	mov	r3, r0
 801535c:	6039      	str	r1, [r7, #0]
 801535e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015364:	2b00      	cmp	r3, #0
 8015366:	db0a      	blt.n	801537e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	b2da      	uxtb	r2, r3
 801536c:	490c      	ldr	r1, [pc, #48]	; (80153a0 <__NVIC_SetPriority+0x4c>)
 801536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015372:	0112      	lsls	r2, r2, #4
 8015374:	b2d2      	uxtb	r2, r2
 8015376:	440b      	add	r3, r1
 8015378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801537c:	e00a      	b.n	8015394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	b2da      	uxtb	r2, r3
 8015382:	4908      	ldr	r1, [pc, #32]	; (80153a4 <__NVIC_SetPriority+0x50>)
 8015384:	79fb      	ldrb	r3, [r7, #7]
 8015386:	f003 030f 	and.w	r3, r3, #15
 801538a:	3b04      	subs	r3, #4
 801538c:	0112      	lsls	r2, r2, #4
 801538e:	b2d2      	uxtb	r2, r2
 8015390:	440b      	add	r3, r1
 8015392:	761a      	strb	r2, [r3, #24]
}
 8015394:	bf00      	nop
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr
 80153a0:	e000e100 	.word	0xe000e100
 80153a4:	e000ed00 	.word	0xe000ed00

080153a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b089      	sub	sp, #36	; 0x24
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	60f8      	str	r0, [r7, #12]
 80153b0:	60b9      	str	r1, [r7, #8]
 80153b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f003 0307 	and.w	r3, r3, #7
 80153ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	f1c3 0307 	rsb	r3, r3, #7
 80153c2:	2b04      	cmp	r3, #4
 80153c4:	bf28      	it	cs
 80153c6:	2304      	movcs	r3, #4
 80153c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	3304      	adds	r3, #4
 80153ce:	2b06      	cmp	r3, #6
 80153d0:	d902      	bls.n	80153d8 <NVIC_EncodePriority+0x30>
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	3b03      	subs	r3, #3
 80153d6:	e000      	b.n	80153da <NVIC_EncodePriority+0x32>
 80153d8:	2300      	movs	r3, #0
 80153da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80153dc:	f04f 32ff 	mov.w	r2, #4294967295
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	fa02 f303 	lsl.w	r3, r2, r3
 80153e6:	43da      	mvns	r2, r3
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	401a      	ands	r2, r3
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80153f0:	f04f 31ff 	mov.w	r1, #4294967295
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	fa01 f303 	lsl.w	r3, r1, r3
 80153fa:	43d9      	mvns	r1, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015400:	4313      	orrs	r3, r2
         );
}
 8015402:	4618      	mov	r0, r3
 8015404:	3724      	adds	r7, #36	; 0x24
 8015406:	46bd      	mov	sp, r7
 8015408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540c:	4770      	bx	lr
	...

08015410 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015410:	b480      	push	{r7}
 8015412:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015414:	f3bf 8f4f 	dsb	sy
}
 8015418:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801541a:	4b06      	ldr	r3, [pc, #24]	; (8015434 <__NVIC_SystemReset+0x24>)
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015422:	4904      	ldr	r1, [pc, #16]	; (8015434 <__NVIC_SystemReset+0x24>)
 8015424:	4b04      	ldr	r3, [pc, #16]	; (8015438 <__NVIC_SystemReset+0x28>)
 8015426:	4313      	orrs	r3, r2
 8015428:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801542a:	f3bf 8f4f 	dsb	sy
}
 801542e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015430:	bf00      	nop
 8015432:	e7fd      	b.n	8015430 <__NVIC_SystemReset+0x20>
 8015434:	e000ed00 	.word	0xe000ed00
 8015438:	05fa0004 	.word	0x05fa0004

0801543c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	3b01      	subs	r3, #1
 8015448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801544c:	d301      	bcc.n	8015452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801544e:	2301      	movs	r3, #1
 8015450:	e00f      	b.n	8015472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015452:	4a0a      	ldr	r2, [pc, #40]	; (801547c <SysTick_Config+0x40>)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	3b01      	subs	r3, #1
 8015458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801545a:	210f      	movs	r1, #15
 801545c:	f04f 30ff 	mov.w	r0, #4294967295
 8015460:	f7ff ff78 	bl	8015354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015464:	4b05      	ldr	r3, [pc, #20]	; (801547c <SysTick_Config+0x40>)
 8015466:	2200      	movs	r2, #0
 8015468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801546a:	4b04      	ldr	r3, [pc, #16]	; (801547c <SysTick_Config+0x40>)
 801546c:	2207      	movs	r2, #7
 801546e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	e000e010 	.word	0xe000e010

08015480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7ff ff13 	bl	80152b4 <__NVIC_SetPriorityGrouping>
}
 801548e:	bf00      	nop
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}

08015496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015496:	b580      	push	{r7, lr}
 8015498:	b086      	sub	sp, #24
 801549a:	af00      	add	r7, sp, #0
 801549c:	4603      	mov	r3, r0
 801549e:	60b9      	str	r1, [r7, #8]
 80154a0:	607a      	str	r2, [r7, #4]
 80154a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80154a4:	2300      	movs	r3, #0
 80154a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80154a8:	f7ff ff28 	bl	80152fc <__NVIC_GetPriorityGrouping>
 80154ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80154ae:	687a      	ldr	r2, [r7, #4]
 80154b0:	68b9      	ldr	r1, [r7, #8]
 80154b2:	6978      	ldr	r0, [r7, #20]
 80154b4:	f7ff ff78 	bl	80153a8 <NVIC_EncodePriority>
 80154b8:	4602      	mov	r2, r0
 80154ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154be:	4611      	mov	r1, r2
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7ff ff47 	bl	8015354 <__NVIC_SetPriority>
}
 80154c6:	bf00      	nop
 80154c8:	3718      	adds	r7, #24
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}

080154ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b082      	sub	sp, #8
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	4603      	mov	r3, r0
 80154d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80154d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff ff1b 	bl	8015318 <__NVIC_EnableIRQ>
}
 80154e2:	bf00      	nop
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80154ee:	f7ff ff8f 	bl	8015410 <__NVIC_SystemReset>

080154f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b082      	sub	sp, #8
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f7ff ff9e 	bl	801543c <SysTick_Config>
 8015500:	4603      	mov	r3, r0
}
 8015502:	4618      	mov	r0, r3
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
	...

0801550c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b086      	sub	sp, #24
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015514:	2300      	movs	r3, #0
 8015516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015518:	f7fe ff8c 	bl	8014434 <HAL_GetTick>
 801551c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d101      	bne.n	8015528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015524:	2301      	movs	r3, #1
 8015526:	e099      	b.n	801565c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2202      	movs	r2, #2
 801552c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	f022 0201 	bic.w	r2, r2, #1
 8015546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015548:	e00f      	b.n	801556a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801554a:	f7fe ff73 	bl	8014434 <HAL_GetTick>
 801554e:	4602      	mov	r2, r0
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	1ad3      	subs	r3, r2, r3
 8015554:	2b05      	cmp	r3, #5
 8015556:	d908      	bls.n	801556a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2220      	movs	r2, #32
 801555c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2203      	movs	r2, #3
 8015562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8015566:	2303      	movs	r3, #3
 8015568:	e078      	b.n	801565c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	f003 0301 	and.w	r3, r3, #1
 8015574:	2b00      	cmp	r3, #0
 8015576:	d1e8      	bne.n	801554a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015580:	697a      	ldr	r2, [r7, #20]
 8015582:	4b38      	ldr	r3, [pc, #224]	; (8015664 <HAL_DMA_Init+0x158>)
 8015584:	4013      	ands	r3, r2
 8015586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	685a      	ldr	r2, [r3, #4]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	689b      	ldr	r3, [r3, #8]
 8015590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	691b      	ldr	r3, [r3, #16]
 801559c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80155a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	699b      	ldr	r3, [r3, #24]
 80155a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80155ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6a1b      	ldr	r3, [r3, #32]
 80155b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80155b6:	697a      	ldr	r2, [r7, #20]
 80155b8:	4313      	orrs	r3, r2
 80155ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155c0:	2b04      	cmp	r3, #4
 80155c2:	d107      	bne.n	80155d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155cc:	4313      	orrs	r3, r2
 80155ce:	697a      	ldr	r2, [r7, #20]
 80155d0:	4313      	orrs	r3, r2
 80155d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	697a      	ldr	r2, [r7, #20]
 80155da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	695b      	ldr	r3, [r3, #20]
 80155e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	f023 0307 	bic.w	r3, r3, #7
 80155ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155f0:	697a      	ldr	r2, [r7, #20]
 80155f2:	4313      	orrs	r3, r2
 80155f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155fa:	2b04      	cmp	r3, #4
 80155fc:	d117      	bne.n	801562e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015602:	697a      	ldr	r2, [r7, #20]
 8015604:	4313      	orrs	r3, r2
 8015606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00e      	beq.n	801562e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f000 fb01 	bl	8015c18 <DMA_CheckFifoParam>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d008      	beq.n	801562e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2240      	movs	r2, #64	; 0x40
 8015620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2201      	movs	r2, #1
 8015626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801562a:	2301      	movs	r3, #1
 801562c:	e016      	b.n	801565c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	697a      	ldr	r2, [r7, #20]
 8015634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f000 fab8 	bl	8015bac <DMA_CalcBaseAndBitshift>
 801563c:	4603      	mov	r3, r0
 801563e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015644:	223f      	movs	r2, #63	; 0x3f
 8015646:	409a      	lsls	r2, r3
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2200      	movs	r2, #0
 8015650:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2201      	movs	r2, #1
 8015656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801565a:	2300      	movs	r3, #0
}
 801565c:	4618      	mov	r0, r3
 801565e:	3718      	adds	r7, #24
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	f010803f 	.word	0xf010803f

08015668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015676:	2300      	movs	r3, #0
 8015678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801567e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015686:	2b01      	cmp	r3, #1
 8015688:	d101      	bne.n	801568e <HAL_DMA_Start_IT+0x26>
 801568a:	2302      	movs	r3, #2
 801568c:	e040      	b.n	8015710 <HAL_DMA_Start_IT+0xa8>
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2201      	movs	r2, #1
 8015692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b01      	cmp	r3, #1
 80156a0:	d12f      	bne.n	8015702 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2202      	movs	r2, #2
 80156a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	2200      	movs	r2, #0
 80156ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	687a      	ldr	r2, [r7, #4]
 80156b4:	68b9      	ldr	r1, [r7, #8]
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f000 fa4a 	bl	8015b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80156c0:	223f      	movs	r2, #63	; 0x3f
 80156c2:	409a      	lsls	r2, r3
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f042 0216 	orr.w	r2, r2, #22
 80156d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d007      	beq.n	80156f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f042 0208 	orr.w	r2, r2, #8
 80156ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	681a      	ldr	r2, [r3, #0]
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f042 0201 	orr.w	r2, r2, #1
 80156fe:	601a      	str	r2, [r3, #0]
 8015700:	e005      	b.n	801570e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2200      	movs	r2, #0
 8015706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801570a:	2302      	movs	r3, #2
 801570c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801570e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015710:	4618      	mov	r0, r3
 8015712:	3718      	adds	r7, #24
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}

08015718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015724:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015726:	f7fe fe85 	bl	8014434 <HAL_GetTick>
 801572a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015732:	b2db      	uxtb	r3, r3
 8015734:	2b02      	cmp	r3, #2
 8015736:	d008      	beq.n	801574a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2280      	movs	r2, #128	; 0x80
 801573c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015746:	2301      	movs	r3, #1
 8015748:	e052      	b.n	80157f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f022 0216 	bic.w	r2, r2, #22
 8015758:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	695a      	ldr	r2, [r3, #20]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015768:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801576e:	2b00      	cmp	r3, #0
 8015770:	d103      	bne.n	801577a <HAL_DMA_Abort+0x62>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015776:	2b00      	cmp	r3, #0
 8015778:	d007      	beq.n	801578a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f022 0208 	bic.w	r2, r2, #8
 8015788:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f022 0201 	bic.w	r2, r2, #1
 8015798:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801579a:	e013      	b.n	80157c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801579c:	f7fe fe4a 	bl	8014434 <HAL_GetTick>
 80157a0:	4602      	mov	r2, r0
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	1ad3      	subs	r3, r2, r3
 80157a6:	2b05      	cmp	r3, #5
 80157a8:	d90c      	bls.n	80157c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2220      	movs	r2, #32
 80157ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2203      	movs	r2, #3
 80157b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2200      	movs	r2, #0
 80157bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80157c0:	2303      	movs	r3, #3
 80157c2:	e015      	b.n	80157f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	f003 0301 	and.w	r3, r3, #1
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1e4      	bne.n	801579c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157d6:	223f      	movs	r2, #63	; 0x3f
 80157d8:	409a      	lsls	r2, r3
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2201      	movs	r2, #1
 80157e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2200      	movs	r2, #0
 80157ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80157ee:	2300      	movs	r3, #0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3710      	adds	r7, #16
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b083      	sub	sp, #12
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b02      	cmp	r3, #2
 801580a:	d004      	beq.n	8015816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2280      	movs	r2, #128	; 0x80
 8015810:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	e00c      	b.n	8015830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2205      	movs	r2, #5
 801581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	f022 0201 	bic.w	r2, r2, #1
 801582c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801582e:	2300      	movs	r3, #0
}
 8015830:	4618      	mov	r0, r3
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583a:	4770      	bx	lr

0801583c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b086      	sub	sp, #24
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8015844:	2300      	movs	r3, #0
 8015846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015848:	4b8e      	ldr	r3, [pc, #568]	; (8015a84 <HAL_DMA_IRQHandler+0x248>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	4a8e      	ldr	r2, [pc, #568]	; (8015a88 <HAL_DMA_IRQHandler+0x24c>)
 801584e:	fba2 2303 	umull	r2, r3, r2, r3
 8015852:	0a9b      	lsrs	r3, r3, #10
 8015854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801585a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015866:	2208      	movs	r2, #8
 8015868:	409a      	lsls	r2, r3
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	4013      	ands	r3, r2
 801586e:	2b00      	cmp	r3, #0
 8015870:	d01a      	beq.n	80158a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	f003 0304 	and.w	r3, r3, #4
 801587c:	2b00      	cmp	r3, #0
 801587e:	d013      	beq.n	80158a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	f022 0204 	bic.w	r2, r2, #4
 801588e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015894:	2208      	movs	r2, #8
 8015896:	409a      	lsls	r2, r3
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80158a0:	f043 0201 	orr.w	r2, r3, #1
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158ac:	2201      	movs	r2, #1
 80158ae:	409a      	lsls	r2, r3
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	4013      	ands	r3, r2
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d012      	beq.n	80158de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	695b      	ldr	r3, [r3, #20]
 80158be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d00b      	beq.n	80158de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158ca:	2201      	movs	r2, #1
 80158cc:	409a      	lsls	r2, r3
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80158d6:	f043 0202 	orr.w	r2, r3, #2
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158e2:	2204      	movs	r2, #4
 80158e4:	409a      	lsls	r2, r3
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	4013      	ands	r3, r2
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d012      	beq.n	8015914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f003 0302 	and.w	r3, r3, #2
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00b      	beq.n	8015914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015900:	2204      	movs	r2, #4
 8015902:	409a      	lsls	r2, r3
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801590c:	f043 0204 	orr.w	r2, r3, #4
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015918:	2210      	movs	r2, #16
 801591a:	409a      	lsls	r2, r3
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	4013      	ands	r3, r2
 8015920:	2b00      	cmp	r3, #0
 8015922:	d043      	beq.n	80159ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	f003 0308 	and.w	r3, r3, #8
 801592e:	2b00      	cmp	r3, #0
 8015930:	d03c      	beq.n	80159ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015936:	2210      	movs	r2, #16
 8015938:	409a      	lsls	r2, r3
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015948:	2b00      	cmp	r3, #0
 801594a:	d018      	beq.n	801597e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015956:	2b00      	cmp	r3, #0
 8015958:	d108      	bne.n	801596c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801595e:	2b00      	cmp	r3, #0
 8015960:	d024      	beq.n	80159ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	4798      	blx	r3
 801596a:	e01f      	b.n	80159ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015970:	2b00      	cmp	r3, #0
 8015972:	d01b      	beq.n	80159ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	4798      	blx	r3
 801597c:	e016      	b.n	80159ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015988:	2b00      	cmp	r3, #0
 801598a:	d107      	bne.n	801599c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f022 0208 	bic.w	r2, r2, #8
 801599a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d003      	beq.n	80159ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159b0:	2220      	movs	r2, #32
 80159b2:	409a      	lsls	r2, r3
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	4013      	ands	r3, r2
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f000 808f 	beq.w	8015adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	f003 0310 	and.w	r3, r3, #16
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 8087 	beq.w	8015adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159d2:	2220      	movs	r2, #32
 80159d4:	409a      	lsls	r2, r3
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	2b05      	cmp	r3, #5
 80159e4:	d136      	bne.n	8015a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	f022 0216 	bic.w	r2, r2, #22
 80159f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	695a      	ldr	r2, [r3, #20]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d103      	bne.n	8015a16 <HAL_DMA_IRQHandler+0x1da>
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d007      	beq.n	8015a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	681a      	ldr	r2, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	f022 0208 	bic.w	r2, r2, #8
 8015a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a2a:	223f      	movs	r2, #63	; 0x3f
 8015a2c:	409a      	lsls	r2, r3
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2201      	movs	r2, #1
 8015a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d07e      	beq.n	8015b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	4798      	blx	r3
        }
        return;
 8015a52:	e079      	b.n	8015b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d01d      	beq.n	8015a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d10d      	bne.n	8015a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d031      	beq.n	8015adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	4798      	blx	r3
 8015a80:	e02c      	b.n	8015adc <HAL_DMA_IRQHandler+0x2a0>
 8015a82:	bf00      	nop
 8015a84:	2000064c 	.word	0x2000064c
 8015a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d023      	beq.n	8015adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	4798      	blx	r3
 8015a9c:	e01e      	b.n	8015adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10f      	bne.n	8015acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f022 0210 	bic.w	r2, r2, #16
 8015aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d003      	beq.n	8015adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d032      	beq.n	8015b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ae8:	f003 0301 	and.w	r3, r3, #1
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d022      	beq.n	8015b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2205      	movs	r2, #5
 8015af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	f022 0201 	bic.w	r2, r2, #1
 8015b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	60bb      	str	r3, [r7, #8]
 8015b0e:	697a      	ldr	r2, [r7, #20]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d307      	bcc.n	8015b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d1f2      	bne.n	8015b08 <HAL_DMA_IRQHandler+0x2cc>
 8015b22:	e000      	b.n	8015b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8015b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2201      	movs	r2, #1
 8015b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2200      	movs	r2, #0
 8015b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d005      	beq.n	8015b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	4798      	blx	r3
 8015b46:	e000      	b.n	8015b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8015b48:	bf00      	nop
    }
  }
}
 8015b4a:	3718      	adds	r7, #24
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015b50:	b480      	push	{r7}
 8015b52:	b085      	sub	sp, #20
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	60b9      	str	r1, [r7, #8]
 8015b5a:	607a      	str	r2, [r7, #4]
 8015b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	681a      	ldr	r2, [r3, #0]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	683a      	ldr	r2, [r7, #0]
 8015b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	689b      	ldr	r3, [r3, #8]
 8015b7a:	2b40      	cmp	r3, #64	; 0x40
 8015b7c:	d108      	bne.n	8015b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	68ba      	ldr	r2, [r7, #8]
 8015b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8015b8e:	e007      	b.n	8015ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	68ba      	ldr	r2, [r7, #8]
 8015b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	687a      	ldr	r2, [r7, #4]
 8015b9e:	60da      	str	r2, [r3, #12]
}
 8015ba0:	bf00      	nop
 8015ba2:	3714      	adds	r7, #20
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr

08015bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8015bac:	b480      	push	{r7}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	3b10      	subs	r3, #16
 8015bbc:	4a14      	ldr	r2, [pc, #80]	; (8015c10 <DMA_CalcBaseAndBitshift+0x64>)
 8015bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8015bc2:	091b      	lsrs	r3, r3, #4
 8015bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8015bc6:	4a13      	ldr	r2, [pc, #76]	; (8015c14 <DMA_CalcBaseAndBitshift+0x68>)
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	461a      	mov	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b03      	cmp	r3, #3
 8015bd8:	d909      	bls.n	8015bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015be2:	f023 0303 	bic.w	r3, r3, #3
 8015be6:	1d1a      	adds	r2, r3, #4
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	659a      	str	r2, [r3, #88]	; 0x58
 8015bec:	e007      	b.n	8015bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015bf6:	f023 0303 	bic.w	r3, r3, #3
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3714      	adds	r7, #20
 8015c06:	46bd      	mov	sp, r7
 8015c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop
 8015c10:	aaaaaaab 	.word	0xaaaaaaab
 8015c14:	08024010 	.word	0x08024010

08015c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b085      	sub	sp, #20
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015c20:	2300      	movs	r3, #0
 8015c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	699b      	ldr	r3, [r3, #24]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d11f      	bne.n	8015c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	2b03      	cmp	r3, #3
 8015c36:	d856      	bhi.n	8015ce6 <DMA_CheckFifoParam+0xce>
 8015c38:	a201      	add	r2, pc, #4	; (adr r2, 8015c40 <DMA_CheckFifoParam+0x28>)
 8015c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c3e:	bf00      	nop
 8015c40:	08015c51 	.word	0x08015c51
 8015c44:	08015c63 	.word	0x08015c63
 8015c48:	08015c51 	.word	0x08015c51
 8015c4c:	08015ce7 	.word	0x08015ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d046      	beq.n	8015cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015c60:	e043      	b.n	8015cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015c6a:	d140      	bne.n	8015cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015c70:	e03d      	b.n	8015cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	699b      	ldr	r3, [r3, #24]
 8015c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c7a:	d121      	bne.n	8015cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	2b03      	cmp	r3, #3
 8015c80:	d837      	bhi.n	8015cf2 <DMA_CheckFifoParam+0xda>
 8015c82:	a201      	add	r2, pc, #4	; (adr r2, 8015c88 <DMA_CheckFifoParam+0x70>)
 8015c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c88:	08015c99 	.word	0x08015c99
 8015c8c:	08015c9f 	.word	0x08015c9f
 8015c90:	08015c99 	.word	0x08015c99
 8015c94:	08015cb1 	.word	0x08015cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8015c9c:	e030      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d025      	beq.n	8015cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8015caa:	2301      	movs	r3, #1
 8015cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015cae:	e022      	b.n	8015cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015cb8:	d11f      	bne.n	8015cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8015cbe:	e01c      	b.n	8015cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	2b02      	cmp	r3, #2
 8015cc4:	d903      	bls.n	8015cce <DMA_CheckFifoParam+0xb6>
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	2b03      	cmp	r3, #3
 8015cca:	d003      	beq.n	8015cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8015ccc:	e018      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8015cd2:	e015      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00e      	beq.n	8015cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8015ce4:	e00b      	b.n	8015cfe <DMA_CheckFifoParam+0xe6>
      break;
 8015ce6:	bf00      	nop
 8015ce8:	e00a      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;
 8015cea:	bf00      	nop
 8015cec:	e008      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;
 8015cee:	bf00      	nop
 8015cf0:	e006      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;
 8015cf2:	bf00      	nop
 8015cf4:	e004      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;
 8015cf6:	bf00      	nop
 8015cf8:	e002      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8015cfa:	bf00      	nop
 8015cfc:	e000      	b.n	8015d00 <DMA_CheckFifoParam+0xe8>
      break;
 8015cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8015d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3714      	adds	r7, #20
 8015d06:	46bd      	mov	sp, r7
 8015d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0c:	4770      	bx	lr
 8015d0e:	bf00      	nop

08015d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015d10:	b480      	push	{r7}
 8015d12:	b089      	sub	sp, #36	; 0x24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015d22:	2300      	movs	r3, #0
 8015d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015d26:	2300      	movs	r3, #0
 8015d28:	61fb      	str	r3, [r7, #28]
 8015d2a:	e16b      	b.n	8016004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	fa02 f303 	lsl.w	r3, r2, r3
 8015d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	697a      	ldr	r2, [r7, #20]
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015d40:	693a      	ldr	r2, [r7, #16]
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	f040 815a 	bne.w	8015ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	f003 0303 	and.w	r3, r3, #3
 8015d52:	2b01      	cmp	r3, #1
 8015d54:	d005      	beq.n	8015d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d130      	bne.n	8015dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	689b      	ldr	r3, [r3, #8]
 8015d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	2203      	movs	r2, #3
 8015d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d72:	43db      	mvns	r3, r3
 8015d74:	69ba      	ldr	r2, [r7, #24]
 8015d76:	4013      	ands	r3, r2
 8015d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	68da      	ldr	r2, [r3, #12]
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	fa02 f303 	lsl.w	r3, r2, r3
 8015d86:	69ba      	ldr	r2, [r7, #24]
 8015d88:	4313      	orrs	r3, r2
 8015d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	69ba      	ldr	r2, [r7, #24]
 8015d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015d98:	2201      	movs	r2, #1
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8015da0:	43db      	mvns	r3, r3
 8015da2:	69ba      	ldr	r2, [r7, #24]
 8015da4:	4013      	ands	r3, r2
 8015da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	091b      	lsrs	r3, r3, #4
 8015dae:	f003 0201 	and.w	r2, r3, #1
 8015db2:	69fb      	ldr	r3, [r7, #28]
 8015db4:	fa02 f303 	lsl.w	r3, r2, r3
 8015db8:	69ba      	ldr	r2, [r7, #24]
 8015dba:	4313      	orrs	r3, r2
 8015dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	69ba      	ldr	r2, [r7, #24]
 8015dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	f003 0303 	and.w	r3, r3, #3
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	d017      	beq.n	8015e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015dd6:	69fb      	ldr	r3, [r7, #28]
 8015dd8:	005b      	lsls	r3, r3, #1
 8015dda:	2203      	movs	r2, #3
 8015ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8015de0:	43db      	mvns	r3, r3
 8015de2:	69ba      	ldr	r2, [r7, #24]
 8015de4:	4013      	ands	r3, r2
 8015de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	689a      	ldr	r2, [r3, #8]
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	005b      	lsls	r3, r3, #1
 8015df0:	fa02 f303 	lsl.w	r3, r2, r3
 8015df4:	69ba      	ldr	r2, [r7, #24]
 8015df6:	4313      	orrs	r3, r2
 8015df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	69ba      	ldr	r2, [r7, #24]
 8015dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	685b      	ldr	r3, [r3, #4]
 8015e04:	f003 0303 	and.w	r3, r3, #3
 8015e08:	2b02      	cmp	r3, #2
 8015e0a:	d123      	bne.n	8015e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	08da      	lsrs	r2, r3, #3
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	3208      	adds	r2, #8
 8015e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015e1a:	69fb      	ldr	r3, [r7, #28]
 8015e1c:	f003 0307 	and.w	r3, r3, #7
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	220f      	movs	r2, #15
 8015e24:	fa02 f303 	lsl.w	r3, r2, r3
 8015e28:	43db      	mvns	r3, r3
 8015e2a:	69ba      	ldr	r2, [r7, #24]
 8015e2c:	4013      	ands	r3, r2
 8015e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	691a      	ldr	r2, [r3, #16]
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	f003 0307 	and.w	r3, r3, #7
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	4313      	orrs	r3, r2
 8015e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015e46:	69fb      	ldr	r3, [r7, #28]
 8015e48:	08da      	lsrs	r2, r3, #3
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	3208      	adds	r2, #8
 8015e4e:	69b9      	ldr	r1, [r7, #24]
 8015e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015e5a:	69fb      	ldr	r3, [r7, #28]
 8015e5c:	005b      	lsls	r3, r3, #1
 8015e5e:	2203      	movs	r2, #3
 8015e60:	fa02 f303 	lsl.w	r3, r2, r3
 8015e64:	43db      	mvns	r3, r3
 8015e66:	69ba      	ldr	r2, [r7, #24]
 8015e68:	4013      	ands	r3, r2
 8015e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	f003 0203 	and.w	r2, r3, #3
 8015e74:	69fb      	ldr	r3, [r7, #28]
 8015e76:	005b      	lsls	r3, r3, #1
 8015e78:	fa02 f303 	lsl.w	r3, r2, r3
 8015e7c:	69ba      	ldr	r2, [r7, #24]
 8015e7e:	4313      	orrs	r3, r2
 8015e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	69ba      	ldr	r2, [r7, #24]
 8015e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f000 80b4 	beq.w	8015ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015e96:	2300      	movs	r3, #0
 8015e98:	60fb      	str	r3, [r7, #12]
 8015e9a:	4b60      	ldr	r3, [pc, #384]	; (801601c <HAL_GPIO_Init+0x30c>)
 8015e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e9e:	4a5f      	ldr	r2, [pc, #380]	; (801601c <HAL_GPIO_Init+0x30c>)
 8015ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8015ea6:	4b5d      	ldr	r3, [pc, #372]	; (801601c <HAL_GPIO_Init+0x30c>)
 8015ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015eae:	60fb      	str	r3, [r7, #12]
 8015eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015eb2:	4a5b      	ldr	r2, [pc, #364]	; (8016020 <HAL_GPIO_Init+0x310>)
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	089b      	lsrs	r3, r3, #2
 8015eb8:	3302      	adds	r3, #2
 8015eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	f003 0303 	and.w	r3, r3, #3
 8015ec6:	009b      	lsls	r3, r3, #2
 8015ec8:	220f      	movs	r2, #15
 8015eca:	fa02 f303 	lsl.w	r3, r2, r3
 8015ece:	43db      	mvns	r3, r3
 8015ed0:	69ba      	ldr	r2, [r7, #24]
 8015ed2:	4013      	ands	r3, r2
 8015ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	4a52      	ldr	r2, [pc, #328]	; (8016024 <HAL_GPIO_Init+0x314>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d02b      	beq.n	8015f36 <HAL_GPIO_Init+0x226>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4a51      	ldr	r2, [pc, #324]	; (8016028 <HAL_GPIO_Init+0x318>)
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d025      	beq.n	8015f32 <HAL_GPIO_Init+0x222>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4a50      	ldr	r2, [pc, #320]	; (801602c <HAL_GPIO_Init+0x31c>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d01f      	beq.n	8015f2e <HAL_GPIO_Init+0x21e>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4a4f      	ldr	r2, [pc, #316]	; (8016030 <HAL_GPIO_Init+0x320>)
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d019      	beq.n	8015f2a <HAL_GPIO_Init+0x21a>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	4a4e      	ldr	r2, [pc, #312]	; (8016034 <HAL_GPIO_Init+0x324>)
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d013      	beq.n	8015f26 <HAL_GPIO_Init+0x216>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	4a4d      	ldr	r2, [pc, #308]	; (8016038 <HAL_GPIO_Init+0x328>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d00d      	beq.n	8015f22 <HAL_GPIO_Init+0x212>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	4a4c      	ldr	r2, [pc, #304]	; (801603c <HAL_GPIO_Init+0x32c>)
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d007      	beq.n	8015f1e <HAL_GPIO_Init+0x20e>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	4a4b      	ldr	r2, [pc, #300]	; (8016040 <HAL_GPIO_Init+0x330>)
 8015f12:	4293      	cmp	r3, r2
 8015f14:	d101      	bne.n	8015f1a <HAL_GPIO_Init+0x20a>
 8015f16:	2307      	movs	r3, #7
 8015f18:	e00e      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f1a:	2308      	movs	r3, #8
 8015f1c:	e00c      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f1e:	2306      	movs	r3, #6
 8015f20:	e00a      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f22:	2305      	movs	r3, #5
 8015f24:	e008      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f26:	2304      	movs	r3, #4
 8015f28:	e006      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f2a:	2303      	movs	r3, #3
 8015f2c:	e004      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f2e:	2302      	movs	r3, #2
 8015f30:	e002      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f32:	2301      	movs	r3, #1
 8015f34:	e000      	b.n	8015f38 <HAL_GPIO_Init+0x228>
 8015f36:	2300      	movs	r3, #0
 8015f38:	69fa      	ldr	r2, [r7, #28]
 8015f3a:	f002 0203 	and.w	r2, r2, #3
 8015f3e:	0092      	lsls	r2, r2, #2
 8015f40:	4093      	lsls	r3, r2
 8015f42:	69ba      	ldr	r2, [r7, #24]
 8015f44:	4313      	orrs	r3, r2
 8015f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015f48:	4935      	ldr	r1, [pc, #212]	; (8016020 <HAL_GPIO_Init+0x310>)
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	089b      	lsrs	r3, r3, #2
 8015f4e:	3302      	adds	r3, #2
 8015f50:	69ba      	ldr	r2, [r7, #24]
 8015f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015f56:	4b3b      	ldr	r3, [pc, #236]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015f58:	689b      	ldr	r3, [r3, #8]
 8015f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	43db      	mvns	r3, r3
 8015f60:	69ba      	ldr	r2, [r7, #24]
 8015f62:	4013      	ands	r3, r2
 8015f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d003      	beq.n	8015f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8015f72:	69ba      	ldr	r2, [r7, #24]
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015f7a:	4a32      	ldr	r2, [pc, #200]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015f80:	4b30      	ldr	r3, [pc, #192]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015f82:	68db      	ldr	r3, [r3, #12]
 8015f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	43db      	mvns	r3, r3
 8015f8a:	69ba      	ldr	r2, [r7, #24]
 8015f8c:	4013      	ands	r3, r2
 8015f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d003      	beq.n	8015fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8015f9c:	69ba      	ldr	r2, [r7, #24]
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	4313      	orrs	r3, r2
 8015fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015fa4:	4a27      	ldr	r2, [pc, #156]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015faa:	4b26      	ldr	r3, [pc, #152]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	43db      	mvns	r3, r3
 8015fb4:	69ba      	ldr	r2, [r7, #24]
 8015fb6:	4013      	ands	r3, r2
 8015fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d003      	beq.n	8015fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8015fc6:	69ba      	ldr	r2, [r7, #24]
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	4313      	orrs	r3, r2
 8015fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015fce:	4a1d      	ldr	r2, [pc, #116]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015fd0:	69bb      	ldr	r3, [r7, #24]
 8015fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015fd4:	4b1b      	ldr	r3, [pc, #108]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	43db      	mvns	r3, r3
 8015fde:	69ba      	ldr	r2, [r7, #24]
 8015fe0:	4013      	ands	r3, r2
 8015fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d003      	beq.n	8015ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8015ff0:	69ba      	ldr	r2, [r7, #24]
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015ff8:	4a12      	ldr	r2, [pc, #72]	; (8016044 <HAL_GPIO_Init+0x334>)
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	3301      	adds	r3, #1
 8016002:	61fb      	str	r3, [r7, #28]
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	2b0f      	cmp	r3, #15
 8016008:	f67f ae90 	bls.w	8015d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801600c:	bf00      	nop
 801600e:	bf00      	nop
 8016010:	3724      	adds	r7, #36	; 0x24
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop
 801601c:	40023800 	.word	0x40023800
 8016020:	40013800 	.word	0x40013800
 8016024:	40020000 	.word	0x40020000
 8016028:	40020400 	.word	0x40020400
 801602c:	40020800 	.word	0x40020800
 8016030:	40020c00 	.word	0x40020c00
 8016034:	40021000 	.word	0x40021000
 8016038:	40021400 	.word	0x40021400
 801603c:	40021800 	.word	0x40021800
 8016040:	40021c00 	.word	0x40021c00
 8016044:	40013c00 	.word	0x40013c00

08016048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016048:	b480      	push	{r7}
 801604a:	b083      	sub	sp, #12
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	460b      	mov	r3, r1
 8016052:	807b      	strh	r3, [r7, #2]
 8016054:	4613      	mov	r3, r2
 8016056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016058:	787b      	ldrb	r3, [r7, #1]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d003      	beq.n	8016066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801605e:	887a      	ldrh	r2, [r7, #2]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016064:	e003      	b.n	801606e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016066:	887b      	ldrh	r3, [r7, #2]
 8016068:	041a      	lsls	r2, r3, #16
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	619a      	str	r2, [r3, #24]
}
 801606e:	bf00      	nop
 8016070:	370c      	adds	r7, #12
 8016072:	46bd      	mov	sp, r7
 8016074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016078:	4770      	bx	lr

0801607a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801607a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801607c:	b08f      	sub	sp, #60	; 0x3c
 801607e:	af0a      	add	r7, sp, #40	; 0x28
 8016080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016088:	2301      	movs	r3, #1
 801608a:	e10f      	b.n	80162ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8016098:	b2db      	uxtb	r3, r3
 801609a:	2b00      	cmp	r3, #0
 801609c:	d106      	bne.n	80160ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2200      	movs	r2, #0
 80160a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f007 fafc 	bl	801d6a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2203      	movs	r2, #3
 80160b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d102      	bne.n	80160c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2200      	movs	r2, #0
 80160c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4618      	mov	r0, r3
 80160cc:	f003 fe4f 	bl	8019d6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	603b      	str	r3, [r7, #0]
 80160d6:	687e      	ldr	r6, [r7, #4]
 80160d8:	466d      	mov	r5, sp
 80160da:	f106 0410 	add.w	r4, r6, #16
 80160de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80160e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80160e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80160ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80160ee:	1d33      	adds	r3, r6, #4
 80160f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80160f2:	6838      	ldr	r0, [r7, #0]
 80160f4:	f003 fd26 	bl	8019b44 <USB_CoreInit>
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d005      	beq.n	801610a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2202      	movs	r2, #2
 8016102:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8016106:	2301      	movs	r3, #1
 8016108:	e0d0      	b.n	80162ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2100      	movs	r1, #0
 8016110:	4618      	mov	r0, r3
 8016112:	f003 fe3d 	bl	8019d90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016116:	2300      	movs	r3, #0
 8016118:	73fb      	strb	r3, [r7, #15]
 801611a:	e04a      	b.n	80161b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801611c:	7bfa      	ldrb	r2, [r7, #15]
 801611e:	6879      	ldr	r1, [r7, #4]
 8016120:	4613      	mov	r3, r2
 8016122:	00db      	lsls	r3, r3, #3
 8016124:	4413      	add	r3, r2
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	440b      	add	r3, r1
 801612a:	333d      	adds	r3, #61	; 0x3d
 801612c:	2201      	movs	r2, #1
 801612e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016130:	7bfa      	ldrb	r2, [r7, #15]
 8016132:	6879      	ldr	r1, [r7, #4]
 8016134:	4613      	mov	r3, r2
 8016136:	00db      	lsls	r3, r3, #3
 8016138:	4413      	add	r3, r2
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	440b      	add	r3, r1
 801613e:	333c      	adds	r3, #60	; 0x3c
 8016140:	7bfa      	ldrb	r2, [r7, #15]
 8016142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8016144:	7bfa      	ldrb	r2, [r7, #15]
 8016146:	7bfb      	ldrb	r3, [r7, #15]
 8016148:	b298      	uxth	r0, r3
 801614a:	6879      	ldr	r1, [r7, #4]
 801614c:	4613      	mov	r3, r2
 801614e:	00db      	lsls	r3, r3, #3
 8016150:	4413      	add	r3, r2
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	440b      	add	r3, r1
 8016156:	3344      	adds	r3, #68	; 0x44
 8016158:	4602      	mov	r2, r0
 801615a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801615c:	7bfa      	ldrb	r2, [r7, #15]
 801615e:	6879      	ldr	r1, [r7, #4]
 8016160:	4613      	mov	r3, r2
 8016162:	00db      	lsls	r3, r3, #3
 8016164:	4413      	add	r3, r2
 8016166:	009b      	lsls	r3, r3, #2
 8016168:	440b      	add	r3, r1
 801616a:	3340      	adds	r3, #64	; 0x40
 801616c:	2200      	movs	r2, #0
 801616e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016170:	7bfa      	ldrb	r2, [r7, #15]
 8016172:	6879      	ldr	r1, [r7, #4]
 8016174:	4613      	mov	r3, r2
 8016176:	00db      	lsls	r3, r3, #3
 8016178:	4413      	add	r3, r2
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	440b      	add	r3, r1
 801617e:	3348      	adds	r3, #72	; 0x48
 8016180:	2200      	movs	r2, #0
 8016182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016184:	7bfa      	ldrb	r2, [r7, #15]
 8016186:	6879      	ldr	r1, [r7, #4]
 8016188:	4613      	mov	r3, r2
 801618a:	00db      	lsls	r3, r3, #3
 801618c:	4413      	add	r3, r2
 801618e:	009b      	lsls	r3, r3, #2
 8016190:	440b      	add	r3, r1
 8016192:	334c      	adds	r3, #76	; 0x4c
 8016194:	2200      	movs	r2, #0
 8016196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016198:	7bfa      	ldrb	r2, [r7, #15]
 801619a:	6879      	ldr	r1, [r7, #4]
 801619c:	4613      	mov	r3, r2
 801619e:	00db      	lsls	r3, r3, #3
 80161a0:	4413      	add	r3, r2
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	440b      	add	r3, r1
 80161a6:	3354      	adds	r3, #84	; 0x54
 80161a8:	2200      	movs	r2, #0
 80161aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80161ac:	7bfb      	ldrb	r3, [r7, #15]
 80161ae:	3301      	adds	r3, #1
 80161b0:	73fb      	strb	r3, [r7, #15]
 80161b2:	7bfa      	ldrb	r2, [r7, #15]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d3af      	bcc.n	801611c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80161bc:	2300      	movs	r3, #0
 80161be:	73fb      	strb	r3, [r7, #15]
 80161c0:	e044      	b.n	801624c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80161c2:	7bfa      	ldrb	r2, [r7, #15]
 80161c4:	6879      	ldr	r1, [r7, #4]
 80161c6:	4613      	mov	r3, r2
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	4413      	add	r3, r2
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	440b      	add	r3, r1
 80161d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80161d4:	2200      	movs	r2, #0
 80161d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80161d8:	7bfa      	ldrb	r2, [r7, #15]
 80161da:	6879      	ldr	r1, [r7, #4]
 80161dc:	4613      	mov	r3, r2
 80161de:	00db      	lsls	r3, r3, #3
 80161e0:	4413      	add	r3, r2
 80161e2:	009b      	lsls	r3, r3, #2
 80161e4:	440b      	add	r3, r1
 80161e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80161ea:	7bfa      	ldrb	r2, [r7, #15]
 80161ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80161ee:	7bfa      	ldrb	r2, [r7, #15]
 80161f0:	6879      	ldr	r1, [r7, #4]
 80161f2:	4613      	mov	r3, r2
 80161f4:	00db      	lsls	r3, r3, #3
 80161f6:	4413      	add	r3, r2
 80161f8:	009b      	lsls	r3, r3, #2
 80161fa:	440b      	add	r3, r1
 80161fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8016200:	2200      	movs	r2, #0
 8016202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016204:	7bfa      	ldrb	r2, [r7, #15]
 8016206:	6879      	ldr	r1, [r7, #4]
 8016208:	4613      	mov	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	4413      	add	r3, r2
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	440b      	add	r3, r1
 8016212:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016216:	2200      	movs	r2, #0
 8016218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801621a:	7bfa      	ldrb	r2, [r7, #15]
 801621c:	6879      	ldr	r1, [r7, #4]
 801621e:	4613      	mov	r3, r2
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	4413      	add	r3, r2
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	440b      	add	r3, r1
 8016228:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801622c:	2200      	movs	r2, #0
 801622e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016230:	7bfa      	ldrb	r2, [r7, #15]
 8016232:	6879      	ldr	r1, [r7, #4]
 8016234:	4613      	mov	r3, r2
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	4413      	add	r3, r2
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	440b      	add	r3, r1
 801623e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8016242:	2200      	movs	r2, #0
 8016244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016246:	7bfb      	ldrb	r3, [r7, #15]
 8016248:	3301      	adds	r3, #1
 801624a:	73fb      	strb	r3, [r7, #15]
 801624c:	7bfa      	ldrb	r2, [r7, #15]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	685b      	ldr	r3, [r3, #4]
 8016252:	429a      	cmp	r2, r3
 8016254:	d3b5      	bcc.n	80161c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	603b      	str	r3, [r7, #0]
 801625c:	687e      	ldr	r6, [r7, #4]
 801625e:	466d      	mov	r5, sp
 8016260:	f106 0410 	add.w	r4, r6, #16
 8016264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801626a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801626c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016270:	e885 0003 	stmia.w	r5, {r0, r1}
 8016274:	1d33      	adds	r3, r6, #4
 8016276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016278:	6838      	ldr	r0, [r7, #0]
 801627a:	f003 fdd5 	bl	8019e28 <USB_DevInit>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d005      	beq.n	8016290 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2202      	movs	r2, #2
 8016288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	e00d      	b.n	80162ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2200      	movs	r2, #0
 8016294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2201      	movs	r2, #1
 801629c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f004 ff24 	bl	801b0f2 <USB_DevDisconnect>

  return HAL_OK;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080162b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d101      	bne.n	80162d0 <HAL_PCD_Start+0x1c>
 80162cc:	2302      	movs	r3, #2
 80162ce:	e020      	b.n	8016312 <HAL_PCD_Start+0x5e>
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2201      	movs	r2, #1
 80162d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162dc:	2b01      	cmp	r3, #1
 80162de:	d109      	bne.n	80162f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	d005      	beq.n	80162f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4618      	mov	r0, r3
 80162fa:	f003 fd27 	bl	8019d4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4618      	mov	r0, r3
 8016304:	f004 fed4 	bl	801b0b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2200      	movs	r2, #0
 801630c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8016310:	2300      	movs	r3, #0
}
 8016312:	4618      	mov	r0, r3
 8016314:	3710      	adds	r7, #16
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}

0801631a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801631a:	b590      	push	{r4, r7, lr}
 801631c:	b08d      	sub	sp, #52	; 0x34
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016328:	6a3b      	ldr	r3, [r7, #32]
 801632a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4618      	mov	r0, r3
 8016332:	f004 ff92 	bl	801b25a <USB_GetMode>
 8016336:	4603      	mov	r3, r0
 8016338:	2b00      	cmp	r3, #0
 801633a:	f040 848a 	bne.w	8016c52 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	4618      	mov	r0, r3
 8016344:	f004 fef6 	bl	801b134 <USB_ReadInterrupts>
 8016348:	4603      	mov	r3, r0
 801634a:	2b00      	cmp	r3, #0
 801634c:	f000 8480 	beq.w	8016c50 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016356:	689b      	ldr	r3, [r3, #8]
 8016358:	0a1b      	lsrs	r3, r3, #8
 801635a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	4618      	mov	r0, r3
 801636a:	f004 fee3 	bl	801b134 <USB_ReadInterrupts>
 801636e:	4603      	mov	r3, r0
 8016370:	f003 0302 	and.w	r3, r3, #2
 8016374:	2b02      	cmp	r3, #2
 8016376:	d107      	bne.n	8016388 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	695a      	ldr	r2, [r3, #20]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f002 0202 	and.w	r2, r2, #2
 8016386:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4618      	mov	r0, r3
 801638e:	f004 fed1 	bl	801b134 <USB_ReadInterrupts>
 8016392:	4603      	mov	r3, r0
 8016394:	f003 0310 	and.w	r3, r3, #16
 8016398:	2b10      	cmp	r3, #16
 801639a:	d161      	bne.n	8016460 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	699a      	ldr	r2, [r3, #24]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	f022 0210 	bic.w	r2, r2, #16
 80163aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80163ac:	6a3b      	ldr	r3, [r7, #32]
 80163ae:	6a1b      	ldr	r3, [r3, #32]
 80163b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	f003 020f 	and.w	r2, r3, #15
 80163b8:	4613      	mov	r3, r2
 80163ba:	00db      	lsls	r3, r3, #3
 80163bc:	4413      	add	r3, r2
 80163be:	009b      	lsls	r3, r3, #2
 80163c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	4413      	add	r3, r2
 80163c8:	3304      	adds	r3, #4
 80163ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	0c5b      	lsrs	r3, r3, #17
 80163d0:	f003 030f 	and.w	r3, r3, #15
 80163d4:	2b02      	cmp	r3, #2
 80163d6:	d124      	bne.n	8016422 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80163d8:	69ba      	ldr	r2, [r7, #24]
 80163da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80163de:	4013      	ands	r3, r2
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d035      	beq.n	8016450 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80163e8:	69bb      	ldr	r3, [r7, #24]
 80163ea:	091b      	lsrs	r3, r3, #4
 80163ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80163ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	461a      	mov	r2, r3
 80163f6:	6a38      	ldr	r0, [r7, #32]
 80163f8:	f004 fd08 	bl	801ae0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	691a      	ldr	r2, [r3, #16]
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	091b      	lsrs	r3, r3, #4
 8016404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016408:	441a      	add	r2, r3
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801640e:	697b      	ldr	r3, [r7, #20]
 8016410:	6a1a      	ldr	r2, [r3, #32]
 8016412:	69bb      	ldr	r3, [r7, #24]
 8016414:	091b      	lsrs	r3, r3, #4
 8016416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801641a:	441a      	add	r2, r3
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	621a      	str	r2, [r3, #32]
 8016420:	e016      	b.n	8016450 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	0c5b      	lsrs	r3, r3, #17
 8016426:	f003 030f 	and.w	r3, r3, #15
 801642a:	2b06      	cmp	r3, #6
 801642c:	d110      	bne.n	8016450 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016434:	2208      	movs	r2, #8
 8016436:	4619      	mov	r1, r3
 8016438:	6a38      	ldr	r0, [r7, #32]
 801643a:	f004 fce7 	bl	801ae0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	6a1a      	ldr	r2, [r3, #32]
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	091b      	lsrs	r3, r3, #4
 8016446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801644a:	441a      	add	r2, r3
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	699a      	ldr	r2, [r3, #24]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	f042 0210 	orr.w	r2, r2, #16
 801645e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	4618      	mov	r0, r3
 8016466:	f004 fe65 	bl	801b134 <USB_ReadInterrupts>
 801646a:	4603      	mov	r3, r0
 801646c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8016474:	f040 80a7 	bne.w	80165c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8016478:	2300      	movs	r3, #0
 801647a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4618      	mov	r0, r3
 8016482:	f004 fe6a 	bl	801b15a <USB_ReadDevAllOutEpInterrupt>
 8016486:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8016488:	e099      	b.n	80165be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 801648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648c:	f003 0301 	and.w	r3, r3, #1
 8016490:	2b00      	cmp	r3, #0
 8016492:	f000 808e 	beq.w	80165b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801649c:	b2d2      	uxtb	r2, r2
 801649e:	4611      	mov	r1, r2
 80164a0:	4618      	mov	r0, r3
 80164a2:	f004 fe8e 	bl	801b1c2 <USB_ReadDevOutEPInterrupt>
 80164a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	f003 0301 	and.w	r3, r3, #1
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00c      	beq.n	80164cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	015a      	lsls	r2, r3, #5
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	4413      	add	r3, r2
 80164ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164be:	461a      	mov	r2, r3
 80164c0:	2301      	movs	r3, #1
 80164c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80164c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 fec2 	bl	8017250 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80164cc:	693b      	ldr	r3, [r7, #16]
 80164ce:	f003 0308 	and.w	r3, r3, #8
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d00c      	beq.n	80164f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80164d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d8:	015a      	lsls	r2, r3, #5
 80164da:	69fb      	ldr	r3, [r7, #28]
 80164dc:	4413      	add	r3, r2
 80164de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164e2:	461a      	mov	r2, r3
 80164e4:	2308      	movs	r3, #8
 80164e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80164e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f000 ff98 	bl	8017420 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	f003 0310 	and.w	r3, r3, #16
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d008      	beq.n	801650c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	015a      	lsls	r2, r3, #5
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	4413      	add	r3, r2
 8016502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016506:	461a      	mov	r2, r3
 8016508:	2310      	movs	r3, #16
 801650a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	f003 0302 	and.w	r3, r3, #2
 8016512:	2b00      	cmp	r3, #0
 8016514:	d030      	beq.n	8016578 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8016516:	6a3b      	ldr	r3, [r7, #32]
 8016518:	695b      	ldr	r3, [r3, #20]
 801651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801651e:	2b80      	cmp	r3, #128	; 0x80
 8016520:	d109      	bne.n	8016536 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	69fa      	ldr	r2, [r7, #28]
 801652c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016534:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8016536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016538:	4613      	mov	r3, r2
 801653a:	00db      	lsls	r3, r3, #3
 801653c:	4413      	add	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	4413      	add	r3, r2
 8016548:	3304      	adds	r3, #4
 801654a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	78db      	ldrb	r3, [r3, #3]
 8016550:	2b01      	cmp	r3, #1
 8016552:	d108      	bne.n	8016566 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	2200      	movs	r2, #0
 8016558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655c:	b2db      	uxtb	r3, r3
 801655e:	4619      	mov	r1, r3
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f007 f9a5 	bl	801d8b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8016566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016568:	015a      	lsls	r2, r3, #5
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	4413      	add	r3, r2
 801656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016572:	461a      	mov	r2, r3
 8016574:	2302      	movs	r3, #2
 8016576:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8016578:	693b      	ldr	r3, [r7, #16]
 801657a:	f003 0320 	and.w	r3, r3, #32
 801657e:	2b00      	cmp	r3, #0
 8016580:	d008      	beq.n	8016594 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8016582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016584:	015a      	lsls	r2, r3, #5
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	4413      	add	r3, r2
 801658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801658e:	461a      	mov	r2, r3
 8016590:	2320      	movs	r3, #32
 8016592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801659a:	2b00      	cmp	r3, #0
 801659c:	d009      	beq.n	80165b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a0:	015a      	lsls	r2, r3, #5
 80165a2:	69fb      	ldr	r3, [r7, #28]
 80165a4:	4413      	add	r3, r2
 80165a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165aa:	461a      	mov	r2, r3
 80165ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80165b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80165b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b4:	3301      	adds	r3, #1
 80165b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80165b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ba:	085b      	lsrs	r3, r3, #1
 80165bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80165be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	f47f af62 	bne.w	801648a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f004 fdb2 	bl	801b134 <USB_ReadInterrupts>
 80165d0:	4603      	mov	r3, r0
 80165d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80165d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80165da:	f040 80db 	bne.w	8016794 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f004 fdd3 	bl	801b18e <USB_ReadDevAllInEpInterrupt>
 80165e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80165ea:	2300      	movs	r3, #0
 80165ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80165ee:	e0cd      	b.n	801678c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80165f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f2:	f003 0301 	and.w	r3, r3, #1
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	f000 80c2 	beq.w	8016780 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016602:	b2d2      	uxtb	r2, r2
 8016604:	4611      	mov	r1, r2
 8016606:	4618      	mov	r0, r3
 8016608:	f004 fdf9 	bl	801b1fe <USB_ReadDevInEPInterrupt>
 801660c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	f003 0301 	and.w	r3, r3, #1
 8016614:	2b00      	cmp	r3, #0
 8016616:	d057      	beq.n	80166c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8016618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661a:	f003 030f 	and.w	r3, r3, #15
 801661e:	2201      	movs	r2, #1
 8016620:	fa02 f303 	lsl.w	r3, r2, r3
 8016624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801662c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	43db      	mvns	r3, r3
 8016632:	69f9      	ldr	r1, [r7, #28]
 8016634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016638:	4013      	ands	r3, r2
 801663a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663e:	015a      	lsls	r2, r3, #5
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	4413      	add	r3, r2
 8016644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016648:	461a      	mov	r2, r3
 801664a:	2301      	movs	r3, #1
 801664c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	691b      	ldr	r3, [r3, #16]
 8016652:	2b01      	cmp	r3, #1
 8016654:	d132      	bne.n	80166bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8016656:	6879      	ldr	r1, [r7, #4]
 8016658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801665a:	4613      	mov	r3, r2
 801665c:	00db      	lsls	r3, r3, #3
 801665e:	4413      	add	r3, r2
 8016660:	009b      	lsls	r3, r3, #2
 8016662:	440b      	add	r3, r1
 8016664:	334c      	adds	r3, #76	; 0x4c
 8016666:	6819      	ldr	r1, [r3, #0]
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801666c:	4613      	mov	r3, r2
 801666e:	00db      	lsls	r3, r3, #3
 8016670:	4413      	add	r3, r2
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	4403      	add	r3, r0
 8016676:	3348      	adds	r3, #72	; 0x48
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	4419      	add	r1, r3
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016680:	4613      	mov	r3, r2
 8016682:	00db      	lsls	r3, r3, #3
 8016684:	4413      	add	r3, r2
 8016686:	009b      	lsls	r3, r3, #2
 8016688:	4403      	add	r3, r0
 801668a:	334c      	adds	r3, #76	; 0x4c
 801668c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016690:	2b00      	cmp	r3, #0
 8016692:	d113      	bne.n	80166bc <HAL_PCD_IRQHandler+0x3a2>
 8016694:	6879      	ldr	r1, [r7, #4]
 8016696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016698:	4613      	mov	r3, r2
 801669a:	00db      	lsls	r3, r3, #3
 801669c:	4413      	add	r3, r2
 801669e:	009b      	lsls	r3, r3, #2
 80166a0:	440b      	add	r3, r1
 80166a2:	3354      	adds	r3, #84	; 0x54
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d108      	bne.n	80166bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6818      	ldr	r0, [r3, #0]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80166b4:	461a      	mov	r2, r3
 80166b6:	2101      	movs	r1, #1
 80166b8:	f004 fe00 	bl	801b2bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80166bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	4619      	mov	r1, r3
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f007 f86f 	bl	801d7a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	f003 0308 	and.w	r3, r3, #8
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d008      	beq.n	80166e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	015a      	lsls	r2, r3, #5
 80166d6:	69fb      	ldr	r3, [r7, #28]
 80166d8:	4413      	add	r3, r2
 80166da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166de:	461a      	mov	r2, r3
 80166e0:	2308      	movs	r3, #8
 80166e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	f003 0310 	and.w	r3, r3, #16
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d008      	beq.n	8016700 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80166ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f0:	015a      	lsls	r2, r3, #5
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	4413      	add	r3, r2
 80166f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166fa:	461a      	mov	r2, r3
 80166fc:	2310      	movs	r3, #16
 80166fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016706:	2b00      	cmp	r3, #0
 8016708:	d008      	beq.n	801671c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670c:	015a      	lsls	r2, r3, #5
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	4413      	add	r3, r2
 8016712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016716:	461a      	mov	r2, r3
 8016718:	2340      	movs	r3, #64	; 0x40
 801671a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	f003 0302 	and.w	r3, r3, #2
 8016722:	2b00      	cmp	r3, #0
 8016724:	d023      	beq.n	801676e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8016726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016728:	6a38      	ldr	r0, [r7, #32]
 801672a:	f003 fce1 	bl	801a0f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016730:	4613      	mov	r3, r2
 8016732:	00db      	lsls	r3, r3, #3
 8016734:	4413      	add	r3, r2
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	3338      	adds	r3, #56	; 0x38
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	4413      	add	r3, r2
 801673e:	3304      	adds	r3, #4
 8016740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	78db      	ldrb	r3, [r3, #3]
 8016746:	2b01      	cmp	r3, #1
 8016748:	d108      	bne.n	801675c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	2200      	movs	r2, #0
 801674e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8016750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016752:	b2db      	uxtb	r3, r3
 8016754:	4619      	mov	r1, r3
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f007 f8bc 	bl	801d8d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675e:	015a      	lsls	r2, r3, #5
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	4413      	add	r3, r2
 8016764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016768:	461a      	mov	r2, r3
 801676a:	2302      	movs	r3, #2
 801676c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016774:	2b00      	cmp	r3, #0
 8016776:	d003      	beq.n	8016780 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8016778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801677a:	6878      	ldr	r0, [r7, #4]
 801677c:	f000 fcdb 	bl	8017136 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8016780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016782:	3301      	adds	r3, #1
 8016784:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8016786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016788:	085b      	lsrs	r3, r3, #1
 801678a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801678e:	2b00      	cmp	r3, #0
 8016790:	f47f af2e 	bne.w	80165f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	4618      	mov	r0, r3
 801679a:	f004 fccb 	bl	801b134 <USB_ReadInterrupts>
 801679e:	4603      	mov	r3, r0
 80167a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80167a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80167a8:	d122      	bne.n	80167f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	69fa      	ldr	r2, [r7, #28]
 80167b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80167b8:	f023 0301 	bic.w	r3, r3, #1
 80167bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d108      	bne.n	80167da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2200      	movs	r2, #0
 80167cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80167d0:	2100      	movs	r1, #0
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 fec2 	bl	801755c <HAL_PCDEx_LPM_Callback>
 80167d8:	e002      	b.n	80167e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f007 f85a 	bl	801d894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	695a      	ldr	r2, [r3, #20]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80167ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4618      	mov	r0, r3
 80167f6:	f004 fc9d 	bl	801b134 <USB_ReadInterrupts>
 80167fa:	4603      	mov	r3, r0
 80167fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016804:	d112      	bne.n	801682c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801680c:	689b      	ldr	r3, [r3, #8]
 801680e:	f003 0301 	and.w	r3, r3, #1
 8016812:	2b01      	cmp	r3, #1
 8016814:	d102      	bne.n	801681c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f007 f816 	bl	801d848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	695a      	ldr	r2, [r3, #20]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801682a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	4618      	mov	r0, r3
 8016832:	f004 fc7f 	bl	801b134 <USB_ReadInterrupts>
 8016836:	4603      	mov	r3, r0
 8016838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016840:	f040 80b7 	bne.w	80169b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	69fa      	ldr	r2, [r7, #28]
 801684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016852:	f023 0301 	bic.w	r3, r3, #1
 8016856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	2110      	movs	r1, #16
 801685e:	4618      	mov	r0, r3
 8016860:	f003 fc46 	bl	801a0f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016864:	2300      	movs	r3, #0
 8016866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016868:	e046      	b.n	80168f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	015a      	lsls	r2, r3, #5
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	4413      	add	r3, r2
 8016872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016876:	461a      	mov	r2, r3
 8016878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801687c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016880:	015a      	lsls	r2, r3, #5
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	4413      	add	r3, r2
 8016886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801688e:	0151      	lsls	r1, r2, #5
 8016890:	69fa      	ldr	r2, [r7, #28]
 8016892:	440a      	add	r2, r1
 8016894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801689c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a0:	015a      	lsls	r2, r3, #5
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	4413      	add	r3, r2
 80168a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168aa:	461a      	mov	r2, r3
 80168ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80168b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80168b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b4:	015a      	lsls	r2, r3, #5
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	4413      	add	r3, r2
 80168ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168c2:	0151      	lsls	r1, r2, #5
 80168c4:	69fa      	ldr	r2, [r7, #28]
 80168c6:	440a      	add	r2, r1
 80168c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80168d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80168d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d4:	015a      	lsls	r2, r3, #5
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	4413      	add	r3, r2
 80168da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168e2:	0151      	lsls	r1, r2, #5
 80168e4:	69fa      	ldr	r2, [r7, #28]
 80168e6:	440a      	add	r2, r1
 80168e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80168f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80168f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f4:	3301      	adds	r3, #1
 80168f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168fe:	429a      	cmp	r2, r3
 8016900:	d3b3      	bcc.n	801686a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8016902:	69fb      	ldr	r3, [r7, #28]
 8016904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016908:	69db      	ldr	r3, [r3, #28]
 801690a:	69fa      	ldr	r2, [r7, #28]
 801690c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016910:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8016914:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801691a:	2b00      	cmp	r3, #0
 801691c:	d016      	beq.n	801694c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016928:	69fa      	ldr	r2, [r7, #28]
 801692a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801692e:	f043 030b 	orr.w	r3, r3, #11
 8016932:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8016936:	69fb      	ldr	r3, [r7, #28]
 8016938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801693e:	69fa      	ldr	r2, [r7, #28]
 8016940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016944:	f043 030b 	orr.w	r3, r3, #11
 8016948:	6453      	str	r3, [r2, #68]	; 0x44
 801694a:	e015      	b.n	8016978 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016952:	695b      	ldr	r3, [r3, #20]
 8016954:	69fa      	ldr	r2, [r7, #28]
 8016956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801695a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801695e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8016962:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801696a:	691b      	ldr	r3, [r3, #16]
 801696c:	69fa      	ldr	r2, [r7, #28]
 801696e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016972:	f043 030b 	orr.w	r3, r3, #11
 8016976:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	69fa      	ldr	r2, [r7, #28]
 8016982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801698a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6818      	ldr	r0, [r3, #0]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	691b      	ldr	r3, [r3, #16]
 8016994:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801699c:	461a      	mov	r2, r3
 801699e:	f004 fc8d 	bl	801b2bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	695a      	ldr	r2, [r3, #20]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80169b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f004 fbbc 	bl	801b134 <USB_ReadInterrupts>
 80169bc:	4603      	mov	r3, r0
 80169be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80169c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80169c6:	d124      	bne.n	8016a12 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	4618      	mov	r0, r3
 80169ce:	f004 fc52 	bl	801b276 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f003 fc07 	bl	801a1ea <USB_GetDevSpeed>
 80169dc:	4603      	mov	r3, r0
 80169de:	461a      	mov	r2, r3
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681c      	ldr	r4, [r3, #0]
 80169e8:	f001 fa28 	bl	8017e3c <HAL_RCC_GetHCLKFreq>
 80169ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	461a      	mov	r2, r3
 80169f6:	4620      	mov	r0, r4
 80169f8:	f003 f906 	bl	8019c08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f006 fefa 	bl	801d7f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	695a      	ldr	r2, [r3, #20]
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8016a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f004 fb8c 	bl	801b134 <USB_ReadInterrupts>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	f003 0308 	and.w	r3, r3, #8
 8016a22:	2b08      	cmp	r3, #8
 8016a24:	d10a      	bne.n	8016a3c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f006 fed7 	bl	801d7da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	695a      	ldr	r2, [r3, #20]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f002 0208 	and.w	r2, r2, #8
 8016a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4618      	mov	r0, r3
 8016a42:	f004 fb77 	bl	801b134 <USB_ReadInterrupts>
 8016a46:	4603      	mov	r3, r0
 8016a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a4c:	2b80      	cmp	r3, #128	; 0x80
 8016a4e:	d122      	bne.n	8016a96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8016a50:	6a3b      	ldr	r3, [r7, #32]
 8016a52:	699b      	ldr	r3, [r3, #24]
 8016a54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016a58:	6a3b      	ldr	r3, [r7, #32]
 8016a5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a60:	e014      	b.n	8016a8c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8016a62:	6879      	ldr	r1, [r7, #4]
 8016a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a66:	4613      	mov	r3, r2
 8016a68:	00db      	lsls	r3, r3, #3
 8016a6a:	4413      	add	r3, r2
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	440b      	add	r3, r1
 8016a70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	2b01      	cmp	r3, #1
 8016a78:	d105      	bne.n	8016a86 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	4619      	mov	r1, r3
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 fb27 	bl	80170d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a88:	3301      	adds	r3, #1
 8016a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	685b      	ldr	r3, [r3, #4]
 8016a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d3e5      	bcc.n	8016a62 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f004 fb4a 	bl	801b134 <USB_ReadInterrupts>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016aaa:	d13b      	bne.n	8016b24 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016aac:	2301      	movs	r3, #1
 8016aae:	627b      	str	r3, [r7, #36]	; 0x24
 8016ab0:	e02b      	b.n	8016b0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8016ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab4:	015a      	lsls	r2, r3, #5
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	4413      	add	r3, r2
 8016aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8016ac2:	6879      	ldr	r1, [r7, #4]
 8016ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	4413      	add	r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	440b      	add	r3, r1
 8016ad0:	3340      	adds	r3, #64	; 0x40
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	2b01      	cmp	r3, #1
 8016ad6:	d115      	bne.n	8016b04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8016ad8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	da12      	bge.n	8016b04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8016ade:	6879      	ldr	r1, [r7, #4]
 8016ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	00db      	lsls	r3, r3, #3
 8016ae6:	4413      	add	r3, r2
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	440b      	add	r3, r1
 8016aec:	333f      	adds	r3, #63	; 0x3f
 8016aee:	2201      	movs	r2, #1
 8016af0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	4619      	mov	r1, r3
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f000 fae8 	bl	80170d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b06:	3301      	adds	r3, #1
 8016b08:	627b      	str	r3, [r7, #36]	; 0x24
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d3ce      	bcc.n	8016ab2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	695a      	ldr	r2, [r3, #20]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8016b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f004 fb03 	bl	801b134 <USB_ReadInterrupts>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016b38:	d155      	bne.n	8016be6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b3e:	e045      	b.n	8016bcc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8016b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b42:	015a      	lsls	r2, r3, #5
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	4413      	add	r3, r2
 8016b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8016b50:	6879      	ldr	r1, [r7, #4]
 8016b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b54:	4613      	mov	r3, r2
 8016b56:	00db      	lsls	r3, r3, #3
 8016b58:	4413      	add	r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	440b      	add	r3, r1
 8016b5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d12e      	bne.n	8016bc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8016b68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	da2b      	bge.n	8016bc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8016b6e:	69bb      	ldr	r3, [r7, #24]
 8016b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8016b7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d121      	bne.n	8016bc6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8016b82:	6879      	ldr	r1, [r7, #4]
 8016b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b86:	4613      	mov	r3, r2
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	4413      	add	r3, r2
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	440b      	add	r3, r1
 8016b90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8016b94:	2201      	movs	r2, #1
 8016b96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8016b98:	6a3b      	ldr	r3, [r7, #32]
 8016b9a:	699b      	ldr	r3, [r3, #24]
 8016b9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8016ba0:	6a3b      	ldr	r3, [r7, #32]
 8016ba2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8016ba4:	6a3b      	ldr	r3, [r7, #32]
 8016ba6:	695b      	ldr	r3, [r3, #20]
 8016ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d10a      	bne.n	8016bc6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	69fa      	ldr	r2, [r7, #28]
 8016bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016bc2:	6053      	str	r3, [r2, #4]
            break;
 8016bc4:	e007      	b.n	8016bd6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	3301      	adds	r3, #1
 8016bca:	627b      	str	r3, [r7, #36]	; 0x24
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d3b4      	bcc.n	8016b40 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	695a      	ldr	r2, [r3, #20]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8016be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f004 faa2 	bl	801b134 <USB_ReadInterrupts>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016bfa:	d10a      	bne.n	8016c12 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f006 fe7b 	bl	801d8f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	695a      	ldr	r2, [r3, #20]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8016c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f004 fa8c 	bl	801b134 <USB_ReadInterrupts>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	f003 0304 	and.w	r3, r3, #4
 8016c22:	2b04      	cmp	r3, #4
 8016c24:	d115      	bne.n	8016c52 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8016c2e:	69bb      	ldr	r3, [r7, #24]
 8016c30:	f003 0304 	and.w	r3, r3, #4
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d002      	beq.n	8016c3e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f006 fe6b 	bl	801d914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	6859      	ldr	r1, [r3, #4]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	69ba      	ldr	r2, [r7, #24]
 8016c4a:	430a      	orrs	r2, r1
 8016c4c:	605a      	str	r2, [r3, #4]
 8016c4e:	e000      	b.n	8016c52 <HAL_PCD_IRQHandler+0x938>
      return;
 8016c50:	bf00      	nop
    }
  }
}
 8016c52:	3734      	adds	r7, #52	; 0x34
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd90      	pop	{r4, r7, pc}

08016c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	460b      	mov	r3, r1
 8016c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d101      	bne.n	8016c72 <HAL_PCD_SetAddress+0x1a>
 8016c6e:	2302      	movs	r3, #2
 8016c70:	e013      	b.n	8016c9a <HAL_PCD_SetAddress+0x42>
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2201      	movs	r2, #1
 8016c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	78fa      	ldrb	r2, [r7, #3]
 8016c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	78fa      	ldrb	r2, [r7, #3]
 8016c88:	4611      	mov	r1, r2
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f004 f9ea 	bl	801b064 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2200      	movs	r2, #0
 8016c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8016c98:	2300      	movs	r3, #0
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b084      	sub	sp, #16
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	6078      	str	r0, [r7, #4]
 8016caa:	4608      	mov	r0, r1
 8016cac:	4611      	mov	r1, r2
 8016cae:	461a      	mov	r2, r3
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	70fb      	strb	r3, [r7, #3]
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	803b      	strh	r3, [r7, #0]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8016cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	da0f      	bge.n	8016ce8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016cc8:	78fb      	ldrb	r3, [r7, #3]
 8016cca:	f003 020f 	and.w	r2, r3, #15
 8016cce:	4613      	mov	r3, r2
 8016cd0:	00db      	lsls	r3, r3, #3
 8016cd2:	4413      	add	r3, r2
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	3338      	adds	r3, #56	; 0x38
 8016cd8:	687a      	ldr	r2, [r7, #4]
 8016cda:	4413      	add	r3, r2
 8016cdc:	3304      	adds	r3, #4
 8016cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	705a      	strb	r2, [r3, #1]
 8016ce6:	e00f      	b.n	8016d08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016ce8:	78fb      	ldrb	r3, [r7, #3]
 8016cea:	f003 020f 	and.w	r2, r3, #15
 8016cee:	4613      	mov	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	4413      	add	r3, r2
 8016cf4:	009b      	lsls	r3, r3, #2
 8016cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	4413      	add	r3, r2
 8016cfe:	3304      	adds	r3, #4
 8016d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2200      	movs	r2, #0
 8016d06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016d08:	78fb      	ldrb	r3, [r7, #3]
 8016d0a:	f003 030f 	and.w	r3, r3, #15
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8016d14:	883a      	ldrh	r2, [r7, #0]
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	78ba      	ldrb	r2, [r7, #2]
 8016d1e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	785b      	ldrb	r3, [r3, #1]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d004      	beq.n	8016d32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8016d32:	78bb      	ldrb	r3, [r7, #2]
 8016d34:	2b02      	cmp	r3, #2
 8016d36:	d102      	bne.n	8016d3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	d101      	bne.n	8016d4c <HAL_PCD_EP_Open+0xaa>
 8016d48:	2302      	movs	r3, #2
 8016d4a:	e00e      	b.n	8016d6a <HAL_PCD_EP_Open+0xc8>
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2201      	movs	r2, #1
 8016d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	68f9      	ldr	r1, [r7, #12]
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f003 fa6a 	bl	801a234 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2200      	movs	r2, #0
 8016d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8016d68:	7afb      	ldrb	r3, [r7, #11]
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3710      	adds	r7, #16
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}

08016d72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016d72:	b580      	push	{r7, lr}
 8016d74:	b084      	sub	sp, #16
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6078      	str	r0, [r7, #4]
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8016d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	da0f      	bge.n	8016da6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016d86:	78fb      	ldrb	r3, [r7, #3]
 8016d88:	f003 020f 	and.w	r2, r3, #15
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	00db      	lsls	r3, r3, #3
 8016d90:	4413      	add	r3, r2
 8016d92:	009b      	lsls	r3, r3, #2
 8016d94:	3338      	adds	r3, #56	; 0x38
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	4413      	add	r3, r2
 8016d9a:	3304      	adds	r3, #4
 8016d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2201      	movs	r2, #1
 8016da2:	705a      	strb	r2, [r3, #1]
 8016da4:	e00f      	b.n	8016dc6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016da6:	78fb      	ldrb	r3, [r7, #3]
 8016da8:	f003 020f 	and.w	r2, r3, #15
 8016dac:	4613      	mov	r3, r2
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	4413      	add	r3, r2
 8016db2:	009b      	lsls	r3, r3, #2
 8016db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016db8:	687a      	ldr	r2, [r7, #4]
 8016dba:	4413      	add	r3, r2
 8016dbc:	3304      	adds	r3, #4
 8016dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8016dc6:	78fb      	ldrb	r3, [r7, #3]
 8016dc8:	f003 030f 	and.w	r3, r3, #15
 8016dcc:	b2da      	uxtb	r2, r3
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d101      	bne.n	8016de0 <HAL_PCD_EP_Close+0x6e>
 8016ddc:	2302      	movs	r3, #2
 8016dde:	e00e      	b.n	8016dfe <HAL_PCD_EP_Close+0x8c>
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2201      	movs	r2, #1
 8016de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	68f9      	ldr	r1, [r7, #12]
 8016dee:	4618      	mov	r0, r3
 8016df0:	f003 faa8 	bl	801a344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2200      	movs	r2, #0
 8016df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8016dfc:	2300      	movs	r3, #0
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b086      	sub	sp, #24
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	60f8      	str	r0, [r7, #12]
 8016e0e:	607a      	str	r2, [r7, #4]
 8016e10:	603b      	str	r3, [r7, #0]
 8016e12:	460b      	mov	r3, r1
 8016e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016e16:	7afb      	ldrb	r3, [r7, #11]
 8016e18:	f003 020f 	and.w	r2, r3, #15
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	00db      	lsls	r3, r3, #3
 8016e20:	4413      	add	r3, r2
 8016e22:	009b      	lsls	r3, r3, #2
 8016e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	4413      	add	r3, r2
 8016e2c:	3304      	adds	r3, #4
 8016e2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	687a      	ldr	r2, [r7, #4]
 8016e34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	683a      	ldr	r2, [r7, #0]
 8016e3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	2200      	movs	r2, #0
 8016e46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016e48:	7afb      	ldrb	r3, [r7, #11]
 8016e4a:	f003 030f 	and.w	r3, r3, #15
 8016e4e:	b2da      	uxtb	r2, r3
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	691b      	ldr	r3, [r3, #16]
 8016e58:	2b01      	cmp	r3, #1
 8016e5a:	d102      	bne.n	8016e62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8016e5c:	687a      	ldr	r2, [r7, #4]
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016e62:	7afb      	ldrb	r3, [r7, #11]
 8016e64:	f003 030f 	and.w	r3, r3, #15
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d109      	bne.n	8016e80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	6818      	ldr	r0, [r3, #0]
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	691b      	ldr	r3, [r3, #16]
 8016e74:	b2db      	uxtb	r3, r3
 8016e76:	461a      	mov	r2, r3
 8016e78:	6979      	ldr	r1, [r7, #20]
 8016e7a:	f003 fd87 	bl	801a98c <USB_EP0StartXfer>
 8016e7e:	e008      	b.n	8016e92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	6818      	ldr	r0, [r3, #0]
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	691b      	ldr	r3, [r3, #16]
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	6979      	ldr	r1, [r7, #20]
 8016e8e:	f003 fb35 	bl	801a4fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8016e92:	2300      	movs	r3, #0
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3718      	adds	r7, #24
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}

08016e9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b083      	sub	sp, #12
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	460b      	mov	r3, r1
 8016ea6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8016ea8:	78fb      	ldrb	r3, [r7, #3]
 8016eaa:	f003 020f 	and.w	r2, r3, #15
 8016eae:	6879      	ldr	r1, [r7, #4]
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	00db      	lsls	r3, r3, #3
 8016eb4:	4413      	add	r3, r2
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	440b      	add	r3, r1
 8016eba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8016ebe:	681b      	ldr	r3, [r3, #0]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	370c      	adds	r7, #12
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eca:	4770      	bx	lr

08016ecc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b086      	sub	sp, #24
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	60f8      	str	r0, [r7, #12]
 8016ed4:	607a      	str	r2, [r7, #4]
 8016ed6:	603b      	str	r3, [r7, #0]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016edc:	7afb      	ldrb	r3, [r7, #11]
 8016ede:	f003 020f 	and.w	r2, r3, #15
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	00db      	lsls	r3, r3, #3
 8016ee6:	4413      	add	r3, r2
 8016ee8:	009b      	lsls	r3, r3, #2
 8016eea:	3338      	adds	r3, #56	; 0x38
 8016eec:	68fa      	ldr	r2, [r7, #12]
 8016eee:	4413      	add	r3, r2
 8016ef0:	3304      	adds	r3, #4
 8016ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	683a      	ldr	r2, [r7, #0]
 8016efe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	2200      	movs	r2, #0
 8016f04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	2201      	movs	r2, #1
 8016f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016f0c:	7afb      	ldrb	r3, [r7, #11]
 8016f0e:	f003 030f 	and.w	r3, r3, #15
 8016f12:	b2da      	uxtb	r2, r3
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	691b      	ldr	r3, [r3, #16]
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d102      	bne.n	8016f26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016f26:	7afb      	ldrb	r3, [r7, #11]
 8016f28:	f003 030f 	and.w	r3, r3, #15
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d109      	bne.n	8016f44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	6818      	ldr	r0, [r3, #0]
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	691b      	ldr	r3, [r3, #16]
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	6979      	ldr	r1, [r7, #20]
 8016f3e:	f003 fd25 	bl	801a98c <USB_EP0StartXfer>
 8016f42:	e008      	b.n	8016f56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	6818      	ldr	r0, [r3, #0]
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	691b      	ldr	r3, [r3, #16]
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	461a      	mov	r2, r3
 8016f50:	6979      	ldr	r1, [r7, #20]
 8016f52:	f003 fad3 	bl	801a4fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8016f56:	2300      	movs	r3, #0
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3718      	adds	r7, #24
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	460b      	mov	r3, r1
 8016f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8016f6c:	78fb      	ldrb	r3, [r7, #3]
 8016f6e:	f003 020f 	and.w	r2, r3, #15
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	685b      	ldr	r3, [r3, #4]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d901      	bls.n	8016f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	e050      	b.n	8017020 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	da0f      	bge.n	8016fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016f86:	78fb      	ldrb	r3, [r7, #3]
 8016f88:	f003 020f 	and.w	r2, r3, #15
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	4413      	add	r3, r2
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	3338      	adds	r3, #56	; 0x38
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	4413      	add	r3, r2
 8016f9a:	3304      	adds	r3, #4
 8016f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	705a      	strb	r2, [r3, #1]
 8016fa4:	e00d      	b.n	8016fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8016fa6:	78fa      	ldrb	r2, [r7, #3]
 8016fa8:	4613      	mov	r3, r2
 8016faa:	00db      	lsls	r3, r3, #3
 8016fac:	4413      	add	r3, r2
 8016fae:	009b      	lsls	r3, r3, #2
 8016fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8016fb4:	687a      	ldr	r2, [r7, #4]
 8016fb6:	4413      	add	r3, r2
 8016fb8:	3304      	adds	r3, #4
 8016fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2201      	movs	r2, #1
 8016fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016fc8:	78fb      	ldrb	r3, [r7, #3]
 8016fca:	f003 030f 	and.w	r3, r3, #15
 8016fce:	b2da      	uxtb	r2, r3
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8016fda:	2b01      	cmp	r3, #1
 8016fdc:	d101      	bne.n	8016fe2 <HAL_PCD_EP_SetStall+0x82>
 8016fde:	2302      	movs	r3, #2
 8016fe0:	e01e      	b.n	8017020 <HAL_PCD_EP_SetStall+0xc0>
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	68f9      	ldr	r1, [r7, #12]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f003 ff63 	bl	801aebc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8016ff6:	78fb      	ldrb	r3, [r7, #3]
 8016ff8:	f003 030f 	and.w	r3, r3, #15
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d10a      	bne.n	8017016 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6818      	ldr	r0, [r3, #0]
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	691b      	ldr	r3, [r3, #16]
 8017008:	b2d9      	uxtb	r1, r3
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017010:	461a      	mov	r2, r3
 8017012:	f004 f953 	bl	801b2bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2200      	movs	r2, #0
 801701a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801701e:	2300      	movs	r3, #0
}
 8017020:	4618      	mov	r0, r3
 8017022:	3710      	adds	r7, #16
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	460b      	mov	r3, r1
 8017032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017034:	78fb      	ldrb	r3, [r7, #3]
 8017036:	f003 020f 	and.w	r2, r3, #15
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	429a      	cmp	r2, r3
 8017040:	d901      	bls.n	8017046 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8017042:	2301      	movs	r3, #1
 8017044:	e042      	b.n	80170cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8017046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801704a:	2b00      	cmp	r3, #0
 801704c:	da0f      	bge.n	801706e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801704e:	78fb      	ldrb	r3, [r7, #3]
 8017050:	f003 020f 	and.w	r2, r3, #15
 8017054:	4613      	mov	r3, r2
 8017056:	00db      	lsls	r3, r3, #3
 8017058:	4413      	add	r3, r2
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	3338      	adds	r3, #56	; 0x38
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	4413      	add	r3, r2
 8017062:	3304      	adds	r3, #4
 8017064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2201      	movs	r2, #1
 801706a:	705a      	strb	r2, [r3, #1]
 801706c:	e00f      	b.n	801708e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801706e:	78fb      	ldrb	r3, [r7, #3]
 8017070:	f003 020f 	and.w	r2, r3, #15
 8017074:	4613      	mov	r3, r2
 8017076:	00db      	lsls	r3, r3, #3
 8017078:	4413      	add	r3, r2
 801707a:	009b      	lsls	r3, r3, #2
 801707c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	4413      	add	r3, r2
 8017084:	3304      	adds	r3, #4
 8017086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2200      	movs	r2, #0
 801708c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	2200      	movs	r2, #0
 8017092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017094:	78fb      	ldrb	r3, [r7, #3]
 8017096:	f003 030f 	and.w	r3, r3, #15
 801709a:	b2da      	uxtb	r2, r3
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d101      	bne.n	80170ae <HAL_PCD_EP_ClrStall+0x86>
 80170aa:	2302      	movs	r3, #2
 80170ac:	e00e      	b.n	80170cc <HAL_PCD_EP_ClrStall+0xa4>
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2201      	movs	r2, #1
 80170b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	68f9      	ldr	r1, [r7, #12]
 80170bc:	4618      	mov	r0, r3
 80170be:	f003 ff6b 	bl	801af98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2200      	movs	r2, #0
 80170c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80170ca:	2300      	movs	r3, #0
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	3710      	adds	r7, #16
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}

080170d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b084      	sub	sp, #16
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
 80170dc:	460b      	mov	r3, r1
 80170de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80170e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	da0c      	bge.n	8017102 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80170e8:	78fb      	ldrb	r3, [r7, #3]
 80170ea:	f003 020f 	and.w	r2, r3, #15
 80170ee:	4613      	mov	r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	4413      	add	r3, r2
 80170f4:	009b      	lsls	r3, r3, #2
 80170f6:	3338      	adds	r3, #56	; 0x38
 80170f8:	687a      	ldr	r2, [r7, #4]
 80170fa:	4413      	add	r3, r2
 80170fc:	3304      	adds	r3, #4
 80170fe:	60fb      	str	r3, [r7, #12]
 8017100:	e00c      	b.n	801711c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017102:	78fb      	ldrb	r3, [r7, #3]
 8017104:	f003 020f 	and.w	r2, r3, #15
 8017108:	4613      	mov	r3, r2
 801710a:	00db      	lsls	r3, r3, #3
 801710c:	4413      	add	r3, r2
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	4413      	add	r3, r2
 8017118:	3304      	adds	r3, #4
 801711a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	68f9      	ldr	r1, [r7, #12]
 8017122:	4618      	mov	r0, r3
 8017124:	f003 fd8a 	bl	801ac3c <USB_EPStopXfer>
 8017128:	4603      	mov	r3, r0
 801712a:	72fb      	strb	r3, [r7, #11]

  return ret;
 801712c:	7afb      	ldrb	r3, [r7, #11]
}
 801712e:	4618      	mov	r0, r3
 8017130:	3710      	adds	r7, #16
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017136:	b580      	push	{r7, lr}
 8017138:	b08a      	sub	sp, #40	; 0x28
 801713a:	af02      	add	r7, sp, #8
 801713c:	6078      	str	r0, [r7, #4]
 801713e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801714a:	683a      	ldr	r2, [r7, #0]
 801714c:	4613      	mov	r3, r2
 801714e:	00db      	lsls	r3, r3, #3
 8017150:	4413      	add	r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	3338      	adds	r3, #56	; 0x38
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	4413      	add	r3, r2
 801715a:	3304      	adds	r3, #4
 801715c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	6a1a      	ldr	r2, [r3, #32]
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	699b      	ldr	r3, [r3, #24]
 8017166:	429a      	cmp	r2, r3
 8017168:	d901      	bls.n	801716e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801716a:	2301      	movs	r3, #1
 801716c:	e06c      	b.n	8017248 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	699a      	ldr	r2, [r3, #24]
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	6a1b      	ldr	r3, [r3, #32]
 8017176:	1ad3      	subs	r3, r2, r3
 8017178:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	68db      	ldr	r3, [r3, #12]
 801717e:	69fa      	ldr	r2, [r7, #28]
 8017180:	429a      	cmp	r2, r3
 8017182:	d902      	bls.n	801718a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	3303      	adds	r3, #3
 801718e:	089b      	lsrs	r3, r3, #2
 8017190:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8017192:	e02b      	b.n	80171ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	699a      	ldr	r2, [r3, #24]
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	6a1b      	ldr	r3, [r3, #32]
 801719c:	1ad3      	subs	r3, r2, r3
 801719e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	68db      	ldr	r3, [r3, #12]
 80171a4:	69fa      	ldr	r2, [r7, #28]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d902      	bls.n	80171b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	68db      	ldr	r3, [r3, #12]
 80171ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80171b0:	69fb      	ldr	r3, [r7, #28]
 80171b2:	3303      	adds	r3, #3
 80171b4:	089b      	lsrs	r3, r3, #2
 80171b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	6919      	ldr	r1, [r3, #16]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	b2da      	uxtb	r2, r3
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	9300      	str	r3, [sp, #0]
 80171cc:	4603      	mov	r3, r0
 80171ce:	6978      	ldr	r0, [r7, #20]
 80171d0:	f003 fdde 	bl	801ad90 <USB_WritePacket>

    ep->xfer_buff  += len;
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	691a      	ldr	r2, [r3, #16]
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	441a      	add	r2, r3
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6a1a      	ldr	r2, [r3, #32]
 80171e4:	69fb      	ldr	r3, [r7, #28]
 80171e6:	441a      	add	r2, r3
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	015a      	lsls	r2, r3, #5
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	4413      	add	r3, r2
 80171f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80171f8:	699b      	ldr	r3, [r3, #24]
 80171fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80171fc:	69ba      	ldr	r2, [r7, #24]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d809      	bhi.n	8017216 <PCD_WriteEmptyTxFifo+0xe0>
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	6a1a      	ldr	r2, [r3, #32]
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801720a:	429a      	cmp	r2, r3
 801720c:	d203      	bcs.n	8017216 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	699b      	ldr	r3, [r3, #24]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1be      	bne.n	8017194 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	699a      	ldr	r2, [r3, #24]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	6a1b      	ldr	r3, [r3, #32]
 801721e:	429a      	cmp	r2, r3
 8017220:	d811      	bhi.n	8017246 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	f003 030f 	and.w	r3, r3, #15
 8017228:	2201      	movs	r2, #1
 801722a:	fa02 f303 	lsl.w	r3, r2, r3
 801722e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	43db      	mvns	r3, r3
 801723c:	6939      	ldr	r1, [r7, #16]
 801723e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017242:	4013      	ands	r3, r2
 8017244:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8017246:	2300      	movs	r3, #0
}
 8017248:	4618      	mov	r0, r3
 801724a:	3720      	adds	r7, #32
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b088      	sub	sp, #32
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017260:	69fb      	ldr	r3, [r7, #28]
 8017262:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017264:	69fb      	ldr	r3, [r7, #28]
 8017266:	333c      	adds	r3, #60	; 0x3c
 8017268:	3304      	adds	r3, #4
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	015a      	lsls	r2, r3, #5
 8017272:	69bb      	ldr	r3, [r7, #24]
 8017274:	4413      	add	r3, r2
 8017276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801727a:	689b      	ldr	r3, [r3, #8]
 801727c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	691b      	ldr	r3, [r3, #16]
 8017282:	2b01      	cmp	r3, #1
 8017284:	d17b      	bne.n	801737e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f003 0308 	and.w	r3, r3, #8
 801728c:	2b00      	cmp	r3, #0
 801728e:	d015      	beq.n	80172bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	4a61      	ldr	r2, [pc, #388]	; (8017418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8017294:	4293      	cmp	r3, r2
 8017296:	f240 80b9 	bls.w	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	f000 80b3 	beq.w	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	015a      	lsls	r2, r3, #5
 80172aa:	69bb      	ldr	r3, [r7, #24]
 80172ac:	4413      	add	r3, r2
 80172ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80172b2:	461a      	mov	r2, r3
 80172b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80172b8:	6093      	str	r3, [r2, #8]
 80172ba:	e0a7      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	f003 0320 	and.w	r3, r3, #32
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d009      	beq.n	80172da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	015a      	lsls	r2, r3, #5
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	4413      	add	r3, r2
 80172ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80172d2:	461a      	mov	r2, r3
 80172d4:	2320      	movs	r3, #32
 80172d6:	6093      	str	r3, [r2, #8]
 80172d8:	e098      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	f040 8093 	bne.w	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	4a4b      	ldr	r2, [pc, #300]	; (8017418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d90f      	bls.n	801730e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d00a      	beq.n	801730e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	015a      	lsls	r2, r3, #5
 80172fc:	69bb      	ldr	r3, [r7, #24]
 80172fe:	4413      	add	r3, r2
 8017300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017304:	461a      	mov	r2, r3
 8017306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801730a:	6093      	str	r3, [r2, #8]
 801730c:	e07e      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801730e:	683a      	ldr	r2, [r7, #0]
 8017310:	4613      	mov	r3, r2
 8017312:	00db      	lsls	r3, r3, #3
 8017314:	4413      	add	r3, r2
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801731c:	687a      	ldr	r2, [r7, #4]
 801731e:	4413      	add	r3, r2
 8017320:	3304      	adds	r3, #4
 8017322:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	69da      	ldr	r2, [r3, #28]
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	0159      	lsls	r1, r3, #5
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	440b      	add	r3, r1
 8017330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017334:	691b      	ldr	r3, [r3, #16]
 8017336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801733a:	1ad2      	subs	r2, r2, r3
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d114      	bne.n	8017370 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	699b      	ldr	r3, [r3, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d109      	bne.n	8017362 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6818      	ldr	r0, [r3, #0]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017358:	461a      	mov	r2, r3
 801735a:	2101      	movs	r1, #1
 801735c:	f003 ffae 	bl	801b2bc <USB_EP0_OutStart>
 8017360:	e006      	b.n	8017370 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	691a      	ldr	r2, [r3, #16]
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	6a1b      	ldr	r3, [r3, #32]
 801736a:	441a      	add	r2, r3
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	b2db      	uxtb	r3, r3
 8017374:	4619      	mov	r1, r3
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f006 f9fa 	bl	801d770 <HAL_PCD_DataOutStageCallback>
 801737c:	e046      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801737e:	697b      	ldr	r3, [r7, #20]
 8017380:	4a26      	ldr	r2, [pc, #152]	; (801741c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8017382:	4293      	cmp	r3, r2
 8017384:	d124      	bne.n	80173d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00a      	beq.n	80173a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	015a      	lsls	r2, r3, #5
 8017394:	69bb      	ldr	r3, [r7, #24]
 8017396:	4413      	add	r3, r2
 8017398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801739c:	461a      	mov	r2, r3
 801739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80173a2:	6093      	str	r3, [r2, #8]
 80173a4:	e032      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	f003 0320 	and.w	r3, r3, #32
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d008      	beq.n	80173c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	015a      	lsls	r2, r3, #5
 80173b4:	69bb      	ldr	r3, [r7, #24]
 80173b6:	4413      	add	r3, r2
 80173b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173bc:	461a      	mov	r2, r3
 80173be:	2320      	movs	r3, #32
 80173c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	4619      	mov	r1, r3
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f006 f9d1 	bl	801d770 <HAL_PCD_DataOutStageCallback>
 80173ce:	e01d      	b.n	801740c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d114      	bne.n	8017400 <PCD_EP_OutXfrComplete_int+0x1b0>
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	683a      	ldr	r2, [r7, #0]
 80173da:	4613      	mov	r3, r2
 80173dc:	00db      	lsls	r3, r3, #3
 80173de:	4413      	add	r3, r2
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	440b      	add	r3, r1
 80173e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d108      	bne.n	8017400 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6818      	ldr	r0, [r3, #0]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80173f8:	461a      	mov	r2, r3
 80173fa:	2100      	movs	r1, #0
 80173fc:	f003 ff5e 	bl	801b2bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	b2db      	uxtb	r3, r3
 8017404:	4619      	mov	r1, r3
 8017406:	6878      	ldr	r0, [r7, #4]
 8017408:	f006 f9b2 	bl	801d770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801740c:	2300      	movs	r3, #0
}
 801740e:	4618      	mov	r0, r3
 8017410:	3720      	adds	r7, #32
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
 8017416:	bf00      	nop
 8017418:	4f54300a 	.word	0x4f54300a
 801741c:	4f54310a 	.word	0x4f54310a

08017420 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b086      	sub	sp, #24
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
 8017428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	333c      	adds	r3, #60	; 0x3c
 8017438:	3304      	adds	r3, #4
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	015a      	lsls	r2, r3, #5
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	4413      	add	r3, r2
 8017446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801744a:	689b      	ldr	r3, [r3, #8]
 801744c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	4a15      	ldr	r2, [pc, #84]	; (80174a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d90e      	bls.n	8017474 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801745c:	2b00      	cmp	r3, #0
 801745e:	d009      	beq.n	8017474 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	015a      	lsls	r2, r3, #5
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	4413      	add	r3, r2
 8017468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801746c:	461a      	mov	r2, r3
 801746e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017472:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f006 f969 	bl	801d74c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	4a0a      	ldr	r2, [pc, #40]	; (80174a8 <PCD_EP_OutSetupPacket_int+0x88>)
 801747e:	4293      	cmp	r3, r2
 8017480:	d90c      	bls.n	801749c <PCD_EP_OutSetupPacket_int+0x7c>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	691b      	ldr	r3, [r3, #16]
 8017486:	2b01      	cmp	r3, #1
 8017488:	d108      	bne.n	801749c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6818      	ldr	r0, [r3, #0]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017494:	461a      	mov	r2, r3
 8017496:	2101      	movs	r1, #1
 8017498:	f003 ff10 	bl	801b2bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 801749c:	2300      	movs	r3, #0
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3718      	adds	r7, #24
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	4f54300a 	.word	0x4f54300a

080174ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	460b      	mov	r3, r1
 80174b6:	70fb      	strb	r3, [r7, #3]
 80174b8:	4613      	mov	r3, r2
 80174ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80174c4:	78fb      	ldrb	r3, [r7, #3]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d107      	bne.n	80174da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80174ca:	883b      	ldrh	r3, [r7, #0]
 80174cc:	0419      	lsls	r1, r3, #16
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	68ba      	ldr	r2, [r7, #8]
 80174d4:	430a      	orrs	r2, r1
 80174d6:	629a      	str	r2, [r3, #40]	; 0x28
 80174d8:	e028      	b.n	801752c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174e0:	0c1b      	lsrs	r3, r3, #16
 80174e2:	68ba      	ldr	r2, [r7, #8]
 80174e4:	4413      	add	r3, r2
 80174e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80174e8:	2300      	movs	r3, #0
 80174ea:	73fb      	strb	r3, [r7, #15]
 80174ec:	e00d      	b.n	801750a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681a      	ldr	r2, [r3, #0]
 80174f2:	7bfb      	ldrb	r3, [r7, #15]
 80174f4:	3340      	adds	r3, #64	; 0x40
 80174f6:	009b      	lsls	r3, r3, #2
 80174f8:	4413      	add	r3, r2
 80174fa:	685b      	ldr	r3, [r3, #4]
 80174fc:	0c1b      	lsrs	r3, r3, #16
 80174fe:	68ba      	ldr	r2, [r7, #8]
 8017500:	4413      	add	r3, r2
 8017502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8017504:	7bfb      	ldrb	r3, [r7, #15]
 8017506:	3301      	adds	r3, #1
 8017508:	73fb      	strb	r3, [r7, #15]
 801750a:	7bfa      	ldrb	r2, [r7, #15]
 801750c:	78fb      	ldrb	r3, [r7, #3]
 801750e:	3b01      	subs	r3, #1
 8017510:	429a      	cmp	r2, r3
 8017512:	d3ec      	bcc.n	80174ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8017514:	883b      	ldrh	r3, [r7, #0]
 8017516:	0418      	lsls	r0, r3, #16
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6819      	ldr	r1, [r3, #0]
 801751c:	78fb      	ldrb	r3, [r7, #3]
 801751e:	3b01      	subs	r3, #1
 8017520:	68ba      	ldr	r2, [r7, #8]
 8017522:	4302      	orrs	r2, r0
 8017524:	3340      	adds	r3, #64	; 0x40
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	440b      	add	r3, r1
 801752a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801752c:	2300      	movs	r3, #0
}
 801752e:	4618      	mov	r0, r3
 8017530:	3714      	adds	r7, #20
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr

0801753a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801753a:	b480      	push	{r7}
 801753c:	b083      	sub	sp, #12
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	460b      	mov	r3, r1
 8017544:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	887a      	ldrh	r2, [r7, #2]
 801754c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801754e:	2300      	movs	r3, #0
}
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8017568:	bf00      	nop
 801756a:	370c      	adds	r7, #12
 801756c:	46bd      	mov	sp, r7
 801756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017572:	4770      	bx	lr

08017574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b086      	sub	sp, #24
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d101      	bne.n	8017586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8017582:	2301      	movs	r3, #1
 8017584:	e267      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	f003 0301 	and.w	r3, r3, #1
 801758e:	2b00      	cmp	r3, #0
 8017590:	d075      	beq.n	801767e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8017592:	4b88      	ldr	r3, [pc, #544]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017594:	689b      	ldr	r3, [r3, #8]
 8017596:	f003 030c 	and.w	r3, r3, #12
 801759a:	2b04      	cmp	r3, #4
 801759c:	d00c      	beq.n	80175b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801759e:	4b85      	ldr	r3, [pc, #532]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175a0:	689b      	ldr	r3, [r3, #8]
 80175a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80175a6:	2b08      	cmp	r3, #8
 80175a8:	d112      	bne.n	80175d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80175aa:	4b82      	ldr	r3, [pc, #520]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80175b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80175b6:	d10b      	bne.n	80175d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80175b8:	4b7e      	ldr	r3, [pc, #504]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d05b      	beq.n	801767c <HAL_RCC_OscConfig+0x108>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	685b      	ldr	r3, [r3, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d157      	bne.n	801767c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80175cc:	2301      	movs	r3, #1
 80175ce:	e242      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80175d8:	d106      	bne.n	80175e8 <HAL_RCC_OscConfig+0x74>
 80175da:	4b76      	ldr	r3, [pc, #472]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	4a75      	ldr	r2, [pc, #468]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80175e4:	6013      	str	r3, [r2, #0]
 80175e6:	e01d      	b.n	8017624 <HAL_RCC_OscConfig+0xb0>
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80175f0:	d10c      	bne.n	801760c <HAL_RCC_OscConfig+0x98>
 80175f2:	4b70      	ldr	r3, [pc, #448]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	4a6f      	ldr	r2, [pc, #444]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80175f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80175fc:	6013      	str	r3, [r2, #0]
 80175fe:	4b6d      	ldr	r3, [pc, #436]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	4a6c      	ldr	r2, [pc, #432]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017608:	6013      	str	r3, [r2, #0]
 801760a:	e00b      	b.n	8017624 <HAL_RCC_OscConfig+0xb0>
 801760c:	4b69      	ldr	r3, [pc, #420]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	4a68      	ldr	r2, [pc, #416]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017616:	6013      	str	r3, [r2, #0]
 8017618:	4b66      	ldr	r3, [pc, #408]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4a65      	ldr	r2, [pc, #404]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 801761e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d013      	beq.n	8017654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801762c:	f7fc ff02 	bl	8014434 <HAL_GetTick>
 8017630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017632:	e008      	b.n	8017646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017634:	f7fc fefe 	bl	8014434 <HAL_GetTick>
 8017638:	4602      	mov	r2, r0
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	2b64      	cmp	r3, #100	; 0x64
 8017640:	d901      	bls.n	8017646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8017642:	2303      	movs	r3, #3
 8017644:	e207      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017646:	4b5b      	ldr	r3, [pc, #364]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801764e:	2b00      	cmp	r3, #0
 8017650:	d0f0      	beq.n	8017634 <HAL_RCC_OscConfig+0xc0>
 8017652:	e014      	b.n	801767e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017654:	f7fc feee 	bl	8014434 <HAL_GetTick>
 8017658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801765a:	e008      	b.n	801766e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801765c:	f7fc feea 	bl	8014434 <HAL_GetTick>
 8017660:	4602      	mov	r2, r0
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	1ad3      	subs	r3, r2, r3
 8017666:	2b64      	cmp	r3, #100	; 0x64
 8017668:	d901      	bls.n	801766e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801766a:	2303      	movs	r3, #3
 801766c:	e1f3      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801766e:	4b51      	ldr	r3, [pc, #324]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017676:	2b00      	cmp	r3, #0
 8017678:	d1f0      	bne.n	801765c <HAL_RCC_OscConfig+0xe8>
 801767a:	e000      	b.n	801767e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801767c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f003 0302 	and.w	r3, r3, #2
 8017686:	2b00      	cmp	r3, #0
 8017688:	d063      	beq.n	8017752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801768a:	4b4a      	ldr	r3, [pc, #296]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 801768c:	689b      	ldr	r3, [r3, #8]
 801768e:	f003 030c 	and.w	r3, r3, #12
 8017692:	2b00      	cmp	r3, #0
 8017694:	d00b      	beq.n	80176ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017696:	4b47      	ldr	r3, [pc, #284]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017698:	689b      	ldr	r3, [r3, #8]
 801769a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801769e:	2b08      	cmp	r3, #8
 80176a0:	d11c      	bne.n	80176dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80176a2:	4b44      	ldr	r3, [pc, #272]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80176a4:	685b      	ldr	r3, [r3, #4]
 80176a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d116      	bne.n	80176dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80176ae:	4b41      	ldr	r3, [pc, #260]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	f003 0302 	and.w	r3, r3, #2
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d005      	beq.n	80176c6 <HAL_RCC_OscConfig+0x152>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	68db      	ldr	r3, [r3, #12]
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d001      	beq.n	80176c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80176c2:	2301      	movs	r3, #1
 80176c4:	e1c7      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80176c6:	4b3b      	ldr	r3, [pc, #236]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	691b      	ldr	r3, [r3, #16]
 80176d2:	00db      	lsls	r3, r3, #3
 80176d4:	4937      	ldr	r1, [pc, #220]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 80176d6:	4313      	orrs	r3, r2
 80176d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80176da:	e03a      	b.n	8017752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	68db      	ldr	r3, [r3, #12]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d020      	beq.n	8017726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80176e4:	4b34      	ldr	r3, [pc, #208]	; (80177b8 <HAL_RCC_OscConfig+0x244>)
 80176e6:	2201      	movs	r2, #1
 80176e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80176ea:	f7fc fea3 	bl	8014434 <HAL_GetTick>
 80176ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80176f0:	e008      	b.n	8017704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80176f2:	f7fc fe9f 	bl	8014434 <HAL_GetTick>
 80176f6:	4602      	mov	r2, r0
 80176f8:	693b      	ldr	r3, [r7, #16]
 80176fa:	1ad3      	subs	r3, r2, r3
 80176fc:	2b02      	cmp	r3, #2
 80176fe:	d901      	bls.n	8017704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8017700:	2303      	movs	r3, #3
 8017702:	e1a8      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017704:	4b2b      	ldr	r3, [pc, #172]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f003 0302 	and.w	r3, r3, #2
 801770c:	2b00      	cmp	r3, #0
 801770e:	d0f0      	beq.n	80176f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017710:	4b28      	ldr	r3, [pc, #160]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	691b      	ldr	r3, [r3, #16]
 801771c:	00db      	lsls	r3, r3, #3
 801771e:	4925      	ldr	r1, [pc, #148]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017720:	4313      	orrs	r3, r2
 8017722:	600b      	str	r3, [r1, #0]
 8017724:	e015      	b.n	8017752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017726:	4b24      	ldr	r3, [pc, #144]	; (80177b8 <HAL_RCC_OscConfig+0x244>)
 8017728:	2200      	movs	r2, #0
 801772a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801772c:	f7fc fe82 	bl	8014434 <HAL_GetTick>
 8017730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017732:	e008      	b.n	8017746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017734:	f7fc fe7e 	bl	8014434 <HAL_GetTick>
 8017738:	4602      	mov	r2, r0
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	1ad3      	subs	r3, r2, r3
 801773e:	2b02      	cmp	r3, #2
 8017740:	d901      	bls.n	8017746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8017742:	2303      	movs	r3, #3
 8017744:	e187      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017746:	4b1b      	ldr	r3, [pc, #108]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	f003 0302 	and.w	r3, r3, #2
 801774e:	2b00      	cmp	r3, #0
 8017750:	d1f0      	bne.n	8017734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f003 0308 	and.w	r3, r3, #8
 801775a:	2b00      	cmp	r3, #0
 801775c:	d036      	beq.n	80177cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	695b      	ldr	r3, [r3, #20]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d016      	beq.n	8017794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017766:	4b15      	ldr	r3, [pc, #84]	; (80177bc <HAL_RCC_OscConfig+0x248>)
 8017768:	2201      	movs	r2, #1
 801776a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801776c:	f7fc fe62 	bl	8014434 <HAL_GetTick>
 8017770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017772:	e008      	b.n	8017786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017774:	f7fc fe5e 	bl	8014434 <HAL_GetTick>
 8017778:	4602      	mov	r2, r0
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	1ad3      	subs	r3, r2, r3
 801777e:	2b02      	cmp	r3, #2
 8017780:	d901      	bls.n	8017786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8017782:	2303      	movs	r3, #3
 8017784:	e167      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017786:	4b0b      	ldr	r3, [pc, #44]	; (80177b4 <HAL_RCC_OscConfig+0x240>)
 8017788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801778a:	f003 0302 	and.w	r3, r3, #2
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0f0      	beq.n	8017774 <HAL_RCC_OscConfig+0x200>
 8017792:	e01b      	b.n	80177cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017794:	4b09      	ldr	r3, [pc, #36]	; (80177bc <HAL_RCC_OscConfig+0x248>)
 8017796:	2200      	movs	r2, #0
 8017798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801779a:	f7fc fe4b 	bl	8014434 <HAL_GetTick>
 801779e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80177a0:	e00e      	b.n	80177c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80177a2:	f7fc fe47 	bl	8014434 <HAL_GetTick>
 80177a6:	4602      	mov	r2, r0
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	1ad3      	subs	r3, r2, r3
 80177ac:	2b02      	cmp	r3, #2
 80177ae:	d907      	bls.n	80177c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80177b0:	2303      	movs	r3, #3
 80177b2:	e150      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
 80177b4:	40023800 	.word	0x40023800
 80177b8:	42470000 	.word	0x42470000
 80177bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80177c0:	4b88      	ldr	r3, [pc, #544]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80177c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177c4:	f003 0302 	and.w	r3, r3, #2
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d1ea      	bne.n	80177a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f003 0304 	and.w	r3, r3, #4
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	f000 8097 	beq.w	8017908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80177da:	2300      	movs	r3, #0
 80177dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80177de:	4b81      	ldr	r3, [pc, #516]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80177e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d10f      	bne.n	801780a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80177ea:	2300      	movs	r3, #0
 80177ec:	60bb      	str	r3, [r7, #8]
 80177ee:	4b7d      	ldr	r3, [pc, #500]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80177f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177f2:	4a7c      	ldr	r2, [pc, #496]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80177f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80177f8:	6413      	str	r3, [r2, #64]	; 0x40
 80177fa:	4b7a      	ldr	r3, [pc, #488]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80177fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017802:	60bb      	str	r3, [r7, #8]
 8017804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017806:	2301      	movs	r3, #1
 8017808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801780a:	4b77      	ldr	r3, [pc, #476]	; (80179e8 <HAL_RCC_OscConfig+0x474>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017812:	2b00      	cmp	r3, #0
 8017814:	d118      	bne.n	8017848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017816:	4b74      	ldr	r3, [pc, #464]	; (80179e8 <HAL_RCC_OscConfig+0x474>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	4a73      	ldr	r2, [pc, #460]	; (80179e8 <HAL_RCC_OscConfig+0x474>)
 801781c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017822:	f7fc fe07 	bl	8014434 <HAL_GetTick>
 8017826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017828:	e008      	b.n	801783c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801782a:	f7fc fe03 	bl	8014434 <HAL_GetTick>
 801782e:	4602      	mov	r2, r0
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	1ad3      	subs	r3, r2, r3
 8017834:	2b02      	cmp	r3, #2
 8017836:	d901      	bls.n	801783c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8017838:	2303      	movs	r3, #3
 801783a:	e10c      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801783c:	4b6a      	ldr	r3, [pc, #424]	; (80179e8 <HAL_RCC_OscConfig+0x474>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017844:	2b00      	cmp	r3, #0
 8017846:	d0f0      	beq.n	801782a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	689b      	ldr	r3, [r3, #8]
 801784c:	2b01      	cmp	r3, #1
 801784e:	d106      	bne.n	801785e <HAL_RCC_OscConfig+0x2ea>
 8017850:	4b64      	ldr	r3, [pc, #400]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017854:	4a63      	ldr	r2, [pc, #396]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017856:	f043 0301 	orr.w	r3, r3, #1
 801785a:	6713      	str	r3, [r2, #112]	; 0x70
 801785c:	e01c      	b.n	8017898 <HAL_RCC_OscConfig+0x324>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	689b      	ldr	r3, [r3, #8]
 8017862:	2b05      	cmp	r3, #5
 8017864:	d10c      	bne.n	8017880 <HAL_RCC_OscConfig+0x30c>
 8017866:	4b5f      	ldr	r3, [pc, #380]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801786a:	4a5e      	ldr	r2, [pc, #376]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 801786c:	f043 0304 	orr.w	r3, r3, #4
 8017870:	6713      	str	r3, [r2, #112]	; 0x70
 8017872:	4b5c      	ldr	r3, [pc, #368]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017876:	4a5b      	ldr	r2, [pc, #364]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017878:	f043 0301 	orr.w	r3, r3, #1
 801787c:	6713      	str	r3, [r2, #112]	; 0x70
 801787e:	e00b      	b.n	8017898 <HAL_RCC_OscConfig+0x324>
 8017880:	4b58      	ldr	r3, [pc, #352]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017884:	4a57      	ldr	r2, [pc, #348]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017886:	f023 0301 	bic.w	r3, r3, #1
 801788a:	6713      	str	r3, [r2, #112]	; 0x70
 801788c:	4b55      	ldr	r3, [pc, #340]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 801788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017890:	4a54      	ldr	r2, [pc, #336]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017892:	f023 0304 	bic.w	r3, r3, #4
 8017896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	689b      	ldr	r3, [r3, #8]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d015      	beq.n	80178cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80178a0:	f7fc fdc8 	bl	8014434 <HAL_GetTick>
 80178a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80178a6:	e00a      	b.n	80178be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80178a8:	f7fc fdc4 	bl	8014434 <HAL_GetTick>
 80178ac:	4602      	mov	r2, r0
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	1ad3      	subs	r3, r2, r3
 80178b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80178b6:	4293      	cmp	r3, r2
 80178b8:	d901      	bls.n	80178be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80178ba:	2303      	movs	r3, #3
 80178bc:	e0cb      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80178be:	4b49      	ldr	r3, [pc, #292]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80178c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178c2:	f003 0302 	and.w	r3, r3, #2
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d0ee      	beq.n	80178a8 <HAL_RCC_OscConfig+0x334>
 80178ca:	e014      	b.n	80178f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80178cc:	f7fc fdb2 	bl	8014434 <HAL_GetTick>
 80178d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80178d2:	e00a      	b.n	80178ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80178d4:	f7fc fdae 	bl	8014434 <HAL_GetTick>
 80178d8:	4602      	mov	r2, r0
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	1ad3      	subs	r3, r2, r3
 80178de:	f241 3288 	movw	r2, #5000	; 0x1388
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d901      	bls.n	80178ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80178e6:	2303      	movs	r3, #3
 80178e8:	e0b5      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80178ea:	4b3e      	ldr	r3, [pc, #248]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80178ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178ee:	f003 0302 	and.w	r3, r3, #2
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1ee      	bne.n	80178d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80178f6:	7dfb      	ldrb	r3, [r7, #23]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d105      	bne.n	8017908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80178fc:	4b39      	ldr	r3, [pc, #228]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80178fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017900:	4a38      	ldr	r2, [pc, #224]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	699b      	ldr	r3, [r3, #24]
 801790c:	2b00      	cmp	r3, #0
 801790e:	f000 80a1 	beq.w	8017a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017912:	4b34      	ldr	r3, [pc, #208]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017914:	689b      	ldr	r3, [r3, #8]
 8017916:	f003 030c 	and.w	r3, r3, #12
 801791a:	2b08      	cmp	r3, #8
 801791c:	d05c      	beq.n	80179d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	699b      	ldr	r3, [r3, #24]
 8017922:	2b02      	cmp	r3, #2
 8017924:	d141      	bne.n	80179aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017926:	4b31      	ldr	r3, [pc, #196]	; (80179ec <HAL_RCC_OscConfig+0x478>)
 8017928:	2200      	movs	r2, #0
 801792a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801792c:	f7fc fd82 	bl	8014434 <HAL_GetTick>
 8017930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017932:	e008      	b.n	8017946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017934:	f7fc fd7e 	bl	8014434 <HAL_GetTick>
 8017938:	4602      	mov	r2, r0
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	1ad3      	subs	r3, r2, r3
 801793e:	2b02      	cmp	r3, #2
 8017940:	d901      	bls.n	8017946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8017942:	2303      	movs	r3, #3
 8017944:	e087      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017946:	4b27      	ldr	r3, [pc, #156]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801794e:	2b00      	cmp	r3, #0
 8017950:	d1f0      	bne.n	8017934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	69da      	ldr	r2, [r3, #28]
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	6a1b      	ldr	r3, [r3, #32]
 801795a:	431a      	orrs	r2, r3
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017960:	019b      	lsls	r3, r3, #6
 8017962:	431a      	orrs	r2, r3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017968:	085b      	lsrs	r3, r3, #1
 801796a:	3b01      	subs	r3, #1
 801796c:	041b      	lsls	r3, r3, #16
 801796e:	431a      	orrs	r2, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017974:	061b      	lsls	r3, r3, #24
 8017976:	491b      	ldr	r1, [pc, #108]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 8017978:	4313      	orrs	r3, r2
 801797a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801797c:	4b1b      	ldr	r3, [pc, #108]	; (80179ec <HAL_RCC_OscConfig+0x478>)
 801797e:	2201      	movs	r2, #1
 8017980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017982:	f7fc fd57 	bl	8014434 <HAL_GetTick>
 8017986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017988:	e008      	b.n	801799c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801798a:	f7fc fd53 	bl	8014434 <HAL_GetTick>
 801798e:	4602      	mov	r2, r0
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	1ad3      	subs	r3, r2, r3
 8017994:	2b02      	cmp	r3, #2
 8017996:	d901      	bls.n	801799c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8017998:	2303      	movs	r3, #3
 801799a:	e05c      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801799c:	4b11      	ldr	r3, [pc, #68]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d0f0      	beq.n	801798a <HAL_RCC_OscConfig+0x416>
 80179a8:	e054      	b.n	8017a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80179aa:	4b10      	ldr	r3, [pc, #64]	; (80179ec <HAL_RCC_OscConfig+0x478>)
 80179ac:	2200      	movs	r2, #0
 80179ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80179b0:	f7fc fd40 	bl	8014434 <HAL_GetTick>
 80179b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80179b6:	e008      	b.n	80179ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80179b8:	f7fc fd3c 	bl	8014434 <HAL_GetTick>
 80179bc:	4602      	mov	r2, r0
 80179be:	693b      	ldr	r3, [r7, #16]
 80179c0:	1ad3      	subs	r3, r2, r3
 80179c2:	2b02      	cmp	r3, #2
 80179c4:	d901      	bls.n	80179ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80179c6:	2303      	movs	r3, #3
 80179c8:	e045      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80179ca:	4b06      	ldr	r3, [pc, #24]	; (80179e4 <HAL_RCC_OscConfig+0x470>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d1f0      	bne.n	80179b8 <HAL_RCC_OscConfig+0x444>
 80179d6:	e03d      	b.n	8017a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	699b      	ldr	r3, [r3, #24]
 80179dc:	2b01      	cmp	r3, #1
 80179de:	d107      	bne.n	80179f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80179e0:	2301      	movs	r3, #1
 80179e2:	e038      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
 80179e4:	40023800 	.word	0x40023800
 80179e8:	40007000 	.word	0x40007000
 80179ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80179f0:	4b1b      	ldr	r3, [pc, #108]	; (8017a60 <HAL_RCC_OscConfig+0x4ec>)
 80179f2:	685b      	ldr	r3, [r3, #4]
 80179f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	699b      	ldr	r3, [r3, #24]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d028      	beq.n	8017a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d121      	bne.n	8017a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d11a      	bne.n	8017a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017a1a:	68fa      	ldr	r2, [r7, #12]
 8017a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017a20:	4013      	ands	r3, r2
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017a28:	4293      	cmp	r3, r2
 8017a2a:	d111      	bne.n	8017a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a36:	085b      	lsrs	r3, r3, #1
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d107      	bne.n	8017a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d001      	beq.n	8017a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8017a50:	2301      	movs	r3, #1
 8017a52:	e000      	b.n	8017a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8017a54:	2300      	movs	r3, #0
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3718      	adds	r7, #24
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	40023800 	.word	0x40023800

08017a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b084      	sub	sp, #16
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d101      	bne.n	8017a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017a74:	2301      	movs	r3, #1
 8017a76:	e0cc      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017a78:	4b68      	ldr	r3, [pc, #416]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f003 0307 	and.w	r3, r3, #7
 8017a80:	683a      	ldr	r2, [r7, #0]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d90c      	bls.n	8017aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017a86:	4b65      	ldr	r3, [pc, #404]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017a88:	683a      	ldr	r2, [r7, #0]
 8017a8a:	b2d2      	uxtb	r2, r2
 8017a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017a8e:	4b63      	ldr	r3, [pc, #396]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	f003 0307 	and.w	r3, r3, #7
 8017a96:	683a      	ldr	r2, [r7, #0]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d001      	beq.n	8017aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	e0b8      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	f003 0302 	and.w	r3, r3, #2
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d020      	beq.n	8017aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	f003 0304 	and.w	r3, r3, #4
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d005      	beq.n	8017ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017ab8:	4b59      	ldr	r3, [pc, #356]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017aba:	689b      	ldr	r3, [r3, #8]
 8017abc:	4a58      	ldr	r2, [pc, #352]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8017ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	f003 0308 	and.w	r3, r3, #8
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d005      	beq.n	8017adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017ad0:	4b53      	ldr	r3, [pc, #332]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	4a52      	ldr	r2, [pc, #328]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8017ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017adc:	4b50      	ldr	r3, [pc, #320]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017ade:	689b      	ldr	r3, [r3, #8]
 8017ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	689b      	ldr	r3, [r3, #8]
 8017ae8:	494d      	ldr	r1, [pc, #308]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017aea:	4313      	orrs	r3, r2
 8017aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	f003 0301 	and.w	r3, r3, #1
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d044      	beq.n	8017b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	2b01      	cmp	r3, #1
 8017b00:	d107      	bne.n	8017b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017b02:	4b47      	ldr	r3, [pc, #284]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d119      	bne.n	8017b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	e07f      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	2b02      	cmp	r3, #2
 8017b18:	d003      	beq.n	8017b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017b1e:	2b03      	cmp	r3, #3
 8017b20:	d107      	bne.n	8017b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017b22:	4b3f      	ldr	r3, [pc, #252]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d109      	bne.n	8017b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017b2e:	2301      	movs	r3, #1
 8017b30:	e06f      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017b32:	4b3b      	ldr	r3, [pc, #236]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	f003 0302 	and.w	r3, r3, #2
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d101      	bne.n	8017b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	e067      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017b42:	4b37      	ldr	r3, [pc, #220]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b44:	689b      	ldr	r3, [r3, #8]
 8017b46:	f023 0203 	bic.w	r2, r3, #3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	685b      	ldr	r3, [r3, #4]
 8017b4e:	4934      	ldr	r1, [pc, #208]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b50:	4313      	orrs	r3, r2
 8017b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8017b54:	f7fc fc6e 	bl	8014434 <HAL_GetTick>
 8017b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b5a:	e00a      	b.n	8017b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017b5c:	f7fc fc6a 	bl	8014434 <HAL_GetTick>
 8017b60:	4602      	mov	r2, r0
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	1ad3      	subs	r3, r2, r3
 8017b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d901      	bls.n	8017b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8017b6e:	2303      	movs	r3, #3
 8017b70:	e04f      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b72:	4b2b      	ldr	r3, [pc, #172]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017b74:	689b      	ldr	r3, [r3, #8]
 8017b76:	f003 020c 	and.w	r2, r3, #12
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d1eb      	bne.n	8017b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8017b84:	4b25      	ldr	r3, [pc, #148]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	f003 0307 	and.w	r3, r3, #7
 8017b8c:	683a      	ldr	r2, [r7, #0]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d20c      	bcs.n	8017bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b92:	4b22      	ldr	r3, [pc, #136]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017b94:	683a      	ldr	r2, [r7, #0]
 8017b96:	b2d2      	uxtb	r2, r2
 8017b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b9a:	4b20      	ldr	r3, [pc, #128]	; (8017c1c <HAL_RCC_ClockConfig+0x1b8>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	f003 0307 	and.w	r3, r3, #7
 8017ba2:	683a      	ldr	r2, [r7, #0]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d001      	beq.n	8017bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8017ba8:	2301      	movs	r3, #1
 8017baa:	e032      	b.n	8017c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	f003 0304 	and.w	r3, r3, #4
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d008      	beq.n	8017bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017bb8:	4b19      	ldr	r3, [pc, #100]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017bba:	689b      	ldr	r3, [r3, #8]
 8017bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	4916      	ldr	r1, [pc, #88]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f003 0308 	and.w	r3, r3, #8
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d009      	beq.n	8017bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017bd6:	4b12      	ldr	r3, [pc, #72]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017bd8:	689b      	ldr	r3, [r3, #8]
 8017bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	691b      	ldr	r3, [r3, #16]
 8017be2:	00db      	lsls	r3, r3, #3
 8017be4:	490e      	ldr	r1, [pc, #56]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017be6:	4313      	orrs	r3, r2
 8017be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017bea:	f000 f821 	bl	8017c30 <HAL_RCC_GetSysClockFreq>
 8017bee:	4602      	mov	r2, r0
 8017bf0:	4b0b      	ldr	r3, [pc, #44]	; (8017c20 <HAL_RCC_ClockConfig+0x1bc>)
 8017bf2:	689b      	ldr	r3, [r3, #8]
 8017bf4:	091b      	lsrs	r3, r3, #4
 8017bf6:	f003 030f 	and.w	r3, r3, #15
 8017bfa:	490a      	ldr	r1, [pc, #40]	; (8017c24 <HAL_RCC_ClockConfig+0x1c0>)
 8017bfc:	5ccb      	ldrb	r3, [r1, r3]
 8017bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8017c02:	4a09      	ldr	r2, [pc, #36]	; (8017c28 <HAL_RCC_ClockConfig+0x1c4>)
 8017c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8017c06:	4b09      	ldr	r3, [pc, #36]	; (8017c2c <HAL_RCC_ClockConfig+0x1c8>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fc fbce 	bl	80143ac <HAL_InitTick>

  return HAL_OK;
 8017c10:	2300      	movs	r3, #0
}
 8017c12:	4618      	mov	r0, r3
 8017c14:	3710      	adds	r7, #16
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	40023c00 	.word	0x40023c00
 8017c20:	40023800 	.word	0x40023800
 8017c24:	08023ff8 	.word	0x08023ff8
 8017c28:	2000064c 	.word	0x2000064c
 8017c2c:	20000650 	.word	0x20000650

08017c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c34:	b094      	sub	sp, #80	; 0x50
 8017c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017c40:	2300      	movs	r3, #0
 8017c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8017c44:	2300      	movs	r3, #0
 8017c46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017c48:	4b79      	ldr	r3, [pc, #484]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017c4a:	689b      	ldr	r3, [r3, #8]
 8017c4c:	f003 030c 	and.w	r3, r3, #12
 8017c50:	2b08      	cmp	r3, #8
 8017c52:	d00d      	beq.n	8017c70 <HAL_RCC_GetSysClockFreq+0x40>
 8017c54:	2b08      	cmp	r3, #8
 8017c56:	f200 80e1 	bhi.w	8017e1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d002      	beq.n	8017c64 <HAL_RCC_GetSysClockFreq+0x34>
 8017c5e:	2b04      	cmp	r3, #4
 8017c60:	d003      	beq.n	8017c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8017c62:	e0db      	b.n	8017e1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8017c64:	4b73      	ldr	r3, [pc, #460]	; (8017e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8017c66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8017c68:	e0db      	b.n	8017e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017c6a:	4b73      	ldr	r3, [pc, #460]	; (8017e38 <HAL_RCC_GetSysClockFreq+0x208>)
 8017c6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017c6e:	e0d8      	b.n	8017e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017c70:	4b6f      	ldr	r3, [pc, #444]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017c72:	685b      	ldr	r3, [r3, #4]
 8017c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017c7a:	4b6d      	ldr	r3, [pc, #436]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d063      	beq.n	8017d4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017c86:	4b6a      	ldr	r3, [pc, #424]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	099b      	lsrs	r3, r3, #6
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8017c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c98:	633b      	str	r3, [r7, #48]	; 0x30
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8017c9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8017ca2:	4622      	mov	r2, r4
 8017ca4:	462b      	mov	r3, r5
 8017ca6:	f04f 0000 	mov.w	r0, #0
 8017caa:	f04f 0100 	mov.w	r1, #0
 8017cae:	0159      	lsls	r1, r3, #5
 8017cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017cb4:	0150      	lsls	r0, r2, #5
 8017cb6:	4602      	mov	r2, r0
 8017cb8:	460b      	mov	r3, r1
 8017cba:	4621      	mov	r1, r4
 8017cbc:	1a51      	subs	r1, r2, r1
 8017cbe:	6139      	str	r1, [r7, #16]
 8017cc0:	4629      	mov	r1, r5
 8017cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8017cc6:	617b      	str	r3, [r7, #20]
 8017cc8:	f04f 0200 	mov.w	r2, #0
 8017ccc:	f04f 0300 	mov.w	r3, #0
 8017cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8017cd4:	4659      	mov	r1, fp
 8017cd6:	018b      	lsls	r3, r1, #6
 8017cd8:	4651      	mov	r1, sl
 8017cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8017cde:	4651      	mov	r1, sl
 8017ce0:	018a      	lsls	r2, r1, #6
 8017ce2:	4651      	mov	r1, sl
 8017ce4:	ebb2 0801 	subs.w	r8, r2, r1
 8017ce8:	4659      	mov	r1, fp
 8017cea:	eb63 0901 	sbc.w	r9, r3, r1
 8017cee:	f04f 0200 	mov.w	r2, #0
 8017cf2:	f04f 0300 	mov.w	r3, #0
 8017cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017d02:	4690      	mov	r8, r2
 8017d04:	4699      	mov	r9, r3
 8017d06:	4623      	mov	r3, r4
 8017d08:	eb18 0303 	adds.w	r3, r8, r3
 8017d0c:	60bb      	str	r3, [r7, #8]
 8017d0e:	462b      	mov	r3, r5
 8017d10:	eb49 0303 	adc.w	r3, r9, r3
 8017d14:	60fb      	str	r3, [r7, #12]
 8017d16:	f04f 0200 	mov.w	r2, #0
 8017d1a:	f04f 0300 	mov.w	r3, #0
 8017d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8017d22:	4629      	mov	r1, r5
 8017d24:	024b      	lsls	r3, r1, #9
 8017d26:	4621      	mov	r1, r4
 8017d28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	024a      	lsls	r2, r1, #9
 8017d30:	4610      	mov	r0, r2
 8017d32:	4619      	mov	r1, r3
 8017d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d36:	2200      	movs	r2, #0
 8017d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017d40:	f7e8 ff8a 	bl	8000c58 <__aeabi_uldivmod>
 8017d44:	4602      	mov	r2, r0
 8017d46:	460b      	mov	r3, r1
 8017d48:	4613      	mov	r3, r2
 8017d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d4c:	e058      	b.n	8017e00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017d4e:	4b38      	ldr	r3, [pc, #224]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	099b      	lsrs	r3, r3, #6
 8017d54:	2200      	movs	r2, #0
 8017d56:	4618      	mov	r0, r3
 8017d58:	4611      	mov	r1, r2
 8017d5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8017d5e:	623b      	str	r3, [r7, #32]
 8017d60:	2300      	movs	r3, #0
 8017d62:	627b      	str	r3, [r7, #36]	; 0x24
 8017d64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017d68:	4642      	mov	r2, r8
 8017d6a:	464b      	mov	r3, r9
 8017d6c:	f04f 0000 	mov.w	r0, #0
 8017d70:	f04f 0100 	mov.w	r1, #0
 8017d74:	0159      	lsls	r1, r3, #5
 8017d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017d7a:	0150      	lsls	r0, r2, #5
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	460b      	mov	r3, r1
 8017d80:	4641      	mov	r1, r8
 8017d82:	ebb2 0a01 	subs.w	sl, r2, r1
 8017d86:	4649      	mov	r1, r9
 8017d88:	eb63 0b01 	sbc.w	fp, r3, r1
 8017d8c:	f04f 0200 	mov.w	r2, #0
 8017d90:	f04f 0300 	mov.w	r3, #0
 8017d94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8017d98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8017d9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8017da0:	ebb2 040a 	subs.w	r4, r2, sl
 8017da4:	eb63 050b 	sbc.w	r5, r3, fp
 8017da8:	f04f 0200 	mov.w	r2, #0
 8017dac:	f04f 0300 	mov.w	r3, #0
 8017db0:	00eb      	lsls	r3, r5, #3
 8017db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017db6:	00e2      	lsls	r2, r4, #3
 8017db8:	4614      	mov	r4, r2
 8017dba:	461d      	mov	r5, r3
 8017dbc:	4643      	mov	r3, r8
 8017dbe:	18e3      	adds	r3, r4, r3
 8017dc0:	603b      	str	r3, [r7, #0]
 8017dc2:	464b      	mov	r3, r9
 8017dc4:	eb45 0303 	adc.w	r3, r5, r3
 8017dc8:	607b      	str	r3, [r7, #4]
 8017dca:	f04f 0200 	mov.w	r2, #0
 8017dce:	f04f 0300 	mov.w	r3, #0
 8017dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	028b      	lsls	r3, r1, #10
 8017dda:	4621      	mov	r1, r4
 8017ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8017de0:	4621      	mov	r1, r4
 8017de2:	028a      	lsls	r2, r1, #10
 8017de4:	4610      	mov	r0, r2
 8017de6:	4619      	mov	r1, r3
 8017de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dea:	2200      	movs	r2, #0
 8017dec:	61bb      	str	r3, [r7, #24]
 8017dee:	61fa      	str	r2, [r7, #28]
 8017df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017df4:	f7e8 ff30 	bl	8000c58 <__aeabi_uldivmod>
 8017df8:	4602      	mov	r2, r0
 8017dfa:	460b      	mov	r3, r1
 8017dfc:	4613      	mov	r3, r2
 8017dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8017e00:	4b0b      	ldr	r3, [pc, #44]	; (8017e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	0c1b      	lsrs	r3, r3, #16
 8017e06:	f003 0303 	and.w	r3, r3, #3
 8017e0a:	3301      	adds	r3, #1
 8017e0c:	005b      	lsls	r3, r3, #1
 8017e0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8017e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017e1a:	e002      	b.n	8017e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017e1c:	4b05      	ldr	r3, [pc, #20]	; (8017e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8017e1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8017e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8017e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	3750      	adds	r7, #80	; 0x50
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017e2e:	bf00      	nop
 8017e30:	40023800 	.word	0x40023800
 8017e34:	00f42400 	.word	0x00f42400
 8017e38:	007a1200 	.word	0x007a1200

08017e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017e3c:	b480      	push	{r7}
 8017e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017e40:	4b03      	ldr	r3, [pc, #12]	; (8017e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8017e42:	681b      	ldr	r3, [r3, #0]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	46bd      	mov	sp, r7
 8017e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4c:	4770      	bx	lr
 8017e4e:	bf00      	nop
 8017e50:	2000064c 	.word	0x2000064c

08017e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8017e58:	f7ff fff0 	bl	8017e3c <HAL_RCC_GetHCLKFreq>
 8017e5c:	4602      	mov	r2, r0
 8017e5e:	4b05      	ldr	r3, [pc, #20]	; (8017e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8017e60:	689b      	ldr	r3, [r3, #8]
 8017e62:	0a9b      	lsrs	r3, r3, #10
 8017e64:	f003 0307 	and.w	r3, r3, #7
 8017e68:	4903      	ldr	r1, [pc, #12]	; (8017e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017e6a:	5ccb      	ldrb	r3, [r1, r3]
 8017e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	40023800 	.word	0x40023800
 8017e78:	08024008 	.word	0x08024008

08017e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8017e80:	f7ff ffdc 	bl	8017e3c <HAL_RCC_GetHCLKFreq>
 8017e84:	4602      	mov	r2, r0
 8017e86:	4b05      	ldr	r3, [pc, #20]	; (8017e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8017e88:	689b      	ldr	r3, [r3, #8]
 8017e8a:	0b5b      	lsrs	r3, r3, #13
 8017e8c:	f003 0307 	and.w	r3, r3, #7
 8017e90:	4903      	ldr	r1, [pc, #12]	; (8017ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017e92:	5ccb      	ldrb	r3, [r1, r3]
 8017e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	bd80      	pop	{r7, pc}
 8017e9c:	40023800 	.word	0x40023800
 8017ea0:	08024008 	.word	0x08024008

08017ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b082      	sub	sp, #8
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	e04c      	b.n	8017f50 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d111      	bne.n	8017ee6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f000 fc68 	bl	80187a0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d102      	bne.n	8017ede <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	4a1f      	ldr	r2, [pc, #124]	; (8017f58 <HAL_TIM_Base_Init+0xb4>)
 8017edc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2202      	movs	r2, #2
 8017eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681a      	ldr	r2, [r3, #0]
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	3304      	adds	r3, #4
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	4610      	mov	r0, r2
 8017efa:	f000 fb17 	bl	801852c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2201      	movs	r2, #1
 8017f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2201      	movs	r2, #1
 8017f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2201      	movs	r2, #1
 8017f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2201      	movs	r2, #1
 8017f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2201      	movs	r2, #1
 8017f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2201      	movs	r2, #1
 8017f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2201      	movs	r2, #1
 8017f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2201      	movs	r2, #1
 8017f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2201      	movs	r2, #1
 8017f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2201      	movs	r2, #1
 8017f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017f4e:	2300      	movs	r3, #0
}
 8017f50:	4618      	mov	r0, r3
 8017f52:	3708      	adds	r7, #8
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd80      	pop	{r7, pc}
 8017f58:	08013cd5 	.word	0x08013cd5

08017f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b085      	sub	sp, #20
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	2b01      	cmp	r3, #1
 8017f6e:	d001      	beq.n	8017f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8017f70:	2301      	movs	r3, #1
 8017f72:	e04e      	b.n	8018012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2202      	movs	r2, #2
 8017f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	68da      	ldr	r2, [r3, #12]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f042 0201 	orr.w	r2, r2, #1
 8017f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	4a23      	ldr	r2, [pc, #140]	; (8018020 <HAL_TIM_Base_Start_IT+0xc4>)
 8017f92:	4293      	cmp	r3, r2
 8017f94:	d022      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f9e:	d01d      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	4a1f      	ldr	r2, [pc, #124]	; (8018024 <HAL_TIM_Base_Start_IT+0xc8>)
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d018      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	4a1e      	ldr	r2, [pc, #120]	; (8018028 <HAL_TIM_Base_Start_IT+0xcc>)
 8017fb0:	4293      	cmp	r3, r2
 8017fb2:	d013      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	4a1c      	ldr	r2, [pc, #112]	; (801802c <HAL_TIM_Base_Start_IT+0xd0>)
 8017fba:	4293      	cmp	r3, r2
 8017fbc:	d00e      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4a1b      	ldr	r2, [pc, #108]	; (8018030 <HAL_TIM_Base_Start_IT+0xd4>)
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	d009      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	4a19      	ldr	r2, [pc, #100]	; (8018034 <HAL_TIM_Base_Start_IT+0xd8>)
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	d004      	beq.n	8017fdc <HAL_TIM_Base_Start_IT+0x80>
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4a18      	ldr	r2, [pc, #96]	; (8018038 <HAL_TIM_Base_Start_IT+0xdc>)
 8017fd8:	4293      	cmp	r3, r2
 8017fda:	d111      	bne.n	8018000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	689b      	ldr	r3, [r3, #8]
 8017fe2:	f003 0307 	and.w	r3, r3, #7
 8017fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2b06      	cmp	r3, #6
 8017fec:	d010      	beq.n	8018010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	681a      	ldr	r2, [r3, #0]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	f042 0201 	orr.w	r2, r2, #1
 8017ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017ffe:	e007      	b.n	8018010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	681a      	ldr	r2, [r3, #0]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	f042 0201 	orr.w	r2, r2, #1
 801800e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018010:	2300      	movs	r3, #0
}
 8018012:	4618      	mov	r0, r3
 8018014:	3714      	adds	r7, #20
 8018016:	46bd      	mov	sp, r7
 8018018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801c:	4770      	bx	lr
 801801e:	bf00      	nop
 8018020:	40010000 	.word	0x40010000
 8018024:	40000400 	.word	0x40000400
 8018028:	40000800 	.word	0x40000800
 801802c:	40000c00 	.word	0x40000c00
 8018030:	40010400 	.word	0x40010400
 8018034:	40014000 	.word	0x40014000
 8018038:	40001800 	.word	0x40001800

0801803c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	68da      	ldr	r2, [r3, #12]
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	f022 0201 	bic.w	r2, r2, #1
 8018052:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	6a1a      	ldr	r2, [r3, #32]
 801805a:	f241 1311 	movw	r3, #4369	; 0x1111
 801805e:	4013      	ands	r3, r2
 8018060:	2b00      	cmp	r3, #0
 8018062:	d10f      	bne.n	8018084 <HAL_TIM_Base_Stop_IT+0x48>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	6a1a      	ldr	r2, [r3, #32]
 801806a:	f240 4344 	movw	r3, #1092	; 0x444
 801806e:	4013      	ands	r3, r2
 8018070:	2b00      	cmp	r3, #0
 8018072:	d107      	bne.n	8018084 <HAL_TIM_Base_Stop_IT+0x48>
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	681a      	ldr	r2, [r3, #0]
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	f022 0201 	bic.w	r2, r2, #1
 8018082:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2201      	movs	r2, #1
 8018088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801808c:	2300      	movs	r3, #0
}
 801808e:	4618      	mov	r0, r3
 8018090:	370c      	adds	r7, #12
 8018092:	46bd      	mov	sp, r7
 8018094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018098:	4770      	bx	lr

0801809a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801809a:	b580      	push	{r7, lr}
 801809c:	b082      	sub	sp, #8
 801809e:	af00      	add	r7, sp, #0
 80180a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	691b      	ldr	r3, [r3, #16]
 80180a8:	f003 0302 	and.w	r3, r3, #2
 80180ac:	2b02      	cmp	r3, #2
 80180ae:	d128      	bne.n	8018102 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	68db      	ldr	r3, [r3, #12]
 80180b6:	f003 0302 	and.w	r3, r3, #2
 80180ba:	2b02      	cmp	r3, #2
 80180bc:	d121      	bne.n	8018102 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f06f 0202 	mvn.w	r2, #2
 80180c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2201      	movs	r2, #1
 80180cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	699b      	ldr	r3, [r3, #24]
 80180d4:	f003 0303 	and.w	r3, r3, #3
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d005      	beq.n	80180e8 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	4798      	blx	r3
 80180e6:	e009      	b.n	80180fc <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2200      	movs	r2, #0
 8018100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	691b      	ldr	r3, [r3, #16]
 8018108:	f003 0304 	and.w	r3, r3, #4
 801810c:	2b04      	cmp	r3, #4
 801810e:	d128      	bne.n	8018162 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	f003 0304 	and.w	r3, r3, #4
 801811a:	2b04      	cmp	r3, #4
 801811c:	d121      	bne.n	8018162 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	f06f 0204 	mvn.w	r2, #4
 8018126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2202      	movs	r2, #2
 801812c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	699b      	ldr	r3, [r3, #24]
 8018134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018138:	2b00      	cmp	r3, #0
 801813a:	d005      	beq.n	8018148 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	4798      	blx	r3
 8018146:	e009      	b.n	801815c <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801814e:	6878      	ldr	r0, [r7, #4]
 8018150:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018158:	6878      	ldr	r0, [r7, #4]
 801815a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2200      	movs	r2, #0
 8018160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	691b      	ldr	r3, [r3, #16]
 8018168:	f003 0308 	and.w	r3, r3, #8
 801816c:	2b08      	cmp	r3, #8
 801816e:	d128      	bne.n	80181c2 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	f003 0308 	and.w	r3, r3, #8
 801817a:	2b08      	cmp	r3, #8
 801817c:	d121      	bne.n	80181c2 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	f06f 0208 	mvn.w	r2, #8
 8018186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2204      	movs	r2, #4
 801818c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	69db      	ldr	r3, [r3, #28]
 8018194:	f003 0303 	and.w	r3, r3, #3
 8018198:	2b00      	cmp	r3, #0
 801819a:	d005      	beq.n	80181a8 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181a2:	6878      	ldr	r0, [r7, #4]
 80181a4:	4798      	blx	r3
 80181a6:	e009      	b.n	80181bc <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80181ae:	6878      	ldr	r0, [r7, #4]
 80181b0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2200      	movs	r2, #0
 80181c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	691b      	ldr	r3, [r3, #16]
 80181c8:	f003 0310 	and.w	r3, r3, #16
 80181cc:	2b10      	cmp	r3, #16
 80181ce:	d128      	bne.n	8018222 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	68db      	ldr	r3, [r3, #12]
 80181d6:	f003 0310 	and.w	r3, r3, #16
 80181da:	2b10      	cmp	r3, #16
 80181dc:	d121      	bne.n	8018222 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f06f 0210 	mvn.w	r2, #16
 80181e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2208      	movs	r2, #8
 80181ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	69db      	ldr	r3, [r3, #28]
 80181f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d005      	beq.n	8018208 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	4798      	blx	r3
 8018206:	e009      	b.n	801821c <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018218:	6878      	ldr	r0, [r7, #4]
 801821a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2200      	movs	r2, #0
 8018220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	691b      	ldr	r3, [r3, #16]
 8018228:	f003 0301 	and.w	r3, r3, #1
 801822c:	2b01      	cmp	r3, #1
 801822e:	d110      	bne.n	8018252 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	68db      	ldr	r3, [r3, #12]
 8018236:	f003 0301 	and.w	r3, r3, #1
 801823a:	2b01      	cmp	r3, #1
 801823c:	d109      	bne.n	8018252 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	f06f 0201 	mvn.w	r2, #1
 8018246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801824e:	6878      	ldr	r0, [r7, #4]
 8018250:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	691b      	ldr	r3, [r3, #16]
 8018258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801825c:	2b80      	cmp	r3, #128	; 0x80
 801825e:	d110      	bne.n	8018282 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801826a:	2b80      	cmp	r3, #128	; 0x80
 801826c:	d109      	bne.n	8018282 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	691b      	ldr	r3, [r3, #16]
 8018288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801828c:	2b40      	cmp	r3, #64	; 0x40
 801828e:	d110      	bne.n	80182b2 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	68db      	ldr	r3, [r3, #12]
 8018296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801829a:	2b40      	cmp	r3, #64	; 0x40
 801829c:	d109      	bne.n	80182b2 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80182a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	691b      	ldr	r3, [r3, #16]
 80182b8:	f003 0320 	and.w	r3, r3, #32
 80182bc:	2b20      	cmp	r3, #32
 80182be:	d110      	bne.n	80182e2 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	68db      	ldr	r3, [r3, #12]
 80182c6:	f003 0320 	and.w	r3, r3, #32
 80182ca:	2b20      	cmp	r3, #32
 80182cc:	d109      	bne.n	80182e2 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f06f 0220 	mvn.w	r2, #32
 80182d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80182e2:	bf00      	nop
 80182e4:	3708      	adds	r7, #8
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}

080182ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b084      	sub	sp, #16
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
 80182f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80182f4:	2300      	movs	r3, #0
 80182f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d101      	bne.n	8018306 <HAL_TIM_ConfigClockSource+0x1c>
 8018302:	2302      	movs	r3, #2
 8018304:	e0b4      	b.n	8018470 <HAL_TIM_ConfigClockSource+0x186>
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2201      	movs	r2, #1
 801830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2202      	movs	r2, #2
 8018312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8018324:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801832c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	68ba      	ldr	r2, [r7, #8]
 8018334:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801833e:	d03e      	beq.n	80183be <HAL_TIM_ConfigClockSource+0xd4>
 8018340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018344:	f200 8087 	bhi.w	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 8018348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801834c:	f000 8086 	beq.w	801845c <HAL_TIM_ConfigClockSource+0x172>
 8018350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018354:	d87f      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 8018356:	2b70      	cmp	r3, #112	; 0x70
 8018358:	d01a      	beq.n	8018390 <HAL_TIM_ConfigClockSource+0xa6>
 801835a:	2b70      	cmp	r3, #112	; 0x70
 801835c:	d87b      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 801835e:	2b60      	cmp	r3, #96	; 0x60
 8018360:	d050      	beq.n	8018404 <HAL_TIM_ConfigClockSource+0x11a>
 8018362:	2b60      	cmp	r3, #96	; 0x60
 8018364:	d877      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 8018366:	2b50      	cmp	r3, #80	; 0x50
 8018368:	d03c      	beq.n	80183e4 <HAL_TIM_ConfigClockSource+0xfa>
 801836a:	2b50      	cmp	r3, #80	; 0x50
 801836c:	d873      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 801836e:	2b40      	cmp	r3, #64	; 0x40
 8018370:	d058      	beq.n	8018424 <HAL_TIM_ConfigClockSource+0x13a>
 8018372:	2b40      	cmp	r3, #64	; 0x40
 8018374:	d86f      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 8018376:	2b30      	cmp	r3, #48	; 0x30
 8018378:	d064      	beq.n	8018444 <HAL_TIM_ConfigClockSource+0x15a>
 801837a:	2b30      	cmp	r3, #48	; 0x30
 801837c:	d86b      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 801837e:	2b20      	cmp	r3, #32
 8018380:	d060      	beq.n	8018444 <HAL_TIM_ConfigClockSource+0x15a>
 8018382:	2b20      	cmp	r3, #32
 8018384:	d867      	bhi.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
 8018386:	2b00      	cmp	r3, #0
 8018388:	d05c      	beq.n	8018444 <HAL_TIM_ConfigClockSource+0x15a>
 801838a:	2b10      	cmp	r3, #16
 801838c:	d05a      	beq.n	8018444 <HAL_TIM_ConfigClockSource+0x15a>
 801838e:	e062      	b.n	8018456 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6818      	ldr	r0, [r3, #0]
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	6899      	ldr	r1, [r3, #8]
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	685a      	ldr	r2, [r3, #4]
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	68db      	ldr	r3, [r3, #12]
 80183a0:	f000 f9de 	bl	8018760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	689b      	ldr	r3, [r3, #8]
 80183aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80183b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	68ba      	ldr	r2, [r7, #8]
 80183ba:	609a      	str	r2, [r3, #8]
      break;
 80183bc:	e04f      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6818      	ldr	r0, [r3, #0]
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	6899      	ldr	r1, [r3, #8]
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	685a      	ldr	r2, [r3, #4]
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	68db      	ldr	r3, [r3, #12]
 80183ce:	f000 f9c7 	bl	8018760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	689a      	ldr	r2, [r3, #8]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80183e0:	609a      	str	r2, [r3, #8]
      break;
 80183e2:	e03c      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6818      	ldr	r0, [r3, #0]
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	6859      	ldr	r1, [r3, #4]
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	68db      	ldr	r3, [r3, #12]
 80183f0:	461a      	mov	r2, r3
 80183f2:	f000 f93b 	bl	801866c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2150      	movs	r1, #80	; 0x50
 80183fc:	4618      	mov	r0, r3
 80183fe:	f000 f994 	bl	801872a <TIM_ITRx_SetConfig>
      break;
 8018402:	e02c      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6818      	ldr	r0, [r3, #0]
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	6859      	ldr	r1, [r3, #4]
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	68db      	ldr	r3, [r3, #12]
 8018410:	461a      	mov	r2, r3
 8018412:	f000 f95a 	bl	80186ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2160      	movs	r1, #96	; 0x60
 801841c:	4618      	mov	r0, r3
 801841e:	f000 f984 	bl	801872a <TIM_ITRx_SetConfig>
      break;
 8018422:	e01c      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6818      	ldr	r0, [r3, #0]
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	6859      	ldr	r1, [r3, #4]
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	68db      	ldr	r3, [r3, #12]
 8018430:	461a      	mov	r2, r3
 8018432:	f000 f91b 	bl	801866c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	2140      	movs	r1, #64	; 0x40
 801843c:	4618      	mov	r0, r3
 801843e:	f000 f974 	bl	801872a <TIM_ITRx_SetConfig>
      break;
 8018442:	e00c      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	4619      	mov	r1, r3
 801844e:	4610      	mov	r0, r2
 8018450:	f000 f96b 	bl	801872a <TIM_ITRx_SetConfig>
      break;
 8018454:	e003      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8018456:	2301      	movs	r3, #1
 8018458:	73fb      	strb	r3, [r7, #15]
      break;
 801845a:	e000      	b.n	801845e <HAL_TIM_ConfigClockSource+0x174>
      break;
 801845c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2201      	movs	r2, #1
 8018462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	2200      	movs	r2, #0
 801846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801846e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018470:	4618      	mov	r0, r3
 8018472:	3710      	adds	r7, #16
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8018478:	b480      	push	{r7}
 801847a:	b083      	sub	sp, #12
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8018480:	bf00      	nop
 8018482:	370c      	adds	r7, #12
 8018484:	46bd      	mov	sp, r7
 8018486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848a:	4770      	bx	lr

0801848c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801848c:	b480      	push	{r7}
 801848e:	b083      	sub	sp, #12
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018494:	bf00      	nop
 8018496:	370c      	adds	r7, #12
 8018498:	46bd      	mov	sp, r7
 801849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849e:	4770      	bx	lr

080184a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80184a0:	b480      	push	{r7}
 80184a2:	b083      	sub	sp, #12
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80184a8:	bf00      	nop
 80184aa:	370c      	adds	r7, #12
 80184ac:	46bd      	mov	sp, r7
 80184ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b2:	4770      	bx	lr

080184b4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80184bc:	bf00      	nop
 80184be:	370c      	adds	r7, #12
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80184c8:	b480      	push	{r7}
 80184ca:	b083      	sub	sp, #12
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80184d0:	bf00      	nop
 80184d2:	370c      	adds	r7, #12
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80184dc:	b480      	push	{r7}
 80184de:	b083      	sub	sp, #12
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80184e4:	bf00      	nop
 80184e6:	370c      	adds	r7, #12
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr

080184f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80184f8:	bf00      	nop
 80184fa:	370c      	adds	r7, #12
 80184fc:	46bd      	mov	sp, r7
 80184fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018502:	4770      	bx	lr

08018504 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8018504:	b480      	push	{r7}
 8018506:	b083      	sub	sp, #12
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 801850c:	bf00      	nop
 801850e:	370c      	adds	r7, #12
 8018510:	46bd      	mov	sp, r7
 8018512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018516:	4770      	bx	lr

08018518 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8018518:	b480      	push	{r7}
 801851a:	b083      	sub	sp, #12
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8018520:	bf00      	nop
 8018522:	370c      	adds	r7, #12
 8018524:	46bd      	mov	sp, r7
 8018526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852a:	4770      	bx	lr

0801852c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801852c:	b480      	push	{r7}
 801852e:	b085      	sub	sp, #20
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
 8018534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	4a40      	ldr	r2, [pc, #256]	; (8018640 <TIM_Base_SetConfig+0x114>)
 8018540:	4293      	cmp	r3, r2
 8018542:	d013      	beq.n	801856c <TIM_Base_SetConfig+0x40>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801854a:	d00f      	beq.n	801856c <TIM_Base_SetConfig+0x40>
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	4a3d      	ldr	r2, [pc, #244]	; (8018644 <TIM_Base_SetConfig+0x118>)
 8018550:	4293      	cmp	r3, r2
 8018552:	d00b      	beq.n	801856c <TIM_Base_SetConfig+0x40>
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	4a3c      	ldr	r2, [pc, #240]	; (8018648 <TIM_Base_SetConfig+0x11c>)
 8018558:	4293      	cmp	r3, r2
 801855a:	d007      	beq.n	801856c <TIM_Base_SetConfig+0x40>
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	4a3b      	ldr	r2, [pc, #236]	; (801864c <TIM_Base_SetConfig+0x120>)
 8018560:	4293      	cmp	r3, r2
 8018562:	d003      	beq.n	801856c <TIM_Base_SetConfig+0x40>
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	4a3a      	ldr	r2, [pc, #232]	; (8018650 <TIM_Base_SetConfig+0x124>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d108      	bne.n	801857e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	685b      	ldr	r3, [r3, #4]
 8018578:	68fa      	ldr	r2, [r7, #12]
 801857a:	4313      	orrs	r3, r2
 801857c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	4a2f      	ldr	r2, [pc, #188]	; (8018640 <TIM_Base_SetConfig+0x114>)
 8018582:	4293      	cmp	r3, r2
 8018584:	d02b      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801858c:	d027      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	4a2c      	ldr	r2, [pc, #176]	; (8018644 <TIM_Base_SetConfig+0x118>)
 8018592:	4293      	cmp	r3, r2
 8018594:	d023      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	4a2b      	ldr	r2, [pc, #172]	; (8018648 <TIM_Base_SetConfig+0x11c>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d01f      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	4a2a      	ldr	r2, [pc, #168]	; (801864c <TIM_Base_SetConfig+0x120>)
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d01b      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	4a29      	ldr	r2, [pc, #164]	; (8018650 <TIM_Base_SetConfig+0x124>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d017      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	4a28      	ldr	r2, [pc, #160]	; (8018654 <TIM_Base_SetConfig+0x128>)
 80185b2:	4293      	cmp	r3, r2
 80185b4:	d013      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	4a27      	ldr	r2, [pc, #156]	; (8018658 <TIM_Base_SetConfig+0x12c>)
 80185ba:	4293      	cmp	r3, r2
 80185bc:	d00f      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	4a26      	ldr	r2, [pc, #152]	; (801865c <TIM_Base_SetConfig+0x130>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d00b      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	4a25      	ldr	r2, [pc, #148]	; (8018660 <TIM_Base_SetConfig+0x134>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d007      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	4a24      	ldr	r2, [pc, #144]	; (8018664 <TIM_Base_SetConfig+0x138>)
 80185d2:	4293      	cmp	r3, r2
 80185d4:	d003      	beq.n	80185de <TIM_Base_SetConfig+0xb2>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	4a23      	ldr	r2, [pc, #140]	; (8018668 <TIM_Base_SetConfig+0x13c>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d108      	bne.n	80185f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80185e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	68db      	ldr	r3, [r3, #12]
 80185ea:	68fa      	ldr	r2, [r7, #12]
 80185ec:	4313      	orrs	r3, r2
 80185ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	695b      	ldr	r3, [r3, #20]
 80185fa:	4313      	orrs	r3, r2
 80185fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	689a      	ldr	r2, [r3, #8]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	4a0a      	ldr	r2, [pc, #40]	; (8018640 <TIM_Base_SetConfig+0x114>)
 8018618:	4293      	cmp	r3, r2
 801861a:	d003      	beq.n	8018624 <TIM_Base_SetConfig+0xf8>
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	4a0c      	ldr	r2, [pc, #48]	; (8018650 <TIM_Base_SetConfig+0x124>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d103      	bne.n	801862c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	691a      	ldr	r2, [r3, #16]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2201      	movs	r2, #1
 8018630:	615a      	str	r2, [r3, #20]
}
 8018632:	bf00      	nop
 8018634:	3714      	adds	r7, #20
 8018636:	46bd      	mov	sp, r7
 8018638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop
 8018640:	40010000 	.word	0x40010000
 8018644:	40000400 	.word	0x40000400
 8018648:	40000800 	.word	0x40000800
 801864c:	40000c00 	.word	0x40000c00
 8018650:	40010400 	.word	0x40010400
 8018654:	40014000 	.word	0x40014000
 8018658:	40014400 	.word	0x40014400
 801865c:	40014800 	.word	0x40014800
 8018660:	40001800 	.word	0x40001800
 8018664:	40001c00 	.word	0x40001c00
 8018668:	40002000 	.word	0x40002000

0801866c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801866c:	b480      	push	{r7}
 801866e:	b087      	sub	sp, #28
 8018670:	af00      	add	r7, sp, #0
 8018672:	60f8      	str	r0, [r7, #12]
 8018674:	60b9      	str	r1, [r7, #8]
 8018676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	6a1b      	ldr	r3, [r3, #32]
 801867c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6a1b      	ldr	r3, [r3, #32]
 8018682:	f023 0201 	bic.w	r2, r3, #1
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	699b      	ldr	r3, [r3, #24]
 801868e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8018690:	693b      	ldr	r3, [r7, #16]
 8018692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	011b      	lsls	r3, r3, #4
 801869c:	693a      	ldr	r2, [r7, #16]
 801869e:	4313      	orrs	r3, r2
 80186a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	f023 030a 	bic.w	r3, r3, #10
 80186a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80186aa:	697a      	ldr	r2, [r7, #20]
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	4313      	orrs	r3, r2
 80186b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	693a      	ldr	r2, [r7, #16]
 80186b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	697a      	ldr	r2, [r7, #20]
 80186bc:	621a      	str	r2, [r3, #32]
}
 80186be:	bf00      	nop
 80186c0:	371c      	adds	r7, #28
 80186c2:	46bd      	mov	sp, r7
 80186c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c8:	4770      	bx	lr

080186ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80186ca:	b480      	push	{r7}
 80186cc:	b087      	sub	sp, #28
 80186ce:	af00      	add	r7, sp, #0
 80186d0:	60f8      	str	r0, [r7, #12]
 80186d2:	60b9      	str	r1, [r7, #8]
 80186d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	6a1b      	ldr	r3, [r3, #32]
 80186da:	f023 0210 	bic.w	r2, r3, #16
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	699b      	ldr	r3, [r3, #24]
 80186e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	6a1b      	ldr	r3, [r3, #32]
 80186ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80186f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	031b      	lsls	r3, r3, #12
 80186fa:	697a      	ldr	r2, [r7, #20]
 80186fc:	4313      	orrs	r3, r2
 80186fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8018706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	011b      	lsls	r3, r3, #4
 801870c:	693a      	ldr	r2, [r7, #16]
 801870e:	4313      	orrs	r3, r2
 8018710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	697a      	ldr	r2, [r7, #20]
 8018716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	693a      	ldr	r2, [r7, #16]
 801871c:	621a      	str	r2, [r3, #32]
}
 801871e:	bf00      	nop
 8018720:	371c      	adds	r7, #28
 8018722:	46bd      	mov	sp, r7
 8018724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018728:	4770      	bx	lr

0801872a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801872a:	b480      	push	{r7}
 801872c:	b085      	sub	sp, #20
 801872e:	af00      	add	r7, sp, #0
 8018730:	6078      	str	r0, [r7, #4]
 8018732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	689b      	ldr	r3, [r3, #8]
 8018738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8018742:	683a      	ldr	r2, [r7, #0]
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	4313      	orrs	r3, r2
 8018748:	f043 0307 	orr.w	r3, r3, #7
 801874c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	68fa      	ldr	r2, [r7, #12]
 8018752:	609a      	str	r2, [r3, #8]
}
 8018754:	bf00      	nop
 8018756:	3714      	adds	r7, #20
 8018758:	46bd      	mov	sp, r7
 801875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875e:	4770      	bx	lr

08018760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018760:	b480      	push	{r7}
 8018762:	b087      	sub	sp, #28
 8018764:	af00      	add	r7, sp, #0
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	607a      	str	r2, [r7, #4]
 801876c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	689b      	ldr	r3, [r3, #8]
 8018772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801877a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	021a      	lsls	r2, r3, #8
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	431a      	orrs	r2, r3
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	4313      	orrs	r3, r2
 8018788:	697a      	ldr	r2, [r7, #20]
 801878a:	4313      	orrs	r3, r2
 801878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	697a      	ldr	r2, [r7, #20]
 8018792:	609a      	str	r2, [r3, #8]
}
 8018794:	bf00      	nop
 8018796:	371c      	adds	r7, #28
 8018798:	46bd      	mov	sp, r7
 801879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879e:	4770      	bx	lr

080187a0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80187a0:	b480      	push	{r7}
 80187a2:	b083      	sub	sp, #12
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	4a1c      	ldr	r2, [pc, #112]	; (801881c <TIM_ResetCallback+0x7c>)
 80187ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	4a1b      	ldr	r2, [pc, #108]	; (8018820 <TIM_ResetCallback+0x80>)
 80187b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	4a1a      	ldr	r2, [pc, #104]	; (8018824 <TIM_ResetCallback+0x84>)
 80187bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	4a19      	ldr	r2, [pc, #100]	; (8018828 <TIM_ResetCallback+0x88>)
 80187c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	4a18      	ldr	r2, [pc, #96]	; (801882c <TIM_ResetCallback+0x8c>)
 80187cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	4a17      	ldr	r2, [pc, #92]	; (8018830 <TIM_ResetCallback+0x90>)
 80187d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	4a16      	ldr	r2, [pc, #88]	; (8018834 <TIM_ResetCallback+0x94>)
 80187dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	4a15      	ldr	r2, [pc, #84]	; (8018838 <TIM_ResetCallback+0x98>)
 80187e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	4a14      	ldr	r2, [pc, #80]	; (801883c <TIM_ResetCallback+0x9c>)
 80187ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4a13      	ldr	r2, [pc, #76]	; (8018840 <TIM_ResetCallback+0xa0>)
 80187f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	4a12      	ldr	r2, [pc, #72]	; (8018844 <TIM_ResetCallback+0xa4>)
 80187fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	4a11      	ldr	r2, [pc, #68]	; (8018848 <TIM_ResetCallback+0xa8>)
 8018804:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	4a10      	ldr	r2, [pc, #64]	; (801884c <TIM_ResetCallback+0xac>)
 801880c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018810:	bf00      	nop
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr
 801881c:	08013311 	.word	0x08013311
 8018820:	08018479 	.word	0x08018479
 8018824:	080184f1 	.word	0x080184f1
 8018828:	08018505 	.word	0x08018505
 801882c:	080184a1 	.word	0x080184a1
 8018830:	080184b5 	.word	0x080184b5
 8018834:	0801848d 	.word	0x0801848d
 8018838:	080184c9 	.word	0x080184c9
 801883c:	080184dd 	.word	0x080184dd
 8018840:	08018519 	.word	0x08018519
 8018844:	08018949 	.word	0x08018949
 8018848:	0801895d 	.word	0x0801895d
 801884c:	08018971 	.word	0x08018971

08018850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018850:	b480      	push	{r7}
 8018852:	b085      	sub	sp, #20
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
 8018858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018860:	2b01      	cmp	r3, #1
 8018862:	d101      	bne.n	8018868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018864:	2302      	movs	r3, #2
 8018866:	e05a      	b.n	801891e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	2201      	movs	r2, #1
 801886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2202      	movs	r2, #2
 8018874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	689b      	ldr	r3, [r3, #8]
 8018886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801888e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	68fa      	ldr	r2, [r7, #12]
 8018896:	4313      	orrs	r3, r2
 8018898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	68fa      	ldr	r2, [r7, #12]
 80188a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	4a21      	ldr	r2, [pc, #132]	; (801892c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80188a8:	4293      	cmp	r3, r2
 80188aa:	d022      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80188b4:	d01d      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	4a1d      	ldr	r2, [pc, #116]	; (8018930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80188bc:	4293      	cmp	r3, r2
 80188be:	d018      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	4a1b      	ldr	r2, [pc, #108]	; (8018934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80188c6:	4293      	cmp	r3, r2
 80188c8:	d013      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	4a1a      	ldr	r2, [pc, #104]	; (8018938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d00e      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	4a18      	ldr	r2, [pc, #96]	; (801893c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80188da:	4293      	cmp	r3, r2
 80188dc:	d009      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	4a17      	ldr	r2, [pc, #92]	; (8018940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d004      	beq.n	80188f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a15      	ldr	r2, [pc, #84]	; (8018944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d10c      	bne.n	801890c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80188f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	68ba      	ldr	r2, [r7, #8]
 8018900:	4313      	orrs	r3, r2
 8018902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	68ba      	ldr	r2, [r7, #8]
 801890a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2201      	movs	r2, #1
 8018910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2200      	movs	r2, #0
 8018918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801891c:	2300      	movs	r3, #0
}
 801891e:	4618      	mov	r0, r3
 8018920:	3714      	adds	r7, #20
 8018922:	46bd      	mov	sp, r7
 8018924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018928:	4770      	bx	lr
 801892a:	bf00      	nop
 801892c:	40010000 	.word	0x40010000
 8018930:	40000400 	.word	0x40000400
 8018934:	40000800 	.word	0x40000800
 8018938:	40000c00 	.word	0x40000c00
 801893c:	40010400 	.word	0x40010400
 8018940:	40014000 	.word	0x40014000
 8018944:	40001800 	.word	0x40001800

08018948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018948:	b480      	push	{r7}
 801894a:	b083      	sub	sp, #12
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018950:	bf00      	nop
 8018952:	370c      	adds	r7, #12
 8018954:	46bd      	mov	sp, r7
 8018956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895a:	4770      	bx	lr

0801895c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801895c:	b480      	push	{r7}
 801895e:	b083      	sub	sp, #12
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8018964:	bf00      	nop
 8018966:	370c      	adds	r7, #12
 8018968:	46bd      	mov	sp, r7
 801896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896e:	4770      	bx	lr

08018970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018970:	b480      	push	{r7}
 8018972:	b083      	sub	sp, #12
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018978:	bf00      	nop
 801897a:	370c      	adds	r7, #12
 801897c:	46bd      	mov	sp, r7
 801897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018982:	4770      	bx	lr

08018984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d101      	bne.n	8018996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018992:	2301      	movs	r3, #1
 8018994:	e04a      	b.n	8018a2c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801899c:	b2db      	uxtb	r3, r3
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d111      	bne.n	80189c6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2200      	movs	r2, #0
 80189a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f000 fbb0 	bl	8019110 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d102      	bne.n	80189be <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	4a1e      	ldr	r2, [pc, #120]	; (8018a34 <HAL_UART_Init+0xb0>)
 80189bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2224      	movs	r2, #36	; 0x24
 80189ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	68da      	ldr	r2, [r3, #12]
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80189dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f000 fe3c 	bl	801965c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	691a      	ldr	r2, [r3, #16]
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80189f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	695a      	ldr	r2, [r3, #20]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018a02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	68da      	ldr	r2, [r3, #12]
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8018a12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	2200      	movs	r2, #0
 8018a18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	2220      	movs	r2, #32
 8018a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2220      	movs	r2, #32
 8018a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8018a2a:	2300      	movs	r3, #0
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3708      	adds	r7, #8
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	08013d61 	.word	0x08013d61

08018a38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b08c      	sub	sp, #48	; 0x30
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	60f8      	str	r0, [r7, #12]
 8018a40:	60b9      	str	r1, [r7, #8]
 8018a42:	4613      	mov	r3, r2
 8018a44:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a4c:	b2db      	uxtb	r3, r3
 8018a4e:	2b20      	cmp	r3, #32
 8018a50:	d165      	bne.n	8018b1e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d002      	beq.n	8018a5e <HAL_UART_Transmit_DMA+0x26>
 8018a58:	88fb      	ldrh	r3, [r7, #6]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d101      	bne.n	8018a62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8018a5e:	2301      	movs	r3, #1
 8018a60:	e05e      	b.n	8018b20 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018a68:	2b01      	cmp	r3, #1
 8018a6a:	d101      	bne.n	8018a70 <HAL_UART_Transmit_DMA+0x38>
 8018a6c:	2302      	movs	r3, #2
 8018a6e:	e057      	b.n	8018b20 <HAL_UART_Transmit_DMA+0xe8>
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	2201      	movs	r2, #1
 8018a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8018a78:	68ba      	ldr	r2, [r7, #8]
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	88fa      	ldrh	r2, [r7, #6]
 8018a82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	88fa      	ldrh	r2, [r7, #6]
 8018a88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2221      	movs	r2, #33	; 0x21
 8018a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a9c:	4a22      	ldr	r2, [pc, #136]	; (8018b28 <HAL_UART_Transmit_DMA+0xf0>)
 8018a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018aa4:	4a21      	ldr	r2, [pc, #132]	; (8018b2c <HAL_UART_Transmit_DMA+0xf4>)
 8018aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018aac:	4a20      	ldr	r2, [pc, #128]	; (8018b30 <HAL_UART_Transmit_DMA+0xf8>)
 8018aae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8018ab8:	f107 0308 	add.w	r3, r7, #8
 8018abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac4:	6819      	ldr	r1, [r3, #0]
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	3304      	adds	r3, #4
 8018acc:	461a      	mov	r2, r3
 8018ace:	88fb      	ldrh	r3, [r7, #6]
 8018ad0:	f7fc fdca 	bl	8015668 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018adc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	3314      	adds	r3, #20
 8018aec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018aee:	69bb      	ldr	r3, [r7, #24]
 8018af0:	e853 3f00 	ldrex	r3, [r3]
 8018af4:	617b      	str	r3, [r7, #20]
   return(result);
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	3314      	adds	r3, #20
 8018b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b06:	627a      	str	r2, [r7, #36]	; 0x24
 8018b08:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b0a:	6a39      	ldr	r1, [r7, #32]
 8018b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b0e:	e841 2300 	strex	r3, r2, [r1]
 8018b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8018b14:	69fb      	ldr	r3, [r7, #28]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d1e5      	bne.n	8018ae6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	e000      	b.n	8018b20 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8018b1e:	2302      	movs	r3, #2
  }
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	3730      	adds	r7, #48	; 0x30
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}
 8018b28:	08019181 	.word	0x08019181
 8018b2c:	0801921d 	.word	0x0801921d
 8018b30:	0801923b 	.word	0x0801923b

08018b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b0ba      	sub	sp, #232	; 0xe8
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	68db      	ldr	r3, [r3, #12]
 8018b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	695b      	ldr	r3, [r3, #20]
 8018b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8018b60:	2300      	movs	r3, #0
 8018b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8018b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018b6a:	f003 030f 	and.w	r3, r3, #15
 8018b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8018b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d10f      	bne.n	8018b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8018b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018b7e:	f003 0320 	and.w	r3, r3, #32
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d009      	beq.n	8018b9a <HAL_UART_IRQHandler+0x66>
 8018b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018b8a:	f003 0320 	and.w	r3, r3, #32
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d003      	beq.n	8018b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f000 fca5 	bl	80194e2 <UART_Receive_IT>
      return;
 8018b98:	e25b      	b.n	8019052 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8018b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	f000 80e1 	beq.w	8018d66 <HAL_UART_IRQHandler+0x232>
 8018ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018ba8:	f003 0301 	and.w	r3, r3, #1
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d106      	bne.n	8018bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8018bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018bb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f000 80d4 	beq.w	8018d66 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8018bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018bc2:	f003 0301 	and.w	r3, r3, #1
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d00b      	beq.n	8018be2 <HAL_UART_IRQHandler+0xae>
 8018bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d005      	beq.n	8018be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bda:	f043 0201 	orr.w	r2, r3, #1
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018be6:	f003 0304 	and.w	r3, r3, #4
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d00b      	beq.n	8018c06 <HAL_UART_IRQHandler+0xd2>
 8018bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018bf2:	f003 0301 	and.w	r3, r3, #1
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d005      	beq.n	8018c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bfe:	f043 0202 	orr.w	r2, r3, #2
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c0a:	f003 0302 	and.w	r3, r3, #2
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d00b      	beq.n	8018c2a <HAL_UART_IRQHandler+0xf6>
 8018c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018c16:	f003 0301 	and.w	r3, r3, #1
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d005      	beq.n	8018c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c22:	f043 0204 	orr.w	r2, r3, #4
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8018c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c2e:	f003 0308 	and.w	r3, r3, #8
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d011      	beq.n	8018c5a <HAL_UART_IRQHandler+0x126>
 8018c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c3a:	f003 0320 	and.w	r3, r3, #32
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d105      	bne.n	8018c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8018c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018c46:	f003 0301 	and.w	r3, r3, #1
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d005      	beq.n	8018c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c52:	f043 0208 	orr.w	r2, r3, #8
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	f000 81f2 	beq.w	8019048 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8018c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c68:	f003 0320 	and.w	r3, r3, #32
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d008      	beq.n	8018c82 <HAL_UART_IRQHandler+0x14e>
 8018c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c74:	f003 0320 	and.w	r3, r3, #32
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d002      	beq.n	8018c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	f000 fc30 	bl	80194e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	695b      	ldr	r3, [r3, #20]
 8018c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c8c:	2b40      	cmp	r3, #64	; 0x40
 8018c8e:	bf0c      	ite	eq
 8018c90:	2301      	moveq	r3, #1
 8018c92:	2300      	movne	r3, #0
 8018c94:	b2db      	uxtb	r3, r3
 8018c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c9e:	f003 0308 	and.w	r3, r3, #8
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d103      	bne.n	8018cae <HAL_UART_IRQHandler+0x17a>
 8018ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d051      	beq.n	8018d52 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f000 fb36 	bl	8019320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	695b      	ldr	r3, [r3, #20]
 8018cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cbe:	2b40      	cmp	r3, #64	; 0x40
 8018cc0:	d142      	bne.n	8018d48 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	3314      	adds	r3, #20
 8018cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018cd0:	e853 3f00 	ldrex	r3, [r3]
 8018cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8018cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	3314      	adds	r3, #20
 8018cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8018cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8018cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018cfe:	e841 2300 	strex	r3, r2, [r1]
 8018d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8018d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d1d9      	bne.n	8018cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d013      	beq.n	8018d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d1a:	4a7f      	ldr	r2, [pc, #508]	; (8018f18 <HAL_UART_IRQHandler+0x3e4>)
 8018d1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7fc fd68 	bl	80157f8 <HAL_DMA_Abort_IT>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d019      	beq.n	8018d62 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d34:	687a      	ldr	r2, [r7, #4]
 8018d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018d38:	4610      	mov	r0, r2
 8018d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018d3c:	e011      	b.n	8018d62 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018d46:	e00c      	b.n	8018d62 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018d50:	e007      	b.n	8018d62 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8018d60:	e172      	b.n	8019048 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018d62:	bf00      	nop
    return;
 8018d64:	e170      	b.n	8019048 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d6a:	2b01      	cmp	r3, #1
 8018d6c:	f040 814c 	bne.w	8019008 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8018d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018d74:	f003 0310 	and.w	r3, r3, #16
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 8145 	beq.w	8019008 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8018d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018d82:	f003 0310 	and.w	r3, r3, #16
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f000 813e 	beq.w	8019008 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	60bb      	str	r3, [r7, #8]
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	60bb      	str	r3, [r7, #8]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	685b      	ldr	r3, [r3, #4]
 8018d9e:	60bb      	str	r3, [r7, #8]
 8018da0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	695b      	ldr	r3, [r3, #20]
 8018da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dac:	2b40      	cmp	r3, #64	; 0x40
 8018dae:	f040 80b5 	bne.w	8018f1c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	685b      	ldr	r3, [r3, #4]
 8018dba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018dbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	f000 8142 	beq.w	801904c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018dcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	f080 813b 	bcs.w	801904c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8018ddc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018de2:	69db      	ldr	r3, [r3, #28]
 8018de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018de8:	f000 8088 	beq.w	8018efc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	330c      	adds	r3, #12
 8018df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018dfa:	e853 3f00 	ldrex	r3, [r3]
 8018dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8018e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018e0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	330c      	adds	r3, #12
 8018e14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018e18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018e1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8018e24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018e28:	e841 2300 	strex	r3, r2, [r1]
 8018e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8018e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d1d9      	bne.n	8018dec <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	3314      	adds	r3, #20
 8018e3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e42:	e853 3f00 	ldrex	r3, [r3]
 8018e46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018e4a:	f023 0301 	bic.w	r3, r3, #1
 8018e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	3314      	adds	r3, #20
 8018e58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018e5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8018e60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018e64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018e68:	e841 2300 	strex	r3, r2, [r1]
 8018e6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d1e1      	bne.n	8018e38 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	3314      	adds	r3, #20
 8018e7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e7e:	e853 3f00 	ldrex	r3, [r3]
 8018e82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	3314      	adds	r3, #20
 8018e94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018e98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018ea0:	e841 2300 	strex	r3, r2, [r1]
 8018ea4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1e3      	bne.n	8018e74 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	2220      	movs	r2, #32
 8018eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	330c      	adds	r3, #12
 8018ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ec4:	e853 3f00 	ldrex	r3, [r3]
 8018ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ecc:	f023 0310 	bic.w	r3, r3, #16
 8018ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	330c      	adds	r3, #12
 8018eda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018ede:	65ba      	str	r2, [r7, #88]	; 0x58
 8018ee0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018ee6:	e841 2300 	strex	r3, r2, [r1]
 8018eea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d1e3      	bne.n	8018eba <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f7fc fc0e 	bl	8015718 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8018f04:	687a      	ldr	r2, [r7, #4]
 8018f06:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8018f08:	b292      	uxth	r2, r2
 8018f0a:	1a8a      	subs	r2, r1, r2
 8018f0c:	b292      	uxth	r2, r2
 8018f0e:	4611      	mov	r1, r2
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8018f14:	e09a      	b.n	801904c <HAL_UART_IRQHandler+0x518>
 8018f16:	bf00      	nop
 8018f18:	080193e7 	.word	0x080193e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	1ad3      	subs	r3, r2, r3
 8018f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	f000 808c 	beq.w	8019050 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8018f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f000 8087 	beq.w	8019050 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	330c      	adds	r3, #12
 8018f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f4c:	e853 3f00 	ldrex	r3, [r3]
 8018f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	330c      	adds	r3, #12
 8018f62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8018f66:	647a      	str	r2, [r7, #68]	; 0x44
 8018f68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018f6e:	e841 2300 	strex	r3, r2, [r1]
 8018f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d1e3      	bne.n	8018f42 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	3314      	adds	r3, #20
 8018f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f84:	e853 3f00 	ldrex	r3, [r3]
 8018f88:	623b      	str	r3, [r7, #32]
   return(result);
 8018f8a:	6a3b      	ldr	r3, [r7, #32]
 8018f8c:	f023 0301 	bic.w	r3, r3, #1
 8018f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	3314      	adds	r3, #20
 8018f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8018fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fa6:	e841 2300 	strex	r3, r2, [r1]
 8018faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d1e3      	bne.n	8018f7a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2220      	movs	r2, #32
 8018fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	330c      	adds	r3, #12
 8018fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fc8:	693b      	ldr	r3, [r7, #16]
 8018fca:	e853 3f00 	ldrex	r3, [r3]
 8018fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	f023 0310 	bic.w	r3, r3, #16
 8018fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	330c      	adds	r3, #12
 8018fe0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018fe4:	61fa      	str	r2, [r7, #28]
 8018fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fe8:	69b9      	ldr	r1, [r7, #24]
 8018fea:	69fa      	ldr	r2, [r7, #28]
 8018fec:	e841 2300 	strex	r3, r2, [r1]
 8018ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8018ff2:	697b      	ldr	r3, [r7, #20]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d1e3      	bne.n	8018fc0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018ffc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8019000:	4611      	mov	r1, r2
 8019002:	6878      	ldr	r0, [r7, #4]
 8019004:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8019006:	e023      	b.n	8019050 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8019008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801900c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019010:	2b00      	cmp	r3, #0
 8019012:	d009      	beq.n	8019028 <HAL_UART_IRQHandler+0x4f4>
 8019014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801901c:	2b00      	cmp	r3, #0
 801901e:	d003      	beq.n	8019028 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8019020:	6878      	ldr	r0, [r7, #4]
 8019022:	f000 f9f5 	bl	8019410 <UART_Transmit_IT>
    return;
 8019026:	e014      	b.n	8019052 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8019028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019030:	2b00      	cmp	r3, #0
 8019032:	d00e      	beq.n	8019052 <HAL_UART_IRQHandler+0x51e>
 8019034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801903c:	2b00      	cmp	r3, #0
 801903e:	d008      	beq.n	8019052 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8019040:	6878      	ldr	r0, [r7, #4]
 8019042:	f000 fa35 	bl	80194b0 <UART_EndTransmit_IT>
    return;
 8019046:	e004      	b.n	8019052 <HAL_UART_IRQHandler+0x51e>
    return;
 8019048:	bf00      	nop
 801904a:	e002      	b.n	8019052 <HAL_UART_IRQHandler+0x51e>
      return;
 801904c:	bf00      	nop
 801904e:	e000      	b.n	8019052 <HAL_UART_IRQHandler+0x51e>
      return;
 8019050:	bf00      	nop
  }
}
 8019052:	37e8      	adds	r7, #232	; 0xe8
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}

08019058 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019058:	b480      	push	{r7}
 801905a:	b083      	sub	sp, #12
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8019060:	bf00      	nop
 8019062:	370c      	adds	r7, #12
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8019074:	bf00      	nop
 8019076:	370c      	adds	r7, #12
 8019078:	46bd      	mov	sp, r7
 801907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907e:	4770      	bx	lr

08019080 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019080:	b480      	push	{r7}
 8019082:	b083      	sub	sp, #12
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8019088:	bf00      	nop
 801908a:	370c      	adds	r7, #12
 801908c:	46bd      	mov	sp, r7
 801908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019092:	4770      	bx	lr

08019094 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019094:	b480      	push	{r7}
 8019096:	b083      	sub	sp, #12
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801909c:	bf00      	nop
 801909e:	370c      	adds	r7, #12
 80190a0:	46bd      	mov	sp, r7
 80190a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a6:	4770      	bx	lr

080190a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80190a8:	b480      	push	{r7}
 80190aa:	b083      	sub	sp, #12
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80190b0:	bf00      	nop
 80190b2:	370c      	adds	r7, #12
 80190b4:	46bd      	mov	sp, r7
 80190b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ba:	4770      	bx	lr

080190bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80190bc:	b480      	push	{r7}
 80190be:	b083      	sub	sp, #12
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80190c4:	bf00      	nop
 80190c6:	370c      	adds	r7, #12
 80190c8:	46bd      	mov	sp, r7
 80190ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ce:	4770      	bx	lr

080190d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80190d0:	b480      	push	{r7}
 80190d2:	b083      	sub	sp, #12
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80190d8:	bf00      	nop
 80190da:	370c      	adds	r7, #12
 80190dc:	46bd      	mov	sp, r7
 80190de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e2:	4770      	bx	lr

080190e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80190e4:	b480      	push	{r7}
 80190e6:	b083      	sub	sp, #12
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80190ec:	bf00      	nop
 80190ee:	370c      	adds	r7, #12
 80190f0:	46bd      	mov	sp, r7
 80190f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f6:	4770      	bx	lr

080190f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80190f8:	b480      	push	{r7}
 80190fa:	b083      	sub	sp, #12
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	460b      	mov	r3, r1
 8019102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8019104:	bf00      	nop
 8019106:	370c      	adds	r7, #12
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr

08019110 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8019110:	b480      	push	{r7}
 8019112:	b083      	sub	sp, #12
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	4a10      	ldr	r2, [pc, #64]	; (801915c <UART_InitCallbacksToDefault+0x4c>)
 801911c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	4a0f      	ldr	r2, [pc, #60]	; (8019160 <UART_InitCallbacksToDefault+0x50>)
 8019122:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	4a0f      	ldr	r2, [pc, #60]	; (8019164 <UART_InitCallbacksToDefault+0x54>)
 8019128:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	4a0e      	ldr	r2, [pc, #56]	; (8019168 <UART_InitCallbacksToDefault+0x58>)
 801912e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	4a0e      	ldr	r2, [pc, #56]	; (801916c <UART_InitCallbacksToDefault+0x5c>)
 8019134:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	4a0d      	ldr	r2, [pc, #52]	; (8019170 <UART_InitCallbacksToDefault+0x60>)
 801913a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	4a0d      	ldr	r2, [pc, #52]	; (8019174 <UART_InitCallbacksToDefault+0x64>)
 8019140:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	4a0c      	ldr	r2, [pc, #48]	; (8019178 <UART_InitCallbacksToDefault+0x68>)
 8019146:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	4a0c      	ldr	r2, [pc, #48]	; (801917c <UART_InitCallbacksToDefault+0x6c>)
 801914c:	669a      	str	r2, [r3, #104]	; 0x68

}
 801914e:	bf00      	nop
 8019150:	370c      	adds	r7, #12
 8019152:	46bd      	mov	sp, r7
 8019154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019158:	4770      	bx	lr
 801915a:	bf00      	nop
 801915c:	0801906d 	.word	0x0801906d
 8019160:	08019059 	.word	0x08019059
 8019164:	08019095 	.word	0x08019095
 8019168:	08019081 	.word	0x08019081
 801916c:	080190a9 	.word	0x080190a9
 8019170:	080190bd 	.word	0x080190bd
 8019174:	080190d1 	.word	0x080190d1
 8019178:	080190e5 	.word	0x080190e5
 801917c:	080190f9 	.word	0x080190f9

08019180 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b090      	sub	sp, #64	; 0x40
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801918c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019198:	2b00      	cmp	r3, #0
 801919a:	d137      	bne.n	801920c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801919e:	2200      	movs	r2, #0
 80191a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80191a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	3314      	adds	r3, #20
 80191a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ac:	e853 3f00 	ldrex	r3, [r3]
 80191b0:	623b      	str	r3, [r7, #32]
   return(result);
 80191b2:	6a3b      	ldr	r3, [r7, #32]
 80191b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80191b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80191ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	3314      	adds	r3, #20
 80191c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191c2:	633a      	str	r2, [r7, #48]	; 0x30
 80191c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80191c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191ca:	e841 2300 	strex	r3, r2, [r1]
 80191ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80191d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d1e5      	bne.n	80191a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80191d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	330c      	adds	r3, #12
 80191dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	e853 3f00 	ldrex	r3, [r3]
 80191e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191ec:	637b      	str	r3, [r7, #52]	; 0x34
 80191ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	330c      	adds	r3, #12
 80191f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191f6:	61fa      	str	r2, [r7, #28]
 80191f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191fa:	69b9      	ldr	r1, [r7, #24]
 80191fc:	69fa      	ldr	r2, [r7, #28]
 80191fe:	e841 2300 	strex	r3, r2, [r1]
 8019202:	617b      	str	r3, [r7, #20]
   return(result);
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d1e5      	bne.n	80191d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801920a:	e003      	b.n	8019214 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 801920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801920e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019212:	4798      	blx	r3
}
 8019214:	bf00      	nop
 8019216:	3740      	adds	r7, #64	; 0x40
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b084      	sub	sp, #16
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019228:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801922e:	68f8      	ldr	r0, [r7, #12]
 8019230:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019232:	bf00      	nop
 8019234:	3710      	adds	r7, #16
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}

0801923a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801923a:	b580      	push	{r7, lr}
 801923c:	b084      	sub	sp, #16
 801923e:	af00      	add	r7, sp, #0
 8019240:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8019242:	2300      	movs	r3, #0
 8019244:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801924a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	695b      	ldr	r3, [r3, #20]
 8019252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019256:	2b80      	cmp	r3, #128	; 0x80
 8019258:	bf0c      	ite	eq
 801925a:	2301      	moveq	r3, #1
 801925c:	2300      	movne	r3, #0
 801925e:	b2db      	uxtb	r3, r3
 8019260:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019268:	b2db      	uxtb	r3, r3
 801926a:	2b21      	cmp	r3, #33	; 0x21
 801926c:	d108      	bne.n	8019280 <UART_DMAError+0x46>
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d005      	beq.n	8019280 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8019274:	68bb      	ldr	r3, [r7, #8]
 8019276:	2200      	movs	r2, #0
 8019278:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801927a:	68b8      	ldr	r0, [r7, #8]
 801927c:	f000 f828 	bl	80192d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8019280:	68bb      	ldr	r3, [r7, #8]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	695b      	ldr	r3, [r3, #20]
 8019286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801928a:	2b40      	cmp	r3, #64	; 0x40
 801928c:	bf0c      	ite	eq
 801928e:	2301      	moveq	r3, #1
 8019290:	2300      	movne	r3, #0
 8019292:	b2db      	uxtb	r3, r3
 8019294:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8019296:	68bb      	ldr	r3, [r7, #8]
 8019298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801929c:	b2db      	uxtb	r3, r3
 801929e:	2b22      	cmp	r3, #34	; 0x22
 80192a0:	d108      	bne.n	80192b4 <UART_DMAError+0x7a>
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d005      	beq.n	80192b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	2200      	movs	r2, #0
 80192ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80192ae:	68b8      	ldr	r0, [r7, #8]
 80192b0:	f000 f836 	bl	8019320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192b8:	f043 0210 	orr.w	r2, r3, #16
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80192c0:	68bb      	ldr	r3, [r7, #8]
 80192c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192c4:	68b8      	ldr	r0, [r7, #8]
 80192c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80192c8:	bf00      	nop
 80192ca:	3710      	adds	r7, #16
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80192d0:	b480      	push	{r7}
 80192d2:	b089      	sub	sp, #36	; 0x24
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	330c      	adds	r3, #12
 80192de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	e853 3f00 	ldrex	r3, [r3]
 80192e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80192ee:	61fb      	str	r3, [r7, #28]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	330c      	adds	r3, #12
 80192f6:	69fa      	ldr	r2, [r7, #28]
 80192f8:	61ba      	str	r2, [r7, #24]
 80192fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192fc:	6979      	ldr	r1, [r7, #20]
 80192fe:	69ba      	ldr	r2, [r7, #24]
 8019300:	e841 2300 	strex	r3, r2, [r1]
 8019304:	613b      	str	r3, [r7, #16]
   return(result);
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1e5      	bne.n	80192d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	2220      	movs	r2, #32
 8019310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8019314:	bf00      	nop
 8019316:	3724      	adds	r7, #36	; 0x24
 8019318:	46bd      	mov	sp, r7
 801931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931e:	4770      	bx	lr

08019320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019320:	b480      	push	{r7}
 8019322:	b095      	sub	sp, #84	; 0x54
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	330c      	adds	r3, #12
 801932e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019332:	e853 3f00 	ldrex	r3, [r3]
 8019336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801933a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801933e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	330c      	adds	r3, #12
 8019346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019348:	643a      	str	r2, [r7, #64]	; 0x40
 801934a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801934c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801934e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019350:	e841 2300 	strex	r3, r2, [r1]
 8019354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019358:	2b00      	cmp	r3, #0
 801935a:	d1e5      	bne.n	8019328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	3314      	adds	r3, #20
 8019362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019364:	6a3b      	ldr	r3, [r7, #32]
 8019366:	e853 3f00 	ldrex	r3, [r3]
 801936a:	61fb      	str	r3, [r7, #28]
   return(result);
 801936c:	69fb      	ldr	r3, [r7, #28]
 801936e:	f023 0301 	bic.w	r3, r3, #1
 8019372:	64bb      	str	r3, [r7, #72]	; 0x48
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	3314      	adds	r3, #20
 801937a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801937c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801937e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019384:	e841 2300 	strex	r3, r2, [r1]
 8019388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801938c:	2b00      	cmp	r3, #0
 801938e:	d1e5      	bne.n	801935c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019394:	2b01      	cmp	r3, #1
 8019396:	d119      	bne.n	80193cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	330c      	adds	r3, #12
 801939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	e853 3f00 	ldrex	r3, [r3]
 80193a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80193a8:	68bb      	ldr	r3, [r7, #8]
 80193aa:	f023 0310 	bic.w	r3, r3, #16
 80193ae:	647b      	str	r3, [r7, #68]	; 0x44
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	330c      	adds	r3, #12
 80193b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193b8:	61ba      	str	r2, [r7, #24]
 80193ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193bc:	6979      	ldr	r1, [r7, #20]
 80193be:	69ba      	ldr	r2, [r7, #24]
 80193c0:	e841 2300 	strex	r3, r2, [r1]
 80193c4:	613b      	str	r3, [r7, #16]
   return(result);
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d1e5      	bne.n	8019398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	2220      	movs	r2, #32
 80193d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2200      	movs	r2, #0
 80193d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80193da:	bf00      	nop
 80193dc:	3754      	adds	r7, #84	; 0x54
 80193de:	46bd      	mov	sp, r7
 80193e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e4:	4770      	bx	lr

080193e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80193e6:	b580      	push	{r7, lr}
 80193e8:	b084      	sub	sp, #16
 80193ea:	af00      	add	r7, sp, #0
 80193ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2200      	movs	r2, #0
 80193f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	2200      	movs	r2, #0
 80193fe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019404:	68f8      	ldr	r0, [r7, #12]
 8019406:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019408:	bf00      	nop
 801940a:	3710      	adds	r7, #16
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}

08019410 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8019410:	b480      	push	{r7}
 8019412:	b085      	sub	sp, #20
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801941e:	b2db      	uxtb	r3, r3
 8019420:	2b21      	cmp	r3, #33	; 0x21
 8019422:	d13e      	bne.n	80194a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	689b      	ldr	r3, [r3, #8]
 8019428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801942c:	d114      	bne.n	8019458 <UART_Transmit_IT+0x48>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	691b      	ldr	r3, [r3, #16]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d110      	bne.n	8019458 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6a1b      	ldr	r3, [r3, #32]
 801943a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	881b      	ldrh	r3, [r3, #0]
 8019440:	461a      	mov	r2, r3
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801944a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	6a1b      	ldr	r3, [r3, #32]
 8019450:	1c9a      	adds	r2, r3, #2
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	621a      	str	r2, [r3, #32]
 8019456:	e008      	b.n	801946a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6a1b      	ldr	r3, [r3, #32]
 801945c:	1c59      	adds	r1, r3, #1
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	6211      	str	r1, [r2, #32]
 8019462:	781a      	ldrb	r2, [r3, #0]
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801946e:	b29b      	uxth	r3, r3
 8019470:	3b01      	subs	r3, #1
 8019472:	b29b      	uxth	r3, r3
 8019474:	687a      	ldr	r2, [r7, #4]
 8019476:	4619      	mov	r1, r3
 8019478:	84d1      	strh	r1, [r2, #38]	; 0x26
 801947a:	2b00      	cmp	r3, #0
 801947c:	d10f      	bne.n	801949e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	68da      	ldr	r2, [r3, #12]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801948c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	68da      	ldr	r2, [r3, #12]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801949c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801949e:	2300      	movs	r3, #0
 80194a0:	e000      	b.n	80194a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80194a2:	2302      	movs	r3, #2
  }
}
 80194a4:	4618      	mov	r0, r3
 80194a6:	3714      	adds	r7, #20
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	68da      	ldr	r2, [r3, #12]
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80194c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2220      	movs	r2, #32
 80194cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80194d4:	6878      	ldr	r0, [r7, #4]
 80194d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80194d8:	2300      	movs	r3, #0
}
 80194da:	4618      	mov	r0, r3
 80194dc:	3708      	adds	r7, #8
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}

080194e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80194e2:	b580      	push	{r7, lr}
 80194e4:	b08c      	sub	sp, #48	; 0x30
 80194e6:	af00      	add	r7, sp, #0
 80194e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	2b22      	cmp	r3, #34	; 0x22
 80194f4:	f040 80ad 	bne.w	8019652 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	689b      	ldr	r3, [r3, #8]
 80194fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019500:	d117      	bne.n	8019532 <UART_Receive_IT+0x50>
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	691b      	ldr	r3, [r3, #16]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d113      	bne.n	8019532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801950a:	2300      	movs	r3, #0
 801950c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	685b      	ldr	r3, [r3, #4]
 801951a:	b29b      	uxth	r3, r3
 801951c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019520:	b29a      	uxth	r2, r3
 8019522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801952a:	1c9a      	adds	r2, r3, #2
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	629a      	str	r2, [r3, #40]	; 0x28
 8019530:	e026      	b.n	8019580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8019538:	2300      	movs	r3, #0
 801953a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	689b      	ldr	r3, [r3, #8]
 8019540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019544:	d007      	beq.n	8019556 <UART_Receive_IT+0x74>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d10a      	bne.n	8019564 <UART_Receive_IT+0x82>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	691b      	ldr	r3, [r3, #16]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d106      	bne.n	8019564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	b2da      	uxtb	r2, r3
 801955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019560:	701a      	strb	r2, [r3, #0]
 8019562:	e008      	b.n	8019576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	b2db      	uxtb	r3, r3
 801956c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019570:	b2da      	uxtb	r2, r3
 8019572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801957a:	1c5a      	adds	r2, r3, #1
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019584:	b29b      	uxth	r3, r3
 8019586:	3b01      	subs	r3, #1
 8019588:	b29b      	uxth	r3, r3
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	4619      	mov	r1, r3
 801958e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8019590:	2b00      	cmp	r3, #0
 8019592:	d15c      	bne.n	801964e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	68da      	ldr	r2, [r3, #12]
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	f022 0220 	bic.w	r2, r2, #32
 80195a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	68da      	ldr	r2, [r3, #12]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80195b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	695a      	ldr	r2, [r3, #20]
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	f022 0201 	bic.w	r2, r2, #1
 80195c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2220      	movs	r2, #32
 80195c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195d0:	2b01      	cmp	r3, #1
 80195d2:	d136      	bne.n	8019642 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2200      	movs	r2, #0
 80195d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	330c      	adds	r3, #12
 80195e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	e853 3f00 	ldrex	r3, [r3]
 80195e8:	613b      	str	r3, [r7, #16]
   return(result);
 80195ea:	693b      	ldr	r3, [r7, #16]
 80195ec:	f023 0310 	bic.w	r3, r3, #16
 80195f0:	627b      	str	r3, [r7, #36]	; 0x24
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	330c      	adds	r3, #12
 80195f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195fa:	623a      	str	r2, [r7, #32]
 80195fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195fe:	69f9      	ldr	r1, [r7, #28]
 8019600:	6a3a      	ldr	r2, [r7, #32]
 8019602:	e841 2300 	strex	r3, r2, [r1]
 8019606:	61bb      	str	r3, [r7, #24]
   return(result);
 8019608:	69bb      	ldr	r3, [r7, #24]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d1e5      	bne.n	80195da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	f003 0310 	and.w	r3, r3, #16
 8019618:	2b10      	cmp	r3, #16
 801961a:	d10a      	bne.n	8019632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801961c:	2300      	movs	r3, #0
 801961e:	60fb      	str	r3, [r7, #12]
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	60fb      	str	r3, [r7, #12]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	685b      	ldr	r3, [r3, #4]
 801962e:	60fb      	str	r3, [r7, #12]
 8019630:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019636:	687a      	ldr	r2, [r7, #4]
 8019638:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 801963a:	4611      	mov	r1, r2
 801963c:	6878      	ldr	r0, [r7, #4]
 801963e:	4798      	blx	r3
 8019640:	e003      	b.n	801964a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801964a:	2300      	movs	r3, #0
 801964c:	e002      	b.n	8019654 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 801964e:	2300      	movs	r3, #0
 8019650:	e000      	b.n	8019654 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8019652:	2302      	movs	r3, #2
  }
}
 8019654:	4618      	mov	r0, r3
 8019656:	3730      	adds	r7, #48	; 0x30
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}

0801965c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801965c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019660:	b0c0      	sub	sp, #256	; 0x100
 8019662:	af00      	add	r7, sp, #0
 8019664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	691b      	ldr	r3, [r3, #16]
 8019670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8019674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019678:	68d9      	ldr	r1, [r3, #12]
 801967a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801967e:	681a      	ldr	r2, [r3, #0]
 8019680:	ea40 0301 	orr.w	r3, r0, r1
 8019684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8019686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801968a:	689a      	ldr	r2, [r3, #8]
 801968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	431a      	orrs	r2, r3
 8019694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019698:	695b      	ldr	r3, [r3, #20]
 801969a:	431a      	orrs	r2, r3
 801969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196a0:	69db      	ldr	r3, [r3, #28]
 80196a2:	4313      	orrs	r3, r2
 80196a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80196a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	68db      	ldr	r3, [r3, #12]
 80196b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80196b4:	f021 010c 	bic.w	r1, r1, #12
 80196b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196bc:	681a      	ldr	r2, [r3, #0]
 80196be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80196c2:	430b      	orrs	r3, r1
 80196c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80196c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	695b      	ldr	r3, [r3, #20]
 80196ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80196d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196d6:	6999      	ldr	r1, [r3, #24]
 80196d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	ea40 0301 	orr.w	r3, r0, r1
 80196e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80196e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	4b8f      	ldr	r3, [pc, #572]	; (8019928 <UART_SetConfig+0x2cc>)
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d005      	beq.n	80196fc <UART_SetConfig+0xa0>
 80196f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	4b8d      	ldr	r3, [pc, #564]	; (801992c <UART_SetConfig+0x2d0>)
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d104      	bne.n	8019706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80196fc:	f7fe fbbe 	bl	8017e7c <HAL_RCC_GetPCLK2Freq>
 8019700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8019704:	e003      	b.n	801970e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8019706:	f7fe fba5 	bl	8017e54 <HAL_RCC_GetPCLK1Freq>
 801970a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019712:	69db      	ldr	r3, [r3, #28]
 8019714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019718:	f040 810c 	bne.w	8019934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801971c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019720:	2200      	movs	r2, #0
 8019722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8019726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801972a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801972e:	4622      	mov	r2, r4
 8019730:	462b      	mov	r3, r5
 8019732:	1891      	adds	r1, r2, r2
 8019734:	65b9      	str	r1, [r7, #88]	; 0x58
 8019736:	415b      	adcs	r3, r3
 8019738:	65fb      	str	r3, [r7, #92]	; 0x5c
 801973a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801973e:	4621      	mov	r1, r4
 8019740:	eb12 0801 	adds.w	r8, r2, r1
 8019744:	4629      	mov	r1, r5
 8019746:	eb43 0901 	adc.w	r9, r3, r1
 801974a:	f04f 0200 	mov.w	r2, #0
 801974e:	f04f 0300 	mov.w	r3, #0
 8019752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8019756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801975a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801975e:	4690      	mov	r8, r2
 8019760:	4699      	mov	r9, r3
 8019762:	4623      	mov	r3, r4
 8019764:	eb18 0303 	adds.w	r3, r8, r3
 8019768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801976c:	462b      	mov	r3, r5
 801976e:	eb49 0303 	adc.w	r3, r9, r3
 8019772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8019776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	2200      	movs	r2, #0
 801977e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8019786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801978a:	460b      	mov	r3, r1
 801978c:	18db      	adds	r3, r3, r3
 801978e:	653b      	str	r3, [r7, #80]	; 0x50
 8019790:	4613      	mov	r3, r2
 8019792:	eb42 0303 	adc.w	r3, r2, r3
 8019796:	657b      	str	r3, [r7, #84]	; 0x54
 8019798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801979c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80197a0:	f7e7 fa5a 	bl	8000c58 <__aeabi_uldivmod>
 80197a4:	4602      	mov	r2, r0
 80197a6:	460b      	mov	r3, r1
 80197a8:	4b61      	ldr	r3, [pc, #388]	; (8019930 <UART_SetConfig+0x2d4>)
 80197aa:	fba3 2302 	umull	r2, r3, r3, r2
 80197ae:	095b      	lsrs	r3, r3, #5
 80197b0:	011c      	lsls	r4, r3, #4
 80197b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80197b6:	2200      	movs	r2, #0
 80197b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80197bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80197c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80197c4:	4642      	mov	r2, r8
 80197c6:	464b      	mov	r3, r9
 80197c8:	1891      	adds	r1, r2, r2
 80197ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80197cc:	415b      	adcs	r3, r3
 80197ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80197d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80197d4:	4641      	mov	r1, r8
 80197d6:	eb12 0a01 	adds.w	sl, r2, r1
 80197da:	4649      	mov	r1, r9
 80197dc:	eb43 0b01 	adc.w	fp, r3, r1
 80197e0:	f04f 0200 	mov.w	r2, #0
 80197e4:	f04f 0300 	mov.w	r3, #0
 80197e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80197ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80197f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80197f4:	4692      	mov	sl, r2
 80197f6:	469b      	mov	fp, r3
 80197f8:	4643      	mov	r3, r8
 80197fa:	eb1a 0303 	adds.w	r3, sl, r3
 80197fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019802:	464b      	mov	r3, r9
 8019804:	eb4b 0303 	adc.w	r3, fp, r3
 8019808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801980c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019810:	685b      	ldr	r3, [r3, #4]
 8019812:	2200      	movs	r2, #0
 8019814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801981c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8019820:	460b      	mov	r3, r1
 8019822:	18db      	adds	r3, r3, r3
 8019824:	643b      	str	r3, [r7, #64]	; 0x40
 8019826:	4613      	mov	r3, r2
 8019828:	eb42 0303 	adc.w	r3, r2, r3
 801982c:	647b      	str	r3, [r7, #68]	; 0x44
 801982e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8019832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8019836:	f7e7 fa0f 	bl	8000c58 <__aeabi_uldivmod>
 801983a:	4602      	mov	r2, r0
 801983c:	460b      	mov	r3, r1
 801983e:	4611      	mov	r1, r2
 8019840:	4b3b      	ldr	r3, [pc, #236]	; (8019930 <UART_SetConfig+0x2d4>)
 8019842:	fba3 2301 	umull	r2, r3, r3, r1
 8019846:	095b      	lsrs	r3, r3, #5
 8019848:	2264      	movs	r2, #100	; 0x64
 801984a:	fb02 f303 	mul.w	r3, r2, r3
 801984e:	1acb      	subs	r3, r1, r3
 8019850:	00db      	lsls	r3, r3, #3
 8019852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8019856:	4b36      	ldr	r3, [pc, #216]	; (8019930 <UART_SetConfig+0x2d4>)
 8019858:	fba3 2302 	umull	r2, r3, r3, r2
 801985c:	095b      	lsrs	r3, r3, #5
 801985e:	005b      	lsls	r3, r3, #1
 8019860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8019864:	441c      	add	r4, r3
 8019866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801986a:	2200      	movs	r2, #0
 801986c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8019874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8019878:	4642      	mov	r2, r8
 801987a:	464b      	mov	r3, r9
 801987c:	1891      	adds	r1, r2, r2
 801987e:	63b9      	str	r1, [r7, #56]	; 0x38
 8019880:	415b      	adcs	r3, r3
 8019882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8019888:	4641      	mov	r1, r8
 801988a:	1851      	adds	r1, r2, r1
 801988c:	6339      	str	r1, [r7, #48]	; 0x30
 801988e:	4649      	mov	r1, r9
 8019890:	414b      	adcs	r3, r1
 8019892:	637b      	str	r3, [r7, #52]	; 0x34
 8019894:	f04f 0200 	mov.w	r2, #0
 8019898:	f04f 0300 	mov.w	r3, #0
 801989c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80198a0:	4659      	mov	r1, fp
 80198a2:	00cb      	lsls	r3, r1, #3
 80198a4:	4651      	mov	r1, sl
 80198a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80198aa:	4651      	mov	r1, sl
 80198ac:	00ca      	lsls	r2, r1, #3
 80198ae:	4610      	mov	r0, r2
 80198b0:	4619      	mov	r1, r3
 80198b2:	4603      	mov	r3, r0
 80198b4:	4642      	mov	r2, r8
 80198b6:	189b      	adds	r3, r3, r2
 80198b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80198bc:	464b      	mov	r3, r9
 80198be:	460a      	mov	r2, r1
 80198c0:	eb42 0303 	adc.w	r3, r2, r3
 80198c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80198c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80198cc:	685b      	ldr	r3, [r3, #4]
 80198ce:	2200      	movs	r2, #0
 80198d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80198d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80198d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80198dc:	460b      	mov	r3, r1
 80198de:	18db      	adds	r3, r3, r3
 80198e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80198e2:	4613      	mov	r3, r2
 80198e4:	eb42 0303 	adc.w	r3, r2, r3
 80198e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80198ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80198f2:	f7e7 f9b1 	bl	8000c58 <__aeabi_uldivmod>
 80198f6:	4602      	mov	r2, r0
 80198f8:	460b      	mov	r3, r1
 80198fa:	4b0d      	ldr	r3, [pc, #52]	; (8019930 <UART_SetConfig+0x2d4>)
 80198fc:	fba3 1302 	umull	r1, r3, r3, r2
 8019900:	095b      	lsrs	r3, r3, #5
 8019902:	2164      	movs	r1, #100	; 0x64
 8019904:	fb01 f303 	mul.w	r3, r1, r3
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	00db      	lsls	r3, r3, #3
 801990c:	3332      	adds	r3, #50	; 0x32
 801990e:	4a08      	ldr	r2, [pc, #32]	; (8019930 <UART_SetConfig+0x2d4>)
 8019910:	fba2 2303 	umull	r2, r3, r2, r3
 8019914:	095b      	lsrs	r3, r3, #5
 8019916:	f003 0207 	and.w	r2, r3, #7
 801991a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	4422      	add	r2, r4
 8019922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8019924:	e106      	b.n	8019b34 <UART_SetConfig+0x4d8>
 8019926:	bf00      	nop
 8019928:	40011000 	.word	0x40011000
 801992c:	40011400 	.word	0x40011400
 8019930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8019934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019938:	2200      	movs	r2, #0
 801993a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801993e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8019946:	4642      	mov	r2, r8
 8019948:	464b      	mov	r3, r9
 801994a:	1891      	adds	r1, r2, r2
 801994c:	6239      	str	r1, [r7, #32]
 801994e:	415b      	adcs	r3, r3
 8019950:	627b      	str	r3, [r7, #36]	; 0x24
 8019952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8019956:	4641      	mov	r1, r8
 8019958:	1854      	adds	r4, r2, r1
 801995a:	4649      	mov	r1, r9
 801995c:	eb43 0501 	adc.w	r5, r3, r1
 8019960:	f04f 0200 	mov.w	r2, #0
 8019964:	f04f 0300 	mov.w	r3, #0
 8019968:	00eb      	lsls	r3, r5, #3
 801996a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801996e:	00e2      	lsls	r2, r4, #3
 8019970:	4614      	mov	r4, r2
 8019972:	461d      	mov	r5, r3
 8019974:	4643      	mov	r3, r8
 8019976:	18e3      	adds	r3, r4, r3
 8019978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801997c:	464b      	mov	r3, r9
 801997e:	eb45 0303 	adc.w	r3, r5, r3
 8019982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801998a:	685b      	ldr	r3, [r3, #4]
 801998c:	2200      	movs	r2, #0
 801998e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8019996:	f04f 0200 	mov.w	r2, #0
 801999a:	f04f 0300 	mov.w	r3, #0
 801999e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80199a2:	4629      	mov	r1, r5
 80199a4:	008b      	lsls	r3, r1, #2
 80199a6:	4621      	mov	r1, r4
 80199a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80199ac:	4621      	mov	r1, r4
 80199ae:	008a      	lsls	r2, r1, #2
 80199b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80199b4:	f7e7 f950 	bl	8000c58 <__aeabi_uldivmod>
 80199b8:	4602      	mov	r2, r0
 80199ba:	460b      	mov	r3, r1
 80199bc:	4b60      	ldr	r3, [pc, #384]	; (8019b40 <UART_SetConfig+0x4e4>)
 80199be:	fba3 2302 	umull	r2, r3, r3, r2
 80199c2:	095b      	lsrs	r3, r3, #5
 80199c4:	011c      	lsls	r4, r3, #4
 80199c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80199ca:	2200      	movs	r2, #0
 80199cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80199d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80199d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80199d8:	4642      	mov	r2, r8
 80199da:	464b      	mov	r3, r9
 80199dc:	1891      	adds	r1, r2, r2
 80199de:	61b9      	str	r1, [r7, #24]
 80199e0:	415b      	adcs	r3, r3
 80199e2:	61fb      	str	r3, [r7, #28]
 80199e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80199e8:	4641      	mov	r1, r8
 80199ea:	1851      	adds	r1, r2, r1
 80199ec:	6139      	str	r1, [r7, #16]
 80199ee:	4649      	mov	r1, r9
 80199f0:	414b      	adcs	r3, r1
 80199f2:	617b      	str	r3, [r7, #20]
 80199f4:	f04f 0200 	mov.w	r2, #0
 80199f8:	f04f 0300 	mov.w	r3, #0
 80199fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8019a00:	4659      	mov	r1, fp
 8019a02:	00cb      	lsls	r3, r1, #3
 8019a04:	4651      	mov	r1, sl
 8019a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8019a0a:	4651      	mov	r1, sl
 8019a0c:	00ca      	lsls	r2, r1, #3
 8019a0e:	4610      	mov	r0, r2
 8019a10:	4619      	mov	r1, r3
 8019a12:	4603      	mov	r3, r0
 8019a14:	4642      	mov	r2, r8
 8019a16:	189b      	adds	r3, r3, r2
 8019a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019a1c:	464b      	mov	r3, r9
 8019a1e:	460a      	mov	r2, r1
 8019a20:	eb42 0303 	adc.w	r3, r2, r3
 8019a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019a2c:	685b      	ldr	r3, [r3, #4]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8019a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8019a34:	f04f 0200 	mov.w	r2, #0
 8019a38:	f04f 0300 	mov.w	r3, #0
 8019a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8019a40:	4649      	mov	r1, r9
 8019a42:	008b      	lsls	r3, r1, #2
 8019a44:	4641      	mov	r1, r8
 8019a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8019a4a:	4641      	mov	r1, r8
 8019a4c:	008a      	lsls	r2, r1, #2
 8019a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8019a52:	f7e7 f901 	bl	8000c58 <__aeabi_uldivmod>
 8019a56:	4602      	mov	r2, r0
 8019a58:	460b      	mov	r3, r1
 8019a5a:	4611      	mov	r1, r2
 8019a5c:	4b38      	ldr	r3, [pc, #224]	; (8019b40 <UART_SetConfig+0x4e4>)
 8019a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8019a62:	095b      	lsrs	r3, r3, #5
 8019a64:	2264      	movs	r2, #100	; 0x64
 8019a66:	fb02 f303 	mul.w	r3, r2, r3
 8019a6a:	1acb      	subs	r3, r1, r3
 8019a6c:	011b      	lsls	r3, r3, #4
 8019a6e:	3332      	adds	r3, #50	; 0x32
 8019a70:	4a33      	ldr	r2, [pc, #204]	; (8019b40 <UART_SetConfig+0x4e4>)
 8019a72:	fba2 2303 	umull	r2, r3, r2, r3
 8019a76:	095b      	lsrs	r3, r3, #5
 8019a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a7c:	441c      	add	r4, r3
 8019a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019a82:	2200      	movs	r2, #0
 8019a84:	673b      	str	r3, [r7, #112]	; 0x70
 8019a86:	677a      	str	r2, [r7, #116]	; 0x74
 8019a88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8019a8c:	4642      	mov	r2, r8
 8019a8e:	464b      	mov	r3, r9
 8019a90:	1891      	adds	r1, r2, r2
 8019a92:	60b9      	str	r1, [r7, #8]
 8019a94:	415b      	adcs	r3, r3
 8019a96:	60fb      	str	r3, [r7, #12]
 8019a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019a9c:	4641      	mov	r1, r8
 8019a9e:	1851      	adds	r1, r2, r1
 8019aa0:	6039      	str	r1, [r7, #0]
 8019aa2:	4649      	mov	r1, r9
 8019aa4:	414b      	adcs	r3, r1
 8019aa6:	607b      	str	r3, [r7, #4]
 8019aa8:	f04f 0200 	mov.w	r2, #0
 8019aac:	f04f 0300 	mov.w	r3, #0
 8019ab0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8019ab4:	4659      	mov	r1, fp
 8019ab6:	00cb      	lsls	r3, r1, #3
 8019ab8:	4651      	mov	r1, sl
 8019aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8019abe:	4651      	mov	r1, sl
 8019ac0:	00ca      	lsls	r2, r1, #3
 8019ac2:	4610      	mov	r0, r2
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	4642      	mov	r2, r8
 8019aca:	189b      	adds	r3, r3, r2
 8019acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8019ace:	464b      	mov	r3, r9
 8019ad0:	460a      	mov	r2, r1
 8019ad2:	eb42 0303 	adc.w	r3, r2, r3
 8019ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8019ae2:	667a      	str	r2, [r7, #100]	; 0x64
 8019ae4:	f04f 0200 	mov.w	r2, #0
 8019ae8:	f04f 0300 	mov.w	r3, #0
 8019aec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8019af0:	4649      	mov	r1, r9
 8019af2:	008b      	lsls	r3, r1, #2
 8019af4:	4641      	mov	r1, r8
 8019af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8019afa:	4641      	mov	r1, r8
 8019afc:	008a      	lsls	r2, r1, #2
 8019afe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8019b02:	f7e7 f8a9 	bl	8000c58 <__aeabi_uldivmod>
 8019b06:	4602      	mov	r2, r0
 8019b08:	460b      	mov	r3, r1
 8019b0a:	4b0d      	ldr	r3, [pc, #52]	; (8019b40 <UART_SetConfig+0x4e4>)
 8019b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8019b10:	095b      	lsrs	r3, r3, #5
 8019b12:	2164      	movs	r1, #100	; 0x64
 8019b14:	fb01 f303 	mul.w	r3, r1, r3
 8019b18:	1ad3      	subs	r3, r2, r3
 8019b1a:	011b      	lsls	r3, r3, #4
 8019b1c:	3332      	adds	r3, #50	; 0x32
 8019b1e:	4a08      	ldr	r2, [pc, #32]	; (8019b40 <UART_SetConfig+0x4e4>)
 8019b20:	fba2 2303 	umull	r2, r3, r2, r3
 8019b24:	095b      	lsrs	r3, r3, #5
 8019b26:	f003 020f 	and.w	r2, r3, #15
 8019b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4422      	add	r2, r4
 8019b32:	609a      	str	r2, [r3, #8]
}
 8019b34:	bf00      	nop
 8019b36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019b40:	51eb851f 	.word	0x51eb851f

08019b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019b44:	b084      	sub	sp, #16
 8019b46:	b580      	push	{r7, lr}
 8019b48:	b084      	sub	sp, #16
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	6078      	str	r0, [r7, #4]
 8019b4e:	f107 001c 	add.w	r0, r7, #28
 8019b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8019b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b58:	2b01      	cmp	r3, #1
 8019b5a:	d122      	bne.n	8019ba2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	68db      	ldr	r3, [r3, #12]
 8019b6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8019b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	68db      	ldr	r3, [r3, #12]
 8019b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8019b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b86:	2b01      	cmp	r3, #1
 8019b88:	d105      	bne.n	8019b96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	68db      	ldr	r3, [r3, #12]
 8019b8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f001 fbee 	bl	801b378 <USB_CoreReset>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	73fb      	strb	r3, [r7, #15]
 8019ba0:	e01a      	b.n	8019bd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	68db      	ldr	r3, [r3, #12]
 8019ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8019bae:	6878      	ldr	r0, [r7, #4]
 8019bb0:	f001 fbe2 	bl	801b378 <USB_CoreReset>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8019bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d106      	bne.n	8019bcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8019bca:	e005      	b.n	8019bd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8019bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bda:	2b01      	cmp	r3, #1
 8019bdc:	d10b      	bne.n	8019bf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	689b      	ldr	r3, [r3, #8]
 8019be2:	f043 0206 	orr.w	r2, r3, #6
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	689b      	ldr	r3, [r3, #8]
 8019bee:	f043 0220 	orr.w	r2, r3, #32
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8019bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019c02:	b004      	add	sp, #16
 8019c04:	4770      	bx	lr
	...

08019c08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	b087      	sub	sp, #28
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	60f8      	str	r0, [r7, #12]
 8019c10:	60b9      	str	r1, [r7, #8]
 8019c12:	4613      	mov	r3, r2
 8019c14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8019c16:	79fb      	ldrb	r3, [r7, #7]
 8019c18:	2b02      	cmp	r3, #2
 8019c1a:	d165      	bne.n	8019ce8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	4a41      	ldr	r2, [pc, #260]	; (8019d24 <USB_SetTurnaroundTime+0x11c>)
 8019c20:	4293      	cmp	r3, r2
 8019c22:	d906      	bls.n	8019c32 <USB_SetTurnaroundTime+0x2a>
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	4a40      	ldr	r2, [pc, #256]	; (8019d28 <USB_SetTurnaroundTime+0x120>)
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	d202      	bcs.n	8019c32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8019c2c:	230f      	movs	r3, #15
 8019c2e:	617b      	str	r3, [r7, #20]
 8019c30:	e062      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	4a3c      	ldr	r2, [pc, #240]	; (8019d28 <USB_SetTurnaroundTime+0x120>)
 8019c36:	4293      	cmp	r3, r2
 8019c38:	d306      	bcc.n	8019c48 <USB_SetTurnaroundTime+0x40>
 8019c3a:	68bb      	ldr	r3, [r7, #8]
 8019c3c:	4a3b      	ldr	r2, [pc, #236]	; (8019d2c <USB_SetTurnaroundTime+0x124>)
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	d202      	bcs.n	8019c48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8019c42:	230e      	movs	r3, #14
 8019c44:	617b      	str	r3, [r7, #20]
 8019c46:	e057      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	4a38      	ldr	r2, [pc, #224]	; (8019d2c <USB_SetTurnaroundTime+0x124>)
 8019c4c:	4293      	cmp	r3, r2
 8019c4e:	d306      	bcc.n	8019c5e <USB_SetTurnaroundTime+0x56>
 8019c50:	68bb      	ldr	r3, [r7, #8]
 8019c52:	4a37      	ldr	r2, [pc, #220]	; (8019d30 <USB_SetTurnaroundTime+0x128>)
 8019c54:	4293      	cmp	r3, r2
 8019c56:	d202      	bcs.n	8019c5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8019c58:	230d      	movs	r3, #13
 8019c5a:	617b      	str	r3, [r7, #20]
 8019c5c:	e04c      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	4a33      	ldr	r2, [pc, #204]	; (8019d30 <USB_SetTurnaroundTime+0x128>)
 8019c62:	4293      	cmp	r3, r2
 8019c64:	d306      	bcc.n	8019c74 <USB_SetTurnaroundTime+0x6c>
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	4a32      	ldr	r2, [pc, #200]	; (8019d34 <USB_SetTurnaroundTime+0x12c>)
 8019c6a:	4293      	cmp	r3, r2
 8019c6c:	d802      	bhi.n	8019c74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8019c6e:	230c      	movs	r3, #12
 8019c70:	617b      	str	r3, [r7, #20]
 8019c72:	e041      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	4a2f      	ldr	r2, [pc, #188]	; (8019d34 <USB_SetTurnaroundTime+0x12c>)
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	d906      	bls.n	8019c8a <USB_SetTurnaroundTime+0x82>
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	4a2e      	ldr	r2, [pc, #184]	; (8019d38 <USB_SetTurnaroundTime+0x130>)
 8019c80:	4293      	cmp	r3, r2
 8019c82:	d802      	bhi.n	8019c8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8019c84:	230b      	movs	r3, #11
 8019c86:	617b      	str	r3, [r7, #20]
 8019c88:	e036      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	4a2a      	ldr	r2, [pc, #168]	; (8019d38 <USB_SetTurnaroundTime+0x130>)
 8019c8e:	4293      	cmp	r3, r2
 8019c90:	d906      	bls.n	8019ca0 <USB_SetTurnaroundTime+0x98>
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	4a29      	ldr	r2, [pc, #164]	; (8019d3c <USB_SetTurnaroundTime+0x134>)
 8019c96:	4293      	cmp	r3, r2
 8019c98:	d802      	bhi.n	8019ca0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8019c9a:	230a      	movs	r3, #10
 8019c9c:	617b      	str	r3, [r7, #20]
 8019c9e:	e02b      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	4a26      	ldr	r2, [pc, #152]	; (8019d3c <USB_SetTurnaroundTime+0x134>)
 8019ca4:	4293      	cmp	r3, r2
 8019ca6:	d906      	bls.n	8019cb6 <USB_SetTurnaroundTime+0xae>
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	4a25      	ldr	r2, [pc, #148]	; (8019d40 <USB_SetTurnaroundTime+0x138>)
 8019cac:	4293      	cmp	r3, r2
 8019cae:	d202      	bcs.n	8019cb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8019cb0:	2309      	movs	r3, #9
 8019cb2:	617b      	str	r3, [r7, #20]
 8019cb4:	e020      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8019cb6:	68bb      	ldr	r3, [r7, #8]
 8019cb8:	4a21      	ldr	r2, [pc, #132]	; (8019d40 <USB_SetTurnaroundTime+0x138>)
 8019cba:	4293      	cmp	r3, r2
 8019cbc:	d306      	bcc.n	8019ccc <USB_SetTurnaroundTime+0xc4>
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	4a20      	ldr	r2, [pc, #128]	; (8019d44 <USB_SetTurnaroundTime+0x13c>)
 8019cc2:	4293      	cmp	r3, r2
 8019cc4:	d802      	bhi.n	8019ccc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8019cc6:	2308      	movs	r3, #8
 8019cc8:	617b      	str	r3, [r7, #20]
 8019cca:	e015      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8019ccc:	68bb      	ldr	r3, [r7, #8]
 8019cce:	4a1d      	ldr	r2, [pc, #116]	; (8019d44 <USB_SetTurnaroundTime+0x13c>)
 8019cd0:	4293      	cmp	r3, r2
 8019cd2:	d906      	bls.n	8019ce2 <USB_SetTurnaroundTime+0xda>
 8019cd4:	68bb      	ldr	r3, [r7, #8]
 8019cd6:	4a1c      	ldr	r2, [pc, #112]	; (8019d48 <USB_SetTurnaroundTime+0x140>)
 8019cd8:	4293      	cmp	r3, r2
 8019cda:	d202      	bcs.n	8019ce2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8019cdc:	2307      	movs	r3, #7
 8019cde:	617b      	str	r3, [r7, #20]
 8019ce0:	e00a      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8019ce2:	2306      	movs	r3, #6
 8019ce4:	617b      	str	r3, [r7, #20]
 8019ce6:	e007      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8019ce8:	79fb      	ldrb	r3, [r7, #7]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d102      	bne.n	8019cf4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8019cee:	2309      	movs	r3, #9
 8019cf0:	617b      	str	r3, [r7, #20]
 8019cf2:	e001      	b.n	8019cf8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8019cf4:	2309      	movs	r3, #9
 8019cf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	68db      	ldr	r3, [r3, #12]
 8019cfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	68da      	ldr	r2, [r3, #12]
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	029b      	lsls	r3, r3, #10
 8019d0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8019d10:	431a      	orrs	r2, r3
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8019d16:	2300      	movs	r3, #0
}
 8019d18:	4618      	mov	r0, r3
 8019d1a:	371c      	adds	r7, #28
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr
 8019d24:	00d8acbf 	.word	0x00d8acbf
 8019d28:	00e4e1c0 	.word	0x00e4e1c0
 8019d2c:	00f42400 	.word	0x00f42400
 8019d30:	01067380 	.word	0x01067380
 8019d34:	011a499f 	.word	0x011a499f
 8019d38:	01312cff 	.word	0x01312cff
 8019d3c:	014ca43f 	.word	0x014ca43f
 8019d40:	016e3600 	.word	0x016e3600
 8019d44:	01a6ab1f 	.word	0x01a6ab1f
 8019d48:	01e84800 	.word	0x01e84800

08019d4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019d4c:	b480      	push	{r7}
 8019d4e:	b083      	sub	sp, #12
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	689b      	ldr	r3, [r3, #8]
 8019d58:	f043 0201 	orr.w	r2, r3, #1
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019d60:	2300      	movs	r3, #0
}
 8019d62:	4618      	mov	r0, r3
 8019d64:	370c      	adds	r7, #12
 8019d66:	46bd      	mov	sp, r7
 8019d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6c:	4770      	bx	lr

08019d6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019d6e:	b480      	push	{r7}
 8019d70:	b083      	sub	sp, #12
 8019d72:	af00      	add	r7, sp, #0
 8019d74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	689b      	ldr	r3, [r3, #8]
 8019d7a:	f023 0201 	bic.w	r2, r3, #1
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019d82:	2300      	movs	r3, #0
}
 8019d84:	4618      	mov	r0, r3
 8019d86:	370c      	adds	r7, #12
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d8e:	4770      	bx	lr

08019d90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	460b      	mov	r3, r1
 8019d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	68db      	ldr	r3, [r3, #12]
 8019da4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8019dac:	78fb      	ldrb	r3, [r7, #3]
 8019dae:	2b01      	cmp	r3, #1
 8019db0:	d115      	bne.n	8019dde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8019dbe:	2001      	movs	r0, #1
 8019dc0:	f7fa fb44 	bl	801444c <HAL_Delay>
      ms++;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	3301      	adds	r3, #1
 8019dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8019dca:	6878      	ldr	r0, [r7, #4]
 8019dcc:	f001 fa45 	bl	801b25a <USB_GetMode>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	2b01      	cmp	r3, #1
 8019dd4:	d01e      	beq.n	8019e14 <USB_SetCurrentMode+0x84>
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	2b31      	cmp	r3, #49	; 0x31
 8019dda:	d9f0      	bls.n	8019dbe <USB_SetCurrentMode+0x2e>
 8019ddc:	e01a      	b.n	8019e14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8019dde:	78fb      	ldrb	r3, [r7, #3]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d115      	bne.n	8019e10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	68db      	ldr	r3, [r3, #12]
 8019de8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8019df0:	2001      	movs	r0, #1
 8019df2:	f7fa fb2b 	bl	801444c <HAL_Delay>
      ms++;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	3301      	adds	r3, #1
 8019dfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	f001 fa2c 	bl	801b25a <USB_GetMode>
 8019e02:	4603      	mov	r3, r0
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d005      	beq.n	8019e14 <USB_SetCurrentMode+0x84>
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b31      	cmp	r3, #49	; 0x31
 8019e0c:	d9f0      	bls.n	8019df0 <USB_SetCurrentMode+0x60>
 8019e0e:	e001      	b.n	8019e14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8019e10:	2301      	movs	r3, #1
 8019e12:	e005      	b.n	8019e20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	2b32      	cmp	r3, #50	; 0x32
 8019e18:	d101      	bne.n	8019e1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e000      	b.n	8019e20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8019e1e:	2300      	movs	r3, #0
}
 8019e20:	4618      	mov	r0, r3
 8019e22:	3710      	adds	r7, #16
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019e28:	b084      	sub	sp, #16
 8019e2a:	b580      	push	{r7, lr}
 8019e2c:	b086      	sub	sp, #24
 8019e2e:	af00      	add	r7, sp, #0
 8019e30:	6078      	str	r0, [r7, #4]
 8019e32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8019e42:	2300      	movs	r3, #0
 8019e44:	613b      	str	r3, [r7, #16]
 8019e46:	e009      	b.n	8019e5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8019e48:	687a      	ldr	r2, [r7, #4]
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	3340      	adds	r3, #64	; 0x40
 8019e4e:	009b      	lsls	r3, r3, #2
 8019e50:	4413      	add	r3, r2
 8019e52:	2200      	movs	r2, #0
 8019e54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	3301      	adds	r3, #1
 8019e5a:	613b      	str	r3, [r7, #16]
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	2b0e      	cmp	r3, #14
 8019e60:	d9f2      	bls.n	8019e48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8019e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d11c      	bne.n	8019ea2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019e6e:	685b      	ldr	r3, [r3, #4]
 8019e70:	68fa      	ldr	r2, [r7, #12]
 8019e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019e76:	f043 0302 	orr.w	r3, r3, #2
 8019e7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8019ea0:	e00b      	b.n	8019eba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ea6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019eb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ecc:	4619      	mov	r1, r3
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ed4:	461a      	mov	r2, r3
 8019ed6:	680b      	ldr	r3, [r1, #0]
 8019ed8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8019eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019edc:	2b01      	cmp	r3, #1
 8019ede:	d10c      	bne.n	8019efa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8019ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d104      	bne.n	8019ef0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8019ee6:	2100      	movs	r1, #0
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	f000 f965 	bl	801a1b8 <USB_SetDevSpeed>
 8019eee:	e008      	b.n	8019f02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8019ef0:	2101      	movs	r1, #1
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f000 f960 	bl	801a1b8 <USB_SetDevSpeed>
 8019ef8:	e003      	b.n	8019f02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8019efa:	2103      	movs	r1, #3
 8019efc:	6878      	ldr	r0, [r7, #4]
 8019efe:	f000 f95b 	bl	801a1b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8019f02:	2110      	movs	r1, #16
 8019f04:	6878      	ldr	r0, [r7, #4]
 8019f06:	f000 f8f3 	bl	801a0f0 <USB_FlushTxFifo>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d001      	beq.n	8019f14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8019f10:	2301      	movs	r3, #1
 8019f12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8019f14:	6878      	ldr	r0, [r7, #4]
 8019f16:	f000 f91f 	bl	801a158 <USB_FlushRxFifo>
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d001      	beq.n	8019f24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8019f20:	2301      	movs	r3, #1
 8019f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f36:	461a      	mov	r2, r3
 8019f38:	2300      	movs	r3, #0
 8019f3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f42:	461a      	mov	r2, r3
 8019f44:	2300      	movs	r3, #0
 8019f46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019f48:	2300      	movs	r3, #0
 8019f4a:	613b      	str	r3, [r7, #16]
 8019f4c:	e043      	b.n	8019fd6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019f4e:	693b      	ldr	r3, [r7, #16]
 8019f50:	015a      	lsls	r2, r3, #5
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	4413      	add	r3, r2
 8019f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019f64:	d118      	bne.n	8019f98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8019f66:	693b      	ldr	r3, [r7, #16]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d10a      	bne.n	8019f82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8019f6c:	693b      	ldr	r3, [r7, #16]
 8019f6e:	015a      	lsls	r2, r3, #5
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	4413      	add	r3, r2
 8019f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f78:	461a      	mov	r2, r3
 8019f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019f7e:	6013      	str	r3, [r2, #0]
 8019f80:	e013      	b.n	8019faa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8019f82:	693b      	ldr	r3, [r7, #16]
 8019f84:	015a      	lsls	r2, r3, #5
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	4413      	add	r3, r2
 8019f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f8e:	461a      	mov	r2, r3
 8019f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8019f94:	6013      	str	r3, [r2, #0]
 8019f96:	e008      	b.n	8019faa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8019f98:	693b      	ldr	r3, [r7, #16]
 8019f9a:	015a      	lsls	r2, r3, #5
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	4413      	add	r3, r2
 8019fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fa4:	461a      	mov	r2, r3
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8019faa:	693b      	ldr	r3, [r7, #16]
 8019fac:	015a      	lsls	r2, r3, #5
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	4413      	add	r3, r2
 8019fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	2300      	movs	r3, #0
 8019fba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8019fbc:	693b      	ldr	r3, [r7, #16]
 8019fbe:	015a      	lsls	r2, r3, #5
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	4413      	add	r3, r2
 8019fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fc8:	461a      	mov	r2, r3
 8019fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8019fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019fd0:	693b      	ldr	r3, [r7, #16]
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	613b      	str	r3, [r7, #16]
 8019fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fd8:	693a      	ldr	r2, [r7, #16]
 8019fda:	429a      	cmp	r2, r3
 8019fdc:	d3b7      	bcc.n	8019f4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019fde:	2300      	movs	r3, #0
 8019fe0:	613b      	str	r3, [r7, #16]
 8019fe2:	e043      	b.n	801a06c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019fe4:	693b      	ldr	r3, [r7, #16]
 8019fe6:	015a      	lsls	r2, r3, #5
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	4413      	add	r3, r2
 8019fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019ffa:	d118      	bne.n	801a02e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8019ffc:	693b      	ldr	r3, [r7, #16]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d10a      	bne.n	801a018 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	015a      	lsls	r2, r3, #5
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	4413      	add	r3, r2
 801a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a00e:	461a      	mov	r2, r3
 801a010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a014:	6013      	str	r3, [r2, #0]
 801a016:	e013      	b.n	801a040 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	015a      	lsls	r2, r3, #5
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	4413      	add	r3, r2
 801a020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a024:	461a      	mov	r2, r3
 801a026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801a02a:	6013      	str	r3, [r2, #0]
 801a02c:	e008      	b.n	801a040 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	015a      	lsls	r2, r3, #5
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	4413      	add	r3, r2
 801a036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a03a:	461a      	mov	r2, r3
 801a03c:	2300      	movs	r3, #0
 801a03e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	015a      	lsls	r2, r3, #5
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	4413      	add	r3, r2
 801a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a04c:	461a      	mov	r2, r3
 801a04e:	2300      	movs	r3, #0
 801a050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801a052:	693b      	ldr	r3, [r7, #16]
 801a054:	015a      	lsls	r2, r3, #5
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	4413      	add	r3, r2
 801a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a05e:	461a      	mov	r2, r3
 801a060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	3301      	adds	r3, #1
 801a06a:	613b      	str	r3, [r7, #16]
 801a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06e:	693a      	ldr	r2, [r7, #16]
 801a070:	429a      	cmp	r2, r3
 801a072:	d3b7      	bcc.n	8019fe4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a07a:	691b      	ldr	r3, [r3, #16]
 801a07c:	68fa      	ldr	r2, [r7, #12]
 801a07e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2200      	movs	r2, #0
 801a08c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801a094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d105      	bne.n	801a0a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	699b      	ldr	r3, [r3, #24]
 801a0a0:	f043 0210 	orr.w	r2, r3, #16
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	699a      	ldr	r2, [r3, #24]
 801a0ac:	4b0f      	ldr	r3, [pc, #60]	; (801a0ec <USB_DevInit+0x2c4>)
 801a0ae:	4313      	orrs	r3, r2
 801a0b0:	687a      	ldr	r2, [r7, #4]
 801a0b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d005      	beq.n	801a0c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	699b      	ldr	r3, [r3, #24]
 801a0be:	f043 0208 	orr.w	r2, r3, #8
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d107      	bne.n	801a0dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	699b      	ldr	r3, [r3, #24]
 801a0d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a0d4:	f043 0304 	orr.w	r3, r3, #4
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801a0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0de:	4618      	mov	r0, r3
 801a0e0:	3718      	adds	r7, #24
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a0e8:	b004      	add	sp, #16
 801a0ea:	4770      	bx	lr
 801a0ec:	803c3800 	.word	0x803c3800

0801a0f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b085      	sub	sp, #20
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	3301      	adds	r3, #1
 801a102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	4a13      	ldr	r2, [pc, #76]	; (801a154 <USB_FlushTxFifo+0x64>)
 801a108:	4293      	cmp	r3, r2
 801a10a:	d901      	bls.n	801a110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801a10c:	2303      	movs	r3, #3
 801a10e:	e01b      	b.n	801a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	691b      	ldr	r3, [r3, #16]
 801a114:	2b00      	cmp	r3, #0
 801a116:	daf2      	bge.n	801a0fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801a118:	2300      	movs	r3, #0
 801a11a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801a11c:	683b      	ldr	r3, [r7, #0]
 801a11e:	019b      	lsls	r3, r3, #6
 801a120:	f043 0220 	orr.w	r2, r3, #32
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	3301      	adds	r3, #1
 801a12c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	4a08      	ldr	r2, [pc, #32]	; (801a154 <USB_FlushTxFifo+0x64>)
 801a132:	4293      	cmp	r3, r2
 801a134:	d901      	bls.n	801a13a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801a136:	2303      	movs	r3, #3
 801a138:	e006      	b.n	801a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	691b      	ldr	r3, [r3, #16]
 801a13e:	f003 0320 	and.w	r3, r3, #32
 801a142:	2b20      	cmp	r3, #32
 801a144:	d0f0      	beq.n	801a128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801a146:	2300      	movs	r3, #0
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3714      	adds	r7, #20
 801a14c:	46bd      	mov	sp, r7
 801a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a152:	4770      	bx	lr
 801a154:	00030d40 	.word	0x00030d40

0801a158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a160:	2300      	movs	r3, #0
 801a162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	3301      	adds	r3, #1
 801a168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	4a11      	ldr	r2, [pc, #68]	; (801a1b4 <USB_FlushRxFifo+0x5c>)
 801a16e:	4293      	cmp	r3, r2
 801a170:	d901      	bls.n	801a176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801a172:	2303      	movs	r3, #3
 801a174:	e018      	b.n	801a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	691b      	ldr	r3, [r3, #16]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	daf2      	bge.n	801a164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801a17e:	2300      	movs	r3, #0
 801a180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	2210      	movs	r2, #16
 801a186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	3301      	adds	r3, #1
 801a18c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	4a08      	ldr	r2, [pc, #32]	; (801a1b4 <USB_FlushRxFifo+0x5c>)
 801a192:	4293      	cmp	r3, r2
 801a194:	d901      	bls.n	801a19a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801a196:	2303      	movs	r3, #3
 801a198:	e006      	b.n	801a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	691b      	ldr	r3, [r3, #16]
 801a19e:	f003 0310 	and.w	r3, r3, #16
 801a1a2:	2b10      	cmp	r3, #16
 801a1a4:	d0f0      	beq.n	801a188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801a1a6:	2300      	movs	r3, #0
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3714      	adds	r7, #20
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b2:	4770      	bx	lr
 801a1b4:	00030d40 	.word	0x00030d40

0801a1b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801a1b8:	b480      	push	{r7}
 801a1ba:	b085      	sub	sp, #20
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
 801a1c0:	460b      	mov	r3, r1
 801a1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1ce:	681a      	ldr	r2, [r3, #0]
 801a1d0:	78fb      	ldrb	r3, [r7, #3]
 801a1d2:	68f9      	ldr	r1, [r7, #12]
 801a1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a1d8:	4313      	orrs	r3, r2
 801a1da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801a1dc:	2300      	movs	r3, #0
}
 801a1de:	4618      	mov	r0, r3
 801a1e0:	3714      	adds	r7, #20
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr

0801a1ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801a1ea:	b480      	push	{r7}
 801a1ec:	b087      	sub	sp, #28
 801a1ee:	af00      	add	r7, sp, #0
 801a1f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1fc:	689b      	ldr	r3, [r3, #8]
 801a1fe:	f003 0306 	and.w	r3, r3, #6
 801a202:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d102      	bne.n	801a210 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801a20a:	2300      	movs	r3, #0
 801a20c:	75fb      	strb	r3, [r7, #23]
 801a20e:	e00a      	b.n	801a226 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2b02      	cmp	r3, #2
 801a214:	d002      	beq.n	801a21c <USB_GetDevSpeed+0x32>
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2b06      	cmp	r3, #6
 801a21a:	d102      	bne.n	801a222 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801a21c:	2302      	movs	r3, #2
 801a21e:	75fb      	strb	r3, [r7, #23]
 801a220:	e001      	b.n	801a226 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801a222:	230f      	movs	r3, #15
 801a224:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801a226:	7dfb      	ldrb	r3, [r7, #23]
}
 801a228:	4618      	mov	r0, r3
 801a22a:	371c      	adds	r7, #28
 801a22c:	46bd      	mov	sp, r7
 801a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a232:	4770      	bx	lr

0801a234 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a234:	b480      	push	{r7}
 801a236:	b085      	sub	sp, #20
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	785b      	ldrb	r3, [r3, #1]
 801a24c:	2b01      	cmp	r3, #1
 801a24e:	d13a      	bne.n	801a2c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a256:	69da      	ldr	r2, [r3, #28]
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	f003 030f 	and.w	r3, r3, #15
 801a260:	2101      	movs	r1, #1
 801a262:	fa01 f303 	lsl.w	r3, r1, r3
 801a266:	b29b      	uxth	r3, r3
 801a268:	68f9      	ldr	r1, [r7, #12]
 801a26a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a26e:	4313      	orrs	r3, r2
 801a270:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	015a      	lsls	r2, r3, #5
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	4413      	add	r3, r2
 801a27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a284:	2b00      	cmp	r3, #0
 801a286:	d155      	bne.n	801a334 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	015a      	lsls	r2, r3, #5
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	4413      	add	r3, r2
 801a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a294:	681a      	ldr	r2, [r3, #0]
 801a296:	683b      	ldr	r3, [r7, #0]
 801a298:	68db      	ldr	r3, [r3, #12]
 801a29a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	791b      	ldrb	r3, [r3, #4]
 801a2a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801a2a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	059b      	lsls	r3, r3, #22
 801a2aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801a2ac:	4313      	orrs	r3, r2
 801a2ae:	68ba      	ldr	r2, [r7, #8]
 801a2b0:	0151      	lsls	r1, r2, #5
 801a2b2:	68fa      	ldr	r2, [r7, #12]
 801a2b4:	440a      	add	r2, r1
 801a2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a2ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a2c2:	6013      	str	r3, [r2, #0]
 801a2c4:	e036      	b.n	801a334 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2cc:	69da      	ldr	r2, [r3, #28]
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	f003 030f 	and.w	r3, r3, #15
 801a2d6:	2101      	movs	r1, #1
 801a2d8:	fa01 f303 	lsl.w	r3, r1, r3
 801a2dc:	041b      	lsls	r3, r3, #16
 801a2de:	68f9      	ldr	r1, [r7, #12]
 801a2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a2e4:	4313      	orrs	r3, r2
 801a2e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	015a      	lsls	r2, r3, #5
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	4413      	add	r3, r2
 801a2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d11a      	bne.n	801a334 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	015a      	lsls	r2, r3, #5
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	4413      	add	r3, r2
 801a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a30a:	681a      	ldr	r2, [r3, #0]
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	68db      	ldr	r3, [r3, #12]
 801a310:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801a314:	683b      	ldr	r3, [r7, #0]
 801a316:	791b      	ldrb	r3, [r3, #4]
 801a318:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801a31a:	430b      	orrs	r3, r1
 801a31c:	4313      	orrs	r3, r2
 801a31e:	68ba      	ldr	r2, [r7, #8]
 801a320:	0151      	lsls	r1, r2, #5
 801a322:	68fa      	ldr	r2, [r7, #12]
 801a324:	440a      	add	r2, r1
 801a326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a332:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801a334:	2300      	movs	r3, #0
}
 801a336:	4618      	mov	r0, r3
 801a338:	3714      	adds	r7, #20
 801a33a:	46bd      	mov	sp, r7
 801a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a340:	4770      	bx	lr
	...

0801a344 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a344:	b480      	push	{r7}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a352:	683b      	ldr	r3, [r7, #0]
 801a354:	781b      	ldrb	r3, [r3, #0]
 801a356:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	785b      	ldrb	r3, [r3, #1]
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	d161      	bne.n	801a424 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801a360:	68bb      	ldr	r3, [r7, #8]
 801a362:	015a      	lsls	r2, r3, #5
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	4413      	add	r3, r2
 801a368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a376:	d11f      	bne.n	801a3b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	015a      	lsls	r2, r3, #5
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	4413      	add	r3, r2
 801a380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	68ba      	ldr	r2, [r7, #8]
 801a388:	0151      	lsls	r1, r2, #5
 801a38a:	68fa      	ldr	r2, [r7, #12]
 801a38c:	440a      	add	r2, r1
 801a38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a396:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801a398:	68bb      	ldr	r3, [r7, #8]
 801a39a:	015a      	lsls	r2, r3, #5
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	4413      	add	r3, r2
 801a3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	68ba      	ldr	r2, [r7, #8]
 801a3a8:	0151      	lsls	r1, r2, #5
 801a3aa:	68fa      	ldr	r2, [r7, #12]
 801a3ac:	440a      	add	r2, r1
 801a3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a3b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	781b      	ldrb	r3, [r3, #0]
 801a3c4:	f003 030f 	and.w	r3, r3, #15
 801a3c8:	2101      	movs	r1, #1
 801a3ca:	fa01 f303 	lsl.w	r3, r1, r3
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	43db      	mvns	r3, r3
 801a3d2:	68f9      	ldr	r1, [r7, #12]
 801a3d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a3d8:	4013      	ands	r3, r2
 801a3da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3e2:	69da      	ldr	r2, [r3, #28]
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	f003 030f 	and.w	r3, r3, #15
 801a3ec:	2101      	movs	r1, #1
 801a3ee:	fa01 f303 	lsl.w	r3, r1, r3
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	43db      	mvns	r3, r3
 801a3f6:	68f9      	ldr	r1, [r7, #12]
 801a3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a3fc:	4013      	ands	r3, r2
 801a3fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	015a      	lsls	r2, r3, #5
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	4413      	add	r3, r2
 801a408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	0159      	lsls	r1, r3, #5
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	440b      	add	r3, r1
 801a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a41a:	4619      	mov	r1, r3
 801a41c:	4b35      	ldr	r3, [pc, #212]	; (801a4f4 <USB_DeactivateEndpoint+0x1b0>)
 801a41e:	4013      	ands	r3, r2
 801a420:	600b      	str	r3, [r1, #0]
 801a422:	e060      	b.n	801a4e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	015a      	lsls	r2, r3, #5
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	4413      	add	r3, r2
 801a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a43a:	d11f      	bne.n	801a47c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	015a      	lsls	r2, r3, #5
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	4413      	add	r3, r2
 801a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	68ba      	ldr	r2, [r7, #8]
 801a44c:	0151      	lsls	r1, r2, #5
 801a44e:	68fa      	ldr	r2, [r7, #12]
 801a450:	440a      	add	r2, r1
 801a452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a456:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a45a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	015a      	lsls	r2, r3, #5
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	4413      	add	r3, r2
 801a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	68ba      	ldr	r2, [r7, #8]
 801a46c:	0151      	lsls	r1, r2, #5
 801a46e:	68fa      	ldr	r2, [r7, #12]
 801a470:	440a      	add	r2, r1
 801a472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a47a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	f003 030f 	and.w	r3, r3, #15
 801a48c:	2101      	movs	r1, #1
 801a48e:	fa01 f303 	lsl.w	r3, r1, r3
 801a492:	041b      	lsls	r3, r3, #16
 801a494:	43db      	mvns	r3, r3
 801a496:	68f9      	ldr	r1, [r7, #12]
 801a498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a49c:	4013      	ands	r3, r2
 801a49e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4a6:	69da      	ldr	r2, [r3, #28]
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	f003 030f 	and.w	r3, r3, #15
 801a4b0:	2101      	movs	r1, #1
 801a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 801a4b6:	041b      	lsls	r3, r3, #16
 801a4b8:	43db      	mvns	r3, r3
 801a4ba:	68f9      	ldr	r1, [r7, #12]
 801a4bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a4c0:	4013      	ands	r3, r2
 801a4c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801a4c4:	68bb      	ldr	r3, [r7, #8]
 801a4c6:	015a      	lsls	r2, r3, #5
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	4413      	add	r3, r2
 801a4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4d0:	681a      	ldr	r2, [r3, #0]
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	0159      	lsls	r1, r3, #5
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	440b      	add	r3, r1
 801a4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4de:	4619      	mov	r1, r3
 801a4e0:	4b05      	ldr	r3, [pc, #20]	; (801a4f8 <USB_DeactivateEndpoint+0x1b4>)
 801a4e2:	4013      	ands	r3, r2
 801a4e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801a4e6:	2300      	movs	r3, #0
}
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	3714      	adds	r7, #20
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f2:	4770      	bx	lr
 801a4f4:	ec337800 	.word	0xec337800
 801a4f8:	eff37800 	.word	0xeff37800

0801a4fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b08a      	sub	sp, #40	; 0x28
 801a500:	af02      	add	r7, sp, #8
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	4613      	mov	r3, r2
 801a508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801a50e:	68bb      	ldr	r3, [r7, #8]
 801a510:	781b      	ldrb	r3, [r3, #0]
 801a512:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	785b      	ldrb	r3, [r3, #1]
 801a518:	2b01      	cmp	r3, #1
 801a51a:	f040 815c 	bne.w	801a7d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801a51e:	68bb      	ldr	r3, [r7, #8]
 801a520:	699b      	ldr	r3, [r3, #24]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d132      	bne.n	801a58c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a526:	69bb      	ldr	r3, [r7, #24]
 801a528:	015a      	lsls	r2, r3, #5
 801a52a:	69fb      	ldr	r3, [r7, #28]
 801a52c:	4413      	add	r3, r2
 801a52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a532:	691b      	ldr	r3, [r3, #16]
 801a534:	69ba      	ldr	r2, [r7, #24]
 801a536:	0151      	lsls	r1, r2, #5
 801a538:	69fa      	ldr	r2, [r7, #28]
 801a53a:	440a      	add	r2, r1
 801a53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a540:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a544:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a548:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801a54a:	69bb      	ldr	r3, [r7, #24]
 801a54c:	015a      	lsls	r2, r3, #5
 801a54e:	69fb      	ldr	r3, [r7, #28]
 801a550:	4413      	add	r3, r2
 801a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a556:	691b      	ldr	r3, [r3, #16]
 801a558:	69ba      	ldr	r2, [r7, #24]
 801a55a:	0151      	lsls	r1, r2, #5
 801a55c:	69fa      	ldr	r2, [r7, #28]
 801a55e:	440a      	add	r2, r1
 801a560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a56a:	69bb      	ldr	r3, [r7, #24]
 801a56c:	015a      	lsls	r2, r3, #5
 801a56e:	69fb      	ldr	r3, [r7, #28]
 801a570:	4413      	add	r3, r2
 801a572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a576:	691b      	ldr	r3, [r3, #16]
 801a578:	69ba      	ldr	r2, [r7, #24]
 801a57a:	0151      	lsls	r1, r2, #5
 801a57c:	69fa      	ldr	r2, [r7, #28]
 801a57e:	440a      	add	r2, r1
 801a580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a584:	0cdb      	lsrs	r3, r3, #19
 801a586:	04db      	lsls	r3, r3, #19
 801a588:	6113      	str	r3, [r2, #16]
 801a58a:	e074      	b.n	801a676 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a58c:	69bb      	ldr	r3, [r7, #24]
 801a58e:	015a      	lsls	r2, r3, #5
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	4413      	add	r3, r2
 801a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a598:	691b      	ldr	r3, [r3, #16]
 801a59a:	69ba      	ldr	r2, [r7, #24]
 801a59c:	0151      	lsls	r1, r2, #5
 801a59e:	69fa      	ldr	r2, [r7, #28]
 801a5a0:	440a      	add	r2, r1
 801a5a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a5a6:	0cdb      	lsrs	r3, r3, #19
 801a5a8:	04db      	lsls	r3, r3, #19
 801a5aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a5ac:	69bb      	ldr	r3, [r7, #24]
 801a5ae:	015a      	lsls	r2, r3, #5
 801a5b0:	69fb      	ldr	r3, [r7, #28]
 801a5b2:	4413      	add	r3, r2
 801a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5b8:	691b      	ldr	r3, [r3, #16]
 801a5ba:	69ba      	ldr	r2, [r7, #24]
 801a5bc:	0151      	lsls	r1, r2, #5
 801a5be:	69fa      	ldr	r2, [r7, #28]
 801a5c0:	440a      	add	r2, r1
 801a5c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a5c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a5ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a5ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801a5d0:	69bb      	ldr	r3, [r7, #24]
 801a5d2:	015a      	lsls	r2, r3, #5
 801a5d4:	69fb      	ldr	r3, [r7, #28]
 801a5d6:	4413      	add	r3, r2
 801a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	6999      	ldr	r1, [r3, #24]
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	68db      	ldr	r3, [r3, #12]
 801a5e6:	440b      	add	r3, r1
 801a5e8:	1e59      	subs	r1, r3, #1
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	68db      	ldr	r3, [r3, #12]
 801a5ee:	fbb1 f3f3 	udiv	r3, r1, r3
 801a5f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801a5f4:	4b9d      	ldr	r3, [pc, #628]	; (801a86c <USB_EPStartXfer+0x370>)
 801a5f6:	400b      	ands	r3, r1
 801a5f8:	69b9      	ldr	r1, [r7, #24]
 801a5fa:	0148      	lsls	r0, r1, #5
 801a5fc:	69f9      	ldr	r1, [r7, #28]
 801a5fe:	4401      	add	r1, r0
 801a600:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801a604:	4313      	orrs	r3, r2
 801a606:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801a608:	69bb      	ldr	r3, [r7, #24]
 801a60a:	015a      	lsls	r2, r3, #5
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	4413      	add	r3, r2
 801a610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a614:	691a      	ldr	r2, [r3, #16]
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	699b      	ldr	r3, [r3, #24]
 801a61a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a61e:	69b9      	ldr	r1, [r7, #24]
 801a620:	0148      	lsls	r0, r1, #5
 801a622:	69f9      	ldr	r1, [r7, #28]
 801a624:	4401      	add	r1, r0
 801a626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801a62a:	4313      	orrs	r3, r2
 801a62c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	791b      	ldrb	r3, [r3, #4]
 801a632:	2b01      	cmp	r3, #1
 801a634:	d11f      	bne.n	801a676 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801a636:	69bb      	ldr	r3, [r7, #24]
 801a638:	015a      	lsls	r2, r3, #5
 801a63a:	69fb      	ldr	r3, [r7, #28]
 801a63c:	4413      	add	r3, r2
 801a63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a642:	691b      	ldr	r3, [r3, #16]
 801a644:	69ba      	ldr	r2, [r7, #24]
 801a646:	0151      	lsls	r1, r2, #5
 801a648:	69fa      	ldr	r2, [r7, #28]
 801a64a:	440a      	add	r2, r1
 801a64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a650:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801a654:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801a656:	69bb      	ldr	r3, [r7, #24]
 801a658:	015a      	lsls	r2, r3, #5
 801a65a:	69fb      	ldr	r3, [r7, #28]
 801a65c:	4413      	add	r3, r2
 801a65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a662:	691b      	ldr	r3, [r3, #16]
 801a664:	69ba      	ldr	r2, [r7, #24]
 801a666:	0151      	lsls	r1, r2, #5
 801a668:	69fa      	ldr	r2, [r7, #28]
 801a66a:	440a      	add	r2, r1
 801a66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a674:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801a676:	79fb      	ldrb	r3, [r7, #7]
 801a678:	2b01      	cmp	r3, #1
 801a67a:	d14b      	bne.n	801a714 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801a67c:	68bb      	ldr	r3, [r7, #8]
 801a67e:	695b      	ldr	r3, [r3, #20]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d009      	beq.n	801a698 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801a684:	69bb      	ldr	r3, [r7, #24]
 801a686:	015a      	lsls	r2, r3, #5
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	4413      	add	r3, r2
 801a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a690:	461a      	mov	r2, r3
 801a692:	68bb      	ldr	r3, [r7, #8]
 801a694:	695b      	ldr	r3, [r3, #20]
 801a696:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801a698:	68bb      	ldr	r3, [r7, #8]
 801a69a:	791b      	ldrb	r3, [r3, #4]
 801a69c:	2b01      	cmp	r3, #1
 801a69e:	d128      	bne.n	801a6f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a6a0:	69fb      	ldr	r3, [r7, #28]
 801a6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6a6:	689b      	ldr	r3, [r3, #8]
 801a6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d110      	bne.n	801a6d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	015a      	lsls	r2, r3, #5
 801a6b4:	69fb      	ldr	r3, [r7, #28]
 801a6b6:	4413      	add	r3, r2
 801a6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	69ba      	ldr	r2, [r7, #24]
 801a6c0:	0151      	lsls	r1, r2, #5
 801a6c2:	69fa      	ldr	r2, [r7, #28]
 801a6c4:	440a      	add	r2, r1
 801a6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a6ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a6ce:	6013      	str	r3, [r2, #0]
 801a6d0:	e00f      	b.n	801a6f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801a6d2:	69bb      	ldr	r3, [r7, #24]
 801a6d4:	015a      	lsls	r2, r3, #5
 801a6d6:	69fb      	ldr	r3, [r7, #28]
 801a6d8:	4413      	add	r3, r2
 801a6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	69ba      	ldr	r2, [r7, #24]
 801a6e2:	0151      	lsls	r1, r2, #5
 801a6e4:	69fa      	ldr	r2, [r7, #28]
 801a6e6:	440a      	add	r2, r1
 801a6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a6ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a6f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a6f2:	69bb      	ldr	r3, [r7, #24]
 801a6f4:	015a      	lsls	r2, r3, #5
 801a6f6:	69fb      	ldr	r3, [r7, #28]
 801a6f8:	4413      	add	r3, r2
 801a6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	69ba      	ldr	r2, [r7, #24]
 801a702:	0151      	lsls	r1, r2, #5
 801a704:	69fa      	ldr	r2, [r7, #28]
 801a706:	440a      	add	r2, r1
 801a708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a70c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a710:	6013      	str	r3, [r2, #0]
 801a712:	e133      	b.n	801a97c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801a714:	69bb      	ldr	r3, [r7, #24]
 801a716:	015a      	lsls	r2, r3, #5
 801a718:	69fb      	ldr	r3, [r7, #28]
 801a71a:	4413      	add	r3, r2
 801a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	69ba      	ldr	r2, [r7, #24]
 801a724:	0151      	lsls	r1, r2, #5
 801a726:	69fa      	ldr	r2, [r7, #28]
 801a728:	440a      	add	r2, r1
 801a72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a72e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a732:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	791b      	ldrb	r3, [r3, #4]
 801a738:	2b01      	cmp	r3, #1
 801a73a:	d015      	beq.n	801a768 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	699b      	ldr	r3, [r3, #24]
 801a740:	2b00      	cmp	r3, #0
 801a742:	f000 811b 	beq.w	801a97c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801a746:	69fb      	ldr	r3, [r7, #28]
 801a748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	781b      	ldrb	r3, [r3, #0]
 801a752:	f003 030f 	and.w	r3, r3, #15
 801a756:	2101      	movs	r1, #1
 801a758:	fa01 f303 	lsl.w	r3, r1, r3
 801a75c:	69f9      	ldr	r1, [r7, #28]
 801a75e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a762:	4313      	orrs	r3, r2
 801a764:	634b      	str	r3, [r1, #52]	; 0x34
 801a766:	e109      	b.n	801a97c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a768:	69fb      	ldr	r3, [r7, #28]
 801a76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a76e:	689b      	ldr	r3, [r3, #8]
 801a770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a774:	2b00      	cmp	r3, #0
 801a776:	d110      	bne.n	801a79a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801a778:	69bb      	ldr	r3, [r7, #24]
 801a77a:	015a      	lsls	r2, r3, #5
 801a77c:	69fb      	ldr	r3, [r7, #28]
 801a77e:	4413      	add	r3, r2
 801a780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	69ba      	ldr	r2, [r7, #24]
 801a788:	0151      	lsls	r1, r2, #5
 801a78a:	69fa      	ldr	r2, [r7, #28]
 801a78c:	440a      	add	r2, r1
 801a78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a796:	6013      	str	r3, [r2, #0]
 801a798:	e00f      	b.n	801a7ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	015a      	lsls	r2, r3, #5
 801a79e:	69fb      	ldr	r3, [r7, #28]
 801a7a0:	4413      	add	r3, r2
 801a7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	69ba      	ldr	r2, [r7, #24]
 801a7aa:	0151      	lsls	r1, r2, #5
 801a7ac:	69fa      	ldr	r2, [r7, #28]
 801a7ae:	440a      	add	r2, r1
 801a7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a7b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801a7ba:	68bb      	ldr	r3, [r7, #8]
 801a7bc:	6919      	ldr	r1, [r3, #16]
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	781a      	ldrb	r2, [r3, #0]
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	699b      	ldr	r3, [r3, #24]
 801a7c6:	b298      	uxth	r0, r3
 801a7c8:	79fb      	ldrb	r3, [r7, #7]
 801a7ca:	9300      	str	r3, [sp, #0]
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	68f8      	ldr	r0, [r7, #12]
 801a7d0:	f000 fade 	bl	801ad90 <USB_WritePacket>
 801a7d4:	e0d2      	b.n	801a97c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801a7d6:	69bb      	ldr	r3, [r7, #24]
 801a7d8:	015a      	lsls	r2, r3, #5
 801a7da:	69fb      	ldr	r3, [r7, #28]
 801a7dc:	4413      	add	r3, r2
 801a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7e2:	691b      	ldr	r3, [r3, #16]
 801a7e4:	69ba      	ldr	r2, [r7, #24]
 801a7e6:	0151      	lsls	r1, r2, #5
 801a7e8:	69fa      	ldr	r2, [r7, #28]
 801a7ea:	440a      	add	r2, r1
 801a7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a7f0:	0cdb      	lsrs	r3, r3, #19
 801a7f2:	04db      	lsls	r3, r3, #19
 801a7f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801a7f6:	69bb      	ldr	r3, [r7, #24]
 801a7f8:	015a      	lsls	r2, r3, #5
 801a7fa:	69fb      	ldr	r3, [r7, #28]
 801a7fc:	4413      	add	r3, r2
 801a7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a802:	691b      	ldr	r3, [r3, #16]
 801a804:	69ba      	ldr	r2, [r7, #24]
 801a806:	0151      	lsls	r1, r2, #5
 801a808:	69fa      	ldr	r2, [r7, #28]
 801a80a:	440a      	add	r2, r1
 801a80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a818:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	699b      	ldr	r3, [r3, #24]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d126      	bne.n	801a870 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801a822:	69bb      	ldr	r3, [r7, #24]
 801a824:	015a      	lsls	r2, r3, #5
 801a826:	69fb      	ldr	r3, [r7, #28]
 801a828:	4413      	add	r3, r2
 801a82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a82e:	691a      	ldr	r2, [r3, #16]
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	68db      	ldr	r3, [r3, #12]
 801a834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a838:	69b9      	ldr	r1, [r7, #24]
 801a83a:	0148      	lsls	r0, r1, #5
 801a83c:	69f9      	ldr	r1, [r7, #28]
 801a83e:	4401      	add	r1, r0
 801a840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a844:	4313      	orrs	r3, r2
 801a846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a848:	69bb      	ldr	r3, [r7, #24]
 801a84a:	015a      	lsls	r2, r3, #5
 801a84c:	69fb      	ldr	r3, [r7, #28]
 801a84e:	4413      	add	r3, r2
 801a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a854:	691b      	ldr	r3, [r3, #16]
 801a856:	69ba      	ldr	r2, [r7, #24]
 801a858:	0151      	lsls	r1, r2, #5
 801a85a:	69fa      	ldr	r2, [r7, #28]
 801a85c:	440a      	add	r2, r1
 801a85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a866:	6113      	str	r3, [r2, #16]
 801a868:	e03a      	b.n	801a8e0 <USB_EPStartXfer+0x3e4>
 801a86a:	bf00      	nop
 801a86c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	699a      	ldr	r2, [r3, #24]
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	68db      	ldr	r3, [r3, #12]
 801a878:	4413      	add	r3, r2
 801a87a:	1e5a      	subs	r2, r3, #1
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	fbb2 f3f3 	udiv	r3, r2, r3
 801a884:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	8afa      	ldrh	r2, [r7, #22]
 801a88c:	fb03 f202 	mul.w	r2, r3, r2
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801a894:	69bb      	ldr	r3, [r7, #24]
 801a896:	015a      	lsls	r2, r3, #5
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	4413      	add	r3, r2
 801a89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a8a0:	691a      	ldr	r2, [r3, #16]
 801a8a2:	8afb      	ldrh	r3, [r7, #22]
 801a8a4:	04d9      	lsls	r1, r3, #19
 801a8a6:	4b38      	ldr	r3, [pc, #224]	; (801a988 <USB_EPStartXfer+0x48c>)
 801a8a8:	400b      	ands	r3, r1
 801a8aa:	69b9      	ldr	r1, [r7, #24]
 801a8ac:	0148      	lsls	r0, r1, #5
 801a8ae:	69f9      	ldr	r1, [r7, #28]
 801a8b0:	4401      	add	r1, r0
 801a8b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a8b6:	4313      	orrs	r3, r2
 801a8b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801a8ba:	69bb      	ldr	r3, [r7, #24]
 801a8bc:	015a      	lsls	r2, r3, #5
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	4413      	add	r3, r2
 801a8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a8c6:	691a      	ldr	r2, [r3, #16]
 801a8c8:	68bb      	ldr	r3, [r7, #8]
 801a8ca:	69db      	ldr	r3, [r3, #28]
 801a8cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a8d0:	69b9      	ldr	r1, [r7, #24]
 801a8d2:	0148      	lsls	r0, r1, #5
 801a8d4:	69f9      	ldr	r1, [r7, #28]
 801a8d6:	4401      	add	r1, r0
 801a8d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801a8dc:	4313      	orrs	r3, r2
 801a8de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801a8e0:	79fb      	ldrb	r3, [r7, #7]
 801a8e2:	2b01      	cmp	r3, #1
 801a8e4:	d10d      	bne.n	801a902 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	691b      	ldr	r3, [r3, #16]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d009      	beq.n	801a902 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	6919      	ldr	r1, [r3, #16]
 801a8f2:	69bb      	ldr	r3, [r7, #24]
 801a8f4:	015a      	lsls	r2, r3, #5
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	4413      	add	r3, r2
 801a8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a8fe:	460a      	mov	r2, r1
 801a900:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	791b      	ldrb	r3, [r3, #4]
 801a906:	2b01      	cmp	r3, #1
 801a908:	d128      	bne.n	801a95c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a910:	689b      	ldr	r3, [r3, #8]
 801a912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a916:	2b00      	cmp	r3, #0
 801a918:	d110      	bne.n	801a93c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801a91a:	69bb      	ldr	r3, [r7, #24]
 801a91c:	015a      	lsls	r2, r3, #5
 801a91e:	69fb      	ldr	r3, [r7, #28]
 801a920:	4413      	add	r3, r2
 801a922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	69ba      	ldr	r2, [r7, #24]
 801a92a:	0151      	lsls	r1, r2, #5
 801a92c:	69fa      	ldr	r2, [r7, #28]
 801a92e:	440a      	add	r2, r1
 801a930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a938:	6013      	str	r3, [r2, #0]
 801a93a:	e00f      	b.n	801a95c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801a93c:	69bb      	ldr	r3, [r7, #24]
 801a93e:	015a      	lsls	r2, r3, #5
 801a940:	69fb      	ldr	r3, [r7, #28]
 801a942:	4413      	add	r3, r2
 801a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	69ba      	ldr	r2, [r7, #24]
 801a94c:	0151      	lsls	r1, r2, #5
 801a94e:	69fa      	ldr	r2, [r7, #28]
 801a950:	440a      	add	r2, r1
 801a952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a95a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801a95c:	69bb      	ldr	r3, [r7, #24]
 801a95e:	015a      	lsls	r2, r3, #5
 801a960:	69fb      	ldr	r3, [r7, #28]
 801a962:	4413      	add	r3, r2
 801a964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	69ba      	ldr	r2, [r7, #24]
 801a96c:	0151      	lsls	r1, r2, #5
 801a96e:	69fa      	ldr	r2, [r7, #28]
 801a970:	440a      	add	r2, r1
 801a972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801a97a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	4618      	mov	r0, r3
 801a980:	3720      	adds	r7, #32
 801a982:	46bd      	mov	sp, r7
 801a984:	bd80      	pop	{r7, pc}
 801a986:	bf00      	nop
 801a988:	1ff80000 	.word	0x1ff80000

0801a98c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801a98c:	b480      	push	{r7}
 801a98e:	b087      	sub	sp, #28
 801a990:	af00      	add	r7, sp, #0
 801a992:	60f8      	str	r0, [r7, #12]
 801a994:	60b9      	str	r1, [r7, #8]
 801a996:	4613      	mov	r3, r2
 801a998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	781b      	ldrb	r3, [r3, #0]
 801a9a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	785b      	ldrb	r3, [r3, #1]
 801a9a8:	2b01      	cmp	r3, #1
 801a9aa:	f040 80ce 	bne.w	801ab4a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	699b      	ldr	r3, [r3, #24]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d132      	bne.n	801aa1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801a9b6:	693b      	ldr	r3, [r7, #16]
 801a9b8:	015a      	lsls	r2, r3, #5
 801a9ba:	697b      	ldr	r3, [r7, #20]
 801a9bc:	4413      	add	r3, r2
 801a9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a9c2:	691b      	ldr	r3, [r3, #16]
 801a9c4:	693a      	ldr	r2, [r7, #16]
 801a9c6:	0151      	lsls	r1, r2, #5
 801a9c8:	697a      	ldr	r2, [r7, #20]
 801a9ca:	440a      	add	r2, r1
 801a9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a9d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801a9d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801a9d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801a9da:	693b      	ldr	r3, [r7, #16]
 801a9dc:	015a      	lsls	r2, r3, #5
 801a9de:	697b      	ldr	r3, [r7, #20]
 801a9e0:	4413      	add	r3, r2
 801a9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a9e6:	691b      	ldr	r3, [r3, #16]
 801a9e8:	693a      	ldr	r2, [r7, #16]
 801a9ea:	0151      	lsls	r1, r2, #5
 801a9ec:	697a      	ldr	r2, [r7, #20]
 801a9ee:	440a      	add	r2, r1
 801a9f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a9f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a9f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801a9fa:	693b      	ldr	r3, [r7, #16]
 801a9fc:	015a      	lsls	r2, r3, #5
 801a9fe:	697b      	ldr	r3, [r7, #20]
 801aa00:	4413      	add	r3, r2
 801aa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa06:	691b      	ldr	r3, [r3, #16]
 801aa08:	693a      	ldr	r2, [r7, #16]
 801aa0a:	0151      	lsls	r1, r2, #5
 801aa0c:	697a      	ldr	r2, [r7, #20]
 801aa0e:	440a      	add	r2, r1
 801aa10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aa14:	0cdb      	lsrs	r3, r3, #19
 801aa16:	04db      	lsls	r3, r3, #19
 801aa18:	6113      	str	r3, [r2, #16]
 801aa1a:	e04e      	b.n	801aaba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801aa1c:	693b      	ldr	r3, [r7, #16]
 801aa1e:	015a      	lsls	r2, r3, #5
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	4413      	add	r3, r2
 801aa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa28:	691b      	ldr	r3, [r3, #16]
 801aa2a:	693a      	ldr	r2, [r7, #16]
 801aa2c:	0151      	lsls	r1, r2, #5
 801aa2e:	697a      	ldr	r2, [r7, #20]
 801aa30:	440a      	add	r2, r1
 801aa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aa36:	0cdb      	lsrs	r3, r3, #19
 801aa38:	04db      	lsls	r3, r3, #19
 801aa3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801aa3c:	693b      	ldr	r3, [r7, #16]
 801aa3e:	015a      	lsls	r2, r3, #5
 801aa40:	697b      	ldr	r3, [r7, #20]
 801aa42:	4413      	add	r3, r2
 801aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa48:	691b      	ldr	r3, [r3, #16]
 801aa4a:	693a      	ldr	r2, [r7, #16]
 801aa4c:	0151      	lsls	r1, r2, #5
 801aa4e:	697a      	ldr	r2, [r7, #20]
 801aa50:	440a      	add	r2, r1
 801aa52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aa56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801aa5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801aa5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	699a      	ldr	r2, [r3, #24]
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	68db      	ldr	r3, [r3, #12]
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d903      	bls.n	801aa74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801aa6c:	68bb      	ldr	r3, [r7, #8]
 801aa6e:	68da      	ldr	r2, [r3, #12]
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	015a      	lsls	r2, r3, #5
 801aa78:	697b      	ldr	r3, [r7, #20]
 801aa7a:	4413      	add	r3, r2
 801aa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa80:	691b      	ldr	r3, [r3, #16]
 801aa82:	693a      	ldr	r2, [r7, #16]
 801aa84:	0151      	lsls	r1, r2, #5
 801aa86:	697a      	ldr	r2, [r7, #20]
 801aa88:	440a      	add	r2, r1
 801aa8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aa8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801aa92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801aa94:	693b      	ldr	r3, [r7, #16]
 801aa96:	015a      	lsls	r2, r3, #5
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	4413      	add	r3, r2
 801aa9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aaa0:	691a      	ldr	r2, [r3, #16]
 801aaa2:	68bb      	ldr	r3, [r7, #8]
 801aaa4:	699b      	ldr	r3, [r3, #24]
 801aaa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aaaa:	6939      	ldr	r1, [r7, #16]
 801aaac:	0148      	lsls	r0, r1, #5
 801aaae:	6979      	ldr	r1, [r7, #20]
 801aab0:	4401      	add	r1, r0
 801aab2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801aab6:	4313      	orrs	r3, r2
 801aab8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801aaba:	79fb      	ldrb	r3, [r7, #7]
 801aabc:	2b01      	cmp	r3, #1
 801aabe:	d11e      	bne.n	801aafe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	695b      	ldr	r3, [r3, #20]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d009      	beq.n	801aadc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801aac8:	693b      	ldr	r3, [r7, #16]
 801aaca:	015a      	lsls	r2, r3, #5
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	4413      	add	r3, r2
 801aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aad4:	461a      	mov	r2, r3
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	695b      	ldr	r3, [r3, #20]
 801aada:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801aadc:	693b      	ldr	r3, [r7, #16]
 801aade:	015a      	lsls	r2, r3, #5
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	4413      	add	r3, r2
 801aae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	693a      	ldr	r2, [r7, #16]
 801aaec:	0151      	lsls	r1, r2, #5
 801aaee:	697a      	ldr	r2, [r7, #20]
 801aaf0:	440a      	add	r2, r1
 801aaf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aaf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801aafa:	6013      	str	r3, [r2, #0]
 801aafc:	e097      	b.n	801ac2e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801aafe:	693b      	ldr	r3, [r7, #16]
 801ab00:	015a      	lsls	r2, r3, #5
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	4413      	add	r3, r2
 801ab06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	693a      	ldr	r2, [r7, #16]
 801ab0e:	0151      	lsls	r1, r2, #5
 801ab10:	697a      	ldr	r2, [r7, #20]
 801ab12:	440a      	add	r2, r1
 801ab14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ab18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ab1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ab1e:	68bb      	ldr	r3, [r7, #8]
 801ab20:	699b      	ldr	r3, [r3, #24]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	f000 8083 	beq.w	801ac2e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	f003 030f 	and.w	r3, r3, #15
 801ab38:	2101      	movs	r1, #1
 801ab3a:	fa01 f303 	lsl.w	r3, r1, r3
 801ab3e:	6979      	ldr	r1, [r7, #20]
 801ab40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ab44:	4313      	orrs	r3, r2
 801ab46:	634b      	str	r3, [r1, #52]	; 0x34
 801ab48:	e071      	b.n	801ac2e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	015a      	lsls	r2, r3, #5
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	4413      	add	r3, r2
 801ab52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab56:	691b      	ldr	r3, [r3, #16]
 801ab58:	693a      	ldr	r2, [r7, #16]
 801ab5a:	0151      	lsls	r1, r2, #5
 801ab5c:	697a      	ldr	r2, [r7, #20]
 801ab5e:	440a      	add	r2, r1
 801ab60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ab64:	0cdb      	lsrs	r3, r3, #19
 801ab66:	04db      	lsls	r3, r3, #19
 801ab68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	015a      	lsls	r2, r3, #5
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	4413      	add	r3, r2
 801ab72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab76:	691b      	ldr	r3, [r3, #16]
 801ab78:	693a      	ldr	r2, [r7, #16]
 801ab7a:	0151      	lsls	r1, r2, #5
 801ab7c:	697a      	ldr	r2, [r7, #20]
 801ab7e:	440a      	add	r2, r1
 801ab80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ab84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ab88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ab8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801ab8e:	68bb      	ldr	r3, [r7, #8]
 801ab90:	699b      	ldr	r3, [r3, #24]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d003      	beq.n	801ab9e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801ab96:	68bb      	ldr	r3, [r7, #8]
 801ab98:	68da      	ldr	r2, [r3, #12]
 801ab9a:	68bb      	ldr	r3, [r7, #8]
 801ab9c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801ab9e:	68bb      	ldr	r3, [r7, #8]
 801aba0:	68da      	ldr	r2, [r3, #12]
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801aba6:	693b      	ldr	r3, [r7, #16]
 801aba8:	015a      	lsls	r2, r3, #5
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	4413      	add	r3, r2
 801abae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abb2:	691b      	ldr	r3, [r3, #16]
 801abb4:	693a      	ldr	r2, [r7, #16]
 801abb6:	0151      	lsls	r1, r2, #5
 801abb8:	697a      	ldr	r2, [r7, #20]
 801abba:	440a      	add	r2, r1
 801abbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801abc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801abc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801abc6:	693b      	ldr	r3, [r7, #16]
 801abc8:	015a      	lsls	r2, r3, #5
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	4413      	add	r3, r2
 801abce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abd2:	691a      	ldr	r2, [r3, #16]
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	69db      	ldr	r3, [r3, #28]
 801abd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801abdc:	6939      	ldr	r1, [r7, #16]
 801abde:	0148      	lsls	r0, r1, #5
 801abe0:	6979      	ldr	r1, [r7, #20]
 801abe2:	4401      	add	r1, r0
 801abe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801abe8:	4313      	orrs	r3, r2
 801abea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801abec:	79fb      	ldrb	r3, [r7, #7]
 801abee:	2b01      	cmp	r3, #1
 801abf0:	d10d      	bne.n	801ac0e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	691b      	ldr	r3, [r3, #16]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d009      	beq.n	801ac0e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	6919      	ldr	r1, [r3, #16]
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	015a      	lsls	r2, r3, #5
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	4413      	add	r3, r2
 801ac06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac0a:	460a      	mov	r2, r1
 801ac0c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ac0e:	693b      	ldr	r3, [r7, #16]
 801ac10:	015a      	lsls	r2, r3, #5
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	4413      	add	r3, r2
 801ac16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	693a      	ldr	r2, [r7, #16]
 801ac1e:	0151      	lsls	r1, r2, #5
 801ac20:	697a      	ldr	r2, [r7, #20]
 801ac22:	440a      	add	r2, r1
 801ac24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ac28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ac2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ac2e:	2300      	movs	r3, #0
}
 801ac30:	4618      	mov	r0, r3
 801ac32:	371c      	adds	r7, #28
 801ac34:	46bd      	mov	sp, r7
 801ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3a:	4770      	bx	lr

0801ac3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ac3c:	b480      	push	{r7}
 801ac3e:	b087      	sub	sp, #28
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801ac46:	2300      	movs	r3, #0
 801ac48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ac52:	683b      	ldr	r3, [r7, #0]
 801ac54:	785b      	ldrb	r3, [r3, #1]
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d14a      	bne.n	801acf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ac5a:	683b      	ldr	r3, [r7, #0]
 801ac5c:	781b      	ldrb	r3, [r3, #0]
 801ac5e:	015a      	lsls	r2, r3, #5
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	4413      	add	r3, r2
 801ac64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ac6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ac72:	f040 8086 	bne.w	801ad82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801ac76:	683b      	ldr	r3, [r7, #0]
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	015a      	lsls	r2, r3, #5
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	4413      	add	r3, r2
 801ac80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	683a      	ldr	r2, [r7, #0]
 801ac88:	7812      	ldrb	r2, [r2, #0]
 801ac8a:	0151      	lsls	r1, r2, #5
 801ac8c:	693a      	ldr	r2, [r7, #16]
 801ac8e:	440a      	add	r2, r1
 801ac90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ac94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ac98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	781b      	ldrb	r3, [r3, #0]
 801ac9e:	015a      	lsls	r2, r3, #5
 801aca0:	693b      	ldr	r3, [r7, #16]
 801aca2:	4413      	add	r3, r2
 801aca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	683a      	ldr	r2, [r7, #0]
 801acac:	7812      	ldrb	r2, [r2, #0]
 801acae:	0151      	lsls	r1, r2, #5
 801acb0:	693a      	ldr	r2, [r7, #16]
 801acb2:	440a      	add	r2, r1
 801acb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801acb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801acbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	3301      	adds	r3, #1
 801acc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f242 7210 	movw	r2, #10000	; 0x2710
 801acca:	4293      	cmp	r3, r2
 801accc:	d902      	bls.n	801acd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801acce:	2301      	movs	r3, #1
 801acd0:	75fb      	strb	r3, [r7, #23]
          break;
 801acd2:	e056      	b.n	801ad82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	015a      	lsls	r2, r3, #5
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	4413      	add	r3, r2
 801acde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ace8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801acec:	d0e7      	beq.n	801acbe <USB_EPStopXfer+0x82>
 801acee:	e048      	b.n	801ad82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	781b      	ldrb	r3, [r3, #0]
 801acf4:	015a      	lsls	r2, r3, #5
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	4413      	add	r3, r2
 801acfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ad04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ad08:	d13b      	bne.n	801ad82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	781b      	ldrb	r3, [r3, #0]
 801ad0e:	015a      	lsls	r2, r3, #5
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	4413      	add	r3, r2
 801ad14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	683a      	ldr	r2, [r7, #0]
 801ad1c:	7812      	ldrb	r2, [r2, #0]
 801ad1e:	0151      	lsls	r1, r2, #5
 801ad20:	693a      	ldr	r2, [r7, #16]
 801ad22:	440a      	add	r2, r1
 801ad24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ad28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ad2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	015a      	lsls	r2, r3, #5
 801ad34:	693b      	ldr	r3, [r7, #16]
 801ad36:	4413      	add	r3, r2
 801ad38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	683a      	ldr	r2, [r7, #0]
 801ad40:	7812      	ldrb	r2, [r2, #0]
 801ad42:	0151      	lsls	r1, r2, #5
 801ad44:	693a      	ldr	r2, [r7, #16]
 801ad46:	440a      	add	r2, r1
 801ad48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ad4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ad50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	3301      	adds	r3, #1
 801ad56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	f242 7210 	movw	r2, #10000	; 0x2710
 801ad5e:	4293      	cmp	r3, r2
 801ad60:	d902      	bls.n	801ad68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801ad62:	2301      	movs	r3, #1
 801ad64:	75fb      	strb	r3, [r7, #23]
          break;
 801ad66:	e00c      	b.n	801ad82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	781b      	ldrb	r3, [r3, #0]
 801ad6c:	015a      	lsls	r2, r3, #5
 801ad6e:	693b      	ldr	r3, [r7, #16]
 801ad70:	4413      	add	r3, r2
 801ad72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ad7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ad80:	d0e7      	beq.n	801ad52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	371c      	adds	r7, #28
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8e:	4770      	bx	lr

0801ad90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ad90:	b480      	push	{r7}
 801ad92:	b089      	sub	sp, #36	; 0x24
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	60f8      	str	r0, [r7, #12]
 801ad98:	60b9      	str	r1, [r7, #8]
 801ad9a:	4611      	mov	r1, r2
 801ad9c:	461a      	mov	r2, r3
 801ad9e:	460b      	mov	r3, r1
 801ada0:	71fb      	strb	r3, [r7, #7]
 801ada2:	4613      	mov	r3, r2
 801ada4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801adae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d123      	bne.n	801adfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801adb6:	88bb      	ldrh	r3, [r7, #4]
 801adb8:	3303      	adds	r3, #3
 801adba:	089b      	lsrs	r3, r3, #2
 801adbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801adbe:	2300      	movs	r3, #0
 801adc0:	61bb      	str	r3, [r7, #24]
 801adc2:	e018      	b.n	801adf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801adc4:	79fb      	ldrb	r3, [r7, #7]
 801adc6:	031a      	lsls	r2, r3, #12
 801adc8:	697b      	ldr	r3, [r7, #20]
 801adca:	4413      	add	r3, r2
 801adcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801add0:	461a      	mov	r2, r3
 801add2:	69fb      	ldr	r3, [r7, #28]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	6013      	str	r3, [r2, #0]
      pSrc++;
 801add8:	69fb      	ldr	r3, [r7, #28]
 801adda:	3301      	adds	r3, #1
 801addc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	3301      	adds	r3, #1
 801ade2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ade4:	69fb      	ldr	r3, [r7, #28]
 801ade6:	3301      	adds	r3, #1
 801ade8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801adea:	69fb      	ldr	r3, [r7, #28]
 801adec:	3301      	adds	r3, #1
 801adee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801adf0:	69bb      	ldr	r3, [r7, #24]
 801adf2:	3301      	adds	r3, #1
 801adf4:	61bb      	str	r3, [r7, #24]
 801adf6:	69ba      	ldr	r2, [r7, #24]
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	429a      	cmp	r2, r3
 801adfc:	d3e2      	bcc.n	801adc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801adfe:	2300      	movs	r3, #0
}
 801ae00:	4618      	mov	r0, r3
 801ae02:	3724      	adds	r7, #36	; 0x24
 801ae04:	46bd      	mov	sp, r7
 801ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0a:	4770      	bx	lr

0801ae0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ae0c:	b480      	push	{r7}
 801ae0e:	b08b      	sub	sp, #44	; 0x2c
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	60f8      	str	r0, [r7, #12]
 801ae14:	60b9      	str	r1, [r7, #8]
 801ae16:	4613      	mov	r3, r2
 801ae18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ae22:	88fb      	ldrh	r3, [r7, #6]
 801ae24:	089b      	lsrs	r3, r3, #2
 801ae26:	b29b      	uxth	r3, r3
 801ae28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ae2a:	88fb      	ldrh	r3, [r7, #6]
 801ae2c:	f003 0303 	and.w	r3, r3, #3
 801ae30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ae32:	2300      	movs	r3, #0
 801ae34:	623b      	str	r3, [r7, #32]
 801ae36:	e014      	b.n	801ae62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ae38:	69bb      	ldr	r3, [r7, #24]
 801ae3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae3e:	681a      	ldr	r2, [r3, #0]
 801ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae42:	601a      	str	r2, [r3, #0]
    pDest++;
 801ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae46:	3301      	adds	r3, #1
 801ae48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae4c:	3301      	adds	r3, #1
 801ae4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae52:	3301      	adds	r3, #1
 801ae54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae58:	3301      	adds	r3, #1
 801ae5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ae5c:	6a3b      	ldr	r3, [r7, #32]
 801ae5e:	3301      	adds	r3, #1
 801ae60:	623b      	str	r3, [r7, #32]
 801ae62:	6a3a      	ldr	r2, [r7, #32]
 801ae64:	697b      	ldr	r3, [r7, #20]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	d3e6      	bcc.n	801ae38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ae6a:	8bfb      	ldrh	r3, [r7, #30]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d01e      	beq.n	801aeae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ae70:	2300      	movs	r3, #0
 801ae72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ae74:	69bb      	ldr	r3, [r7, #24]
 801ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae7a:	461a      	mov	r2, r3
 801ae7c:	f107 0310 	add.w	r3, r7, #16
 801ae80:	6812      	ldr	r2, [r2, #0]
 801ae82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ae84:	693a      	ldr	r2, [r7, #16]
 801ae86:	6a3b      	ldr	r3, [r7, #32]
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	00db      	lsls	r3, r3, #3
 801ae8c:	fa22 f303 	lsr.w	r3, r2, r3
 801ae90:	b2da      	uxtb	r2, r3
 801ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae94:	701a      	strb	r2, [r3, #0]
      i++;
 801ae96:	6a3b      	ldr	r3, [r7, #32]
 801ae98:	3301      	adds	r3, #1
 801ae9a:	623b      	str	r3, [r7, #32]
      pDest++;
 801ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae9e:	3301      	adds	r3, #1
 801aea0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801aea2:	8bfb      	ldrh	r3, [r7, #30]
 801aea4:	3b01      	subs	r3, #1
 801aea6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801aea8:	8bfb      	ldrh	r3, [r7, #30]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d1ea      	bne.n	801ae84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	372c      	adds	r7, #44	; 0x2c
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeba:	4770      	bx	lr

0801aebc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801aebc:	b480      	push	{r7}
 801aebe:	b085      	sub	sp, #20
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	781b      	ldrb	r3, [r3, #0]
 801aece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	785b      	ldrb	r3, [r3, #1]
 801aed4:	2b01      	cmp	r3, #1
 801aed6:	d12c      	bne.n	801af32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	015a      	lsls	r2, r3, #5
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	4413      	add	r3, r2
 801aee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	db12      	blt.n	801af10 <USB_EPSetStall+0x54>
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d00f      	beq.n	801af10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	015a      	lsls	r2, r3, #5
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	4413      	add	r3, r2
 801aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	68ba      	ldr	r2, [r7, #8]
 801af00:	0151      	lsls	r1, r2, #5
 801af02:	68fa      	ldr	r2, [r7, #12]
 801af04:	440a      	add	r2, r1
 801af06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801af0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801af0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	015a      	lsls	r2, r3, #5
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	4413      	add	r3, r2
 801af18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	68ba      	ldr	r2, [r7, #8]
 801af20:	0151      	lsls	r1, r2, #5
 801af22:	68fa      	ldr	r2, [r7, #12]
 801af24:	440a      	add	r2, r1
 801af26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801af2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801af2e:	6013      	str	r3, [r2, #0]
 801af30:	e02b      	b.n	801af8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	015a      	lsls	r2, r3, #5
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	4413      	add	r3, r2
 801af3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	db12      	blt.n	801af6a <USB_EPSetStall+0xae>
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d00f      	beq.n	801af6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801af4a:	68bb      	ldr	r3, [r7, #8]
 801af4c:	015a      	lsls	r2, r3, #5
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	4413      	add	r3, r2
 801af52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	68ba      	ldr	r2, [r7, #8]
 801af5a:	0151      	lsls	r1, r2, #5
 801af5c:	68fa      	ldr	r2, [r7, #12]
 801af5e:	440a      	add	r2, r1
 801af60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801af68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801af6a:	68bb      	ldr	r3, [r7, #8]
 801af6c:	015a      	lsls	r2, r3, #5
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	4413      	add	r3, r2
 801af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	68ba      	ldr	r2, [r7, #8]
 801af7a:	0151      	lsls	r1, r2, #5
 801af7c:	68fa      	ldr	r2, [r7, #12]
 801af7e:	440a      	add	r2, r1
 801af80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801af88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801af8a:	2300      	movs	r3, #0
}
 801af8c:	4618      	mov	r0, r3
 801af8e:	3714      	adds	r7, #20
 801af90:	46bd      	mov	sp, r7
 801af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af96:	4770      	bx	lr

0801af98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801af98:	b480      	push	{r7}
 801af9a:	b085      	sub	sp, #20
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	785b      	ldrb	r3, [r3, #1]
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	d128      	bne.n	801b006 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801afb4:	68bb      	ldr	r3, [r7, #8]
 801afb6:	015a      	lsls	r2, r3, #5
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	4413      	add	r3, r2
 801afbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	68ba      	ldr	r2, [r7, #8]
 801afc4:	0151      	lsls	r1, r2, #5
 801afc6:	68fa      	ldr	r2, [r7, #12]
 801afc8:	440a      	add	r2, r1
 801afca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801afce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801afd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801afd4:	683b      	ldr	r3, [r7, #0]
 801afd6:	791b      	ldrb	r3, [r3, #4]
 801afd8:	2b03      	cmp	r3, #3
 801afda:	d003      	beq.n	801afe4 <USB_EPClearStall+0x4c>
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	791b      	ldrb	r3, [r3, #4]
 801afe0:	2b02      	cmp	r3, #2
 801afe2:	d138      	bne.n	801b056 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	015a      	lsls	r2, r3, #5
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	4413      	add	r3, r2
 801afec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	68ba      	ldr	r2, [r7, #8]
 801aff4:	0151      	lsls	r1, r2, #5
 801aff6:	68fa      	ldr	r2, [r7, #12]
 801aff8:	440a      	add	r2, r1
 801affa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801affe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b002:	6013      	str	r3, [r2, #0]
 801b004:	e027      	b.n	801b056 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801b006:	68bb      	ldr	r3, [r7, #8]
 801b008:	015a      	lsls	r2, r3, #5
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	4413      	add	r3, r2
 801b00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	68ba      	ldr	r2, [r7, #8]
 801b016:	0151      	lsls	r1, r2, #5
 801b018:	68fa      	ldr	r2, [r7, #12]
 801b01a:	440a      	add	r2, r1
 801b01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b020:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801b024:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801b026:	683b      	ldr	r3, [r7, #0]
 801b028:	791b      	ldrb	r3, [r3, #4]
 801b02a:	2b03      	cmp	r3, #3
 801b02c:	d003      	beq.n	801b036 <USB_EPClearStall+0x9e>
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	791b      	ldrb	r3, [r3, #4]
 801b032:	2b02      	cmp	r3, #2
 801b034:	d10f      	bne.n	801b056 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	015a      	lsls	r2, r3, #5
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	4413      	add	r3, r2
 801b03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	68ba      	ldr	r2, [r7, #8]
 801b046:	0151      	lsls	r1, r2, #5
 801b048:	68fa      	ldr	r2, [r7, #12]
 801b04a:	440a      	add	r2, r1
 801b04c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b054:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801b056:	2300      	movs	r3, #0
}
 801b058:	4618      	mov	r0, r3
 801b05a:	3714      	adds	r7, #20
 801b05c:	46bd      	mov	sp, r7
 801b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b062:	4770      	bx	lr

0801b064 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801b064:	b480      	push	{r7}
 801b066:	b085      	sub	sp, #20
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
 801b06c:	460b      	mov	r3, r1
 801b06e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	68fa      	ldr	r2, [r7, #12]
 801b07e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b082:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801b086:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b08e:	681a      	ldr	r2, [r3, #0]
 801b090:	78fb      	ldrb	r3, [r7, #3]
 801b092:	011b      	lsls	r3, r3, #4
 801b094:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801b098:	68f9      	ldr	r1, [r7, #12]
 801b09a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b09e:	4313      	orrs	r3, r2
 801b0a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801b0a2:	2300      	movs	r3, #0
}
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	3714      	adds	r7, #20
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr

0801b0b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801b0b0:	b480      	push	{r7}
 801b0b2:	b085      	sub	sp, #20
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	68fa      	ldr	r2, [r7, #12]
 801b0c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b0ca:	f023 0303 	bic.w	r3, r3, #3
 801b0ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	68fa      	ldr	r2, [r7, #12]
 801b0da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b0de:	f023 0302 	bic.w	r3, r3, #2
 801b0e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801b0e4:	2300      	movs	r3, #0
}
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	3714      	adds	r7, #20
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f0:	4770      	bx	lr

0801b0f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801b0f2:	b480      	push	{r7}
 801b0f4:	b085      	sub	sp, #20
 801b0f6:	af00      	add	r7, sp, #0
 801b0f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	68fa      	ldr	r2, [r7, #12]
 801b108:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b10c:	f023 0303 	bic.w	r3, r3, #3
 801b110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b118:	685b      	ldr	r3, [r3, #4]
 801b11a:	68fa      	ldr	r2, [r7, #12]
 801b11c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b120:	f043 0302 	orr.w	r3, r3, #2
 801b124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801b126:	2300      	movs	r3, #0
}
 801b128:	4618      	mov	r0, r3
 801b12a:	3714      	adds	r7, #20
 801b12c:	46bd      	mov	sp, r7
 801b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b132:	4770      	bx	lr

0801b134 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801b134:	b480      	push	{r7}
 801b136:	b085      	sub	sp, #20
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	695b      	ldr	r3, [r3, #20]
 801b140:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	699b      	ldr	r3, [r3, #24]
 801b146:	68fa      	ldr	r2, [r7, #12]
 801b148:	4013      	ands	r3, r2
 801b14a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801b14c:	68fb      	ldr	r3, [r7, #12]
}
 801b14e:	4618      	mov	r0, r3
 801b150:	3714      	adds	r7, #20
 801b152:	46bd      	mov	sp, r7
 801b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b158:	4770      	bx	lr

0801b15a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801b15a:	b480      	push	{r7}
 801b15c:	b085      	sub	sp, #20
 801b15e:	af00      	add	r7, sp, #0
 801b160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b16c:	699b      	ldr	r3, [r3, #24]
 801b16e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b176:	69db      	ldr	r3, [r3, #28]
 801b178:	68ba      	ldr	r2, [r7, #8]
 801b17a:	4013      	ands	r3, r2
 801b17c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	0c1b      	lsrs	r3, r3, #16
}
 801b182:	4618      	mov	r0, r3
 801b184:	3714      	adds	r7, #20
 801b186:	46bd      	mov	sp, r7
 801b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18c:	4770      	bx	lr

0801b18e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801b18e:	b480      	push	{r7}
 801b190:	b085      	sub	sp, #20
 801b192:	af00      	add	r7, sp, #0
 801b194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1a0:	699b      	ldr	r3, [r3, #24]
 801b1a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1aa:	69db      	ldr	r3, [r3, #28]
 801b1ac:	68ba      	ldr	r2, [r7, #8]
 801b1ae:	4013      	ands	r3, r2
 801b1b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801b1b2:	68bb      	ldr	r3, [r7, #8]
 801b1b4:	b29b      	uxth	r3, r3
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3714      	adds	r7, #20
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c0:	4770      	bx	lr

0801b1c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801b1c2:	b480      	push	{r7}
 801b1c4:	b085      	sub	sp, #20
 801b1c6:	af00      	add	r7, sp, #0
 801b1c8:	6078      	str	r0, [r7, #4]
 801b1ca:	460b      	mov	r3, r1
 801b1cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801b1d2:	78fb      	ldrb	r3, [r7, #3]
 801b1d4:	015a      	lsls	r2, r3, #5
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	4413      	add	r3, r2
 801b1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b1de:	689b      	ldr	r3, [r3, #8]
 801b1e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1e8:	695b      	ldr	r3, [r3, #20]
 801b1ea:	68ba      	ldr	r2, [r7, #8]
 801b1ec:	4013      	ands	r3, r2
 801b1ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801b1f0:	68bb      	ldr	r3, [r7, #8]
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3714      	adds	r7, #20
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fc:	4770      	bx	lr

0801b1fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801b1fe:	b480      	push	{r7}
 801b200:	b087      	sub	sp, #28
 801b202:	af00      	add	r7, sp, #0
 801b204:	6078      	str	r0, [r7, #4]
 801b206:	460b      	mov	r3, r1
 801b208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b214:	691b      	ldr	r3, [r3, #16]
 801b216:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b220:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801b222:	78fb      	ldrb	r3, [r7, #3]
 801b224:	f003 030f 	and.w	r3, r3, #15
 801b228:	68fa      	ldr	r2, [r7, #12]
 801b22a:	fa22 f303 	lsr.w	r3, r2, r3
 801b22e:	01db      	lsls	r3, r3, #7
 801b230:	b2db      	uxtb	r3, r3
 801b232:	693a      	ldr	r2, [r7, #16]
 801b234:	4313      	orrs	r3, r2
 801b236:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801b238:	78fb      	ldrb	r3, [r7, #3]
 801b23a:	015a      	lsls	r2, r3, #5
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	4413      	add	r3, r2
 801b240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b244:	689b      	ldr	r3, [r3, #8]
 801b246:	693a      	ldr	r2, [r7, #16]
 801b248:	4013      	ands	r3, r2
 801b24a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801b24c:	68bb      	ldr	r3, [r7, #8]
}
 801b24e:	4618      	mov	r0, r3
 801b250:	371c      	adds	r7, #28
 801b252:	46bd      	mov	sp, r7
 801b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b258:	4770      	bx	lr

0801b25a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801b25a:	b480      	push	{r7}
 801b25c:	b083      	sub	sp, #12
 801b25e:	af00      	add	r7, sp, #0
 801b260:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	695b      	ldr	r3, [r3, #20]
 801b266:	f003 0301 	and.w	r3, r3, #1
}
 801b26a:	4618      	mov	r0, r3
 801b26c:	370c      	adds	r7, #12
 801b26e:	46bd      	mov	sp, r7
 801b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b274:	4770      	bx	lr

0801b276 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801b276:	b480      	push	{r7}
 801b278:	b085      	sub	sp, #20
 801b27a:	af00      	add	r7, sp, #0
 801b27c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801b282:	68fb      	ldr	r3, [r7, #12]
 801b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	68fa      	ldr	r2, [r7, #12]
 801b28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b290:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b294:	f023 0307 	bic.w	r3, r3, #7
 801b298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	68fa      	ldr	r2, [r7, #12]
 801b2a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b2a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b2ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801b2ae:	2300      	movs	r3, #0
}
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	3714      	adds	r7, #20
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ba:	4770      	bx	lr

0801b2bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801b2bc:	b480      	push	{r7}
 801b2be:	b087      	sub	sp, #28
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	60f8      	str	r0, [r7, #12]
 801b2c4:	460b      	mov	r3, r1
 801b2c6:	607a      	str	r2, [r7, #4]
 801b2c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	333c      	adds	r3, #60	; 0x3c
 801b2d2:	3304      	adds	r3, #4
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	4a26      	ldr	r2, [pc, #152]	; (801b374 <USB_EP0_OutStart+0xb8>)
 801b2dc:	4293      	cmp	r3, r2
 801b2de:	d90a      	bls.n	801b2f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b2f0:	d101      	bne.n	801b2f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	e037      	b.n	801b366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801b2f6:	697b      	ldr	r3, [r7, #20]
 801b2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b2fc:	461a      	mov	r2, r3
 801b2fe:	2300      	movs	r3, #0
 801b300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b302:	697b      	ldr	r3, [r7, #20]
 801b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b308:	691b      	ldr	r3, [r3, #16]
 801b30a:	697a      	ldr	r2, [r7, #20]
 801b30c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801b316:	697b      	ldr	r3, [r7, #20]
 801b318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b31c:	691b      	ldr	r3, [r3, #16]
 801b31e:	697a      	ldr	r2, [r7, #20]
 801b320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b324:	f043 0318 	orr.w	r3, r3, #24
 801b328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801b32a:	697b      	ldr	r3, [r7, #20]
 801b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b330:	691b      	ldr	r3, [r3, #16]
 801b332:	697a      	ldr	r2, [r7, #20]
 801b334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b338:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801b33c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801b33e:	7afb      	ldrb	r3, [r7, #11]
 801b340:	2b01      	cmp	r3, #1
 801b342:	d10f      	bne.n	801b364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b34a:	461a      	mov	r2, r3
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801b350:	697b      	ldr	r3, [r7, #20]
 801b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	697a      	ldr	r2, [r7, #20]
 801b35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b35e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801b362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b364:	2300      	movs	r3, #0
}
 801b366:	4618      	mov	r0, r3
 801b368:	371c      	adds	r7, #28
 801b36a:	46bd      	mov	sp, r7
 801b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b370:	4770      	bx	lr
 801b372:	bf00      	nop
 801b374:	4f54300a 	.word	0x4f54300a

0801b378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801b378:	b480      	push	{r7}
 801b37a:	b085      	sub	sp, #20
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b380:	2300      	movs	r3, #0
 801b382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	3301      	adds	r3, #1
 801b388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	4a13      	ldr	r2, [pc, #76]	; (801b3dc <USB_CoreReset+0x64>)
 801b38e:	4293      	cmp	r3, r2
 801b390:	d901      	bls.n	801b396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801b392:	2303      	movs	r3, #3
 801b394:	e01b      	b.n	801b3ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	691b      	ldr	r3, [r3, #16]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	daf2      	bge.n	801b384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801b39e:	2300      	movs	r3, #0
 801b3a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	691b      	ldr	r3, [r3, #16]
 801b3a6:	f043 0201 	orr.w	r2, r3, #1
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	3301      	adds	r3, #1
 801b3b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	4a09      	ldr	r2, [pc, #36]	; (801b3dc <USB_CoreReset+0x64>)
 801b3b8:	4293      	cmp	r3, r2
 801b3ba:	d901      	bls.n	801b3c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801b3bc:	2303      	movs	r3, #3
 801b3be:	e006      	b.n	801b3ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	691b      	ldr	r3, [r3, #16]
 801b3c4:	f003 0301 	and.w	r3, r3, #1
 801b3c8:	2b01      	cmp	r3, #1
 801b3ca:	d0f0      	beq.n	801b3ae <USB_CoreReset+0x36>

  return HAL_OK;
 801b3cc:	2300      	movs	r3, #0
}
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	3714      	adds	r7, #20
 801b3d2:	46bd      	mov	sp, r7
 801b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d8:	4770      	bx	lr
 801b3da:	bf00      	nop
 801b3dc:	00030d40 	.word	0x00030d40

0801b3e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b084      	sub	sp, #16
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
 801b3e8:	460b      	mov	r3, r1
 801b3ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b3ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801b3f0:	f002 fc28 	bl	801dc44 <USBD_static_malloc>
 801b3f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d109      	bne.n	801b410 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	32b0      	adds	r2, #176	; 0xb0
 801b406:	2100      	movs	r1, #0
 801b408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801b40c:	2302      	movs	r3, #2
 801b40e:	e0d4      	b.n	801b5ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801b410:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801b414:	2100      	movs	r1, #0
 801b416:	68f8      	ldr	r0, [r7, #12]
 801b418:	f004 f910 	bl	801f63c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	32b0      	adds	r2, #176	; 0xb0
 801b426:	68f9      	ldr	r1, [r7, #12]
 801b428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	32b0      	adds	r2, #176	; 0xb0
 801b436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	7c1b      	ldrb	r3, [r3, #16]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d138      	bne.n	801b4ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801b448:	4b5e      	ldr	r3, [pc, #376]	; (801b5c4 <USBD_CDC_Init+0x1e4>)
 801b44a:	7819      	ldrb	r1, [r3, #0]
 801b44c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b450:	2202      	movs	r2, #2
 801b452:	6878      	ldr	r0, [r7, #4]
 801b454:	f002 fad3 	bl	801d9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801b458:	4b5a      	ldr	r3, [pc, #360]	; (801b5c4 <USBD_CDC_Init+0x1e4>)
 801b45a:	781b      	ldrb	r3, [r3, #0]
 801b45c:	f003 020f 	and.w	r2, r3, #15
 801b460:	6879      	ldr	r1, [r7, #4]
 801b462:	4613      	mov	r3, r2
 801b464:	009b      	lsls	r3, r3, #2
 801b466:	4413      	add	r3, r2
 801b468:	009b      	lsls	r3, r3, #2
 801b46a:	440b      	add	r3, r1
 801b46c:	3324      	adds	r3, #36	; 0x24
 801b46e:	2201      	movs	r2, #1
 801b470:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801b472:	4b55      	ldr	r3, [pc, #340]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b474:	7819      	ldrb	r1, [r3, #0]
 801b476:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b47a:	2202      	movs	r2, #2
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f002 fabe 	bl	801d9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801b482:	4b51      	ldr	r3, [pc, #324]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b484:	781b      	ldrb	r3, [r3, #0]
 801b486:	f003 020f 	and.w	r2, r3, #15
 801b48a:	6879      	ldr	r1, [r7, #4]
 801b48c:	4613      	mov	r3, r2
 801b48e:	009b      	lsls	r3, r3, #2
 801b490:	4413      	add	r3, r2
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	440b      	add	r3, r1
 801b496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b49a:	2201      	movs	r2, #1
 801b49c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801b49e:	4b4b      	ldr	r3, [pc, #300]	; (801b5cc <USBD_CDC_Init+0x1ec>)
 801b4a0:	781b      	ldrb	r3, [r3, #0]
 801b4a2:	f003 020f 	and.w	r2, r3, #15
 801b4a6:	6879      	ldr	r1, [r7, #4]
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	009b      	lsls	r3, r3, #2
 801b4ac:	4413      	add	r3, r2
 801b4ae:	009b      	lsls	r3, r3, #2
 801b4b0:	440b      	add	r3, r1
 801b4b2:	3326      	adds	r3, #38	; 0x26
 801b4b4:	2210      	movs	r2, #16
 801b4b6:	801a      	strh	r2, [r3, #0]
 801b4b8:	e035      	b.n	801b526 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801b4ba:	4b42      	ldr	r3, [pc, #264]	; (801b5c4 <USBD_CDC_Init+0x1e4>)
 801b4bc:	7819      	ldrb	r1, [r3, #0]
 801b4be:	2340      	movs	r3, #64	; 0x40
 801b4c0:	2202      	movs	r2, #2
 801b4c2:	6878      	ldr	r0, [r7, #4]
 801b4c4:	f002 fa9b 	bl	801d9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801b4c8:	4b3e      	ldr	r3, [pc, #248]	; (801b5c4 <USBD_CDC_Init+0x1e4>)
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	f003 020f 	and.w	r2, r3, #15
 801b4d0:	6879      	ldr	r1, [r7, #4]
 801b4d2:	4613      	mov	r3, r2
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	4413      	add	r3, r2
 801b4d8:	009b      	lsls	r3, r3, #2
 801b4da:	440b      	add	r3, r1
 801b4dc:	3324      	adds	r3, #36	; 0x24
 801b4de:	2201      	movs	r2, #1
 801b4e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801b4e2:	4b39      	ldr	r3, [pc, #228]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b4e4:	7819      	ldrb	r1, [r3, #0]
 801b4e6:	2340      	movs	r3, #64	; 0x40
 801b4e8:	2202      	movs	r2, #2
 801b4ea:	6878      	ldr	r0, [r7, #4]
 801b4ec:	f002 fa87 	bl	801d9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801b4f0:	4b35      	ldr	r3, [pc, #212]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b4f2:	781b      	ldrb	r3, [r3, #0]
 801b4f4:	f003 020f 	and.w	r2, r3, #15
 801b4f8:	6879      	ldr	r1, [r7, #4]
 801b4fa:	4613      	mov	r3, r2
 801b4fc:	009b      	lsls	r3, r3, #2
 801b4fe:	4413      	add	r3, r2
 801b500:	009b      	lsls	r3, r3, #2
 801b502:	440b      	add	r3, r1
 801b504:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b508:	2201      	movs	r2, #1
 801b50a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801b50c:	4b2f      	ldr	r3, [pc, #188]	; (801b5cc <USBD_CDC_Init+0x1ec>)
 801b50e:	781b      	ldrb	r3, [r3, #0]
 801b510:	f003 020f 	and.w	r2, r3, #15
 801b514:	6879      	ldr	r1, [r7, #4]
 801b516:	4613      	mov	r3, r2
 801b518:	009b      	lsls	r3, r3, #2
 801b51a:	4413      	add	r3, r2
 801b51c:	009b      	lsls	r3, r3, #2
 801b51e:	440b      	add	r3, r1
 801b520:	3326      	adds	r3, #38	; 0x26
 801b522:	2210      	movs	r2, #16
 801b524:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b526:	4b29      	ldr	r3, [pc, #164]	; (801b5cc <USBD_CDC_Init+0x1ec>)
 801b528:	7819      	ldrb	r1, [r3, #0]
 801b52a:	2308      	movs	r3, #8
 801b52c:	2203      	movs	r2, #3
 801b52e:	6878      	ldr	r0, [r7, #4]
 801b530:	f002 fa65 	bl	801d9fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801b534:	4b25      	ldr	r3, [pc, #148]	; (801b5cc <USBD_CDC_Init+0x1ec>)
 801b536:	781b      	ldrb	r3, [r3, #0]
 801b538:	f003 020f 	and.w	r2, r3, #15
 801b53c:	6879      	ldr	r1, [r7, #4]
 801b53e:	4613      	mov	r3, r2
 801b540:	009b      	lsls	r3, r3, #2
 801b542:	4413      	add	r3, r2
 801b544:	009b      	lsls	r3, r3, #2
 801b546:	440b      	add	r3, r1
 801b548:	3324      	adds	r3, #36	; 0x24
 801b54a:	2201      	movs	r2, #1
 801b54c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	2200      	movs	r2, #0
 801b552:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	33b0      	adds	r3, #176	; 0xb0
 801b560:	009b      	lsls	r3, r3, #2
 801b562:	4413      	add	r3, r2
 801b564:	685b      	ldr	r3, [r3, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	2200      	movs	r2, #0
 801b56e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	2200      	movs	r2, #0
 801b576:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801b580:	2b00      	cmp	r3, #0
 801b582:	d101      	bne.n	801b588 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801b584:	2302      	movs	r3, #2
 801b586:	e018      	b.n	801b5ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	7c1b      	ldrb	r3, [r3, #16]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d10a      	bne.n	801b5a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b590:	4b0d      	ldr	r3, [pc, #52]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b592:	7819      	ldrb	r1, [r3, #0]
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b59a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f002 fb1c 	bl	801dbdc <USBD_LL_PrepareReceive>
 801b5a4:	e008      	b.n	801b5b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801b5a6:	4b08      	ldr	r3, [pc, #32]	; (801b5c8 <USBD_CDC_Init+0x1e8>)
 801b5a8:	7819      	ldrb	r1, [r3, #0]
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801b5b0:	2340      	movs	r3, #64	; 0x40
 801b5b2:	6878      	ldr	r0, [r7, #4]
 801b5b4:	f002 fb12 	bl	801dbdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801b5b8:	2300      	movs	r3, #0
}
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	3710      	adds	r7, #16
 801b5be:	46bd      	mov	sp, r7
 801b5c0:	bd80      	pop	{r7, pc}
 801b5c2:	bf00      	nop
 801b5c4:	200006df 	.word	0x200006df
 801b5c8:	200006e0 	.word	0x200006e0
 801b5cc:	200006e1 	.word	0x200006e1

0801b5d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b082      	sub	sp, #8
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
 801b5d8:	460b      	mov	r3, r1
 801b5da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801b5dc:	4b3a      	ldr	r3, [pc, #232]	; (801b6c8 <USBD_CDC_DeInit+0xf8>)
 801b5de:	781b      	ldrb	r3, [r3, #0]
 801b5e0:	4619      	mov	r1, r3
 801b5e2:	6878      	ldr	r0, [r7, #4]
 801b5e4:	f002 fa31 	bl	801da4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801b5e8:	4b37      	ldr	r3, [pc, #220]	; (801b6c8 <USBD_CDC_DeInit+0xf8>)
 801b5ea:	781b      	ldrb	r3, [r3, #0]
 801b5ec:	f003 020f 	and.w	r2, r3, #15
 801b5f0:	6879      	ldr	r1, [r7, #4]
 801b5f2:	4613      	mov	r3, r2
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	4413      	add	r3, r2
 801b5f8:	009b      	lsls	r3, r3, #2
 801b5fa:	440b      	add	r3, r1
 801b5fc:	3324      	adds	r3, #36	; 0x24
 801b5fe:	2200      	movs	r2, #0
 801b600:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801b602:	4b32      	ldr	r3, [pc, #200]	; (801b6cc <USBD_CDC_DeInit+0xfc>)
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	4619      	mov	r1, r3
 801b608:	6878      	ldr	r0, [r7, #4]
 801b60a:	f002 fa1e 	bl	801da4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801b60e:	4b2f      	ldr	r3, [pc, #188]	; (801b6cc <USBD_CDC_DeInit+0xfc>)
 801b610:	781b      	ldrb	r3, [r3, #0]
 801b612:	f003 020f 	and.w	r2, r3, #15
 801b616:	6879      	ldr	r1, [r7, #4]
 801b618:	4613      	mov	r3, r2
 801b61a:	009b      	lsls	r3, r3, #2
 801b61c:	4413      	add	r3, r2
 801b61e:	009b      	lsls	r3, r3, #2
 801b620:	440b      	add	r3, r1
 801b622:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b626:	2200      	movs	r2, #0
 801b628:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801b62a:	4b29      	ldr	r3, [pc, #164]	; (801b6d0 <USBD_CDC_DeInit+0x100>)
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	4619      	mov	r1, r3
 801b630:	6878      	ldr	r0, [r7, #4]
 801b632:	f002 fa0a 	bl	801da4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801b636:	4b26      	ldr	r3, [pc, #152]	; (801b6d0 <USBD_CDC_DeInit+0x100>)
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	f003 020f 	and.w	r2, r3, #15
 801b63e:	6879      	ldr	r1, [r7, #4]
 801b640:	4613      	mov	r3, r2
 801b642:	009b      	lsls	r3, r3, #2
 801b644:	4413      	add	r3, r2
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	440b      	add	r3, r1
 801b64a:	3324      	adds	r3, #36	; 0x24
 801b64c:	2200      	movs	r2, #0
 801b64e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801b650:	4b1f      	ldr	r3, [pc, #124]	; (801b6d0 <USBD_CDC_DeInit+0x100>)
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	f003 020f 	and.w	r2, r3, #15
 801b658:	6879      	ldr	r1, [r7, #4]
 801b65a:	4613      	mov	r3, r2
 801b65c:	009b      	lsls	r3, r3, #2
 801b65e:	4413      	add	r3, r2
 801b660:	009b      	lsls	r3, r3, #2
 801b662:	440b      	add	r3, r1
 801b664:	3326      	adds	r3, #38	; 0x26
 801b666:	2200      	movs	r2, #0
 801b668:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	32b0      	adds	r2, #176	; 0xb0
 801b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d01f      	beq.n	801b6bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b682:	687a      	ldr	r2, [r7, #4]
 801b684:	33b0      	adds	r3, #176	; 0xb0
 801b686:	009b      	lsls	r3, r3, #2
 801b688:	4413      	add	r3, r2
 801b68a:	685b      	ldr	r3, [r3, #4]
 801b68c:	685b      	ldr	r3, [r3, #4]
 801b68e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	32b0      	adds	r2, #176	; 0xb0
 801b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f002 fade 	bl	801dc60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	32b0      	adds	r2, #176	; 0xb0
 801b6ae:	2100      	movs	r1, #0
 801b6b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b6bc:	2300      	movs	r3, #0
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	3708      	adds	r7, #8
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	bd80      	pop	{r7, pc}
 801b6c6:	bf00      	nop
 801b6c8:	200006df 	.word	0x200006df
 801b6cc:	200006e0 	.word	0x200006e0
 801b6d0:	200006e1 	.word	0x200006e1

0801b6d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b086      	sub	sp, #24
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	32b0      	adds	r2, #176	; 0xb0
 801b6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801b6ee:	2300      	movs	r3, #0
 801b6f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d101      	bne.n	801b704 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801b700:	2303      	movs	r3, #3
 801b702:	e0bf      	b.n	801b884 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b704:	683b      	ldr	r3, [r7, #0]
 801b706:	781b      	ldrb	r3, [r3, #0]
 801b708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d050      	beq.n	801b7b2 <USBD_CDC_Setup+0xde>
 801b710:	2b20      	cmp	r3, #32
 801b712:	f040 80af 	bne.w	801b874 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	88db      	ldrh	r3, [r3, #6]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d03a      	beq.n	801b794 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	b25b      	sxtb	r3, r3
 801b724:	2b00      	cmp	r3, #0
 801b726:	da1b      	bge.n	801b760 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	33b0      	adds	r3, #176	; 0xb0
 801b732:	009b      	lsls	r3, r3, #2
 801b734:	4413      	add	r3, r2
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	689b      	ldr	r3, [r3, #8]
 801b73a:	683a      	ldr	r2, [r7, #0]
 801b73c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801b73e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b740:	683a      	ldr	r2, [r7, #0]
 801b742:	88d2      	ldrh	r2, [r2, #6]
 801b744:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801b746:	683b      	ldr	r3, [r7, #0]
 801b748:	88db      	ldrh	r3, [r3, #6]
 801b74a:	2b07      	cmp	r3, #7
 801b74c:	bf28      	it	cs
 801b74e:	2307      	movcs	r3, #7
 801b750:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	89fa      	ldrh	r2, [r7, #14]
 801b756:	4619      	mov	r1, r3
 801b758:	6878      	ldr	r0, [r7, #4]
 801b75a:	f001 fd43 	bl	801d1e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801b75e:	e090      	b.n	801b882 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	785a      	ldrb	r2, [r3, #1]
 801b764:	693b      	ldr	r3, [r7, #16]
 801b766:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	88db      	ldrh	r3, [r3, #6]
 801b76e:	2b3f      	cmp	r3, #63	; 0x3f
 801b770:	d803      	bhi.n	801b77a <USBD_CDC_Setup+0xa6>
 801b772:	683b      	ldr	r3, [r7, #0]
 801b774:	88db      	ldrh	r3, [r3, #6]
 801b776:	b2da      	uxtb	r2, r3
 801b778:	e000      	b.n	801b77c <USBD_CDC_Setup+0xa8>
 801b77a:	2240      	movs	r2, #64	; 0x40
 801b77c:	693b      	ldr	r3, [r7, #16]
 801b77e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801b782:	6939      	ldr	r1, [r7, #16]
 801b784:	693b      	ldr	r3, [r7, #16]
 801b786:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801b78a:	461a      	mov	r2, r3
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f001 fd55 	bl	801d23c <USBD_CtlPrepareRx>
      break;
 801b792:	e076      	b.n	801b882 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b79a:	687a      	ldr	r2, [r7, #4]
 801b79c:	33b0      	adds	r3, #176	; 0xb0
 801b79e:	009b      	lsls	r3, r3, #2
 801b7a0:	4413      	add	r3, r2
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	689b      	ldr	r3, [r3, #8]
 801b7a6:	683a      	ldr	r2, [r7, #0]
 801b7a8:	7850      	ldrb	r0, [r2, #1]
 801b7aa:	2200      	movs	r2, #0
 801b7ac:	6839      	ldr	r1, [r7, #0]
 801b7ae:	4798      	blx	r3
      break;
 801b7b0:	e067      	b.n	801b882 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b7b2:	683b      	ldr	r3, [r7, #0]
 801b7b4:	785b      	ldrb	r3, [r3, #1]
 801b7b6:	2b0b      	cmp	r3, #11
 801b7b8:	d851      	bhi.n	801b85e <USBD_CDC_Setup+0x18a>
 801b7ba:	a201      	add	r2, pc, #4	; (adr r2, 801b7c0 <USBD_CDC_Setup+0xec>)
 801b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7c0:	0801b7f1 	.word	0x0801b7f1
 801b7c4:	0801b86d 	.word	0x0801b86d
 801b7c8:	0801b85f 	.word	0x0801b85f
 801b7cc:	0801b85f 	.word	0x0801b85f
 801b7d0:	0801b85f 	.word	0x0801b85f
 801b7d4:	0801b85f 	.word	0x0801b85f
 801b7d8:	0801b85f 	.word	0x0801b85f
 801b7dc:	0801b85f 	.word	0x0801b85f
 801b7e0:	0801b85f 	.word	0x0801b85f
 801b7e4:	0801b85f 	.word	0x0801b85f
 801b7e8:	0801b81b 	.word	0x0801b81b
 801b7ec:	0801b845 	.word	0x0801b845
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b7f6:	b2db      	uxtb	r3, r3
 801b7f8:	2b03      	cmp	r3, #3
 801b7fa:	d107      	bne.n	801b80c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b7fc:	f107 030a 	add.w	r3, r7, #10
 801b800:	2202      	movs	r2, #2
 801b802:	4619      	mov	r1, r3
 801b804:	6878      	ldr	r0, [r7, #4]
 801b806:	f001 fced 	bl	801d1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b80a:	e032      	b.n	801b872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801b80c:	6839      	ldr	r1, [r7, #0]
 801b80e:	6878      	ldr	r0, [r7, #4]
 801b810:	f001 fc77 	bl	801d102 <USBD_CtlError>
            ret = USBD_FAIL;
 801b814:	2303      	movs	r3, #3
 801b816:	75fb      	strb	r3, [r7, #23]
          break;
 801b818:	e02b      	b.n	801b872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b820:	b2db      	uxtb	r3, r3
 801b822:	2b03      	cmp	r3, #3
 801b824:	d107      	bne.n	801b836 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801b826:	f107 030d 	add.w	r3, r7, #13
 801b82a:	2201      	movs	r2, #1
 801b82c:	4619      	mov	r1, r3
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f001 fcd8 	bl	801d1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b834:	e01d      	b.n	801b872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801b836:	6839      	ldr	r1, [r7, #0]
 801b838:	6878      	ldr	r0, [r7, #4]
 801b83a:	f001 fc62 	bl	801d102 <USBD_CtlError>
            ret = USBD_FAIL;
 801b83e:	2303      	movs	r3, #3
 801b840:	75fb      	strb	r3, [r7, #23]
          break;
 801b842:	e016      	b.n	801b872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	2b03      	cmp	r3, #3
 801b84e:	d00f      	beq.n	801b870 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801b850:	6839      	ldr	r1, [r7, #0]
 801b852:	6878      	ldr	r0, [r7, #4]
 801b854:	f001 fc55 	bl	801d102 <USBD_CtlError>
            ret = USBD_FAIL;
 801b858:	2303      	movs	r3, #3
 801b85a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801b85c:	e008      	b.n	801b870 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801b85e:	6839      	ldr	r1, [r7, #0]
 801b860:	6878      	ldr	r0, [r7, #4]
 801b862:	f001 fc4e 	bl	801d102 <USBD_CtlError>
          ret = USBD_FAIL;
 801b866:	2303      	movs	r3, #3
 801b868:	75fb      	strb	r3, [r7, #23]
          break;
 801b86a:	e002      	b.n	801b872 <USBD_CDC_Setup+0x19e>
          break;
 801b86c:	bf00      	nop
 801b86e:	e008      	b.n	801b882 <USBD_CDC_Setup+0x1ae>
          break;
 801b870:	bf00      	nop
      }
      break;
 801b872:	e006      	b.n	801b882 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801b874:	6839      	ldr	r1, [r7, #0]
 801b876:	6878      	ldr	r0, [r7, #4]
 801b878:	f001 fc43 	bl	801d102 <USBD_CtlError>
      ret = USBD_FAIL;
 801b87c:	2303      	movs	r3, #3
 801b87e:	75fb      	strb	r3, [r7, #23]
      break;
 801b880:	bf00      	nop
  }

  return (uint8_t)ret;
 801b882:	7dfb      	ldrb	r3, [r7, #23]
}
 801b884:	4618      	mov	r0, r3
 801b886:	3718      	adds	r7, #24
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}

0801b88c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b084      	sub	sp, #16
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	460b      	mov	r3, r1
 801b896:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b89e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	32b0      	adds	r2, #176	; 0xb0
 801b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d101      	bne.n	801b8b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801b8b2:	2303      	movs	r3, #3
 801b8b4:	e065      	b.n	801b982 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	32b0      	adds	r2, #176	; 0xb0
 801b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801b8c6:	78fb      	ldrb	r3, [r7, #3]
 801b8c8:	f003 020f 	and.w	r2, r3, #15
 801b8cc:	6879      	ldr	r1, [r7, #4]
 801b8ce:	4613      	mov	r3, r2
 801b8d0:	009b      	lsls	r3, r3, #2
 801b8d2:	4413      	add	r3, r2
 801b8d4:	009b      	lsls	r3, r3, #2
 801b8d6:	440b      	add	r3, r1
 801b8d8:	3318      	adds	r3, #24
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d02f      	beq.n	801b940 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801b8e0:	78fb      	ldrb	r3, [r7, #3]
 801b8e2:	f003 020f 	and.w	r2, r3, #15
 801b8e6:	6879      	ldr	r1, [r7, #4]
 801b8e8:	4613      	mov	r3, r2
 801b8ea:	009b      	lsls	r3, r3, #2
 801b8ec:	4413      	add	r3, r2
 801b8ee:	009b      	lsls	r3, r3, #2
 801b8f0:	440b      	add	r3, r1
 801b8f2:	3318      	adds	r3, #24
 801b8f4:	681a      	ldr	r2, [r3, #0]
 801b8f6:	78fb      	ldrb	r3, [r7, #3]
 801b8f8:	f003 010f 	and.w	r1, r3, #15
 801b8fc:	68f8      	ldr	r0, [r7, #12]
 801b8fe:	460b      	mov	r3, r1
 801b900:	00db      	lsls	r3, r3, #3
 801b902:	440b      	add	r3, r1
 801b904:	009b      	lsls	r3, r3, #2
 801b906:	4403      	add	r3, r0
 801b908:	3348      	adds	r3, #72	; 0x48
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	fbb2 f1f3 	udiv	r1, r2, r3
 801b910:	fb01 f303 	mul.w	r3, r1, r3
 801b914:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801b916:	2b00      	cmp	r3, #0
 801b918:	d112      	bne.n	801b940 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801b91a:	78fb      	ldrb	r3, [r7, #3]
 801b91c:	f003 020f 	and.w	r2, r3, #15
 801b920:	6879      	ldr	r1, [r7, #4]
 801b922:	4613      	mov	r3, r2
 801b924:	009b      	lsls	r3, r3, #2
 801b926:	4413      	add	r3, r2
 801b928:	009b      	lsls	r3, r3, #2
 801b92a:	440b      	add	r3, r1
 801b92c:	3318      	adds	r3, #24
 801b92e:	2200      	movs	r2, #0
 801b930:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b932:	78f9      	ldrb	r1, [r7, #3]
 801b934:	2300      	movs	r3, #0
 801b936:	2200      	movs	r2, #0
 801b938:	6878      	ldr	r0, [r7, #4]
 801b93a:	f002 f92e 	bl	801db9a <USBD_LL_Transmit>
 801b93e:	e01f      	b.n	801b980 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801b940:	68bb      	ldr	r3, [r7, #8]
 801b942:	2200      	movs	r2, #0
 801b944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b94e:	687a      	ldr	r2, [r7, #4]
 801b950:	33b0      	adds	r3, #176	; 0xb0
 801b952:	009b      	lsls	r3, r3, #2
 801b954:	4413      	add	r3, r2
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	691b      	ldr	r3, [r3, #16]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d010      	beq.n	801b980 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b964:	687a      	ldr	r2, [r7, #4]
 801b966:	33b0      	adds	r3, #176	; 0xb0
 801b968:	009b      	lsls	r3, r3, #2
 801b96a:	4413      	add	r3, r2
 801b96c:	685b      	ldr	r3, [r3, #4]
 801b96e:	691b      	ldr	r3, [r3, #16]
 801b970:	68ba      	ldr	r2, [r7, #8]
 801b972:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801b976:	68ba      	ldr	r2, [r7, #8]
 801b978:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801b97c:	78fa      	ldrb	r2, [r7, #3]
 801b97e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801b980:	2300      	movs	r3, #0
}
 801b982:	4618      	mov	r0, r3
 801b984:	3710      	adds	r7, #16
 801b986:	46bd      	mov	sp, r7
 801b988:	bd80      	pop	{r7, pc}

0801b98a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b98a:	b580      	push	{r7, lr}
 801b98c:	b084      	sub	sp, #16
 801b98e:	af00      	add	r7, sp, #0
 801b990:	6078      	str	r0, [r7, #4]
 801b992:	460b      	mov	r3, r1
 801b994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	32b0      	adds	r2, #176	; 0xb0
 801b9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	32b0      	adds	r2, #176	; 0xb0
 801b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d101      	bne.n	801b9bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801b9b8:	2303      	movs	r3, #3
 801b9ba:	e01a      	b.n	801b9f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b9bc:	78fb      	ldrb	r3, [r7, #3]
 801b9be:	4619      	mov	r1, r3
 801b9c0:	6878      	ldr	r0, [r7, #4]
 801b9c2:	f002 f92c 	bl	801dc1e <USBD_LL_GetRxDataSize>
 801b9c6:	4602      	mov	r2, r0
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801b9d4:	687a      	ldr	r2, [r7, #4]
 801b9d6:	33b0      	adds	r3, #176	; 0xb0
 801b9d8:	009b      	lsls	r3, r3, #2
 801b9da:	4413      	add	r3, r2
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	68db      	ldr	r3, [r3, #12]
 801b9e0:	68fa      	ldr	r2, [r7, #12]
 801b9e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801b9e6:	68fa      	ldr	r2, [r7, #12]
 801b9e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801b9ec:	4611      	mov	r1, r2
 801b9ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801b9f0:	2300      	movs	r3, #0
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3710      	adds	r7, #16
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd80      	pop	{r7, pc}

0801b9fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b9fa:	b580      	push	{r7, lr}
 801b9fc:	b084      	sub	sp, #16
 801b9fe:	af00      	add	r7, sp, #0
 801ba00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	32b0      	adds	r2, #176	; 0xb0
 801ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ba10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d101      	bne.n	801ba1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801ba18:	2303      	movs	r3, #3
 801ba1a:	e025      	b.n	801ba68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ba22:	687a      	ldr	r2, [r7, #4]
 801ba24:	33b0      	adds	r3, #176	; 0xb0
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	4413      	add	r3, r2
 801ba2a:	685b      	ldr	r3, [r3, #4]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d01a      	beq.n	801ba66 <USBD_CDC_EP0_RxReady+0x6c>
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801ba36:	2bff      	cmp	r3, #255	; 0xff
 801ba38:	d015      	beq.n	801ba66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ba40:	687a      	ldr	r2, [r7, #4]
 801ba42:	33b0      	adds	r3, #176	; 0xb0
 801ba44:	009b      	lsls	r3, r3, #2
 801ba46:	4413      	add	r3, r2
 801ba48:	685b      	ldr	r3, [r3, #4]
 801ba4a:	689b      	ldr	r3, [r3, #8]
 801ba4c:	68fa      	ldr	r2, [r7, #12]
 801ba4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801ba52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801ba54:	68fa      	ldr	r2, [r7, #12]
 801ba56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801ba5a:	b292      	uxth	r2, r2
 801ba5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	22ff      	movs	r2, #255	; 0xff
 801ba62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801ba66:	2300      	movs	r3, #0
}
 801ba68:	4618      	mov	r0, r3
 801ba6a:	3710      	adds	r7, #16
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}

0801ba70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b086      	sub	sp, #24
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ba78:	2182      	movs	r1, #130	; 0x82
 801ba7a:	4818      	ldr	r0, [pc, #96]	; (801badc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ba7c:	f000 fd09 	bl	801c492 <USBD_GetEpDesc>
 801ba80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ba82:	2101      	movs	r1, #1
 801ba84:	4815      	ldr	r0, [pc, #84]	; (801badc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ba86:	f000 fd04 	bl	801c492 <USBD_GetEpDesc>
 801ba8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ba8c:	2181      	movs	r1, #129	; 0x81
 801ba8e:	4813      	ldr	r0, [pc, #76]	; (801badc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ba90:	f000 fcff 	bl	801c492 <USBD_GetEpDesc>
 801ba94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d002      	beq.n	801baa2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ba9c:	697b      	ldr	r3, [r7, #20]
 801ba9e:	2210      	movs	r2, #16
 801baa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801baa2:	693b      	ldr	r3, [r7, #16]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d006      	beq.n	801bab6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801baa8:	693b      	ldr	r3, [r7, #16]
 801baaa:	2200      	movs	r2, #0
 801baac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bab0:	711a      	strb	r2, [r3, #4]
 801bab2:	2200      	movs	r2, #0
 801bab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d006      	beq.n	801baca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	2200      	movs	r2, #0
 801bac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bac4:	711a      	strb	r2, [r3, #4]
 801bac6:	2200      	movs	r2, #0
 801bac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	2243      	movs	r2, #67	; 0x43
 801bace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801bad0:	4b02      	ldr	r3, [pc, #8]	; (801badc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801bad2:	4618      	mov	r0, r3
 801bad4:	3718      	adds	r7, #24
 801bad6:	46bd      	mov	sp, r7
 801bad8:	bd80      	pop	{r7, pc}
 801bada:	bf00      	nop
 801badc:	2000069c 	.word	0x2000069c

0801bae0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b086      	sub	sp, #24
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801bae8:	2182      	movs	r1, #130	; 0x82
 801baea:	4818      	ldr	r0, [pc, #96]	; (801bb4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801baec:	f000 fcd1 	bl	801c492 <USBD_GetEpDesc>
 801baf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801baf2:	2101      	movs	r1, #1
 801baf4:	4815      	ldr	r0, [pc, #84]	; (801bb4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801baf6:	f000 fccc 	bl	801c492 <USBD_GetEpDesc>
 801bafa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801bafc:	2181      	movs	r1, #129	; 0x81
 801bafe:	4813      	ldr	r0, [pc, #76]	; (801bb4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801bb00:	f000 fcc7 	bl	801c492 <USBD_GetEpDesc>
 801bb04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801bb06:	697b      	ldr	r3, [r7, #20]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d002      	beq.n	801bb12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	2210      	movs	r2, #16
 801bb10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d006      	beq.n	801bb26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801bb18:	693b      	ldr	r3, [r7, #16]
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	711a      	strb	r2, [r3, #4]
 801bb1e:	2200      	movs	r2, #0
 801bb20:	f042 0202 	orr.w	r2, r2, #2
 801bb24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d006      	beq.n	801bb3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	2200      	movs	r2, #0
 801bb30:	711a      	strb	r2, [r3, #4]
 801bb32:	2200      	movs	r2, #0
 801bb34:	f042 0202 	orr.w	r2, r2, #2
 801bb38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	2243      	movs	r2, #67	; 0x43
 801bb3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801bb40:	4b02      	ldr	r3, [pc, #8]	; (801bb4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801bb42:	4618      	mov	r0, r3
 801bb44:	3718      	adds	r7, #24
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}
 801bb4a:	bf00      	nop
 801bb4c:	2000069c 	.word	0x2000069c

0801bb50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b086      	sub	sp, #24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801bb58:	2182      	movs	r1, #130	; 0x82
 801bb5a:	4818      	ldr	r0, [pc, #96]	; (801bbbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801bb5c:	f000 fc99 	bl	801c492 <USBD_GetEpDesc>
 801bb60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801bb62:	2101      	movs	r1, #1
 801bb64:	4815      	ldr	r0, [pc, #84]	; (801bbbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801bb66:	f000 fc94 	bl	801c492 <USBD_GetEpDesc>
 801bb6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801bb6c:	2181      	movs	r1, #129	; 0x81
 801bb6e:	4813      	ldr	r0, [pc, #76]	; (801bbbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801bb70:	f000 fc8f 	bl	801c492 <USBD_GetEpDesc>
 801bb74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801bb76:	697b      	ldr	r3, [r7, #20]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d002      	beq.n	801bb82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	2210      	movs	r2, #16
 801bb80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801bb82:	693b      	ldr	r3, [r7, #16]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d006      	beq.n	801bb96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801bb88:	693b      	ldr	r3, [r7, #16]
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bb90:	711a      	strb	r2, [r3, #4]
 801bb92:	2200      	movs	r2, #0
 801bb94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d006      	beq.n	801bbaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	2200      	movs	r2, #0
 801bba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bba4:	711a      	strb	r2, [r3, #4]
 801bba6:	2200      	movs	r2, #0
 801bba8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2243      	movs	r2, #67	; 0x43
 801bbae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801bbb0:	4b02      	ldr	r3, [pc, #8]	; (801bbbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	3718      	adds	r7, #24
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	bd80      	pop	{r7, pc}
 801bbba:	bf00      	nop
 801bbbc:	2000069c 	.word	0x2000069c

0801bbc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	220a      	movs	r2, #10
 801bbcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801bbce:	4b03      	ldr	r3, [pc, #12]	; (801bbdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	370c      	adds	r7, #12
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbda:	4770      	bx	lr
 801bbdc:	20000658 	.word	0x20000658

0801bbe0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801bbe0:	b480      	push	{r7}
 801bbe2:	b083      	sub	sp, #12
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	6078      	str	r0, [r7, #4]
 801bbe8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d101      	bne.n	801bbf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801bbf0:	2303      	movs	r3, #3
 801bbf2:	e009      	b.n	801bc08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801bbfa:	687a      	ldr	r2, [r7, #4]
 801bbfc:	33b0      	adds	r3, #176	; 0xb0
 801bbfe:	009b      	lsls	r3, r3, #2
 801bc00:	4413      	add	r3, r2
 801bc02:	683a      	ldr	r2, [r7, #0]
 801bc04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801bc06:	2300      	movs	r3, #0
}
 801bc08:	4618      	mov	r0, r3
 801bc0a:	370c      	adds	r7, #12
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc12:	4770      	bx	lr

0801bc14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801bc14:	b480      	push	{r7}
 801bc16:	b087      	sub	sp, #28
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	60b9      	str	r1, [r7, #8]
 801bc1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	32b0      	adds	r2, #176	; 0xb0
 801bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d101      	bne.n	801bc3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801bc36:	2303      	movs	r3, #3
 801bc38:	e008      	b.n	801bc4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801bc3a:	697b      	ldr	r3, [r7, #20]
 801bc3c:	68ba      	ldr	r2, [r7, #8]
 801bc3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801bc42:	697b      	ldr	r3, [r7, #20]
 801bc44:	687a      	ldr	r2, [r7, #4]
 801bc46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801bc4a:	2300      	movs	r3, #0
}
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	371c      	adds	r7, #28
 801bc50:	46bd      	mov	sp, r7
 801bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc56:	4770      	bx	lr

0801bc58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801bc58:	b480      	push	{r7}
 801bc5a:	b085      	sub	sp, #20
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	32b0      	adds	r2, #176	; 0xb0
 801bc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d101      	bne.n	801bc7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801bc78:	2303      	movs	r3, #3
 801bc7a:	e004      	b.n	801bc86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	683a      	ldr	r2, [r7, #0]
 801bc80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801bc84:	2300      	movs	r3, #0
}
 801bc86:	4618      	mov	r0, r3
 801bc88:	3714      	adds	r7, #20
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc90:	4770      	bx	lr
	...

0801bc94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801bc94:	b580      	push	{r7, lr}
 801bc96:	b084      	sub	sp, #16
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	32b0      	adds	r2, #176	; 0xb0
 801bca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bcaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	32b0      	adds	r2, #176	; 0xb0
 801bcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d101      	bne.n	801bcc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801bcbe:	2303      	movs	r3, #3
 801bcc0:	e018      	b.n	801bcf4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	7c1b      	ldrb	r3, [r3, #16]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d10a      	bne.n	801bce0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801bcca:	4b0c      	ldr	r3, [pc, #48]	; (801bcfc <USBD_CDC_ReceivePacket+0x68>)
 801bccc:	7819      	ldrb	r1, [r3, #0]
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bcd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f001 ff7f 	bl	801dbdc <USBD_LL_PrepareReceive>
 801bcde:	e008      	b.n	801bcf2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801bce0:	4b06      	ldr	r3, [pc, #24]	; (801bcfc <USBD_CDC_ReceivePacket+0x68>)
 801bce2:	7819      	ldrb	r1, [r3, #0]
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bcea:	2340      	movs	r3, #64	; 0x40
 801bcec:	6878      	ldr	r0, [r7, #4]
 801bcee:	f001 ff75 	bl	801dbdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801bcf2:	2300      	movs	r3, #0
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3710      	adds	r7, #16
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	200006e0 	.word	0x200006e0

0801bd00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b086      	sub	sp, #24
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	60f8      	str	r0, [r7, #12]
 801bd08:	60b9      	str	r1, [r7, #8]
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d101      	bne.n	801bd18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801bd14:	2303      	movs	r3, #3
 801bd16:	e01f      	b.n	801bd58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	2200      	movs	r2, #0
 801bd1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	2200      	movs	r2, #0
 801bd24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801bd30:	68bb      	ldr	r3, [r7, #8]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d003      	beq.n	801bd3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	68ba      	ldr	r2, [r7, #8]
 801bd3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	2201      	movs	r2, #1
 801bd42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	79fa      	ldrb	r2, [r7, #7]
 801bd4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801bd4c:	68f8      	ldr	r0, [r7, #12]
 801bd4e:	f001 fdef 	bl	801d930 <USBD_LL_Init>
 801bd52:	4603      	mov	r3, r0
 801bd54:	75fb      	strb	r3, [r7, #23]

  return ret;
 801bd56:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd58:	4618      	mov	r0, r3
 801bd5a:	3718      	adds	r7, #24
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	bd80      	pop	{r7, pc}

0801bd60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b084      	sub	sp, #16
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
 801bd68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801bd6e:	683b      	ldr	r3, [r7, #0]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d101      	bne.n	801bd78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801bd74:	2303      	movs	r3, #3
 801bd76:	e025      	b.n	801bdc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	683a      	ldr	r2, [r7, #0]
 801bd7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	32ae      	adds	r2, #174	; 0xae
 801bd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d00f      	beq.n	801bdb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	32ae      	adds	r2, #174	; 0xae
 801bd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bda4:	f107 020e 	add.w	r2, r7, #14
 801bda8:	4610      	mov	r0, r2
 801bdaa:	4798      	blx	r3
 801bdac:	4602      	mov	r2, r0
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801bdba:	1c5a      	adds	r2, r3, #1
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801bdc2:	2300      	movs	r3, #0
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	3710      	adds	r7, #16
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}

0801bdcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b082      	sub	sp, #8
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f001 fdf7 	bl	801d9c8 <USBD_LL_Start>
 801bdda:	4603      	mov	r3, r0
}
 801bddc:	4618      	mov	r0, r3
 801bdde:	3708      	adds	r7, #8
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801bde4:	b480      	push	{r7}
 801bde6:	b083      	sub	sp, #12
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801bdec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801bdee:	4618      	mov	r0, r3
 801bdf0:	370c      	adds	r7, #12
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf8:	4770      	bx	lr

0801bdfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bdfa:	b580      	push	{r7, lr}
 801bdfc:	b084      	sub	sp, #16
 801bdfe:	af00      	add	r7, sp, #0
 801be00:	6078      	str	r0, [r7, #4]
 801be02:	460b      	mov	r3, r1
 801be04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801be06:	2300      	movs	r3, #0
 801be08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be10:	2b00      	cmp	r3, #0
 801be12:	d009      	beq.n	801be28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	78fa      	ldrb	r2, [r7, #3]
 801be1e:	4611      	mov	r1, r2
 801be20:	6878      	ldr	r0, [r7, #4]
 801be22:	4798      	blx	r3
 801be24:	4603      	mov	r3, r0
 801be26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801be28:	7bfb      	ldrb	r3, [r7, #15]
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3710      	adds	r7, #16
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}

0801be32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801be32:	b580      	push	{r7, lr}
 801be34:	b084      	sub	sp, #16
 801be36:	af00      	add	r7, sp, #0
 801be38:	6078      	str	r0, [r7, #4]
 801be3a:	460b      	mov	r3, r1
 801be3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801be3e:	2300      	movs	r3, #0
 801be40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801be48:	685b      	ldr	r3, [r3, #4]
 801be4a:	78fa      	ldrb	r2, [r7, #3]
 801be4c:	4611      	mov	r1, r2
 801be4e:	6878      	ldr	r0, [r7, #4]
 801be50:	4798      	blx	r3
 801be52:	4603      	mov	r3, r0
 801be54:	2b00      	cmp	r3, #0
 801be56:	d001      	beq.n	801be5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801be58:	2303      	movs	r3, #3
 801be5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801be5e:	4618      	mov	r0, r3
 801be60:	3710      	adds	r7, #16
 801be62:	46bd      	mov	sp, r7
 801be64:	bd80      	pop	{r7, pc}

0801be66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801be66:	b580      	push	{r7, lr}
 801be68:	b084      	sub	sp, #16
 801be6a:	af00      	add	r7, sp, #0
 801be6c:	6078      	str	r0, [r7, #4]
 801be6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801be76:	6839      	ldr	r1, [r7, #0]
 801be78:	4618      	mov	r0, r3
 801be7a:	f001 f908 	bl	801d08e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	2201      	movs	r2, #1
 801be82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801be8c:	461a      	mov	r2, r3
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801be9a:	f003 031f 	and.w	r3, r3, #31
 801be9e:	2b02      	cmp	r3, #2
 801bea0:	d01a      	beq.n	801bed8 <USBD_LL_SetupStage+0x72>
 801bea2:	2b02      	cmp	r3, #2
 801bea4:	d822      	bhi.n	801beec <USBD_LL_SetupStage+0x86>
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d002      	beq.n	801beb0 <USBD_LL_SetupStage+0x4a>
 801beaa:	2b01      	cmp	r3, #1
 801beac:	d00a      	beq.n	801bec4 <USBD_LL_SetupStage+0x5e>
 801beae:	e01d      	b.n	801beec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801beb6:	4619      	mov	r1, r3
 801beb8:	6878      	ldr	r0, [r7, #4]
 801beba:	f000 fb5f 	bl	801c57c <USBD_StdDevReq>
 801bebe:	4603      	mov	r3, r0
 801bec0:	73fb      	strb	r3, [r7, #15]
      break;
 801bec2:	e020      	b.n	801bf06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801beca:	4619      	mov	r1, r3
 801becc:	6878      	ldr	r0, [r7, #4]
 801bece:	f000 fbc7 	bl	801c660 <USBD_StdItfReq>
 801bed2:	4603      	mov	r3, r0
 801bed4:	73fb      	strb	r3, [r7, #15]
      break;
 801bed6:	e016      	b.n	801bf06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801bede:	4619      	mov	r1, r3
 801bee0:	6878      	ldr	r0, [r7, #4]
 801bee2:	f000 fc29 	bl	801c738 <USBD_StdEPReq>
 801bee6:	4603      	mov	r3, r0
 801bee8:	73fb      	strb	r3, [r7, #15]
      break;
 801beea:	e00c      	b.n	801bf06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801bef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801bef6:	b2db      	uxtb	r3, r3
 801bef8:	4619      	mov	r1, r3
 801befa:	6878      	ldr	r0, [r7, #4]
 801befc:	f001 fdc4 	bl	801da88 <USBD_LL_StallEP>
 801bf00:	4603      	mov	r3, r0
 801bf02:	73fb      	strb	r3, [r7, #15]
      break;
 801bf04:	bf00      	nop
  }

  return ret;
 801bf06:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b086      	sub	sp, #24
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	60f8      	str	r0, [r7, #12]
 801bf18:	460b      	mov	r3, r1
 801bf1a:	607a      	str	r2, [r7, #4]
 801bf1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801bf1e:	2300      	movs	r3, #0
 801bf20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801bf22:	7afb      	ldrb	r3, [r7, #11]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d16e      	bne.n	801c006 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801bf2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801bf36:	2b03      	cmp	r3, #3
 801bf38:	f040 8098 	bne.w	801c06c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801bf3c:	693b      	ldr	r3, [r7, #16]
 801bf3e:	689a      	ldr	r2, [r3, #8]
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	68db      	ldr	r3, [r3, #12]
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d913      	bls.n	801bf70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801bf48:	693b      	ldr	r3, [r7, #16]
 801bf4a:	689a      	ldr	r2, [r3, #8]
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	68db      	ldr	r3, [r3, #12]
 801bf50:	1ad2      	subs	r2, r2, r3
 801bf52:	693b      	ldr	r3, [r7, #16]
 801bf54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	68da      	ldr	r2, [r3, #12]
 801bf5a:	693b      	ldr	r3, [r7, #16]
 801bf5c:	689b      	ldr	r3, [r3, #8]
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	bf28      	it	cs
 801bf62:	4613      	movcs	r3, r2
 801bf64:	461a      	mov	r2, r3
 801bf66:	6879      	ldr	r1, [r7, #4]
 801bf68:	68f8      	ldr	r0, [r7, #12]
 801bf6a:	f001 f984 	bl	801d276 <USBD_CtlContinueRx>
 801bf6e:	e07d      	b.n	801c06c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801bf76:	f003 031f 	and.w	r3, r3, #31
 801bf7a:	2b02      	cmp	r3, #2
 801bf7c:	d014      	beq.n	801bfa8 <USBD_LL_DataOutStage+0x98>
 801bf7e:	2b02      	cmp	r3, #2
 801bf80:	d81d      	bhi.n	801bfbe <USBD_LL_DataOutStage+0xae>
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d002      	beq.n	801bf8c <USBD_LL_DataOutStage+0x7c>
 801bf86:	2b01      	cmp	r3, #1
 801bf88:	d003      	beq.n	801bf92 <USBD_LL_DataOutStage+0x82>
 801bf8a:	e018      	b.n	801bfbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	75bb      	strb	r3, [r7, #22]
            break;
 801bf90:	e018      	b.n	801bfc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801bf98:	b2db      	uxtb	r3, r3
 801bf9a:	4619      	mov	r1, r3
 801bf9c:	68f8      	ldr	r0, [r7, #12]
 801bf9e:	f000 fa5e 	bl	801c45e <USBD_CoreFindIF>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	75bb      	strb	r3, [r7, #22]
            break;
 801bfa6:	e00d      	b.n	801bfc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801bfae:	b2db      	uxtb	r3, r3
 801bfb0:	4619      	mov	r1, r3
 801bfb2:	68f8      	ldr	r0, [r7, #12]
 801bfb4:	f000 fa60 	bl	801c478 <USBD_CoreFindEP>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	75bb      	strb	r3, [r7, #22]
            break;
 801bfbc:	e002      	b.n	801bfc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	75bb      	strb	r3, [r7, #22]
            break;
 801bfc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801bfc4:	7dbb      	ldrb	r3, [r7, #22]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d119      	bne.n	801bffe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bfd0:	b2db      	uxtb	r3, r3
 801bfd2:	2b03      	cmp	r3, #3
 801bfd4:	d113      	bne.n	801bffe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801bfd6:	7dba      	ldrb	r2, [r7, #22]
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	32ae      	adds	r2, #174	; 0xae
 801bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfe0:	691b      	ldr	r3, [r3, #16]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d00b      	beq.n	801bffe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801bfe6:	7dba      	ldrb	r2, [r7, #22]
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801bfee:	7dba      	ldrb	r2, [r7, #22]
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	32ae      	adds	r2, #174	; 0xae
 801bff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bff8:	691b      	ldr	r3, [r3, #16]
 801bffa:	68f8      	ldr	r0, [r7, #12]
 801bffc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801bffe:	68f8      	ldr	r0, [r7, #12]
 801c000:	f001 f94a 	bl	801d298 <USBD_CtlSendStatus>
 801c004:	e032      	b.n	801c06c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801c006:	7afb      	ldrb	r3, [r7, #11]
 801c008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c00c:	b2db      	uxtb	r3, r3
 801c00e:	4619      	mov	r1, r3
 801c010:	68f8      	ldr	r0, [r7, #12]
 801c012:	f000 fa31 	bl	801c478 <USBD_CoreFindEP>
 801c016:	4603      	mov	r3, r0
 801c018:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c01a:	7dbb      	ldrb	r3, [r7, #22]
 801c01c:	2bff      	cmp	r3, #255	; 0xff
 801c01e:	d025      	beq.n	801c06c <USBD_LL_DataOutStage+0x15c>
 801c020:	7dbb      	ldrb	r3, [r7, #22]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d122      	bne.n	801c06c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c02c:	b2db      	uxtb	r3, r3
 801c02e:	2b03      	cmp	r3, #3
 801c030:	d117      	bne.n	801c062 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801c032:	7dba      	ldrb	r2, [r7, #22]
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	32ae      	adds	r2, #174	; 0xae
 801c038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c03c:	699b      	ldr	r3, [r3, #24]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d00f      	beq.n	801c062 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801c042:	7dba      	ldrb	r2, [r7, #22]
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801c04a:	7dba      	ldrb	r2, [r7, #22]
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	32ae      	adds	r2, #174	; 0xae
 801c050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c054:	699b      	ldr	r3, [r3, #24]
 801c056:	7afa      	ldrb	r2, [r7, #11]
 801c058:	4611      	mov	r1, r2
 801c05a:	68f8      	ldr	r0, [r7, #12]
 801c05c:	4798      	blx	r3
 801c05e:	4603      	mov	r3, r0
 801c060:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801c062:	7dfb      	ldrb	r3, [r7, #23]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d001      	beq.n	801c06c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801c068:	7dfb      	ldrb	r3, [r7, #23]
 801c06a:	e000      	b.n	801c06e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801c06c:	2300      	movs	r3, #0
}
 801c06e:	4618      	mov	r0, r3
 801c070:	3718      	adds	r7, #24
 801c072:	46bd      	mov	sp, r7
 801c074:	bd80      	pop	{r7, pc}

0801c076 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c076:	b580      	push	{r7, lr}
 801c078:	b086      	sub	sp, #24
 801c07a:	af00      	add	r7, sp, #0
 801c07c:	60f8      	str	r0, [r7, #12]
 801c07e:	460b      	mov	r3, r1
 801c080:	607a      	str	r2, [r7, #4]
 801c082:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801c084:	7afb      	ldrb	r3, [r7, #11]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d16f      	bne.n	801c16a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	3314      	adds	r3, #20
 801c08e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c096:	2b02      	cmp	r3, #2
 801c098:	d15a      	bne.n	801c150 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801c09a:	693b      	ldr	r3, [r7, #16]
 801c09c:	689a      	ldr	r2, [r3, #8]
 801c09e:	693b      	ldr	r3, [r7, #16]
 801c0a0:	68db      	ldr	r3, [r3, #12]
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d914      	bls.n	801c0d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801c0a6:	693b      	ldr	r3, [r7, #16]
 801c0a8:	689a      	ldr	r2, [r3, #8]
 801c0aa:	693b      	ldr	r3, [r7, #16]
 801c0ac:	68db      	ldr	r3, [r3, #12]
 801c0ae:	1ad2      	subs	r2, r2, r3
 801c0b0:	693b      	ldr	r3, [r7, #16]
 801c0b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801c0b4:	693b      	ldr	r3, [r7, #16]
 801c0b6:	689b      	ldr	r3, [r3, #8]
 801c0b8:	461a      	mov	r2, r3
 801c0ba:	6879      	ldr	r1, [r7, #4]
 801c0bc:	68f8      	ldr	r0, [r7, #12]
 801c0be:	f001 f8ac 	bl	801d21a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	2100      	movs	r1, #0
 801c0c8:	68f8      	ldr	r0, [r7, #12]
 801c0ca:	f001 fd87 	bl	801dbdc <USBD_LL_PrepareReceive>
 801c0ce:	e03f      	b.n	801c150 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801c0d0:	693b      	ldr	r3, [r7, #16]
 801c0d2:	68da      	ldr	r2, [r3, #12]
 801c0d4:	693b      	ldr	r3, [r7, #16]
 801c0d6:	689b      	ldr	r3, [r3, #8]
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	d11c      	bne.n	801c116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801c0dc:	693b      	ldr	r3, [r7, #16]
 801c0de:	685a      	ldr	r2, [r3, #4]
 801c0e0:	693b      	ldr	r3, [r7, #16]
 801c0e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	d316      	bcc.n	801c116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801c0e8:	693b      	ldr	r3, [r7, #16]
 801c0ea:	685a      	ldr	r2, [r3, #4]
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	d20f      	bcs.n	801c116 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	2100      	movs	r1, #0
 801c0fa:	68f8      	ldr	r0, [r7, #12]
 801c0fc:	f001 f88d 	bl	801d21a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2200      	movs	r2, #0
 801c104:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c108:	2300      	movs	r3, #0
 801c10a:	2200      	movs	r2, #0
 801c10c:	2100      	movs	r1, #0
 801c10e:	68f8      	ldr	r0, [r7, #12]
 801c110:	f001 fd64 	bl	801dbdc <USBD_LL_PrepareReceive>
 801c114:	e01c      	b.n	801c150 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	2b03      	cmp	r3, #3
 801c120:	d10f      	bne.n	801c142 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c128:	68db      	ldr	r3, [r3, #12]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d009      	beq.n	801c142 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	2200      	movs	r2, #0
 801c132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c13c:	68db      	ldr	r3, [r3, #12]
 801c13e:	68f8      	ldr	r0, [r7, #12]
 801c140:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801c142:	2180      	movs	r1, #128	; 0x80
 801c144:	68f8      	ldr	r0, [r7, #12]
 801c146:	f001 fc9f 	bl	801da88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801c14a:	68f8      	ldr	r0, [r7, #12]
 801c14c:	f001 f8b7 	bl	801d2be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801c156:	2b00      	cmp	r3, #0
 801c158:	d03a      	beq.n	801c1d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801c15a:	68f8      	ldr	r0, [r7, #12]
 801c15c:	f7ff fe42 	bl	801bde4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	2200      	movs	r2, #0
 801c164:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801c168:	e032      	b.n	801c1d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801c16a:	7afb      	ldrb	r3, [r7, #11]
 801c16c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c170:	b2db      	uxtb	r3, r3
 801c172:	4619      	mov	r1, r3
 801c174:	68f8      	ldr	r0, [r7, #12]
 801c176:	f000 f97f 	bl	801c478 <USBD_CoreFindEP>
 801c17a:	4603      	mov	r3, r0
 801c17c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c17e:	7dfb      	ldrb	r3, [r7, #23]
 801c180:	2bff      	cmp	r3, #255	; 0xff
 801c182:	d025      	beq.n	801c1d0 <USBD_LL_DataInStage+0x15a>
 801c184:	7dfb      	ldrb	r3, [r7, #23]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d122      	bne.n	801c1d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c190:	b2db      	uxtb	r3, r3
 801c192:	2b03      	cmp	r3, #3
 801c194:	d11c      	bne.n	801c1d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801c196:	7dfa      	ldrb	r2, [r7, #23]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	32ae      	adds	r2, #174	; 0xae
 801c19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c1a0:	695b      	ldr	r3, [r3, #20]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d014      	beq.n	801c1d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801c1a6:	7dfa      	ldrb	r2, [r7, #23]
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801c1ae:	7dfa      	ldrb	r2, [r7, #23]
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	32ae      	adds	r2, #174	; 0xae
 801c1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c1b8:	695b      	ldr	r3, [r3, #20]
 801c1ba:	7afa      	ldrb	r2, [r7, #11]
 801c1bc:	4611      	mov	r1, r2
 801c1be:	68f8      	ldr	r0, [r7, #12]
 801c1c0:	4798      	blx	r3
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801c1c6:	7dbb      	ldrb	r3, [r7, #22]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d001      	beq.n	801c1d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801c1cc:	7dbb      	ldrb	r3, [r7, #22]
 801c1ce:	e000      	b.n	801c1d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801c1d0:	2300      	movs	r3, #0
}
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	3718      	adds	r7, #24
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}

0801c1da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c1da:	b580      	push	{r7, lr}
 801c1dc:	b084      	sub	sp, #16
 801c1de:	af00      	add	r7, sp, #0
 801c1e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	2201      	movs	r2, #1
 801c1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	2200      	movs	r2, #0
 801c200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	2200      	movs	r2, #0
 801c208:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c212:	2b00      	cmp	r3, #0
 801c214:	d014      	beq.n	801c240 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c21c:	685b      	ldr	r3, [r3, #4]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d00e      	beq.n	801c240 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c228:	685b      	ldr	r3, [r3, #4]
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	6852      	ldr	r2, [r2, #4]
 801c22e:	b2d2      	uxtb	r2, r2
 801c230:	4611      	mov	r1, r2
 801c232:	6878      	ldr	r0, [r7, #4]
 801c234:	4798      	blx	r3
 801c236:	4603      	mov	r3, r0
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d001      	beq.n	801c240 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801c23c:	2303      	movs	r3, #3
 801c23e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c240:	2340      	movs	r3, #64	; 0x40
 801c242:	2200      	movs	r2, #0
 801c244:	2100      	movs	r1, #0
 801c246:	6878      	ldr	r0, [r7, #4]
 801c248:	f001 fbd9 	bl	801d9fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	2201      	movs	r2, #1
 801c250:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2240      	movs	r2, #64	; 0x40
 801c258:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c25c:	2340      	movs	r3, #64	; 0x40
 801c25e:	2200      	movs	r2, #0
 801c260:	2180      	movs	r1, #128	; 0x80
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	f001 fbcb 	bl	801d9fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	2201      	movs	r2, #1
 801c26c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	2240      	movs	r2, #64	; 0x40
 801c272:	621a      	str	r2, [r3, #32]

  return ret;
 801c274:	7bfb      	ldrb	r3, [r7, #15]
}
 801c276:	4618      	mov	r0, r3
 801c278:	3710      	adds	r7, #16
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}

0801c27e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c27e:	b480      	push	{r7}
 801c280:	b083      	sub	sp, #12
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
 801c286:	460b      	mov	r3, r1
 801c288:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	78fa      	ldrb	r2, [r7, #3]
 801c28e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c290:	2300      	movs	r3, #0
}
 801c292:	4618      	mov	r0, r3
 801c294:	370c      	adds	r7, #12
 801c296:	46bd      	mov	sp, r7
 801c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c29c:	4770      	bx	lr

0801c29e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c29e:	b480      	push	{r7}
 801c2a0:	b083      	sub	sp, #12
 801c2a2:	af00      	add	r7, sp, #0
 801c2a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	2204      	movs	r2, #4
 801c2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801c2bc:	2300      	movs	r3, #0
}
 801c2be:	4618      	mov	r0, r3
 801c2c0:	370c      	adds	r7, #12
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c8:	4770      	bx	lr

0801c2ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c2ca:	b480      	push	{r7}
 801c2cc:	b083      	sub	sp, #12
 801c2ce:	af00      	add	r7, sp, #0
 801c2d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c2d8:	b2db      	uxtb	r3, r3
 801c2da:	2b04      	cmp	r3, #4
 801c2dc:	d106      	bne.n	801c2ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801c2e4:	b2da      	uxtb	r2, r3
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801c2ec:	2300      	movs	r3, #0
}
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	370c      	adds	r7, #12
 801c2f2:	46bd      	mov	sp, r7
 801c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f8:	4770      	bx	lr

0801c2fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c2fa:	b580      	push	{r7, lr}
 801c2fc:	b082      	sub	sp, #8
 801c2fe:	af00      	add	r7, sp, #0
 801c300:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c308:	b2db      	uxtb	r3, r3
 801c30a:	2b03      	cmp	r3, #3
 801c30c:	d110      	bne.n	801c330 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c314:	2b00      	cmp	r3, #0
 801c316:	d00b      	beq.n	801c330 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c31e:	69db      	ldr	r3, [r3, #28]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d005      	beq.n	801c330 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c32a:	69db      	ldr	r3, [r3, #28]
 801c32c:	6878      	ldr	r0, [r7, #4]
 801c32e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801c330:	2300      	movs	r3, #0
}
 801c332:	4618      	mov	r0, r3
 801c334:	3708      	adds	r7, #8
 801c336:	46bd      	mov	sp, r7
 801c338:	bd80      	pop	{r7, pc}

0801c33a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801c33a:	b580      	push	{r7, lr}
 801c33c:	b082      	sub	sp, #8
 801c33e:	af00      	add	r7, sp, #0
 801c340:	6078      	str	r0, [r7, #4]
 801c342:	460b      	mov	r3, r1
 801c344:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	32ae      	adds	r2, #174	; 0xae
 801c350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d101      	bne.n	801c35c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801c358:	2303      	movs	r3, #3
 801c35a:	e01c      	b.n	801c396 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c362:	b2db      	uxtb	r3, r3
 801c364:	2b03      	cmp	r3, #3
 801c366:	d115      	bne.n	801c394 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	32ae      	adds	r2, #174	; 0xae
 801c372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c376:	6a1b      	ldr	r3, [r3, #32]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d00b      	beq.n	801c394 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	32ae      	adds	r2, #174	; 0xae
 801c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c38a:	6a1b      	ldr	r3, [r3, #32]
 801c38c:	78fa      	ldrb	r2, [r7, #3]
 801c38e:	4611      	mov	r1, r2
 801c390:	6878      	ldr	r0, [r7, #4]
 801c392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c394:	2300      	movs	r3, #0
}
 801c396:	4618      	mov	r0, r3
 801c398:	3708      	adds	r7, #8
 801c39a:	46bd      	mov	sp, r7
 801c39c:	bd80      	pop	{r7, pc}

0801c39e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801c39e:	b580      	push	{r7, lr}
 801c3a0:	b082      	sub	sp, #8
 801c3a2:	af00      	add	r7, sp, #0
 801c3a4:	6078      	str	r0, [r7, #4]
 801c3a6:	460b      	mov	r3, r1
 801c3a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	32ae      	adds	r2, #174	; 0xae
 801c3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d101      	bne.n	801c3c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801c3bc:	2303      	movs	r3, #3
 801c3be:	e01c      	b.n	801c3fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c3c6:	b2db      	uxtb	r3, r3
 801c3c8:	2b03      	cmp	r3, #3
 801c3ca:	d115      	bne.n	801c3f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	32ae      	adds	r2, #174	; 0xae
 801c3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d00b      	beq.n	801c3f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	32ae      	adds	r2, #174	; 0xae
 801c3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3f0:	78fa      	ldrb	r2, [r7, #3]
 801c3f2:	4611      	mov	r1, r2
 801c3f4:	6878      	ldr	r0, [r7, #4]
 801c3f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c3f8:	2300      	movs	r3, #0
}
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	3708      	adds	r7, #8
 801c3fe:	46bd      	mov	sp, r7
 801c400:	bd80      	pop	{r7, pc}

0801c402 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801c402:	b480      	push	{r7}
 801c404:	b083      	sub	sp, #12
 801c406:	af00      	add	r7, sp, #0
 801c408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c40a:	2300      	movs	r3, #0
}
 801c40c:	4618      	mov	r0, r3
 801c40e:	370c      	adds	r7, #12
 801c410:	46bd      	mov	sp, r7
 801c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c416:	4770      	bx	lr

0801c418 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801c418:	b580      	push	{r7, lr}
 801c41a:	b084      	sub	sp, #16
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801c420:	2300      	movs	r3, #0
 801c422:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	2201      	movs	r2, #1
 801c428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c432:	2b00      	cmp	r3, #0
 801c434:	d00e      	beq.n	801c454 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c43c:	685b      	ldr	r3, [r3, #4]
 801c43e:	687a      	ldr	r2, [r7, #4]
 801c440:	6852      	ldr	r2, [r2, #4]
 801c442:	b2d2      	uxtb	r2, r2
 801c444:	4611      	mov	r1, r2
 801c446:	6878      	ldr	r0, [r7, #4]
 801c448:	4798      	blx	r3
 801c44a:	4603      	mov	r3, r0
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d001      	beq.n	801c454 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801c450:	2303      	movs	r3, #3
 801c452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801c454:	7bfb      	ldrb	r3, [r7, #15]
}
 801c456:	4618      	mov	r0, r3
 801c458:	3710      	adds	r7, #16
 801c45a:	46bd      	mov	sp, r7
 801c45c:	bd80      	pop	{r7, pc}

0801c45e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801c45e:	b480      	push	{r7}
 801c460:	b083      	sub	sp, #12
 801c462:	af00      	add	r7, sp, #0
 801c464:	6078      	str	r0, [r7, #4]
 801c466:	460b      	mov	r3, r1
 801c468:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801c46a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	370c      	adds	r7, #12
 801c470:	46bd      	mov	sp, r7
 801c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c476:	4770      	bx	lr

0801c478 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801c478:	b480      	push	{r7}
 801c47a:	b083      	sub	sp, #12
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
 801c480:	460b      	mov	r3, r1
 801c482:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801c484:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801c486:	4618      	mov	r0, r3
 801c488:	370c      	adds	r7, #12
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr

0801c492 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801c492:	b580      	push	{r7, lr}
 801c494:	b086      	sub	sp, #24
 801c496:	af00      	add	r7, sp, #0
 801c498:	6078      	str	r0, [r7, #4]
 801c49a:	460b      	mov	r3, r1
 801c49c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	885b      	ldrh	r3, [r3, #2]
 801c4ae:	b29a      	uxth	r2, r3
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	781b      	ldrb	r3, [r3, #0]
 801c4b4:	b29b      	uxth	r3, r3
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d920      	bls.n	801c4fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	781b      	ldrb	r3, [r3, #0]
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801c4c2:	e013      	b.n	801c4ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801c4c4:	f107 030a 	add.w	r3, r7, #10
 801c4c8:	4619      	mov	r1, r3
 801c4ca:	6978      	ldr	r0, [r7, #20]
 801c4cc:	f000 f81b 	bl	801c506 <USBD_GetNextDesc>
 801c4d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801c4d2:	697b      	ldr	r3, [r7, #20]
 801c4d4:	785b      	ldrb	r3, [r3, #1]
 801c4d6:	2b05      	cmp	r3, #5
 801c4d8:	d108      	bne.n	801c4ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801c4da:	697b      	ldr	r3, [r7, #20]
 801c4dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801c4de:	693b      	ldr	r3, [r7, #16]
 801c4e0:	789b      	ldrb	r3, [r3, #2]
 801c4e2:	78fa      	ldrb	r2, [r7, #3]
 801c4e4:	429a      	cmp	r2, r3
 801c4e6:	d008      	beq.n	801c4fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	885b      	ldrh	r3, [r3, #2]
 801c4f0:	b29a      	uxth	r2, r3
 801c4f2:	897b      	ldrh	r3, [r7, #10]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d8e5      	bhi.n	801c4c4 <USBD_GetEpDesc+0x32>
 801c4f8:	e000      	b.n	801c4fc <USBD_GetEpDesc+0x6a>
          break;
 801c4fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801c4fc:	693b      	ldr	r3, [r7, #16]
}
 801c4fe:	4618      	mov	r0, r3
 801c500:	3718      	adds	r7, #24
 801c502:	46bd      	mov	sp, r7
 801c504:	bd80      	pop	{r7, pc}

0801c506 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801c506:	b480      	push	{r7}
 801c508:	b085      	sub	sp, #20
 801c50a:	af00      	add	r7, sp, #0
 801c50c:	6078      	str	r0, [r7, #4]
 801c50e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801c514:	683b      	ldr	r3, [r7, #0]
 801c516:	881a      	ldrh	r2, [r3, #0]
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	781b      	ldrb	r3, [r3, #0]
 801c51c:	b29b      	uxth	r3, r3
 801c51e:	4413      	add	r3, r2
 801c520:	b29a      	uxth	r2, r3
 801c522:	683b      	ldr	r3, [r7, #0]
 801c524:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	781b      	ldrb	r3, [r3, #0]
 801c52a:	461a      	mov	r2, r3
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	4413      	add	r3, r2
 801c530:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801c532:	68fb      	ldr	r3, [r7, #12]
}
 801c534:	4618      	mov	r0, r3
 801c536:	3714      	adds	r7, #20
 801c538:	46bd      	mov	sp, r7
 801c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c53e:	4770      	bx	lr

0801c540 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801c540:	b480      	push	{r7}
 801c542:	b087      	sub	sp, #28
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801c54c:	697b      	ldr	r3, [r7, #20]
 801c54e:	781b      	ldrb	r3, [r3, #0]
 801c550:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	3301      	adds	r3, #1
 801c556:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801c55e:	8a3b      	ldrh	r3, [r7, #16]
 801c560:	021b      	lsls	r3, r3, #8
 801c562:	b21a      	sxth	r2, r3
 801c564:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c568:	4313      	orrs	r3, r2
 801c56a:	b21b      	sxth	r3, r3
 801c56c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801c56e:	89fb      	ldrh	r3, [r7, #14]
}
 801c570:	4618      	mov	r0, r3
 801c572:	371c      	adds	r7, #28
 801c574:	46bd      	mov	sp, r7
 801c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c57a:	4770      	bx	lr

0801c57c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b084      	sub	sp, #16
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c586:	2300      	movs	r3, #0
 801c588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c58a:	683b      	ldr	r3, [r7, #0]
 801c58c:	781b      	ldrb	r3, [r3, #0]
 801c58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c592:	2b40      	cmp	r3, #64	; 0x40
 801c594:	d005      	beq.n	801c5a2 <USBD_StdDevReq+0x26>
 801c596:	2b40      	cmp	r3, #64	; 0x40
 801c598:	d857      	bhi.n	801c64a <USBD_StdDevReq+0xce>
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d00f      	beq.n	801c5be <USBD_StdDevReq+0x42>
 801c59e:	2b20      	cmp	r3, #32
 801c5a0:	d153      	bne.n	801c64a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	32ae      	adds	r2, #174	; 0xae
 801c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c5b0:	689b      	ldr	r3, [r3, #8]
 801c5b2:	6839      	ldr	r1, [r7, #0]
 801c5b4:	6878      	ldr	r0, [r7, #4]
 801c5b6:	4798      	blx	r3
 801c5b8:	4603      	mov	r3, r0
 801c5ba:	73fb      	strb	r3, [r7, #15]
      break;
 801c5bc:	e04a      	b.n	801c654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c5be:	683b      	ldr	r3, [r7, #0]
 801c5c0:	785b      	ldrb	r3, [r3, #1]
 801c5c2:	2b09      	cmp	r3, #9
 801c5c4:	d83b      	bhi.n	801c63e <USBD_StdDevReq+0xc2>
 801c5c6:	a201      	add	r2, pc, #4	; (adr r2, 801c5cc <USBD_StdDevReq+0x50>)
 801c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5cc:	0801c621 	.word	0x0801c621
 801c5d0:	0801c635 	.word	0x0801c635
 801c5d4:	0801c63f 	.word	0x0801c63f
 801c5d8:	0801c62b 	.word	0x0801c62b
 801c5dc:	0801c63f 	.word	0x0801c63f
 801c5e0:	0801c5ff 	.word	0x0801c5ff
 801c5e4:	0801c5f5 	.word	0x0801c5f5
 801c5e8:	0801c63f 	.word	0x0801c63f
 801c5ec:	0801c617 	.word	0x0801c617
 801c5f0:	0801c609 	.word	0x0801c609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c5f4:	6839      	ldr	r1, [r7, #0]
 801c5f6:	6878      	ldr	r0, [r7, #4]
 801c5f8:	f000 fa3c 	bl	801ca74 <USBD_GetDescriptor>
          break;
 801c5fc:	e024      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c5fe:	6839      	ldr	r1, [r7, #0]
 801c600:	6878      	ldr	r0, [r7, #4]
 801c602:	f000 fba1 	bl	801cd48 <USBD_SetAddress>
          break;
 801c606:	e01f      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801c608:	6839      	ldr	r1, [r7, #0]
 801c60a:	6878      	ldr	r0, [r7, #4]
 801c60c:	f000 fbe0 	bl	801cdd0 <USBD_SetConfig>
 801c610:	4603      	mov	r3, r0
 801c612:	73fb      	strb	r3, [r7, #15]
          break;
 801c614:	e018      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c616:	6839      	ldr	r1, [r7, #0]
 801c618:	6878      	ldr	r0, [r7, #4]
 801c61a:	f000 fc83 	bl	801cf24 <USBD_GetConfig>
          break;
 801c61e:	e013      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c620:	6839      	ldr	r1, [r7, #0]
 801c622:	6878      	ldr	r0, [r7, #4]
 801c624:	f000 fcb4 	bl	801cf90 <USBD_GetStatus>
          break;
 801c628:	e00e      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c62a:	6839      	ldr	r1, [r7, #0]
 801c62c:	6878      	ldr	r0, [r7, #4]
 801c62e:	f000 fce3 	bl	801cff8 <USBD_SetFeature>
          break;
 801c632:	e009      	b.n	801c648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c634:	6839      	ldr	r1, [r7, #0]
 801c636:	6878      	ldr	r0, [r7, #4]
 801c638:	f000 fd07 	bl	801d04a <USBD_ClrFeature>
          break;
 801c63c:	e004      	b.n	801c648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801c63e:	6839      	ldr	r1, [r7, #0]
 801c640:	6878      	ldr	r0, [r7, #4]
 801c642:	f000 fd5e 	bl	801d102 <USBD_CtlError>
          break;
 801c646:	bf00      	nop
      }
      break;
 801c648:	e004      	b.n	801c654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801c64a:	6839      	ldr	r1, [r7, #0]
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	f000 fd58 	bl	801d102 <USBD_CtlError>
      break;
 801c652:	bf00      	nop
  }

  return ret;
 801c654:	7bfb      	ldrb	r3, [r7, #15]
}
 801c656:	4618      	mov	r0, r3
 801c658:	3710      	adds	r7, #16
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	bf00      	nop

0801c660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b084      	sub	sp, #16
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
 801c668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c66a:	2300      	movs	r3, #0
 801c66c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	781b      	ldrb	r3, [r3, #0]
 801c672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c676:	2b40      	cmp	r3, #64	; 0x40
 801c678:	d005      	beq.n	801c686 <USBD_StdItfReq+0x26>
 801c67a:	2b40      	cmp	r3, #64	; 0x40
 801c67c:	d852      	bhi.n	801c724 <USBD_StdItfReq+0xc4>
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d001      	beq.n	801c686 <USBD_StdItfReq+0x26>
 801c682:	2b20      	cmp	r3, #32
 801c684:	d14e      	bne.n	801c724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c68c:	b2db      	uxtb	r3, r3
 801c68e:	3b01      	subs	r3, #1
 801c690:	2b02      	cmp	r3, #2
 801c692:	d840      	bhi.n	801c716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c694:	683b      	ldr	r3, [r7, #0]
 801c696:	889b      	ldrh	r3, [r3, #4]
 801c698:	b2db      	uxtb	r3, r3
 801c69a:	2b01      	cmp	r3, #1
 801c69c:	d836      	bhi.n	801c70c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801c69e:	683b      	ldr	r3, [r7, #0]
 801c6a0:	889b      	ldrh	r3, [r3, #4]
 801c6a2:	b2db      	uxtb	r3, r3
 801c6a4:	4619      	mov	r1, r3
 801c6a6:	6878      	ldr	r0, [r7, #4]
 801c6a8:	f7ff fed9 	bl	801c45e <USBD_CoreFindIF>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c6b0:	7bbb      	ldrb	r3, [r7, #14]
 801c6b2:	2bff      	cmp	r3, #255	; 0xff
 801c6b4:	d01d      	beq.n	801c6f2 <USBD_StdItfReq+0x92>
 801c6b6:	7bbb      	ldrb	r3, [r7, #14]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d11a      	bne.n	801c6f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801c6bc:	7bba      	ldrb	r2, [r7, #14]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	32ae      	adds	r2, #174	; 0xae
 801c6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c6c6:	689b      	ldr	r3, [r3, #8]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d00f      	beq.n	801c6ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801c6cc:	7bba      	ldrb	r2, [r7, #14]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801c6d4:	7bba      	ldrb	r2, [r7, #14]
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	32ae      	adds	r2, #174	; 0xae
 801c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c6de:	689b      	ldr	r3, [r3, #8]
 801c6e0:	6839      	ldr	r1, [r7, #0]
 801c6e2:	6878      	ldr	r0, [r7, #4]
 801c6e4:	4798      	blx	r3
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801c6ea:	e004      	b.n	801c6f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801c6ec:	2303      	movs	r3, #3
 801c6ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801c6f0:	e001      	b.n	801c6f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801c6f2:	2303      	movs	r3, #3
 801c6f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c6f6:	683b      	ldr	r3, [r7, #0]
 801c6f8:	88db      	ldrh	r3, [r3, #6]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d110      	bne.n	801c720 <USBD_StdItfReq+0xc0>
 801c6fe:	7bfb      	ldrb	r3, [r7, #15]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d10d      	bne.n	801c720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801c704:	6878      	ldr	r0, [r7, #4]
 801c706:	f000 fdc7 	bl	801d298 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c70a:	e009      	b.n	801c720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801c70c:	6839      	ldr	r1, [r7, #0]
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f000 fcf7 	bl	801d102 <USBD_CtlError>
          break;
 801c714:	e004      	b.n	801c720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c716:	6839      	ldr	r1, [r7, #0]
 801c718:	6878      	ldr	r0, [r7, #4]
 801c71a:	f000 fcf2 	bl	801d102 <USBD_CtlError>
          break;
 801c71e:	e000      	b.n	801c722 <USBD_StdItfReq+0xc2>
          break;
 801c720:	bf00      	nop
      }
      break;
 801c722:	e004      	b.n	801c72e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801c724:	6839      	ldr	r1, [r7, #0]
 801c726:	6878      	ldr	r0, [r7, #4]
 801c728:	f000 fceb 	bl	801d102 <USBD_CtlError>
      break;
 801c72c:	bf00      	nop
  }

  return ret;
 801c72e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c730:	4618      	mov	r0, r3
 801c732:	3710      	adds	r7, #16
 801c734:	46bd      	mov	sp, r7
 801c736:	bd80      	pop	{r7, pc}

0801c738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c738:	b580      	push	{r7, lr}
 801c73a:	b084      	sub	sp, #16
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	6078      	str	r0, [r7, #4]
 801c740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801c742:	2300      	movs	r3, #0
 801c744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	889b      	ldrh	r3, [r3, #4]
 801c74a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	781b      	ldrb	r3, [r3, #0]
 801c750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c754:	2b40      	cmp	r3, #64	; 0x40
 801c756:	d007      	beq.n	801c768 <USBD_StdEPReq+0x30>
 801c758:	2b40      	cmp	r3, #64	; 0x40
 801c75a:	f200 817f 	bhi.w	801ca5c <USBD_StdEPReq+0x324>
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d02a      	beq.n	801c7b8 <USBD_StdEPReq+0x80>
 801c762:	2b20      	cmp	r3, #32
 801c764:	f040 817a 	bne.w	801ca5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801c768:	7bbb      	ldrb	r3, [r7, #14]
 801c76a:	4619      	mov	r1, r3
 801c76c:	6878      	ldr	r0, [r7, #4]
 801c76e:	f7ff fe83 	bl	801c478 <USBD_CoreFindEP>
 801c772:	4603      	mov	r3, r0
 801c774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c776:	7b7b      	ldrb	r3, [r7, #13]
 801c778:	2bff      	cmp	r3, #255	; 0xff
 801c77a:	f000 8174 	beq.w	801ca66 <USBD_StdEPReq+0x32e>
 801c77e:	7b7b      	ldrb	r3, [r7, #13]
 801c780:	2b00      	cmp	r3, #0
 801c782:	f040 8170 	bne.w	801ca66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801c786:	7b7a      	ldrb	r2, [r7, #13]
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801c78e:	7b7a      	ldrb	r2, [r7, #13]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	32ae      	adds	r2, #174	; 0xae
 801c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c798:	689b      	ldr	r3, [r3, #8]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	f000 8163 	beq.w	801ca66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801c7a0:	7b7a      	ldrb	r2, [r7, #13]
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	32ae      	adds	r2, #174	; 0xae
 801c7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7aa:	689b      	ldr	r3, [r3, #8]
 801c7ac:	6839      	ldr	r1, [r7, #0]
 801c7ae:	6878      	ldr	r0, [r7, #4]
 801c7b0:	4798      	blx	r3
 801c7b2:	4603      	mov	r3, r0
 801c7b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801c7b6:	e156      	b.n	801ca66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c7b8:	683b      	ldr	r3, [r7, #0]
 801c7ba:	785b      	ldrb	r3, [r3, #1]
 801c7bc:	2b03      	cmp	r3, #3
 801c7be:	d008      	beq.n	801c7d2 <USBD_StdEPReq+0x9a>
 801c7c0:	2b03      	cmp	r3, #3
 801c7c2:	f300 8145 	bgt.w	801ca50 <USBD_StdEPReq+0x318>
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	f000 809b 	beq.w	801c902 <USBD_StdEPReq+0x1ca>
 801c7cc:	2b01      	cmp	r3, #1
 801c7ce:	d03c      	beq.n	801c84a <USBD_StdEPReq+0x112>
 801c7d0:	e13e      	b.n	801ca50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c7d8:	b2db      	uxtb	r3, r3
 801c7da:	2b02      	cmp	r3, #2
 801c7dc:	d002      	beq.n	801c7e4 <USBD_StdEPReq+0xac>
 801c7de:	2b03      	cmp	r3, #3
 801c7e0:	d016      	beq.n	801c810 <USBD_StdEPReq+0xd8>
 801c7e2:	e02c      	b.n	801c83e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c7e4:	7bbb      	ldrb	r3, [r7, #14]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d00d      	beq.n	801c806 <USBD_StdEPReq+0xce>
 801c7ea:	7bbb      	ldrb	r3, [r7, #14]
 801c7ec:	2b80      	cmp	r3, #128	; 0x80
 801c7ee:	d00a      	beq.n	801c806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801c7f0:	7bbb      	ldrb	r3, [r7, #14]
 801c7f2:	4619      	mov	r1, r3
 801c7f4:	6878      	ldr	r0, [r7, #4]
 801c7f6:	f001 f947 	bl	801da88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801c7fa:	2180      	movs	r1, #128	; 0x80
 801c7fc:	6878      	ldr	r0, [r7, #4]
 801c7fe:	f001 f943 	bl	801da88 <USBD_LL_StallEP>
 801c802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c804:	e020      	b.n	801c848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801c806:	6839      	ldr	r1, [r7, #0]
 801c808:	6878      	ldr	r0, [r7, #4]
 801c80a:	f000 fc7a 	bl	801d102 <USBD_CtlError>
              break;
 801c80e:	e01b      	b.n	801c848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	885b      	ldrh	r3, [r3, #2]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d10e      	bne.n	801c836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c818:	7bbb      	ldrb	r3, [r7, #14]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d00b      	beq.n	801c836 <USBD_StdEPReq+0xfe>
 801c81e:	7bbb      	ldrb	r3, [r7, #14]
 801c820:	2b80      	cmp	r3, #128	; 0x80
 801c822:	d008      	beq.n	801c836 <USBD_StdEPReq+0xfe>
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	88db      	ldrh	r3, [r3, #6]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d104      	bne.n	801c836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801c82c:	7bbb      	ldrb	r3, [r7, #14]
 801c82e:	4619      	mov	r1, r3
 801c830:	6878      	ldr	r0, [r7, #4]
 801c832:	f001 f929 	bl	801da88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801c836:	6878      	ldr	r0, [r7, #4]
 801c838:	f000 fd2e 	bl	801d298 <USBD_CtlSendStatus>

              break;
 801c83c:	e004      	b.n	801c848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801c83e:	6839      	ldr	r1, [r7, #0]
 801c840:	6878      	ldr	r0, [r7, #4]
 801c842:	f000 fc5e 	bl	801d102 <USBD_CtlError>
              break;
 801c846:	bf00      	nop
          }
          break;
 801c848:	e107      	b.n	801ca5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c850:	b2db      	uxtb	r3, r3
 801c852:	2b02      	cmp	r3, #2
 801c854:	d002      	beq.n	801c85c <USBD_StdEPReq+0x124>
 801c856:	2b03      	cmp	r3, #3
 801c858:	d016      	beq.n	801c888 <USBD_StdEPReq+0x150>
 801c85a:	e04b      	b.n	801c8f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c85c:	7bbb      	ldrb	r3, [r7, #14]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d00d      	beq.n	801c87e <USBD_StdEPReq+0x146>
 801c862:	7bbb      	ldrb	r3, [r7, #14]
 801c864:	2b80      	cmp	r3, #128	; 0x80
 801c866:	d00a      	beq.n	801c87e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801c868:	7bbb      	ldrb	r3, [r7, #14]
 801c86a:	4619      	mov	r1, r3
 801c86c:	6878      	ldr	r0, [r7, #4]
 801c86e:	f001 f90b 	bl	801da88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801c872:	2180      	movs	r1, #128	; 0x80
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f001 f907 	bl	801da88 <USBD_LL_StallEP>
 801c87a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c87c:	e040      	b.n	801c900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801c87e:	6839      	ldr	r1, [r7, #0]
 801c880:	6878      	ldr	r0, [r7, #4]
 801c882:	f000 fc3e 	bl	801d102 <USBD_CtlError>
              break;
 801c886:	e03b      	b.n	801c900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c888:	683b      	ldr	r3, [r7, #0]
 801c88a:	885b      	ldrh	r3, [r3, #2]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d136      	bne.n	801c8fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c890:	7bbb      	ldrb	r3, [r7, #14]
 801c892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c896:	2b00      	cmp	r3, #0
 801c898:	d004      	beq.n	801c8a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801c89a:	7bbb      	ldrb	r3, [r7, #14]
 801c89c:	4619      	mov	r1, r3
 801c89e:	6878      	ldr	r0, [r7, #4]
 801c8a0:	f001 f911 	bl	801dac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801c8a4:	6878      	ldr	r0, [r7, #4]
 801c8a6:	f000 fcf7 	bl	801d298 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801c8aa:	7bbb      	ldrb	r3, [r7, #14]
 801c8ac:	4619      	mov	r1, r3
 801c8ae:	6878      	ldr	r0, [r7, #4]
 801c8b0:	f7ff fde2 	bl	801c478 <USBD_CoreFindEP>
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c8b8:	7b7b      	ldrb	r3, [r7, #13]
 801c8ba:	2bff      	cmp	r3, #255	; 0xff
 801c8bc:	d01f      	beq.n	801c8fe <USBD_StdEPReq+0x1c6>
 801c8be:	7b7b      	ldrb	r3, [r7, #13]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d11c      	bne.n	801c8fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801c8c4:	7b7a      	ldrb	r2, [r7, #13]
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801c8cc:	7b7a      	ldrb	r2, [r7, #13]
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	32ae      	adds	r2, #174	; 0xae
 801c8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8d6:	689b      	ldr	r3, [r3, #8]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d010      	beq.n	801c8fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801c8dc:	7b7a      	ldrb	r2, [r7, #13]
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	32ae      	adds	r2, #174	; 0xae
 801c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8e6:	689b      	ldr	r3, [r3, #8]
 801c8e8:	6839      	ldr	r1, [r7, #0]
 801c8ea:	6878      	ldr	r0, [r7, #4]
 801c8ec:	4798      	blx	r3
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801c8f2:	e004      	b.n	801c8fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801c8f4:	6839      	ldr	r1, [r7, #0]
 801c8f6:	6878      	ldr	r0, [r7, #4]
 801c8f8:	f000 fc03 	bl	801d102 <USBD_CtlError>
              break;
 801c8fc:	e000      	b.n	801c900 <USBD_StdEPReq+0x1c8>
              break;
 801c8fe:	bf00      	nop
          }
          break;
 801c900:	e0ab      	b.n	801ca5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c908:	b2db      	uxtb	r3, r3
 801c90a:	2b02      	cmp	r3, #2
 801c90c:	d002      	beq.n	801c914 <USBD_StdEPReq+0x1dc>
 801c90e:	2b03      	cmp	r3, #3
 801c910:	d032      	beq.n	801c978 <USBD_StdEPReq+0x240>
 801c912:	e097      	b.n	801ca44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c914:	7bbb      	ldrb	r3, [r7, #14]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d007      	beq.n	801c92a <USBD_StdEPReq+0x1f2>
 801c91a:	7bbb      	ldrb	r3, [r7, #14]
 801c91c:	2b80      	cmp	r3, #128	; 0x80
 801c91e:	d004      	beq.n	801c92a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801c920:	6839      	ldr	r1, [r7, #0]
 801c922:	6878      	ldr	r0, [r7, #4]
 801c924:	f000 fbed 	bl	801d102 <USBD_CtlError>
                break;
 801c928:	e091      	b.n	801ca4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c92a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	da0b      	bge.n	801c94a <USBD_StdEPReq+0x212>
 801c932:	7bbb      	ldrb	r3, [r7, #14]
 801c934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c938:	4613      	mov	r3, r2
 801c93a:	009b      	lsls	r3, r3, #2
 801c93c:	4413      	add	r3, r2
 801c93e:	009b      	lsls	r3, r3, #2
 801c940:	3310      	adds	r3, #16
 801c942:	687a      	ldr	r2, [r7, #4]
 801c944:	4413      	add	r3, r2
 801c946:	3304      	adds	r3, #4
 801c948:	e00b      	b.n	801c962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c94a:	7bbb      	ldrb	r3, [r7, #14]
 801c94c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c950:	4613      	mov	r3, r2
 801c952:	009b      	lsls	r3, r3, #2
 801c954:	4413      	add	r3, r2
 801c956:	009b      	lsls	r3, r3, #2
 801c958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801c95c:	687a      	ldr	r2, [r7, #4]
 801c95e:	4413      	add	r3, r2
 801c960:	3304      	adds	r3, #4
 801c962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c964:	68bb      	ldr	r3, [r7, #8]
 801c966:	2200      	movs	r2, #0
 801c968:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801c96a:	68bb      	ldr	r3, [r7, #8]
 801c96c:	2202      	movs	r2, #2
 801c96e:	4619      	mov	r1, r3
 801c970:	6878      	ldr	r0, [r7, #4]
 801c972:	f000 fc37 	bl	801d1e4 <USBD_CtlSendData>
              break;
 801c976:	e06a      	b.n	801ca4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	da11      	bge.n	801c9a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c980:	7bbb      	ldrb	r3, [r7, #14]
 801c982:	f003 020f 	and.w	r2, r3, #15
 801c986:	6879      	ldr	r1, [r7, #4]
 801c988:	4613      	mov	r3, r2
 801c98a:	009b      	lsls	r3, r3, #2
 801c98c:	4413      	add	r3, r2
 801c98e:	009b      	lsls	r3, r3, #2
 801c990:	440b      	add	r3, r1
 801c992:	3324      	adds	r3, #36	; 0x24
 801c994:	881b      	ldrh	r3, [r3, #0]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d117      	bne.n	801c9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801c99a:	6839      	ldr	r1, [r7, #0]
 801c99c:	6878      	ldr	r0, [r7, #4]
 801c99e:	f000 fbb0 	bl	801d102 <USBD_CtlError>
                  break;
 801c9a2:	e054      	b.n	801ca4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c9a4:	7bbb      	ldrb	r3, [r7, #14]
 801c9a6:	f003 020f 	and.w	r2, r3, #15
 801c9aa:	6879      	ldr	r1, [r7, #4]
 801c9ac:	4613      	mov	r3, r2
 801c9ae:	009b      	lsls	r3, r3, #2
 801c9b0:	4413      	add	r3, r2
 801c9b2:	009b      	lsls	r3, r3, #2
 801c9b4:	440b      	add	r3, r1
 801c9b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c9ba:	881b      	ldrh	r3, [r3, #0]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d104      	bne.n	801c9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801c9c0:	6839      	ldr	r1, [r7, #0]
 801c9c2:	6878      	ldr	r0, [r7, #4]
 801c9c4:	f000 fb9d 	bl	801d102 <USBD_CtlError>
                  break;
 801c9c8:	e041      	b.n	801ca4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c9ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	da0b      	bge.n	801c9ea <USBD_StdEPReq+0x2b2>
 801c9d2:	7bbb      	ldrb	r3, [r7, #14]
 801c9d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c9d8:	4613      	mov	r3, r2
 801c9da:	009b      	lsls	r3, r3, #2
 801c9dc:	4413      	add	r3, r2
 801c9de:	009b      	lsls	r3, r3, #2
 801c9e0:	3310      	adds	r3, #16
 801c9e2:	687a      	ldr	r2, [r7, #4]
 801c9e4:	4413      	add	r3, r2
 801c9e6:	3304      	adds	r3, #4
 801c9e8:	e00b      	b.n	801ca02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c9ea:	7bbb      	ldrb	r3, [r7, #14]
 801c9ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c9f0:	4613      	mov	r3, r2
 801c9f2:	009b      	lsls	r3, r3, #2
 801c9f4:	4413      	add	r3, r2
 801c9f6:	009b      	lsls	r3, r3, #2
 801c9f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801c9fc:	687a      	ldr	r2, [r7, #4]
 801c9fe:	4413      	add	r3, r2
 801ca00:	3304      	adds	r3, #4
 801ca02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ca04:	7bbb      	ldrb	r3, [r7, #14]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d002      	beq.n	801ca10 <USBD_StdEPReq+0x2d8>
 801ca0a:	7bbb      	ldrb	r3, [r7, #14]
 801ca0c:	2b80      	cmp	r3, #128	; 0x80
 801ca0e:	d103      	bne.n	801ca18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801ca10:	68bb      	ldr	r3, [r7, #8]
 801ca12:	2200      	movs	r2, #0
 801ca14:	601a      	str	r2, [r3, #0]
 801ca16:	e00e      	b.n	801ca36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801ca18:	7bbb      	ldrb	r3, [r7, #14]
 801ca1a:	4619      	mov	r1, r3
 801ca1c:	6878      	ldr	r0, [r7, #4]
 801ca1e:	f001 f871 	bl	801db04 <USBD_LL_IsStallEP>
 801ca22:	4603      	mov	r3, r0
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d003      	beq.n	801ca30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801ca28:	68bb      	ldr	r3, [r7, #8]
 801ca2a:	2201      	movs	r2, #1
 801ca2c:	601a      	str	r2, [r3, #0]
 801ca2e:	e002      	b.n	801ca36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801ca30:	68bb      	ldr	r3, [r7, #8]
 801ca32:	2200      	movs	r2, #0
 801ca34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801ca36:	68bb      	ldr	r3, [r7, #8]
 801ca38:	2202      	movs	r2, #2
 801ca3a:	4619      	mov	r1, r3
 801ca3c:	6878      	ldr	r0, [r7, #4]
 801ca3e:	f000 fbd1 	bl	801d1e4 <USBD_CtlSendData>
              break;
 801ca42:	e004      	b.n	801ca4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801ca44:	6839      	ldr	r1, [r7, #0]
 801ca46:	6878      	ldr	r0, [r7, #4]
 801ca48:	f000 fb5b 	bl	801d102 <USBD_CtlError>
              break;
 801ca4c:	bf00      	nop
          }
          break;
 801ca4e:	e004      	b.n	801ca5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801ca50:	6839      	ldr	r1, [r7, #0]
 801ca52:	6878      	ldr	r0, [r7, #4]
 801ca54:	f000 fb55 	bl	801d102 <USBD_CtlError>
          break;
 801ca58:	bf00      	nop
      }
      break;
 801ca5a:	e005      	b.n	801ca68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801ca5c:	6839      	ldr	r1, [r7, #0]
 801ca5e:	6878      	ldr	r0, [r7, #4]
 801ca60:	f000 fb4f 	bl	801d102 <USBD_CtlError>
      break;
 801ca64:	e000      	b.n	801ca68 <USBD_StdEPReq+0x330>
      break;
 801ca66:	bf00      	nop
  }

  return ret;
 801ca68:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	3710      	adds	r7, #16
 801ca6e:	46bd      	mov	sp, r7
 801ca70:	bd80      	pop	{r7, pc}
	...

0801ca74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b084      	sub	sp, #16
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
 801ca7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ca82:	2300      	movs	r3, #0
 801ca84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ca86:	2300      	movs	r3, #0
 801ca88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ca8a:	683b      	ldr	r3, [r7, #0]
 801ca8c:	885b      	ldrh	r3, [r3, #2]
 801ca8e:	0a1b      	lsrs	r3, r3, #8
 801ca90:	b29b      	uxth	r3, r3
 801ca92:	3b01      	subs	r3, #1
 801ca94:	2b06      	cmp	r3, #6
 801ca96:	f200 8128 	bhi.w	801ccea <USBD_GetDescriptor+0x276>
 801ca9a:	a201      	add	r2, pc, #4	; (adr r2, 801caa0 <USBD_GetDescriptor+0x2c>)
 801ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caa0:	0801cabd 	.word	0x0801cabd
 801caa4:	0801cad5 	.word	0x0801cad5
 801caa8:	0801cb15 	.word	0x0801cb15
 801caac:	0801cceb 	.word	0x0801cceb
 801cab0:	0801cceb 	.word	0x0801cceb
 801cab4:	0801cc8b 	.word	0x0801cc8b
 801cab8:	0801ccb7 	.word	0x0801ccb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	687a      	ldr	r2, [r7, #4]
 801cac6:	7c12      	ldrb	r2, [r2, #16]
 801cac8:	f107 0108 	add.w	r1, r7, #8
 801cacc:	4610      	mov	r0, r2
 801cace:	4798      	blx	r3
 801cad0:	60f8      	str	r0, [r7, #12]
      break;
 801cad2:	e112      	b.n	801ccfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	7c1b      	ldrb	r3, [r3, #16]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d10d      	bne.n	801caf8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cae4:	f107 0208 	add.w	r2, r7, #8
 801cae8:	4610      	mov	r0, r2
 801caea:	4798      	blx	r3
 801caec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	3301      	adds	r3, #1
 801caf2:	2202      	movs	r2, #2
 801caf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801caf6:	e100      	b.n	801ccfa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb00:	f107 0208 	add.w	r2, r7, #8
 801cb04:	4610      	mov	r0, r2
 801cb06:	4798      	blx	r3
 801cb08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	3301      	adds	r3, #1
 801cb0e:	2202      	movs	r2, #2
 801cb10:	701a      	strb	r2, [r3, #0]
      break;
 801cb12:	e0f2      	b.n	801ccfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	885b      	ldrh	r3, [r3, #2]
 801cb18:	b2db      	uxtb	r3, r3
 801cb1a:	2b05      	cmp	r3, #5
 801cb1c:	f200 80ac 	bhi.w	801cc78 <USBD_GetDescriptor+0x204>
 801cb20:	a201      	add	r2, pc, #4	; (adr r2, 801cb28 <USBD_GetDescriptor+0xb4>)
 801cb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb26:	bf00      	nop
 801cb28:	0801cb41 	.word	0x0801cb41
 801cb2c:	0801cb75 	.word	0x0801cb75
 801cb30:	0801cba9 	.word	0x0801cba9
 801cb34:	0801cbdd 	.word	0x0801cbdd
 801cb38:	0801cc11 	.word	0x0801cc11
 801cb3c:	0801cc45 	.word	0x0801cc45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb46:	685b      	ldr	r3, [r3, #4]
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d00b      	beq.n	801cb64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb52:	685b      	ldr	r3, [r3, #4]
 801cb54:	687a      	ldr	r2, [r7, #4]
 801cb56:	7c12      	ldrb	r2, [r2, #16]
 801cb58:	f107 0108 	add.w	r1, r7, #8
 801cb5c:	4610      	mov	r0, r2
 801cb5e:	4798      	blx	r3
 801cb60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cb62:	e091      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cb64:	6839      	ldr	r1, [r7, #0]
 801cb66:	6878      	ldr	r0, [r7, #4]
 801cb68:	f000 facb 	bl	801d102 <USBD_CtlError>
            err++;
 801cb6c:	7afb      	ldrb	r3, [r7, #11]
 801cb6e:	3301      	adds	r3, #1
 801cb70:	72fb      	strb	r3, [r7, #11]
          break;
 801cb72:	e089      	b.n	801cc88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb7a:	689b      	ldr	r3, [r3, #8]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d00b      	beq.n	801cb98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb86:	689b      	ldr	r3, [r3, #8]
 801cb88:	687a      	ldr	r2, [r7, #4]
 801cb8a:	7c12      	ldrb	r2, [r2, #16]
 801cb8c:	f107 0108 	add.w	r1, r7, #8
 801cb90:	4610      	mov	r0, r2
 801cb92:	4798      	blx	r3
 801cb94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cb96:	e077      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cb98:	6839      	ldr	r1, [r7, #0]
 801cb9a:	6878      	ldr	r0, [r7, #4]
 801cb9c:	f000 fab1 	bl	801d102 <USBD_CtlError>
            err++;
 801cba0:	7afb      	ldrb	r3, [r7, #11]
 801cba2:	3301      	adds	r3, #1
 801cba4:	72fb      	strb	r3, [r7, #11]
          break;
 801cba6:	e06f      	b.n	801cc88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbae:	68db      	ldr	r3, [r3, #12]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d00b      	beq.n	801cbcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbba:	68db      	ldr	r3, [r3, #12]
 801cbbc:	687a      	ldr	r2, [r7, #4]
 801cbbe:	7c12      	ldrb	r2, [r2, #16]
 801cbc0:	f107 0108 	add.w	r1, r7, #8
 801cbc4:	4610      	mov	r0, r2
 801cbc6:	4798      	blx	r3
 801cbc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cbca:	e05d      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cbcc:	6839      	ldr	r1, [r7, #0]
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f000 fa97 	bl	801d102 <USBD_CtlError>
            err++;
 801cbd4:	7afb      	ldrb	r3, [r7, #11]
 801cbd6:	3301      	adds	r3, #1
 801cbd8:	72fb      	strb	r3, [r7, #11]
          break;
 801cbda:	e055      	b.n	801cc88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbe2:	691b      	ldr	r3, [r3, #16]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d00b      	beq.n	801cc00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbee:	691b      	ldr	r3, [r3, #16]
 801cbf0:	687a      	ldr	r2, [r7, #4]
 801cbf2:	7c12      	ldrb	r2, [r2, #16]
 801cbf4:	f107 0108 	add.w	r1, r7, #8
 801cbf8:	4610      	mov	r0, r2
 801cbfa:	4798      	blx	r3
 801cbfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cbfe:	e043      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cc00:	6839      	ldr	r1, [r7, #0]
 801cc02:	6878      	ldr	r0, [r7, #4]
 801cc04:	f000 fa7d 	bl	801d102 <USBD_CtlError>
            err++;
 801cc08:	7afb      	ldrb	r3, [r7, #11]
 801cc0a:	3301      	adds	r3, #1
 801cc0c:	72fb      	strb	r3, [r7, #11]
          break;
 801cc0e:	e03b      	b.n	801cc88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc16:	695b      	ldr	r3, [r3, #20]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d00b      	beq.n	801cc34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc22:	695b      	ldr	r3, [r3, #20]
 801cc24:	687a      	ldr	r2, [r7, #4]
 801cc26:	7c12      	ldrb	r2, [r2, #16]
 801cc28:	f107 0108 	add.w	r1, r7, #8
 801cc2c:	4610      	mov	r0, r2
 801cc2e:	4798      	blx	r3
 801cc30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cc32:	e029      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cc34:	6839      	ldr	r1, [r7, #0]
 801cc36:	6878      	ldr	r0, [r7, #4]
 801cc38:	f000 fa63 	bl	801d102 <USBD_CtlError>
            err++;
 801cc3c:	7afb      	ldrb	r3, [r7, #11]
 801cc3e:	3301      	adds	r3, #1
 801cc40:	72fb      	strb	r3, [r7, #11]
          break;
 801cc42:	e021      	b.n	801cc88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc4a:	699b      	ldr	r3, [r3, #24]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d00b      	beq.n	801cc68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc56:	699b      	ldr	r3, [r3, #24]
 801cc58:	687a      	ldr	r2, [r7, #4]
 801cc5a:	7c12      	ldrb	r2, [r2, #16]
 801cc5c:	f107 0108 	add.w	r1, r7, #8
 801cc60:	4610      	mov	r0, r2
 801cc62:	4798      	blx	r3
 801cc64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cc66:	e00f      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cc68:	6839      	ldr	r1, [r7, #0]
 801cc6a:	6878      	ldr	r0, [r7, #4]
 801cc6c:	f000 fa49 	bl	801d102 <USBD_CtlError>
            err++;
 801cc70:	7afb      	ldrb	r3, [r7, #11]
 801cc72:	3301      	adds	r3, #1
 801cc74:	72fb      	strb	r3, [r7, #11]
          break;
 801cc76:	e007      	b.n	801cc88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801cc78:	6839      	ldr	r1, [r7, #0]
 801cc7a:	6878      	ldr	r0, [r7, #4]
 801cc7c:	f000 fa41 	bl	801d102 <USBD_CtlError>
          err++;
 801cc80:	7afb      	ldrb	r3, [r7, #11]
 801cc82:	3301      	adds	r3, #1
 801cc84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801cc86:	bf00      	nop
      }
      break;
 801cc88:	e037      	b.n	801ccfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	7c1b      	ldrb	r3, [r3, #16]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d109      	bne.n	801cca6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc9a:	f107 0208 	add.w	r2, r7, #8
 801cc9e:	4610      	mov	r0, r2
 801cca0:	4798      	blx	r3
 801cca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cca4:	e029      	b.n	801ccfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801cca6:	6839      	ldr	r1, [r7, #0]
 801cca8:	6878      	ldr	r0, [r7, #4]
 801ccaa:	f000 fa2a 	bl	801d102 <USBD_CtlError>
        err++;
 801ccae:	7afb      	ldrb	r3, [r7, #11]
 801ccb0:	3301      	adds	r3, #1
 801ccb2:	72fb      	strb	r3, [r7, #11]
      break;
 801ccb4:	e021      	b.n	801ccfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	7c1b      	ldrb	r3, [r3, #16]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d10d      	bne.n	801ccda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccc6:	f107 0208 	add.w	r2, r7, #8
 801ccca:	4610      	mov	r0, r2
 801cccc:	4798      	blx	r3
 801ccce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	2207      	movs	r2, #7
 801ccd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ccd8:	e00f      	b.n	801ccfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ccda:	6839      	ldr	r1, [r7, #0]
 801ccdc:	6878      	ldr	r0, [r7, #4]
 801ccde:	f000 fa10 	bl	801d102 <USBD_CtlError>
        err++;
 801cce2:	7afb      	ldrb	r3, [r7, #11]
 801cce4:	3301      	adds	r3, #1
 801cce6:	72fb      	strb	r3, [r7, #11]
      break;
 801cce8:	e007      	b.n	801ccfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801ccea:	6839      	ldr	r1, [r7, #0]
 801ccec:	6878      	ldr	r0, [r7, #4]
 801ccee:	f000 fa08 	bl	801d102 <USBD_CtlError>
      err++;
 801ccf2:	7afb      	ldrb	r3, [r7, #11]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	72fb      	strb	r3, [r7, #11]
      break;
 801ccf8:	bf00      	nop
  }

  if (err != 0U)
 801ccfa:	7afb      	ldrb	r3, [r7, #11]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d11e      	bne.n	801cd3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	88db      	ldrh	r3, [r3, #6]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d016      	beq.n	801cd36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801cd08:	893b      	ldrh	r3, [r7, #8]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d00e      	beq.n	801cd2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	88da      	ldrh	r2, [r3, #6]
 801cd12:	893b      	ldrh	r3, [r7, #8]
 801cd14:	4293      	cmp	r3, r2
 801cd16:	bf28      	it	cs
 801cd18:	4613      	movcs	r3, r2
 801cd1a:	b29b      	uxth	r3, r3
 801cd1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801cd1e:	893b      	ldrh	r3, [r7, #8]
 801cd20:	461a      	mov	r2, r3
 801cd22:	68f9      	ldr	r1, [r7, #12]
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	f000 fa5d 	bl	801d1e4 <USBD_CtlSendData>
 801cd2a:	e009      	b.n	801cd40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801cd2c:	6839      	ldr	r1, [r7, #0]
 801cd2e:	6878      	ldr	r0, [r7, #4]
 801cd30:	f000 f9e7 	bl	801d102 <USBD_CtlError>
 801cd34:	e004      	b.n	801cd40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f000 faae 	bl	801d298 <USBD_CtlSendStatus>
 801cd3c:	e000      	b.n	801cd40 <USBD_GetDescriptor+0x2cc>
    return;
 801cd3e:	bf00      	nop
  }
}
 801cd40:	3710      	adds	r7, #16
 801cd42:	46bd      	mov	sp, r7
 801cd44:	bd80      	pop	{r7, pc}
 801cd46:	bf00      	nop

0801cd48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b084      	sub	sp, #16
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	6078      	str	r0, [r7, #4]
 801cd50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801cd52:	683b      	ldr	r3, [r7, #0]
 801cd54:	889b      	ldrh	r3, [r3, #4]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d131      	bne.n	801cdbe <USBD_SetAddress+0x76>
 801cd5a:	683b      	ldr	r3, [r7, #0]
 801cd5c:	88db      	ldrh	r3, [r3, #6]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d12d      	bne.n	801cdbe <USBD_SetAddress+0x76>
 801cd62:	683b      	ldr	r3, [r7, #0]
 801cd64:	885b      	ldrh	r3, [r3, #2]
 801cd66:	2b7f      	cmp	r3, #127	; 0x7f
 801cd68:	d829      	bhi.n	801cdbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	885b      	ldrh	r3, [r3, #2]
 801cd6e:	b2db      	uxtb	r3, r3
 801cd70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cd74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cd7c:	b2db      	uxtb	r3, r3
 801cd7e:	2b03      	cmp	r3, #3
 801cd80:	d104      	bne.n	801cd8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801cd82:	6839      	ldr	r1, [r7, #0]
 801cd84:	6878      	ldr	r0, [r7, #4]
 801cd86:	f000 f9bc 	bl	801d102 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cd8a:	e01d      	b.n	801cdc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	7bfa      	ldrb	r2, [r7, #15]
 801cd90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801cd94:	7bfb      	ldrb	r3, [r7, #15]
 801cd96:	4619      	mov	r1, r3
 801cd98:	6878      	ldr	r0, [r7, #4]
 801cd9a:	f000 fedf 	bl	801db5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801cd9e:	6878      	ldr	r0, [r7, #4]
 801cda0:	f000 fa7a 	bl	801d298 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801cda4:	7bfb      	ldrb	r3, [r7, #15]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d004      	beq.n	801cdb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	2202      	movs	r2, #2
 801cdae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cdb2:	e009      	b.n	801cdc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2201      	movs	r2, #1
 801cdb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cdbc:	e004      	b.n	801cdc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801cdbe:	6839      	ldr	r1, [r7, #0]
 801cdc0:	6878      	ldr	r0, [r7, #4]
 801cdc2:	f000 f99e 	bl	801d102 <USBD_CtlError>
  }
}
 801cdc6:	bf00      	nop
 801cdc8:	bf00      	nop
 801cdca:	3710      	adds	r7, #16
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b084      	sub	sp, #16
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801cdda:	2300      	movs	r3, #0
 801cddc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801cdde:	683b      	ldr	r3, [r7, #0]
 801cde0:	885b      	ldrh	r3, [r3, #2]
 801cde2:	b2da      	uxtb	r2, r3
 801cde4:	4b4e      	ldr	r3, [pc, #312]	; (801cf20 <USBD_SetConfig+0x150>)
 801cde6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801cde8:	4b4d      	ldr	r3, [pc, #308]	; (801cf20 <USBD_SetConfig+0x150>)
 801cdea:	781b      	ldrb	r3, [r3, #0]
 801cdec:	2b01      	cmp	r3, #1
 801cdee:	d905      	bls.n	801cdfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801cdf0:	6839      	ldr	r1, [r7, #0]
 801cdf2:	6878      	ldr	r0, [r7, #4]
 801cdf4:	f000 f985 	bl	801d102 <USBD_CtlError>
    return USBD_FAIL;
 801cdf8:	2303      	movs	r3, #3
 801cdfa:	e08c      	b.n	801cf16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ce02:	b2db      	uxtb	r3, r3
 801ce04:	2b02      	cmp	r3, #2
 801ce06:	d002      	beq.n	801ce0e <USBD_SetConfig+0x3e>
 801ce08:	2b03      	cmp	r3, #3
 801ce0a:	d029      	beq.n	801ce60 <USBD_SetConfig+0x90>
 801ce0c:	e075      	b.n	801cefa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ce0e:	4b44      	ldr	r3, [pc, #272]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d020      	beq.n	801ce58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801ce16:	4b42      	ldr	r3, [pc, #264]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce18:	781b      	ldrb	r3, [r3, #0]
 801ce1a:	461a      	mov	r2, r3
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ce20:	4b3f      	ldr	r3, [pc, #252]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce22:	781b      	ldrb	r3, [r3, #0]
 801ce24:	4619      	mov	r1, r3
 801ce26:	6878      	ldr	r0, [r7, #4]
 801ce28:	f7fe ffe7 	bl	801bdfa <USBD_SetClassConfig>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801ce30:	7bfb      	ldrb	r3, [r7, #15]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d008      	beq.n	801ce48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801ce36:	6839      	ldr	r1, [r7, #0]
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f000 f962 	bl	801d102 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2202      	movs	r2, #2
 801ce42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ce46:	e065      	b.n	801cf14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801ce48:	6878      	ldr	r0, [r7, #4]
 801ce4a:	f000 fa25 	bl	801d298 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	2203      	movs	r2, #3
 801ce52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ce56:	e05d      	b.n	801cf14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801ce58:	6878      	ldr	r0, [r7, #4]
 801ce5a:	f000 fa1d 	bl	801d298 <USBD_CtlSendStatus>
      break;
 801ce5e:	e059      	b.n	801cf14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801ce60:	4b2f      	ldr	r3, [pc, #188]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce62:	781b      	ldrb	r3, [r3, #0]
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d112      	bne.n	801ce8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	2202      	movs	r2, #2
 801ce6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ce70:	4b2b      	ldr	r3, [pc, #172]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce72:	781b      	ldrb	r3, [r3, #0]
 801ce74:	461a      	mov	r2, r3
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ce7a:	4b29      	ldr	r3, [pc, #164]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	4619      	mov	r1, r3
 801ce80:	6878      	ldr	r0, [r7, #4]
 801ce82:	f7fe ffd6 	bl	801be32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801ce86:	6878      	ldr	r0, [r7, #4]
 801ce88:	f000 fa06 	bl	801d298 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ce8c:	e042      	b.n	801cf14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801ce8e:	4b24      	ldr	r3, [pc, #144]	; (801cf20 <USBD_SetConfig+0x150>)
 801ce90:	781b      	ldrb	r3, [r3, #0]
 801ce92:	461a      	mov	r2, r3
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	685b      	ldr	r3, [r3, #4]
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d02a      	beq.n	801cef2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	685b      	ldr	r3, [r3, #4]
 801cea0:	b2db      	uxtb	r3, r3
 801cea2:	4619      	mov	r1, r3
 801cea4:	6878      	ldr	r0, [r7, #4]
 801cea6:	f7fe ffc4 	bl	801be32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801ceaa:	4b1d      	ldr	r3, [pc, #116]	; (801cf20 <USBD_SetConfig+0x150>)
 801ceac:	781b      	ldrb	r3, [r3, #0]
 801ceae:	461a      	mov	r2, r3
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ceb4:	4b1a      	ldr	r3, [pc, #104]	; (801cf20 <USBD_SetConfig+0x150>)
 801ceb6:	781b      	ldrb	r3, [r3, #0]
 801ceb8:	4619      	mov	r1, r3
 801ceba:	6878      	ldr	r0, [r7, #4]
 801cebc:	f7fe ff9d 	bl	801bdfa <USBD_SetClassConfig>
 801cec0:	4603      	mov	r3, r0
 801cec2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801cec4:	7bfb      	ldrb	r3, [r7, #15]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d00f      	beq.n	801ceea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801ceca:	6839      	ldr	r1, [r7, #0]
 801cecc:	6878      	ldr	r0, [r7, #4]
 801cece:	f000 f918 	bl	801d102 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	685b      	ldr	r3, [r3, #4]
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	4619      	mov	r1, r3
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7fe ffa9 	bl	801be32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2202      	movs	r2, #2
 801cee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801cee8:	e014      	b.n	801cf14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f000 f9d4 	bl	801d298 <USBD_CtlSendStatus>
      break;
 801cef0:	e010      	b.n	801cf14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801cef2:	6878      	ldr	r0, [r7, #4]
 801cef4:	f000 f9d0 	bl	801d298 <USBD_CtlSendStatus>
      break;
 801cef8:	e00c      	b.n	801cf14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801cefa:	6839      	ldr	r1, [r7, #0]
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f000 f900 	bl	801d102 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801cf02:	4b07      	ldr	r3, [pc, #28]	; (801cf20 <USBD_SetConfig+0x150>)
 801cf04:	781b      	ldrb	r3, [r3, #0]
 801cf06:	4619      	mov	r1, r3
 801cf08:	6878      	ldr	r0, [r7, #4]
 801cf0a:	f7fe ff92 	bl	801be32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801cf0e:	2303      	movs	r3, #3
 801cf10:	73fb      	strb	r3, [r7, #15]
      break;
 801cf12:	bf00      	nop
  }

  return ret;
 801cf14:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	3710      	adds	r7, #16
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	bd80      	pop	{r7, pc}
 801cf1e:	bf00      	nop
 801cf20:	20000dcc 	.word	0x20000dcc

0801cf24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b082      	sub	sp, #8
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
 801cf2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801cf2e:	683b      	ldr	r3, [r7, #0]
 801cf30:	88db      	ldrh	r3, [r3, #6]
 801cf32:	2b01      	cmp	r3, #1
 801cf34:	d004      	beq.n	801cf40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801cf36:	6839      	ldr	r1, [r7, #0]
 801cf38:	6878      	ldr	r0, [r7, #4]
 801cf3a:	f000 f8e2 	bl	801d102 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801cf3e:	e023      	b.n	801cf88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	2b02      	cmp	r3, #2
 801cf4a:	dc02      	bgt.n	801cf52 <USBD_GetConfig+0x2e>
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	dc03      	bgt.n	801cf58 <USBD_GetConfig+0x34>
 801cf50:	e015      	b.n	801cf7e <USBD_GetConfig+0x5a>
 801cf52:	2b03      	cmp	r3, #3
 801cf54:	d00b      	beq.n	801cf6e <USBD_GetConfig+0x4a>
 801cf56:	e012      	b.n	801cf7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	3308      	adds	r3, #8
 801cf62:	2201      	movs	r2, #1
 801cf64:	4619      	mov	r1, r3
 801cf66:	6878      	ldr	r0, [r7, #4]
 801cf68:	f000 f93c 	bl	801d1e4 <USBD_CtlSendData>
        break;
 801cf6c:	e00c      	b.n	801cf88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	3304      	adds	r3, #4
 801cf72:	2201      	movs	r2, #1
 801cf74:	4619      	mov	r1, r3
 801cf76:	6878      	ldr	r0, [r7, #4]
 801cf78:	f000 f934 	bl	801d1e4 <USBD_CtlSendData>
        break;
 801cf7c:	e004      	b.n	801cf88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801cf7e:	6839      	ldr	r1, [r7, #0]
 801cf80:	6878      	ldr	r0, [r7, #4]
 801cf82:	f000 f8be 	bl	801d102 <USBD_CtlError>
        break;
 801cf86:	bf00      	nop
}
 801cf88:	bf00      	nop
 801cf8a:	3708      	adds	r7, #8
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	bd80      	pop	{r7, pc}

0801cf90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b082      	sub	sp, #8
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	6078      	str	r0, [r7, #4]
 801cf98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cfa0:	b2db      	uxtb	r3, r3
 801cfa2:	3b01      	subs	r3, #1
 801cfa4:	2b02      	cmp	r3, #2
 801cfa6:	d81e      	bhi.n	801cfe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801cfa8:	683b      	ldr	r3, [r7, #0]
 801cfaa:	88db      	ldrh	r3, [r3, #6]
 801cfac:	2b02      	cmp	r3, #2
 801cfae:	d004      	beq.n	801cfba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801cfb0:	6839      	ldr	r1, [r7, #0]
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f000 f8a5 	bl	801d102 <USBD_CtlError>
        break;
 801cfb8:	e01a      	b.n	801cff0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	2201      	movs	r2, #1
 801cfbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d005      	beq.n	801cfd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	68db      	ldr	r3, [r3, #12]
 801cfce:	f043 0202 	orr.w	r2, r3, #2
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	330c      	adds	r3, #12
 801cfda:	2202      	movs	r2, #2
 801cfdc:	4619      	mov	r1, r3
 801cfde:	6878      	ldr	r0, [r7, #4]
 801cfe0:	f000 f900 	bl	801d1e4 <USBD_CtlSendData>
      break;
 801cfe4:	e004      	b.n	801cff0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801cfe6:	6839      	ldr	r1, [r7, #0]
 801cfe8:	6878      	ldr	r0, [r7, #4]
 801cfea:	f000 f88a 	bl	801d102 <USBD_CtlError>
      break;
 801cfee:	bf00      	nop
  }
}
 801cff0:	bf00      	nop
 801cff2:	3708      	adds	r7, #8
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b082      	sub	sp, #8
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d002:	683b      	ldr	r3, [r7, #0]
 801d004:	885b      	ldrh	r3, [r3, #2]
 801d006:	2b01      	cmp	r3, #1
 801d008:	d107      	bne.n	801d01a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	2201      	movs	r2, #1
 801d00e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f000 f940 	bl	801d298 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801d018:	e013      	b.n	801d042 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	885b      	ldrh	r3, [r3, #2]
 801d01e:	2b02      	cmp	r3, #2
 801d020:	d10b      	bne.n	801d03a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801d022:	683b      	ldr	r3, [r7, #0]
 801d024:	889b      	ldrh	r3, [r3, #4]
 801d026:	0a1b      	lsrs	r3, r3, #8
 801d028:	b29b      	uxth	r3, r3
 801d02a:	b2da      	uxtb	r2, r3
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f000 f930 	bl	801d298 <USBD_CtlSendStatus>
}
 801d038:	e003      	b.n	801d042 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801d03a:	6839      	ldr	r1, [r7, #0]
 801d03c:	6878      	ldr	r0, [r7, #4]
 801d03e:	f000 f860 	bl	801d102 <USBD_CtlError>
}
 801d042:	bf00      	nop
 801d044:	3708      	adds	r7, #8
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}

0801d04a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d04a:	b580      	push	{r7, lr}
 801d04c:	b082      	sub	sp, #8
 801d04e:	af00      	add	r7, sp, #0
 801d050:	6078      	str	r0, [r7, #4]
 801d052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d05a:	b2db      	uxtb	r3, r3
 801d05c:	3b01      	subs	r3, #1
 801d05e:	2b02      	cmp	r3, #2
 801d060:	d80b      	bhi.n	801d07a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	885b      	ldrh	r3, [r3, #2]
 801d066:	2b01      	cmp	r3, #1
 801d068:	d10c      	bne.n	801d084 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	2200      	movs	r2, #0
 801d06e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801d072:	6878      	ldr	r0, [r7, #4]
 801d074:	f000 f910 	bl	801d298 <USBD_CtlSendStatus>
      }
      break;
 801d078:	e004      	b.n	801d084 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801d07a:	6839      	ldr	r1, [r7, #0]
 801d07c:	6878      	ldr	r0, [r7, #4]
 801d07e:	f000 f840 	bl	801d102 <USBD_CtlError>
      break;
 801d082:	e000      	b.n	801d086 <USBD_ClrFeature+0x3c>
      break;
 801d084:	bf00      	nop
  }
}
 801d086:	bf00      	nop
 801d088:	3708      	adds	r7, #8
 801d08a:	46bd      	mov	sp, r7
 801d08c:	bd80      	pop	{r7, pc}

0801d08e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d08e:	b580      	push	{r7, lr}
 801d090:	b084      	sub	sp, #16
 801d092:	af00      	add	r7, sp, #0
 801d094:	6078      	str	r0, [r7, #4]
 801d096:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801d098:	683b      	ldr	r3, [r7, #0]
 801d09a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	781a      	ldrb	r2, [r3, #0]
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	3301      	adds	r3, #1
 801d0a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	781a      	ldrb	r2, [r3, #0]
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	3301      	adds	r3, #1
 801d0b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801d0b8:	68f8      	ldr	r0, [r7, #12]
 801d0ba:	f7ff fa41 	bl	801c540 <SWAPBYTE>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	461a      	mov	r2, r3
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	3301      	adds	r3, #1
 801d0ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	3301      	adds	r3, #1
 801d0d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801d0d2:	68f8      	ldr	r0, [r7, #12]
 801d0d4:	f7ff fa34 	bl	801c540 <SWAPBYTE>
 801d0d8:	4603      	mov	r3, r0
 801d0da:	461a      	mov	r2, r3
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	3301      	adds	r3, #1
 801d0e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	3301      	adds	r3, #1
 801d0ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801d0ec:	68f8      	ldr	r0, [r7, #12]
 801d0ee:	f7ff fa27 	bl	801c540 <SWAPBYTE>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	461a      	mov	r2, r3
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	80da      	strh	r2, [r3, #6]
}
 801d0fa:	bf00      	nop
 801d0fc:	3710      	adds	r7, #16
 801d0fe:	46bd      	mov	sp, r7
 801d100:	bd80      	pop	{r7, pc}

0801d102 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d102:	b580      	push	{r7, lr}
 801d104:	b082      	sub	sp, #8
 801d106:	af00      	add	r7, sp, #0
 801d108:	6078      	str	r0, [r7, #4]
 801d10a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801d10c:	2180      	movs	r1, #128	; 0x80
 801d10e:	6878      	ldr	r0, [r7, #4]
 801d110:	f000 fcba 	bl	801da88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801d114:	2100      	movs	r1, #0
 801d116:	6878      	ldr	r0, [r7, #4]
 801d118:	f000 fcb6 	bl	801da88 <USBD_LL_StallEP>
}
 801d11c:	bf00      	nop
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}

0801d124 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b086      	sub	sp, #24
 801d128:	af00      	add	r7, sp, #0
 801d12a:	60f8      	str	r0, [r7, #12]
 801d12c:	60b9      	str	r1, [r7, #8]
 801d12e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d130:	2300      	movs	r3, #0
 801d132:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d036      	beq.n	801d1a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801d13e:	6938      	ldr	r0, [r7, #16]
 801d140:	f000 f836 	bl	801d1b0 <USBD_GetLen>
 801d144:	4603      	mov	r3, r0
 801d146:	3301      	adds	r3, #1
 801d148:	b29b      	uxth	r3, r3
 801d14a:	005b      	lsls	r3, r3, #1
 801d14c:	b29a      	uxth	r2, r3
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801d152:	7dfb      	ldrb	r3, [r7, #23]
 801d154:	68ba      	ldr	r2, [r7, #8]
 801d156:	4413      	add	r3, r2
 801d158:	687a      	ldr	r2, [r7, #4]
 801d15a:	7812      	ldrb	r2, [r2, #0]
 801d15c:	701a      	strb	r2, [r3, #0]
  idx++;
 801d15e:	7dfb      	ldrb	r3, [r7, #23]
 801d160:	3301      	adds	r3, #1
 801d162:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801d164:	7dfb      	ldrb	r3, [r7, #23]
 801d166:	68ba      	ldr	r2, [r7, #8]
 801d168:	4413      	add	r3, r2
 801d16a:	2203      	movs	r2, #3
 801d16c:	701a      	strb	r2, [r3, #0]
  idx++;
 801d16e:	7dfb      	ldrb	r3, [r7, #23]
 801d170:	3301      	adds	r3, #1
 801d172:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801d174:	e013      	b.n	801d19e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801d176:	7dfb      	ldrb	r3, [r7, #23]
 801d178:	68ba      	ldr	r2, [r7, #8]
 801d17a:	4413      	add	r3, r2
 801d17c:	693a      	ldr	r2, [r7, #16]
 801d17e:	7812      	ldrb	r2, [r2, #0]
 801d180:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801d182:	693b      	ldr	r3, [r7, #16]
 801d184:	3301      	adds	r3, #1
 801d186:	613b      	str	r3, [r7, #16]
    idx++;
 801d188:	7dfb      	ldrb	r3, [r7, #23]
 801d18a:	3301      	adds	r3, #1
 801d18c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801d18e:	7dfb      	ldrb	r3, [r7, #23]
 801d190:	68ba      	ldr	r2, [r7, #8]
 801d192:	4413      	add	r3, r2
 801d194:	2200      	movs	r2, #0
 801d196:	701a      	strb	r2, [r3, #0]
    idx++;
 801d198:	7dfb      	ldrb	r3, [r7, #23]
 801d19a:	3301      	adds	r3, #1
 801d19c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801d19e:	693b      	ldr	r3, [r7, #16]
 801d1a0:	781b      	ldrb	r3, [r3, #0]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d1e7      	bne.n	801d176 <USBD_GetString+0x52>
 801d1a6:	e000      	b.n	801d1aa <USBD_GetString+0x86>
    return;
 801d1a8:	bf00      	nop
  }
}
 801d1aa:	3718      	adds	r7, #24
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}

0801d1b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d1b0:	b480      	push	{r7}
 801d1b2:	b085      	sub	sp, #20
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801d1c0:	e005      	b.n	801d1ce <USBD_GetLen+0x1e>
  {
    len++;
 801d1c2:	7bfb      	ldrb	r3, [r7, #15]
 801d1c4:	3301      	adds	r3, #1
 801d1c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801d1c8:	68bb      	ldr	r3, [r7, #8]
 801d1ca:	3301      	adds	r3, #1
 801d1cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801d1ce:	68bb      	ldr	r3, [r7, #8]
 801d1d0:	781b      	ldrb	r3, [r3, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d1f5      	bne.n	801d1c2 <USBD_GetLen+0x12>
  }

  return len;
 801d1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d1d8:	4618      	mov	r0, r3
 801d1da:	3714      	adds	r7, #20
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e2:	4770      	bx	lr

0801d1e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b084      	sub	sp, #16
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	60f8      	str	r0, [r7, #12]
 801d1ec:	60b9      	str	r1, [r7, #8]
 801d1ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	2202      	movs	r2, #2
 801d1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	687a      	ldr	r2, [r7, #4]
 801d1fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	687a      	ldr	r2, [r7, #4]
 801d202:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	68ba      	ldr	r2, [r7, #8]
 801d208:	2100      	movs	r1, #0
 801d20a:	68f8      	ldr	r0, [r7, #12]
 801d20c:	f000 fcc5 	bl	801db9a <USBD_LL_Transmit>

  return USBD_OK;
 801d210:	2300      	movs	r3, #0
}
 801d212:	4618      	mov	r0, r3
 801d214:	3710      	adds	r7, #16
 801d216:	46bd      	mov	sp, r7
 801d218:	bd80      	pop	{r7, pc}

0801d21a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801d21a:	b580      	push	{r7, lr}
 801d21c:	b084      	sub	sp, #16
 801d21e:	af00      	add	r7, sp, #0
 801d220:	60f8      	str	r0, [r7, #12]
 801d222:	60b9      	str	r1, [r7, #8]
 801d224:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	68ba      	ldr	r2, [r7, #8]
 801d22a:	2100      	movs	r1, #0
 801d22c:	68f8      	ldr	r0, [r7, #12]
 801d22e:	f000 fcb4 	bl	801db9a <USBD_LL_Transmit>

  return USBD_OK;
 801d232:	2300      	movs	r3, #0
}
 801d234:	4618      	mov	r0, r3
 801d236:	3710      	adds	r7, #16
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd80      	pop	{r7, pc}

0801d23c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b084      	sub	sp, #16
 801d240:	af00      	add	r7, sp, #0
 801d242:	60f8      	str	r0, [r7, #12]
 801d244:	60b9      	str	r1, [r7, #8]
 801d246:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	2203      	movs	r2, #3
 801d24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	687a      	ldr	r2, [r7, #4]
 801d254:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	687a      	ldr	r2, [r7, #4]
 801d25c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	68ba      	ldr	r2, [r7, #8]
 801d264:	2100      	movs	r1, #0
 801d266:	68f8      	ldr	r0, [r7, #12]
 801d268:	f000 fcb8 	bl	801dbdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d26c:	2300      	movs	r3, #0
}
 801d26e:	4618      	mov	r0, r3
 801d270:	3710      	adds	r7, #16
 801d272:	46bd      	mov	sp, r7
 801d274:	bd80      	pop	{r7, pc}

0801d276 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801d276:	b580      	push	{r7, lr}
 801d278:	b084      	sub	sp, #16
 801d27a:	af00      	add	r7, sp, #0
 801d27c:	60f8      	str	r0, [r7, #12]
 801d27e:	60b9      	str	r1, [r7, #8]
 801d280:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	68ba      	ldr	r2, [r7, #8]
 801d286:	2100      	movs	r1, #0
 801d288:	68f8      	ldr	r0, [r7, #12]
 801d28a:	f000 fca7 	bl	801dbdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d28e:	2300      	movs	r3, #0
}
 801d290:	4618      	mov	r0, r3
 801d292:	3710      	adds	r7, #16
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}

0801d298 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d298:	b580      	push	{r7, lr}
 801d29a:	b082      	sub	sp, #8
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	2204      	movs	r2, #4
 801d2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	2100      	movs	r1, #0
 801d2ae:	6878      	ldr	r0, [r7, #4]
 801d2b0:	f000 fc73 	bl	801db9a <USBD_LL_Transmit>

  return USBD_OK;
 801d2b4:	2300      	movs	r3, #0
}
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	3708      	adds	r7, #8
 801d2ba:	46bd      	mov	sp, r7
 801d2bc:	bd80      	pop	{r7, pc}

0801d2be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d2be:	b580      	push	{r7, lr}
 801d2c0:	b082      	sub	sp, #8
 801d2c2:	af00      	add	r7, sp, #0
 801d2c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	2205      	movs	r2, #5
 801d2ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	2100      	movs	r1, #0
 801d2d4:	6878      	ldr	r0, [r7, #4]
 801d2d6:	f000 fc81 	bl	801dbdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d2da:	2300      	movs	r3, #0
}
 801d2dc:	4618      	mov	r0, r3
 801d2de:	3708      	adds	r7, #8
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bd80      	pop	{r7, pc}

0801d2e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	4912      	ldr	r1, [pc, #72]	; (801d334 <MX_USB_DEVICE_Init+0x50>)
 801d2ec:	4812      	ldr	r0, [pc, #72]	; (801d338 <MX_USB_DEVICE_Init+0x54>)
 801d2ee:	f7fe fd07 	bl	801bd00 <USBD_Init>
 801d2f2:	4603      	mov	r3, r0
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d001      	beq.n	801d2fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d2f8:	f7f6 fc56 	bl	8013ba8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d2fc:	490f      	ldr	r1, [pc, #60]	; (801d33c <MX_USB_DEVICE_Init+0x58>)
 801d2fe:	480e      	ldr	r0, [pc, #56]	; (801d338 <MX_USB_DEVICE_Init+0x54>)
 801d300:	f7fe fd2e 	bl	801bd60 <USBD_RegisterClass>
 801d304:	4603      	mov	r3, r0
 801d306:	2b00      	cmp	r3, #0
 801d308:	d001      	beq.n	801d30e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d30a:	f7f6 fc4d 	bl	8013ba8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d30e:	490c      	ldr	r1, [pc, #48]	; (801d340 <MX_USB_DEVICE_Init+0x5c>)
 801d310:	4809      	ldr	r0, [pc, #36]	; (801d338 <MX_USB_DEVICE_Init+0x54>)
 801d312:	f7fe fc65 	bl	801bbe0 <USBD_CDC_RegisterInterface>
 801d316:	4603      	mov	r3, r0
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d001      	beq.n	801d320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d31c:	f7f6 fc44 	bl	8013ba8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d320:	4805      	ldr	r0, [pc, #20]	; (801d338 <MX_USB_DEVICE_Init+0x54>)
 801d322:	f7fe fd53 	bl	801bdcc <USBD_Start>
 801d326:	4603      	mov	r3, r0
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d001      	beq.n	801d330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d32c:	f7f6 fc3c 	bl	8013ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d330:	bf00      	nop
 801d332:	bd80      	pop	{r7, pc}
 801d334:	200006f8 	.word	0x200006f8
 801d338:	20000dd0 	.word	0x20000dd0
 801d33c:	20000664 	.word	0x20000664
 801d340:	200006e4 	.word	0x200006e4

0801d344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d348:	2200      	movs	r2, #0
 801d34a:	4905      	ldr	r1, [pc, #20]	; (801d360 <CDC_Init_FS+0x1c>)
 801d34c:	4805      	ldr	r0, [pc, #20]	; (801d364 <CDC_Init_FS+0x20>)
 801d34e:	f7fe fc61 	bl	801bc14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d352:	4905      	ldr	r1, [pc, #20]	; (801d368 <CDC_Init_FS+0x24>)
 801d354:	4803      	ldr	r0, [pc, #12]	; (801d364 <CDC_Init_FS+0x20>)
 801d356:	f7fe fc7f 	bl	801bc58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d35a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d35c:	4618      	mov	r0, r3
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	200018ac 	.word	0x200018ac
 801d364:	20000dd0 	.word	0x20000dd0
 801d368:	200010ac 	.word	0x200010ac

0801d36c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d36c:	b480      	push	{r7}
 801d36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d372:	4618      	mov	r0, r3
 801d374:	46bd      	mov	sp, r7
 801d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37a:	4770      	bx	lr

0801d37c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d37c:	b480      	push	{r7}
 801d37e:	b083      	sub	sp, #12
 801d380:	af00      	add	r7, sp, #0
 801d382:	4603      	mov	r3, r0
 801d384:	6039      	str	r1, [r7, #0]
 801d386:	71fb      	strb	r3, [r7, #7]
 801d388:	4613      	mov	r3, r2
 801d38a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d38c:	79fb      	ldrb	r3, [r7, #7]
 801d38e:	2b23      	cmp	r3, #35	; 0x23
 801d390:	d84a      	bhi.n	801d428 <CDC_Control_FS+0xac>
 801d392:	a201      	add	r2, pc, #4	; (adr r2, 801d398 <CDC_Control_FS+0x1c>)
 801d394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d398:	0801d429 	.word	0x0801d429
 801d39c:	0801d429 	.word	0x0801d429
 801d3a0:	0801d429 	.word	0x0801d429
 801d3a4:	0801d429 	.word	0x0801d429
 801d3a8:	0801d429 	.word	0x0801d429
 801d3ac:	0801d429 	.word	0x0801d429
 801d3b0:	0801d429 	.word	0x0801d429
 801d3b4:	0801d429 	.word	0x0801d429
 801d3b8:	0801d429 	.word	0x0801d429
 801d3bc:	0801d429 	.word	0x0801d429
 801d3c0:	0801d429 	.word	0x0801d429
 801d3c4:	0801d429 	.word	0x0801d429
 801d3c8:	0801d429 	.word	0x0801d429
 801d3cc:	0801d429 	.word	0x0801d429
 801d3d0:	0801d429 	.word	0x0801d429
 801d3d4:	0801d429 	.word	0x0801d429
 801d3d8:	0801d429 	.word	0x0801d429
 801d3dc:	0801d429 	.word	0x0801d429
 801d3e0:	0801d429 	.word	0x0801d429
 801d3e4:	0801d429 	.word	0x0801d429
 801d3e8:	0801d429 	.word	0x0801d429
 801d3ec:	0801d429 	.word	0x0801d429
 801d3f0:	0801d429 	.word	0x0801d429
 801d3f4:	0801d429 	.word	0x0801d429
 801d3f8:	0801d429 	.word	0x0801d429
 801d3fc:	0801d429 	.word	0x0801d429
 801d400:	0801d429 	.word	0x0801d429
 801d404:	0801d429 	.word	0x0801d429
 801d408:	0801d429 	.word	0x0801d429
 801d40c:	0801d429 	.word	0x0801d429
 801d410:	0801d429 	.word	0x0801d429
 801d414:	0801d429 	.word	0x0801d429
 801d418:	0801d429 	.word	0x0801d429
 801d41c:	0801d429 	.word	0x0801d429
 801d420:	0801d429 	.word	0x0801d429
 801d424:	0801d429 	.word	0x0801d429
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d428:	bf00      	nop
  }

  return (USBD_OK);
 801d42a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d42c:	4618      	mov	r0, r3
 801d42e:	370c      	adds	r7, #12
 801d430:	46bd      	mov	sp, r7
 801d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d436:	4770      	bx	lr

0801d438 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
 801d440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d442:	6879      	ldr	r1, [r7, #4]
 801d444:	4805      	ldr	r0, [pc, #20]	; (801d45c <CDC_Receive_FS+0x24>)
 801d446:	f7fe fc07 	bl	801bc58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d44a:	4804      	ldr	r0, [pc, #16]	; (801d45c <CDC_Receive_FS+0x24>)
 801d44c:	f7fe fc22 	bl	801bc94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d452:	4618      	mov	r0, r3
 801d454:	3708      	adds	r7, #8
 801d456:	46bd      	mov	sp, r7
 801d458:	bd80      	pop	{r7, pc}
 801d45a:	bf00      	nop
 801d45c:	20000dd0 	.word	0x20000dd0

0801d460 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d460:	b480      	push	{r7}
 801d462:	b087      	sub	sp, #28
 801d464:	af00      	add	r7, sp, #0
 801d466:	60f8      	str	r0, [r7, #12]
 801d468:	60b9      	str	r1, [r7, #8]
 801d46a:	4613      	mov	r3, r2
 801d46c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d46e:	2300      	movs	r3, #0
 801d470:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d476:	4618      	mov	r0, r3
 801d478:	371c      	adds	r7, #28
 801d47a:	46bd      	mov	sp, r7
 801d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d480:	4770      	bx	lr
	...

0801d484 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d484:	b480      	push	{r7}
 801d486:	b083      	sub	sp, #12
 801d488:	af00      	add	r7, sp, #0
 801d48a:	4603      	mov	r3, r0
 801d48c:	6039      	str	r1, [r7, #0]
 801d48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d490:	683b      	ldr	r3, [r7, #0]
 801d492:	2212      	movs	r2, #18
 801d494:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d496:	4b03      	ldr	r3, [pc, #12]	; (801d4a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d498:	4618      	mov	r0, r3
 801d49a:	370c      	adds	r7, #12
 801d49c:	46bd      	mov	sp, r7
 801d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4a2:	4770      	bx	lr
 801d4a4:	20000714 	.word	0x20000714

0801d4a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d4a8:	b480      	push	{r7}
 801d4aa:	b083      	sub	sp, #12
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	6039      	str	r1, [r7, #0]
 801d4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d4b4:	683b      	ldr	r3, [r7, #0]
 801d4b6:	2204      	movs	r2, #4
 801d4b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d4ba:	4b03      	ldr	r3, [pc, #12]	; (801d4c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	370c      	adds	r7, #12
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4c6:	4770      	bx	lr
 801d4c8:	20000728 	.word	0x20000728

0801d4cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d4cc:	b580      	push	{r7, lr}
 801d4ce:	b082      	sub	sp, #8
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	4603      	mov	r3, r0
 801d4d4:	6039      	str	r1, [r7, #0]
 801d4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d4d8:	79fb      	ldrb	r3, [r7, #7]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d105      	bne.n	801d4ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d4de:	683a      	ldr	r2, [r7, #0]
 801d4e0:	4907      	ldr	r1, [pc, #28]	; (801d500 <USBD_FS_ProductStrDescriptor+0x34>)
 801d4e2:	4808      	ldr	r0, [pc, #32]	; (801d504 <USBD_FS_ProductStrDescriptor+0x38>)
 801d4e4:	f7ff fe1e 	bl	801d124 <USBD_GetString>
 801d4e8:	e004      	b.n	801d4f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d4ea:	683a      	ldr	r2, [r7, #0]
 801d4ec:	4904      	ldr	r1, [pc, #16]	; (801d500 <USBD_FS_ProductStrDescriptor+0x34>)
 801d4ee:	4805      	ldr	r0, [pc, #20]	; (801d504 <USBD_FS_ProductStrDescriptor+0x38>)
 801d4f0:	f7ff fe18 	bl	801d124 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d4f4:	4b02      	ldr	r3, [pc, #8]	; (801d500 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	3708      	adds	r7, #8
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	bd80      	pop	{r7, pc}
 801d4fe:	bf00      	nop
 801d500:	200020ac 	.word	0x200020ac
 801d504:	08022134 	.word	0x08022134

0801d508 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b082      	sub	sp, #8
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	4603      	mov	r3, r0
 801d510:	6039      	str	r1, [r7, #0]
 801d512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d514:	683a      	ldr	r2, [r7, #0]
 801d516:	4904      	ldr	r1, [pc, #16]	; (801d528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d518:	4804      	ldr	r0, [pc, #16]	; (801d52c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d51a:	f7ff fe03 	bl	801d124 <USBD_GetString>
  return USBD_StrDesc;
 801d51e:	4b02      	ldr	r3, [pc, #8]	; (801d528 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d520:	4618      	mov	r0, r3
 801d522:	3708      	adds	r7, #8
 801d524:	46bd      	mov	sp, r7
 801d526:	bd80      	pop	{r7, pc}
 801d528:	200020ac 	.word	0x200020ac
 801d52c:	0802214c 	.word	0x0802214c

0801d530 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d530:	b580      	push	{r7, lr}
 801d532:	b082      	sub	sp, #8
 801d534:	af00      	add	r7, sp, #0
 801d536:	4603      	mov	r3, r0
 801d538:	6039      	str	r1, [r7, #0]
 801d53a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d53c:	683b      	ldr	r3, [r7, #0]
 801d53e:	221a      	movs	r2, #26
 801d540:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d542:	f000 f843 	bl	801d5cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d546:	4b02      	ldr	r3, [pc, #8]	; (801d550 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3708      	adds	r7, #8
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	2000072c 	.word	0x2000072c

0801d554 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d554:	b580      	push	{r7, lr}
 801d556:	b082      	sub	sp, #8
 801d558:	af00      	add	r7, sp, #0
 801d55a:	4603      	mov	r3, r0
 801d55c:	6039      	str	r1, [r7, #0]
 801d55e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d560:	79fb      	ldrb	r3, [r7, #7]
 801d562:	2b00      	cmp	r3, #0
 801d564:	d105      	bne.n	801d572 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d566:	683a      	ldr	r2, [r7, #0]
 801d568:	4907      	ldr	r1, [pc, #28]	; (801d588 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d56a:	4808      	ldr	r0, [pc, #32]	; (801d58c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d56c:	f7ff fdda 	bl	801d124 <USBD_GetString>
 801d570:	e004      	b.n	801d57c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d572:	683a      	ldr	r2, [r7, #0]
 801d574:	4904      	ldr	r1, [pc, #16]	; (801d588 <USBD_FS_ConfigStrDescriptor+0x34>)
 801d576:	4805      	ldr	r0, [pc, #20]	; (801d58c <USBD_FS_ConfigStrDescriptor+0x38>)
 801d578:	f7ff fdd4 	bl	801d124 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d57c:	4b02      	ldr	r3, [pc, #8]	; (801d588 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d57e:	4618      	mov	r0, r3
 801d580:	3708      	adds	r7, #8
 801d582:	46bd      	mov	sp, r7
 801d584:	bd80      	pop	{r7, pc}
 801d586:	bf00      	nop
 801d588:	200020ac 	.word	0x200020ac
 801d58c:	08022160 	.word	0x08022160

0801d590 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b082      	sub	sp, #8
 801d594:	af00      	add	r7, sp, #0
 801d596:	4603      	mov	r3, r0
 801d598:	6039      	str	r1, [r7, #0]
 801d59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d59c:	79fb      	ldrb	r3, [r7, #7]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d105      	bne.n	801d5ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d5a2:	683a      	ldr	r2, [r7, #0]
 801d5a4:	4907      	ldr	r1, [pc, #28]	; (801d5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d5a6:	4808      	ldr	r0, [pc, #32]	; (801d5c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d5a8:	f7ff fdbc 	bl	801d124 <USBD_GetString>
 801d5ac:	e004      	b.n	801d5b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d5ae:	683a      	ldr	r2, [r7, #0]
 801d5b0:	4904      	ldr	r1, [pc, #16]	; (801d5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d5b2:	4805      	ldr	r0, [pc, #20]	; (801d5c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d5b4:	f7ff fdb6 	bl	801d124 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d5b8:	4b02      	ldr	r3, [pc, #8]	; (801d5c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	3708      	adds	r7, #8
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	bd80      	pop	{r7, pc}
 801d5c2:	bf00      	nop
 801d5c4:	200020ac 	.word	0x200020ac
 801d5c8:	0802216c 	.word	0x0802216c

0801d5cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b084      	sub	sp, #16
 801d5d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d5d2:	4b0f      	ldr	r3, [pc, #60]	; (801d610 <Get_SerialNum+0x44>)
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d5d8:	4b0e      	ldr	r3, [pc, #56]	; (801d614 <Get_SerialNum+0x48>)
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d5de:	4b0e      	ldr	r3, [pc, #56]	; (801d618 <Get_SerialNum+0x4c>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d5e4:	68fa      	ldr	r2, [r7, #12]
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	4413      	add	r3, r2
 801d5ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d009      	beq.n	801d606 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d5f2:	2208      	movs	r2, #8
 801d5f4:	4909      	ldr	r1, [pc, #36]	; (801d61c <Get_SerialNum+0x50>)
 801d5f6:	68f8      	ldr	r0, [r7, #12]
 801d5f8:	f000 f814 	bl	801d624 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d5fc:	2204      	movs	r2, #4
 801d5fe:	4908      	ldr	r1, [pc, #32]	; (801d620 <Get_SerialNum+0x54>)
 801d600:	68b8      	ldr	r0, [r7, #8]
 801d602:	f000 f80f 	bl	801d624 <IntToUnicode>
  }
}
 801d606:	bf00      	nop
 801d608:	3710      	adds	r7, #16
 801d60a:	46bd      	mov	sp, r7
 801d60c:	bd80      	pop	{r7, pc}
 801d60e:	bf00      	nop
 801d610:	1fff7a10 	.word	0x1fff7a10
 801d614:	1fff7a14 	.word	0x1fff7a14
 801d618:	1fff7a18 	.word	0x1fff7a18
 801d61c:	2000072e 	.word	0x2000072e
 801d620:	2000073e 	.word	0x2000073e

0801d624 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d624:	b480      	push	{r7}
 801d626:	b087      	sub	sp, #28
 801d628:	af00      	add	r7, sp, #0
 801d62a:	60f8      	str	r0, [r7, #12]
 801d62c:	60b9      	str	r1, [r7, #8]
 801d62e:	4613      	mov	r3, r2
 801d630:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d632:	2300      	movs	r3, #0
 801d634:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d636:	2300      	movs	r3, #0
 801d638:	75fb      	strb	r3, [r7, #23]
 801d63a:	e027      	b.n	801d68c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	0f1b      	lsrs	r3, r3, #28
 801d640:	2b09      	cmp	r3, #9
 801d642:	d80b      	bhi.n	801d65c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	0f1b      	lsrs	r3, r3, #28
 801d648:	b2da      	uxtb	r2, r3
 801d64a:	7dfb      	ldrb	r3, [r7, #23]
 801d64c:	005b      	lsls	r3, r3, #1
 801d64e:	4619      	mov	r1, r3
 801d650:	68bb      	ldr	r3, [r7, #8]
 801d652:	440b      	add	r3, r1
 801d654:	3230      	adds	r2, #48	; 0x30
 801d656:	b2d2      	uxtb	r2, r2
 801d658:	701a      	strb	r2, [r3, #0]
 801d65a:	e00a      	b.n	801d672 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	0f1b      	lsrs	r3, r3, #28
 801d660:	b2da      	uxtb	r2, r3
 801d662:	7dfb      	ldrb	r3, [r7, #23]
 801d664:	005b      	lsls	r3, r3, #1
 801d666:	4619      	mov	r1, r3
 801d668:	68bb      	ldr	r3, [r7, #8]
 801d66a:	440b      	add	r3, r1
 801d66c:	3237      	adds	r2, #55	; 0x37
 801d66e:	b2d2      	uxtb	r2, r2
 801d670:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	011b      	lsls	r3, r3, #4
 801d676:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d678:	7dfb      	ldrb	r3, [r7, #23]
 801d67a:	005b      	lsls	r3, r3, #1
 801d67c:	3301      	adds	r3, #1
 801d67e:	68ba      	ldr	r2, [r7, #8]
 801d680:	4413      	add	r3, r2
 801d682:	2200      	movs	r2, #0
 801d684:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d686:	7dfb      	ldrb	r3, [r7, #23]
 801d688:	3301      	adds	r3, #1
 801d68a:	75fb      	strb	r3, [r7, #23]
 801d68c:	7dfa      	ldrb	r2, [r7, #23]
 801d68e:	79fb      	ldrb	r3, [r7, #7]
 801d690:	429a      	cmp	r2, r3
 801d692:	d3d3      	bcc.n	801d63c <IntToUnicode+0x18>
  }
}
 801d694:	bf00      	nop
 801d696:	bf00      	nop
 801d698:	371c      	adds	r7, #28
 801d69a:	46bd      	mov	sp, r7
 801d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a0:	4770      	bx	lr
	...

0801d6a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b08a      	sub	sp, #40	; 0x28
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d6ac:	f107 0314 	add.w	r3, r7, #20
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	601a      	str	r2, [r3, #0]
 801d6b4:	605a      	str	r2, [r3, #4]
 801d6b6:	609a      	str	r2, [r3, #8]
 801d6b8:	60da      	str	r2, [r3, #12]
 801d6ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d6c4:	d13a      	bne.n	801d73c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	613b      	str	r3, [r7, #16]
 801d6ca:	4b1e      	ldr	r3, [pc, #120]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d6ce:	4a1d      	ldr	r2, [pc, #116]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d6d0:	f043 0301 	orr.w	r3, r3, #1
 801d6d4:	6313      	str	r3, [r2, #48]	; 0x30
 801d6d6:	4b1b      	ldr	r3, [pc, #108]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d6da:	f003 0301 	and.w	r3, r3, #1
 801d6de:	613b      	str	r3, [r7, #16]
 801d6e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d6e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801d6e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d6e8:	2302      	movs	r3, #2
 801d6ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d6f0:	2303      	movs	r3, #3
 801d6f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d6f4:	230a      	movs	r3, #10
 801d6f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d6f8:	f107 0314 	add.w	r3, r7, #20
 801d6fc:	4619      	mov	r1, r3
 801d6fe:	4812      	ldr	r0, [pc, #72]	; (801d748 <HAL_PCD_MspInit+0xa4>)
 801d700:	f7f8 fb06 	bl	8015d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d704:	4b0f      	ldr	r3, [pc, #60]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d708:	4a0e      	ldr	r2, [pc, #56]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d70e:	6353      	str	r3, [r2, #52]	; 0x34
 801d710:	2300      	movs	r3, #0
 801d712:	60fb      	str	r3, [r7, #12]
 801d714:	4b0b      	ldr	r3, [pc, #44]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d718:	4a0a      	ldr	r2, [pc, #40]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d71a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d71e:	6453      	str	r3, [r2, #68]	; 0x44
 801d720:	4b08      	ldr	r3, [pc, #32]	; (801d744 <HAL_PCD_MspInit+0xa0>)
 801d722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d728:	60fb      	str	r3, [r7, #12]
 801d72a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d72c:	2200      	movs	r2, #0
 801d72e:	2100      	movs	r1, #0
 801d730:	2043      	movs	r0, #67	; 0x43
 801d732:	f7f7 feb0 	bl	8015496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d736:	2043      	movs	r0, #67	; 0x43
 801d738:	f7f7 fec9 	bl	80154ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d73c:	bf00      	nop
 801d73e:	3728      	adds	r7, #40	; 0x28
 801d740:	46bd      	mov	sp, r7
 801d742:	bd80      	pop	{r7, pc}
 801d744:	40023800 	.word	0x40023800
 801d748:	40020000 	.word	0x40020000

0801d74c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b082      	sub	sp, #8
 801d750:	af00      	add	r7, sp, #0
 801d752:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801d760:	4619      	mov	r1, r3
 801d762:	4610      	mov	r0, r2
 801d764:	f7fe fb7f 	bl	801be66 <USBD_LL_SetupStage>
}
 801d768:	bf00      	nop
 801d76a:	3708      	adds	r7, #8
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}

0801d770 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d770:	b580      	push	{r7, lr}
 801d772:	b082      	sub	sp, #8
 801d774:	af00      	add	r7, sp, #0
 801d776:	6078      	str	r0, [r7, #4]
 801d778:	460b      	mov	r3, r1
 801d77a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d782:	78fa      	ldrb	r2, [r7, #3]
 801d784:	6879      	ldr	r1, [r7, #4]
 801d786:	4613      	mov	r3, r2
 801d788:	00db      	lsls	r3, r3, #3
 801d78a:	4413      	add	r3, r2
 801d78c:	009b      	lsls	r3, r3, #2
 801d78e:	440b      	add	r3, r1
 801d790:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801d794:	681a      	ldr	r2, [r3, #0]
 801d796:	78fb      	ldrb	r3, [r7, #3]
 801d798:	4619      	mov	r1, r3
 801d79a:	f7fe fbb9 	bl	801bf10 <USBD_LL_DataOutStage>
}
 801d79e:	bf00      	nop
 801d7a0:	3708      	adds	r7, #8
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}

0801d7a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7a6:	b580      	push	{r7, lr}
 801d7a8:	b082      	sub	sp, #8
 801d7aa:	af00      	add	r7, sp, #0
 801d7ac:	6078      	str	r0, [r7, #4]
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d7b8:	78fa      	ldrb	r2, [r7, #3]
 801d7ba:	6879      	ldr	r1, [r7, #4]
 801d7bc:	4613      	mov	r3, r2
 801d7be:	00db      	lsls	r3, r3, #3
 801d7c0:	4413      	add	r3, r2
 801d7c2:	009b      	lsls	r3, r3, #2
 801d7c4:	440b      	add	r3, r1
 801d7c6:	334c      	adds	r3, #76	; 0x4c
 801d7c8:	681a      	ldr	r2, [r3, #0]
 801d7ca:	78fb      	ldrb	r3, [r7, #3]
 801d7cc:	4619      	mov	r1, r3
 801d7ce:	f7fe fc52 	bl	801c076 <USBD_LL_DataInStage>
}
 801d7d2:	bf00      	nop
 801d7d4:	3708      	adds	r7, #8
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	bd80      	pop	{r7, pc}

0801d7da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7da:	b580      	push	{r7, lr}
 801d7dc:	b082      	sub	sp, #8
 801d7de:	af00      	add	r7, sp, #0
 801d7e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7fe fd86 	bl	801c2fa <USBD_LL_SOF>
}
 801d7ee:	bf00      	nop
 801d7f0:	3708      	adds	r7, #8
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	bd80      	pop	{r7, pc}

0801d7f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d7f6:	b580      	push	{r7, lr}
 801d7f8:	b084      	sub	sp, #16
 801d7fa:	af00      	add	r7, sp, #0
 801d7fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d7fe:	2301      	movs	r3, #1
 801d800:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	68db      	ldr	r3, [r3, #12]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d102      	bne.n	801d810 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d80a:	2300      	movs	r3, #0
 801d80c:	73fb      	strb	r3, [r7, #15]
 801d80e:	e008      	b.n	801d822 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	68db      	ldr	r3, [r3, #12]
 801d814:	2b02      	cmp	r3, #2
 801d816:	d102      	bne.n	801d81e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d818:	2301      	movs	r3, #1
 801d81a:	73fb      	strb	r3, [r7, #15]
 801d81c:	e001      	b.n	801d822 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d81e:	f7f6 f9c3 	bl	8013ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d828:	7bfa      	ldrb	r2, [r7, #15]
 801d82a:	4611      	mov	r1, r2
 801d82c:	4618      	mov	r0, r3
 801d82e:	f7fe fd26 	bl	801c27e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d838:	4618      	mov	r0, r3
 801d83a:	f7fe fcce 	bl	801c1da <USBD_LL_Reset>
}
 801d83e:	bf00      	nop
 801d840:	3710      	adds	r7, #16
 801d842:	46bd      	mov	sp, r7
 801d844:	bd80      	pop	{r7, pc}
	...

0801d848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d848:	b580      	push	{r7, lr}
 801d84a:	b082      	sub	sp, #8
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d856:	4618      	mov	r0, r3
 801d858:	f7fe fd21 	bl	801c29e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	687a      	ldr	r2, [r7, #4]
 801d868:	6812      	ldr	r2, [r2, #0]
 801d86a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d86e:	f043 0301 	orr.w	r3, r3, #1
 801d872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	6a1b      	ldr	r3, [r3, #32]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d005      	beq.n	801d888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d87c:	4b04      	ldr	r3, [pc, #16]	; (801d890 <HAL_PCD_SuspendCallback+0x48>)
 801d87e:	691b      	ldr	r3, [r3, #16]
 801d880:	4a03      	ldr	r2, [pc, #12]	; (801d890 <HAL_PCD_SuspendCallback+0x48>)
 801d882:	f043 0306 	orr.w	r3, r3, #6
 801d886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d888:	bf00      	nop
 801d88a:	3708      	adds	r7, #8
 801d88c:	46bd      	mov	sp, r7
 801d88e:	bd80      	pop	{r7, pc}
 801d890:	e000ed00 	.word	0xe000ed00

0801d894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b082      	sub	sp, #8
 801d898:	af00      	add	r7, sp, #0
 801d89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7fe fd11 	bl	801c2ca <USBD_LL_Resume>
}
 801d8a8:	bf00      	nop
 801d8aa:	3708      	adds	r7, #8
 801d8ac:	46bd      	mov	sp, r7
 801d8ae:	bd80      	pop	{r7, pc}

0801d8b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8b0:	b580      	push	{r7, lr}
 801d8b2:	b082      	sub	sp, #8
 801d8b4:	af00      	add	r7, sp, #0
 801d8b6:	6078      	str	r0, [r7, #4]
 801d8b8:	460b      	mov	r3, r1
 801d8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8c2:	78fa      	ldrb	r2, [r7, #3]
 801d8c4:	4611      	mov	r1, r2
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	f7fe fd69 	bl	801c39e <USBD_LL_IsoOUTIncomplete>
}
 801d8cc:	bf00      	nop
 801d8ce:	3708      	adds	r7, #8
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b082      	sub	sp, #8
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
 801d8dc:	460b      	mov	r3, r1
 801d8de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8e6:	78fa      	ldrb	r2, [r7, #3]
 801d8e8:	4611      	mov	r1, r2
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	f7fe fd25 	bl	801c33a <USBD_LL_IsoINIncomplete>
}
 801d8f0:	bf00      	nop
 801d8f2:	3708      	adds	r7, #8
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	bd80      	pop	{r7, pc}

0801d8f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b082      	sub	sp, #8
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d906:	4618      	mov	r0, r3
 801d908:	f7fe fd7b 	bl	801c402 <USBD_LL_DevConnected>
}
 801d90c:	bf00      	nop
 801d90e:	3708      	adds	r7, #8
 801d910:	46bd      	mov	sp, r7
 801d912:	bd80      	pop	{r7, pc}

0801d914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b082      	sub	sp, #8
 801d918:	af00      	add	r7, sp, #0
 801d91a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d922:	4618      	mov	r0, r3
 801d924:	f7fe fd78 	bl	801c418 <USBD_LL_DevDisconnected>
}
 801d928:	bf00      	nop
 801d92a:	3708      	adds	r7, #8
 801d92c:	46bd      	mov	sp, r7
 801d92e:	bd80      	pop	{r7, pc}

0801d930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d930:	b580      	push	{r7, lr}
 801d932:	b082      	sub	sp, #8
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	781b      	ldrb	r3, [r3, #0]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d13c      	bne.n	801d9ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d940:	4a20      	ldr	r2, [pc, #128]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	4a1e      	ldr	r2, [pc, #120]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d94c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d950:	4b1c      	ldr	r3, [pc, #112]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d958:	4b1a      	ldr	r3, [pc, #104]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d95a:	2204      	movs	r2, #4
 801d95c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d95e:	4b19      	ldr	r3, [pc, #100]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d960:	2202      	movs	r2, #2
 801d962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d964:	4b17      	ldr	r3, [pc, #92]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d966:	2200      	movs	r2, #0
 801d968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d96a:	4b16      	ldr	r3, [pc, #88]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d96c:	2202      	movs	r2, #2
 801d96e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d970:	4b14      	ldr	r3, [pc, #80]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d972:	2200      	movs	r2, #0
 801d974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d976:	4b13      	ldr	r3, [pc, #76]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d978:	2200      	movs	r2, #0
 801d97a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d97c:	4b11      	ldr	r3, [pc, #68]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d97e:	2200      	movs	r2, #0
 801d980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d982:	4b10      	ldr	r3, [pc, #64]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d984:	2200      	movs	r2, #0
 801d986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d988:	4b0e      	ldr	r3, [pc, #56]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d98a:	2200      	movs	r2, #0
 801d98c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d98e:	480d      	ldr	r0, [pc, #52]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d990:	f7f8 fb73 	bl	801607a <HAL_PCD_Init>
 801d994:	4603      	mov	r3, r0
 801d996:	2b00      	cmp	r3, #0
 801d998:	d001      	beq.n	801d99e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d99a:	f7f6 f905 	bl	8013ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d99e:	2180      	movs	r1, #128	; 0x80
 801d9a0:	4808      	ldr	r0, [pc, #32]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d9a2:	f7f9 fdca 	bl	801753a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d9a6:	2240      	movs	r2, #64	; 0x40
 801d9a8:	2100      	movs	r1, #0
 801d9aa:	4806      	ldr	r0, [pc, #24]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d9ac:	f7f9 fd7e 	bl	80174ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d9b0:	2280      	movs	r2, #128	; 0x80
 801d9b2:	2101      	movs	r1, #1
 801d9b4:	4803      	ldr	r0, [pc, #12]	; (801d9c4 <USBD_LL_Init+0x94>)
 801d9b6:	f7f9 fd79 	bl	80174ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d9ba:	2300      	movs	r3, #0
}
 801d9bc:	4618      	mov	r0, r3
 801d9be:	3708      	adds	r7, #8
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	bd80      	pop	{r7, pc}
 801d9c4:	200022ac 	.word	0x200022ac

0801d9c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d9c8:	b580      	push	{r7, lr}
 801d9ca:	b084      	sub	sp, #16
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d9d4:	2300      	movs	r3, #0
 801d9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7f8 fc68 	bl	80162b4 <HAL_PCD_Start>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d9e8:	7bfb      	ldrb	r3, [r7, #15]
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f000 f942 	bl	801dc74 <USBD_Get_USB_Status>
 801d9f0:	4603      	mov	r3, r0
 801d9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	3710      	adds	r7, #16
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bd80      	pop	{r7, pc}

0801d9fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d9fe:	b580      	push	{r7, lr}
 801da00:	b084      	sub	sp, #16
 801da02:	af00      	add	r7, sp, #0
 801da04:	6078      	str	r0, [r7, #4]
 801da06:	4608      	mov	r0, r1
 801da08:	4611      	mov	r1, r2
 801da0a:	461a      	mov	r2, r3
 801da0c:	4603      	mov	r3, r0
 801da0e:	70fb      	strb	r3, [r7, #3]
 801da10:	460b      	mov	r3, r1
 801da12:	70bb      	strb	r3, [r7, #2]
 801da14:	4613      	mov	r3, r2
 801da16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da18:	2300      	movs	r3, #0
 801da1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da1c:	2300      	movs	r3, #0
 801da1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801da26:	78bb      	ldrb	r3, [r7, #2]
 801da28:	883a      	ldrh	r2, [r7, #0]
 801da2a:	78f9      	ldrb	r1, [r7, #3]
 801da2c:	f7f9 f939 	bl	8016ca2 <HAL_PCD_EP_Open>
 801da30:	4603      	mov	r3, r0
 801da32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da34:	7bfb      	ldrb	r3, [r7, #15]
 801da36:	4618      	mov	r0, r3
 801da38:	f000 f91c 	bl	801dc74 <USBD_Get_USB_Status>
 801da3c:	4603      	mov	r3, r0
 801da3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801da40:	7bbb      	ldrb	r3, [r7, #14]
}
 801da42:	4618      	mov	r0, r3
 801da44:	3710      	adds	r7, #16
 801da46:	46bd      	mov	sp, r7
 801da48:	bd80      	pop	{r7, pc}

0801da4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801da4a:	b580      	push	{r7, lr}
 801da4c:	b084      	sub	sp, #16
 801da4e:	af00      	add	r7, sp, #0
 801da50:	6078      	str	r0, [r7, #4]
 801da52:	460b      	mov	r3, r1
 801da54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da56:	2300      	movs	r3, #0
 801da58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da5a:	2300      	movs	r3, #0
 801da5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801da64:	78fa      	ldrb	r2, [r7, #3]
 801da66:	4611      	mov	r1, r2
 801da68:	4618      	mov	r0, r3
 801da6a:	f7f9 f982 	bl	8016d72 <HAL_PCD_EP_Close>
 801da6e:	4603      	mov	r3, r0
 801da70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da72:	7bfb      	ldrb	r3, [r7, #15]
 801da74:	4618      	mov	r0, r3
 801da76:	f000 f8fd 	bl	801dc74 <USBD_Get_USB_Status>
 801da7a:	4603      	mov	r3, r0
 801da7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801da7e:	7bbb      	ldrb	r3, [r7, #14]
}
 801da80:	4618      	mov	r0, r3
 801da82:	3710      	adds	r7, #16
 801da84:	46bd      	mov	sp, r7
 801da86:	bd80      	pop	{r7, pc}

0801da88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b084      	sub	sp, #16
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
 801da90:	460b      	mov	r3, r1
 801da92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da94:	2300      	movs	r3, #0
 801da96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da98:	2300      	movs	r3, #0
 801da9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801daa2:	78fa      	ldrb	r2, [r7, #3]
 801daa4:	4611      	mov	r1, r2
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7f9 fa5a 	bl	8016f60 <HAL_PCD_EP_SetStall>
 801daac:	4603      	mov	r3, r0
 801daae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dab0:	7bfb      	ldrb	r3, [r7, #15]
 801dab2:	4618      	mov	r0, r3
 801dab4:	f000 f8de 	bl	801dc74 <USBD_Get_USB_Status>
 801dab8:	4603      	mov	r3, r0
 801daba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dabc:	7bbb      	ldrb	r3, [r7, #14]
}
 801dabe:	4618      	mov	r0, r3
 801dac0:	3710      	adds	r7, #16
 801dac2:	46bd      	mov	sp, r7
 801dac4:	bd80      	pop	{r7, pc}

0801dac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dac6:	b580      	push	{r7, lr}
 801dac8:	b084      	sub	sp, #16
 801daca:	af00      	add	r7, sp, #0
 801dacc:	6078      	str	r0, [r7, #4]
 801dace:	460b      	mov	r3, r1
 801dad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dad2:	2300      	movs	r3, #0
 801dad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dad6:	2300      	movs	r3, #0
 801dad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801dae0:	78fa      	ldrb	r2, [r7, #3]
 801dae2:	4611      	mov	r1, r2
 801dae4:	4618      	mov	r0, r3
 801dae6:	f7f9 fa9f 	bl	8017028 <HAL_PCD_EP_ClrStall>
 801daea:	4603      	mov	r3, r0
 801daec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801daee:	7bfb      	ldrb	r3, [r7, #15]
 801daf0:	4618      	mov	r0, r3
 801daf2:	f000 f8bf 	bl	801dc74 <USBD_Get_USB_Status>
 801daf6:	4603      	mov	r3, r0
 801daf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dafa:	7bbb      	ldrb	r3, [r7, #14]
}
 801dafc:	4618      	mov	r0, r3
 801dafe:	3710      	adds	r7, #16
 801db00:	46bd      	mov	sp, r7
 801db02:	bd80      	pop	{r7, pc}

0801db04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db04:	b480      	push	{r7}
 801db06:	b085      	sub	sp, #20
 801db08:	af00      	add	r7, sp, #0
 801db0a:	6078      	str	r0, [r7, #4]
 801db0c:	460b      	mov	r3, r1
 801db0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801db18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	da0b      	bge.n	801db38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801db20:	78fb      	ldrb	r3, [r7, #3]
 801db22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801db26:	68f9      	ldr	r1, [r7, #12]
 801db28:	4613      	mov	r3, r2
 801db2a:	00db      	lsls	r3, r3, #3
 801db2c:	4413      	add	r3, r2
 801db2e:	009b      	lsls	r3, r3, #2
 801db30:	440b      	add	r3, r1
 801db32:	333e      	adds	r3, #62	; 0x3e
 801db34:	781b      	ldrb	r3, [r3, #0]
 801db36:	e00b      	b.n	801db50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801db38:	78fb      	ldrb	r3, [r7, #3]
 801db3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801db3e:	68f9      	ldr	r1, [r7, #12]
 801db40:	4613      	mov	r3, r2
 801db42:	00db      	lsls	r3, r3, #3
 801db44:	4413      	add	r3, r2
 801db46:	009b      	lsls	r3, r3, #2
 801db48:	440b      	add	r3, r1
 801db4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801db4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801db50:	4618      	mov	r0, r3
 801db52:	3714      	adds	r7, #20
 801db54:	46bd      	mov	sp, r7
 801db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db5a:	4770      	bx	lr

0801db5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801db5c:	b580      	push	{r7, lr}
 801db5e:	b084      	sub	sp, #16
 801db60:	af00      	add	r7, sp, #0
 801db62:	6078      	str	r0, [r7, #4]
 801db64:	460b      	mov	r3, r1
 801db66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db68:	2300      	movs	r3, #0
 801db6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db6c:	2300      	movs	r3, #0
 801db6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db76:	78fa      	ldrb	r2, [r7, #3]
 801db78:	4611      	mov	r1, r2
 801db7a:	4618      	mov	r0, r3
 801db7c:	f7f9 f86c 	bl	8016c58 <HAL_PCD_SetAddress>
 801db80:	4603      	mov	r3, r0
 801db82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db84:	7bfb      	ldrb	r3, [r7, #15]
 801db86:	4618      	mov	r0, r3
 801db88:	f000 f874 	bl	801dc74 <USBD_Get_USB_Status>
 801db8c:	4603      	mov	r3, r0
 801db8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db90:	7bbb      	ldrb	r3, [r7, #14]
}
 801db92:	4618      	mov	r0, r3
 801db94:	3710      	adds	r7, #16
 801db96:	46bd      	mov	sp, r7
 801db98:	bd80      	pop	{r7, pc}

0801db9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801db9a:	b580      	push	{r7, lr}
 801db9c:	b086      	sub	sp, #24
 801db9e:	af00      	add	r7, sp, #0
 801dba0:	60f8      	str	r0, [r7, #12]
 801dba2:	607a      	str	r2, [r7, #4]
 801dba4:	603b      	str	r3, [r7, #0]
 801dba6:	460b      	mov	r3, r1
 801dba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dbaa:	2300      	movs	r3, #0
 801dbac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbae:	2300      	movs	r3, #0
 801dbb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801dbb8:	7af9      	ldrb	r1, [r7, #11]
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	687a      	ldr	r2, [r7, #4]
 801dbbe:	f7f9 f985 	bl	8016ecc <HAL_PCD_EP_Transmit>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dbc6:	7dfb      	ldrb	r3, [r7, #23]
 801dbc8:	4618      	mov	r0, r3
 801dbca:	f000 f853 	bl	801dc74 <USBD_Get_USB_Status>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dbd2:	7dbb      	ldrb	r3, [r7, #22]
}
 801dbd4:	4618      	mov	r0, r3
 801dbd6:	3718      	adds	r7, #24
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	bd80      	pop	{r7, pc}

0801dbdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dbdc:	b580      	push	{r7, lr}
 801dbde:	b086      	sub	sp, #24
 801dbe0:	af00      	add	r7, sp, #0
 801dbe2:	60f8      	str	r0, [r7, #12]
 801dbe4:	607a      	str	r2, [r7, #4]
 801dbe6:	603b      	str	r3, [r7, #0]
 801dbe8:	460b      	mov	r3, r1
 801dbea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dbec:	2300      	movs	r3, #0
 801dbee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dbf4:	68fb      	ldr	r3, [r7, #12]
 801dbf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801dbfa:	7af9      	ldrb	r1, [r7, #11]
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	687a      	ldr	r2, [r7, #4]
 801dc00:	f7f9 f901 	bl	8016e06 <HAL_PCD_EP_Receive>
 801dc04:	4603      	mov	r3, r0
 801dc06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc08:	7dfb      	ldrb	r3, [r7, #23]
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f000 f832 	bl	801dc74 <USBD_Get_USB_Status>
 801dc10:	4603      	mov	r3, r0
 801dc12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dc14:	7dbb      	ldrb	r3, [r7, #22]
}
 801dc16:	4618      	mov	r0, r3
 801dc18:	3718      	adds	r7, #24
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd80      	pop	{r7, pc}

0801dc1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dc1e:	b580      	push	{r7, lr}
 801dc20:	b082      	sub	sp, #8
 801dc22:	af00      	add	r7, sp, #0
 801dc24:	6078      	str	r0, [r7, #4]
 801dc26:	460b      	mov	r3, r1
 801dc28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801dc30:	78fa      	ldrb	r2, [r7, #3]
 801dc32:	4611      	mov	r1, r2
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7f9 f931 	bl	8016e9c <HAL_PCD_EP_GetRxCount>
 801dc3a:	4603      	mov	r3, r0
}
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	3708      	adds	r7, #8
 801dc40:	46bd      	mov	sp, r7
 801dc42:	bd80      	pop	{r7, pc}

0801dc44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dc44:	b480      	push	{r7}
 801dc46:	b083      	sub	sp, #12
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801dc4c:	4b03      	ldr	r3, [pc, #12]	; (801dc5c <USBD_static_malloc+0x18>)
}
 801dc4e:	4618      	mov	r0, r3
 801dc50:	370c      	adds	r7, #12
 801dc52:	46bd      	mov	sp, r7
 801dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc58:	4770      	bx	lr
 801dc5a:	bf00      	nop
 801dc5c:	200027b8 	.word	0x200027b8

0801dc60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801dc60:	b480      	push	{r7}
 801dc62:	b083      	sub	sp, #12
 801dc64:	af00      	add	r7, sp, #0
 801dc66:	6078      	str	r0, [r7, #4]

}
 801dc68:	bf00      	nop
 801dc6a:	370c      	adds	r7, #12
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc72:	4770      	bx	lr

0801dc74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801dc74:	b480      	push	{r7}
 801dc76:	b085      	sub	sp, #20
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	4603      	mov	r3, r0
 801dc7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc7e:	2300      	movs	r3, #0
 801dc80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801dc82:	79fb      	ldrb	r3, [r7, #7]
 801dc84:	2b03      	cmp	r3, #3
 801dc86:	d817      	bhi.n	801dcb8 <USBD_Get_USB_Status+0x44>
 801dc88:	a201      	add	r2, pc, #4	; (adr r2, 801dc90 <USBD_Get_USB_Status+0x1c>)
 801dc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc8e:	bf00      	nop
 801dc90:	0801dca1 	.word	0x0801dca1
 801dc94:	0801dca7 	.word	0x0801dca7
 801dc98:	0801dcad 	.word	0x0801dcad
 801dc9c:	0801dcb3 	.word	0x0801dcb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801dca0:	2300      	movs	r3, #0
 801dca2:	73fb      	strb	r3, [r7, #15]
    break;
 801dca4:	e00b      	b.n	801dcbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801dca6:	2303      	movs	r3, #3
 801dca8:	73fb      	strb	r3, [r7, #15]
    break;
 801dcaa:	e008      	b.n	801dcbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801dcac:	2301      	movs	r3, #1
 801dcae:	73fb      	strb	r3, [r7, #15]
    break;
 801dcb0:	e005      	b.n	801dcbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801dcb2:	2303      	movs	r3, #3
 801dcb4:	73fb      	strb	r3, [r7, #15]
    break;
 801dcb6:	e002      	b.n	801dcbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801dcb8:	2303      	movs	r3, #3
 801dcba:	73fb      	strb	r3, [r7, #15]
    break;
 801dcbc:	bf00      	nop
  }
  return usb_status;
 801dcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	3714      	adds	r7, #20
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcca:	4770      	bx	lr

0801dccc <calloc>:
 801dccc:	4b02      	ldr	r3, [pc, #8]	; (801dcd8 <calloc+0xc>)
 801dcce:	460a      	mov	r2, r1
 801dcd0:	4601      	mov	r1, r0
 801dcd2:	6818      	ldr	r0, [r3, #0]
 801dcd4:	f000 b802 	b.w	801dcdc <_calloc_r>
 801dcd8:	2000090c 	.word	0x2000090c

0801dcdc <_calloc_r>:
 801dcdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dcde:	fba1 2402 	umull	r2, r4, r1, r2
 801dce2:	b94c      	cbnz	r4, 801dcf8 <_calloc_r+0x1c>
 801dce4:	4611      	mov	r1, r2
 801dce6:	9201      	str	r2, [sp, #4]
 801dce8:	f000 f83e 	bl	801dd68 <_malloc_r>
 801dcec:	9a01      	ldr	r2, [sp, #4]
 801dcee:	4605      	mov	r5, r0
 801dcf0:	b930      	cbnz	r0, 801dd00 <_calloc_r+0x24>
 801dcf2:	4628      	mov	r0, r5
 801dcf4:	b003      	add	sp, #12
 801dcf6:	bd30      	pop	{r4, r5, pc}
 801dcf8:	220c      	movs	r2, #12
 801dcfa:	6002      	str	r2, [r0, #0]
 801dcfc:	2500      	movs	r5, #0
 801dcfe:	e7f8      	b.n	801dcf2 <_calloc_r+0x16>
 801dd00:	4621      	mov	r1, r4
 801dd02:	f001 fc9b 	bl	801f63c <memset>
 801dd06:	e7f4      	b.n	801dcf2 <_calloc_r+0x16>

0801dd08 <malloc>:
 801dd08:	4b02      	ldr	r3, [pc, #8]	; (801dd14 <malloc+0xc>)
 801dd0a:	4601      	mov	r1, r0
 801dd0c:	6818      	ldr	r0, [r3, #0]
 801dd0e:	f000 b82b 	b.w	801dd68 <_malloc_r>
 801dd12:	bf00      	nop
 801dd14:	2000090c 	.word	0x2000090c

0801dd18 <free>:
 801dd18:	4b02      	ldr	r3, [pc, #8]	; (801dd24 <free+0xc>)
 801dd1a:	4601      	mov	r1, r0
 801dd1c:	6818      	ldr	r0, [r3, #0]
 801dd1e:	f001 bd45 	b.w	801f7ac <_free_r>
 801dd22:	bf00      	nop
 801dd24:	2000090c 	.word	0x2000090c

0801dd28 <sbrk_aligned>:
 801dd28:	b570      	push	{r4, r5, r6, lr}
 801dd2a:	4e0e      	ldr	r6, [pc, #56]	; (801dd64 <sbrk_aligned+0x3c>)
 801dd2c:	460c      	mov	r4, r1
 801dd2e:	6831      	ldr	r1, [r6, #0]
 801dd30:	4605      	mov	r5, r0
 801dd32:	b911      	cbnz	r1, 801dd3a <sbrk_aligned+0x12>
 801dd34:	f001 fcd0 	bl	801f6d8 <_sbrk_r>
 801dd38:	6030      	str	r0, [r6, #0]
 801dd3a:	4621      	mov	r1, r4
 801dd3c:	4628      	mov	r0, r5
 801dd3e:	f001 fccb 	bl	801f6d8 <_sbrk_r>
 801dd42:	1c43      	adds	r3, r0, #1
 801dd44:	d00a      	beq.n	801dd5c <sbrk_aligned+0x34>
 801dd46:	1cc4      	adds	r4, r0, #3
 801dd48:	f024 0403 	bic.w	r4, r4, #3
 801dd4c:	42a0      	cmp	r0, r4
 801dd4e:	d007      	beq.n	801dd60 <sbrk_aligned+0x38>
 801dd50:	1a21      	subs	r1, r4, r0
 801dd52:	4628      	mov	r0, r5
 801dd54:	f001 fcc0 	bl	801f6d8 <_sbrk_r>
 801dd58:	3001      	adds	r0, #1
 801dd5a:	d101      	bne.n	801dd60 <sbrk_aligned+0x38>
 801dd5c:	f04f 34ff 	mov.w	r4, #4294967295
 801dd60:	4620      	mov	r0, r4
 801dd62:	bd70      	pop	{r4, r5, r6, pc}
 801dd64:	200029dc 	.word	0x200029dc

0801dd68 <_malloc_r>:
 801dd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd6c:	1ccd      	adds	r5, r1, #3
 801dd6e:	f025 0503 	bic.w	r5, r5, #3
 801dd72:	3508      	adds	r5, #8
 801dd74:	2d0c      	cmp	r5, #12
 801dd76:	bf38      	it	cc
 801dd78:	250c      	movcc	r5, #12
 801dd7a:	2d00      	cmp	r5, #0
 801dd7c:	4607      	mov	r7, r0
 801dd7e:	db01      	blt.n	801dd84 <_malloc_r+0x1c>
 801dd80:	42a9      	cmp	r1, r5
 801dd82:	d905      	bls.n	801dd90 <_malloc_r+0x28>
 801dd84:	230c      	movs	r3, #12
 801dd86:	603b      	str	r3, [r7, #0]
 801dd88:	2600      	movs	r6, #0
 801dd8a:	4630      	mov	r0, r6
 801dd8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801de64 <_malloc_r+0xfc>
 801dd94:	f000 f868 	bl	801de68 <__malloc_lock>
 801dd98:	f8d8 3000 	ldr.w	r3, [r8]
 801dd9c:	461c      	mov	r4, r3
 801dd9e:	bb5c      	cbnz	r4, 801ddf8 <_malloc_r+0x90>
 801dda0:	4629      	mov	r1, r5
 801dda2:	4638      	mov	r0, r7
 801dda4:	f7ff ffc0 	bl	801dd28 <sbrk_aligned>
 801dda8:	1c43      	adds	r3, r0, #1
 801ddaa:	4604      	mov	r4, r0
 801ddac:	d155      	bne.n	801de5a <_malloc_r+0xf2>
 801ddae:	f8d8 4000 	ldr.w	r4, [r8]
 801ddb2:	4626      	mov	r6, r4
 801ddb4:	2e00      	cmp	r6, #0
 801ddb6:	d145      	bne.n	801de44 <_malloc_r+0xdc>
 801ddb8:	2c00      	cmp	r4, #0
 801ddba:	d048      	beq.n	801de4e <_malloc_r+0xe6>
 801ddbc:	6823      	ldr	r3, [r4, #0]
 801ddbe:	4631      	mov	r1, r6
 801ddc0:	4638      	mov	r0, r7
 801ddc2:	eb04 0903 	add.w	r9, r4, r3
 801ddc6:	f001 fc87 	bl	801f6d8 <_sbrk_r>
 801ddca:	4581      	cmp	r9, r0
 801ddcc:	d13f      	bne.n	801de4e <_malloc_r+0xe6>
 801ddce:	6821      	ldr	r1, [r4, #0]
 801ddd0:	1a6d      	subs	r5, r5, r1
 801ddd2:	4629      	mov	r1, r5
 801ddd4:	4638      	mov	r0, r7
 801ddd6:	f7ff ffa7 	bl	801dd28 <sbrk_aligned>
 801ddda:	3001      	adds	r0, #1
 801dddc:	d037      	beq.n	801de4e <_malloc_r+0xe6>
 801ddde:	6823      	ldr	r3, [r4, #0]
 801dde0:	442b      	add	r3, r5
 801dde2:	6023      	str	r3, [r4, #0]
 801dde4:	f8d8 3000 	ldr.w	r3, [r8]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d038      	beq.n	801de5e <_malloc_r+0xf6>
 801ddec:	685a      	ldr	r2, [r3, #4]
 801ddee:	42a2      	cmp	r2, r4
 801ddf0:	d12b      	bne.n	801de4a <_malloc_r+0xe2>
 801ddf2:	2200      	movs	r2, #0
 801ddf4:	605a      	str	r2, [r3, #4]
 801ddf6:	e00f      	b.n	801de18 <_malloc_r+0xb0>
 801ddf8:	6822      	ldr	r2, [r4, #0]
 801ddfa:	1b52      	subs	r2, r2, r5
 801ddfc:	d41f      	bmi.n	801de3e <_malloc_r+0xd6>
 801ddfe:	2a0b      	cmp	r2, #11
 801de00:	d917      	bls.n	801de32 <_malloc_r+0xca>
 801de02:	1961      	adds	r1, r4, r5
 801de04:	42a3      	cmp	r3, r4
 801de06:	6025      	str	r5, [r4, #0]
 801de08:	bf18      	it	ne
 801de0a:	6059      	strne	r1, [r3, #4]
 801de0c:	6863      	ldr	r3, [r4, #4]
 801de0e:	bf08      	it	eq
 801de10:	f8c8 1000 	streq.w	r1, [r8]
 801de14:	5162      	str	r2, [r4, r5]
 801de16:	604b      	str	r3, [r1, #4]
 801de18:	4638      	mov	r0, r7
 801de1a:	f104 060b 	add.w	r6, r4, #11
 801de1e:	f000 f829 	bl	801de74 <__malloc_unlock>
 801de22:	f026 0607 	bic.w	r6, r6, #7
 801de26:	1d23      	adds	r3, r4, #4
 801de28:	1af2      	subs	r2, r6, r3
 801de2a:	d0ae      	beq.n	801dd8a <_malloc_r+0x22>
 801de2c:	1b9b      	subs	r3, r3, r6
 801de2e:	50a3      	str	r3, [r4, r2]
 801de30:	e7ab      	b.n	801dd8a <_malloc_r+0x22>
 801de32:	42a3      	cmp	r3, r4
 801de34:	6862      	ldr	r2, [r4, #4]
 801de36:	d1dd      	bne.n	801ddf4 <_malloc_r+0x8c>
 801de38:	f8c8 2000 	str.w	r2, [r8]
 801de3c:	e7ec      	b.n	801de18 <_malloc_r+0xb0>
 801de3e:	4623      	mov	r3, r4
 801de40:	6864      	ldr	r4, [r4, #4]
 801de42:	e7ac      	b.n	801dd9e <_malloc_r+0x36>
 801de44:	4634      	mov	r4, r6
 801de46:	6876      	ldr	r6, [r6, #4]
 801de48:	e7b4      	b.n	801ddb4 <_malloc_r+0x4c>
 801de4a:	4613      	mov	r3, r2
 801de4c:	e7cc      	b.n	801dde8 <_malloc_r+0x80>
 801de4e:	230c      	movs	r3, #12
 801de50:	603b      	str	r3, [r7, #0]
 801de52:	4638      	mov	r0, r7
 801de54:	f000 f80e 	bl	801de74 <__malloc_unlock>
 801de58:	e797      	b.n	801dd8a <_malloc_r+0x22>
 801de5a:	6025      	str	r5, [r4, #0]
 801de5c:	e7dc      	b.n	801de18 <_malloc_r+0xb0>
 801de5e:	605b      	str	r3, [r3, #4]
 801de60:	deff      	udf	#255	; 0xff
 801de62:	bf00      	nop
 801de64:	200029d8 	.word	0x200029d8

0801de68 <__malloc_lock>:
 801de68:	4801      	ldr	r0, [pc, #4]	; (801de70 <__malloc_lock+0x8>)
 801de6a:	f001 bc81 	b.w	801f770 <__retarget_lock_acquire_recursive>
 801de6e:	bf00      	nop
 801de70:	20002b20 	.word	0x20002b20

0801de74 <__malloc_unlock>:
 801de74:	4801      	ldr	r0, [pc, #4]	; (801de7c <__malloc_unlock+0x8>)
 801de76:	f001 bc7c 	b.w	801f772 <__retarget_lock_release_recursive>
 801de7a:	bf00      	nop
 801de7c:	20002b20 	.word	0x20002b20

0801de80 <sulp>:
 801de80:	b570      	push	{r4, r5, r6, lr}
 801de82:	4604      	mov	r4, r0
 801de84:	460d      	mov	r5, r1
 801de86:	ec45 4b10 	vmov	d0, r4, r5
 801de8a:	4616      	mov	r6, r2
 801de8c:	f002 fbb0 	bl	80205f0 <__ulp>
 801de90:	ec51 0b10 	vmov	r0, r1, d0
 801de94:	b17e      	cbz	r6, 801deb6 <sulp+0x36>
 801de96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801de9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	dd09      	ble.n	801deb6 <sulp+0x36>
 801dea2:	051b      	lsls	r3, r3, #20
 801dea4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dea8:	2400      	movs	r4, #0
 801deaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801deae:	4622      	mov	r2, r4
 801deb0:	462b      	mov	r3, r5
 801deb2:	f7e2 fbb1 	bl	8000618 <__aeabi_dmul>
 801deb6:	bd70      	pop	{r4, r5, r6, pc}

0801deb8 <_strtod_l>:
 801deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801debc:	ed2d 8b02 	vpush	{d8}
 801dec0:	b09b      	sub	sp, #108	; 0x6c
 801dec2:	4604      	mov	r4, r0
 801dec4:	9213      	str	r2, [sp, #76]	; 0x4c
 801dec6:	2200      	movs	r2, #0
 801dec8:	9216      	str	r2, [sp, #88]	; 0x58
 801deca:	460d      	mov	r5, r1
 801decc:	f04f 0800 	mov.w	r8, #0
 801ded0:	f04f 0900 	mov.w	r9, #0
 801ded4:	460a      	mov	r2, r1
 801ded6:	9215      	str	r2, [sp, #84]	; 0x54
 801ded8:	7811      	ldrb	r1, [r2, #0]
 801deda:	292b      	cmp	r1, #43	; 0x2b
 801dedc:	d04c      	beq.n	801df78 <_strtod_l+0xc0>
 801dede:	d83a      	bhi.n	801df56 <_strtod_l+0x9e>
 801dee0:	290d      	cmp	r1, #13
 801dee2:	d834      	bhi.n	801df4e <_strtod_l+0x96>
 801dee4:	2908      	cmp	r1, #8
 801dee6:	d834      	bhi.n	801df52 <_strtod_l+0x9a>
 801dee8:	2900      	cmp	r1, #0
 801deea:	d03d      	beq.n	801df68 <_strtod_l+0xb0>
 801deec:	2200      	movs	r2, #0
 801deee:	920a      	str	r2, [sp, #40]	; 0x28
 801def0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801def2:	7832      	ldrb	r2, [r6, #0]
 801def4:	2a30      	cmp	r2, #48	; 0x30
 801def6:	f040 80b4 	bne.w	801e062 <_strtod_l+0x1aa>
 801defa:	7872      	ldrb	r2, [r6, #1]
 801defc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801df00:	2a58      	cmp	r2, #88	; 0x58
 801df02:	d170      	bne.n	801dfe6 <_strtod_l+0x12e>
 801df04:	9302      	str	r3, [sp, #8]
 801df06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df08:	9301      	str	r3, [sp, #4]
 801df0a:	ab16      	add	r3, sp, #88	; 0x58
 801df0c:	9300      	str	r3, [sp, #0]
 801df0e:	4a8e      	ldr	r2, [pc, #568]	; (801e148 <_strtod_l+0x290>)
 801df10:	ab17      	add	r3, sp, #92	; 0x5c
 801df12:	a915      	add	r1, sp, #84	; 0x54
 801df14:	4620      	mov	r0, r4
 801df16:	f001 fcfd 	bl	801f914 <__gethex>
 801df1a:	f010 070f 	ands.w	r7, r0, #15
 801df1e:	4605      	mov	r5, r0
 801df20:	d005      	beq.n	801df2e <_strtod_l+0x76>
 801df22:	2f06      	cmp	r7, #6
 801df24:	d12a      	bne.n	801df7c <_strtod_l+0xc4>
 801df26:	3601      	adds	r6, #1
 801df28:	2300      	movs	r3, #0
 801df2a:	9615      	str	r6, [sp, #84]	; 0x54
 801df2c:	930a      	str	r3, [sp, #40]	; 0x28
 801df2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801df30:	2b00      	cmp	r3, #0
 801df32:	f040 857f 	bne.w	801ea34 <_strtod_l+0xb7c>
 801df36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df38:	b1db      	cbz	r3, 801df72 <_strtod_l+0xba>
 801df3a:	4642      	mov	r2, r8
 801df3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801df40:	ec43 2b10 	vmov	d0, r2, r3
 801df44:	b01b      	add	sp, #108	; 0x6c
 801df46:	ecbd 8b02 	vpop	{d8}
 801df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df4e:	2920      	cmp	r1, #32
 801df50:	d1cc      	bne.n	801deec <_strtod_l+0x34>
 801df52:	3201      	adds	r2, #1
 801df54:	e7bf      	b.n	801ded6 <_strtod_l+0x1e>
 801df56:	292d      	cmp	r1, #45	; 0x2d
 801df58:	d1c8      	bne.n	801deec <_strtod_l+0x34>
 801df5a:	2101      	movs	r1, #1
 801df5c:	910a      	str	r1, [sp, #40]	; 0x28
 801df5e:	1c51      	adds	r1, r2, #1
 801df60:	9115      	str	r1, [sp, #84]	; 0x54
 801df62:	7852      	ldrb	r2, [r2, #1]
 801df64:	2a00      	cmp	r2, #0
 801df66:	d1c3      	bne.n	801def0 <_strtod_l+0x38>
 801df68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801df6a:	9515      	str	r5, [sp, #84]	; 0x54
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	f040 855f 	bne.w	801ea30 <_strtod_l+0xb78>
 801df72:	4642      	mov	r2, r8
 801df74:	464b      	mov	r3, r9
 801df76:	e7e3      	b.n	801df40 <_strtod_l+0x88>
 801df78:	2100      	movs	r1, #0
 801df7a:	e7ef      	b.n	801df5c <_strtod_l+0xa4>
 801df7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801df7e:	b13a      	cbz	r2, 801df90 <_strtod_l+0xd8>
 801df80:	2135      	movs	r1, #53	; 0x35
 801df82:	a818      	add	r0, sp, #96	; 0x60
 801df84:	f002 fc31 	bl	80207ea <__copybits>
 801df88:	9916      	ldr	r1, [sp, #88]	; 0x58
 801df8a:	4620      	mov	r0, r4
 801df8c:	f002 f804 	bl	801ff98 <_Bfree>
 801df90:	3f01      	subs	r7, #1
 801df92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801df94:	2f04      	cmp	r7, #4
 801df96:	d806      	bhi.n	801dfa6 <_strtod_l+0xee>
 801df98:	e8df f007 	tbb	[pc, r7]
 801df9c:	201d0314 	.word	0x201d0314
 801dfa0:	14          	.byte	0x14
 801dfa1:	00          	.byte	0x00
 801dfa2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801dfa6:	05e9      	lsls	r1, r5, #23
 801dfa8:	bf48      	it	mi
 801dfaa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801dfae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dfb2:	0d1b      	lsrs	r3, r3, #20
 801dfb4:	051b      	lsls	r3, r3, #20
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d1b9      	bne.n	801df2e <_strtod_l+0x76>
 801dfba:	f001 fbaf 	bl	801f71c <__errno>
 801dfbe:	2322      	movs	r3, #34	; 0x22
 801dfc0:	6003      	str	r3, [r0, #0]
 801dfc2:	e7b4      	b.n	801df2e <_strtod_l+0x76>
 801dfc4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801dfc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dfcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dfd0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801dfd4:	e7e7      	b.n	801dfa6 <_strtod_l+0xee>
 801dfd6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801e150 <_strtod_l+0x298>
 801dfda:	e7e4      	b.n	801dfa6 <_strtod_l+0xee>
 801dfdc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dfe0:	f04f 38ff 	mov.w	r8, #4294967295
 801dfe4:	e7df      	b.n	801dfa6 <_strtod_l+0xee>
 801dfe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dfe8:	1c5a      	adds	r2, r3, #1
 801dfea:	9215      	str	r2, [sp, #84]	; 0x54
 801dfec:	785b      	ldrb	r3, [r3, #1]
 801dfee:	2b30      	cmp	r3, #48	; 0x30
 801dff0:	d0f9      	beq.n	801dfe6 <_strtod_l+0x12e>
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d09b      	beq.n	801df2e <_strtod_l+0x76>
 801dff6:	2301      	movs	r3, #1
 801dff8:	f04f 0a00 	mov.w	sl, #0
 801dffc:	9304      	str	r3, [sp, #16]
 801dffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e000:	930b      	str	r3, [sp, #44]	; 0x2c
 801e002:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801e006:	46d3      	mov	fp, sl
 801e008:	220a      	movs	r2, #10
 801e00a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e00c:	7806      	ldrb	r6, [r0, #0]
 801e00e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801e012:	b2d9      	uxtb	r1, r3
 801e014:	2909      	cmp	r1, #9
 801e016:	d926      	bls.n	801e066 <_strtod_l+0x1ae>
 801e018:	494c      	ldr	r1, [pc, #304]	; (801e14c <_strtod_l+0x294>)
 801e01a:	2201      	movs	r2, #1
 801e01c:	f001 fb16 	bl	801f64c <strncmp>
 801e020:	2800      	cmp	r0, #0
 801e022:	d030      	beq.n	801e086 <_strtod_l+0x1ce>
 801e024:	2000      	movs	r0, #0
 801e026:	4632      	mov	r2, r6
 801e028:	9005      	str	r0, [sp, #20]
 801e02a:	465e      	mov	r6, fp
 801e02c:	4603      	mov	r3, r0
 801e02e:	2a65      	cmp	r2, #101	; 0x65
 801e030:	d001      	beq.n	801e036 <_strtod_l+0x17e>
 801e032:	2a45      	cmp	r2, #69	; 0x45
 801e034:	d113      	bne.n	801e05e <_strtod_l+0x1a6>
 801e036:	b91e      	cbnz	r6, 801e040 <_strtod_l+0x188>
 801e038:	9a04      	ldr	r2, [sp, #16]
 801e03a:	4302      	orrs	r2, r0
 801e03c:	d094      	beq.n	801df68 <_strtod_l+0xb0>
 801e03e:	2600      	movs	r6, #0
 801e040:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e042:	1c6a      	adds	r2, r5, #1
 801e044:	9215      	str	r2, [sp, #84]	; 0x54
 801e046:	786a      	ldrb	r2, [r5, #1]
 801e048:	2a2b      	cmp	r2, #43	; 0x2b
 801e04a:	d074      	beq.n	801e136 <_strtod_l+0x27e>
 801e04c:	2a2d      	cmp	r2, #45	; 0x2d
 801e04e:	d078      	beq.n	801e142 <_strtod_l+0x28a>
 801e050:	f04f 0c00 	mov.w	ip, #0
 801e054:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801e058:	2909      	cmp	r1, #9
 801e05a:	d97f      	bls.n	801e15c <_strtod_l+0x2a4>
 801e05c:	9515      	str	r5, [sp, #84]	; 0x54
 801e05e:	2700      	movs	r7, #0
 801e060:	e09e      	b.n	801e1a0 <_strtod_l+0x2e8>
 801e062:	2300      	movs	r3, #0
 801e064:	e7c8      	b.n	801dff8 <_strtod_l+0x140>
 801e066:	f1bb 0f08 	cmp.w	fp, #8
 801e06a:	bfd8      	it	le
 801e06c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801e06e:	f100 0001 	add.w	r0, r0, #1
 801e072:	bfda      	itte	le
 801e074:	fb02 3301 	mlale	r3, r2, r1, r3
 801e078:	9309      	strle	r3, [sp, #36]	; 0x24
 801e07a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801e07e:	f10b 0b01 	add.w	fp, fp, #1
 801e082:	9015      	str	r0, [sp, #84]	; 0x54
 801e084:	e7c1      	b.n	801e00a <_strtod_l+0x152>
 801e086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e088:	1c5a      	adds	r2, r3, #1
 801e08a:	9215      	str	r2, [sp, #84]	; 0x54
 801e08c:	785a      	ldrb	r2, [r3, #1]
 801e08e:	f1bb 0f00 	cmp.w	fp, #0
 801e092:	d037      	beq.n	801e104 <_strtod_l+0x24c>
 801e094:	9005      	str	r0, [sp, #20]
 801e096:	465e      	mov	r6, fp
 801e098:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801e09c:	2b09      	cmp	r3, #9
 801e09e:	d912      	bls.n	801e0c6 <_strtod_l+0x20e>
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	e7c4      	b.n	801e02e <_strtod_l+0x176>
 801e0a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0a6:	1c5a      	adds	r2, r3, #1
 801e0a8:	9215      	str	r2, [sp, #84]	; 0x54
 801e0aa:	785a      	ldrb	r2, [r3, #1]
 801e0ac:	3001      	adds	r0, #1
 801e0ae:	2a30      	cmp	r2, #48	; 0x30
 801e0b0:	d0f8      	beq.n	801e0a4 <_strtod_l+0x1ec>
 801e0b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801e0b6:	2b08      	cmp	r3, #8
 801e0b8:	f200 84c1 	bhi.w	801ea3e <_strtod_l+0xb86>
 801e0bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0be:	9005      	str	r0, [sp, #20]
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0c4:	4606      	mov	r6, r0
 801e0c6:	3a30      	subs	r2, #48	; 0x30
 801e0c8:	f100 0301 	add.w	r3, r0, #1
 801e0cc:	d014      	beq.n	801e0f8 <_strtod_l+0x240>
 801e0ce:	9905      	ldr	r1, [sp, #20]
 801e0d0:	4419      	add	r1, r3
 801e0d2:	9105      	str	r1, [sp, #20]
 801e0d4:	4633      	mov	r3, r6
 801e0d6:	eb00 0c06 	add.w	ip, r0, r6
 801e0da:	210a      	movs	r1, #10
 801e0dc:	4563      	cmp	r3, ip
 801e0de:	d113      	bne.n	801e108 <_strtod_l+0x250>
 801e0e0:	1833      	adds	r3, r6, r0
 801e0e2:	2b08      	cmp	r3, #8
 801e0e4:	f106 0601 	add.w	r6, r6, #1
 801e0e8:	4406      	add	r6, r0
 801e0ea:	dc1a      	bgt.n	801e122 <_strtod_l+0x26a>
 801e0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0ee:	230a      	movs	r3, #10
 801e0f0:	fb03 2301 	mla	r3, r3, r1, r2
 801e0f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e0fa:	1c51      	adds	r1, r2, #1
 801e0fc:	9115      	str	r1, [sp, #84]	; 0x54
 801e0fe:	7852      	ldrb	r2, [r2, #1]
 801e100:	4618      	mov	r0, r3
 801e102:	e7c9      	b.n	801e098 <_strtod_l+0x1e0>
 801e104:	4658      	mov	r0, fp
 801e106:	e7d2      	b.n	801e0ae <_strtod_l+0x1f6>
 801e108:	2b08      	cmp	r3, #8
 801e10a:	f103 0301 	add.w	r3, r3, #1
 801e10e:	dc03      	bgt.n	801e118 <_strtod_l+0x260>
 801e110:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e112:	434f      	muls	r7, r1
 801e114:	9709      	str	r7, [sp, #36]	; 0x24
 801e116:	e7e1      	b.n	801e0dc <_strtod_l+0x224>
 801e118:	2b10      	cmp	r3, #16
 801e11a:	bfd8      	it	le
 801e11c:	fb01 fa0a 	mulle.w	sl, r1, sl
 801e120:	e7dc      	b.n	801e0dc <_strtod_l+0x224>
 801e122:	2e10      	cmp	r6, #16
 801e124:	bfdc      	itt	le
 801e126:	230a      	movle	r3, #10
 801e128:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801e12c:	e7e3      	b.n	801e0f6 <_strtod_l+0x23e>
 801e12e:	2300      	movs	r3, #0
 801e130:	9305      	str	r3, [sp, #20]
 801e132:	2301      	movs	r3, #1
 801e134:	e780      	b.n	801e038 <_strtod_l+0x180>
 801e136:	f04f 0c00 	mov.w	ip, #0
 801e13a:	1caa      	adds	r2, r5, #2
 801e13c:	9215      	str	r2, [sp, #84]	; 0x54
 801e13e:	78aa      	ldrb	r2, [r5, #2]
 801e140:	e788      	b.n	801e054 <_strtod_l+0x19c>
 801e142:	f04f 0c01 	mov.w	ip, #1
 801e146:	e7f8      	b.n	801e13a <_strtod_l+0x282>
 801e148:	08024028 	.word	0x08024028
 801e14c:	08024018 	.word	0x08024018
 801e150:	7ff00000 	.word	0x7ff00000
 801e154:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e156:	1c51      	adds	r1, r2, #1
 801e158:	9115      	str	r1, [sp, #84]	; 0x54
 801e15a:	7852      	ldrb	r2, [r2, #1]
 801e15c:	2a30      	cmp	r2, #48	; 0x30
 801e15e:	d0f9      	beq.n	801e154 <_strtod_l+0x29c>
 801e160:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801e164:	2908      	cmp	r1, #8
 801e166:	f63f af7a 	bhi.w	801e05e <_strtod_l+0x1a6>
 801e16a:	3a30      	subs	r2, #48	; 0x30
 801e16c:	9208      	str	r2, [sp, #32]
 801e16e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e170:	920c      	str	r2, [sp, #48]	; 0x30
 801e172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e174:	1c57      	adds	r7, r2, #1
 801e176:	9715      	str	r7, [sp, #84]	; 0x54
 801e178:	7852      	ldrb	r2, [r2, #1]
 801e17a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801e17e:	f1be 0f09 	cmp.w	lr, #9
 801e182:	d938      	bls.n	801e1f6 <_strtod_l+0x33e>
 801e184:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e186:	1a7f      	subs	r7, r7, r1
 801e188:	2f08      	cmp	r7, #8
 801e18a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801e18e:	dc03      	bgt.n	801e198 <_strtod_l+0x2e0>
 801e190:	9908      	ldr	r1, [sp, #32]
 801e192:	428f      	cmp	r7, r1
 801e194:	bfa8      	it	ge
 801e196:	460f      	movge	r7, r1
 801e198:	f1bc 0f00 	cmp.w	ip, #0
 801e19c:	d000      	beq.n	801e1a0 <_strtod_l+0x2e8>
 801e19e:	427f      	negs	r7, r7
 801e1a0:	2e00      	cmp	r6, #0
 801e1a2:	d14f      	bne.n	801e244 <_strtod_l+0x38c>
 801e1a4:	9904      	ldr	r1, [sp, #16]
 801e1a6:	4301      	orrs	r1, r0
 801e1a8:	f47f aec1 	bne.w	801df2e <_strtod_l+0x76>
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	f47f aedb 	bne.w	801df68 <_strtod_l+0xb0>
 801e1b2:	2a69      	cmp	r2, #105	; 0x69
 801e1b4:	d029      	beq.n	801e20a <_strtod_l+0x352>
 801e1b6:	dc26      	bgt.n	801e206 <_strtod_l+0x34e>
 801e1b8:	2a49      	cmp	r2, #73	; 0x49
 801e1ba:	d026      	beq.n	801e20a <_strtod_l+0x352>
 801e1bc:	2a4e      	cmp	r2, #78	; 0x4e
 801e1be:	f47f aed3 	bne.w	801df68 <_strtod_l+0xb0>
 801e1c2:	499b      	ldr	r1, [pc, #620]	; (801e430 <_strtod_l+0x578>)
 801e1c4:	a815      	add	r0, sp, #84	; 0x54
 801e1c6:	f001 fde5 	bl	801fd94 <__match>
 801e1ca:	2800      	cmp	r0, #0
 801e1cc:	f43f aecc 	beq.w	801df68 <_strtod_l+0xb0>
 801e1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1d2:	781b      	ldrb	r3, [r3, #0]
 801e1d4:	2b28      	cmp	r3, #40	; 0x28
 801e1d6:	d12f      	bne.n	801e238 <_strtod_l+0x380>
 801e1d8:	4996      	ldr	r1, [pc, #600]	; (801e434 <_strtod_l+0x57c>)
 801e1da:	aa18      	add	r2, sp, #96	; 0x60
 801e1dc:	a815      	add	r0, sp, #84	; 0x54
 801e1de:	f001 fded 	bl	801fdbc <__hexnan>
 801e1e2:	2805      	cmp	r0, #5
 801e1e4:	d128      	bne.n	801e238 <_strtod_l+0x380>
 801e1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e1e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e1ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801e1f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801e1f4:	e69b      	b.n	801df2e <_strtod_l+0x76>
 801e1f6:	9f08      	ldr	r7, [sp, #32]
 801e1f8:	210a      	movs	r1, #10
 801e1fa:	fb01 2107 	mla	r1, r1, r7, r2
 801e1fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801e202:	9208      	str	r2, [sp, #32]
 801e204:	e7b5      	b.n	801e172 <_strtod_l+0x2ba>
 801e206:	2a6e      	cmp	r2, #110	; 0x6e
 801e208:	e7d9      	b.n	801e1be <_strtod_l+0x306>
 801e20a:	498b      	ldr	r1, [pc, #556]	; (801e438 <_strtod_l+0x580>)
 801e20c:	a815      	add	r0, sp, #84	; 0x54
 801e20e:	f001 fdc1 	bl	801fd94 <__match>
 801e212:	2800      	cmp	r0, #0
 801e214:	f43f aea8 	beq.w	801df68 <_strtod_l+0xb0>
 801e218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e21a:	4988      	ldr	r1, [pc, #544]	; (801e43c <_strtod_l+0x584>)
 801e21c:	3b01      	subs	r3, #1
 801e21e:	a815      	add	r0, sp, #84	; 0x54
 801e220:	9315      	str	r3, [sp, #84]	; 0x54
 801e222:	f001 fdb7 	bl	801fd94 <__match>
 801e226:	b910      	cbnz	r0, 801e22e <_strtod_l+0x376>
 801e228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e22a:	3301      	adds	r3, #1
 801e22c:	9315      	str	r3, [sp, #84]	; 0x54
 801e22e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801e44c <_strtod_l+0x594>
 801e232:	f04f 0800 	mov.w	r8, #0
 801e236:	e67a      	b.n	801df2e <_strtod_l+0x76>
 801e238:	4881      	ldr	r0, [pc, #516]	; (801e440 <_strtod_l+0x588>)
 801e23a:	f001 faa9 	bl	801f790 <nan>
 801e23e:	ec59 8b10 	vmov	r8, r9, d0
 801e242:	e674      	b.n	801df2e <_strtod_l+0x76>
 801e244:	9b05      	ldr	r3, [sp, #20]
 801e246:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e248:	1afb      	subs	r3, r7, r3
 801e24a:	f1bb 0f00 	cmp.w	fp, #0
 801e24e:	bf08      	it	eq
 801e250:	46b3      	moveq	fp, r6
 801e252:	2e10      	cmp	r6, #16
 801e254:	9308      	str	r3, [sp, #32]
 801e256:	4635      	mov	r5, r6
 801e258:	bfa8      	it	ge
 801e25a:	2510      	movge	r5, #16
 801e25c:	f7e2 f962 	bl	8000524 <__aeabi_ui2d>
 801e260:	2e09      	cmp	r6, #9
 801e262:	4680      	mov	r8, r0
 801e264:	4689      	mov	r9, r1
 801e266:	dd13      	ble.n	801e290 <_strtod_l+0x3d8>
 801e268:	4b76      	ldr	r3, [pc, #472]	; (801e444 <_strtod_l+0x58c>)
 801e26a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e26e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e272:	f7e2 f9d1 	bl	8000618 <__aeabi_dmul>
 801e276:	4680      	mov	r8, r0
 801e278:	4650      	mov	r0, sl
 801e27a:	4689      	mov	r9, r1
 801e27c:	f7e2 f952 	bl	8000524 <__aeabi_ui2d>
 801e280:	4602      	mov	r2, r0
 801e282:	460b      	mov	r3, r1
 801e284:	4640      	mov	r0, r8
 801e286:	4649      	mov	r1, r9
 801e288:	f7e2 f810 	bl	80002ac <__adddf3>
 801e28c:	4680      	mov	r8, r0
 801e28e:	4689      	mov	r9, r1
 801e290:	2e0f      	cmp	r6, #15
 801e292:	dc38      	bgt.n	801e306 <_strtod_l+0x44e>
 801e294:	9b08      	ldr	r3, [sp, #32]
 801e296:	2b00      	cmp	r3, #0
 801e298:	f43f ae49 	beq.w	801df2e <_strtod_l+0x76>
 801e29c:	dd24      	ble.n	801e2e8 <_strtod_l+0x430>
 801e29e:	2b16      	cmp	r3, #22
 801e2a0:	dc0b      	bgt.n	801e2ba <_strtod_l+0x402>
 801e2a2:	4968      	ldr	r1, [pc, #416]	; (801e444 <_strtod_l+0x58c>)
 801e2a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2ac:	4642      	mov	r2, r8
 801e2ae:	464b      	mov	r3, r9
 801e2b0:	f7e2 f9b2 	bl	8000618 <__aeabi_dmul>
 801e2b4:	4680      	mov	r8, r0
 801e2b6:	4689      	mov	r9, r1
 801e2b8:	e639      	b.n	801df2e <_strtod_l+0x76>
 801e2ba:	9a08      	ldr	r2, [sp, #32]
 801e2bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801e2c0:	4293      	cmp	r3, r2
 801e2c2:	db20      	blt.n	801e306 <_strtod_l+0x44e>
 801e2c4:	4c5f      	ldr	r4, [pc, #380]	; (801e444 <_strtod_l+0x58c>)
 801e2c6:	f1c6 060f 	rsb	r6, r6, #15
 801e2ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801e2ce:	4642      	mov	r2, r8
 801e2d0:	464b      	mov	r3, r9
 801e2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2d6:	f7e2 f99f 	bl	8000618 <__aeabi_dmul>
 801e2da:	9b08      	ldr	r3, [sp, #32]
 801e2dc:	1b9e      	subs	r6, r3, r6
 801e2de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801e2e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e2e6:	e7e3      	b.n	801e2b0 <_strtod_l+0x3f8>
 801e2e8:	9b08      	ldr	r3, [sp, #32]
 801e2ea:	3316      	adds	r3, #22
 801e2ec:	db0b      	blt.n	801e306 <_strtod_l+0x44e>
 801e2ee:	9b05      	ldr	r3, [sp, #20]
 801e2f0:	1bdf      	subs	r7, r3, r7
 801e2f2:	4b54      	ldr	r3, [pc, #336]	; (801e444 <_strtod_l+0x58c>)
 801e2f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801e2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e2fc:	4640      	mov	r0, r8
 801e2fe:	4649      	mov	r1, r9
 801e300:	f7e2 fab4 	bl	800086c <__aeabi_ddiv>
 801e304:	e7d6      	b.n	801e2b4 <_strtod_l+0x3fc>
 801e306:	9b08      	ldr	r3, [sp, #32]
 801e308:	1b75      	subs	r5, r6, r5
 801e30a:	441d      	add	r5, r3
 801e30c:	2d00      	cmp	r5, #0
 801e30e:	dd70      	ble.n	801e3f2 <_strtod_l+0x53a>
 801e310:	f015 030f 	ands.w	r3, r5, #15
 801e314:	d00a      	beq.n	801e32c <_strtod_l+0x474>
 801e316:	494b      	ldr	r1, [pc, #300]	; (801e444 <_strtod_l+0x58c>)
 801e318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e31c:	4642      	mov	r2, r8
 801e31e:	464b      	mov	r3, r9
 801e320:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e324:	f7e2 f978 	bl	8000618 <__aeabi_dmul>
 801e328:	4680      	mov	r8, r0
 801e32a:	4689      	mov	r9, r1
 801e32c:	f035 050f 	bics.w	r5, r5, #15
 801e330:	d04d      	beq.n	801e3ce <_strtod_l+0x516>
 801e332:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801e336:	dd22      	ble.n	801e37e <_strtod_l+0x4c6>
 801e338:	2500      	movs	r5, #0
 801e33a:	46ab      	mov	fp, r5
 801e33c:	9509      	str	r5, [sp, #36]	; 0x24
 801e33e:	9505      	str	r5, [sp, #20]
 801e340:	2322      	movs	r3, #34	; 0x22
 801e342:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e44c <_strtod_l+0x594>
 801e346:	6023      	str	r3, [r4, #0]
 801e348:	f04f 0800 	mov.w	r8, #0
 801e34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e34e:	2b00      	cmp	r3, #0
 801e350:	f43f aded 	beq.w	801df2e <_strtod_l+0x76>
 801e354:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e356:	4620      	mov	r0, r4
 801e358:	f001 fe1e 	bl	801ff98 <_Bfree>
 801e35c:	9905      	ldr	r1, [sp, #20]
 801e35e:	4620      	mov	r0, r4
 801e360:	f001 fe1a 	bl	801ff98 <_Bfree>
 801e364:	4659      	mov	r1, fp
 801e366:	4620      	mov	r0, r4
 801e368:	f001 fe16 	bl	801ff98 <_Bfree>
 801e36c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e36e:	4620      	mov	r0, r4
 801e370:	f001 fe12 	bl	801ff98 <_Bfree>
 801e374:	4629      	mov	r1, r5
 801e376:	4620      	mov	r0, r4
 801e378:	f001 fe0e 	bl	801ff98 <_Bfree>
 801e37c:	e5d7      	b.n	801df2e <_strtod_l+0x76>
 801e37e:	4b32      	ldr	r3, [pc, #200]	; (801e448 <_strtod_l+0x590>)
 801e380:	9304      	str	r3, [sp, #16]
 801e382:	2300      	movs	r3, #0
 801e384:	112d      	asrs	r5, r5, #4
 801e386:	4640      	mov	r0, r8
 801e388:	4649      	mov	r1, r9
 801e38a:	469a      	mov	sl, r3
 801e38c:	2d01      	cmp	r5, #1
 801e38e:	dc21      	bgt.n	801e3d4 <_strtod_l+0x51c>
 801e390:	b10b      	cbz	r3, 801e396 <_strtod_l+0x4de>
 801e392:	4680      	mov	r8, r0
 801e394:	4689      	mov	r9, r1
 801e396:	492c      	ldr	r1, [pc, #176]	; (801e448 <_strtod_l+0x590>)
 801e398:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801e39c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801e3a0:	4642      	mov	r2, r8
 801e3a2:	464b      	mov	r3, r9
 801e3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e3a8:	f7e2 f936 	bl	8000618 <__aeabi_dmul>
 801e3ac:	4b27      	ldr	r3, [pc, #156]	; (801e44c <_strtod_l+0x594>)
 801e3ae:	460a      	mov	r2, r1
 801e3b0:	400b      	ands	r3, r1
 801e3b2:	4927      	ldr	r1, [pc, #156]	; (801e450 <_strtod_l+0x598>)
 801e3b4:	428b      	cmp	r3, r1
 801e3b6:	4680      	mov	r8, r0
 801e3b8:	d8be      	bhi.n	801e338 <_strtod_l+0x480>
 801e3ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e3be:	428b      	cmp	r3, r1
 801e3c0:	bf86      	itte	hi
 801e3c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801e454 <_strtod_l+0x59c>
 801e3c6:	f04f 38ff 	movhi.w	r8, #4294967295
 801e3ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	9304      	str	r3, [sp, #16]
 801e3d2:	e07b      	b.n	801e4cc <_strtod_l+0x614>
 801e3d4:	07ea      	lsls	r2, r5, #31
 801e3d6:	d505      	bpl.n	801e3e4 <_strtod_l+0x52c>
 801e3d8:	9b04      	ldr	r3, [sp, #16]
 801e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3de:	f7e2 f91b 	bl	8000618 <__aeabi_dmul>
 801e3e2:	2301      	movs	r3, #1
 801e3e4:	9a04      	ldr	r2, [sp, #16]
 801e3e6:	3208      	adds	r2, #8
 801e3e8:	f10a 0a01 	add.w	sl, sl, #1
 801e3ec:	106d      	asrs	r5, r5, #1
 801e3ee:	9204      	str	r2, [sp, #16]
 801e3f0:	e7cc      	b.n	801e38c <_strtod_l+0x4d4>
 801e3f2:	d0ec      	beq.n	801e3ce <_strtod_l+0x516>
 801e3f4:	426d      	negs	r5, r5
 801e3f6:	f015 020f 	ands.w	r2, r5, #15
 801e3fa:	d00a      	beq.n	801e412 <_strtod_l+0x55a>
 801e3fc:	4b11      	ldr	r3, [pc, #68]	; (801e444 <_strtod_l+0x58c>)
 801e3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e402:	4640      	mov	r0, r8
 801e404:	4649      	mov	r1, r9
 801e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e40a:	f7e2 fa2f 	bl	800086c <__aeabi_ddiv>
 801e40e:	4680      	mov	r8, r0
 801e410:	4689      	mov	r9, r1
 801e412:	112d      	asrs	r5, r5, #4
 801e414:	d0db      	beq.n	801e3ce <_strtod_l+0x516>
 801e416:	2d1f      	cmp	r5, #31
 801e418:	dd1e      	ble.n	801e458 <_strtod_l+0x5a0>
 801e41a:	2500      	movs	r5, #0
 801e41c:	46ab      	mov	fp, r5
 801e41e:	9509      	str	r5, [sp, #36]	; 0x24
 801e420:	9505      	str	r5, [sp, #20]
 801e422:	2322      	movs	r3, #34	; 0x22
 801e424:	f04f 0800 	mov.w	r8, #0
 801e428:	f04f 0900 	mov.w	r9, #0
 801e42c:	6023      	str	r3, [r4, #0]
 801e42e:	e78d      	b.n	801e34c <_strtod_l+0x494>
 801e430:	08024023 	.word	0x08024023
 801e434:	0802403c 	.word	0x0802403c
 801e438:	0802401a 	.word	0x0802401a
 801e43c:	0802401d 	.word	0x0802401d
 801e440:	080243d2 	.word	0x080243d2
 801e444:	08024290 	.word	0x08024290
 801e448:	08024268 	.word	0x08024268
 801e44c:	7ff00000 	.word	0x7ff00000
 801e450:	7ca00000 	.word	0x7ca00000
 801e454:	7fefffff 	.word	0x7fefffff
 801e458:	f015 0310 	ands.w	r3, r5, #16
 801e45c:	bf18      	it	ne
 801e45e:	236a      	movne	r3, #106	; 0x6a
 801e460:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e804 <_strtod_l+0x94c>
 801e464:	9304      	str	r3, [sp, #16]
 801e466:	4640      	mov	r0, r8
 801e468:	4649      	mov	r1, r9
 801e46a:	2300      	movs	r3, #0
 801e46c:	07ea      	lsls	r2, r5, #31
 801e46e:	d504      	bpl.n	801e47a <_strtod_l+0x5c2>
 801e470:	e9da 2300 	ldrd	r2, r3, [sl]
 801e474:	f7e2 f8d0 	bl	8000618 <__aeabi_dmul>
 801e478:	2301      	movs	r3, #1
 801e47a:	106d      	asrs	r5, r5, #1
 801e47c:	f10a 0a08 	add.w	sl, sl, #8
 801e480:	d1f4      	bne.n	801e46c <_strtod_l+0x5b4>
 801e482:	b10b      	cbz	r3, 801e488 <_strtod_l+0x5d0>
 801e484:	4680      	mov	r8, r0
 801e486:	4689      	mov	r9, r1
 801e488:	9b04      	ldr	r3, [sp, #16]
 801e48a:	b1bb      	cbz	r3, 801e4bc <_strtod_l+0x604>
 801e48c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e490:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e494:	2b00      	cmp	r3, #0
 801e496:	4649      	mov	r1, r9
 801e498:	dd10      	ble.n	801e4bc <_strtod_l+0x604>
 801e49a:	2b1f      	cmp	r3, #31
 801e49c:	f340 811e 	ble.w	801e6dc <_strtod_l+0x824>
 801e4a0:	2b34      	cmp	r3, #52	; 0x34
 801e4a2:	bfde      	ittt	le
 801e4a4:	f04f 33ff 	movle.w	r3, #4294967295
 801e4a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801e4ac:	4093      	lslle	r3, r2
 801e4ae:	f04f 0800 	mov.w	r8, #0
 801e4b2:	bfcc      	ite	gt
 801e4b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e4b8:	ea03 0901 	andle.w	r9, r3, r1
 801e4bc:	2200      	movs	r2, #0
 801e4be:	2300      	movs	r3, #0
 801e4c0:	4640      	mov	r0, r8
 801e4c2:	4649      	mov	r1, r9
 801e4c4:	f7e2 fb10 	bl	8000ae8 <__aeabi_dcmpeq>
 801e4c8:	2800      	cmp	r0, #0
 801e4ca:	d1a6      	bne.n	801e41a <_strtod_l+0x562>
 801e4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4ce:	9300      	str	r3, [sp, #0]
 801e4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e4d2:	4633      	mov	r3, r6
 801e4d4:	465a      	mov	r2, fp
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	f001 fdc6 	bl	8020068 <__s2b>
 801e4dc:	9009      	str	r0, [sp, #36]	; 0x24
 801e4de:	2800      	cmp	r0, #0
 801e4e0:	f43f af2a 	beq.w	801e338 <_strtod_l+0x480>
 801e4e4:	9a08      	ldr	r2, [sp, #32]
 801e4e6:	9b05      	ldr	r3, [sp, #20]
 801e4e8:	2a00      	cmp	r2, #0
 801e4ea:	eba3 0307 	sub.w	r3, r3, r7
 801e4ee:	bfa8      	it	ge
 801e4f0:	2300      	movge	r3, #0
 801e4f2:	930c      	str	r3, [sp, #48]	; 0x30
 801e4f4:	2500      	movs	r5, #0
 801e4f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e4fa:	9312      	str	r3, [sp, #72]	; 0x48
 801e4fc:	46ab      	mov	fp, r5
 801e4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e500:	4620      	mov	r0, r4
 801e502:	6859      	ldr	r1, [r3, #4]
 801e504:	f001 fd08 	bl	801ff18 <_Balloc>
 801e508:	9005      	str	r0, [sp, #20]
 801e50a:	2800      	cmp	r0, #0
 801e50c:	f43f af18 	beq.w	801e340 <_strtod_l+0x488>
 801e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e512:	691a      	ldr	r2, [r3, #16]
 801e514:	3202      	adds	r2, #2
 801e516:	f103 010c 	add.w	r1, r3, #12
 801e51a:	0092      	lsls	r2, r2, #2
 801e51c:	300c      	adds	r0, #12
 801e51e:	f001 f929 	bl	801f774 <memcpy>
 801e522:	ec49 8b10 	vmov	d0, r8, r9
 801e526:	aa18      	add	r2, sp, #96	; 0x60
 801e528:	a917      	add	r1, sp, #92	; 0x5c
 801e52a:	4620      	mov	r0, r4
 801e52c:	f002 f8d0 	bl	80206d0 <__d2b>
 801e530:	ec49 8b18 	vmov	d8, r8, r9
 801e534:	9016      	str	r0, [sp, #88]	; 0x58
 801e536:	2800      	cmp	r0, #0
 801e538:	f43f af02 	beq.w	801e340 <_strtod_l+0x488>
 801e53c:	2101      	movs	r1, #1
 801e53e:	4620      	mov	r0, r4
 801e540:	f001 fe2a 	bl	8020198 <__i2b>
 801e544:	4683      	mov	fp, r0
 801e546:	2800      	cmp	r0, #0
 801e548:	f43f aefa 	beq.w	801e340 <_strtod_l+0x488>
 801e54c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e54e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e550:	2e00      	cmp	r6, #0
 801e552:	bfab      	itete	ge
 801e554:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801e556:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801e558:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801e55a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801e55e:	bfac      	ite	ge
 801e560:	eb06 0a03 	addge.w	sl, r6, r3
 801e564:	1b9f      	sublt	r7, r3, r6
 801e566:	9b04      	ldr	r3, [sp, #16]
 801e568:	1af6      	subs	r6, r6, r3
 801e56a:	4416      	add	r6, r2
 801e56c:	4ba0      	ldr	r3, [pc, #640]	; (801e7f0 <_strtod_l+0x938>)
 801e56e:	3e01      	subs	r6, #1
 801e570:	429e      	cmp	r6, r3
 801e572:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e576:	f280 80c4 	bge.w	801e702 <_strtod_l+0x84a>
 801e57a:	1b9b      	subs	r3, r3, r6
 801e57c:	2b1f      	cmp	r3, #31
 801e57e:	eba2 0203 	sub.w	r2, r2, r3
 801e582:	f04f 0101 	mov.w	r1, #1
 801e586:	f300 80b0 	bgt.w	801e6ea <_strtod_l+0x832>
 801e58a:	fa01 f303 	lsl.w	r3, r1, r3
 801e58e:	930e      	str	r3, [sp, #56]	; 0x38
 801e590:	2300      	movs	r3, #0
 801e592:	930d      	str	r3, [sp, #52]	; 0x34
 801e594:	eb0a 0602 	add.w	r6, sl, r2
 801e598:	9b04      	ldr	r3, [sp, #16]
 801e59a:	45b2      	cmp	sl, r6
 801e59c:	4417      	add	r7, r2
 801e59e:	441f      	add	r7, r3
 801e5a0:	4653      	mov	r3, sl
 801e5a2:	bfa8      	it	ge
 801e5a4:	4633      	movge	r3, r6
 801e5a6:	42bb      	cmp	r3, r7
 801e5a8:	bfa8      	it	ge
 801e5aa:	463b      	movge	r3, r7
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	bfc2      	ittt	gt
 801e5b0:	1af6      	subgt	r6, r6, r3
 801e5b2:	1aff      	subgt	r7, r7, r3
 801e5b4:	ebaa 0a03 	subgt.w	sl, sl, r3
 801e5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	dd17      	ble.n	801e5ee <_strtod_l+0x736>
 801e5be:	4659      	mov	r1, fp
 801e5c0:	461a      	mov	r2, r3
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	f001 fea8 	bl	8020318 <__pow5mult>
 801e5c8:	4683      	mov	fp, r0
 801e5ca:	2800      	cmp	r0, #0
 801e5cc:	f43f aeb8 	beq.w	801e340 <_strtod_l+0x488>
 801e5d0:	4601      	mov	r1, r0
 801e5d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e5d4:	4620      	mov	r0, r4
 801e5d6:	f001 fdf5 	bl	80201c4 <__multiply>
 801e5da:	900b      	str	r0, [sp, #44]	; 0x2c
 801e5dc:	2800      	cmp	r0, #0
 801e5de:	f43f aeaf 	beq.w	801e340 <_strtod_l+0x488>
 801e5e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	f001 fcd7 	bl	801ff98 <_Bfree>
 801e5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5ec:	9316      	str	r3, [sp, #88]	; 0x58
 801e5ee:	2e00      	cmp	r6, #0
 801e5f0:	f300 808c 	bgt.w	801e70c <_strtod_l+0x854>
 801e5f4:	9b08      	ldr	r3, [sp, #32]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	dd08      	ble.n	801e60c <_strtod_l+0x754>
 801e5fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e5fc:	9905      	ldr	r1, [sp, #20]
 801e5fe:	4620      	mov	r0, r4
 801e600:	f001 fe8a 	bl	8020318 <__pow5mult>
 801e604:	9005      	str	r0, [sp, #20]
 801e606:	2800      	cmp	r0, #0
 801e608:	f43f ae9a 	beq.w	801e340 <_strtod_l+0x488>
 801e60c:	2f00      	cmp	r7, #0
 801e60e:	dd08      	ble.n	801e622 <_strtod_l+0x76a>
 801e610:	9905      	ldr	r1, [sp, #20]
 801e612:	463a      	mov	r2, r7
 801e614:	4620      	mov	r0, r4
 801e616:	f001 fed9 	bl	80203cc <__lshift>
 801e61a:	9005      	str	r0, [sp, #20]
 801e61c:	2800      	cmp	r0, #0
 801e61e:	f43f ae8f 	beq.w	801e340 <_strtod_l+0x488>
 801e622:	f1ba 0f00 	cmp.w	sl, #0
 801e626:	dd08      	ble.n	801e63a <_strtod_l+0x782>
 801e628:	4659      	mov	r1, fp
 801e62a:	4652      	mov	r2, sl
 801e62c:	4620      	mov	r0, r4
 801e62e:	f001 fecd 	bl	80203cc <__lshift>
 801e632:	4683      	mov	fp, r0
 801e634:	2800      	cmp	r0, #0
 801e636:	f43f ae83 	beq.w	801e340 <_strtod_l+0x488>
 801e63a:	9a05      	ldr	r2, [sp, #20]
 801e63c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e63e:	4620      	mov	r0, r4
 801e640:	f001 ff4c 	bl	80204dc <__mdiff>
 801e644:	4605      	mov	r5, r0
 801e646:	2800      	cmp	r0, #0
 801e648:	f43f ae7a 	beq.w	801e340 <_strtod_l+0x488>
 801e64c:	68c3      	ldr	r3, [r0, #12]
 801e64e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e650:	2300      	movs	r3, #0
 801e652:	60c3      	str	r3, [r0, #12]
 801e654:	4659      	mov	r1, fp
 801e656:	f001 ff25 	bl	80204a4 <__mcmp>
 801e65a:	2800      	cmp	r0, #0
 801e65c:	da60      	bge.n	801e720 <_strtod_l+0x868>
 801e65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e660:	ea53 0308 	orrs.w	r3, r3, r8
 801e664:	f040 8084 	bne.w	801e770 <_strtod_l+0x8b8>
 801e668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d17f      	bne.n	801e770 <_strtod_l+0x8b8>
 801e670:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e674:	0d1b      	lsrs	r3, r3, #20
 801e676:	051b      	lsls	r3, r3, #20
 801e678:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e67c:	d978      	bls.n	801e770 <_strtod_l+0x8b8>
 801e67e:	696b      	ldr	r3, [r5, #20]
 801e680:	b913      	cbnz	r3, 801e688 <_strtod_l+0x7d0>
 801e682:	692b      	ldr	r3, [r5, #16]
 801e684:	2b01      	cmp	r3, #1
 801e686:	dd73      	ble.n	801e770 <_strtod_l+0x8b8>
 801e688:	4629      	mov	r1, r5
 801e68a:	2201      	movs	r2, #1
 801e68c:	4620      	mov	r0, r4
 801e68e:	f001 fe9d 	bl	80203cc <__lshift>
 801e692:	4659      	mov	r1, fp
 801e694:	4605      	mov	r5, r0
 801e696:	f001 ff05 	bl	80204a4 <__mcmp>
 801e69a:	2800      	cmp	r0, #0
 801e69c:	dd68      	ble.n	801e770 <_strtod_l+0x8b8>
 801e69e:	9904      	ldr	r1, [sp, #16]
 801e6a0:	4a54      	ldr	r2, [pc, #336]	; (801e7f4 <_strtod_l+0x93c>)
 801e6a2:	464b      	mov	r3, r9
 801e6a4:	2900      	cmp	r1, #0
 801e6a6:	f000 8084 	beq.w	801e7b2 <_strtod_l+0x8fa>
 801e6aa:	ea02 0109 	and.w	r1, r2, r9
 801e6ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e6b2:	dc7e      	bgt.n	801e7b2 <_strtod_l+0x8fa>
 801e6b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e6b8:	f77f aeb3 	ble.w	801e422 <_strtod_l+0x56a>
 801e6bc:	4b4e      	ldr	r3, [pc, #312]	; (801e7f8 <_strtod_l+0x940>)
 801e6be:	4640      	mov	r0, r8
 801e6c0:	4649      	mov	r1, r9
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	f7e1 ffa8 	bl	8000618 <__aeabi_dmul>
 801e6c8:	4b4a      	ldr	r3, [pc, #296]	; (801e7f4 <_strtod_l+0x93c>)
 801e6ca:	400b      	ands	r3, r1
 801e6cc:	4680      	mov	r8, r0
 801e6ce:	4689      	mov	r9, r1
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	f47f ae3f 	bne.w	801e354 <_strtod_l+0x49c>
 801e6d6:	2322      	movs	r3, #34	; 0x22
 801e6d8:	6023      	str	r3, [r4, #0]
 801e6da:	e63b      	b.n	801e354 <_strtod_l+0x49c>
 801e6dc:	f04f 32ff 	mov.w	r2, #4294967295
 801e6e0:	fa02 f303 	lsl.w	r3, r2, r3
 801e6e4:	ea03 0808 	and.w	r8, r3, r8
 801e6e8:	e6e8      	b.n	801e4bc <_strtod_l+0x604>
 801e6ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e6ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e6f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e6f6:	36e2      	adds	r6, #226	; 0xe2
 801e6f8:	fa01 f306 	lsl.w	r3, r1, r6
 801e6fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e700:	e748      	b.n	801e594 <_strtod_l+0x6dc>
 801e702:	2100      	movs	r1, #0
 801e704:	2301      	movs	r3, #1
 801e706:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e70a:	e743      	b.n	801e594 <_strtod_l+0x6dc>
 801e70c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e70e:	4632      	mov	r2, r6
 801e710:	4620      	mov	r0, r4
 801e712:	f001 fe5b 	bl	80203cc <__lshift>
 801e716:	9016      	str	r0, [sp, #88]	; 0x58
 801e718:	2800      	cmp	r0, #0
 801e71a:	f47f af6b 	bne.w	801e5f4 <_strtod_l+0x73c>
 801e71e:	e60f      	b.n	801e340 <_strtod_l+0x488>
 801e720:	46ca      	mov	sl, r9
 801e722:	d171      	bne.n	801e808 <_strtod_l+0x950>
 801e724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e72a:	b352      	cbz	r2, 801e782 <_strtod_l+0x8ca>
 801e72c:	4a33      	ldr	r2, [pc, #204]	; (801e7fc <_strtod_l+0x944>)
 801e72e:	4293      	cmp	r3, r2
 801e730:	d12a      	bne.n	801e788 <_strtod_l+0x8d0>
 801e732:	9b04      	ldr	r3, [sp, #16]
 801e734:	4641      	mov	r1, r8
 801e736:	b1fb      	cbz	r3, 801e778 <_strtod_l+0x8c0>
 801e738:	4b2e      	ldr	r3, [pc, #184]	; (801e7f4 <_strtod_l+0x93c>)
 801e73a:	ea09 0303 	and.w	r3, r9, r3
 801e73e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e742:	f04f 32ff 	mov.w	r2, #4294967295
 801e746:	d81a      	bhi.n	801e77e <_strtod_l+0x8c6>
 801e748:	0d1b      	lsrs	r3, r3, #20
 801e74a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e74e:	fa02 f303 	lsl.w	r3, r2, r3
 801e752:	4299      	cmp	r1, r3
 801e754:	d118      	bne.n	801e788 <_strtod_l+0x8d0>
 801e756:	4b2a      	ldr	r3, [pc, #168]	; (801e800 <_strtod_l+0x948>)
 801e758:	459a      	cmp	sl, r3
 801e75a:	d102      	bne.n	801e762 <_strtod_l+0x8aa>
 801e75c:	3101      	adds	r1, #1
 801e75e:	f43f adef 	beq.w	801e340 <_strtod_l+0x488>
 801e762:	4b24      	ldr	r3, [pc, #144]	; (801e7f4 <_strtod_l+0x93c>)
 801e764:	ea0a 0303 	and.w	r3, sl, r3
 801e768:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e76c:	f04f 0800 	mov.w	r8, #0
 801e770:	9b04      	ldr	r3, [sp, #16]
 801e772:	2b00      	cmp	r3, #0
 801e774:	d1a2      	bne.n	801e6bc <_strtod_l+0x804>
 801e776:	e5ed      	b.n	801e354 <_strtod_l+0x49c>
 801e778:	f04f 33ff 	mov.w	r3, #4294967295
 801e77c:	e7e9      	b.n	801e752 <_strtod_l+0x89a>
 801e77e:	4613      	mov	r3, r2
 801e780:	e7e7      	b.n	801e752 <_strtod_l+0x89a>
 801e782:	ea53 0308 	orrs.w	r3, r3, r8
 801e786:	d08a      	beq.n	801e69e <_strtod_l+0x7e6>
 801e788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e78a:	b1e3      	cbz	r3, 801e7c6 <_strtod_l+0x90e>
 801e78c:	ea13 0f0a 	tst.w	r3, sl
 801e790:	d0ee      	beq.n	801e770 <_strtod_l+0x8b8>
 801e792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e794:	9a04      	ldr	r2, [sp, #16]
 801e796:	4640      	mov	r0, r8
 801e798:	4649      	mov	r1, r9
 801e79a:	b1c3      	cbz	r3, 801e7ce <_strtod_l+0x916>
 801e79c:	f7ff fb70 	bl	801de80 <sulp>
 801e7a0:	4602      	mov	r2, r0
 801e7a2:	460b      	mov	r3, r1
 801e7a4:	ec51 0b18 	vmov	r0, r1, d8
 801e7a8:	f7e1 fd80 	bl	80002ac <__adddf3>
 801e7ac:	4680      	mov	r8, r0
 801e7ae:	4689      	mov	r9, r1
 801e7b0:	e7de      	b.n	801e770 <_strtod_l+0x8b8>
 801e7b2:	4013      	ands	r3, r2
 801e7b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e7b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e7bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e7c0:	f04f 38ff 	mov.w	r8, #4294967295
 801e7c4:	e7d4      	b.n	801e770 <_strtod_l+0x8b8>
 801e7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7c8:	ea13 0f08 	tst.w	r3, r8
 801e7cc:	e7e0      	b.n	801e790 <_strtod_l+0x8d8>
 801e7ce:	f7ff fb57 	bl	801de80 <sulp>
 801e7d2:	4602      	mov	r2, r0
 801e7d4:	460b      	mov	r3, r1
 801e7d6:	ec51 0b18 	vmov	r0, r1, d8
 801e7da:	f7e1 fd65 	bl	80002a8 <__aeabi_dsub>
 801e7de:	2200      	movs	r2, #0
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	4680      	mov	r8, r0
 801e7e4:	4689      	mov	r9, r1
 801e7e6:	f7e2 f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 801e7ea:	2800      	cmp	r0, #0
 801e7ec:	d0c0      	beq.n	801e770 <_strtod_l+0x8b8>
 801e7ee:	e618      	b.n	801e422 <_strtod_l+0x56a>
 801e7f0:	fffffc02 	.word	0xfffffc02
 801e7f4:	7ff00000 	.word	0x7ff00000
 801e7f8:	39500000 	.word	0x39500000
 801e7fc:	000fffff 	.word	0x000fffff
 801e800:	7fefffff 	.word	0x7fefffff
 801e804:	08024050 	.word	0x08024050
 801e808:	4659      	mov	r1, fp
 801e80a:	4628      	mov	r0, r5
 801e80c:	f001 ffba 	bl	8020784 <__ratio>
 801e810:	ec57 6b10 	vmov	r6, r7, d0
 801e814:	ee10 0a10 	vmov	r0, s0
 801e818:	2200      	movs	r2, #0
 801e81a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e81e:	4639      	mov	r1, r7
 801e820:	f7e2 f976 	bl	8000b10 <__aeabi_dcmple>
 801e824:	2800      	cmp	r0, #0
 801e826:	d071      	beq.n	801e90c <_strtod_l+0xa54>
 801e828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d17c      	bne.n	801e928 <_strtod_l+0xa70>
 801e82e:	f1b8 0f00 	cmp.w	r8, #0
 801e832:	d15a      	bne.n	801e8ea <_strtod_l+0xa32>
 801e834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d15d      	bne.n	801e8f8 <_strtod_l+0xa40>
 801e83c:	4b90      	ldr	r3, [pc, #576]	; (801ea80 <_strtod_l+0xbc8>)
 801e83e:	2200      	movs	r2, #0
 801e840:	4630      	mov	r0, r6
 801e842:	4639      	mov	r1, r7
 801e844:	f7e2 f95a 	bl	8000afc <__aeabi_dcmplt>
 801e848:	2800      	cmp	r0, #0
 801e84a:	d15c      	bne.n	801e906 <_strtod_l+0xa4e>
 801e84c:	4630      	mov	r0, r6
 801e84e:	4639      	mov	r1, r7
 801e850:	4b8c      	ldr	r3, [pc, #560]	; (801ea84 <_strtod_l+0xbcc>)
 801e852:	2200      	movs	r2, #0
 801e854:	f7e1 fee0 	bl	8000618 <__aeabi_dmul>
 801e858:	4606      	mov	r6, r0
 801e85a:	460f      	mov	r7, r1
 801e85c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e860:	9606      	str	r6, [sp, #24]
 801e862:	9307      	str	r3, [sp, #28]
 801e864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e868:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e86c:	4b86      	ldr	r3, [pc, #536]	; (801ea88 <_strtod_l+0xbd0>)
 801e86e:	ea0a 0303 	and.w	r3, sl, r3
 801e872:	930d      	str	r3, [sp, #52]	; 0x34
 801e874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e876:	4b85      	ldr	r3, [pc, #532]	; (801ea8c <_strtod_l+0xbd4>)
 801e878:	429a      	cmp	r2, r3
 801e87a:	f040 8090 	bne.w	801e99e <_strtod_l+0xae6>
 801e87e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e882:	ec49 8b10 	vmov	d0, r8, r9
 801e886:	f001 feb3 	bl	80205f0 <__ulp>
 801e88a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e88e:	ec51 0b10 	vmov	r0, r1, d0
 801e892:	f7e1 fec1 	bl	8000618 <__aeabi_dmul>
 801e896:	4642      	mov	r2, r8
 801e898:	464b      	mov	r3, r9
 801e89a:	f7e1 fd07 	bl	80002ac <__adddf3>
 801e89e:	460b      	mov	r3, r1
 801e8a0:	4979      	ldr	r1, [pc, #484]	; (801ea88 <_strtod_l+0xbd0>)
 801e8a2:	4a7b      	ldr	r2, [pc, #492]	; (801ea90 <_strtod_l+0xbd8>)
 801e8a4:	4019      	ands	r1, r3
 801e8a6:	4291      	cmp	r1, r2
 801e8a8:	4680      	mov	r8, r0
 801e8aa:	d944      	bls.n	801e936 <_strtod_l+0xa7e>
 801e8ac:	ee18 2a90 	vmov	r2, s17
 801e8b0:	4b78      	ldr	r3, [pc, #480]	; (801ea94 <_strtod_l+0xbdc>)
 801e8b2:	429a      	cmp	r2, r3
 801e8b4:	d104      	bne.n	801e8c0 <_strtod_l+0xa08>
 801e8b6:	ee18 3a10 	vmov	r3, s16
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	f43f ad40 	beq.w	801e340 <_strtod_l+0x488>
 801e8c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801ea94 <_strtod_l+0xbdc>
 801e8c4:	f04f 38ff 	mov.w	r8, #4294967295
 801e8c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e8ca:	4620      	mov	r0, r4
 801e8cc:	f001 fb64 	bl	801ff98 <_Bfree>
 801e8d0:	9905      	ldr	r1, [sp, #20]
 801e8d2:	4620      	mov	r0, r4
 801e8d4:	f001 fb60 	bl	801ff98 <_Bfree>
 801e8d8:	4659      	mov	r1, fp
 801e8da:	4620      	mov	r0, r4
 801e8dc:	f001 fb5c 	bl	801ff98 <_Bfree>
 801e8e0:	4629      	mov	r1, r5
 801e8e2:	4620      	mov	r0, r4
 801e8e4:	f001 fb58 	bl	801ff98 <_Bfree>
 801e8e8:	e609      	b.n	801e4fe <_strtod_l+0x646>
 801e8ea:	f1b8 0f01 	cmp.w	r8, #1
 801e8ee:	d103      	bne.n	801e8f8 <_strtod_l+0xa40>
 801e8f0:	f1b9 0f00 	cmp.w	r9, #0
 801e8f4:	f43f ad95 	beq.w	801e422 <_strtod_l+0x56a>
 801e8f8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801ea50 <_strtod_l+0xb98>
 801e8fc:	4f60      	ldr	r7, [pc, #384]	; (801ea80 <_strtod_l+0xbc8>)
 801e8fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e902:	2600      	movs	r6, #0
 801e904:	e7ae      	b.n	801e864 <_strtod_l+0x9ac>
 801e906:	4f5f      	ldr	r7, [pc, #380]	; (801ea84 <_strtod_l+0xbcc>)
 801e908:	2600      	movs	r6, #0
 801e90a:	e7a7      	b.n	801e85c <_strtod_l+0x9a4>
 801e90c:	4b5d      	ldr	r3, [pc, #372]	; (801ea84 <_strtod_l+0xbcc>)
 801e90e:	4630      	mov	r0, r6
 801e910:	4639      	mov	r1, r7
 801e912:	2200      	movs	r2, #0
 801e914:	f7e1 fe80 	bl	8000618 <__aeabi_dmul>
 801e918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e91a:	4606      	mov	r6, r0
 801e91c:	460f      	mov	r7, r1
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d09c      	beq.n	801e85c <_strtod_l+0x9a4>
 801e922:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e926:	e79d      	b.n	801e864 <_strtod_l+0x9ac>
 801e928:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801ea58 <_strtod_l+0xba0>
 801e92c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e930:	ec57 6b17 	vmov	r6, r7, d7
 801e934:	e796      	b.n	801e864 <_strtod_l+0x9ac>
 801e936:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e93a:	9b04      	ldr	r3, [sp, #16]
 801e93c:	46ca      	mov	sl, r9
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d1c2      	bne.n	801e8c8 <_strtod_l+0xa10>
 801e942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e948:	0d1b      	lsrs	r3, r3, #20
 801e94a:	051b      	lsls	r3, r3, #20
 801e94c:	429a      	cmp	r2, r3
 801e94e:	d1bb      	bne.n	801e8c8 <_strtod_l+0xa10>
 801e950:	4630      	mov	r0, r6
 801e952:	4639      	mov	r1, r7
 801e954:	f7e2 f998 	bl	8000c88 <__aeabi_d2lz>
 801e958:	f7e1 fe30 	bl	80005bc <__aeabi_l2d>
 801e95c:	4602      	mov	r2, r0
 801e95e:	460b      	mov	r3, r1
 801e960:	4630      	mov	r0, r6
 801e962:	4639      	mov	r1, r7
 801e964:	f7e1 fca0 	bl	80002a8 <__aeabi_dsub>
 801e968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e96a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e96e:	ea43 0308 	orr.w	r3, r3, r8
 801e972:	4313      	orrs	r3, r2
 801e974:	4606      	mov	r6, r0
 801e976:	460f      	mov	r7, r1
 801e978:	d054      	beq.n	801ea24 <_strtod_l+0xb6c>
 801e97a:	a339      	add	r3, pc, #228	; (adr r3, 801ea60 <_strtod_l+0xba8>)
 801e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e980:	f7e2 f8bc 	bl	8000afc <__aeabi_dcmplt>
 801e984:	2800      	cmp	r0, #0
 801e986:	f47f ace5 	bne.w	801e354 <_strtod_l+0x49c>
 801e98a:	a337      	add	r3, pc, #220	; (adr r3, 801ea68 <_strtod_l+0xbb0>)
 801e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e990:	4630      	mov	r0, r6
 801e992:	4639      	mov	r1, r7
 801e994:	f7e2 f8d0 	bl	8000b38 <__aeabi_dcmpgt>
 801e998:	2800      	cmp	r0, #0
 801e99a:	d095      	beq.n	801e8c8 <_strtod_l+0xa10>
 801e99c:	e4da      	b.n	801e354 <_strtod_l+0x49c>
 801e99e:	9b04      	ldr	r3, [sp, #16]
 801e9a0:	b333      	cbz	r3, 801e9f0 <_strtod_l+0xb38>
 801e9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e9a8:	d822      	bhi.n	801e9f0 <_strtod_l+0xb38>
 801e9aa:	a331      	add	r3, pc, #196	; (adr r3, 801ea70 <_strtod_l+0xbb8>)
 801e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9b0:	4630      	mov	r0, r6
 801e9b2:	4639      	mov	r1, r7
 801e9b4:	f7e2 f8ac 	bl	8000b10 <__aeabi_dcmple>
 801e9b8:	b1a0      	cbz	r0, 801e9e4 <_strtod_l+0xb2c>
 801e9ba:	4639      	mov	r1, r7
 801e9bc:	4630      	mov	r0, r6
 801e9be:	f7e2 f8db 	bl	8000b78 <__aeabi_d2uiz>
 801e9c2:	2801      	cmp	r0, #1
 801e9c4:	bf38      	it	cc
 801e9c6:	2001      	movcc	r0, #1
 801e9c8:	f7e1 fdac 	bl	8000524 <__aeabi_ui2d>
 801e9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9ce:	4606      	mov	r6, r0
 801e9d0:	460f      	mov	r7, r1
 801e9d2:	bb23      	cbnz	r3, 801ea1e <_strtod_l+0xb66>
 801e9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e9d8:	9010      	str	r0, [sp, #64]	; 0x40
 801e9da:	9311      	str	r3, [sp, #68]	; 0x44
 801e9dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e9e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e9e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e9ec:	1a9b      	subs	r3, r3, r2
 801e9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e9f4:	eeb0 0a48 	vmov.f32	s0, s16
 801e9f8:	eef0 0a68 	vmov.f32	s1, s17
 801e9fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ea00:	f001 fdf6 	bl	80205f0 <__ulp>
 801ea04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801ea08:	ec53 2b10 	vmov	r2, r3, d0
 801ea0c:	f7e1 fe04 	bl	8000618 <__aeabi_dmul>
 801ea10:	ec53 2b18 	vmov	r2, r3, d8
 801ea14:	f7e1 fc4a 	bl	80002ac <__adddf3>
 801ea18:	4680      	mov	r8, r0
 801ea1a:	4689      	mov	r9, r1
 801ea1c:	e78d      	b.n	801e93a <_strtod_l+0xa82>
 801ea1e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801ea22:	e7db      	b.n	801e9dc <_strtod_l+0xb24>
 801ea24:	a314      	add	r3, pc, #80	; (adr r3, 801ea78 <_strtod_l+0xbc0>)
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	f7e2 f867 	bl	8000afc <__aeabi_dcmplt>
 801ea2e:	e7b3      	b.n	801e998 <_strtod_l+0xae0>
 801ea30:	2300      	movs	r3, #0
 801ea32:	930a      	str	r3, [sp, #40]	; 0x28
 801ea34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ea38:	6013      	str	r3, [r2, #0]
 801ea3a:	f7ff ba7c 	b.w	801df36 <_strtod_l+0x7e>
 801ea3e:	2a65      	cmp	r2, #101	; 0x65
 801ea40:	f43f ab75 	beq.w	801e12e <_strtod_l+0x276>
 801ea44:	2a45      	cmp	r2, #69	; 0x45
 801ea46:	f43f ab72 	beq.w	801e12e <_strtod_l+0x276>
 801ea4a:	2301      	movs	r3, #1
 801ea4c:	f7ff bbaa 	b.w	801e1a4 <_strtod_l+0x2ec>
 801ea50:	00000000 	.word	0x00000000
 801ea54:	bff00000 	.word	0xbff00000
 801ea58:	00000000 	.word	0x00000000
 801ea5c:	3ff00000 	.word	0x3ff00000
 801ea60:	94a03595 	.word	0x94a03595
 801ea64:	3fdfffff 	.word	0x3fdfffff
 801ea68:	35afe535 	.word	0x35afe535
 801ea6c:	3fe00000 	.word	0x3fe00000
 801ea70:	ffc00000 	.word	0xffc00000
 801ea74:	41dfffff 	.word	0x41dfffff
 801ea78:	94a03595 	.word	0x94a03595
 801ea7c:	3fcfffff 	.word	0x3fcfffff
 801ea80:	3ff00000 	.word	0x3ff00000
 801ea84:	3fe00000 	.word	0x3fe00000
 801ea88:	7ff00000 	.word	0x7ff00000
 801ea8c:	7fe00000 	.word	0x7fe00000
 801ea90:	7c9fffff 	.word	0x7c9fffff
 801ea94:	7fefffff 	.word	0x7fefffff

0801ea98 <strtof>:
 801ea98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea9c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801eb60 <strtof+0xc8>
 801eaa0:	4b2a      	ldr	r3, [pc, #168]	; (801eb4c <strtof+0xb4>)
 801eaa2:	460a      	mov	r2, r1
 801eaa4:	ed2d 8b02 	vpush	{d8}
 801eaa8:	4601      	mov	r1, r0
 801eaaa:	f8d8 0000 	ldr.w	r0, [r8]
 801eaae:	f7ff fa03 	bl	801deb8 <_strtod_l>
 801eab2:	ec55 4b10 	vmov	r4, r5, d0
 801eab6:	ee10 2a10 	vmov	r2, s0
 801eaba:	ee10 0a10 	vmov	r0, s0
 801eabe:	462b      	mov	r3, r5
 801eac0:	4629      	mov	r1, r5
 801eac2:	f7e2 f843 	bl	8000b4c <__aeabi_dcmpun>
 801eac6:	b190      	cbz	r0, 801eaee <strtof+0x56>
 801eac8:	2d00      	cmp	r5, #0
 801eaca:	4821      	ldr	r0, [pc, #132]	; (801eb50 <strtof+0xb8>)
 801eacc:	da09      	bge.n	801eae2 <strtof+0x4a>
 801eace:	f000 fe67 	bl	801f7a0 <nanf>
 801ead2:	eeb1 8a40 	vneg.f32	s16, s0
 801ead6:	eeb0 0a48 	vmov.f32	s0, s16
 801eada:	ecbd 8b02 	vpop	{d8}
 801eade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eae2:	ecbd 8b02 	vpop	{d8}
 801eae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eaea:	f000 be59 	b.w	801f7a0 <nanf>
 801eaee:	4620      	mov	r0, r4
 801eaf0:	4629      	mov	r1, r5
 801eaf2:	f7e2 f861 	bl	8000bb8 <__aeabi_d2f>
 801eaf6:	ee08 0a10 	vmov	s16, r0
 801eafa:	eddf 7a16 	vldr	s15, [pc, #88]	; 801eb54 <strtof+0xbc>
 801eafe:	eeb0 7ac8 	vabs.f32	s14, s16
 801eb02:	eeb4 7a67 	vcmp.f32	s14, s15
 801eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb0a:	dd11      	ble.n	801eb30 <strtof+0x98>
 801eb0c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801eb10:	4b11      	ldr	r3, [pc, #68]	; (801eb58 <strtof+0xc0>)
 801eb12:	f04f 32ff 	mov.w	r2, #4294967295
 801eb16:	4620      	mov	r0, r4
 801eb18:	4639      	mov	r1, r7
 801eb1a:	f7e2 f817 	bl	8000b4c <__aeabi_dcmpun>
 801eb1e:	b980      	cbnz	r0, 801eb42 <strtof+0xaa>
 801eb20:	4b0d      	ldr	r3, [pc, #52]	; (801eb58 <strtof+0xc0>)
 801eb22:	f04f 32ff 	mov.w	r2, #4294967295
 801eb26:	4620      	mov	r0, r4
 801eb28:	4639      	mov	r1, r7
 801eb2a:	f7e1 fff1 	bl	8000b10 <__aeabi_dcmple>
 801eb2e:	b940      	cbnz	r0, 801eb42 <strtof+0xaa>
 801eb30:	ee18 3a10 	vmov	r3, s16
 801eb34:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801eb38:	d1cd      	bne.n	801ead6 <strtof+0x3e>
 801eb3a:	4b08      	ldr	r3, [pc, #32]	; (801eb5c <strtof+0xc4>)
 801eb3c:	402b      	ands	r3, r5
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d0c9      	beq.n	801ead6 <strtof+0x3e>
 801eb42:	f8d8 3000 	ldr.w	r3, [r8]
 801eb46:	2222      	movs	r2, #34	; 0x22
 801eb48:	601a      	str	r2, [r3, #0]
 801eb4a:	e7c4      	b.n	801ead6 <strtof+0x3e>
 801eb4c:	20000754 	.word	0x20000754
 801eb50:	080243d2 	.word	0x080243d2
 801eb54:	7f7fffff 	.word	0x7f7fffff
 801eb58:	7fefffff 	.word	0x7fefffff
 801eb5c:	7ff00000 	.word	0x7ff00000
 801eb60:	2000090c 	.word	0x2000090c

0801eb64 <_strtol_l.constprop.0>:
 801eb64:	2b01      	cmp	r3, #1
 801eb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb6a:	d001      	beq.n	801eb70 <_strtol_l.constprop.0+0xc>
 801eb6c:	2b24      	cmp	r3, #36	; 0x24
 801eb6e:	d906      	bls.n	801eb7e <_strtol_l.constprop.0+0x1a>
 801eb70:	f000 fdd4 	bl	801f71c <__errno>
 801eb74:	2316      	movs	r3, #22
 801eb76:	6003      	str	r3, [r0, #0]
 801eb78:	2000      	movs	r0, #0
 801eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ec64 <_strtol_l.constprop.0+0x100>
 801eb82:	460d      	mov	r5, r1
 801eb84:	462e      	mov	r6, r5
 801eb86:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eb8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801eb8e:	f017 0708 	ands.w	r7, r7, #8
 801eb92:	d1f7      	bne.n	801eb84 <_strtol_l.constprop.0+0x20>
 801eb94:	2c2d      	cmp	r4, #45	; 0x2d
 801eb96:	d132      	bne.n	801ebfe <_strtol_l.constprop.0+0x9a>
 801eb98:	782c      	ldrb	r4, [r5, #0]
 801eb9a:	2701      	movs	r7, #1
 801eb9c:	1cb5      	adds	r5, r6, #2
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d05b      	beq.n	801ec5a <_strtol_l.constprop.0+0xf6>
 801eba2:	2b10      	cmp	r3, #16
 801eba4:	d109      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801eba6:	2c30      	cmp	r4, #48	; 0x30
 801eba8:	d107      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801ebaa:	782c      	ldrb	r4, [r5, #0]
 801ebac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ebb0:	2c58      	cmp	r4, #88	; 0x58
 801ebb2:	d14d      	bne.n	801ec50 <_strtol_l.constprop.0+0xec>
 801ebb4:	786c      	ldrb	r4, [r5, #1]
 801ebb6:	2310      	movs	r3, #16
 801ebb8:	3502      	adds	r5, #2
 801ebba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ebbe:	f108 38ff 	add.w	r8, r8, #4294967295
 801ebc2:	f04f 0e00 	mov.w	lr, #0
 801ebc6:	fbb8 f9f3 	udiv	r9, r8, r3
 801ebca:	4676      	mov	r6, lr
 801ebcc:	fb03 8a19 	mls	sl, r3, r9, r8
 801ebd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ebd4:	f1bc 0f09 	cmp.w	ip, #9
 801ebd8:	d816      	bhi.n	801ec08 <_strtol_l.constprop.0+0xa4>
 801ebda:	4664      	mov	r4, ip
 801ebdc:	42a3      	cmp	r3, r4
 801ebde:	dd24      	ble.n	801ec2a <_strtol_l.constprop.0+0xc6>
 801ebe0:	f1be 3fff 	cmp.w	lr, #4294967295
 801ebe4:	d008      	beq.n	801ebf8 <_strtol_l.constprop.0+0x94>
 801ebe6:	45b1      	cmp	r9, r6
 801ebe8:	d31c      	bcc.n	801ec24 <_strtol_l.constprop.0+0xc0>
 801ebea:	d101      	bne.n	801ebf0 <_strtol_l.constprop.0+0x8c>
 801ebec:	45a2      	cmp	sl, r4
 801ebee:	db19      	blt.n	801ec24 <_strtol_l.constprop.0+0xc0>
 801ebf0:	fb06 4603 	mla	r6, r6, r3, r4
 801ebf4:	f04f 0e01 	mov.w	lr, #1
 801ebf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ebfc:	e7e8      	b.n	801ebd0 <_strtol_l.constprop.0+0x6c>
 801ebfe:	2c2b      	cmp	r4, #43	; 0x2b
 801ec00:	bf04      	itt	eq
 801ec02:	782c      	ldrbeq	r4, [r5, #0]
 801ec04:	1cb5      	addeq	r5, r6, #2
 801ec06:	e7ca      	b.n	801eb9e <_strtol_l.constprop.0+0x3a>
 801ec08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ec0c:	f1bc 0f19 	cmp.w	ip, #25
 801ec10:	d801      	bhi.n	801ec16 <_strtol_l.constprop.0+0xb2>
 801ec12:	3c37      	subs	r4, #55	; 0x37
 801ec14:	e7e2      	b.n	801ebdc <_strtol_l.constprop.0+0x78>
 801ec16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ec1a:	f1bc 0f19 	cmp.w	ip, #25
 801ec1e:	d804      	bhi.n	801ec2a <_strtol_l.constprop.0+0xc6>
 801ec20:	3c57      	subs	r4, #87	; 0x57
 801ec22:	e7db      	b.n	801ebdc <_strtol_l.constprop.0+0x78>
 801ec24:	f04f 3eff 	mov.w	lr, #4294967295
 801ec28:	e7e6      	b.n	801ebf8 <_strtol_l.constprop.0+0x94>
 801ec2a:	f1be 3fff 	cmp.w	lr, #4294967295
 801ec2e:	d105      	bne.n	801ec3c <_strtol_l.constprop.0+0xd8>
 801ec30:	2322      	movs	r3, #34	; 0x22
 801ec32:	6003      	str	r3, [r0, #0]
 801ec34:	4646      	mov	r6, r8
 801ec36:	b942      	cbnz	r2, 801ec4a <_strtol_l.constprop.0+0xe6>
 801ec38:	4630      	mov	r0, r6
 801ec3a:	e79e      	b.n	801eb7a <_strtol_l.constprop.0+0x16>
 801ec3c:	b107      	cbz	r7, 801ec40 <_strtol_l.constprop.0+0xdc>
 801ec3e:	4276      	negs	r6, r6
 801ec40:	2a00      	cmp	r2, #0
 801ec42:	d0f9      	beq.n	801ec38 <_strtol_l.constprop.0+0xd4>
 801ec44:	f1be 0f00 	cmp.w	lr, #0
 801ec48:	d000      	beq.n	801ec4c <_strtol_l.constprop.0+0xe8>
 801ec4a:	1e69      	subs	r1, r5, #1
 801ec4c:	6011      	str	r1, [r2, #0]
 801ec4e:	e7f3      	b.n	801ec38 <_strtol_l.constprop.0+0xd4>
 801ec50:	2430      	movs	r4, #48	; 0x30
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d1b1      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec56:	2308      	movs	r3, #8
 801ec58:	e7af      	b.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec5a:	2c30      	cmp	r4, #48	; 0x30
 801ec5c:	d0a5      	beq.n	801ebaa <_strtol_l.constprop.0+0x46>
 801ec5e:	230a      	movs	r3, #10
 801ec60:	e7ab      	b.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec62:	bf00      	nop
 801ec64:	08024079 	.word	0x08024079

0801ec68 <strtol>:
 801ec68:	4613      	mov	r3, r2
 801ec6a:	460a      	mov	r2, r1
 801ec6c:	4601      	mov	r1, r0
 801ec6e:	4802      	ldr	r0, [pc, #8]	; (801ec78 <strtol+0x10>)
 801ec70:	6800      	ldr	r0, [r0, #0]
 801ec72:	f7ff bf77 	b.w	801eb64 <_strtol_l.constprop.0>
 801ec76:	bf00      	nop
 801ec78:	2000090c 	.word	0x2000090c

0801ec7c <_strtoul_l.constprop.0>:
 801ec7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ec80:	4f36      	ldr	r7, [pc, #216]	; (801ed5c <_strtoul_l.constprop.0+0xe0>)
 801ec82:	4686      	mov	lr, r0
 801ec84:	460d      	mov	r5, r1
 801ec86:	4628      	mov	r0, r5
 801ec88:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec8c:	5d3e      	ldrb	r6, [r7, r4]
 801ec8e:	f016 0608 	ands.w	r6, r6, #8
 801ec92:	d1f8      	bne.n	801ec86 <_strtoul_l.constprop.0+0xa>
 801ec94:	2c2d      	cmp	r4, #45	; 0x2d
 801ec96:	d130      	bne.n	801ecfa <_strtoul_l.constprop.0+0x7e>
 801ec98:	782c      	ldrb	r4, [r5, #0]
 801ec9a:	2601      	movs	r6, #1
 801ec9c:	1c85      	adds	r5, r0, #2
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d057      	beq.n	801ed52 <_strtoul_l.constprop.0+0xd6>
 801eca2:	2b10      	cmp	r3, #16
 801eca4:	d109      	bne.n	801ecba <_strtoul_l.constprop.0+0x3e>
 801eca6:	2c30      	cmp	r4, #48	; 0x30
 801eca8:	d107      	bne.n	801ecba <_strtoul_l.constprop.0+0x3e>
 801ecaa:	7828      	ldrb	r0, [r5, #0]
 801ecac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ecb0:	2858      	cmp	r0, #88	; 0x58
 801ecb2:	d149      	bne.n	801ed48 <_strtoul_l.constprop.0+0xcc>
 801ecb4:	786c      	ldrb	r4, [r5, #1]
 801ecb6:	2310      	movs	r3, #16
 801ecb8:	3502      	adds	r5, #2
 801ecba:	f04f 38ff 	mov.w	r8, #4294967295
 801ecbe:	2700      	movs	r7, #0
 801ecc0:	fbb8 f8f3 	udiv	r8, r8, r3
 801ecc4:	fb03 f908 	mul.w	r9, r3, r8
 801ecc8:	ea6f 0909 	mvn.w	r9, r9
 801eccc:	4638      	mov	r0, r7
 801ecce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ecd2:	f1bc 0f09 	cmp.w	ip, #9
 801ecd6:	d815      	bhi.n	801ed04 <_strtoul_l.constprop.0+0x88>
 801ecd8:	4664      	mov	r4, ip
 801ecda:	42a3      	cmp	r3, r4
 801ecdc:	dd23      	ble.n	801ed26 <_strtoul_l.constprop.0+0xaa>
 801ecde:	f1b7 3fff 	cmp.w	r7, #4294967295
 801ece2:	d007      	beq.n	801ecf4 <_strtoul_l.constprop.0+0x78>
 801ece4:	4580      	cmp	r8, r0
 801ece6:	d31b      	bcc.n	801ed20 <_strtoul_l.constprop.0+0xa4>
 801ece8:	d101      	bne.n	801ecee <_strtoul_l.constprop.0+0x72>
 801ecea:	45a1      	cmp	r9, r4
 801ecec:	db18      	blt.n	801ed20 <_strtoul_l.constprop.0+0xa4>
 801ecee:	fb00 4003 	mla	r0, r0, r3, r4
 801ecf2:	2701      	movs	r7, #1
 801ecf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ecf8:	e7e9      	b.n	801ecce <_strtoul_l.constprop.0+0x52>
 801ecfa:	2c2b      	cmp	r4, #43	; 0x2b
 801ecfc:	bf04      	itt	eq
 801ecfe:	782c      	ldrbeq	r4, [r5, #0]
 801ed00:	1c85      	addeq	r5, r0, #2
 801ed02:	e7cc      	b.n	801ec9e <_strtoul_l.constprop.0+0x22>
 801ed04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ed08:	f1bc 0f19 	cmp.w	ip, #25
 801ed0c:	d801      	bhi.n	801ed12 <_strtoul_l.constprop.0+0x96>
 801ed0e:	3c37      	subs	r4, #55	; 0x37
 801ed10:	e7e3      	b.n	801ecda <_strtoul_l.constprop.0+0x5e>
 801ed12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ed16:	f1bc 0f19 	cmp.w	ip, #25
 801ed1a:	d804      	bhi.n	801ed26 <_strtoul_l.constprop.0+0xaa>
 801ed1c:	3c57      	subs	r4, #87	; 0x57
 801ed1e:	e7dc      	b.n	801ecda <_strtoul_l.constprop.0+0x5e>
 801ed20:	f04f 37ff 	mov.w	r7, #4294967295
 801ed24:	e7e6      	b.n	801ecf4 <_strtoul_l.constprop.0+0x78>
 801ed26:	1c7b      	adds	r3, r7, #1
 801ed28:	d106      	bne.n	801ed38 <_strtoul_l.constprop.0+0xbc>
 801ed2a:	2322      	movs	r3, #34	; 0x22
 801ed2c:	f8ce 3000 	str.w	r3, [lr]
 801ed30:	4638      	mov	r0, r7
 801ed32:	b932      	cbnz	r2, 801ed42 <_strtoul_l.constprop.0+0xc6>
 801ed34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed38:	b106      	cbz	r6, 801ed3c <_strtoul_l.constprop.0+0xc0>
 801ed3a:	4240      	negs	r0, r0
 801ed3c:	2a00      	cmp	r2, #0
 801ed3e:	d0f9      	beq.n	801ed34 <_strtoul_l.constprop.0+0xb8>
 801ed40:	b107      	cbz	r7, 801ed44 <_strtoul_l.constprop.0+0xc8>
 801ed42:	1e69      	subs	r1, r5, #1
 801ed44:	6011      	str	r1, [r2, #0]
 801ed46:	e7f5      	b.n	801ed34 <_strtoul_l.constprop.0+0xb8>
 801ed48:	2430      	movs	r4, #48	; 0x30
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d1b5      	bne.n	801ecba <_strtoul_l.constprop.0+0x3e>
 801ed4e:	2308      	movs	r3, #8
 801ed50:	e7b3      	b.n	801ecba <_strtoul_l.constprop.0+0x3e>
 801ed52:	2c30      	cmp	r4, #48	; 0x30
 801ed54:	d0a9      	beq.n	801ecaa <_strtoul_l.constprop.0+0x2e>
 801ed56:	230a      	movs	r3, #10
 801ed58:	e7af      	b.n	801ecba <_strtoul_l.constprop.0+0x3e>
 801ed5a:	bf00      	nop
 801ed5c:	08024079 	.word	0x08024079

0801ed60 <strtoul>:
 801ed60:	4613      	mov	r3, r2
 801ed62:	460a      	mov	r2, r1
 801ed64:	4601      	mov	r1, r0
 801ed66:	4802      	ldr	r0, [pc, #8]	; (801ed70 <strtoul+0x10>)
 801ed68:	6800      	ldr	r0, [r0, #0]
 801ed6a:	f7ff bf87 	b.w	801ec7c <_strtoul_l.constprop.0>
 801ed6e:	bf00      	nop
 801ed70:	2000090c 	.word	0x2000090c

0801ed74 <_strtoll_l.constprop.0>:
 801ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed78:	b085      	sub	sp, #20
 801ed7a:	4688      	mov	r8, r1
 801ed7c:	9201      	str	r2, [sp, #4]
 801ed7e:	4a45      	ldr	r2, [pc, #276]	; (801ee94 <_strtoll_l.constprop.0+0x120>)
 801ed80:	9003      	str	r0, [sp, #12]
 801ed82:	461e      	mov	r6, r3
 801ed84:	460d      	mov	r5, r1
 801ed86:	462b      	mov	r3, r5
 801ed88:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ed8c:	5d17      	ldrb	r7, [r2, r4]
 801ed8e:	f017 0708 	ands.w	r7, r7, #8
 801ed92:	d1f8      	bne.n	801ed86 <_strtoll_l.constprop.0+0x12>
 801ed94:	2c2d      	cmp	r4, #45	; 0x2d
 801ed96:	d14a      	bne.n	801ee2e <_strtoll_l.constprop.0+0xba>
 801ed98:	782c      	ldrb	r4, [r5, #0]
 801ed9a:	2701      	movs	r7, #1
 801ed9c:	1c9d      	adds	r5, r3, #2
 801ed9e:	2e00      	cmp	r6, #0
 801eda0:	d073      	beq.n	801ee8a <_strtoll_l.constprop.0+0x116>
 801eda2:	2e10      	cmp	r6, #16
 801eda4:	d109      	bne.n	801edba <_strtoll_l.constprop.0+0x46>
 801eda6:	2c30      	cmp	r4, #48	; 0x30
 801eda8:	d107      	bne.n	801edba <_strtoll_l.constprop.0+0x46>
 801edaa:	782b      	ldrb	r3, [r5, #0]
 801edac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801edb0:	2b58      	cmp	r3, #88	; 0x58
 801edb2:	d165      	bne.n	801ee80 <_strtoll_l.constprop.0+0x10c>
 801edb4:	786c      	ldrb	r4, [r5, #1]
 801edb6:	2610      	movs	r6, #16
 801edb8:	3502      	adds	r5, #2
 801edba:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 801edbe:	f107 3bff 	add.w	fp, r7, #4294967295
 801edc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edc6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801edca:	4632      	mov	r2, r6
 801edcc:	464b      	mov	r3, r9
 801edce:	4658      	mov	r0, fp
 801edd0:	4651      	mov	r1, sl
 801edd2:	f7e1 ff41 	bl	8000c58 <__aeabi_uldivmod>
 801edd6:	9202      	str	r2, [sp, #8]
 801edd8:	2200      	movs	r2, #0
 801edda:	4684      	mov	ip, r0
 801eddc:	468e      	mov	lr, r1
 801edde:	4610      	mov	r0, r2
 801ede0:	4611      	mov	r1, r2
 801ede2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ede6:	2b09      	cmp	r3, #9
 801ede8:	d905      	bls.n	801edf6 <_strtoll_l.constprop.0+0x82>
 801edea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801edee:	2b19      	cmp	r3, #25
 801edf0:	d822      	bhi.n	801ee38 <_strtoll_l.constprop.0+0xc4>
 801edf2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 801edf6:	429e      	cmp	r6, r3
 801edf8:	dd28      	ble.n	801ee4c <_strtoll_l.constprop.0+0xd8>
 801edfa:	1c54      	adds	r4, r2, #1
 801edfc:	d014      	beq.n	801ee28 <_strtoll_l.constprop.0+0xb4>
 801edfe:	4584      	cmp	ip, r0
 801ee00:	eb7e 0201 	sbcs.w	r2, lr, r1
 801ee04:	d31f      	bcc.n	801ee46 <_strtoll_l.constprop.0+0xd2>
 801ee06:	458e      	cmp	lr, r1
 801ee08:	bf08      	it	eq
 801ee0a:	4584      	cmpeq	ip, r0
 801ee0c:	d102      	bne.n	801ee14 <_strtoll_l.constprop.0+0xa0>
 801ee0e:	9a02      	ldr	r2, [sp, #8]
 801ee10:	429a      	cmp	r2, r3
 801ee12:	db18      	blt.n	801ee46 <_strtoll_l.constprop.0+0xd2>
 801ee14:	4371      	muls	r1, r6
 801ee16:	fb00 1109 	mla	r1, r0, r9, r1
 801ee1a:	fba6 0200 	umull	r0, r2, r6, r0
 801ee1e:	440a      	add	r2, r1
 801ee20:	1818      	adds	r0, r3, r0
 801ee22:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 801ee26:	2201      	movs	r2, #1
 801ee28:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ee2c:	e7d9      	b.n	801ede2 <_strtoll_l.constprop.0+0x6e>
 801ee2e:	2c2b      	cmp	r4, #43	; 0x2b
 801ee30:	bf04      	itt	eq
 801ee32:	782c      	ldrbeq	r4, [r5, #0]
 801ee34:	1c9d      	addeq	r5, r3, #2
 801ee36:	e7b2      	b.n	801ed9e <_strtoll_l.constprop.0+0x2a>
 801ee38:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801ee3c:	2b19      	cmp	r3, #25
 801ee3e:	d805      	bhi.n	801ee4c <_strtoll_l.constprop.0+0xd8>
 801ee40:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 801ee44:	e7d7      	b.n	801edf6 <_strtoll_l.constprop.0+0x82>
 801ee46:	f04f 32ff 	mov.w	r2, #4294967295
 801ee4a:	e7ed      	b.n	801ee28 <_strtoll_l.constprop.0+0xb4>
 801ee4c:	1c53      	adds	r3, r2, #1
 801ee4e:	d109      	bne.n	801ee64 <_strtoll_l.constprop.0+0xf0>
 801ee50:	9a03      	ldr	r2, [sp, #12]
 801ee52:	2322      	movs	r3, #34	; 0x22
 801ee54:	6013      	str	r3, [r2, #0]
 801ee56:	9b01      	ldr	r3, [sp, #4]
 801ee58:	4658      	mov	r0, fp
 801ee5a:	4651      	mov	r1, sl
 801ee5c:	b953      	cbnz	r3, 801ee74 <_strtoll_l.constprop.0+0x100>
 801ee5e:	b005      	add	sp, #20
 801ee60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee64:	b117      	cbz	r7, 801ee6c <_strtoll_l.constprop.0+0xf8>
 801ee66:	4240      	negs	r0, r0
 801ee68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801ee6c:	9b01      	ldr	r3, [sp, #4]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d0f5      	beq.n	801ee5e <_strtoll_l.constprop.0+0xea>
 801ee72:	b10a      	cbz	r2, 801ee78 <_strtoll_l.constprop.0+0x104>
 801ee74:	f105 38ff 	add.w	r8, r5, #4294967295
 801ee78:	9b01      	ldr	r3, [sp, #4]
 801ee7a:	f8c3 8000 	str.w	r8, [r3]
 801ee7e:	e7ee      	b.n	801ee5e <_strtoll_l.constprop.0+0xea>
 801ee80:	2430      	movs	r4, #48	; 0x30
 801ee82:	2e00      	cmp	r6, #0
 801ee84:	d199      	bne.n	801edba <_strtoll_l.constprop.0+0x46>
 801ee86:	2608      	movs	r6, #8
 801ee88:	e797      	b.n	801edba <_strtoll_l.constprop.0+0x46>
 801ee8a:	2c30      	cmp	r4, #48	; 0x30
 801ee8c:	d08d      	beq.n	801edaa <_strtoll_l.constprop.0+0x36>
 801ee8e:	260a      	movs	r6, #10
 801ee90:	e793      	b.n	801edba <_strtoll_l.constprop.0+0x46>
 801ee92:	bf00      	nop
 801ee94:	08024079 	.word	0x08024079

0801ee98 <strtoll>:
 801ee98:	4613      	mov	r3, r2
 801ee9a:	460a      	mov	r2, r1
 801ee9c:	4601      	mov	r1, r0
 801ee9e:	4802      	ldr	r0, [pc, #8]	; (801eea8 <strtoll+0x10>)
 801eea0:	6800      	ldr	r0, [r0, #0]
 801eea2:	f7ff bf67 	b.w	801ed74 <_strtoll_l.constprop.0>
 801eea6:	bf00      	nop
 801eea8:	2000090c 	.word	0x2000090c

0801eeac <_strtoull_l.constprop.0>:
 801eeac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb0:	4692      	mov	sl, r2
 801eeb2:	4a49      	ldr	r2, [pc, #292]	; (801efd8 <_strtoull_l.constprop.0+0x12c>)
 801eeb4:	9001      	str	r0, [sp, #4]
 801eeb6:	4689      	mov	r9, r1
 801eeb8:	461d      	mov	r5, r3
 801eeba:	460e      	mov	r6, r1
 801eebc:	4633      	mov	r3, r6
 801eebe:	f816 4b01 	ldrb.w	r4, [r6], #1
 801eec2:	5d17      	ldrb	r7, [r2, r4]
 801eec4:	f017 0708 	ands.w	r7, r7, #8
 801eec8:	d1f8      	bne.n	801eebc <_strtoull_l.constprop.0+0x10>
 801eeca:	2c2d      	cmp	r4, #45	; 0x2d
 801eecc:	d14b      	bne.n	801ef66 <_strtoull_l.constprop.0+0xba>
 801eece:	7834      	ldrb	r4, [r6, #0]
 801eed0:	2701      	movs	r7, #1
 801eed2:	1c9e      	adds	r6, r3, #2
 801eed4:	2d00      	cmp	r5, #0
 801eed6:	d07b      	beq.n	801efd0 <_strtoull_l.constprop.0+0x124>
 801eed8:	2d10      	cmp	r5, #16
 801eeda:	d109      	bne.n	801eef0 <_strtoull_l.constprop.0+0x44>
 801eedc:	2c30      	cmp	r4, #48	; 0x30
 801eede:	d107      	bne.n	801eef0 <_strtoull_l.constprop.0+0x44>
 801eee0:	7833      	ldrb	r3, [r6, #0]
 801eee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eee6:	2b58      	cmp	r3, #88	; 0x58
 801eee8:	d16d      	bne.n	801efc6 <_strtoull_l.constprop.0+0x11a>
 801eeea:	7874      	ldrb	r4, [r6, #1]
 801eeec:	2510      	movs	r5, #16
 801eeee:	3602      	adds	r6, #2
 801eef0:	ea4f 7be5 	mov.w	fp, r5, asr #31
 801eef4:	462a      	mov	r2, r5
 801eef6:	465b      	mov	r3, fp
 801eef8:	f04f 30ff 	mov.w	r0, #4294967295
 801eefc:	f04f 31ff 	mov.w	r1, #4294967295
 801ef00:	f7e1 feaa 	bl	8000c58 <__aeabi_uldivmod>
 801ef04:	462a      	mov	r2, r5
 801ef06:	9000      	str	r0, [sp, #0]
 801ef08:	4688      	mov	r8, r1
 801ef0a:	465b      	mov	r3, fp
 801ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ef10:	f04f 31ff 	mov.w	r1, #4294967295
 801ef14:	f7e1 fea0 	bl	8000c58 <__aeabi_uldivmod>
 801ef18:	2300      	movs	r3, #0
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	4619      	mov	r1, r3
 801ef1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ef22:	f1bc 0f09 	cmp.w	ip, #9
 801ef26:	d823      	bhi.n	801ef70 <_strtoull_l.constprop.0+0xc4>
 801ef28:	4664      	mov	r4, ip
 801ef2a:	42a5      	cmp	r5, r4
 801ef2c:	dd31      	ble.n	801ef92 <_strtoull_l.constprop.0+0xe6>
 801ef2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef32:	d015      	beq.n	801ef60 <_strtoull_l.constprop.0+0xb4>
 801ef34:	9b00      	ldr	r3, [sp, #0]
 801ef36:	4283      	cmp	r3, r0
 801ef38:	eb78 0301 	sbcs.w	r3, r8, r1
 801ef3c:	d326      	bcc.n	801ef8c <_strtoull_l.constprop.0+0xe0>
 801ef3e:	9b00      	ldr	r3, [sp, #0]
 801ef40:	4588      	cmp	r8, r1
 801ef42:	bf08      	it	eq
 801ef44:	4283      	cmpeq	r3, r0
 801ef46:	d101      	bne.n	801ef4c <_strtoull_l.constprop.0+0xa0>
 801ef48:	42a2      	cmp	r2, r4
 801ef4a:	db1f      	blt.n	801ef8c <_strtoull_l.constprop.0+0xe0>
 801ef4c:	4369      	muls	r1, r5
 801ef4e:	fb00 110b 	mla	r1, r0, fp, r1
 801ef52:	fba5 0300 	umull	r0, r3, r5, r0
 801ef56:	4419      	add	r1, r3
 801ef58:	1820      	adds	r0, r4, r0
 801ef5a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801ef5e:	2301      	movs	r3, #1
 801ef60:	f816 4b01 	ldrb.w	r4, [r6], #1
 801ef64:	e7db      	b.n	801ef1e <_strtoull_l.constprop.0+0x72>
 801ef66:	2c2b      	cmp	r4, #43	; 0x2b
 801ef68:	bf04      	itt	eq
 801ef6a:	7834      	ldrbeq	r4, [r6, #0]
 801ef6c:	1c9e      	addeq	r6, r3, #2
 801ef6e:	e7b1      	b.n	801eed4 <_strtoull_l.constprop.0+0x28>
 801ef70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ef74:	f1bc 0f19 	cmp.w	ip, #25
 801ef78:	d801      	bhi.n	801ef7e <_strtoull_l.constprop.0+0xd2>
 801ef7a:	3c37      	subs	r4, #55	; 0x37
 801ef7c:	e7d5      	b.n	801ef2a <_strtoull_l.constprop.0+0x7e>
 801ef7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ef82:	f1bc 0f19 	cmp.w	ip, #25
 801ef86:	d804      	bhi.n	801ef92 <_strtoull_l.constprop.0+0xe6>
 801ef88:	3c57      	subs	r4, #87	; 0x57
 801ef8a:	e7ce      	b.n	801ef2a <_strtoull_l.constprop.0+0x7e>
 801ef8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ef90:	e7e6      	b.n	801ef60 <_strtoull_l.constprop.0+0xb4>
 801ef92:	1c5a      	adds	r2, r3, #1
 801ef94:	d10a      	bne.n	801efac <_strtoull_l.constprop.0+0x100>
 801ef96:	9901      	ldr	r1, [sp, #4]
 801ef98:	2222      	movs	r2, #34	; 0x22
 801ef9a:	600a      	str	r2, [r1, #0]
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	4619      	mov	r1, r3
 801efa0:	f1ba 0f00 	cmp.w	sl, #0
 801efa4:	d10a      	bne.n	801efbc <_strtoull_l.constprop.0+0x110>
 801efa6:	b003      	add	sp, #12
 801efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efac:	b117      	cbz	r7, 801efb4 <_strtoull_l.constprop.0+0x108>
 801efae:	4240      	negs	r0, r0
 801efb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801efb4:	f1ba 0f00 	cmp.w	sl, #0
 801efb8:	d0f5      	beq.n	801efa6 <_strtoull_l.constprop.0+0xfa>
 801efba:	b10b      	cbz	r3, 801efc0 <_strtoull_l.constprop.0+0x114>
 801efbc:	f106 39ff 	add.w	r9, r6, #4294967295
 801efc0:	f8ca 9000 	str.w	r9, [sl]
 801efc4:	e7ef      	b.n	801efa6 <_strtoull_l.constprop.0+0xfa>
 801efc6:	2430      	movs	r4, #48	; 0x30
 801efc8:	2d00      	cmp	r5, #0
 801efca:	d191      	bne.n	801eef0 <_strtoull_l.constprop.0+0x44>
 801efcc:	2508      	movs	r5, #8
 801efce:	e78f      	b.n	801eef0 <_strtoull_l.constprop.0+0x44>
 801efd0:	2c30      	cmp	r4, #48	; 0x30
 801efd2:	d085      	beq.n	801eee0 <_strtoull_l.constprop.0+0x34>
 801efd4:	250a      	movs	r5, #10
 801efd6:	e78b      	b.n	801eef0 <_strtoull_l.constprop.0+0x44>
 801efd8:	08024079 	.word	0x08024079

0801efdc <strtoull>:
 801efdc:	4613      	mov	r3, r2
 801efde:	460a      	mov	r2, r1
 801efe0:	4601      	mov	r1, r0
 801efe2:	4802      	ldr	r0, [pc, #8]	; (801efec <strtoull+0x10>)
 801efe4:	6800      	ldr	r0, [r0, #0]
 801efe6:	f7ff bf61 	b.w	801eeac <_strtoull_l.constprop.0>
 801efea:	bf00      	nop
 801efec:	2000090c 	.word	0x2000090c

0801eff0 <__sflush_r>:
 801eff0:	898a      	ldrh	r2, [r1, #12]
 801eff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eff6:	4605      	mov	r5, r0
 801eff8:	0710      	lsls	r0, r2, #28
 801effa:	460c      	mov	r4, r1
 801effc:	d458      	bmi.n	801f0b0 <__sflush_r+0xc0>
 801effe:	684b      	ldr	r3, [r1, #4]
 801f000:	2b00      	cmp	r3, #0
 801f002:	dc05      	bgt.n	801f010 <__sflush_r+0x20>
 801f004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f006:	2b00      	cmp	r3, #0
 801f008:	dc02      	bgt.n	801f010 <__sflush_r+0x20>
 801f00a:	2000      	movs	r0, #0
 801f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f012:	2e00      	cmp	r6, #0
 801f014:	d0f9      	beq.n	801f00a <__sflush_r+0x1a>
 801f016:	2300      	movs	r3, #0
 801f018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f01c:	682f      	ldr	r7, [r5, #0]
 801f01e:	6a21      	ldr	r1, [r4, #32]
 801f020:	602b      	str	r3, [r5, #0]
 801f022:	d032      	beq.n	801f08a <__sflush_r+0x9a>
 801f024:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f026:	89a3      	ldrh	r3, [r4, #12]
 801f028:	075a      	lsls	r2, r3, #29
 801f02a:	d505      	bpl.n	801f038 <__sflush_r+0x48>
 801f02c:	6863      	ldr	r3, [r4, #4]
 801f02e:	1ac0      	subs	r0, r0, r3
 801f030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f032:	b10b      	cbz	r3, 801f038 <__sflush_r+0x48>
 801f034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f036:	1ac0      	subs	r0, r0, r3
 801f038:	2300      	movs	r3, #0
 801f03a:	4602      	mov	r2, r0
 801f03c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f03e:	6a21      	ldr	r1, [r4, #32]
 801f040:	4628      	mov	r0, r5
 801f042:	47b0      	blx	r6
 801f044:	1c43      	adds	r3, r0, #1
 801f046:	89a3      	ldrh	r3, [r4, #12]
 801f048:	d106      	bne.n	801f058 <__sflush_r+0x68>
 801f04a:	6829      	ldr	r1, [r5, #0]
 801f04c:	291d      	cmp	r1, #29
 801f04e:	d82b      	bhi.n	801f0a8 <__sflush_r+0xb8>
 801f050:	4a29      	ldr	r2, [pc, #164]	; (801f0f8 <__sflush_r+0x108>)
 801f052:	410a      	asrs	r2, r1
 801f054:	07d6      	lsls	r6, r2, #31
 801f056:	d427      	bmi.n	801f0a8 <__sflush_r+0xb8>
 801f058:	2200      	movs	r2, #0
 801f05a:	6062      	str	r2, [r4, #4]
 801f05c:	04d9      	lsls	r1, r3, #19
 801f05e:	6922      	ldr	r2, [r4, #16]
 801f060:	6022      	str	r2, [r4, #0]
 801f062:	d504      	bpl.n	801f06e <__sflush_r+0x7e>
 801f064:	1c42      	adds	r2, r0, #1
 801f066:	d101      	bne.n	801f06c <__sflush_r+0x7c>
 801f068:	682b      	ldr	r3, [r5, #0]
 801f06a:	b903      	cbnz	r3, 801f06e <__sflush_r+0x7e>
 801f06c:	6560      	str	r0, [r4, #84]	; 0x54
 801f06e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f070:	602f      	str	r7, [r5, #0]
 801f072:	2900      	cmp	r1, #0
 801f074:	d0c9      	beq.n	801f00a <__sflush_r+0x1a>
 801f076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f07a:	4299      	cmp	r1, r3
 801f07c:	d002      	beq.n	801f084 <__sflush_r+0x94>
 801f07e:	4628      	mov	r0, r5
 801f080:	f000 fb94 	bl	801f7ac <_free_r>
 801f084:	2000      	movs	r0, #0
 801f086:	6360      	str	r0, [r4, #52]	; 0x34
 801f088:	e7c0      	b.n	801f00c <__sflush_r+0x1c>
 801f08a:	2301      	movs	r3, #1
 801f08c:	4628      	mov	r0, r5
 801f08e:	47b0      	blx	r6
 801f090:	1c41      	adds	r1, r0, #1
 801f092:	d1c8      	bne.n	801f026 <__sflush_r+0x36>
 801f094:	682b      	ldr	r3, [r5, #0]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d0c5      	beq.n	801f026 <__sflush_r+0x36>
 801f09a:	2b1d      	cmp	r3, #29
 801f09c:	d001      	beq.n	801f0a2 <__sflush_r+0xb2>
 801f09e:	2b16      	cmp	r3, #22
 801f0a0:	d101      	bne.n	801f0a6 <__sflush_r+0xb6>
 801f0a2:	602f      	str	r7, [r5, #0]
 801f0a4:	e7b1      	b.n	801f00a <__sflush_r+0x1a>
 801f0a6:	89a3      	ldrh	r3, [r4, #12]
 801f0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0ac:	81a3      	strh	r3, [r4, #12]
 801f0ae:	e7ad      	b.n	801f00c <__sflush_r+0x1c>
 801f0b0:	690f      	ldr	r7, [r1, #16]
 801f0b2:	2f00      	cmp	r7, #0
 801f0b4:	d0a9      	beq.n	801f00a <__sflush_r+0x1a>
 801f0b6:	0793      	lsls	r3, r2, #30
 801f0b8:	680e      	ldr	r6, [r1, #0]
 801f0ba:	bf08      	it	eq
 801f0bc:	694b      	ldreq	r3, [r1, #20]
 801f0be:	600f      	str	r7, [r1, #0]
 801f0c0:	bf18      	it	ne
 801f0c2:	2300      	movne	r3, #0
 801f0c4:	eba6 0807 	sub.w	r8, r6, r7
 801f0c8:	608b      	str	r3, [r1, #8]
 801f0ca:	f1b8 0f00 	cmp.w	r8, #0
 801f0ce:	dd9c      	ble.n	801f00a <__sflush_r+0x1a>
 801f0d0:	6a21      	ldr	r1, [r4, #32]
 801f0d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f0d4:	4643      	mov	r3, r8
 801f0d6:	463a      	mov	r2, r7
 801f0d8:	4628      	mov	r0, r5
 801f0da:	47b0      	blx	r6
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	dc06      	bgt.n	801f0ee <__sflush_r+0xfe>
 801f0e0:	89a3      	ldrh	r3, [r4, #12]
 801f0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0e6:	81a3      	strh	r3, [r4, #12]
 801f0e8:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ec:	e78e      	b.n	801f00c <__sflush_r+0x1c>
 801f0ee:	4407      	add	r7, r0
 801f0f0:	eba8 0800 	sub.w	r8, r8, r0
 801f0f4:	e7e9      	b.n	801f0ca <__sflush_r+0xda>
 801f0f6:	bf00      	nop
 801f0f8:	dfbffffe 	.word	0xdfbffffe

0801f0fc <_fflush_r>:
 801f0fc:	b538      	push	{r3, r4, r5, lr}
 801f0fe:	690b      	ldr	r3, [r1, #16]
 801f100:	4605      	mov	r5, r0
 801f102:	460c      	mov	r4, r1
 801f104:	b913      	cbnz	r3, 801f10c <_fflush_r+0x10>
 801f106:	2500      	movs	r5, #0
 801f108:	4628      	mov	r0, r5
 801f10a:	bd38      	pop	{r3, r4, r5, pc}
 801f10c:	b118      	cbz	r0, 801f116 <_fflush_r+0x1a>
 801f10e:	6a03      	ldr	r3, [r0, #32]
 801f110:	b90b      	cbnz	r3, 801f116 <_fflush_r+0x1a>
 801f112:	f000 f8a9 	bl	801f268 <__sinit>
 801f116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d0f3      	beq.n	801f106 <_fflush_r+0xa>
 801f11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f120:	07d0      	lsls	r0, r2, #31
 801f122:	d404      	bmi.n	801f12e <_fflush_r+0x32>
 801f124:	0599      	lsls	r1, r3, #22
 801f126:	d402      	bmi.n	801f12e <_fflush_r+0x32>
 801f128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f12a:	f000 fb21 	bl	801f770 <__retarget_lock_acquire_recursive>
 801f12e:	4628      	mov	r0, r5
 801f130:	4621      	mov	r1, r4
 801f132:	f7ff ff5d 	bl	801eff0 <__sflush_r>
 801f136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f138:	07da      	lsls	r2, r3, #31
 801f13a:	4605      	mov	r5, r0
 801f13c:	d4e4      	bmi.n	801f108 <_fflush_r+0xc>
 801f13e:	89a3      	ldrh	r3, [r4, #12]
 801f140:	059b      	lsls	r3, r3, #22
 801f142:	d4e1      	bmi.n	801f108 <_fflush_r+0xc>
 801f144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f146:	f000 fb14 	bl	801f772 <__retarget_lock_release_recursive>
 801f14a:	e7dd      	b.n	801f108 <_fflush_r+0xc>

0801f14c <fflush>:
 801f14c:	4601      	mov	r1, r0
 801f14e:	b920      	cbnz	r0, 801f15a <fflush+0xe>
 801f150:	4a04      	ldr	r2, [pc, #16]	; (801f164 <fflush+0x18>)
 801f152:	4905      	ldr	r1, [pc, #20]	; (801f168 <fflush+0x1c>)
 801f154:	4805      	ldr	r0, [pc, #20]	; (801f16c <fflush+0x20>)
 801f156:	f000 b89f 	b.w	801f298 <_fwalk_sglue>
 801f15a:	4b05      	ldr	r3, [pc, #20]	; (801f170 <fflush+0x24>)
 801f15c:	6818      	ldr	r0, [r3, #0]
 801f15e:	f7ff bfcd 	b.w	801f0fc <_fflush_r>
 801f162:	bf00      	nop
 801f164:	20000748 	.word	0x20000748
 801f168:	0801f0fd 	.word	0x0801f0fd
 801f16c:	200008c0 	.word	0x200008c0
 801f170:	2000090c 	.word	0x2000090c

0801f174 <std>:
 801f174:	2300      	movs	r3, #0
 801f176:	b510      	push	{r4, lr}
 801f178:	4604      	mov	r4, r0
 801f17a:	e9c0 3300 	strd	r3, r3, [r0]
 801f17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f182:	6083      	str	r3, [r0, #8]
 801f184:	8181      	strh	r1, [r0, #12]
 801f186:	6643      	str	r3, [r0, #100]	; 0x64
 801f188:	81c2      	strh	r2, [r0, #14]
 801f18a:	6183      	str	r3, [r0, #24]
 801f18c:	4619      	mov	r1, r3
 801f18e:	2208      	movs	r2, #8
 801f190:	305c      	adds	r0, #92	; 0x5c
 801f192:	f000 fa53 	bl	801f63c <memset>
 801f196:	4b05      	ldr	r3, [pc, #20]	; (801f1ac <std+0x38>)
 801f198:	6263      	str	r3, [r4, #36]	; 0x24
 801f19a:	4b05      	ldr	r3, [pc, #20]	; (801f1b0 <std+0x3c>)
 801f19c:	62a3      	str	r3, [r4, #40]	; 0x28
 801f19e:	4b05      	ldr	r3, [pc, #20]	; (801f1b4 <std+0x40>)
 801f1a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f1a2:	4b05      	ldr	r3, [pc, #20]	; (801f1b8 <std+0x44>)
 801f1a4:	6224      	str	r4, [r4, #32]
 801f1a6:	6323      	str	r3, [r4, #48]	; 0x30
 801f1a8:	bd10      	pop	{r4, pc}
 801f1aa:	bf00      	nop
 801f1ac:	0801f459 	.word	0x0801f459
 801f1b0:	0801f47b 	.word	0x0801f47b
 801f1b4:	0801f4b3 	.word	0x0801f4b3
 801f1b8:	0801f4d7 	.word	0x0801f4d7

0801f1bc <stdio_exit_handler>:
 801f1bc:	4a02      	ldr	r2, [pc, #8]	; (801f1c8 <stdio_exit_handler+0xc>)
 801f1be:	4903      	ldr	r1, [pc, #12]	; (801f1cc <stdio_exit_handler+0x10>)
 801f1c0:	4803      	ldr	r0, [pc, #12]	; (801f1d0 <stdio_exit_handler+0x14>)
 801f1c2:	f000 b869 	b.w	801f298 <_fwalk_sglue>
 801f1c6:	bf00      	nop
 801f1c8:	20000748 	.word	0x20000748
 801f1cc:	0801f0fd 	.word	0x0801f0fd
 801f1d0:	200008c0 	.word	0x200008c0

0801f1d4 <cleanup_stdio>:
 801f1d4:	6841      	ldr	r1, [r0, #4]
 801f1d6:	4b0c      	ldr	r3, [pc, #48]	; (801f208 <cleanup_stdio+0x34>)
 801f1d8:	4299      	cmp	r1, r3
 801f1da:	b510      	push	{r4, lr}
 801f1dc:	4604      	mov	r4, r0
 801f1de:	d001      	beq.n	801f1e4 <cleanup_stdio+0x10>
 801f1e0:	f7ff ff8c 	bl	801f0fc <_fflush_r>
 801f1e4:	68a1      	ldr	r1, [r4, #8]
 801f1e6:	4b09      	ldr	r3, [pc, #36]	; (801f20c <cleanup_stdio+0x38>)
 801f1e8:	4299      	cmp	r1, r3
 801f1ea:	d002      	beq.n	801f1f2 <cleanup_stdio+0x1e>
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	f7ff ff85 	bl	801f0fc <_fflush_r>
 801f1f2:	68e1      	ldr	r1, [r4, #12]
 801f1f4:	4b06      	ldr	r3, [pc, #24]	; (801f210 <cleanup_stdio+0x3c>)
 801f1f6:	4299      	cmp	r1, r3
 801f1f8:	d004      	beq.n	801f204 <cleanup_stdio+0x30>
 801f1fa:	4620      	mov	r0, r4
 801f1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f200:	f7ff bf7c 	b.w	801f0fc <_fflush_r>
 801f204:	bd10      	pop	{r4, pc}
 801f206:	bf00      	nop
 801f208:	200029e0 	.word	0x200029e0
 801f20c:	20002a48 	.word	0x20002a48
 801f210:	20002ab0 	.word	0x20002ab0

0801f214 <global_stdio_init.part.0>:
 801f214:	b510      	push	{r4, lr}
 801f216:	4b0b      	ldr	r3, [pc, #44]	; (801f244 <global_stdio_init.part.0+0x30>)
 801f218:	4c0b      	ldr	r4, [pc, #44]	; (801f248 <global_stdio_init.part.0+0x34>)
 801f21a:	4a0c      	ldr	r2, [pc, #48]	; (801f24c <global_stdio_init.part.0+0x38>)
 801f21c:	601a      	str	r2, [r3, #0]
 801f21e:	4620      	mov	r0, r4
 801f220:	2200      	movs	r2, #0
 801f222:	2104      	movs	r1, #4
 801f224:	f7ff ffa6 	bl	801f174 <std>
 801f228:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f22c:	2201      	movs	r2, #1
 801f22e:	2109      	movs	r1, #9
 801f230:	f7ff ffa0 	bl	801f174 <std>
 801f234:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f238:	2202      	movs	r2, #2
 801f23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f23e:	2112      	movs	r1, #18
 801f240:	f7ff bf98 	b.w	801f174 <std>
 801f244:	20002b18 	.word	0x20002b18
 801f248:	200029e0 	.word	0x200029e0
 801f24c:	0801f1bd 	.word	0x0801f1bd

0801f250 <__sfp_lock_acquire>:
 801f250:	4801      	ldr	r0, [pc, #4]	; (801f258 <__sfp_lock_acquire+0x8>)
 801f252:	f000 ba8d 	b.w	801f770 <__retarget_lock_acquire_recursive>
 801f256:	bf00      	nop
 801f258:	20002b21 	.word	0x20002b21

0801f25c <__sfp_lock_release>:
 801f25c:	4801      	ldr	r0, [pc, #4]	; (801f264 <__sfp_lock_release+0x8>)
 801f25e:	f000 ba88 	b.w	801f772 <__retarget_lock_release_recursive>
 801f262:	bf00      	nop
 801f264:	20002b21 	.word	0x20002b21

0801f268 <__sinit>:
 801f268:	b510      	push	{r4, lr}
 801f26a:	4604      	mov	r4, r0
 801f26c:	f7ff fff0 	bl	801f250 <__sfp_lock_acquire>
 801f270:	6a23      	ldr	r3, [r4, #32]
 801f272:	b11b      	cbz	r3, 801f27c <__sinit+0x14>
 801f274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f278:	f7ff bff0 	b.w	801f25c <__sfp_lock_release>
 801f27c:	4b04      	ldr	r3, [pc, #16]	; (801f290 <__sinit+0x28>)
 801f27e:	6223      	str	r3, [r4, #32]
 801f280:	4b04      	ldr	r3, [pc, #16]	; (801f294 <__sinit+0x2c>)
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	2b00      	cmp	r3, #0
 801f286:	d1f5      	bne.n	801f274 <__sinit+0xc>
 801f288:	f7ff ffc4 	bl	801f214 <global_stdio_init.part.0>
 801f28c:	e7f2      	b.n	801f274 <__sinit+0xc>
 801f28e:	bf00      	nop
 801f290:	0801f1d5 	.word	0x0801f1d5
 801f294:	20002b18 	.word	0x20002b18

0801f298 <_fwalk_sglue>:
 801f298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f29c:	4607      	mov	r7, r0
 801f29e:	4688      	mov	r8, r1
 801f2a0:	4614      	mov	r4, r2
 801f2a2:	2600      	movs	r6, #0
 801f2a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f2a8:	f1b9 0901 	subs.w	r9, r9, #1
 801f2ac:	d505      	bpl.n	801f2ba <_fwalk_sglue+0x22>
 801f2ae:	6824      	ldr	r4, [r4, #0]
 801f2b0:	2c00      	cmp	r4, #0
 801f2b2:	d1f7      	bne.n	801f2a4 <_fwalk_sglue+0xc>
 801f2b4:	4630      	mov	r0, r6
 801f2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2ba:	89ab      	ldrh	r3, [r5, #12]
 801f2bc:	2b01      	cmp	r3, #1
 801f2be:	d907      	bls.n	801f2d0 <_fwalk_sglue+0x38>
 801f2c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f2c4:	3301      	adds	r3, #1
 801f2c6:	d003      	beq.n	801f2d0 <_fwalk_sglue+0x38>
 801f2c8:	4629      	mov	r1, r5
 801f2ca:	4638      	mov	r0, r7
 801f2cc:	47c0      	blx	r8
 801f2ce:	4306      	orrs	r6, r0
 801f2d0:	3568      	adds	r5, #104	; 0x68
 801f2d2:	e7e9      	b.n	801f2a8 <_fwalk_sglue+0x10>

0801f2d4 <iprintf>:
 801f2d4:	b40f      	push	{r0, r1, r2, r3}
 801f2d6:	b507      	push	{r0, r1, r2, lr}
 801f2d8:	4906      	ldr	r1, [pc, #24]	; (801f2f4 <iprintf+0x20>)
 801f2da:	ab04      	add	r3, sp, #16
 801f2dc:	6808      	ldr	r0, [r1, #0]
 801f2de:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2e2:	6881      	ldr	r1, [r0, #8]
 801f2e4:	9301      	str	r3, [sp, #4]
 801f2e6:	f001 fc53 	bl	8020b90 <_vfiprintf_r>
 801f2ea:	b003      	add	sp, #12
 801f2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801f2f0:	b004      	add	sp, #16
 801f2f2:	4770      	bx	lr
 801f2f4:	2000090c 	.word	0x2000090c

0801f2f8 <_puts_r>:
 801f2f8:	6a03      	ldr	r3, [r0, #32]
 801f2fa:	b570      	push	{r4, r5, r6, lr}
 801f2fc:	6884      	ldr	r4, [r0, #8]
 801f2fe:	4605      	mov	r5, r0
 801f300:	460e      	mov	r6, r1
 801f302:	b90b      	cbnz	r3, 801f308 <_puts_r+0x10>
 801f304:	f7ff ffb0 	bl	801f268 <__sinit>
 801f308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f30a:	07db      	lsls	r3, r3, #31
 801f30c:	d405      	bmi.n	801f31a <_puts_r+0x22>
 801f30e:	89a3      	ldrh	r3, [r4, #12]
 801f310:	0598      	lsls	r0, r3, #22
 801f312:	d402      	bmi.n	801f31a <_puts_r+0x22>
 801f314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f316:	f000 fa2b 	bl	801f770 <__retarget_lock_acquire_recursive>
 801f31a:	89a3      	ldrh	r3, [r4, #12]
 801f31c:	0719      	lsls	r1, r3, #28
 801f31e:	d513      	bpl.n	801f348 <_puts_r+0x50>
 801f320:	6923      	ldr	r3, [r4, #16]
 801f322:	b18b      	cbz	r3, 801f348 <_puts_r+0x50>
 801f324:	3e01      	subs	r6, #1
 801f326:	68a3      	ldr	r3, [r4, #8]
 801f328:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f32c:	3b01      	subs	r3, #1
 801f32e:	60a3      	str	r3, [r4, #8]
 801f330:	b9e9      	cbnz	r1, 801f36e <_puts_r+0x76>
 801f332:	2b00      	cmp	r3, #0
 801f334:	da2e      	bge.n	801f394 <_puts_r+0x9c>
 801f336:	4622      	mov	r2, r4
 801f338:	210a      	movs	r1, #10
 801f33a:	4628      	mov	r0, r5
 801f33c:	f000 f8cf 	bl	801f4de <__swbuf_r>
 801f340:	3001      	adds	r0, #1
 801f342:	d007      	beq.n	801f354 <_puts_r+0x5c>
 801f344:	250a      	movs	r5, #10
 801f346:	e007      	b.n	801f358 <_puts_r+0x60>
 801f348:	4621      	mov	r1, r4
 801f34a:	4628      	mov	r0, r5
 801f34c:	f000 f904 	bl	801f558 <__swsetup_r>
 801f350:	2800      	cmp	r0, #0
 801f352:	d0e7      	beq.n	801f324 <_puts_r+0x2c>
 801f354:	f04f 35ff 	mov.w	r5, #4294967295
 801f358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f35a:	07da      	lsls	r2, r3, #31
 801f35c:	d405      	bmi.n	801f36a <_puts_r+0x72>
 801f35e:	89a3      	ldrh	r3, [r4, #12]
 801f360:	059b      	lsls	r3, r3, #22
 801f362:	d402      	bmi.n	801f36a <_puts_r+0x72>
 801f364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f366:	f000 fa04 	bl	801f772 <__retarget_lock_release_recursive>
 801f36a:	4628      	mov	r0, r5
 801f36c:	bd70      	pop	{r4, r5, r6, pc}
 801f36e:	2b00      	cmp	r3, #0
 801f370:	da04      	bge.n	801f37c <_puts_r+0x84>
 801f372:	69a2      	ldr	r2, [r4, #24]
 801f374:	429a      	cmp	r2, r3
 801f376:	dc06      	bgt.n	801f386 <_puts_r+0x8e>
 801f378:	290a      	cmp	r1, #10
 801f37a:	d004      	beq.n	801f386 <_puts_r+0x8e>
 801f37c:	6823      	ldr	r3, [r4, #0]
 801f37e:	1c5a      	adds	r2, r3, #1
 801f380:	6022      	str	r2, [r4, #0]
 801f382:	7019      	strb	r1, [r3, #0]
 801f384:	e7cf      	b.n	801f326 <_puts_r+0x2e>
 801f386:	4622      	mov	r2, r4
 801f388:	4628      	mov	r0, r5
 801f38a:	f000 f8a8 	bl	801f4de <__swbuf_r>
 801f38e:	3001      	adds	r0, #1
 801f390:	d1c9      	bne.n	801f326 <_puts_r+0x2e>
 801f392:	e7df      	b.n	801f354 <_puts_r+0x5c>
 801f394:	6823      	ldr	r3, [r4, #0]
 801f396:	250a      	movs	r5, #10
 801f398:	1c5a      	adds	r2, r3, #1
 801f39a:	6022      	str	r2, [r4, #0]
 801f39c:	701d      	strb	r5, [r3, #0]
 801f39e:	e7db      	b.n	801f358 <_puts_r+0x60>

0801f3a0 <puts>:
 801f3a0:	4b02      	ldr	r3, [pc, #8]	; (801f3ac <puts+0xc>)
 801f3a2:	4601      	mov	r1, r0
 801f3a4:	6818      	ldr	r0, [r3, #0]
 801f3a6:	f7ff bfa7 	b.w	801f2f8 <_puts_r>
 801f3aa:	bf00      	nop
 801f3ac:	2000090c 	.word	0x2000090c

0801f3b0 <sniprintf>:
 801f3b0:	b40c      	push	{r2, r3}
 801f3b2:	b530      	push	{r4, r5, lr}
 801f3b4:	4b17      	ldr	r3, [pc, #92]	; (801f414 <sniprintf+0x64>)
 801f3b6:	1e0c      	subs	r4, r1, #0
 801f3b8:	681d      	ldr	r5, [r3, #0]
 801f3ba:	b09d      	sub	sp, #116	; 0x74
 801f3bc:	da08      	bge.n	801f3d0 <sniprintf+0x20>
 801f3be:	238b      	movs	r3, #139	; 0x8b
 801f3c0:	602b      	str	r3, [r5, #0]
 801f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 801f3c6:	b01d      	add	sp, #116	; 0x74
 801f3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3cc:	b002      	add	sp, #8
 801f3ce:	4770      	bx	lr
 801f3d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f3d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f3d8:	bf14      	ite	ne
 801f3da:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f3de:	4623      	moveq	r3, r4
 801f3e0:	9304      	str	r3, [sp, #16]
 801f3e2:	9307      	str	r3, [sp, #28]
 801f3e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f3e8:	9002      	str	r0, [sp, #8]
 801f3ea:	9006      	str	r0, [sp, #24]
 801f3ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f3f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f3f2:	ab21      	add	r3, sp, #132	; 0x84
 801f3f4:	a902      	add	r1, sp, #8
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	9301      	str	r3, [sp, #4]
 801f3fa:	f001 faa1 	bl	8020940 <_svfiprintf_r>
 801f3fe:	1c43      	adds	r3, r0, #1
 801f400:	bfbc      	itt	lt
 801f402:	238b      	movlt	r3, #139	; 0x8b
 801f404:	602b      	strlt	r3, [r5, #0]
 801f406:	2c00      	cmp	r4, #0
 801f408:	d0dd      	beq.n	801f3c6 <sniprintf+0x16>
 801f40a:	9b02      	ldr	r3, [sp, #8]
 801f40c:	2200      	movs	r2, #0
 801f40e:	701a      	strb	r2, [r3, #0]
 801f410:	e7d9      	b.n	801f3c6 <sniprintf+0x16>
 801f412:	bf00      	nop
 801f414:	2000090c 	.word	0x2000090c

0801f418 <siprintf>:
 801f418:	b40e      	push	{r1, r2, r3}
 801f41a:	b500      	push	{lr}
 801f41c:	b09c      	sub	sp, #112	; 0x70
 801f41e:	ab1d      	add	r3, sp, #116	; 0x74
 801f420:	9002      	str	r0, [sp, #8]
 801f422:	9006      	str	r0, [sp, #24]
 801f424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f428:	4809      	ldr	r0, [pc, #36]	; (801f450 <siprintf+0x38>)
 801f42a:	9107      	str	r1, [sp, #28]
 801f42c:	9104      	str	r1, [sp, #16]
 801f42e:	4909      	ldr	r1, [pc, #36]	; (801f454 <siprintf+0x3c>)
 801f430:	f853 2b04 	ldr.w	r2, [r3], #4
 801f434:	9105      	str	r1, [sp, #20]
 801f436:	6800      	ldr	r0, [r0, #0]
 801f438:	9301      	str	r3, [sp, #4]
 801f43a:	a902      	add	r1, sp, #8
 801f43c:	f001 fa80 	bl	8020940 <_svfiprintf_r>
 801f440:	9b02      	ldr	r3, [sp, #8]
 801f442:	2200      	movs	r2, #0
 801f444:	701a      	strb	r2, [r3, #0]
 801f446:	b01c      	add	sp, #112	; 0x70
 801f448:	f85d eb04 	ldr.w	lr, [sp], #4
 801f44c:	b003      	add	sp, #12
 801f44e:	4770      	bx	lr
 801f450:	2000090c 	.word	0x2000090c
 801f454:	ffff0208 	.word	0xffff0208

0801f458 <__sread>:
 801f458:	b510      	push	{r4, lr}
 801f45a:	460c      	mov	r4, r1
 801f45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f460:	f000 f928 	bl	801f6b4 <_read_r>
 801f464:	2800      	cmp	r0, #0
 801f466:	bfab      	itete	ge
 801f468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f46a:	89a3      	ldrhlt	r3, [r4, #12]
 801f46c:	181b      	addge	r3, r3, r0
 801f46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f472:	bfac      	ite	ge
 801f474:	6563      	strge	r3, [r4, #84]	; 0x54
 801f476:	81a3      	strhlt	r3, [r4, #12]
 801f478:	bd10      	pop	{r4, pc}

0801f47a <__swrite>:
 801f47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f47e:	461f      	mov	r7, r3
 801f480:	898b      	ldrh	r3, [r1, #12]
 801f482:	05db      	lsls	r3, r3, #23
 801f484:	4605      	mov	r5, r0
 801f486:	460c      	mov	r4, r1
 801f488:	4616      	mov	r6, r2
 801f48a:	d505      	bpl.n	801f498 <__swrite+0x1e>
 801f48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f490:	2302      	movs	r3, #2
 801f492:	2200      	movs	r2, #0
 801f494:	f000 f8fc 	bl	801f690 <_lseek_r>
 801f498:	89a3      	ldrh	r3, [r4, #12]
 801f49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f4a2:	81a3      	strh	r3, [r4, #12]
 801f4a4:	4632      	mov	r2, r6
 801f4a6:	463b      	mov	r3, r7
 801f4a8:	4628      	mov	r0, r5
 801f4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f4ae:	f000 b923 	b.w	801f6f8 <_write_r>

0801f4b2 <__sseek>:
 801f4b2:	b510      	push	{r4, lr}
 801f4b4:	460c      	mov	r4, r1
 801f4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4ba:	f000 f8e9 	bl	801f690 <_lseek_r>
 801f4be:	1c43      	adds	r3, r0, #1
 801f4c0:	89a3      	ldrh	r3, [r4, #12]
 801f4c2:	bf15      	itete	ne
 801f4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f4ce:	81a3      	strheq	r3, [r4, #12]
 801f4d0:	bf18      	it	ne
 801f4d2:	81a3      	strhne	r3, [r4, #12]
 801f4d4:	bd10      	pop	{r4, pc}

0801f4d6 <__sclose>:
 801f4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4da:	f000 b8c9 	b.w	801f670 <_close_r>

0801f4de <__swbuf_r>:
 801f4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4e0:	460e      	mov	r6, r1
 801f4e2:	4614      	mov	r4, r2
 801f4e4:	4605      	mov	r5, r0
 801f4e6:	b118      	cbz	r0, 801f4f0 <__swbuf_r+0x12>
 801f4e8:	6a03      	ldr	r3, [r0, #32]
 801f4ea:	b90b      	cbnz	r3, 801f4f0 <__swbuf_r+0x12>
 801f4ec:	f7ff febc 	bl	801f268 <__sinit>
 801f4f0:	69a3      	ldr	r3, [r4, #24]
 801f4f2:	60a3      	str	r3, [r4, #8]
 801f4f4:	89a3      	ldrh	r3, [r4, #12]
 801f4f6:	071a      	lsls	r2, r3, #28
 801f4f8:	d525      	bpl.n	801f546 <__swbuf_r+0x68>
 801f4fa:	6923      	ldr	r3, [r4, #16]
 801f4fc:	b31b      	cbz	r3, 801f546 <__swbuf_r+0x68>
 801f4fe:	6823      	ldr	r3, [r4, #0]
 801f500:	6922      	ldr	r2, [r4, #16]
 801f502:	1a98      	subs	r0, r3, r2
 801f504:	6963      	ldr	r3, [r4, #20]
 801f506:	b2f6      	uxtb	r6, r6
 801f508:	4283      	cmp	r3, r0
 801f50a:	4637      	mov	r7, r6
 801f50c:	dc04      	bgt.n	801f518 <__swbuf_r+0x3a>
 801f50e:	4621      	mov	r1, r4
 801f510:	4628      	mov	r0, r5
 801f512:	f7ff fdf3 	bl	801f0fc <_fflush_r>
 801f516:	b9e0      	cbnz	r0, 801f552 <__swbuf_r+0x74>
 801f518:	68a3      	ldr	r3, [r4, #8]
 801f51a:	3b01      	subs	r3, #1
 801f51c:	60a3      	str	r3, [r4, #8]
 801f51e:	6823      	ldr	r3, [r4, #0]
 801f520:	1c5a      	adds	r2, r3, #1
 801f522:	6022      	str	r2, [r4, #0]
 801f524:	701e      	strb	r6, [r3, #0]
 801f526:	6962      	ldr	r2, [r4, #20]
 801f528:	1c43      	adds	r3, r0, #1
 801f52a:	429a      	cmp	r2, r3
 801f52c:	d004      	beq.n	801f538 <__swbuf_r+0x5a>
 801f52e:	89a3      	ldrh	r3, [r4, #12]
 801f530:	07db      	lsls	r3, r3, #31
 801f532:	d506      	bpl.n	801f542 <__swbuf_r+0x64>
 801f534:	2e0a      	cmp	r6, #10
 801f536:	d104      	bne.n	801f542 <__swbuf_r+0x64>
 801f538:	4621      	mov	r1, r4
 801f53a:	4628      	mov	r0, r5
 801f53c:	f7ff fdde 	bl	801f0fc <_fflush_r>
 801f540:	b938      	cbnz	r0, 801f552 <__swbuf_r+0x74>
 801f542:	4638      	mov	r0, r7
 801f544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f546:	4621      	mov	r1, r4
 801f548:	4628      	mov	r0, r5
 801f54a:	f000 f805 	bl	801f558 <__swsetup_r>
 801f54e:	2800      	cmp	r0, #0
 801f550:	d0d5      	beq.n	801f4fe <__swbuf_r+0x20>
 801f552:	f04f 37ff 	mov.w	r7, #4294967295
 801f556:	e7f4      	b.n	801f542 <__swbuf_r+0x64>

0801f558 <__swsetup_r>:
 801f558:	b538      	push	{r3, r4, r5, lr}
 801f55a:	4b2a      	ldr	r3, [pc, #168]	; (801f604 <__swsetup_r+0xac>)
 801f55c:	4605      	mov	r5, r0
 801f55e:	6818      	ldr	r0, [r3, #0]
 801f560:	460c      	mov	r4, r1
 801f562:	b118      	cbz	r0, 801f56c <__swsetup_r+0x14>
 801f564:	6a03      	ldr	r3, [r0, #32]
 801f566:	b90b      	cbnz	r3, 801f56c <__swsetup_r+0x14>
 801f568:	f7ff fe7e 	bl	801f268 <__sinit>
 801f56c:	89a3      	ldrh	r3, [r4, #12]
 801f56e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f572:	0718      	lsls	r0, r3, #28
 801f574:	d422      	bmi.n	801f5bc <__swsetup_r+0x64>
 801f576:	06d9      	lsls	r1, r3, #27
 801f578:	d407      	bmi.n	801f58a <__swsetup_r+0x32>
 801f57a:	2309      	movs	r3, #9
 801f57c:	602b      	str	r3, [r5, #0]
 801f57e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f582:	81a3      	strh	r3, [r4, #12]
 801f584:	f04f 30ff 	mov.w	r0, #4294967295
 801f588:	e034      	b.n	801f5f4 <__swsetup_r+0x9c>
 801f58a:	0758      	lsls	r0, r3, #29
 801f58c:	d512      	bpl.n	801f5b4 <__swsetup_r+0x5c>
 801f58e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f590:	b141      	cbz	r1, 801f5a4 <__swsetup_r+0x4c>
 801f592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f596:	4299      	cmp	r1, r3
 801f598:	d002      	beq.n	801f5a0 <__swsetup_r+0x48>
 801f59a:	4628      	mov	r0, r5
 801f59c:	f000 f906 	bl	801f7ac <_free_r>
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	6363      	str	r3, [r4, #52]	; 0x34
 801f5a4:	89a3      	ldrh	r3, [r4, #12]
 801f5a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f5aa:	81a3      	strh	r3, [r4, #12]
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	6063      	str	r3, [r4, #4]
 801f5b0:	6923      	ldr	r3, [r4, #16]
 801f5b2:	6023      	str	r3, [r4, #0]
 801f5b4:	89a3      	ldrh	r3, [r4, #12]
 801f5b6:	f043 0308 	orr.w	r3, r3, #8
 801f5ba:	81a3      	strh	r3, [r4, #12]
 801f5bc:	6923      	ldr	r3, [r4, #16]
 801f5be:	b94b      	cbnz	r3, 801f5d4 <__swsetup_r+0x7c>
 801f5c0:	89a3      	ldrh	r3, [r4, #12]
 801f5c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f5c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f5ca:	d003      	beq.n	801f5d4 <__swsetup_r+0x7c>
 801f5cc:	4621      	mov	r1, r4
 801f5ce:	4628      	mov	r0, r5
 801f5d0:	f001 fdae 	bl	8021130 <__smakebuf_r>
 801f5d4:	89a0      	ldrh	r0, [r4, #12]
 801f5d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f5da:	f010 0301 	ands.w	r3, r0, #1
 801f5de:	d00a      	beq.n	801f5f6 <__swsetup_r+0x9e>
 801f5e0:	2300      	movs	r3, #0
 801f5e2:	60a3      	str	r3, [r4, #8]
 801f5e4:	6963      	ldr	r3, [r4, #20]
 801f5e6:	425b      	negs	r3, r3
 801f5e8:	61a3      	str	r3, [r4, #24]
 801f5ea:	6923      	ldr	r3, [r4, #16]
 801f5ec:	b943      	cbnz	r3, 801f600 <__swsetup_r+0xa8>
 801f5ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f5f2:	d1c4      	bne.n	801f57e <__swsetup_r+0x26>
 801f5f4:	bd38      	pop	{r3, r4, r5, pc}
 801f5f6:	0781      	lsls	r1, r0, #30
 801f5f8:	bf58      	it	pl
 801f5fa:	6963      	ldrpl	r3, [r4, #20]
 801f5fc:	60a3      	str	r3, [r4, #8]
 801f5fe:	e7f4      	b.n	801f5ea <__swsetup_r+0x92>
 801f600:	2000      	movs	r0, #0
 801f602:	e7f7      	b.n	801f5f4 <__swsetup_r+0x9c>
 801f604:	2000090c 	.word	0x2000090c

0801f608 <memmove>:
 801f608:	4288      	cmp	r0, r1
 801f60a:	b510      	push	{r4, lr}
 801f60c:	eb01 0402 	add.w	r4, r1, r2
 801f610:	d902      	bls.n	801f618 <memmove+0x10>
 801f612:	4284      	cmp	r4, r0
 801f614:	4623      	mov	r3, r4
 801f616:	d807      	bhi.n	801f628 <memmove+0x20>
 801f618:	1e43      	subs	r3, r0, #1
 801f61a:	42a1      	cmp	r1, r4
 801f61c:	d008      	beq.n	801f630 <memmove+0x28>
 801f61e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f622:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f626:	e7f8      	b.n	801f61a <memmove+0x12>
 801f628:	4402      	add	r2, r0
 801f62a:	4601      	mov	r1, r0
 801f62c:	428a      	cmp	r2, r1
 801f62e:	d100      	bne.n	801f632 <memmove+0x2a>
 801f630:	bd10      	pop	{r4, pc}
 801f632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f63a:	e7f7      	b.n	801f62c <memmove+0x24>

0801f63c <memset>:
 801f63c:	4402      	add	r2, r0
 801f63e:	4603      	mov	r3, r0
 801f640:	4293      	cmp	r3, r2
 801f642:	d100      	bne.n	801f646 <memset+0xa>
 801f644:	4770      	bx	lr
 801f646:	f803 1b01 	strb.w	r1, [r3], #1
 801f64a:	e7f9      	b.n	801f640 <memset+0x4>

0801f64c <strncmp>:
 801f64c:	b510      	push	{r4, lr}
 801f64e:	b16a      	cbz	r2, 801f66c <strncmp+0x20>
 801f650:	3901      	subs	r1, #1
 801f652:	1884      	adds	r4, r0, r2
 801f654:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f658:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f65c:	429a      	cmp	r2, r3
 801f65e:	d103      	bne.n	801f668 <strncmp+0x1c>
 801f660:	42a0      	cmp	r0, r4
 801f662:	d001      	beq.n	801f668 <strncmp+0x1c>
 801f664:	2a00      	cmp	r2, #0
 801f666:	d1f5      	bne.n	801f654 <strncmp+0x8>
 801f668:	1ad0      	subs	r0, r2, r3
 801f66a:	bd10      	pop	{r4, pc}
 801f66c:	4610      	mov	r0, r2
 801f66e:	e7fc      	b.n	801f66a <strncmp+0x1e>

0801f670 <_close_r>:
 801f670:	b538      	push	{r3, r4, r5, lr}
 801f672:	4d06      	ldr	r5, [pc, #24]	; (801f68c <_close_r+0x1c>)
 801f674:	2300      	movs	r3, #0
 801f676:	4604      	mov	r4, r0
 801f678:	4608      	mov	r0, r1
 801f67a:	602b      	str	r3, [r5, #0]
 801f67c:	f7f4 fdcd 	bl	801421a <_close>
 801f680:	1c43      	adds	r3, r0, #1
 801f682:	d102      	bne.n	801f68a <_close_r+0x1a>
 801f684:	682b      	ldr	r3, [r5, #0]
 801f686:	b103      	cbz	r3, 801f68a <_close_r+0x1a>
 801f688:	6023      	str	r3, [r4, #0]
 801f68a:	bd38      	pop	{r3, r4, r5, pc}
 801f68c:	20002b1c 	.word	0x20002b1c

0801f690 <_lseek_r>:
 801f690:	b538      	push	{r3, r4, r5, lr}
 801f692:	4d07      	ldr	r5, [pc, #28]	; (801f6b0 <_lseek_r+0x20>)
 801f694:	4604      	mov	r4, r0
 801f696:	4608      	mov	r0, r1
 801f698:	4611      	mov	r1, r2
 801f69a:	2200      	movs	r2, #0
 801f69c:	602a      	str	r2, [r5, #0]
 801f69e:	461a      	mov	r2, r3
 801f6a0:	f7f4 fde2 	bl	8014268 <_lseek>
 801f6a4:	1c43      	adds	r3, r0, #1
 801f6a6:	d102      	bne.n	801f6ae <_lseek_r+0x1e>
 801f6a8:	682b      	ldr	r3, [r5, #0]
 801f6aa:	b103      	cbz	r3, 801f6ae <_lseek_r+0x1e>
 801f6ac:	6023      	str	r3, [r4, #0]
 801f6ae:	bd38      	pop	{r3, r4, r5, pc}
 801f6b0:	20002b1c 	.word	0x20002b1c

0801f6b4 <_read_r>:
 801f6b4:	b538      	push	{r3, r4, r5, lr}
 801f6b6:	4d07      	ldr	r5, [pc, #28]	; (801f6d4 <_read_r+0x20>)
 801f6b8:	4604      	mov	r4, r0
 801f6ba:	4608      	mov	r0, r1
 801f6bc:	4611      	mov	r1, r2
 801f6be:	2200      	movs	r2, #0
 801f6c0:	602a      	str	r2, [r5, #0]
 801f6c2:	461a      	mov	r2, r3
 801f6c4:	f7f4 fd70 	bl	80141a8 <_read>
 801f6c8:	1c43      	adds	r3, r0, #1
 801f6ca:	d102      	bne.n	801f6d2 <_read_r+0x1e>
 801f6cc:	682b      	ldr	r3, [r5, #0]
 801f6ce:	b103      	cbz	r3, 801f6d2 <_read_r+0x1e>
 801f6d0:	6023      	str	r3, [r4, #0]
 801f6d2:	bd38      	pop	{r3, r4, r5, pc}
 801f6d4:	20002b1c 	.word	0x20002b1c

0801f6d8 <_sbrk_r>:
 801f6d8:	b538      	push	{r3, r4, r5, lr}
 801f6da:	4d06      	ldr	r5, [pc, #24]	; (801f6f4 <_sbrk_r+0x1c>)
 801f6dc:	2300      	movs	r3, #0
 801f6de:	4604      	mov	r4, r0
 801f6e0:	4608      	mov	r0, r1
 801f6e2:	602b      	str	r3, [r5, #0]
 801f6e4:	f7f4 fdce 	bl	8014284 <_sbrk>
 801f6e8:	1c43      	adds	r3, r0, #1
 801f6ea:	d102      	bne.n	801f6f2 <_sbrk_r+0x1a>
 801f6ec:	682b      	ldr	r3, [r5, #0]
 801f6ee:	b103      	cbz	r3, 801f6f2 <_sbrk_r+0x1a>
 801f6f0:	6023      	str	r3, [r4, #0]
 801f6f2:	bd38      	pop	{r3, r4, r5, pc}
 801f6f4:	20002b1c 	.word	0x20002b1c

0801f6f8 <_write_r>:
 801f6f8:	b538      	push	{r3, r4, r5, lr}
 801f6fa:	4d07      	ldr	r5, [pc, #28]	; (801f718 <_write_r+0x20>)
 801f6fc:	4604      	mov	r4, r0
 801f6fe:	4608      	mov	r0, r1
 801f700:	4611      	mov	r1, r2
 801f702:	2200      	movs	r2, #0
 801f704:	602a      	str	r2, [r5, #0]
 801f706:	461a      	mov	r2, r3
 801f708:	f7f4 fd6b 	bl	80141e2 <_write>
 801f70c:	1c43      	adds	r3, r0, #1
 801f70e:	d102      	bne.n	801f716 <_write_r+0x1e>
 801f710:	682b      	ldr	r3, [r5, #0]
 801f712:	b103      	cbz	r3, 801f716 <_write_r+0x1e>
 801f714:	6023      	str	r3, [r4, #0]
 801f716:	bd38      	pop	{r3, r4, r5, pc}
 801f718:	20002b1c 	.word	0x20002b1c

0801f71c <__errno>:
 801f71c:	4b01      	ldr	r3, [pc, #4]	; (801f724 <__errno+0x8>)
 801f71e:	6818      	ldr	r0, [r3, #0]
 801f720:	4770      	bx	lr
 801f722:	bf00      	nop
 801f724:	2000090c 	.word	0x2000090c

0801f728 <__libc_init_array>:
 801f728:	b570      	push	{r4, r5, r6, lr}
 801f72a:	4d0d      	ldr	r5, [pc, #52]	; (801f760 <__libc_init_array+0x38>)
 801f72c:	4c0d      	ldr	r4, [pc, #52]	; (801f764 <__libc_init_array+0x3c>)
 801f72e:	1b64      	subs	r4, r4, r5
 801f730:	10a4      	asrs	r4, r4, #2
 801f732:	2600      	movs	r6, #0
 801f734:	42a6      	cmp	r6, r4
 801f736:	d109      	bne.n	801f74c <__libc_init_array+0x24>
 801f738:	4d0b      	ldr	r5, [pc, #44]	; (801f768 <__libc_init_array+0x40>)
 801f73a:	4c0c      	ldr	r4, [pc, #48]	; (801f76c <__libc_init_array+0x44>)
 801f73c:	f001 fe0a 	bl	8021354 <_init>
 801f740:	1b64      	subs	r4, r4, r5
 801f742:	10a4      	asrs	r4, r4, #2
 801f744:	2600      	movs	r6, #0
 801f746:	42a6      	cmp	r6, r4
 801f748:	d105      	bne.n	801f756 <__libc_init_array+0x2e>
 801f74a:	bd70      	pop	{r4, r5, r6, pc}
 801f74c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f750:	4798      	blx	r3
 801f752:	3601      	adds	r6, #1
 801f754:	e7ee      	b.n	801f734 <__libc_init_array+0xc>
 801f756:	f855 3b04 	ldr.w	r3, [r5], #4
 801f75a:	4798      	blx	r3
 801f75c:	3601      	adds	r6, #1
 801f75e:	e7f2      	b.n	801f746 <__libc_init_array+0x1e>
 801f760:	080243dc 	.word	0x080243dc
 801f764:	080243dc 	.word	0x080243dc
 801f768:	080243dc 	.word	0x080243dc
 801f76c:	080243e0 	.word	0x080243e0

0801f770 <__retarget_lock_acquire_recursive>:
 801f770:	4770      	bx	lr

0801f772 <__retarget_lock_release_recursive>:
 801f772:	4770      	bx	lr

0801f774 <memcpy>:
 801f774:	440a      	add	r2, r1
 801f776:	4291      	cmp	r1, r2
 801f778:	f100 33ff 	add.w	r3, r0, #4294967295
 801f77c:	d100      	bne.n	801f780 <memcpy+0xc>
 801f77e:	4770      	bx	lr
 801f780:	b510      	push	{r4, lr}
 801f782:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f786:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f78a:	4291      	cmp	r1, r2
 801f78c:	d1f9      	bne.n	801f782 <memcpy+0xe>
 801f78e:	bd10      	pop	{r4, pc}

0801f790 <nan>:
 801f790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f798 <nan+0x8>
 801f794:	4770      	bx	lr
 801f796:	bf00      	nop
 801f798:	00000000 	.word	0x00000000
 801f79c:	7ff80000 	.word	0x7ff80000

0801f7a0 <nanf>:
 801f7a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f7a8 <nanf+0x8>
 801f7a4:	4770      	bx	lr
 801f7a6:	bf00      	nop
 801f7a8:	7fc00000 	.word	0x7fc00000

0801f7ac <_free_r>:
 801f7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f7ae:	2900      	cmp	r1, #0
 801f7b0:	d044      	beq.n	801f83c <_free_r+0x90>
 801f7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f7b6:	9001      	str	r0, [sp, #4]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	f1a1 0404 	sub.w	r4, r1, #4
 801f7be:	bfb8      	it	lt
 801f7c0:	18e4      	addlt	r4, r4, r3
 801f7c2:	f7fe fb51 	bl	801de68 <__malloc_lock>
 801f7c6:	4a1e      	ldr	r2, [pc, #120]	; (801f840 <_free_r+0x94>)
 801f7c8:	9801      	ldr	r0, [sp, #4]
 801f7ca:	6813      	ldr	r3, [r2, #0]
 801f7cc:	b933      	cbnz	r3, 801f7dc <_free_r+0x30>
 801f7ce:	6063      	str	r3, [r4, #4]
 801f7d0:	6014      	str	r4, [r2, #0]
 801f7d2:	b003      	add	sp, #12
 801f7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f7d8:	f7fe bb4c 	b.w	801de74 <__malloc_unlock>
 801f7dc:	42a3      	cmp	r3, r4
 801f7de:	d908      	bls.n	801f7f2 <_free_r+0x46>
 801f7e0:	6825      	ldr	r5, [r4, #0]
 801f7e2:	1961      	adds	r1, r4, r5
 801f7e4:	428b      	cmp	r3, r1
 801f7e6:	bf01      	itttt	eq
 801f7e8:	6819      	ldreq	r1, [r3, #0]
 801f7ea:	685b      	ldreq	r3, [r3, #4]
 801f7ec:	1949      	addeq	r1, r1, r5
 801f7ee:	6021      	streq	r1, [r4, #0]
 801f7f0:	e7ed      	b.n	801f7ce <_free_r+0x22>
 801f7f2:	461a      	mov	r2, r3
 801f7f4:	685b      	ldr	r3, [r3, #4]
 801f7f6:	b10b      	cbz	r3, 801f7fc <_free_r+0x50>
 801f7f8:	42a3      	cmp	r3, r4
 801f7fa:	d9fa      	bls.n	801f7f2 <_free_r+0x46>
 801f7fc:	6811      	ldr	r1, [r2, #0]
 801f7fe:	1855      	adds	r5, r2, r1
 801f800:	42a5      	cmp	r5, r4
 801f802:	d10b      	bne.n	801f81c <_free_r+0x70>
 801f804:	6824      	ldr	r4, [r4, #0]
 801f806:	4421      	add	r1, r4
 801f808:	1854      	adds	r4, r2, r1
 801f80a:	42a3      	cmp	r3, r4
 801f80c:	6011      	str	r1, [r2, #0]
 801f80e:	d1e0      	bne.n	801f7d2 <_free_r+0x26>
 801f810:	681c      	ldr	r4, [r3, #0]
 801f812:	685b      	ldr	r3, [r3, #4]
 801f814:	6053      	str	r3, [r2, #4]
 801f816:	440c      	add	r4, r1
 801f818:	6014      	str	r4, [r2, #0]
 801f81a:	e7da      	b.n	801f7d2 <_free_r+0x26>
 801f81c:	d902      	bls.n	801f824 <_free_r+0x78>
 801f81e:	230c      	movs	r3, #12
 801f820:	6003      	str	r3, [r0, #0]
 801f822:	e7d6      	b.n	801f7d2 <_free_r+0x26>
 801f824:	6825      	ldr	r5, [r4, #0]
 801f826:	1961      	adds	r1, r4, r5
 801f828:	428b      	cmp	r3, r1
 801f82a:	bf04      	itt	eq
 801f82c:	6819      	ldreq	r1, [r3, #0]
 801f82e:	685b      	ldreq	r3, [r3, #4]
 801f830:	6063      	str	r3, [r4, #4]
 801f832:	bf04      	itt	eq
 801f834:	1949      	addeq	r1, r1, r5
 801f836:	6021      	streq	r1, [r4, #0]
 801f838:	6054      	str	r4, [r2, #4]
 801f83a:	e7ca      	b.n	801f7d2 <_free_r+0x26>
 801f83c:	b003      	add	sp, #12
 801f83e:	bd30      	pop	{r4, r5, pc}
 801f840:	200029d8 	.word	0x200029d8

0801f844 <rshift>:
 801f844:	6903      	ldr	r3, [r0, #16]
 801f846:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f84a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f84e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f852:	f100 0414 	add.w	r4, r0, #20
 801f856:	dd45      	ble.n	801f8e4 <rshift+0xa0>
 801f858:	f011 011f 	ands.w	r1, r1, #31
 801f85c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f860:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f864:	d10c      	bne.n	801f880 <rshift+0x3c>
 801f866:	f100 0710 	add.w	r7, r0, #16
 801f86a:	4629      	mov	r1, r5
 801f86c:	42b1      	cmp	r1, r6
 801f86e:	d334      	bcc.n	801f8da <rshift+0x96>
 801f870:	1a9b      	subs	r3, r3, r2
 801f872:	009b      	lsls	r3, r3, #2
 801f874:	1eea      	subs	r2, r5, #3
 801f876:	4296      	cmp	r6, r2
 801f878:	bf38      	it	cc
 801f87a:	2300      	movcc	r3, #0
 801f87c:	4423      	add	r3, r4
 801f87e:	e015      	b.n	801f8ac <rshift+0x68>
 801f880:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f884:	f1c1 0820 	rsb	r8, r1, #32
 801f888:	40cf      	lsrs	r7, r1
 801f88a:	f105 0e04 	add.w	lr, r5, #4
 801f88e:	46a1      	mov	r9, r4
 801f890:	4576      	cmp	r6, lr
 801f892:	46f4      	mov	ip, lr
 801f894:	d815      	bhi.n	801f8c2 <rshift+0x7e>
 801f896:	1a9a      	subs	r2, r3, r2
 801f898:	0092      	lsls	r2, r2, #2
 801f89a:	3a04      	subs	r2, #4
 801f89c:	3501      	adds	r5, #1
 801f89e:	42ae      	cmp	r6, r5
 801f8a0:	bf38      	it	cc
 801f8a2:	2200      	movcc	r2, #0
 801f8a4:	18a3      	adds	r3, r4, r2
 801f8a6:	50a7      	str	r7, [r4, r2]
 801f8a8:	b107      	cbz	r7, 801f8ac <rshift+0x68>
 801f8aa:	3304      	adds	r3, #4
 801f8ac:	1b1a      	subs	r2, r3, r4
 801f8ae:	42a3      	cmp	r3, r4
 801f8b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f8b4:	bf08      	it	eq
 801f8b6:	2300      	moveq	r3, #0
 801f8b8:	6102      	str	r2, [r0, #16]
 801f8ba:	bf08      	it	eq
 801f8bc:	6143      	streq	r3, [r0, #20]
 801f8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f8c2:	f8dc c000 	ldr.w	ip, [ip]
 801f8c6:	fa0c fc08 	lsl.w	ip, ip, r8
 801f8ca:	ea4c 0707 	orr.w	r7, ip, r7
 801f8ce:	f849 7b04 	str.w	r7, [r9], #4
 801f8d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f8d6:	40cf      	lsrs	r7, r1
 801f8d8:	e7da      	b.n	801f890 <rshift+0x4c>
 801f8da:	f851 cb04 	ldr.w	ip, [r1], #4
 801f8de:	f847 cf04 	str.w	ip, [r7, #4]!
 801f8e2:	e7c3      	b.n	801f86c <rshift+0x28>
 801f8e4:	4623      	mov	r3, r4
 801f8e6:	e7e1      	b.n	801f8ac <rshift+0x68>

0801f8e8 <__hexdig_fun>:
 801f8e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f8ec:	2b09      	cmp	r3, #9
 801f8ee:	d802      	bhi.n	801f8f6 <__hexdig_fun+0xe>
 801f8f0:	3820      	subs	r0, #32
 801f8f2:	b2c0      	uxtb	r0, r0
 801f8f4:	4770      	bx	lr
 801f8f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f8fa:	2b05      	cmp	r3, #5
 801f8fc:	d801      	bhi.n	801f902 <__hexdig_fun+0x1a>
 801f8fe:	3847      	subs	r0, #71	; 0x47
 801f900:	e7f7      	b.n	801f8f2 <__hexdig_fun+0xa>
 801f902:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f906:	2b05      	cmp	r3, #5
 801f908:	d801      	bhi.n	801f90e <__hexdig_fun+0x26>
 801f90a:	3827      	subs	r0, #39	; 0x27
 801f90c:	e7f1      	b.n	801f8f2 <__hexdig_fun+0xa>
 801f90e:	2000      	movs	r0, #0
 801f910:	4770      	bx	lr
	...

0801f914 <__gethex>:
 801f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f918:	4617      	mov	r7, r2
 801f91a:	680a      	ldr	r2, [r1, #0]
 801f91c:	b085      	sub	sp, #20
 801f91e:	f102 0b02 	add.w	fp, r2, #2
 801f922:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f926:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f92a:	4681      	mov	r9, r0
 801f92c:	468a      	mov	sl, r1
 801f92e:	9302      	str	r3, [sp, #8]
 801f930:	32fe      	adds	r2, #254	; 0xfe
 801f932:	eb02 030b 	add.w	r3, r2, fp
 801f936:	46d8      	mov	r8, fp
 801f938:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f93c:	9301      	str	r3, [sp, #4]
 801f93e:	2830      	cmp	r0, #48	; 0x30
 801f940:	d0f7      	beq.n	801f932 <__gethex+0x1e>
 801f942:	f7ff ffd1 	bl	801f8e8 <__hexdig_fun>
 801f946:	4604      	mov	r4, r0
 801f948:	2800      	cmp	r0, #0
 801f94a:	d138      	bne.n	801f9be <__gethex+0xaa>
 801f94c:	49a7      	ldr	r1, [pc, #668]	; (801fbec <__gethex+0x2d8>)
 801f94e:	2201      	movs	r2, #1
 801f950:	4640      	mov	r0, r8
 801f952:	f7ff fe7b 	bl	801f64c <strncmp>
 801f956:	4606      	mov	r6, r0
 801f958:	2800      	cmp	r0, #0
 801f95a:	d169      	bne.n	801fa30 <__gethex+0x11c>
 801f95c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f960:	465d      	mov	r5, fp
 801f962:	f7ff ffc1 	bl	801f8e8 <__hexdig_fun>
 801f966:	2800      	cmp	r0, #0
 801f968:	d064      	beq.n	801fa34 <__gethex+0x120>
 801f96a:	465a      	mov	r2, fp
 801f96c:	7810      	ldrb	r0, [r2, #0]
 801f96e:	2830      	cmp	r0, #48	; 0x30
 801f970:	4690      	mov	r8, r2
 801f972:	f102 0201 	add.w	r2, r2, #1
 801f976:	d0f9      	beq.n	801f96c <__gethex+0x58>
 801f978:	f7ff ffb6 	bl	801f8e8 <__hexdig_fun>
 801f97c:	2301      	movs	r3, #1
 801f97e:	fab0 f480 	clz	r4, r0
 801f982:	0964      	lsrs	r4, r4, #5
 801f984:	465e      	mov	r6, fp
 801f986:	9301      	str	r3, [sp, #4]
 801f988:	4642      	mov	r2, r8
 801f98a:	4615      	mov	r5, r2
 801f98c:	3201      	adds	r2, #1
 801f98e:	7828      	ldrb	r0, [r5, #0]
 801f990:	f7ff ffaa 	bl	801f8e8 <__hexdig_fun>
 801f994:	2800      	cmp	r0, #0
 801f996:	d1f8      	bne.n	801f98a <__gethex+0x76>
 801f998:	4994      	ldr	r1, [pc, #592]	; (801fbec <__gethex+0x2d8>)
 801f99a:	2201      	movs	r2, #1
 801f99c:	4628      	mov	r0, r5
 801f99e:	f7ff fe55 	bl	801f64c <strncmp>
 801f9a2:	b978      	cbnz	r0, 801f9c4 <__gethex+0xb0>
 801f9a4:	b946      	cbnz	r6, 801f9b8 <__gethex+0xa4>
 801f9a6:	1c6e      	adds	r6, r5, #1
 801f9a8:	4632      	mov	r2, r6
 801f9aa:	4615      	mov	r5, r2
 801f9ac:	3201      	adds	r2, #1
 801f9ae:	7828      	ldrb	r0, [r5, #0]
 801f9b0:	f7ff ff9a 	bl	801f8e8 <__hexdig_fun>
 801f9b4:	2800      	cmp	r0, #0
 801f9b6:	d1f8      	bne.n	801f9aa <__gethex+0x96>
 801f9b8:	1b73      	subs	r3, r6, r5
 801f9ba:	009e      	lsls	r6, r3, #2
 801f9bc:	e004      	b.n	801f9c8 <__gethex+0xb4>
 801f9be:	2400      	movs	r4, #0
 801f9c0:	4626      	mov	r6, r4
 801f9c2:	e7e1      	b.n	801f988 <__gethex+0x74>
 801f9c4:	2e00      	cmp	r6, #0
 801f9c6:	d1f7      	bne.n	801f9b8 <__gethex+0xa4>
 801f9c8:	782b      	ldrb	r3, [r5, #0]
 801f9ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f9ce:	2b50      	cmp	r3, #80	; 0x50
 801f9d0:	d13d      	bne.n	801fa4e <__gethex+0x13a>
 801f9d2:	786b      	ldrb	r3, [r5, #1]
 801f9d4:	2b2b      	cmp	r3, #43	; 0x2b
 801f9d6:	d02f      	beq.n	801fa38 <__gethex+0x124>
 801f9d8:	2b2d      	cmp	r3, #45	; 0x2d
 801f9da:	d031      	beq.n	801fa40 <__gethex+0x12c>
 801f9dc:	1c69      	adds	r1, r5, #1
 801f9de:	f04f 0b00 	mov.w	fp, #0
 801f9e2:	7808      	ldrb	r0, [r1, #0]
 801f9e4:	f7ff ff80 	bl	801f8e8 <__hexdig_fun>
 801f9e8:	1e42      	subs	r2, r0, #1
 801f9ea:	b2d2      	uxtb	r2, r2
 801f9ec:	2a18      	cmp	r2, #24
 801f9ee:	d82e      	bhi.n	801fa4e <__gethex+0x13a>
 801f9f0:	f1a0 0210 	sub.w	r2, r0, #16
 801f9f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f9f8:	f7ff ff76 	bl	801f8e8 <__hexdig_fun>
 801f9fc:	f100 3cff 	add.w	ip, r0, #4294967295
 801fa00:	fa5f fc8c 	uxtb.w	ip, ip
 801fa04:	f1bc 0f18 	cmp.w	ip, #24
 801fa08:	d91d      	bls.n	801fa46 <__gethex+0x132>
 801fa0a:	f1bb 0f00 	cmp.w	fp, #0
 801fa0e:	d000      	beq.n	801fa12 <__gethex+0xfe>
 801fa10:	4252      	negs	r2, r2
 801fa12:	4416      	add	r6, r2
 801fa14:	f8ca 1000 	str.w	r1, [sl]
 801fa18:	b1dc      	cbz	r4, 801fa52 <__gethex+0x13e>
 801fa1a:	9b01      	ldr	r3, [sp, #4]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	bf14      	ite	ne
 801fa20:	f04f 0800 	movne.w	r8, #0
 801fa24:	f04f 0806 	moveq.w	r8, #6
 801fa28:	4640      	mov	r0, r8
 801fa2a:	b005      	add	sp, #20
 801fa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa30:	4645      	mov	r5, r8
 801fa32:	4626      	mov	r6, r4
 801fa34:	2401      	movs	r4, #1
 801fa36:	e7c7      	b.n	801f9c8 <__gethex+0xb4>
 801fa38:	f04f 0b00 	mov.w	fp, #0
 801fa3c:	1ca9      	adds	r1, r5, #2
 801fa3e:	e7d0      	b.n	801f9e2 <__gethex+0xce>
 801fa40:	f04f 0b01 	mov.w	fp, #1
 801fa44:	e7fa      	b.n	801fa3c <__gethex+0x128>
 801fa46:	230a      	movs	r3, #10
 801fa48:	fb03 0002 	mla	r0, r3, r2, r0
 801fa4c:	e7d0      	b.n	801f9f0 <__gethex+0xdc>
 801fa4e:	4629      	mov	r1, r5
 801fa50:	e7e0      	b.n	801fa14 <__gethex+0x100>
 801fa52:	eba5 0308 	sub.w	r3, r5, r8
 801fa56:	3b01      	subs	r3, #1
 801fa58:	4621      	mov	r1, r4
 801fa5a:	2b07      	cmp	r3, #7
 801fa5c:	dc0a      	bgt.n	801fa74 <__gethex+0x160>
 801fa5e:	4648      	mov	r0, r9
 801fa60:	f000 fa5a 	bl	801ff18 <_Balloc>
 801fa64:	4604      	mov	r4, r0
 801fa66:	b940      	cbnz	r0, 801fa7a <__gethex+0x166>
 801fa68:	4b61      	ldr	r3, [pc, #388]	; (801fbf0 <__gethex+0x2dc>)
 801fa6a:	4602      	mov	r2, r0
 801fa6c:	21e4      	movs	r1, #228	; 0xe4
 801fa6e:	4861      	ldr	r0, [pc, #388]	; (801fbf4 <__gethex+0x2e0>)
 801fa70:	f001 fbbc 	bl	80211ec <__assert_func>
 801fa74:	3101      	adds	r1, #1
 801fa76:	105b      	asrs	r3, r3, #1
 801fa78:	e7ef      	b.n	801fa5a <__gethex+0x146>
 801fa7a:	f100 0a14 	add.w	sl, r0, #20
 801fa7e:	2300      	movs	r3, #0
 801fa80:	495a      	ldr	r1, [pc, #360]	; (801fbec <__gethex+0x2d8>)
 801fa82:	f8cd a004 	str.w	sl, [sp, #4]
 801fa86:	469b      	mov	fp, r3
 801fa88:	45a8      	cmp	r8, r5
 801fa8a:	d342      	bcc.n	801fb12 <__gethex+0x1fe>
 801fa8c:	9801      	ldr	r0, [sp, #4]
 801fa8e:	f840 bb04 	str.w	fp, [r0], #4
 801fa92:	eba0 000a 	sub.w	r0, r0, sl
 801fa96:	1080      	asrs	r0, r0, #2
 801fa98:	6120      	str	r0, [r4, #16]
 801fa9a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801fa9e:	4658      	mov	r0, fp
 801faa0:	f000 fb2c 	bl	80200fc <__hi0bits>
 801faa4:	683d      	ldr	r5, [r7, #0]
 801faa6:	eba8 0000 	sub.w	r0, r8, r0
 801faaa:	42a8      	cmp	r0, r5
 801faac:	dd59      	ble.n	801fb62 <__gethex+0x24e>
 801faae:	eba0 0805 	sub.w	r8, r0, r5
 801fab2:	4641      	mov	r1, r8
 801fab4:	4620      	mov	r0, r4
 801fab6:	f000 febb 	bl	8020830 <__any_on>
 801faba:	4683      	mov	fp, r0
 801fabc:	b1b8      	cbz	r0, 801faee <__gethex+0x1da>
 801fabe:	f108 33ff 	add.w	r3, r8, #4294967295
 801fac2:	1159      	asrs	r1, r3, #5
 801fac4:	f003 021f 	and.w	r2, r3, #31
 801fac8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801facc:	f04f 0b01 	mov.w	fp, #1
 801fad0:	fa0b f202 	lsl.w	r2, fp, r2
 801fad4:	420a      	tst	r2, r1
 801fad6:	d00a      	beq.n	801faee <__gethex+0x1da>
 801fad8:	455b      	cmp	r3, fp
 801fada:	dd06      	ble.n	801faea <__gethex+0x1d6>
 801fadc:	f1a8 0102 	sub.w	r1, r8, #2
 801fae0:	4620      	mov	r0, r4
 801fae2:	f000 fea5 	bl	8020830 <__any_on>
 801fae6:	2800      	cmp	r0, #0
 801fae8:	d138      	bne.n	801fb5c <__gethex+0x248>
 801faea:	f04f 0b02 	mov.w	fp, #2
 801faee:	4641      	mov	r1, r8
 801faf0:	4620      	mov	r0, r4
 801faf2:	f7ff fea7 	bl	801f844 <rshift>
 801faf6:	4446      	add	r6, r8
 801faf8:	68bb      	ldr	r3, [r7, #8]
 801fafa:	42b3      	cmp	r3, r6
 801fafc:	da41      	bge.n	801fb82 <__gethex+0x26e>
 801fafe:	4621      	mov	r1, r4
 801fb00:	4648      	mov	r0, r9
 801fb02:	f000 fa49 	bl	801ff98 <_Bfree>
 801fb06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fb08:	2300      	movs	r3, #0
 801fb0a:	6013      	str	r3, [r2, #0]
 801fb0c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801fb10:	e78a      	b.n	801fa28 <__gethex+0x114>
 801fb12:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801fb16:	2a2e      	cmp	r2, #46	; 0x2e
 801fb18:	d014      	beq.n	801fb44 <__gethex+0x230>
 801fb1a:	2b20      	cmp	r3, #32
 801fb1c:	d106      	bne.n	801fb2c <__gethex+0x218>
 801fb1e:	9b01      	ldr	r3, [sp, #4]
 801fb20:	f843 bb04 	str.w	fp, [r3], #4
 801fb24:	f04f 0b00 	mov.w	fp, #0
 801fb28:	9301      	str	r3, [sp, #4]
 801fb2a:	465b      	mov	r3, fp
 801fb2c:	7828      	ldrb	r0, [r5, #0]
 801fb2e:	9303      	str	r3, [sp, #12]
 801fb30:	f7ff feda 	bl	801f8e8 <__hexdig_fun>
 801fb34:	9b03      	ldr	r3, [sp, #12]
 801fb36:	f000 000f 	and.w	r0, r0, #15
 801fb3a:	4098      	lsls	r0, r3
 801fb3c:	ea4b 0b00 	orr.w	fp, fp, r0
 801fb40:	3304      	adds	r3, #4
 801fb42:	e7a1      	b.n	801fa88 <__gethex+0x174>
 801fb44:	45a8      	cmp	r8, r5
 801fb46:	d8e8      	bhi.n	801fb1a <__gethex+0x206>
 801fb48:	2201      	movs	r2, #1
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	9303      	str	r3, [sp, #12]
 801fb4e:	f7ff fd7d 	bl	801f64c <strncmp>
 801fb52:	4926      	ldr	r1, [pc, #152]	; (801fbec <__gethex+0x2d8>)
 801fb54:	9b03      	ldr	r3, [sp, #12]
 801fb56:	2800      	cmp	r0, #0
 801fb58:	d1df      	bne.n	801fb1a <__gethex+0x206>
 801fb5a:	e795      	b.n	801fa88 <__gethex+0x174>
 801fb5c:	f04f 0b03 	mov.w	fp, #3
 801fb60:	e7c5      	b.n	801faee <__gethex+0x1da>
 801fb62:	da0b      	bge.n	801fb7c <__gethex+0x268>
 801fb64:	eba5 0800 	sub.w	r8, r5, r0
 801fb68:	4621      	mov	r1, r4
 801fb6a:	4642      	mov	r2, r8
 801fb6c:	4648      	mov	r0, r9
 801fb6e:	f000 fc2d 	bl	80203cc <__lshift>
 801fb72:	eba6 0608 	sub.w	r6, r6, r8
 801fb76:	4604      	mov	r4, r0
 801fb78:	f100 0a14 	add.w	sl, r0, #20
 801fb7c:	f04f 0b00 	mov.w	fp, #0
 801fb80:	e7ba      	b.n	801faf8 <__gethex+0x1e4>
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	42b3      	cmp	r3, r6
 801fb86:	dd73      	ble.n	801fc70 <__gethex+0x35c>
 801fb88:	1b9e      	subs	r6, r3, r6
 801fb8a:	42b5      	cmp	r5, r6
 801fb8c:	dc34      	bgt.n	801fbf8 <__gethex+0x2e4>
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	2b02      	cmp	r3, #2
 801fb92:	d023      	beq.n	801fbdc <__gethex+0x2c8>
 801fb94:	2b03      	cmp	r3, #3
 801fb96:	d025      	beq.n	801fbe4 <__gethex+0x2d0>
 801fb98:	2b01      	cmp	r3, #1
 801fb9a:	d115      	bne.n	801fbc8 <__gethex+0x2b4>
 801fb9c:	42b5      	cmp	r5, r6
 801fb9e:	d113      	bne.n	801fbc8 <__gethex+0x2b4>
 801fba0:	2d01      	cmp	r5, #1
 801fba2:	d10b      	bne.n	801fbbc <__gethex+0x2a8>
 801fba4:	9a02      	ldr	r2, [sp, #8]
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	6013      	str	r3, [r2, #0]
 801fbaa:	2301      	movs	r3, #1
 801fbac:	6123      	str	r3, [r4, #16]
 801fbae:	f8ca 3000 	str.w	r3, [sl]
 801fbb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbb4:	f04f 0862 	mov.w	r8, #98	; 0x62
 801fbb8:	601c      	str	r4, [r3, #0]
 801fbba:	e735      	b.n	801fa28 <__gethex+0x114>
 801fbbc:	1e69      	subs	r1, r5, #1
 801fbbe:	4620      	mov	r0, r4
 801fbc0:	f000 fe36 	bl	8020830 <__any_on>
 801fbc4:	2800      	cmp	r0, #0
 801fbc6:	d1ed      	bne.n	801fba4 <__gethex+0x290>
 801fbc8:	4621      	mov	r1, r4
 801fbca:	4648      	mov	r0, r9
 801fbcc:	f000 f9e4 	bl	801ff98 <_Bfree>
 801fbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	6013      	str	r3, [r2, #0]
 801fbd6:	f04f 0850 	mov.w	r8, #80	; 0x50
 801fbda:	e725      	b.n	801fa28 <__gethex+0x114>
 801fbdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d1f2      	bne.n	801fbc8 <__gethex+0x2b4>
 801fbe2:	e7df      	b.n	801fba4 <__gethex+0x290>
 801fbe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d1dc      	bne.n	801fba4 <__gethex+0x290>
 801fbea:	e7ed      	b.n	801fbc8 <__gethex+0x2b4>
 801fbec:	08024018 	.word	0x08024018
 801fbf0:	08024181 	.word	0x08024181
 801fbf4:	08024192 	.word	0x08024192
 801fbf8:	f106 38ff 	add.w	r8, r6, #4294967295
 801fbfc:	f1bb 0f00 	cmp.w	fp, #0
 801fc00:	d133      	bne.n	801fc6a <__gethex+0x356>
 801fc02:	f1b8 0f00 	cmp.w	r8, #0
 801fc06:	d004      	beq.n	801fc12 <__gethex+0x2fe>
 801fc08:	4641      	mov	r1, r8
 801fc0a:	4620      	mov	r0, r4
 801fc0c:	f000 fe10 	bl	8020830 <__any_on>
 801fc10:	4683      	mov	fp, r0
 801fc12:	ea4f 1268 	mov.w	r2, r8, asr #5
 801fc16:	2301      	movs	r3, #1
 801fc18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801fc1c:	f008 081f 	and.w	r8, r8, #31
 801fc20:	fa03 f308 	lsl.w	r3, r3, r8
 801fc24:	4213      	tst	r3, r2
 801fc26:	4631      	mov	r1, r6
 801fc28:	4620      	mov	r0, r4
 801fc2a:	bf18      	it	ne
 801fc2c:	f04b 0b02 	orrne.w	fp, fp, #2
 801fc30:	1bad      	subs	r5, r5, r6
 801fc32:	f7ff fe07 	bl	801f844 <rshift>
 801fc36:	687e      	ldr	r6, [r7, #4]
 801fc38:	f04f 0802 	mov.w	r8, #2
 801fc3c:	f1bb 0f00 	cmp.w	fp, #0
 801fc40:	d04a      	beq.n	801fcd8 <__gethex+0x3c4>
 801fc42:	68fb      	ldr	r3, [r7, #12]
 801fc44:	2b02      	cmp	r3, #2
 801fc46:	d016      	beq.n	801fc76 <__gethex+0x362>
 801fc48:	2b03      	cmp	r3, #3
 801fc4a:	d018      	beq.n	801fc7e <__gethex+0x36a>
 801fc4c:	2b01      	cmp	r3, #1
 801fc4e:	d109      	bne.n	801fc64 <__gethex+0x350>
 801fc50:	f01b 0f02 	tst.w	fp, #2
 801fc54:	d006      	beq.n	801fc64 <__gethex+0x350>
 801fc56:	f8da 3000 	ldr.w	r3, [sl]
 801fc5a:	ea4b 0b03 	orr.w	fp, fp, r3
 801fc5e:	f01b 0f01 	tst.w	fp, #1
 801fc62:	d10f      	bne.n	801fc84 <__gethex+0x370>
 801fc64:	f048 0810 	orr.w	r8, r8, #16
 801fc68:	e036      	b.n	801fcd8 <__gethex+0x3c4>
 801fc6a:	f04f 0b01 	mov.w	fp, #1
 801fc6e:	e7d0      	b.n	801fc12 <__gethex+0x2fe>
 801fc70:	f04f 0801 	mov.w	r8, #1
 801fc74:	e7e2      	b.n	801fc3c <__gethex+0x328>
 801fc76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc78:	f1c3 0301 	rsb	r3, r3, #1
 801fc7c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d0ef      	beq.n	801fc64 <__gethex+0x350>
 801fc84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fc88:	f104 0214 	add.w	r2, r4, #20
 801fc8c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801fc90:	9301      	str	r3, [sp, #4]
 801fc92:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801fc96:	2300      	movs	r3, #0
 801fc98:	4694      	mov	ip, r2
 801fc9a:	f852 1b04 	ldr.w	r1, [r2], #4
 801fc9e:	f1b1 3fff 	cmp.w	r1, #4294967295
 801fca2:	d01e      	beq.n	801fce2 <__gethex+0x3ce>
 801fca4:	3101      	adds	r1, #1
 801fca6:	f8cc 1000 	str.w	r1, [ip]
 801fcaa:	f1b8 0f02 	cmp.w	r8, #2
 801fcae:	f104 0214 	add.w	r2, r4, #20
 801fcb2:	d13d      	bne.n	801fd30 <__gethex+0x41c>
 801fcb4:	683b      	ldr	r3, [r7, #0]
 801fcb6:	3b01      	subs	r3, #1
 801fcb8:	42ab      	cmp	r3, r5
 801fcba:	d10b      	bne.n	801fcd4 <__gethex+0x3c0>
 801fcbc:	1169      	asrs	r1, r5, #5
 801fcbe:	2301      	movs	r3, #1
 801fcc0:	f005 051f 	and.w	r5, r5, #31
 801fcc4:	fa03 f505 	lsl.w	r5, r3, r5
 801fcc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fccc:	421d      	tst	r5, r3
 801fcce:	bf18      	it	ne
 801fcd0:	f04f 0801 	movne.w	r8, #1
 801fcd4:	f048 0820 	orr.w	r8, r8, #32
 801fcd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcda:	601c      	str	r4, [r3, #0]
 801fcdc:	9b02      	ldr	r3, [sp, #8]
 801fcde:	601e      	str	r6, [r3, #0]
 801fce0:	e6a2      	b.n	801fa28 <__gethex+0x114>
 801fce2:	4290      	cmp	r0, r2
 801fce4:	f842 3c04 	str.w	r3, [r2, #-4]
 801fce8:	d8d6      	bhi.n	801fc98 <__gethex+0x384>
 801fcea:	68a2      	ldr	r2, [r4, #8]
 801fcec:	4593      	cmp	fp, r2
 801fcee:	db17      	blt.n	801fd20 <__gethex+0x40c>
 801fcf0:	6861      	ldr	r1, [r4, #4]
 801fcf2:	4648      	mov	r0, r9
 801fcf4:	3101      	adds	r1, #1
 801fcf6:	f000 f90f 	bl	801ff18 <_Balloc>
 801fcfa:	4682      	mov	sl, r0
 801fcfc:	b918      	cbnz	r0, 801fd06 <__gethex+0x3f2>
 801fcfe:	4b1b      	ldr	r3, [pc, #108]	; (801fd6c <__gethex+0x458>)
 801fd00:	4602      	mov	r2, r0
 801fd02:	2184      	movs	r1, #132	; 0x84
 801fd04:	e6b3      	b.n	801fa6e <__gethex+0x15a>
 801fd06:	6922      	ldr	r2, [r4, #16]
 801fd08:	3202      	adds	r2, #2
 801fd0a:	f104 010c 	add.w	r1, r4, #12
 801fd0e:	0092      	lsls	r2, r2, #2
 801fd10:	300c      	adds	r0, #12
 801fd12:	f7ff fd2f 	bl	801f774 <memcpy>
 801fd16:	4621      	mov	r1, r4
 801fd18:	4648      	mov	r0, r9
 801fd1a:	f000 f93d 	bl	801ff98 <_Bfree>
 801fd1e:	4654      	mov	r4, sl
 801fd20:	6922      	ldr	r2, [r4, #16]
 801fd22:	1c51      	adds	r1, r2, #1
 801fd24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fd28:	6121      	str	r1, [r4, #16]
 801fd2a:	2101      	movs	r1, #1
 801fd2c:	6151      	str	r1, [r2, #20]
 801fd2e:	e7bc      	b.n	801fcaa <__gethex+0x396>
 801fd30:	6921      	ldr	r1, [r4, #16]
 801fd32:	4559      	cmp	r1, fp
 801fd34:	dd0b      	ble.n	801fd4e <__gethex+0x43a>
 801fd36:	2101      	movs	r1, #1
 801fd38:	4620      	mov	r0, r4
 801fd3a:	f7ff fd83 	bl	801f844 <rshift>
 801fd3e:	68bb      	ldr	r3, [r7, #8]
 801fd40:	3601      	adds	r6, #1
 801fd42:	42b3      	cmp	r3, r6
 801fd44:	f6ff aedb 	blt.w	801fafe <__gethex+0x1ea>
 801fd48:	f04f 0801 	mov.w	r8, #1
 801fd4c:	e7c2      	b.n	801fcd4 <__gethex+0x3c0>
 801fd4e:	f015 051f 	ands.w	r5, r5, #31
 801fd52:	d0f9      	beq.n	801fd48 <__gethex+0x434>
 801fd54:	9b01      	ldr	r3, [sp, #4]
 801fd56:	441a      	add	r2, r3
 801fd58:	f1c5 0520 	rsb	r5, r5, #32
 801fd5c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801fd60:	f000 f9cc 	bl	80200fc <__hi0bits>
 801fd64:	42a8      	cmp	r0, r5
 801fd66:	dbe6      	blt.n	801fd36 <__gethex+0x422>
 801fd68:	e7ee      	b.n	801fd48 <__gethex+0x434>
 801fd6a:	bf00      	nop
 801fd6c:	08024181 	.word	0x08024181

0801fd70 <L_shift>:
 801fd70:	f1c2 0208 	rsb	r2, r2, #8
 801fd74:	0092      	lsls	r2, r2, #2
 801fd76:	b570      	push	{r4, r5, r6, lr}
 801fd78:	f1c2 0620 	rsb	r6, r2, #32
 801fd7c:	6843      	ldr	r3, [r0, #4]
 801fd7e:	6804      	ldr	r4, [r0, #0]
 801fd80:	fa03 f506 	lsl.w	r5, r3, r6
 801fd84:	432c      	orrs	r4, r5
 801fd86:	40d3      	lsrs	r3, r2
 801fd88:	6004      	str	r4, [r0, #0]
 801fd8a:	f840 3f04 	str.w	r3, [r0, #4]!
 801fd8e:	4288      	cmp	r0, r1
 801fd90:	d3f4      	bcc.n	801fd7c <L_shift+0xc>
 801fd92:	bd70      	pop	{r4, r5, r6, pc}

0801fd94 <__match>:
 801fd94:	b530      	push	{r4, r5, lr}
 801fd96:	6803      	ldr	r3, [r0, #0]
 801fd98:	3301      	adds	r3, #1
 801fd9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd9e:	b914      	cbnz	r4, 801fda6 <__match+0x12>
 801fda0:	6003      	str	r3, [r0, #0]
 801fda2:	2001      	movs	r0, #1
 801fda4:	bd30      	pop	{r4, r5, pc}
 801fda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fdaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fdae:	2d19      	cmp	r5, #25
 801fdb0:	bf98      	it	ls
 801fdb2:	3220      	addls	r2, #32
 801fdb4:	42a2      	cmp	r2, r4
 801fdb6:	d0f0      	beq.n	801fd9a <__match+0x6>
 801fdb8:	2000      	movs	r0, #0
 801fdba:	e7f3      	b.n	801fda4 <__match+0x10>

0801fdbc <__hexnan>:
 801fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc0:	680b      	ldr	r3, [r1, #0]
 801fdc2:	6801      	ldr	r1, [r0, #0]
 801fdc4:	115e      	asrs	r6, r3, #5
 801fdc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fdca:	f013 031f 	ands.w	r3, r3, #31
 801fdce:	b087      	sub	sp, #28
 801fdd0:	bf18      	it	ne
 801fdd2:	3604      	addne	r6, #4
 801fdd4:	2500      	movs	r5, #0
 801fdd6:	1f37      	subs	r7, r6, #4
 801fdd8:	4682      	mov	sl, r0
 801fdda:	4690      	mov	r8, r2
 801fddc:	9301      	str	r3, [sp, #4]
 801fdde:	f846 5c04 	str.w	r5, [r6, #-4]
 801fde2:	46b9      	mov	r9, r7
 801fde4:	463c      	mov	r4, r7
 801fde6:	9502      	str	r5, [sp, #8]
 801fde8:	46ab      	mov	fp, r5
 801fdea:	784a      	ldrb	r2, [r1, #1]
 801fdec:	1c4b      	adds	r3, r1, #1
 801fdee:	9303      	str	r3, [sp, #12]
 801fdf0:	b342      	cbz	r2, 801fe44 <__hexnan+0x88>
 801fdf2:	4610      	mov	r0, r2
 801fdf4:	9105      	str	r1, [sp, #20]
 801fdf6:	9204      	str	r2, [sp, #16]
 801fdf8:	f7ff fd76 	bl	801f8e8 <__hexdig_fun>
 801fdfc:	2800      	cmp	r0, #0
 801fdfe:	d14f      	bne.n	801fea0 <__hexnan+0xe4>
 801fe00:	9a04      	ldr	r2, [sp, #16]
 801fe02:	9905      	ldr	r1, [sp, #20]
 801fe04:	2a20      	cmp	r2, #32
 801fe06:	d818      	bhi.n	801fe3a <__hexnan+0x7e>
 801fe08:	9b02      	ldr	r3, [sp, #8]
 801fe0a:	459b      	cmp	fp, r3
 801fe0c:	dd13      	ble.n	801fe36 <__hexnan+0x7a>
 801fe0e:	454c      	cmp	r4, r9
 801fe10:	d206      	bcs.n	801fe20 <__hexnan+0x64>
 801fe12:	2d07      	cmp	r5, #7
 801fe14:	dc04      	bgt.n	801fe20 <__hexnan+0x64>
 801fe16:	462a      	mov	r2, r5
 801fe18:	4649      	mov	r1, r9
 801fe1a:	4620      	mov	r0, r4
 801fe1c:	f7ff ffa8 	bl	801fd70 <L_shift>
 801fe20:	4544      	cmp	r4, r8
 801fe22:	d950      	bls.n	801fec6 <__hexnan+0x10a>
 801fe24:	2300      	movs	r3, #0
 801fe26:	f1a4 0904 	sub.w	r9, r4, #4
 801fe2a:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe2e:	f8cd b008 	str.w	fp, [sp, #8]
 801fe32:	464c      	mov	r4, r9
 801fe34:	461d      	mov	r5, r3
 801fe36:	9903      	ldr	r1, [sp, #12]
 801fe38:	e7d7      	b.n	801fdea <__hexnan+0x2e>
 801fe3a:	2a29      	cmp	r2, #41	; 0x29
 801fe3c:	d155      	bne.n	801feea <__hexnan+0x12e>
 801fe3e:	3102      	adds	r1, #2
 801fe40:	f8ca 1000 	str.w	r1, [sl]
 801fe44:	f1bb 0f00 	cmp.w	fp, #0
 801fe48:	d04f      	beq.n	801feea <__hexnan+0x12e>
 801fe4a:	454c      	cmp	r4, r9
 801fe4c:	d206      	bcs.n	801fe5c <__hexnan+0xa0>
 801fe4e:	2d07      	cmp	r5, #7
 801fe50:	dc04      	bgt.n	801fe5c <__hexnan+0xa0>
 801fe52:	462a      	mov	r2, r5
 801fe54:	4649      	mov	r1, r9
 801fe56:	4620      	mov	r0, r4
 801fe58:	f7ff ff8a 	bl	801fd70 <L_shift>
 801fe5c:	4544      	cmp	r4, r8
 801fe5e:	d934      	bls.n	801feca <__hexnan+0x10e>
 801fe60:	f1a8 0204 	sub.w	r2, r8, #4
 801fe64:	4623      	mov	r3, r4
 801fe66:	f853 1b04 	ldr.w	r1, [r3], #4
 801fe6a:	f842 1f04 	str.w	r1, [r2, #4]!
 801fe6e:	429f      	cmp	r7, r3
 801fe70:	d2f9      	bcs.n	801fe66 <__hexnan+0xaa>
 801fe72:	1b3b      	subs	r3, r7, r4
 801fe74:	f023 0303 	bic.w	r3, r3, #3
 801fe78:	3304      	adds	r3, #4
 801fe7a:	3e03      	subs	r6, #3
 801fe7c:	3401      	adds	r4, #1
 801fe7e:	42a6      	cmp	r6, r4
 801fe80:	bf38      	it	cc
 801fe82:	2304      	movcc	r3, #4
 801fe84:	4443      	add	r3, r8
 801fe86:	2200      	movs	r2, #0
 801fe88:	f843 2b04 	str.w	r2, [r3], #4
 801fe8c:	429f      	cmp	r7, r3
 801fe8e:	d2fb      	bcs.n	801fe88 <__hexnan+0xcc>
 801fe90:	683b      	ldr	r3, [r7, #0]
 801fe92:	b91b      	cbnz	r3, 801fe9c <__hexnan+0xe0>
 801fe94:	4547      	cmp	r7, r8
 801fe96:	d126      	bne.n	801fee6 <__hexnan+0x12a>
 801fe98:	2301      	movs	r3, #1
 801fe9a:	603b      	str	r3, [r7, #0]
 801fe9c:	2005      	movs	r0, #5
 801fe9e:	e025      	b.n	801feec <__hexnan+0x130>
 801fea0:	3501      	adds	r5, #1
 801fea2:	2d08      	cmp	r5, #8
 801fea4:	f10b 0b01 	add.w	fp, fp, #1
 801fea8:	dd06      	ble.n	801feb8 <__hexnan+0xfc>
 801feaa:	4544      	cmp	r4, r8
 801feac:	d9c3      	bls.n	801fe36 <__hexnan+0x7a>
 801feae:	2300      	movs	r3, #0
 801feb0:	f844 3c04 	str.w	r3, [r4, #-4]
 801feb4:	2501      	movs	r5, #1
 801feb6:	3c04      	subs	r4, #4
 801feb8:	6822      	ldr	r2, [r4, #0]
 801feba:	f000 000f 	and.w	r0, r0, #15
 801febe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fec2:	6020      	str	r0, [r4, #0]
 801fec4:	e7b7      	b.n	801fe36 <__hexnan+0x7a>
 801fec6:	2508      	movs	r5, #8
 801fec8:	e7b5      	b.n	801fe36 <__hexnan+0x7a>
 801feca:	9b01      	ldr	r3, [sp, #4]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d0df      	beq.n	801fe90 <__hexnan+0xd4>
 801fed0:	f1c3 0320 	rsb	r3, r3, #32
 801fed4:	f04f 32ff 	mov.w	r2, #4294967295
 801fed8:	40da      	lsrs	r2, r3
 801feda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fede:	4013      	ands	r3, r2
 801fee0:	f846 3c04 	str.w	r3, [r6, #-4]
 801fee4:	e7d4      	b.n	801fe90 <__hexnan+0xd4>
 801fee6:	3f04      	subs	r7, #4
 801fee8:	e7d2      	b.n	801fe90 <__hexnan+0xd4>
 801feea:	2004      	movs	r0, #4
 801feec:	b007      	add	sp, #28
 801feee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fef2 <__ascii_mbtowc>:
 801fef2:	b082      	sub	sp, #8
 801fef4:	b901      	cbnz	r1, 801fef8 <__ascii_mbtowc+0x6>
 801fef6:	a901      	add	r1, sp, #4
 801fef8:	b142      	cbz	r2, 801ff0c <__ascii_mbtowc+0x1a>
 801fefa:	b14b      	cbz	r3, 801ff10 <__ascii_mbtowc+0x1e>
 801fefc:	7813      	ldrb	r3, [r2, #0]
 801fefe:	600b      	str	r3, [r1, #0]
 801ff00:	7812      	ldrb	r2, [r2, #0]
 801ff02:	1e10      	subs	r0, r2, #0
 801ff04:	bf18      	it	ne
 801ff06:	2001      	movne	r0, #1
 801ff08:	b002      	add	sp, #8
 801ff0a:	4770      	bx	lr
 801ff0c:	4610      	mov	r0, r2
 801ff0e:	e7fb      	b.n	801ff08 <__ascii_mbtowc+0x16>
 801ff10:	f06f 0001 	mvn.w	r0, #1
 801ff14:	e7f8      	b.n	801ff08 <__ascii_mbtowc+0x16>
	...

0801ff18 <_Balloc>:
 801ff18:	b570      	push	{r4, r5, r6, lr}
 801ff1a:	69c6      	ldr	r6, [r0, #28]
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	460d      	mov	r5, r1
 801ff20:	b976      	cbnz	r6, 801ff40 <_Balloc+0x28>
 801ff22:	2010      	movs	r0, #16
 801ff24:	f7fd fef0 	bl	801dd08 <malloc>
 801ff28:	4602      	mov	r2, r0
 801ff2a:	61e0      	str	r0, [r4, #28]
 801ff2c:	b920      	cbnz	r0, 801ff38 <_Balloc+0x20>
 801ff2e:	4b18      	ldr	r3, [pc, #96]	; (801ff90 <_Balloc+0x78>)
 801ff30:	4818      	ldr	r0, [pc, #96]	; (801ff94 <_Balloc+0x7c>)
 801ff32:	216b      	movs	r1, #107	; 0x6b
 801ff34:	f001 f95a 	bl	80211ec <__assert_func>
 801ff38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ff3c:	6006      	str	r6, [r0, #0]
 801ff3e:	60c6      	str	r6, [r0, #12]
 801ff40:	69e6      	ldr	r6, [r4, #28]
 801ff42:	68f3      	ldr	r3, [r6, #12]
 801ff44:	b183      	cbz	r3, 801ff68 <_Balloc+0x50>
 801ff46:	69e3      	ldr	r3, [r4, #28]
 801ff48:	68db      	ldr	r3, [r3, #12]
 801ff4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ff4e:	b9b8      	cbnz	r0, 801ff80 <_Balloc+0x68>
 801ff50:	2101      	movs	r1, #1
 801ff52:	fa01 f605 	lsl.w	r6, r1, r5
 801ff56:	1d72      	adds	r2, r6, #5
 801ff58:	0092      	lsls	r2, r2, #2
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f7fd febe 	bl	801dcdc <_calloc_r>
 801ff60:	b160      	cbz	r0, 801ff7c <_Balloc+0x64>
 801ff62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ff66:	e00e      	b.n	801ff86 <_Balloc+0x6e>
 801ff68:	2221      	movs	r2, #33	; 0x21
 801ff6a:	2104      	movs	r1, #4
 801ff6c:	4620      	mov	r0, r4
 801ff6e:	f7fd feb5 	bl	801dcdc <_calloc_r>
 801ff72:	69e3      	ldr	r3, [r4, #28]
 801ff74:	60f0      	str	r0, [r6, #12]
 801ff76:	68db      	ldr	r3, [r3, #12]
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d1e4      	bne.n	801ff46 <_Balloc+0x2e>
 801ff7c:	2000      	movs	r0, #0
 801ff7e:	bd70      	pop	{r4, r5, r6, pc}
 801ff80:	6802      	ldr	r2, [r0, #0]
 801ff82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ff86:	2300      	movs	r3, #0
 801ff88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ff8c:	e7f7      	b.n	801ff7e <_Balloc+0x66>
 801ff8e:	bf00      	nop
 801ff90:	080241f2 	.word	0x080241f2
 801ff94:	08024209 	.word	0x08024209

0801ff98 <_Bfree>:
 801ff98:	b570      	push	{r4, r5, r6, lr}
 801ff9a:	69c6      	ldr	r6, [r0, #28]
 801ff9c:	4605      	mov	r5, r0
 801ff9e:	460c      	mov	r4, r1
 801ffa0:	b976      	cbnz	r6, 801ffc0 <_Bfree+0x28>
 801ffa2:	2010      	movs	r0, #16
 801ffa4:	f7fd feb0 	bl	801dd08 <malloc>
 801ffa8:	4602      	mov	r2, r0
 801ffaa:	61e8      	str	r0, [r5, #28]
 801ffac:	b920      	cbnz	r0, 801ffb8 <_Bfree+0x20>
 801ffae:	4b09      	ldr	r3, [pc, #36]	; (801ffd4 <_Bfree+0x3c>)
 801ffb0:	4809      	ldr	r0, [pc, #36]	; (801ffd8 <_Bfree+0x40>)
 801ffb2:	218f      	movs	r1, #143	; 0x8f
 801ffb4:	f001 f91a 	bl	80211ec <__assert_func>
 801ffb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ffbc:	6006      	str	r6, [r0, #0]
 801ffbe:	60c6      	str	r6, [r0, #12]
 801ffc0:	b13c      	cbz	r4, 801ffd2 <_Bfree+0x3a>
 801ffc2:	69eb      	ldr	r3, [r5, #28]
 801ffc4:	6862      	ldr	r2, [r4, #4]
 801ffc6:	68db      	ldr	r3, [r3, #12]
 801ffc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ffcc:	6021      	str	r1, [r4, #0]
 801ffce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ffd2:	bd70      	pop	{r4, r5, r6, pc}
 801ffd4:	080241f2 	.word	0x080241f2
 801ffd8:	08024209 	.word	0x08024209

0801ffdc <__multadd>:
 801ffdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffe0:	690d      	ldr	r5, [r1, #16]
 801ffe2:	4607      	mov	r7, r0
 801ffe4:	460c      	mov	r4, r1
 801ffe6:	461e      	mov	r6, r3
 801ffe8:	f101 0c14 	add.w	ip, r1, #20
 801ffec:	2000      	movs	r0, #0
 801ffee:	f8dc 3000 	ldr.w	r3, [ip]
 801fff2:	b299      	uxth	r1, r3
 801fff4:	fb02 6101 	mla	r1, r2, r1, r6
 801fff8:	0c1e      	lsrs	r6, r3, #16
 801fffa:	0c0b      	lsrs	r3, r1, #16
 801fffc:	fb02 3306 	mla	r3, r2, r6, r3
 8020000:	b289      	uxth	r1, r1
 8020002:	3001      	adds	r0, #1
 8020004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020008:	4285      	cmp	r5, r0
 802000a:	f84c 1b04 	str.w	r1, [ip], #4
 802000e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020012:	dcec      	bgt.n	801ffee <__multadd+0x12>
 8020014:	b30e      	cbz	r6, 802005a <__multadd+0x7e>
 8020016:	68a3      	ldr	r3, [r4, #8]
 8020018:	42ab      	cmp	r3, r5
 802001a:	dc19      	bgt.n	8020050 <__multadd+0x74>
 802001c:	6861      	ldr	r1, [r4, #4]
 802001e:	4638      	mov	r0, r7
 8020020:	3101      	adds	r1, #1
 8020022:	f7ff ff79 	bl	801ff18 <_Balloc>
 8020026:	4680      	mov	r8, r0
 8020028:	b928      	cbnz	r0, 8020036 <__multadd+0x5a>
 802002a:	4602      	mov	r2, r0
 802002c:	4b0c      	ldr	r3, [pc, #48]	; (8020060 <__multadd+0x84>)
 802002e:	480d      	ldr	r0, [pc, #52]	; (8020064 <__multadd+0x88>)
 8020030:	21ba      	movs	r1, #186	; 0xba
 8020032:	f001 f8db 	bl	80211ec <__assert_func>
 8020036:	6922      	ldr	r2, [r4, #16]
 8020038:	3202      	adds	r2, #2
 802003a:	f104 010c 	add.w	r1, r4, #12
 802003e:	0092      	lsls	r2, r2, #2
 8020040:	300c      	adds	r0, #12
 8020042:	f7ff fb97 	bl	801f774 <memcpy>
 8020046:	4621      	mov	r1, r4
 8020048:	4638      	mov	r0, r7
 802004a:	f7ff ffa5 	bl	801ff98 <_Bfree>
 802004e:	4644      	mov	r4, r8
 8020050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020054:	3501      	adds	r5, #1
 8020056:	615e      	str	r6, [r3, #20]
 8020058:	6125      	str	r5, [r4, #16]
 802005a:	4620      	mov	r0, r4
 802005c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020060:	08024181 	.word	0x08024181
 8020064:	08024209 	.word	0x08024209

08020068 <__s2b>:
 8020068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802006c:	460c      	mov	r4, r1
 802006e:	4615      	mov	r5, r2
 8020070:	461f      	mov	r7, r3
 8020072:	2209      	movs	r2, #9
 8020074:	3308      	adds	r3, #8
 8020076:	4606      	mov	r6, r0
 8020078:	fb93 f3f2 	sdiv	r3, r3, r2
 802007c:	2100      	movs	r1, #0
 802007e:	2201      	movs	r2, #1
 8020080:	429a      	cmp	r2, r3
 8020082:	db09      	blt.n	8020098 <__s2b+0x30>
 8020084:	4630      	mov	r0, r6
 8020086:	f7ff ff47 	bl	801ff18 <_Balloc>
 802008a:	b940      	cbnz	r0, 802009e <__s2b+0x36>
 802008c:	4602      	mov	r2, r0
 802008e:	4b19      	ldr	r3, [pc, #100]	; (80200f4 <__s2b+0x8c>)
 8020090:	4819      	ldr	r0, [pc, #100]	; (80200f8 <__s2b+0x90>)
 8020092:	21d3      	movs	r1, #211	; 0xd3
 8020094:	f001 f8aa 	bl	80211ec <__assert_func>
 8020098:	0052      	lsls	r2, r2, #1
 802009a:	3101      	adds	r1, #1
 802009c:	e7f0      	b.n	8020080 <__s2b+0x18>
 802009e:	9b08      	ldr	r3, [sp, #32]
 80200a0:	6143      	str	r3, [r0, #20]
 80200a2:	2d09      	cmp	r5, #9
 80200a4:	f04f 0301 	mov.w	r3, #1
 80200a8:	6103      	str	r3, [r0, #16]
 80200aa:	dd16      	ble.n	80200da <__s2b+0x72>
 80200ac:	f104 0909 	add.w	r9, r4, #9
 80200b0:	46c8      	mov	r8, r9
 80200b2:	442c      	add	r4, r5
 80200b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80200b8:	4601      	mov	r1, r0
 80200ba:	3b30      	subs	r3, #48	; 0x30
 80200bc:	220a      	movs	r2, #10
 80200be:	4630      	mov	r0, r6
 80200c0:	f7ff ff8c 	bl	801ffdc <__multadd>
 80200c4:	45a0      	cmp	r8, r4
 80200c6:	d1f5      	bne.n	80200b4 <__s2b+0x4c>
 80200c8:	f1a5 0408 	sub.w	r4, r5, #8
 80200cc:	444c      	add	r4, r9
 80200ce:	1b2d      	subs	r5, r5, r4
 80200d0:	1963      	adds	r3, r4, r5
 80200d2:	42bb      	cmp	r3, r7
 80200d4:	db04      	blt.n	80200e0 <__s2b+0x78>
 80200d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80200da:	340a      	adds	r4, #10
 80200dc:	2509      	movs	r5, #9
 80200de:	e7f6      	b.n	80200ce <__s2b+0x66>
 80200e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80200e4:	4601      	mov	r1, r0
 80200e6:	3b30      	subs	r3, #48	; 0x30
 80200e8:	220a      	movs	r2, #10
 80200ea:	4630      	mov	r0, r6
 80200ec:	f7ff ff76 	bl	801ffdc <__multadd>
 80200f0:	e7ee      	b.n	80200d0 <__s2b+0x68>
 80200f2:	bf00      	nop
 80200f4:	08024181 	.word	0x08024181
 80200f8:	08024209 	.word	0x08024209

080200fc <__hi0bits>:
 80200fc:	0c03      	lsrs	r3, r0, #16
 80200fe:	041b      	lsls	r3, r3, #16
 8020100:	b9d3      	cbnz	r3, 8020138 <__hi0bits+0x3c>
 8020102:	0400      	lsls	r0, r0, #16
 8020104:	2310      	movs	r3, #16
 8020106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802010a:	bf04      	itt	eq
 802010c:	0200      	lsleq	r0, r0, #8
 802010e:	3308      	addeq	r3, #8
 8020110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020114:	bf04      	itt	eq
 8020116:	0100      	lsleq	r0, r0, #4
 8020118:	3304      	addeq	r3, #4
 802011a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802011e:	bf04      	itt	eq
 8020120:	0080      	lsleq	r0, r0, #2
 8020122:	3302      	addeq	r3, #2
 8020124:	2800      	cmp	r0, #0
 8020126:	db05      	blt.n	8020134 <__hi0bits+0x38>
 8020128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802012c:	f103 0301 	add.w	r3, r3, #1
 8020130:	bf08      	it	eq
 8020132:	2320      	moveq	r3, #32
 8020134:	4618      	mov	r0, r3
 8020136:	4770      	bx	lr
 8020138:	2300      	movs	r3, #0
 802013a:	e7e4      	b.n	8020106 <__hi0bits+0xa>

0802013c <__lo0bits>:
 802013c:	6803      	ldr	r3, [r0, #0]
 802013e:	f013 0207 	ands.w	r2, r3, #7
 8020142:	d00c      	beq.n	802015e <__lo0bits+0x22>
 8020144:	07d9      	lsls	r1, r3, #31
 8020146:	d422      	bmi.n	802018e <__lo0bits+0x52>
 8020148:	079a      	lsls	r2, r3, #30
 802014a:	bf49      	itett	mi
 802014c:	085b      	lsrmi	r3, r3, #1
 802014e:	089b      	lsrpl	r3, r3, #2
 8020150:	6003      	strmi	r3, [r0, #0]
 8020152:	2201      	movmi	r2, #1
 8020154:	bf5c      	itt	pl
 8020156:	6003      	strpl	r3, [r0, #0]
 8020158:	2202      	movpl	r2, #2
 802015a:	4610      	mov	r0, r2
 802015c:	4770      	bx	lr
 802015e:	b299      	uxth	r1, r3
 8020160:	b909      	cbnz	r1, 8020166 <__lo0bits+0x2a>
 8020162:	0c1b      	lsrs	r3, r3, #16
 8020164:	2210      	movs	r2, #16
 8020166:	b2d9      	uxtb	r1, r3
 8020168:	b909      	cbnz	r1, 802016e <__lo0bits+0x32>
 802016a:	3208      	adds	r2, #8
 802016c:	0a1b      	lsrs	r3, r3, #8
 802016e:	0719      	lsls	r1, r3, #28
 8020170:	bf04      	itt	eq
 8020172:	091b      	lsreq	r3, r3, #4
 8020174:	3204      	addeq	r2, #4
 8020176:	0799      	lsls	r1, r3, #30
 8020178:	bf04      	itt	eq
 802017a:	089b      	lsreq	r3, r3, #2
 802017c:	3202      	addeq	r2, #2
 802017e:	07d9      	lsls	r1, r3, #31
 8020180:	d403      	bmi.n	802018a <__lo0bits+0x4e>
 8020182:	085b      	lsrs	r3, r3, #1
 8020184:	f102 0201 	add.w	r2, r2, #1
 8020188:	d003      	beq.n	8020192 <__lo0bits+0x56>
 802018a:	6003      	str	r3, [r0, #0]
 802018c:	e7e5      	b.n	802015a <__lo0bits+0x1e>
 802018e:	2200      	movs	r2, #0
 8020190:	e7e3      	b.n	802015a <__lo0bits+0x1e>
 8020192:	2220      	movs	r2, #32
 8020194:	e7e1      	b.n	802015a <__lo0bits+0x1e>
	...

08020198 <__i2b>:
 8020198:	b510      	push	{r4, lr}
 802019a:	460c      	mov	r4, r1
 802019c:	2101      	movs	r1, #1
 802019e:	f7ff febb 	bl	801ff18 <_Balloc>
 80201a2:	4602      	mov	r2, r0
 80201a4:	b928      	cbnz	r0, 80201b2 <__i2b+0x1a>
 80201a6:	4b05      	ldr	r3, [pc, #20]	; (80201bc <__i2b+0x24>)
 80201a8:	4805      	ldr	r0, [pc, #20]	; (80201c0 <__i2b+0x28>)
 80201aa:	f240 1145 	movw	r1, #325	; 0x145
 80201ae:	f001 f81d 	bl	80211ec <__assert_func>
 80201b2:	2301      	movs	r3, #1
 80201b4:	6144      	str	r4, [r0, #20]
 80201b6:	6103      	str	r3, [r0, #16]
 80201b8:	bd10      	pop	{r4, pc}
 80201ba:	bf00      	nop
 80201bc:	08024181 	.word	0x08024181
 80201c0:	08024209 	.word	0x08024209

080201c4 <__multiply>:
 80201c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c8:	4691      	mov	r9, r2
 80201ca:	690a      	ldr	r2, [r1, #16]
 80201cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80201d0:	429a      	cmp	r2, r3
 80201d2:	bfb8      	it	lt
 80201d4:	460b      	movlt	r3, r1
 80201d6:	460c      	mov	r4, r1
 80201d8:	bfbc      	itt	lt
 80201da:	464c      	movlt	r4, r9
 80201dc:	4699      	movlt	r9, r3
 80201de:	6927      	ldr	r7, [r4, #16]
 80201e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80201e4:	68a3      	ldr	r3, [r4, #8]
 80201e6:	6861      	ldr	r1, [r4, #4]
 80201e8:	eb07 060a 	add.w	r6, r7, sl
 80201ec:	42b3      	cmp	r3, r6
 80201ee:	b085      	sub	sp, #20
 80201f0:	bfb8      	it	lt
 80201f2:	3101      	addlt	r1, #1
 80201f4:	f7ff fe90 	bl	801ff18 <_Balloc>
 80201f8:	b930      	cbnz	r0, 8020208 <__multiply+0x44>
 80201fa:	4602      	mov	r2, r0
 80201fc:	4b44      	ldr	r3, [pc, #272]	; (8020310 <__multiply+0x14c>)
 80201fe:	4845      	ldr	r0, [pc, #276]	; (8020314 <__multiply+0x150>)
 8020200:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8020204:	f000 fff2 	bl	80211ec <__assert_func>
 8020208:	f100 0514 	add.w	r5, r0, #20
 802020c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020210:	462b      	mov	r3, r5
 8020212:	2200      	movs	r2, #0
 8020214:	4543      	cmp	r3, r8
 8020216:	d321      	bcc.n	802025c <__multiply+0x98>
 8020218:	f104 0314 	add.w	r3, r4, #20
 802021c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020220:	f109 0314 	add.w	r3, r9, #20
 8020224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020228:	9202      	str	r2, [sp, #8]
 802022a:	1b3a      	subs	r2, r7, r4
 802022c:	3a15      	subs	r2, #21
 802022e:	f022 0203 	bic.w	r2, r2, #3
 8020232:	3204      	adds	r2, #4
 8020234:	f104 0115 	add.w	r1, r4, #21
 8020238:	428f      	cmp	r7, r1
 802023a:	bf38      	it	cc
 802023c:	2204      	movcc	r2, #4
 802023e:	9201      	str	r2, [sp, #4]
 8020240:	9a02      	ldr	r2, [sp, #8]
 8020242:	9303      	str	r3, [sp, #12]
 8020244:	429a      	cmp	r2, r3
 8020246:	d80c      	bhi.n	8020262 <__multiply+0x9e>
 8020248:	2e00      	cmp	r6, #0
 802024a:	dd03      	ble.n	8020254 <__multiply+0x90>
 802024c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020250:	2b00      	cmp	r3, #0
 8020252:	d05b      	beq.n	802030c <__multiply+0x148>
 8020254:	6106      	str	r6, [r0, #16]
 8020256:	b005      	add	sp, #20
 8020258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802025c:	f843 2b04 	str.w	r2, [r3], #4
 8020260:	e7d8      	b.n	8020214 <__multiply+0x50>
 8020262:	f8b3 a000 	ldrh.w	sl, [r3]
 8020266:	f1ba 0f00 	cmp.w	sl, #0
 802026a:	d024      	beq.n	80202b6 <__multiply+0xf2>
 802026c:	f104 0e14 	add.w	lr, r4, #20
 8020270:	46a9      	mov	r9, r5
 8020272:	f04f 0c00 	mov.w	ip, #0
 8020276:	f85e 2b04 	ldr.w	r2, [lr], #4
 802027a:	f8d9 1000 	ldr.w	r1, [r9]
 802027e:	fa1f fb82 	uxth.w	fp, r2
 8020282:	b289      	uxth	r1, r1
 8020284:	fb0a 110b 	mla	r1, sl, fp, r1
 8020288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802028c:	f8d9 2000 	ldr.w	r2, [r9]
 8020290:	4461      	add	r1, ip
 8020292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020296:	fb0a c20b 	mla	r2, sl, fp, ip
 802029a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802029e:	b289      	uxth	r1, r1
 80202a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80202a4:	4577      	cmp	r7, lr
 80202a6:	f849 1b04 	str.w	r1, [r9], #4
 80202aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80202ae:	d8e2      	bhi.n	8020276 <__multiply+0xb2>
 80202b0:	9a01      	ldr	r2, [sp, #4]
 80202b2:	f845 c002 	str.w	ip, [r5, r2]
 80202b6:	9a03      	ldr	r2, [sp, #12]
 80202b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80202bc:	3304      	adds	r3, #4
 80202be:	f1b9 0f00 	cmp.w	r9, #0
 80202c2:	d021      	beq.n	8020308 <__multiply+0x144>
 80202c4:	6829      	ldr	r1, [r5, #0]
 80202c6:	f104 0c14 	add.w	ip, r4, #20
 80202ca:	46ae      	mov	lr, r5
 80202cc:	f04f 0a00 	mov.w	sl, #0
 80202d0:	f8bc b000 	ldrh.w	fp, [ip]
 80202d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80202d8:	fb09 220b 	mla	r2, r9, fp, r2
 80202dc:	4452      	add	r2, sl
 80202de:	b289      	uxth	r1, r1
 80202e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80202e4:	f84e 1b04 	str.w	r1, [lr], #4
 80202e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80202ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80202f0:	f8be 1000 	ldrh.w	r1, [lr]
 80202f4:	fb09 110a 	mla	r1, r9, sl, r1
 80202f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80202fc:	4567      	cmp	r7, ip
 80202fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020302:	d8e5      	bhi.n	80202d0 <__multiply+0x10c>
 8020304:	9a01      	ldr	r2, [sp, #4]
 8020306:	50a9      	str	r1, [r5, r2]
 8020308:	3504      	adds	r5, #4
 802030a:	e799      	b.n	8020240 <__multiply+0x7c>
 802030c:	3e01      	subs	r6, #1
 802030e:	e79b      	b.n	8020248 <__multiply+0x84>
 8020310:	08024181 	.word	0x08024181
 8020314:	08024209 	.word	0x08024209

08020318 <__pow5mult>:
 8020318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802031c:	4615      	mov	r5, r2
 802031e:	f012 0203 	ands.w	r2, r2, #3
 8020322:	4606      	mov	r6, r0
 8020324:	460f      	mov	r7, r1
 8020326:	d007      	beq.n	8020338 <__pow5mult+0x20>
 8020328:	4c25      	ldr	r4, [pc, #148]	; (80203c0 <__pow5mult+0xa8>)
 802032a:	3a01      	subs	r2, #1
 802032c:	2300      	movs	r3, #0
 802032e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020332:	f7ff fe53 	bl	801ffdc <__multadd>
 8020336:	4607      	mov	r7, r0
 8020338:	10ad      	asrs	r5, r5, #2
 802033a:	d03d      	beq.n	80203b8 <__pow5mult+0xa0>
 802033c:	69f4      	ldr	r4, [r6, #28]
 802033e:	b97c      	cbnz	r4, 8020360 <__pow5mult+0x48>
 8020340:	2010      	movs	r0, #16
 8020342:	f7fd fce1 	bl	801dd08 <malloc>
 8020346:	4602      	mov	r2, r0
 8020348:	61f0      	str	r0, [r6, #28]
 802034a:	b928      	cbnz	r0, 8020358 <__pow5mult+0x40>
 802034c:	4b1d      	ldr	r3, [pc, #116]	; (80203c4 <__pow5mult+0xac>)
 802034e:	481e      	ldr	r0, [pc, #120]	; (80203c8 <__pow5mult+0xb0>)
 8020350:	f240 11b3 	movw	r1, #435	; 0x1b3
 8020354:	f000 ff4a 	bl	80211ec <__assert_func>
 8020358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802035c:	6004      	str	r4, [r0, #0]
 802035e:	60c4      	str	r4, [r0, #12]
 8020360:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8020364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020368:	b94c      	cbnz	r4, 802037e <__pow5mult+0x66>
 802036a:	f240 2171 	movw	r1, #625	; 0x271
 802036e:	4630      	mov	r0, r6
 8020370:	f7ff ff12 	bl	8020198 <__i2b>
 8020374:	2300      	movs	r3, #0
 8020376:	f8c8 0008 	str.w	r0, [r8, #8]
 802037a:	4604      	mov	r4, r0
 802037c:	6003      	str	r3, [r0, #0]
 802037e:	f04f 0900 	mov.w	r9, #0
 8020382:	07eb      	lsls	r3, r5, #31
 8020384:	d50a      	bpl.n	802039c <__pow5mult+0x84>
 8020386:	4639      	mov	r1, r7
 8020388:	4622      	mov	r2, r4
 802038a:	4630      	mov	r0, r6
 802038c:	f7ff ff1a 	bl	80201c4 <__multiply>
 8020390:	4639      	mov	r1, r7
 8020392:	4680      	mov	r8, r0
 8020394:	4630      	mov	r0, r6
 8020396:	f7ff fdff 	bl	801ff98 <_Bfree>
 802039a:	4647      	mov	r7, r8
 802039c:	106d      	asrs	r5, r5, #1
 802039e:	d00b      	beq.n	80203b8 <__pow5mult+0xa0>
 80203a0:	6820      	ldr	r0, [r4, #0]
 80203a2:	b938      	cbnz	r0, 80203b4 <__pow5mult+0x9c>
 80203a4:	4622      	mov	r2, r4
 80203a6:	4621      	mov	r1, r4
 80203a8:	4630      	mov	r0, r6
 80203aa:	f7ff ff0b 	bl	80201c4 <__multiply>
 80203ae:	6020      	str	r0, [r4, #0]
 80203b0:	f8c0 9000 	str.w	r9, [r0]
 80203b4:	4604      	mov	r4, r0
 80203b6:	e7e4      	b.n	8020382 <__pow5mult+0x6a>
 80203b8:	4638      	mov	r0, r7
 80203ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203be:	bf00      	nop
 80203c0:	08024358 	.word	0x08024358
 80203c4:	080241f2 	.word	0x080241f2
 80203c8:	08024209 	.word	0x08024209

080203cc <__lshift>:
 80203cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203d0:	460c      	mov	r4, r1
 80203d2:	6849      	ldr	r1, [r1, #4]
 80203d4:	6923      	ldr	r3, [r4, #16]
 80203d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80203da:	68a3      	ldr	r3, [r4, #8]
 80203dc:	4607      	mov	r7, r0
 80203de:	4691      	mov	r9, r2
 80203e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80203e4:	f108 0601 	add.w	r6, r8, #1
 80203e8:	42b3      	cmp	r3, r6
 80203ea:	db0b      	blt.n	8020404 <__lshift+0x38>
 80203ec:	4638      	mov	r0, r7
 80203ee:	f7ff fd93 	bl	801ff18 <_Balloc>
 80203f2:	4605      	mov	r5, r0
 80203f4:	b948      	cbnz	r0, 802040a <__lshift+0x3e>
 80203f6:	4602      	mov	r2, r0
 80203f8:	4b28      	ldr	r3, [pc, #160]	; (802049c <__lshift+0xd0>)
 80203fa:	4829      	ldr	r0, [pc, #164]	; (80204a0 <__lshift+0xd4>)
 80203fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8020400:	f000 fef4 	bl	80211ec <__assert_func>
 8020404:	3101      	adds	r1, #1
 8020406:	005b      	lsls	r3, r3, #1
 8020408:	e7ee      	b.n	80203e8 <__lshift+0x1c>
 802040a:	2300      	movs	r3, #0
 802040c:	f100 0114 	add.w	r1, r0, #20
 8020410:	f100 0210 	add.w	r2, r0, #16
 8020414:	4618      	mov	r0, r3
 8020416:	4553      	cmp	r3, sl
 8020418:	db33      	blt.n	8020482 <__lshift+0xb6>
 802041a:	6920      	ldr	r0, [r4, #16]
 802041c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020420:	f104 0314 	add.w	r3, r4, #20
 8020424:	f019 091f 	ands.w	r9, r9, #31
 8020428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802042c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020430:	d02b      	beq.n	802048a <__lshift+0xbe>
 8020432:	f1c9 0e20 	rsb	lr, r9, #32
 8020436:	468a      	mov	sl, r1
 8020438:	2200      	movs	r2, #0
 802043a:	6818      	ldr	r0, [r3, #0]
 802043c:	fa00 f009 	lsl.w	r0, r0, r9
 8020440:	4310      	orrs	r0, r2
 8020442:	f84a 0b04 	str.w	r0, [sl], #4
 8020446:	f853 2b04 	ldr.w	r2, [r3], #4
 802044a:	459c      	cmp	ip, r3
 802044c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020450:	d8f3      	bhi.n	802043a <__lshift+0x6e>
 8020452:	ebac 0304 	sub.w	r3, ip, r4
 8020456:	3b15      	subs	r3, #21
 8020458:	f023 0303 	bic.w	r3, r3, #3
 802045c:	3304      	adds	r3, #4
 802045e:	f104 0015 	add.w	r0, r4, #21
 8020462:	4584      	cmp	ip, r0
 8020464:	bf38      	it	cc
 8020466:	2304      	movcc	r3, #4
 8020468:	50ca      	str	r2, [r1, r3]
 802046a:	b10a      	cbz	r2, 8020470 <__lshift+0xa4>
 802046c:	f108 0602 	add.w	r6, r8, #2
 8020470:	3e01      	subs	r6, #1
 8020472:	4638      	mov	r0, r7
 8020474:	612e      	str	r6, [r5, #16]
 8020476:	4621      	mov	r1, r4
 8020478:	f7ff fd8e 	bl	801ff98 <_Bfree>
 802047c:	4628      	mov	r0, r5
 802047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020482:	f842 0f04 	str.w	r0, [r2, #4]!
 8020486:	3301      	adds	r3, #1
 8020488:	e7c5      	b.n	8020416 <__lshift+0x4a>
 802048a:	3904      	subs	r1, #4
 802048c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020490:	f841 2f04 	str.w	r2, [r1, #4]!
 8020494:	459c      	cmp	ip, r3
 8020496:	d8f9      	bhi.n	802048c <__lshift+0xc0>
 8020498:	e7ea      	b.n	8020470 <__lshift+0xa4>
 802049a:	bf00      	nop
 802049c:	08024181 	.word	0x08024181
 80204a0:	08024209 	.word	0x08024209

080204a4 <__mcmp>:
 80204a4:	b530      	push	{r4, r5, lr}
 80204a6:	6902      	ldr	r2, [r0, #16]
 80204a8:	690c      	ldr	r4, [r1, #16]
 80204aa:	1b12      	subs	r2, r2, r4
 80204ac:	d10e      	bne.n	80204cc <__mcmp+0x28>
 80204ae:	f100 0314 	add.w	r3, r0, #20
 80204b2:	3114      	adds	r1, #20
 80204b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80204b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80204bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80204c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80204c4:	42a5      	cmp	r5, r4
 80204c6:	d003      	beq.n	80204d0 <__mcmp+0x2c>
 80204c8:	d305      	bcc.n	80204d6 <__mcmp+0x32>
 80204ca:	2201      	movs	r2, #1
 80204cc:	4610      	mov	r0, r2
 80204ce:	bd30      	pop	{r4, r5, pc}
 80204d0:	4283      	cmp	r3, r0
 80204d2:	d3f3      	bcc.n	80204bc <__mcmp+0x18>
 80204d4:	e7fa      	b.n	80204cc <__mcmp+0x28>
 80204d6:	f04f 32ff 	mov.w	r2, #4294967295
 80204da:	e7f7      	b.n	80204cc <__mcmp+0x28>

080204dc <__mdiff>:
 80204dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204e0:	460c      	mov	r4, r1
 80204e2:	4606      	mov	r6, r0
 80204e4:	4611      	mov	r1, r2
 80204e6:	4620      	mov	r0, r4
 80204e8:	4690      	mov	r8, r2
 80204ea:	f7ff ffdb 	bl	80204a4 <__mcmp>
 80204ee:	1e05      	subs	r5, r0, #0
 80204f0:	d110      	bne.n	8020514 <__mdiff+0x38>
 80204f2:	4629      	mov	r1, r5
 80204f4:	4630      	mov	r0, r6
 80204f6:	f7ff fd0f 	bl	801ff18 <_Balloc>
 80204fa:	b930      	cbnz	r0, 802050a <__mdiff+0x2e>
 80204fc:	4b3a      	ldr	r3, [pc, #232]	; (80205e8 <__mdiff+0x10c>)
 80204fe:	4602      	mov	r2, r0
 8020500:	f240 2137 	movw	r1, #567	; 0x237
 8020504:	4839      	ldr	r0, [pc, #228]	; (80205ec <__mdiff+0x110>)
 8020506:	f000 fe71 	bl	80211ec <__assert_func>
 802050a:	2301      	movs	r3, #1
 802050c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020514:	bfa4      	itt	ge
 8020516:	4643      	movge	r3, r8
 8020518:	46a0      	movge	r8, r4
 802051a:	4630      	mov	r0, r6
 802051c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020520:	bfa6      	itte	ge
 8020522:	461c      	movge	r4, r3
 8020524:	2500      	movge	r5, #0
 8020526:	2501      	movlt	r5, #1
 8020528:	f7ff fcf6 	bl	801ff18 <_Balloc>
 802052c:	b920      	cbnz	r0, 8020538 <__mdiff+0x5c>
 802052e:	4b2e      	ldr	r3, [pc, #184]	; (80205e8 <__mdiff+0x10c>)
 8020530:	4602      	mov	r2, r0
 8020532:	f240 2145 	movw	r1, #581	; 0x245
 8020536:	e7e5      	b.n	8020504 <__mdiff+0x28>
 8020538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802053c:	6926      	ldr	r6, [r4, #16]
 802053e:	60c5      	str	r5, [r0, #12]
 8020540:	f104 0914 	add.w	r9, r4, #20
 8020544:	f108 0514 	add.w	r5, r8, #20
 8020548:	f100 0e14 	add.w	lr, r0, #20
 802054c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8020550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8020554:	f108 0210 	add.w	r2, r8, #16
 8020558:	46f2      	mov	sl, lr
 802055a:	2100      	movs	r1, #0
 802055c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020564:	fa11 f88b 	uxtah	r8, r1, fp
 8020568:	b299      	uxth	r1, r3
 802056a:	0c1b      	lsrs	r3, r3, #16
 802056c:	eba8 0801 	sub.w	r8, r8, r1
 8020570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020574:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020578:	fa1f f888 	uxth.w	r8, r8
 802057c:	1419      	asrs	r1, r3, #16
 802057e:	454e      	cmp	r6, r9
 8020580:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020584:	f84a 3b04 	str.w	r3, [sl], #4
 8020588:	d8e8      	bhi.n	802055c <__mdiff+0x80>
 802058a:	1b33      	subs	r3, r6, r4
 802058c:	3b15      	subs	r3, #21
 802058e:	f023 0303 	bic.w	r3, r3, #3
 8020592:	3304      	adds	r3, #4
 8020594:	3415      	adds	r4, #21
 8020596:	42a6      	cmp	r6, r4
 8020598:	bf38      	it	cc
 802059a:	2304      	movcc	r3, #4
 802059c:	441d      	add	r5, r3
 802059e:	4473      	add	r3, lr
 80205a0:	469e      	mov	lr, r3
 80205a2:	462e      	mov	r6, r5
 80205a4:	4566      	cmp	r6, ip
 80205a6:	d30e      	bcc.n	80205c6 <__mdiff+0xea>
 80205a8:	f10c 0203 	add.w	r2, ip, #3
 80205ac:	1b52      	subs	r2, r2, r5
 80205ae:	f022 0203 	bic.w	r2, r2, #3
 80205b2:	3d03      	subs	r5, #3
 80205b4:	45ac      	cmp	ip, r5
 80205b6:	bf38      	it	cc
 80205b8:	2200      	movcc	r2, #0
 80205ba:	4413      	add	r3, r2
 80205bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80205c0:	b17a      	cbz	r2, 80205e2 <__mdiff+0x106>
 80205c2:	6107      	str	r7, [r0, #16]
 80205c4:	e7a4      	b.n	8020510 <__mdiff+0x34>
 80205c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80205ca:	fa11 f288 	uxtah	r2, r1, r8
 80205ce:	1414      	asrs	r4, r2, #16
 80205d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80205d4:	b292      	uxth	r2, r2
 80205d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80205da:	f84e 2b04 	str.w	r2, [lr], #4
 80205de:	1421      	asrs	r1, r4, #16
 80205e0:	e7e0      	b.n	80205a4 <__mdiff+0xc8>
 80205e2:	3f01      	subs	r7, #1
 80205e4:	e7ea      	b.n	80205bc <__mdiff+0xe0>
 80205e6:	bf00      	nop
 80205e8:	08024181 	.word	0x08024181
 80205ec:	08024209 	.word	0x08024209

080205f0 <__ulp>:
 80205f0:	b082      	sub	sp, #8
 80205f2:	ed8d 0b00 	vstr	d0, [sp]
 80205f6:	9a01      	ldr	r2, [sp, #4]
 80205f8:	4b0f      	ldr	r3, [pc, #60]	; (8020638 <__ulp+0x48>)
 80205fa:	4013      	ands	r3, r2
 80205fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8020600:	2b00      	cmp	r3, #0
 8020602:	dc08      	bgt.n	8020616 <__ulp+0x26>
 8020604:	425b      	negs	r3, r3
 8020606:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802060a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802060e:	da04      	bge.n	802061a <__ulp+0x2a>
 8020610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8020614:	4113      	asrs	r3, r2
 8020616:	2200      	movs	r2, #0
 8020618:	e008      	b.n	802062c <__ulp+0x3c>
 802061a:	f1a2 0314 	sub.w	r3, r2, #20
 802061e:	2b1e      	cmp	r3, #30
 8020620:	bfda      	itte	le
 8020622:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8020626:	40da      	lsrle	r2, r3
 8020628:	2201      	movgt	r2, #1
 802062a:	2300      	movs	r3, #0
 802062c:	4619      	mov	r1, r3
 802062e:	4610      	mov	r0, r2
 8020630:	ec41 0b10 	vmov	d0, r0, r1
 8020634:	b002      	add	sp, #8
 8020636:	4770      	bx	lr
 8020638:	7ff00000 	.word	0x7ff00000

0802063c <__b2d>:
 802063c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020640:	6906      	ldr	r6, [r0, #16]
 8020642:	f100 0814 	add.w	r8, r0, #20
 8020646:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802064a:	1f37      	subs	r7, r6, #4
 802064c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020650:	4610      	mov	r0, r2
 8020652:	f7ff fd53 	bl	80200fc <__hi0bits>
 8020656:	f1c0 0320 	rsb	r3, r0, #32
 802065a:	280a      	cmp	r0, #10
 802065c:	600b      	str	r3, [r1, #0]
 802065e:	491b      	ldr	r1, [pc, #108]	; (80206cc <__b2d+0x90>)
 8020660:	dc15      	bgt.n	802068e <__b2d+0x52>
 8020662:	f1c0 0c0b 	rsb	ip, r0, #11
 8020666:	fa22 f30c 	lsr.w	r3, r2, ip
 802066a:	45b8      	cmp	r8, r7
 802066c:	ea43 0501 	orr.w	r5, r3, r1
 8020670:	bf34      	ite	cc
 8020672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020676:	2300      	movcs	r3, #0
 8020678:	3015      	adds	r0, #21
 802067a:	fa02 f000 	lsl.w	r0, r2, r0
 802067e:	fa23 f30c 	lsr.w	r3, r3, ip
 8020682:	4303      	orrs	r3, r0
 8020684:	461c      	mov	r4, r3
 8020686:	ec45 4b10 	vmov	d0, r4, r5
 802068a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802068e:	45b8      	cmp	r8, r7
 8020690:	bf3a      	itte	cc
 8020692:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020696:	f1a6 0708 	subcc.w	r7, r6, #8
 802069a:	2300      	movcs	r3, #0
 802069c:	380b      	subs	r0, #11
 802069e:	d012      	beq.n	80206c6 <__b2d+0x8a>
 80206a0:	f1c0 0120 	rsb	r1, r0, #32
 80206a4:	fa23 f401 	lsr.w	r4, r3, r1
 80206a8:	4082      	lsls	r2, r0
 80206aa:	4322      	orrs	r2, r4
 80206ac:	4547      	cmp	r7, r8
 80206ae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80206b2:	bf8c      	ite	hi
 80206b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80206b8:	2200      	movls	r2, #0
 80206ba:	4083      	lsls	r3, r0
 80206bc:	40ca      	lsrs	r2, r1
 80206be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80206c2:	4313      	orrs	r3, r2
 80206c4:	e7de      	b.n	8020684 <__b2d+0x48>
 80206c6:	ea42 0501 	orr.w	r5, r2, r1
 80206ca:	e7db      	b.n	8020684 <__b2d+0x48>
 80206cc:	3ff00000 	.word	0x3ff00000

080206d0 <__d2b>:
 80206d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80206d4:	460f      	mov	r7, r1
 80206d6:	2101      	movs	r1, #1
 80206d8:	ec59 8b10 	vmov	r8, r9, d0
 80206dc:	4616      	mov	r6, r2
 80206de:	f7ff fc1b 	bl	801ff18 <_Balloc>
 80206e2:	4604      	mov	r4, r0
 80206e4:	b930      	cbnz	r0, 80206f4 <__d2b+0x24>
 80206e6:	4602      	mov	r2, r0
 80206e8:	4b24      	ldr	r3, [pc, #144]	; (802077c <__d2b+0xac>)
 80206ea:	4825      	ldr	r0, [pc, #148]	; (8020780 <__d2b+0xb0>)
 80206ec:	f240 310f 	movw	r1, #783	; 0x30f
 80206f0:	f000 fd7c 	bl	80211ec <__assert_func>
 80206f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80206f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80206fc:	bb2d      	cbnz	r5, 802074a <__d2b+0x7a>
 80206fe:	9301      	str	r3, [sp, #4]
 8020700:	f1b8 0300 	subs.w	r3, r8, #0
 8020704:	d026      	beq.n	8020754 <__d2b+0x84>
 8020706:	4668      	mov	r0, sp
 8020708:	9300      	str	r3, [sp, #0]
 802070a:	f7ff fd17 	bl	802013c <__lo0bits>
 802070e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020712:	b1e8      	cbz	r0, 8020750 <__d2b+0x80>
 8020714:	f1c0 0320 	rsb	r3, r0, #32
 8020718:	fa02 f303 	lsl.w	r3, r2, r3
 802071c:	430b      	orrs	r3, r1
 802071e:	40c2      	lsrs	r2, r0
 8020720:	6163      	str	r3, [r4, #20]
 8020722:	9201      	str	r2, [sp, #4]
 8020724:	9b01      	ldr	r3, [sp, #4]
 8020726:	61a3      	str	r3, [r4, #24]
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2202      	movne	r2, #2
 802072e:	2201      	moveq	r2, #1
 8020730:	6122      	str	r2, [r4, #16]
 8020732:	b1bd      	cbz	r5, 8020764 <__d2b+0x94>
 8020734:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020738:	4405      	add	r5, r0
 802073a:	603d      	str	r5, [r7, #0]
 802073c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020740:	6030      	str	r0, [r6, #0]
 8020742:	4620      	mov	r0, r4
 8020744:	b003      	add	sp, #12
 8020746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802074a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802074e:	e7d6      	b.n	80206fe <__d2b+0x2e>
 8020750:	6161      	str	r1, [r4, #20]
 8020752:	e7e7      	b.n	8020724 <__d2b+0x54>
 8020754:	a801      	add	r0, sp, #4
 8020756:	f7ff fcf1 	bl	802013c <__lo0bits>
 802075a:	9b01      	ldr	r3, [sp, #4]
 802075c:	6163      	str	r3, [r4, #20]
 802075e:	3020      	adds	r0, #32
 8020760:	2201      	movs	r2, #1
 8020762:	e7e5      	b.n	8020730 <__d2b+0x60>
 8020764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802076c:	6038      	str	r0, [r7, #0]
 802076e:	6918      	ldr	r0, [r3, #16]
 8020770:	f7ff fcc4 	bl	80200fc <__hi0bits>
 8020774:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020778:	e7e2      	b.n	8020740 <__d2b+0x70>
 802077a:	bf00      	nop
 802077c:	08024181 	.word	0x08024181
 8020780:	08024209 	.word	0x08024209

08020784 <__ratio>:
 8020784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020788:	4688      	mov	r8, r1
 802078a:	4669      	mov	r1, sp
 802078c:	4681      	mov	r9, r0
 802078e:	f7ff ff55 	bl	802063c <__b2d>
 8020792:	a901      	add	r1, sp, #4
 8020794:	4640      	mov	r0, r8
 8020796:	ec55 4b10 	vmov	r4, r5, d0
 802079a:	f7ff ff4f 	bl	802063c <__b2d>
 802079e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80207a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80207a6:	eba3 0c02 	sub.w	ip, r3, r2
 80207aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80207ae:	1a9b      	subs	r3, r3, r2
 80207b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80207b4:	ec51 0b10 	vmov	r0, r1, d0
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	bfd6      	itet	le
 80207bc:	460a      	movle	r2, r1
 80207be:	462a      	movgt	r2, r5
 80207c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80207c4:	468b      	mov	fp, r1
 80207c6:	462f      	mov	r7, r5
 80207c8:	bfd4      	ite	le
 80207ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80207ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80207d2:	4620      	mov	r0, r4
 80207d4:	ee10 2a10 	vmov	r2, s0
 80207d8:	465b      	mov	r3, fp
 80207da:	4639      	mov	r1, r7
 80207dc:	f7e0 f846 	bl	800086c <__aeabi_ddiv>
 80207e0:	ec41 0b10 	vmov	d0, r0, r1
 80207e4:	b003      	add	sp, #12
 80207e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207ea <__copybits>:
 80207ea:	3901      	subs	r1, #1
 80207ec:	b570      	push	{r4, r5, r6, lr}
 80207ee:	1149      	asrs	r1, r1, #5
 80207f0:	6914      	ldr	r4, [r2, #16]
 80207f2:	3101      	adds	r1, #1
 80207f4:	f102 0314 	add.w	r3, r2, #20
 80207f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80207fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020800:	1f05      	subs	r5, r0, #4
 8020802:	42a3      	cmp	r3, r4
 8020804:	d30c      	bcc.n	8020820 <__copybits+0x36>
 8020806:	1aa3      	subs	r3, r4, r2
 8020808:	3b11      	subs	r3, #17
 802080a:	f023 0303 	bic.w	r3, r3, #3
 802080e:	3211      	adds	r2, #17
 8020810:	42a2      	cmp	r2, r4
 8020812:	bf88      	it	hi
 8020814:	2300      	movhi	r3, #0
 8020816:	4418      	add	r0, r3
 8020818:	2300      	movs	r3, #0
 802081a:	4288      	cmp	r0, r1
 802081c:	d305      	bcc.n	802082a <__copybits+0x40>
 802081e:	bd70      	pop	{r4, r5, r6, pc}
 8020820:	f853 6b04 	ldr.w	r6, [r3], #4
 8020824:	f845 6f04 	str.w	r6, [r5, #4]!
 8020828:	e7eb      	b.n	8020802 <__copybits+0x18>
 802082a:	f840 3b04 	str.w	r3, [r0], #4
 802082e:	e7f4      	b.n	802081a <__copybits+0x30>

08020830 <__any_on>:
 8020830:	f100 0214 	add.w	r2, r0, #20
 8020834:	6900      	ldr	r0, [r0, #16]
 8020836:	114b      	asrs	r3, r1, #5
 8020838:	4298      	cmp	r0, r3
 802083a:	b510      	push	{r4, lr}
 802083c:	db11      	blt.n	8020862 <__any_on+0x32>
 802083e:	dd0a      	ble.n	8020856 <__any_on+0x26>
 8020840:	f011 011f 	ands.w	r1, r1, #31
 8020844:	d007      	beq.n	8020856 <__any_on+0x26>
 8020846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802084a:	fa24 f001 	lsr.w	r0, r4, r1
 802084e:	fa00 f101 	lsl.w	r1, r0, r1
 8020852:	428c      	cmp	r4, r1
 8020854:	d10b      	bne.n	802086e <__any_on+0x3e>
 8020856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802085a:	4293      	cmp	r3, r2
 802085c:	d803      	bhi.n	8020866 <__any_on+0x36>
 802085e:	2000      	movs	r0, #0
 8020860:	bd10      	pop	{r4, pc}
 8020862:	4603      	mov	r3, r0
 8020864:	e7f7      	b.n	8020856 <__any_on+0x26>
 8020866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802086a:	2900      	cmp	r1, #0
 802086c:	d0f5      	beq.n	802085a <__any_on+0x2a>
 802086e:	2001      	movs	r0, #1
 8020870:	e7f6      	b.n	8020860 <__any_on+0x30>

08020872 <__ascii_wctomb>:
 8020872:	b149      	cbz	r1, 8020888 <__ascii_wctomb+0x16>
 8020874:	2aff      	cmp	r2, #255	; 0xff
 8020876:	bf85      	ittet	hi
 8020878:	238a      	movhi	r3, #138	; 0x8a
 802087a:	6003      	strhi	r3, [r0, #0]
 802087c:	700a      	strbls	r2, [r1, #0]
 802087e:	f04f 30ff 	movhi.w	r0, #4294967295
 8020882:	bf98      	it	ls
 8020884:	2001      	movls	r0, #1
 8020886:	4770      	bx	lr
 8020888:	4608      	mov	r0, r1
 802088a:	4770      	bx	lr

0802088c <__ssputs_r>:
 802088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020890:	688e      	ldr	r6, [r1, #8]
 8020892:	461f      	mov	r7, r3
 8020894:	42be      	cmp	r6, r7
 8020896:	680b      	ldr	r3, [r1, #0]
 8020898:	4682      	mov	sl, r0
 802089a:	460c      	mov	r4, r1
 802089c:	4690      	mov	r8, r2
 802089e:	d82c      	bhi.n	80208fa <__ssputs_r+0x6e>
 80208a0:	898a      	ldrh	r2, [r1, #12]
 80208a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80208a6:	d026      	beq.n	80208f6 <__ssputs_r+0x6a>
 80208a8:	6965      	ldr	r5, [r4, #20]
 80208aa:	6909      	ldr	r1, [r1, #16]
 80208ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80208b0:	eba3 0901 	sub.w	r9, r3, r1
 80208b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80208b8:	1c7b      	adds	r3, r7, #1
 80208ba:	444b      	add	r3, r9
 80208bc:	106d      	asrs	r5, r5, #1
 80208be:	429d      	cmp	r5, r3
 80208c0:	bf38      	it	cc
 80208c2:	461d      	movcc	r5, r3
 80208c4:	0553      	lsls	r3, r2, #21
 80208c6:	d527      	bpl.n	8020918 <__ssputs_r+0x8c>
 80208c8:	4629      	mov	r1, r5
 80208ca:	f7fd fa4d 	bl	801dd68 <_malloc_r>
 80208ce:	4606      	mov	r6, r0
 80208d0:	b360      	cbz	r0, 802092c <__ssputs_r+0xa0>
 80208d2:	6921      	ldr	r1, [r4, #16]
 80208d4:	464a      	mov	r2, r9
 80208d6:	f7fe ff4d 	bl	801f774 <memcpy>
 80208da:	89a3      	ldrh	r3, [r4, #12]
 80208dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80208e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80208e4:	81a3      	strh	r3, [r4, #12]
 80208e6:	6126      	str	r6, [r4, #16]
 80208e8:	6165      	str	r5, [r4, #20]
 80208ea:	444e      	add	r6, r9
 80208ec:	eba5 0509 	sub.w	r5, r5, r9
 80208f0:	6026      	str	r6, [r4, #0]
 80208f2:	60a5      	str	r5, [r4, #8]
 80208f4:	463e      	mov	r6, r7
 80208f6:	42be      	cmp	r6, r7
 80208f8:	d900      	bls.n	80208fc <__ssputs_r+0x70>
 80208fa:	463e      	mov	r6, r7
 80208fc:	6820      	ldr	r0, [r4, #0]
 80208fe:	4632      	mov	r2, r6
 8020900:	4641      	mov	r1, r8
 8020902:	f7fe fe81 	bl	801f608 <memmove>
 8020906:	68a3      	ldr	r3, [r4, #8]
 8020908:	1b9b      	subs	r3, r3, r6
 802090a:	60a3      	str	r3, [r4, #8]
 802090c:	6823      	ldr	r3, [r4, #0]
 802090e:	4433      	add	r3, r6
 8020910:	6023      	str	r3, [r4, #0]
 8020912:	2000      	movs	r0, #0
 8020914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020918:	462a      	mov	r2, r5
 802091a:	f000 fc85 	bl	8021228 <_realloc_r>
 802091e:	4606      	mov	r6, r0
 8020920:	2800      	cmp	r0, #0
 8020922:	d1e0      	bne.n	80208e6 <__ssputs_r+0x5a>
 8020924:	6921      	ldr	r1, [r4, #16]
 8020926:	4650      	mov	r0, sl
 8020928:	f7fe ff40 	bl	801f7ac <_free_r>
 802092c:	230c      	movs	r3, #12
 802092e:	f8ca 3000 	str.w	r3, [sl]
 8020932:	89a3      	ldrh	r3, [r4, #12]
 8020934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020938:	81a3      	strh	r3, [r4, #12]
 802093a:	f04f 30ff 	mov.w	r0, #4294967295
 802093e:	e7e9      	b.n	8020914 <__ssputs_r+0x88>

08020940 <_svfiprintf_r>:
 8020940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020944:	4698      	mov	r8, r3
 8020946:	898b      	ldrh	r3, [r1, #12]
 8020948:	061b      	lsls	r3, r3, #24
 802094a:	b09d      	sub	sp, #116	; 0x74
 802094c:	4607      	mov	r7, r0
 802094e:	460d      	mov	r5, r1
 8020950:	4614      	mov	r4, r2
 8020952:	d50e      	bpl.n	8020972 <_svfiprintf_r+0x32>
 8020954:	690b      	ldr	r3, [r1, #16]
 8020956:	b963      	cbnz	r3, 8020972 <_svfiprintf_r+0x32>
 8020958:	2140      	movs	r1, #64	; 0x40
 802095a:	f7fd fa05 	bl	801dd68 <_malloc_r>
 802095e:	6028      	str	r0, [r5, #0]
 8020960:	6128      	str	r0, [r5, #16]
 8020962:	b920      	cbnz	r0, 802096e <_svfiprintf_r+0x2e>
 8020964:	230c      	movs	r3, #12
 8020966:	603b      	str	r3, [r7, #0]
 8020968:	f04f 30ff 	mov.w	r0, #4294967295
 802096c:	e0d0      	b.n	8020b10 <_svfiprintf_r+0x1d0>
 802096e:	2340      	movs	r3, #64	; 0x40
 8020970:	616b      	str	r3, [r5, #20]
 8020972:	2300      	movs	r3, #0
 8020974:	9309      	str	r3, [sp, #36]	; 0x24
 8020976:	2320      	movs	r3, #32
 8020978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802097c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020980:	2330      	movs	r3, #48	; 0x30
 8020982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020b28 <_svfiprintf_r+0x1e8>
 8020986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802098a:	f04f 0901 	mov.w	r9, #1
 802098e:	4623      	mov	r3, r4
 8020990:	469a      	mov	sl, r3
 8020992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020996:	b10a      	cbz	r2, 802099c <_svfiprintf_r+0x5c>
 8020998:	2a25      	cmp	r2, #37	; 0x25
 802099a:	d1f9      	bne.n	8020990 <_svfiprintf_r+0x50>
 802099c:	ebba 0b04 	subs.w	fp, sl, r4
 80209a0:	d00b      	beq.n	80209ba <_svfiprintf_r+0x7a>
 80209a2:	465b      	mov	r3, fp
 80209a4:	4622      	mov	r2, r4
 80209a6:	4629      	mov	r1, r5
 80209a8:	4638      	mov	r0, r7
 80209aa:	f7ff ff6f 	bl	802088c <__ssputs_r>
 80209ae:	3001      	adds	r0, #1
 80209b0:	f000 80a9 	beq.w	8020b06 <_svfiprintf_r+0x1c6>
 80209b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80209b6:	445a      	add	r2, fp
 80209b8:	9209      	str	r2, [sp, #36]	; 0x24
 80209ba:	f89a 3000 	ldrb.w	r3, [sl]
 80209be:	2b00      	cmp	r3, #0
 80209c0:	f000 80a1 	beq.w	8020b06 <_svfiprintf_r+0x1c6>
 80209c4:	2300      	movs	r3, #0
 80209c6:	f04f 32ff 	mov.w	r2, #4294967295
 80209ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80209ce:	f10a 0a01 	add.w	sl, sl, #1
 80209d2:	9304      	str	r3, [sp, #16]
 80209d4:	9307      	str	r3, [sp, #28]
 80209d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80209da:	931a      	str	r3, [sp, #104]	; 0x68
 80209dc:	4654      	mov	r4, sl
 80209de:	2205      	movs	r2, #5
 80209e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209e4:	4850      	ldr	r0, [pc, #320]	; (8020b28 <_svfiprintf_r+0x1e8>)
 80209e6:	f7df fc03 	bl	80001f0 <memchr>
 80209ea:	9a04      	ldr	r2, [sp, #16]
 80209ec:	b9d8      	cbnz	r0, 8020a26 <_svfiprintf_r+0xe6>
 80209ee:	06d0      	lsls	r0, r2, #27
 80209f0:	bf44      	itt	mi
 80209f2:	2320      	movmi	r3, #32
 80209f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209f8:	0711      	lsls	r1, r2, #28
 80209fa:	bf44      	itt	mi
 80209fc:	232b      	movmi	r3, #43	; 0x2b
 80209fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020a02:	f89a 3000 	ldrb.w	r3, [sl]
 8020a06:	2b2a      	cmp	r3, #42	; 0x2a
 8020a08:	d015      	beq.n	8020a36 <_svfiprintf_r+0xf6>
 8020a0a:	9a07      	ldr	r2, [sp, #28]
 8020a0c:	4654      	mov	r4, sl
 8020a0e:	2000      	movs	r0, #0
 8020a10:	f04f 0c0a 	mov.w	ip, #10
 8020a14:	4621      	mov	r1, r4
 8020a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020a1a:	3b30      	subs	r3, #48	; 0x30
 8020a1c:	2b09      	cmp	r3, #9
 8020a1e:	d94d      	bls.n	8020abc <_svfiprintf_r+0x17c>
 8020a20:	b1b0      	cbz	r0, 8020a50 <_svfiprintf_r+0x110>
 8020a22:	9207      	str	r2, [sp, #28]
 8020a24:	e014      	b.n	8020a50 <_svfiprintf_r+0x110>
 8020a26:	eba0 0308 	sub.w	r3, r0, r8
 8020a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8020a2e:	4313      	orrs	r3, r2
 8020a30:	9304      	str	r3, [sp, #16]
 8020a32:	46a2      	mov	sl, r4
 8020a34:	e7d2      	b.n	80209dc <_svfiprintf_r+0x9c>
 8020a36:	9b03      	ldr	r3, [sp, #12]
 8020a38:	1d19      	adds	r1, r3, #4
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	9103      	str	r1, [sp, #12]
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	bfbb      	ittet	lt
 8020a42:	425b      	neglt	r3, r3
 8020a44:	f042 0202 	orrlt.w	r2, r2, #2
 8020a48:	9307      	strge	r3, [sp, #28]
 8020a4a:	9307      	strlt	r3, [sp, #28]
 8020a4c:	bfb8      	it	lt
 8020a4e:	9204      	strlt	r2, [sp, #16]
 8020a50:	7823      	ldrb	r3, [r4, #0]
 8020a52:	2b2e      	cmp	r3, #46	; 0x2e
 8020a54:	d10c      	bne.n	8020a70 <_svfiprintf_r+0x130>
 8020a56:	7863      	ldrb	r3, [r4, #1]
 8020a58:	2b2a      	cmp	r3, #42	; 0x2a
 8020a5a:	d134      	bne.n	8020ac6 <_svfiprintf_r+0x186>
 8020a5c:	9b03      	ldr	r3, [sp, #12]
 8020a5e:	1d1a      	adds	r2, r3, #4
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	9203      	str	r2, [sp, #12]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	bfb8      	it	lt
 8020a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8020a6c:	3402      	adds	r4, #2
 8020a6e:	9305      	str	r3, [sp, #20]
 8020a70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8020b38 <_svfiprintf_r+0x1f8>
 8020a74:	7821      	ldrb	r1, [r4, #0]
 8020a76:	2203      	movs	r2, #3
 8020a78:	4650      	mov	r0, sl
 8020a7a:	f7df fbb9 	bl	80001f0 <memchr>
 8020a7e:	b138      	cbz	r0, 8020a90 <_svfiprintf_r+0x150>
 8020a80:	9b04      	ldr	r3, [sp, #16]
 8020a82:	eba0 000a 	sub.w	r0, r0, sl
 8020a86:	2240      	movs	r2, #64	; 0x40
 8020a88:	4082      	lsls	r2, r0
 8020a8a:	4313      	orrs	r3, r2
 8020a8c:	3401      	adds	r4, #1
 8020a8e:	9304      	str	r3, [sp, #16]
 8020a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a94:	4825      	ldr	r0, [pc, #148]	; (8020b2c <_svfiprintf_r+0x1ec>)
 8020a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020a9a:	2206      	movs	r2, #6
 8020a9c:	f7df fba8 	bl	80001f0 <memchr>
 8020aa0:	2800      	cmp	r0, #0
 8020aa2:	d038      	beq.n	8020b16 <_svfiprintf_r+0x1d6>
 8020aa4:	4b22      	ldr	r3, [pc, #136]	; (8020b30 <_svfiprintf_r+0x1f0>)
 8020aa6:	bb1b      	cbnz	r3, 8020af0 <_svfiprintf_r+0x1b0>
 8020aa8:	9b03      	ldr	r3, [sp, #12]
 8020aaa:	3307      	adds	r3, #7
 8020aac:	f023 0307 	bic.w	r3, r3, #7
 8020ab0:	3308      	adds	r3, #8
 8020ab2:	9303      	str	r3, [sp, #12]
 8020ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ab6:	4433      	add	r3, r6
 8020ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8020aba:	e768      	b.n	802098e <_svfiprintf_r+0x4e>
 8020abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8020ac0:	460c      	mov	r4, r1
 8020ac2:	2001      	movs	r0, #1
 8020ac4:	e7a6      	b.n	8020a14 <_svfiprintf_r+0xd4>
 8020ac6:	2300      	movs	r3, #0
 8020ac8:	3401      	adds	r4, #1
 8020aca:	9305      	str	r3, [sp, #20]
 8020acc:	4619      	mov	r1, r3
 8020ace:	f04f 0c0a 	mov.w	ip, #10
 8020ad2:	4620      	mov	r0, r4
 8020ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ad8:	3a30      	subs	r2, #48	; 0x30
 8020ada:	2a09      	cmp	r2, #9
 8020adc:	d903      	bls.n	8020ae6 <_svfiprintf_r+0x1a6>
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	d0c6      	beq.n	8020a70 <_svfiprintf_r+0x130>
 8020ae2:	9105      	str	r1, [sp, #20]
 8020ae4:	e7c4      	b.n	8020a70 <_svfiprintf_r+0x130>
 8020ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8020aea:	4604      	mov	r4, r0
 8020aec:	2301      	movs	r3, #1
 8020aee:	e7f0      	b.n	8020ad2 <_svfiprintf_r+0x192>
 8020af0:	ab03      	add	r3, sp, #12
 8020af2:	9300      	str	r3, [sp, #0]
 8020af4:	462a      	mov	r2, r5
 8020af6:	4b0f      	ldr	r3, [pc, #60]	; (8020b34 <_svfiprintf_r+0x1f4>)
 8020af8:	a904      	add	r1, sp, #16
 8020afa:	4638      	mov	r0, r7
 8020afc:	f3af 8000 	nop.w
 8020b00:	1c42      	adds	r2, r0, #1
 8020b02:	4606      	mov	r6, r0
 8020b04:	d1d6      	bne.n	8020ab4 <_svfiprintf_r+0x174>
 8020b06:	89ab      	ldrh	r3, [r5, #12]
 8020b08:	065b      	lsls	r3, r3, #25
 8020b0a:	f53f af2d 	bmi.w	8020968 <_svfiprintf_r+0x28>
 8020b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b10:	b01d      	add	sp, #116	; 0x74
 8020b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b16:	ab03      	add	r3, sp, #12
 8020b18:	9300      	str	r3, [sp, #0]
 8020b1a:	462a      	mov	r2, r5
 8020b1c:	4b05      	ldr	r3, [pc, #20]	; (8020b34 <_svfiprintf_r+0x1f4>)
 8020b1e:	a904      	add	r1, sp, #16
 8020b20:	4638      	mov	r0, r7
 8020b22:	f000 f9bd 	bl	8020ea0 <_printf_i>
 8020b26:	e7eb      	b.n	8020b00 <_svfiprintf_r+0x1c0>
 8020b28:	08024364 	.word	0x08024364
 8020b2c:	0802436e 	.word	0x0802436e
 8020b30:	00000000 	.word	0x00000000
 8020b34:	0802088d 	.word	0x0802088d
 8020b38:	0802436a 	.word	0x0802436a

08020b3c <__sfputc_r>:
 8020b3c:	6893      	ldr	r3, [r2, #8]
 8020b3e:	3b01      	subs	r3, #1
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	b410      	push	{r4}
 8020b44:	6093      	str	r3, [r2, #8]
 8020b46:	da08      	bge.n	8020b5a <__sfputc_r+0x1e>
 8020b48:	6994      	ldr	r4, [r2, #24]
 8020b4a:	42a3      	cmp	r3, r4
 8020b4c:	db01      	blt.n	8020b52 <__sfputc_r+0x16>
 8020b4e:	290a      	cmp	r1, #10
 8020b50:	d103      	bne.n	8020b5a <__sfputc_r+0x1e>
 8020b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b56:	f7fe bcc2 	b.w	801f4de <__swbuf_r>
 8020b5a:	6813      	ldr	r3, [r2, #0]
 8020b5c:	1c58      	adds	r0, r3, #1
 8020b5e:	6010      	str	r0, [r2, #0]
 8020b60:	7019      	strb	r1, [r3, #0]
 8020b62:	4608      	mov	r0, r1
 8020b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b68:	4770      	bx	lr

08020b6a <__sfputs_r>:
 8020b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b6c:	4606      	mov	r6, r0
 8020b6e:	460f      	mov	r7, r1
 8020b70:	4614      	mov	r4, r2
 8020b72:	18d5      	adds	r5, r2, r3
 8020b74:	42ac      	cmp	r4, r5
 8020b76:	d101      	bne.n	8020b7c <__sfputs_r+0x12>
 8020b78:	2000      	movs	r0, #0
 8020b7a:	e007      	b.n	8020b8c <__sfputs_r+0x22>
 8020b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b80:	463a      	mov	r2, r7
 8020b82:	4630      	mov	r0, r6
 8020b84:	f7ff ffda 	bl	8020b3c <__sfputc_r>
 8020b88:	1c43      	adds	r3, r0, #1
 8020b8a:	d1f3      	bne.n	8020b74 <__sfputs_r+0xa>
 8020b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b90 <_vfiprintf_r>:
 8020b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b94:	460d      	mov	r5, r1
 8020b96:	b09d      	sub	sp, #116	; 0x74
 8020b98:	4614      	mov	r4, r2
 8020b9a:	4698      	mov	r8, r3
 8020b9c:	4606      	mov	r6, r0
 8020b9e:	b118      	cbz	r0, 8020ba8 <_vfiprintf_r+0x18>
 8020ba0:	6a03      	ldr	r3, [r0, #32]
 8020ba2:	b90b      	cbnz	r3, 8020ba8 <_vfiprintf_r+0x18>
 8020ba4:	f7fe fb60 	bl	801f268 <__sinit>
 8020ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020baa:	07d9      	lsls	r1, r3, #31
 8020bac:	d405      	bmi.n	8020bba <_vfiprintf_r+0x2a>
 8020bae:	89ab      	ldrh	r3, [r5, #12]
 8020bb0:	059a      	lsls	r2, r3, #22
 8020bb2:	d402      	bmi.n	8020bba <_vfiprintf_r+0x2a>
 8020bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020bb6:	f7fe fddb 	bl	801f770 <__retarget_lock_acquire_recursive>
 8020bba:	89ab      	ldrh	r3, [r5, #12]
 8020bbc:	071b      	lsls	r3, r3, #28
 8020bbe:	d501      	bpl.n	8020bc4 <_vfiprintf_r+0x34>
 8020bc0:	692b      	ldr	r3, [r5, #16]
 8020bc2:	b99b      	cbnz	r3, 8020bec <_vfiprintf_r+0x5c>
 8020bc4:	4629      	mov	r1, r5
 8020bc6:	4630      	mov	r0, r6
 8020bc8:	f7fe fcc6 	bl	801f558 <__swsetup_r>
 8020bcc:	b170      	cbz	r0, 8020bec <_vfiprintf_r+0x5c>
 8020bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020bd0:	07dc      	lsls	r4, r3, #31
 8020bd2:	d504      	bpl.n	8020bde <_vfiprintf_r+0x4e>
 8020bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8020bd8:	b01d      	add	sp, #116	; 0x74
 8020bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bde:	89ab      	ldrh	r3, [r5, #12]
 8020be0:	0598      	lsls	r0, r3, #22
 8020be2:	d4f7      	bmi.n	8020bd4 <_vfiprintf_r+0x44>
 8020be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020be6:	f7fe fdc4 	bl	801f772 <__retarget_lock_release_recursive>
 8020bea:	e7f3      	b.n	8020bd4 <_vfiprintf_r+0x44>
 8020bec:	2300      	movs	r3, #0
 8020bee:	9309      	str	r3, [sp, #36]	; 0x24
 8020bf0:	2320      	movs	r3, #32
 8020bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8020bfa:	2330      	movs	r3, #48	; 0x30
 8020bfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8020db0 <_vfiprintf_r+0x220>
 8020c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020c04:	f04f 0901 	mov.w	r9, #1
 8020c08:	4623      	mov	r3, r4
 8020c0a:	469a      	mov	sl, r3
 8020c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020c10:	b10a      	cbz	r2, 8020c16 <_vfiprintf_r+0x86>
 8020c12:	2a25      	cmp	r2, #37	; 0x25
 8020c14:	d1f9      	bne.n	8020c0a <_vfiprintf_r+0x7a>
 8020c16:	ebba 0b04 	subs.w	fp, sl, r4
 8020c1a:	d00b      	beq.n	8020c34 <_vfiprintf_r+0xa4>
 8020c1c:	465b      	mov	r3, fp
 8020c1e:	4622      	mov	r2, r4
 8020c20:	4629      	mov	r1, r5
 8020c22:	4630      	mov	r0, r6
 8020c24:	f7ff ffa1 	bl	8020b6a <__sfputs_r>
 8020c28:	3001      	adds	r0, #1
 8020c2a:	f000 80a9 	beq.w	8020d80 <_vfiprintf_r+0x1f0>
 8020c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c30:	445a      	add	r2, fp
 8020c32:	9209      	str	r2, [sp, #36]	; 0x24
 8020c34:	f89a 3000 	ldrb.w	r3, [sl]
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	f000 80a1 	beq.w	8020d80 <_vfiprintf_r+0x1f0>
 8020c3e:	2300      	movs	r3, #0
 8020c40:	f04f 32ff 	mov.w	r2, #4294967295
 8020c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020c48:	f10a 0a01 	add.w	sl, sl, #1
 8020c4c:	9304      	str	r3, [sp, #16]
 8020c4e:	9307      	str	r3, [sp, #28]
 8020c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020c54:	931a      	str	r3, [sp, #104]	; 0x68
 8020c56:	4654      	mov	r4, sl
 8020c58:	2205      	movs	r2, #5
 8020c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c5e:	4854      	ldr	r0, [pc, #336]	; (8020db0 <_vfiprintf_r+0x220>)
 8020c60:	f7df fac6 	bl	80001f0 <memchr>
 8020c64:	9a04      	ldr	r2, [sp, #16]
 8020c66:	b9d8      	cbnz	r0, 8020ca0 <_vfiprintf_r+0x110>
 8020c68:	06d1      	lsls	r1, r2, #27
 8020c6a:	bf44      	itt	mi
 8020c6c:	2320      	movmi	r3, #32
 8020c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020c72:	0713      	lsls	r3, r2, #28
 8020c74:	bf44      	itt	mi
 8020c76:	232b      	movmi	r3, #43	; 0x2b
 8020c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8020c80:	2b2a      	cmp	r3, #42	; 0x2a
 8020c82:	d015      	beq.n	8020cb0 <_vfiprintf_r+0x120>
 8020c84:	9a07      	ldr	r2, [sp, #28]
 8020c86:	4654      	mov	r4, sl
 8020c88:	2000      	movs	r0, #0
 8020c8a:	f04f 0c0a 	mov.w	ip, #10
 8020c8e:	4621      	mov	r1, r4
 8020c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c94:	3b30      	subs	r3, #48	; 0x30
 8020c96:	2b09      	cmp	r3, #9
 8020c98:	d94d      	bls.n	8020d36 <_vfiprintf_r+0x1a6>
 8020c9a:	b1b0      	cbz	r0, 8020cca <_vfiprintf_r+0x13a>
 8020c9c:	9207      	str	r2, [sp, #28]
 8020c9e:	e014      	b.n	8020cca <_vfiprintf_r+0x13a>
 8020ca0:	eba0 0308 	sub.w	r3, r0, r8
 8020ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8020ca8:	4313      	orrs	r3, r2
 8020caa:	9304      	str	r3, [sp, #16]
 8020cac:	46a2      	mov	sl, r4
 8020cae:	e7d2      	b.n	8020c56 <_vfiprintf_r+0xc6>
 8020cb0:	9b03      	ldr	r3, [sp, #12]
 8020cb2:	1d19      	adds	r1, r3, #4
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	9103      	str	r1, [sp, #12]
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	bfbb      	ittet	lt
 8020cbc:	425b      	neglt	r3, r3
 8020cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8020cc2:	9307      	strge	r3, [sp, #28]
 8020cc4:	9307      	strlt	r3, [sp, #28]
 8020cc6:	bfb8      	it	lt
 8020cc8:	9204      	strlt	r2, [sp, #16]
 8020cca:	7823      	ldrb	r3, [r4, #0]
 8020ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8020cce:	d10c      	bne.n	8020cea <_vfiprintf_r+0x15a>
 8020cd0:	7863      	ldrb	r3, [r4, #1]
 8020cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8020cd4:	d134      	bne.n	8020d40 <_vfiprintf_r+0x1b0>
 8020cd6:	9b03      	ldr	r3, [sp, #12]
 8020cd8:	1d1a      	adds	r2, r3, #4
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	9203      	str	r2, [sp, #12]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	bfb8      	it	lt
 8020ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ce6:	3402      	adds	r4, #2
 8020ce8:	9305      	str	r3, [sp, #20]
 8020cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8020dc0 <_vfiprintf_r+0x230>
 8020cee:	7821      	ldrb	r1, [r4, #0]
 8020cf0:	2203      	movs	r2, #3
 8020cf2:	4650      	mov	r0, sl
 8020cf4:	f7df fa7c 	bl	80001f0 <memchr>
 8020cf8:	b138      	cbz	r0, 8020d0a <_vfiprintf_r+0x17a>
 8020cfa:	9b04      	ldr	r3, [sp, #16]
 8020cfc:	eba0 000a 	sub.w	r0, r0, sl
 8020d00:	2240      	movs	r2, #64	; 0x40
 8020d02:	4082      	lsls	r2, r0
 8020d04:	4313      	orrs	r3, r2
 8020d06:	3401      	adds	r4, #1
 8020d08:	9304      	str	r3, [sp, #16]
 8020d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d0e:	4829      	ldr	r0, [pc, #164]	; (8020db4 <_vfiprintf_r+0x224>)
 8020d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020d14:	2206      	movs	r2, #6
 8020d16:	f7df fa6b 	bl	80001f0 <memchr>
 8020d1a:	2800      	cmp	r0, #0
 8020d1c:	d03f      	beq.n	8020d9e <_vfiprintf_r+0x20e>
 8020d1e:	4b26      	ldr	r3, [pc, #152]	; (8020db8 <_vfiprintf_r+0x228>)
 8020d20:	bb1b      	cbnz	r3, 8020d6a <_vfiprintf_r+0x1da>
 8020d22:	9b03      	ldr	r3, [sp, #12]
 8020d24:	3307      	adds	r3, #7
 8020d26:	f023 0307 	bic.w	r3, r3, #7
 8020d2a:	3308      	adds	r3, #8
 8020d2c:	9303      	str	r3, [sp, #12]
 8020d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d30:	443b      	add	r3, r7
 8020d32:	9309      	str	r3, [sp, #36]	; 0x24
 8020d34:	e768      	b.n	8020c08 <_vfiprintf_r+0x78>
 8020d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8020d3a:	460c      	mov	r4, r1
 8020d3c:	2001      	movs	r0, #1
 8020d3e:	e7a6      	b.n	8020c8e <_vfiprintf_r+0xfe>
 8020d40:	2300      	movs	r3, #0
 8020d42:	3401      	adds	r4, #1
 8020d44:	9305      	str	r3, [sp, #20]
 8020d46:	4619      	mov	r1, r3
 8020d48:	f04f 0c0a 	mov.w	ip, #10
 8020d4c:	4620      	mov	r0, r4
 8020d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d52:	3a30      	subs	r2, #48	; 0x30
 8020d54:	2a09      	cmp	r2, #9
 8020d56:	d903      	bls.n	8020d60 <_vfiprintf_r+0x1d0>
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d0c6      	beq.n	8020cea <_vfiprintf_r+0x15a>
 8020d5c:	9105      	str	r1, [sp, #20]
 8020d5e:	e7c4      	b.n	8020cea <_vfiprintf_r+0x15a>
 8020d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8020d64:	4604      	mov	r4, r0
 8020d66:	2301      	movs	r3, #1
 8020d68:	e7f0      	b.n	8020d4c <_vfiprintf_r+0x1bc>
 8020d6a:	ab03      	add	r3, sp, #12
 8020d6c:	9300      	str	r3, [sp, #0]
 8020d6e:	462a      	mov	r2, r5
 8020d70:	4b12      	ldr	r3, [pc, #72]	; (8020dbc <_vfiprintf_r+0x22c>)
 8020d72:	a904      	add	r1, sp, #16
 8020d74:	4630      	mov	r0, r6
 8020d76:	f3af 8000 	nop.w
 8020d7a:	4607      	mov	r7, r0
 8020d7c:	1c78      	adds	r0, r7, #1
 8020d7e:	d1d6      	bne.n	8020d2e <_vfiprintf_r+0x19e>
 8020d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d82:	07d9      	lsls	r1, r3, #31
 8020d84:	d405      	bmi.n	8020d92 <_vfiprintf_r+0x202>
 8020d86:	89ab      	ldrh	r3, [r5, #12]
 8020d88:	059a      	lsls	r2, r3, #22
 8020d8a:	d402      	bmi.n	8020d92 <_vfiprintf_r+0x202>
 8020d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d8e:	f7fe fcf0 	bl	801f772 <__retarget_lock_release_recursive>
 8020d92:	89ab      	ldrh	r3, [r5, #12]
 8020d94:	065b      	lsls	r3, r3, #25
 8020d96:	f53f af1d 	bmi.w	8020bd4 <_vfiprintf_r+0x44>
 8020d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020d9c:	e71c      	b.n	8020bd8 <_vfiprintf_r+0x48>
 8020d9e:	ab03      	add	r3, sp, #12
 8020da0:	9300      	str	r3, [sp, #0]
 8020da2:	462a      	mov	r2, r5
 8020da4:	4b05      	ldr	r3, [pc, #20]	; (8020dbc <_vfiprintf_r+0x22c>)
 8020da6:	a904      	add	r1, sp, #16
 8020da8:	4630      	mov	r0, r6
 8020daa:	f000 f879 	bl	8020ea0 <_printf_i>
 8020dae:	e7e4      	b.n	8020d7a <_vfiprintf_r+0x1ea>
 8020db0:	08024364 	.word	0x08024364
 8020db4:	0802436e 	.word	0x0802436e
 8020db8:	00000000 	.word	0x00000000
 8020dbc:	08020b6b 	.word	0x08020b6b
 8020dc0:	0802436a 	.word	0x0802436a

08020dc4 <_printf_common>:
 8020dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020dc8:	4616      	mov	r6, r2
 8020dca:	4699      	mov	r9, r3
 8020dcc:	688a      	ldr	r2, [r1, #8]
 8020dce:	690b      	ldr	r3, [r1, #16]
 8020dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020dd4:	4293      	cmp	r3, r2
 8020dd6:	bfb8      	it	lt
 8020dd8:	4613      	movlt	r3, r2
 8020dda:	6033      	str	r3, [r6, #0]
 8020ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020de0:	4607      	mov	r7, r0
 8020de2:	460c      	mov	r4, r1
 8020de4:	b10a      	cbz	r2, 8020dea <_printf_common+0x26>
 8020de6:	3301      	adds	r3, #1
 8020de8:	6033      	str	r3, [r6, #0]
 8020dea:	6823      	ldr	r3, [r4, #0]
 8020dec:	0699      	lsls	r1, r3, #26
 8020dee:	bf42      	ittt	mi
 8020df0:	6833      	ldrmi	r3, [r6, #0]
 8020df2:	3302      	addmi	r3, #2
 8020df4:	6033      	strmi	r3, [r6, #0]
 8020df6:	6825      	ldr	r5, [r4, #0]
 8020df8:	f015 0506 	ands.w	r5, r5, #6
 8020dfc:	d106      	bne.n	8020e0c <_printf_common+0x48>
 8020dfe:	f104 0a19 	add.w	sl, r4, #25
 8020e02:	68e3      	ldr	r3, [r4, #12]
 8020e04:	6832      	ldr	r2, [r6, #0]
 8020e06:	1a9b      	subs	r3, r3, r2
 8020e08:	42ab      	cmp	r3, r5
 8020e0a:	dc26      	bgt.n	8020e5a <_printf_common+0x96>
 8020e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020e10:	1e13      	subs	r3, r2, #0
 8020e12:	6822      	ldr	r2, [r4, #0]
 8020e14:	bf18      	it	ne
 8020e16:	2301      	movne	r3, #1
 8020e18:	0692      	lsls	r2, r2, #26
 8020e1a:	d42b      	bmi.n	8020e74 <_printf_common+0xb0>
 8020e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020e20:	4649      	mov	r1, r9
 8020e22:	4638      	mov	r0, r7
 8020e24:	47c0      	blx	r8
 8020e26:	3001      	adds	r0, #1
 8020e28:	d01e      	beq.n	8020e68 <_printf_common+0xa4>
 8020e2a:	6823      	ldr	r3, [r4, #0]
 8020e2c:	6922      	ldr	r2, [r4, #16]
 8020e2e:	f003 0306 	and.w	r3, r3, #6
 8020e32:	2b04      	cmp	r3, #4
 8020e34:	bf02      	ittt	eq
 8020e36:	68e5      	ldreq	r5, [r4, #12]
 8020e38:	6833      	ldreq	r3, [r6, #0]
 8020e3a:	1aed      	subeq	r5, r5, r3
 8020e3c:	68a3      	ldr	r3, [r4, #8]
 8020e3e:	bf0c      	ite	eq
 8020e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020e44:	2500      	movne	r5, #0
 8020e46:	4293      	cmp	r3, r2
 8020e48:	bfc4      	itt	gt
 8020e4a:	1a9b      	subgt	r3, r3, r2
 8020e4c:	18ed      	addgt	r5, r5, r3
 8020e4e:	2600      	movs	r6, #0
 8020e50:	341a      	adds	r4, #26
 8020e52:	42b5      	cmp	r5, r6
 8020e54:	d11a      	bne.n	8020e8c <_printf_common+0xc8>
 8020e56:	2000      	movs	r0, #0
 8020e58:	e008      	b.n	8020e6c <_printf_common+0xa8>
 8020e5a:	2301      	movs	r3, #1
 8020e5c:	4652      	mov	r2, sl
 8020e5e:	4649      	mov	r1, r9
 8020e60:	4638      	mov	r0, r7
 8020e62:	47c0      	blx	r8
 8020e64:	3001      	adds	r0, #1
 8020e66:	d103      	bne.n	8020e70 <_printf_common+0xac>
 8020e68:	f04f 30ff 	mov.w	r0, #4294967295
 8020e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e70:	3501      	adds	r5, #1
 8020e72:	e7c6      	b.n	8020e02 <_printf_common+0x3e>
 8020e74:	18e1      	adds	r1, r4, r3
 8020e76:	1c5a      	adds	r2, r3, #1
 8020e78:	2030      	movs	r0, #48	; 0x30
 8020e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020e7e:	4422      	add	r2, r4
 8020e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020e88:	3302      	adds	r3, #2
 8020e8a:	e7c7      	b.n	8020e1c <_printf_common+0x58>
 8020e8c:	2301      	movs	r3, #1
 8020e8e:	4622      	mov	r2, r4
 8020e90:	4649      	mov	r1, r9
 8020e92:	4638      	mov	r0, r7
 8020e94:	47c0      	blx	r8
 8020e96:	3001      	adds	r0, #1
 8020e98:	d0e6      	beq.n	8020e68 <_printf_common+0xa4>
 8020e9a:	3601      	adds	r6, #1
 8020e9c:	e7d9      	b.n	8020e52 <_printf_common+0x8e>
	...

08020ea0 <_printf_i>:
 8020ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ea4:	7e0f      	ldrb	r7, [r1, #24]
 8020ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020ea8:	2f78      	cmp	r7, #120	; 0x78
 8020eaa:	4691      	mov	r9, r2
 8020eac:	4680      	mov	r8, r0
 8020eae:	460c      	mov	r4, r1
 8020eb0:	469a      	mov	sl, r3
 8020eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020eb6:	d807      	bhi.n	8020ec8 <_printf_i+0x28>
 8020eb8:	2f62      	cmp	r7, #98	; 0x62
 8020eba:	d80a      	bhi.n	8020ed2 <_printf_i+0x32>
 8020ebc:	2f00      	cmp	r7, #0
 8020ebe:	f000 80d4 	beq.w	802106a <_printf_i+0x1ca>
 8020ec2:	2f58      	cmp	r7, #88	; 0x58
 8020ec4:	f000 80c0 	beq.w	8021048 <_printf_i+0x1a8>
 8020ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020ed0:	e03a      	b.n	8020f48 <_printf_i+0xa8>
 8020ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020ed6:	2b15      	cmp	r3, #21
 8020ed8:	d8f6      	bhi.n	8020ec8 <_printf_i+0x28>
 8020eda:	a101      	add	r1, pc, #4	; (adr r1, 8020ee0 <_printf_i+0x40>)
 8020edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020ee0:	08020f39 	.word	0x08020f39
 8020ee4:	08020f4d 	.word	0x08020f4d
 8020ee8:	08020ec9 	.word	0x08020ec9
 8020eec:	08020ec9 	.word	0x08020ec9
 8020ef0:	08020ec9 	.word	0x08020ec9
 8020ef4:	08020ec9 	.word	0x08020ec9
 8020ef8:	08020f4d 	.word	0x08020f4d
 8020efc:	08020ec9 	.word	0x08020ec9
 8020f00:	08020ec9 	.word	0x08020ec9
 8020f04:	08020ec9 	.word	0x08020ec9
 8020f08:	08020ec9 	.word	0x08020ec9
 8020f0c:	08021051 	.word	0x08021051
 8020f10:	08020f79 	.word	0x08020f79
 8020f14:	0802100b 	.word	0x0802100b
 8020f18:	08020ec9 	.word	0x08020ec9
 8020f1c:	08020ec9 	.word	0x08020ec9
 8020f20:	08021073 	.word	0x08021073
 8020f24:	08020ec9 	.word	0x08020ec9
 8020f28:	08020f79 	.word	0x08020f79
 8020f2c:	08020ec9 	.word	0x08020ec9
 8020f30:	08020ec9 	.word	0x08020ec9
 8020f34:	08021013 	.word	0x08021013
 8020f38:	682b      	ldr	r3, [r5, #0]
 8020f3a:	1d1a      	adds	r2, r3, #4
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	602a      	str	r2, [r5, #0]
 8020f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020f48:	2301      	movs	r3, #1
 8020f4a:	e09f      	b.n	802108c <_printf_i+0x1ec>
 8020f4c:	6820      	ldr	r0, [r4, #0]
 8020f4e:	682b      	ldr	r3, [r5, #0]
 8020f50:	0607      	lsls	r7, r0, #24
 8020f52:	f103 0104 	add.w	r1, r3, #4
 8020f56:	6029      	str	r1, [r5, #0]
 8020f58:	d501      	bpl.n	8020f5e <_printf_i+0xbe>
 8020f5a:	681e      	ldr	r6, [r3, #0]
 8020f5c:	e003      	b.n	8020f66 <_printf_i+0xc6>
 8020f5e:	0646      	lsls	r6, r0, #25
 8020f60:	d5fb      	bpl.n	8020f5a <_printf_i+0xba>
 8020f62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020f66:	2e00      	cmp	r6, #0
 8020f68:	da03      	bge.n	8020f72 <_printf_i+0xd2>
 8020f6a:	232d      	movs	r3, #45	; 0x2d
 8020f6c:	4276      	negs	r6, r6
 8020f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020f72:	485a      	ldr	r0, [pc, #360]	; (80210dc <_printf_i+0x23c>)
 8020f74:	230a      	movs	r3, #10
 8020f76:	e012      	b.n	8020f9e <_printf_i+0xfe>
 8020f78:	682b      	ldr	r3, [r5, #0]
 8020f7a:	6820      	ldr	r0, [r4, #0]
 8020f7c:	1d19      	adds	r1, r3, #4
 8020f7e:	6029      	str	r1, [r5, #0]
 8020f80:	0605      	lsls	r5, r0, #24
 8020f82:	d501      	bpl.n	8020f88 <_printf_i+0xe8>
 8020f84:	681e      	ldr	r6, [r3, #0]
 8020f86:	e002      	b.n	8020f8e <_printf_i+0xee>
 8020f88:	0641      	lsls	r1, r0, #25
 8020f8a:	d5fb      	bpl.n	8020f84 <_printf_i+0xe4>
 8020f8c:	881e      	ldrh	r6, [r3, #0]
 8020f8e:	4853      	ldr	r0, [pc, #332]	; (80210dc <_printf_i+0x23c>)
 8020f90:	2f6f      	cmp	r7, #111	; 0x6f
 8020f92:	bf0c      	ite	eq
 8020f94:	2308      	moveq	r3, #8
 8020f96:	230a      	movne	r3, #10
 8020f98:	2100      	movs	r1, #0
 8020f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020f9e:	6865      	ldr	r5, [r4, #4]
 8020fa0:	60a5      	str	r5, [r4, #8]
 8020fa2:	2d00      	cmp	r5, #0
 8020fa4:	bfa2      	ittt	ge
 8020fa6:	6821      	ldrge	r1, [r4, #0]
 8020fa8:	f021 0104 	bicge.w	r1, r1, #4
 8020fac:	6021      	strge	r1, [r4, #0]
 8020fae:	b90e      	cbnz	r6, 8020fb4 <_printf_i+0x114>
 8020fb0:	2d00      	cmp	r5, #0
 8020fb2:	d04b      	beq.n	802104c <_printf_i+0x1ac>
 8020fb4:	4615      	mov	r5, r2
 8020fb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8020fba:	fb03 6711 	mls	r7, r3, r1, r6
 8020fbe:	5dc7      	ldrb	r7, [r0, r7]
 8020fc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020fc4:	4637      	mov	r7, r6
 8020fc6:	42bb      	cmp	r3, r7
 8020fc8:	460e      	mov	r6, r1
 8020fca:	d9f4      	bls.n	8020fb6 <_printf_i+0x116>
 8020fcc:	2b08      	cmp	r3, #8
 8020fce:	d10b      	bne.n	8020fe8 <_printf_i+0x148>
 8020fd0:	6823      	ldr	r3, [r4, #0]
 8020fd2:	07de      	lsls	r6, r3, #31
 8020fd4:	d508      	bpl.n	8020fe8 <_printf_i+0x148>
 8020fd6:	6923      	ldr	r3, [r4, #16]
 8020fd8:	6861      	ldr	r1, [r4, #4]
 8020fda:	4299      	cmp	r1, r3
 8020fdc:	bfde      	ittt	le
 8020fde:	2330      	movle	r3, #48	; 0x30
 8020fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020fe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020fe8:	1b52      	subs	r2, r2, r5
 8020fea:	6122      	str	r2, [r4, #16]
 8020fec:	f8cd a000 	str.w	sl, [sp]
 8020ff0:	464b      	mov	r3, r9
 8020ff2:	aa03      	add	r2, sp, #12
 8020ff4:	4621      	mov	r1, r4
 8020ff6:	4640      	mov	r0, r8
 8020ff8:	f7ff fee4 	bl	8020dc4 <_printf_common>
 8020ffc:	3001      	adds	r0, #1
 8020ffe:	d14a      	bne.n	8021096 <_printf_i+0x1f6>
 8021000:	f04f 30ff 	mov.w	r0, #4294967295
 8021004:	b004      	add	sp, #16
 8021006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802100a:	6823      	ldr	r3, [r4, #0]
 802100c:	f043 0320 	orr.w	r3, r3, #32
 8021010:	6023      	str	r3, [r4, #0]
 8021012:	4833      	ldr	r0, [pc, #204]	; (80210e0 <_printf_i+0x240>)
 8021014:	2778      	movs	r7, #120	; 0x78
 8021016:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802101a:	6823      	ldr	r3, [r4, #0]
 802101c:	6829      	ldr	r1, [r5, #0]
 802101e:	061f      	lsls	r7, r3, #24
 8021020:	f851 6b04 	ldr.w	r6, [r1], #4
 8021024:	d402      	bmi.n	802102c <_printf_i+0x18c>
 8021026:	065f      	lsls	r7, r3, #25
 8021028:	bf48      	it	mi
 802102a:	b2b6      	uxthmi	r6, r6
 802102c:	07df      	lsls	r7, r3, #31
 802102e:	bf48      	it	mi
 8021030:	f043 0320 	orrmi.w	r3, r3, #32
 8021034:	6029      	str	r1, [r5, #0]
 8021036:	bf48      	it	mi
 8021038:	6023      	strmi	r3, [r4, #0]
 802103a:	b91e      	cbnz	r6, 8021044 <_printf_i+0x1a4>
 802103c:	6823      	ldr	r3, [r4, #0]
 802103e:	f023 0320 	bic.w	r3, r3, #32
 8021042:	6023      	str	r3, [r4, #0]
 8021044:	2310      	movs	r3, #16
 8021046:	e7a7      	b.n	8020f98 <_printf_i+0xf8>
 8021048:	4824      	ldr	r0, [pc, #144]	; (80210dc <_printf_i+0x23c>)
 802104a:	e7e4      	b.n	8021016 <_printf_i+0x176>
 802104c:	4615      	mov	r5, r2
 802104e:	e7bd      	b.n	8020fcc <_printf_i+0x12c>
 8021050:	682b      	ldr	r3, [r5, #0]
 8021052:	6826      	ldr	r6, [r4, #0]
 8021054:	6961      	ldr	r1, [r4, #20]
 8021056:	1d18      	adds	r0, r3, #4
 8021058:	6028      	str	r0, [r5, #0]
 802105a:	0635      	lsls	r5, r6, #24
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	d501      	bpl.n	8021064 <_printf_i+0x1c4>
 8021060:	6019      	str	r1, [r3, #0]
 8021062:	e002      	b.n	802106a <_printf_i+0x1ca>
 8021064:	0670      	lsls	r0, r6, #25
 8021066:	d5fb      	bpl.n	8021060 <_printf_i+0x1c0>
 8021068:	8019      	strh	r1, [r3, #0]
 802106a:	2300      	movs	r3, #0
 802106c:	6123      	str	r3, [r4, #16]
 802106e:	4615      	mov	r5, r2
 8021070:	e7bc      	b.n	8020fec <_printf_i+0x14c>
 8021072:	682b      	ldr	r3, [r5, #0]
 8021074:	1d1a      	adds	r2, r3, #4
 8021076:	602a      	str	r2, [r5, #0]
 8021078:	681d      	ldr	r5, [r3, #0]
 802107a:	6862      	ldr	r2, [r4, #4]
 802107c:	2100      	movs	r1, #0
 802107e:	4628      	mov	r0, r5
 8021080:	f7df f8b6 	bl	80001f0 <memchr>
 8021084:	b108      	cbz	r0, 802108a <_printf_i+0x1ea>
 8021086:	1b40      	subs	r0, r0, r5
 8021088:	6060      	str	r0, [r4, #4]
 802108a:	6863      	ldr	r3, [r4, #4]
 802108c:	6123      	str	r3, [r4, #16]
 802108e:	2300      	movs	r3, #0
 8021090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021094:	e7aa      	b.n	8020fec <_printf_i+0x14c>
 8021096:	6923      	ldr	r3, [r4, #16]
 8021098:	462a      	mov	r2, r5
 802109a:	4649      	mov	r1, r9
 802109c:	4640      	mov	r0, r8
 802109e:	47d0      	blx	sl
 80210a0:	3001      	adds	r0, #1
 80210a2:	d0ad      	beq.n	8021000 <_printf_i+0x160>
 80210a4:	6823      	ldr	r3, [r4, #0]
 80210a6:	079b      	lsls	r3, r3, #30
 80210a8:	d413      	bmi.n	80210d2 <_printf_i+0x232>
 80210aa:	68e0      	ldr	r0, [r4, #12]
 80210ac:	9b03      	ldr	r3, [sp, #12]
 80210ae:	4298      	cmp	r0, r3
 80210b0:	bfb8      	it	lt
 80210b2:	4618      	movlt	r0, r3
 80210b4:	e7a6      	b.n	8021004 <_printf_i+0x164>
 80210b6:	2301      	movs	r3, #1
 80210b8:	4632      	mov	r2, r6
 80210ba:	4649      	mov	r1, r9
 80210bc:	4640      	mov	r0, r8
 80210be:	47d0      	blx	sl
 80210c0:	3001      	adds	r0, #1
 80210c2:	d09d      	beq.n	8021000 <_printf_i+0x160>
 80210c4:	3501      	adds	r5, #1
 80210c6:	68e3      	ldr	r3, [r4, #12]
 80210c8:	9903      	ldr	r1, [sp, #12]
 80210ca:	1a5b      	subs	r3, r3, r1
 80210cc:	42ab      	cmp	r3, r5
 80210ce:	dcf2      	bgt.n	80210b6 <_printf_i+0x216>
 80210d0:	e7eb      	b.n	80210aa <_printf_i+0x20a>
 80210d2:	2500      	movs	r5, #0
 80210d4:	f104 0619 	add.w	r6, r4, #25
 80210d8:	e7f5      	b.n	80210c6 <_printf_i+0x226>
 80210da:	bf00      	nop
 80210dc:	08024375 	.word	0x08024375
 80210e0:	08024386 	.word	0x08024386

080210e4 <__swhatbuf_r>:
 80210e4:	b570      	push	{r4, r5, r6, lr}
 80210e6:	460c      	mov	r4, r1
 80210e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80210ec:	2900      	cmp	r1, #0
 80210ee:	b096      	sub	sp, #88	; 0x58
 80210f0:	4615      	mov	r5, r2
 80210f2:	461e      	mov	r6, r3
 80210f4:	da0d      	bge.n	8021112 <__swhatbuf_r+0x2e>
 80210f6:	89a3      	ldrh	r3, [r4, #12]
 80210f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80210fc:	f04f 0100 	mov.w	r1, #0
 8021100:	bf0c      	ite	eq
 8021102:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021106:	2340      	movne	r3, #64	; 0x40
 8021108:	2000      	movs	r0, #0
 802110a:	6031      	str	r1, [r6, #0]
 802110c:	602b      	str	r3, [r5, #0]
 802110e:	b016      	add	sp, #88	; 0x58
 8021110:	bd70      	pop	{r4, r5, r6, pc}
 8021112:	466a      	mov	r2, sp
 8021114:	f000 f848 	bl	80211a8 <_fstat_r>
 8021118:	2800      	cmp	r0, #0
 802111a:	dbec      	blt.n	80210f6 <__swhatbuf_r+0x12>
 802111c:	9901      	ldr	r1, [sp, #4]
 802111e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021122:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021126:	4259      	negs	r1, r3
 8021128:	4159      	adcs	r1, r3
 802112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802112e:	e7eb      	b.n	8021108 <__swhatbuf_r+0x24>

08021130 <__smakebuf_r>:
 8021130:	898b      	ldrh	r3, [r1, #12]
 8021132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021134:	079d      	lsls	r5, r3, #30
 8021136:	4606      	mov	r6, r0
 8021138:	460c      	mov	r4, r1
 802113a:	d507      	bpl.n	802114c <__smakebuf_r+0x1c>
 802113c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021140:	6023      	str	r3, [r4, #0]
 8021142:	6123      	str	r3, [r4, #16]
 8021144:	2301      	movs	r3, #1
 8021146:	6163      	str	r3, [r4, #20]
 8021148:	b002      	add	sp, #8
 802114a:	bd70      	pop	{r4, r5, r6, pc}
 802114c:	ab01      	add	r3, sp, #4
 802114e:	466a      	mov	r2, sp
 8021150:	f7ff ffc8 	bl	80210e4 <__swhatbuf_r>
 8021154:	9900      	ldr	r1, [sp, #0]
 8021156:	4605      	mov	r5, r0
 8021158:	4630      	mov	r0, r6
 802115a:	f7fc fe05 	bl	801dd68 <_malloc_r>
 802115e:	b948      	cbnz	r0, 8021174 <__smakebuf_r+0x44>
 8021160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021164:	059a      	lsls	r2, r3, #22
 8021166:	d4ef      	bmi.n	8021148 <__smakebuf_r+0x18>
 8021168:	f023 0303 	bic.w	r3, r3, #3
 802116c:	f043 0302 	orr.w	r3, r3, #2
 8021170:	81a3      	strh	r3, [r4, #12]
 8021172:	e7e3      	b.n	802113c <__smakebuf_r+0xc>
 8021174:	89a3      	ldrh	r3, [r4, #12]
 8021176:	6020      	str	r0, [r4, #0]
 8021178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802117c:	81a3      	strh	r3, [r4, #12]
 802117e:	9b00      	ldr	r3, [sp, #0]
 8021180:	6163      	str	r3, [r4, #20]
 8021182:	9b01      	ldr	r3, [sp, #4]
 8021184:	6120      	str	r0, [r4, #16]
 8021186:	b15b      	cbz	r3, 80211a0 <__smakebuf_r+0x70>
 8021188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802118c:	4630      	mov	r0, r6
 802118e:	f000 f81d 	bl	80211cc <_isatty_r>
 8021192:	b128      	cbz	r0, 80211a0 <__smakebuf_r+0x70>
 8021194:	89a3      	ldrh	r3, [r4, #12]
 8021196:	f023 0303 	bic.w	r3, r3, #3
 802119a:	f043 0301 	orr.w	r3, r3, #1
 802119e:	81a3      	strh	r3, [r4, #12]
 80211a0:	89a3      	ldrh	r3, [r4, #12]
 80211a2:	431d      	orrs	r5, r3
 80211a4:	81a5      	strh	r5, [r4, #12]
 80211a6:	e7cf      	b.n	8021148 <__smakebuf_r+0x18>

080211a8 <_fstat_r>:
 80211a8:	b538      	push	{r3, r4, r5, lr}
 80211aa:	4d07      	ldr	r5, [pc, #28]	; (80211c8 <_fstat_r+0x20>)
 80211ac:	2300      	movs	r3, #0
 80211ae:	4604      	mov	r4, r0
 80211b0:	4608      	mov	r0, r1
 80211b2:	4611      	mov	r1, r2
 80211b4:	602b      	str	r3, [r5, #0]
 80211b6:	f7f3 f83c 	bl	8014232 <_fstat>
 80211ba:	1c43      	adds	r3, r0, #1
 80211bc:	d102      	bne.n	80211c4 <_fstat_r+0x1c>
 80211be:	682b      	ldr	r3, [r5, #0]
 80211c0:	b103      	cbz	r3, 80211c4 <_fstat_r+0x1c>
 80211c2:	6023      	str	r3, [r4, #0]
 80211c4:	bd38      	pop	{r3, r4, r5, pc}
 80211c6:	bf00      	nop
 80211c8:	20002b1c 	.word	0x20002b1c

080211cc <_isatty_r>:
 80211cc:	b538      	push	{r3, r4, r5, lr}
 80211ce:	4d06      	ldr	r5, [pc, #24]	; (80211e8 <_isatty_r+0x1c>)
 80211d0:	2300      	movs	r3, #0
 80211d2:	4604      	mov	r4, r0
 80211d4:	4608      	mov	r0, r1
 80211d6:	602b      	str	r3, [r5, #0]
 80211d8:	f7f3 f83b 	bl	8014252 <_isatty>
 80211dc:	1c43      	adds	r3, r0, #1
 80211de:	d102      	bne.n	80211e6 <_isatty_r+0x1a>
 80211e0:	682b      	ldr	r3, [r5, #0]
 80211e2:	b103      	cbz	r3, 80211e6 <_isatty_r+0x1a>
 80211e4:	6023      	str	r3, [r4, #0]
 80211e6:	bd38      	pop	{r3, r4, r5, pc}
 80211e8:	20002b1c 	.word	0x20002b1c

080211ec <__assert_func>:
 80211ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211ee:	4614      	mov	r4, r2
 80211f0:	461a      	mov	r2, r3
 80211f2:	4b09      	ldr	r3, [pc, #36]	; (8021218 <__assert_func+0x2c>)
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	4605      	mov	r5, r0
 80211f8:	68d8      	ldr	r0, [r3, #12]
 80211fa:	b14c      	cbz	r4, 8021210 <__assert_func+0x24>
 80211fc:	4b07      	ldr	r3, [pc, #28]	; (802121c <__assert_func+0x30>)
 80211fe:	9100      	str	r1, [sp, #0]
 8021200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021204:	4906      	ldr	r1, [pc, #24]	; (8021220 <__assert_func+0x34>)
 8021206:	462b      	mov	r3, r5
 8021208:	f000 f83e 	bl	8021288 <fiprintf>
 802120c:	f000 f84e 	bl	80212ac <abort>
 8021210:	4b04      	ldr	r3, [pc, #16]	; (8021224 <__assert_func+0x38>)
 8021212:	461c      	mov	r4, r3
 8021214:	e7f3      	b.n	80211fe <__assert_func+0x12>
 8021216:	bf00      	nop
 8021218:	2000090c 	.word	0x2000090c
 802121c:	08024397 	.word	0x08024397
 8021220:	080243a4 	.word	0x080243a4
 8021224:	080243d2 	.word	0x080243d2

08021228 <_realloc_r>:
 8021228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802122c:	4680      	mov	r8, r0
 802122e:	4614      	mov	r4, r2
 8021230:	460e      	mov	r6, r1
 8021232:	b921      	cbnz	r1, 802123e <_realloc_r+0x16>
 8021234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021238:	4611      	mov	r1, r2
 802123a:	f7fc bd95 	b.w	801dd68 <_malloc_r>
 802123e:	b92a      	cbnz	r2, 802124c <_realloc_r+0x24>
 8021240:	f7fe fab4 	bl	801f7ac <_free_r>
 8021244:	4625      	mov	r5, r4
 8021246:	4628      	mov	r0, r5
 8021248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802124c:	f000 f835 	bl	80212ba <_malloc_usable_size_r>
 8021250:	4284      	cmp	r4, r0
 8021252:	4607      	mov	r7, r0
 8021254:	d802      	bhi.n	802125c <_realloc_r+0x34>
 8021256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802125a:	d812      	bhi.n	8021282 <_realloc_r+0x5a>
 802125c:	4621      	mov	r1, r4
 802125e:	4640      	mov	r0, r8
 8021260:	f7fc fd82 	bl	801dd68 <_malloc_r>
 8021264:	4605      	mov	r5, r0
 8021266:	2800      	cmp	r0, #0
 8021268:	d0ed      	beq.n	8021246 <_realloc_r+0x1e>
 802126a:	42bc      	cmp	r4, r7
 802126c:	4622      	mov	r2, r4
 802126e:	4631      	mov	r1, r6
 8021270:	bf28      	it	cs
 8021272:	463a      	movcs	r2, r7
 8021274:	f7fe fa7e 	bl	801f774 <memcpy>
 8021278:	4631      	mov	r1, r6
 802127a:	4640      	mov	r0, r8
 802127c:	f7fe fa96 	bl	801f7ac <_free_r>
 8021280:	e7e1      	b.n	8021246 <_realloc_r+0x1e>
 8021282:	4635      	mov	r5, r6
 8021284:	e7df      	b.n	8021246 <_realloc_r+0x1e>
	...

08021288 <fiprintf>:
 8021288:	b40e      	push	{r1, r2, r3}
 802128a:	b503      	push	{r0, r1, lr}
 802128c:	4601      	mov	r1, r0
 802128e:	ab03      	add	r3, sp, #12
 8021290:	4805      	ldr	r0, [pc, #20]	; (80212a8 <fiprintf+0x20>)
 8021292:	f853 2b04 	ldr.w	r2, [r3], #4
 8021296:	6800      	ldr	r0, [r0, #0]
 8021298:	9301      	str	r3, [sp, #4]
 802129a:	f7ff fc79 	bl	8020b90 <_vfiprintf_r>
 802129e:	b002      	add	sp, #8
 80212a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80212a4:	b003      	add	sp, #12
 80212a6:	4770      	bx	lr
 80212a8:	2000090c 	.word	0x2000090c

080212ac <abort>:
 80212ac:	b508      	push	{r3, lr}
 80212ae:	2006      	movs	r0, #6
 80212b0:	f000 f834 	bl	802131c <raise>
 80212b4:	2001      	movs	r0, #1
 80212b6:	f7f2 ff6d 	bl	8014194 <_exit>

080212ba <_malloc_usable_size_r>:
 80212ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80212be:	1f18      	subs	r0, r3, #4
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	bfbc      	itt	lt
 80212c4:	580b      	ldrlt	r3, [r1, r0]
 80212c6:	18c0      	addlt	r0, r0, r3
 80212c8:	4770      	bx	lr

080212ca <_raise_r>:
 80212ca:	291f      	cmp	r1, #31
 80212cc:	b538      	push	{r3, r4, r5, lr}
 80212ce:	4604      	mov	r4, r0
 80212d0:	460d      	mov	r5, r1
 80212d2:	d904      	bls.n	80212de <_raise_r+0x14>
 80212d4:	2316      	movs	r3, #22
 80212d6:	6003      	str	r3, [r0, #0]
 80212d8:	f04f 30ff 	mov.w	r0, #4294967295
 80212dc:	bd38      	pop	{r3, r4, r5, pc}
 80212de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80212e0:	b112      	cbz	r2, 80212e8 <_raise_r+0x1e>
 80212e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80212e6:	b94b      	cbnz	r3, 80212fc <_raise_r+0x32>
 80212e8:	4620      	mov	r0, r4
 80212ea:	f000 f831 	bl	8021350 <_getpid_r>
 80212ee:	462a      	mov	r2, r5
 80212f0:	4601      	mov	r1, r0
 80212f2:	4620      	mov	r0, r4
 80212f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80212f8:	f000 b818 	b.w	802132c <_kill_r>
 80212fc:	2b01      	cmp	r3, #1
 80212fe:	d00a      	beq.n	8021316 <_raise_r+0x4c>
 8021300:	1c59      	adds	r1, r3, #1
 8021302:	d103      	bne.n	802130c <_raise_r+0x42>
 8021304:	2316      	movs	r3, #22
 8021306:	6003      	str	r3, [r0, #0]
 8021308:	2001      	movs	r0, #1
 802130a:	e7e7      	b.n	80212dc <_raise_r+0x12>
 802130c:	2400      	movs	r4, #0
 802130e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021312:	4628      	mov	r0, r5
 8021314:	4798      	blx	r3
 8021316:	2000      	movs	r0, #0
 8021318:	e7e0      	b.n	80212dc <_raise_r+0x12>
	...

0802131c <raise>:
 802131c:	4b02      	ldr	r3, [pc, #8]	; (8021328 <raise+0xc>)
 802131e:	4601      	mov	r1, r0
 8021320:	6818      	ldr	r0, [r3, #0]
 8021322:	f7ff bfd2 	b.w	80212ca <_raise_r>
 8021326:	bf00      	nop
 8021328:	2000090c 	.word	0x2000090c

0802132c <_kill_r>:
 802132c:	b538      	push	{r3, r4, r5, lr}
 802132e:	4d07      	ldr	r5, [pc, #28]	; (802134c <_kill_r+0x20>)
 8021330:	2300      	movs	r3, #0
 8021332:	4604      	mov	r4, r0
 8021334:	4608      	mov	r0, r1
 8021336:	4611      	mov	r1, r2
 8021338:	602b      	str	r3, [r5, #0]
 802133a:	f7f2 ff1b 	bl	8014174 <_kill>
 802133e:	1c43      	adds	r3, r0, #1
 8021340:	d102      	bne.n	8021348 <_kill_r+0x1c>
 8021342:	682b      	ldr	r3, [r5, #0]
 8021344:	b103      	cbz	r3, 8021348 <_kill_r+0x1c>
 8021346:	6023      	str	r3, [r4, #0]
 8021348:	bd38      	pop	{r3, r4, r5, pc}
 802134a:	bf00      	nop
 802134c:	20002b1c 	.word	0x20002b1c

08021350 <_getpid_r>:
 8021350:	f7f2 bf08 	b.w	8014164 <_getpid>

08021354 <_init>:
 8021354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021356:	bf00      	nop
 8021358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802135a:	bc08      	pop	{r3}
 802135c:	469e      	mov	lr, r3
 802135e:	4770      	bx	lr

08021360 <_fini>:
 8021360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021362:	bf00      	nop
 8021364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021366:	bc08      	pop	{r3}
 8021368:	469e      	mov	lr, r3
 802136a:	4770      	bx	lr
